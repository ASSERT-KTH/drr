
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() {}
//   public void test1() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var45 = var44.getPattern();
//     java.util.TimeZone var46 = var44.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var49 = var48.getPattern();
//     java.util.TimeZone var50 = var48.getTimeZone();
//     java.util.Locale var54 = null;
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var54);
//     java.util.Locale var56 = var55.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var56);
//     java.util.Locale var58 = var57.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var50, var58);
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var46, var58);
//     org.apache.commons.lang3.time.FastDateFormat var63 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var64 = var63.getPattern();
//     java.util.TimeZone var65 = var63.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var67 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var68 = var67.getPattern();
//     java.util.TimeZone var69 = var67.getTimeZone();
//     java.util.Locale var73 = null;
//     org.apache.commons.lang3.time.FastDateFormat var74 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var73);
//     java.util.Locale var75 = var74.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var76 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var75);
//     java.util.Locale var77 = var76.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var69, var77);
//     org.apache.commons.lang3.time.FastDateFormat var79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var65, var77);
//     org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var77);
//     org.apache.commons.lang3.time.FastDateFormat var81 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var46, var77);
//     org.apache.commons.lang3.time.FastDateFormat var82 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15, var77);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(39, var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + "M/d/yy h:mm a"+ "'", var45.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var49 + "' != '" + "M/d/yy h:mm a"+ "'", var49.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var64 + "' != '" + "M/d/yy h:mm a"+ "'", var64.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var68 + "' != '" + "M/d/yy h:mm a"+ "'", var68.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
// 
//   }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var5 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var5);
//     java.util.Calendar var7 = null;
//     java.lang.StringBuffer var8 = null;
//     java.lang.StringBuffer var9 = var6.format(var7, var8);
// 
//   }

  public void test3() {}
//   public void test3() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     boolean var10 = var2.equals((java.lang.Object)var9);
//     java.util.Date var11 = null;
//     java.lang.StringBuffer var12 = null;
//     java.lang.StringBuffer var13 = var2.format(var11, var12);
// 
//   }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     java.lang.String var4 = var1.getPattern();
//     java.util.TimeZone var5 = var1.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(39, var5);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "M/d/yy h:mm a"+ "'", var2.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "M/d/yy h:mm a"+ "'", var4.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
// 
//   }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var6 = var2.toString();
//     java.util.Locale var7 = var2.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var9 = var8.getPattern();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     java.lang.String var11 = var8.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     boolean var13 = var8.equals((java.lang.Object)var12);
//     boolean var14 = var2.equals((java.lang.Object)var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var16 = var2.parseObject("FastDateFormat[M/d/yy h:mm a]");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var6.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "M/d/yy h:mm a"+ "'", var9.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    java.util.TimeZone var1 = null;
    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.TimeZone var7 = var6.getTimeZone();
    java.util.Locale var11 = null;
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
    java.util.TimeZone var13 = var12.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
    java.util.Locale var15 = var14.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7, var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[]", var1, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var13);
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var13, var19);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var23 = var22.getPattern();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var27 = var26.getPattern();
//     java.util.TimeZone var28 = var26.getTimeZone();
//     java.util.Locale var32 = null;
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var32);
//     java.util.Locale var34 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var28, var36);
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var24, var36);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13, var36);
//     java.util.Date var40 = null;
//     java.lang.StringBuffer var41 = null;
//     java.lang.StringBuffer var42 = var39.format(var40, var41);
// 
//   }

  public void test8() {}
//   public void test8() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var15 = var13.parseObject("FastDateFormat[MMMM d, yyyy h:mm:ss a z]");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test9() {}
//   public void test9() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var8);
//     java.lang.Object var13 = var12.clone();
//     java.util.Date var14 = null;
//     java.lang.StringBuffer var15 = null;
//     java.lang.StringBuffer var16 = var12.format(var14, var15);
// 
//   }

  public void test10() {}
//   public void test10() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.String var8 = var3.format(1L);
//     int var9 = var3.getMaxLengthEstimate();
//     java.lang.Object var10 = var3.clone();
//     java.util.TimeZone var11 = var3.getTimeZone();
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var20);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var20);
//     boolean var24 = var23.getTimeZoneOverridesCalendar();
//     boolean var25 = var23.getTimeZoneOverridesCalendar();
//     java.util.Locale var26 = var23.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var26);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[h:mm:ss a z]", var11, var26);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
// 
//   }

  public void test11() {}
//   public void test11() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.lang.StringBuffer var3 = null;
//     java.lang.StringBuffer var4 = var1.format(1L, var3);
// 
//   }

  public void test12() {}
//   public void test12() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var6 = var5.getPattern();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     java.util.Locale var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var3, var15);
//     java.lang.StringBuffer var19 = null;
//     java.lang.StringBuffer var20 = var17.format(100L, var19);
// 
//   }

  public void test13() {}
//   public void test13() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     boolean var3 = var0.getTimeZoneOverridesCalendar();
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.TimeZone var9 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     java.util.TimeZone var11 = var10.getTimeZone();
//     java.lang.Object var12 = var10.clone();
//     java.lang.StringBuffer var13 = null;
//     java.text.FieldPosition var14 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var15 = var0.format((java.lang.Object)var10, var13, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
// 
//   }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Wednesday, December 31, 1969");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.TimeZone var7 = var6.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    boolean var10 = var8.equals((java.lang.Object)(byte)10);
    java.util.Locale var11 = var8.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(17, 39, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test16() {}
//   public void test16() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a");
//     boolean var2 = var1.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.util.Locale var24 = null;
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var24);
//     java.util.TimeZone var26 = var25.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var26);
//     java.util.Locale var32 = null;
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var32);
//     java.util.Locale var34 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var36);
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var26, var36);
//     java.util.TimeZone var43 = null;
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var43);
//     boolean var45 = var44.getTimeZoneOverridesCalendar();
//     java.lang.String var47 = var44.format(1L);
//     java.lang.String var49 = var44.format(1L);
//     int var50 = var44.getMaxLengthEstimate();
//     java.util.TimeZone var51 = var44.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var51);
//     java.util.Locale var55 = null;
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var55);
//     java.util.Locale var57 = var56.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var51, var57);
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var26, var57);
//     boolean var60 = var17.equals((java.lang.Object)var26);
//     org.apache.commons.lang3.time.FastDateFormat var61 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var26);
//     java.util.TimeZone var62 = var61.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var63 = var1.formatToCharacterIterator((java.lang.Object)var61);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var47 + "' != '" + "4:00:00 PM PST"+ "'", var47.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var49 + "' != '" + "4:00:00 PM PST"+ "'", var49.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
// 
//   }

  public void test17() {}
//   public void test17() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var12 = var11.getPattern();
//     java.util.TimeZone var13 = var11.getTimeZone();
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var13, var21);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var21);
//     java.util.TimeZone var24 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var24);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("December 31, 1969", var24);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "M/d/yy h:mm a"+ "'", var12.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
// 
//   }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    java.util.Locale var3 = null;
    org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
    java.util.TimeZone var5 = var4.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(100, var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var0.format(10L);
//     java.lang.String var3 = var0.toString();
//     java.util.Date var4 = null;
//     java.lang.String var5 = var0.format(var4);
// 
//   }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }
// 
// 
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.TimeZone var9 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     java.util.Locale var11 = var10.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var11);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     java.util.Calendar var15 = null;
//     java.lang.String var16 = var14.format(var15);
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format((java.lang.Object)(-1L));
//     java.util.TimeZone var6 = var2.getTimeZone();
//     java.util.Date var7 = null;
//     java.lang.StringBuffer var8 = null;
//     java.lang.StringBuffer var9 = var2.format(var7, var8);
// 
//   }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.lang.StringBuffer var15 = null;
//     java.lang.StringBuffer var16 = var13.format(100L, var15);
//     java.text.ParsePosition var18 = null;
//     java.lang.Object var19 = var13.parseObject("EEEE, MMMM d, yyyy", var18);
// 
//   }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var14 = var13.getLocale();
//     java.lang.Object var15 = var13.clone();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var18 = var17.getPattern();
//     java.util.TimeZone var19 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var22 = var21.getPattern();
//     java.util.TimeZone var23 = var21.getTimeZone();
//     java.util.Locale var27 = null;
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var27);
//     java.util.Locale var29 = var28.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var31);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19, var31);
//     boolean var34 = var13.equals((java.lang.Object)var33);
//     java.lang.String var35 = var33.getPattern();
//     java.lang.StringBuffer var37 = null;
//     java.lang.StringBuffer var38 = var33.format(100L, var37);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.Locale var7 = var6.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    java.util.Locale var9 = var8.getLocale();
    java.util.TimeZone var10 = var8.getTimeZone();
    java.util.Locale var11 = var8.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(21, 0, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test26() {}
//   public void test26() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.String var8 = var3.format(1L);
//     int var9 = var3.getMaxLengthEstimate();
//     java.util.TimeZone var10 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     java.util.Calendar var12 = null;
//     java.lang.StringBuffer var13 = null;
//     java.lang.StringBuffer var14 = var11.format(var12, var13);
// 
//   }

  public void test27() {}
//   public void test27() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     java.lang.String var3 = var0.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     boolean var5 = var0.equals((java.lang.Object)var4);
//     int var6 = var0.getMaxLengthEstimate();
//     java.util.Locale var7 = var0.getLocale();
//     java.util.Date var8 = null;
//     java.lang.String var9 = var0.format(var8);
// 
//   }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(50, 18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test29() {}
//   public void test29() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     int var8 = var2.getMaxLengthEstimate();
//     java.lang.Object var9 = var2.clone();
//     java.util.TimeZone var10 = var2.getTimeZone();
//     java.util.Calendar var11 = null;
//     java.lang.String var12 = var2.format(var11);
// 
//   }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }
// 
// 
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.Locale var9 = var8.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var9);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var9);
//     java.lang.String var14 = var12.format(100L);
//     java.util.TimeZone var15 = var12.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 50, var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "December 31, 1969"+ "'", var14.equals("December 31, 1969"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    java.util.Locale var2 = null;
    org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
    java.util.Locale var4 = var3.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.text.AttributedCharacterIterator var6 = var3.formatToCharacterIterator((java.lang.Object)0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test32() {}
//   public void test32() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var8);
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.Locale var17 = var16.getLocale();
//     java.util.TimeZone var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var23 = var20.format((java.lang.Object)(-1L));
//     java.util.TimeZone var24 = var20.getTimeZone();
//     boolean var25 = var16.equals((java.lang.Object)var24);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var24);
//     java.util.TimeZone var31 = null;
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var31);
//     boolean var33 = var32.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var34 = var32.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var34);
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var38 = var37.getPattern();
//     java.util.TimeZone var39 = var37.getTimeZone();
//     java.util.Locale var43 = null;
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var43);
//     java.util.Locale var45 = var44.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var45);
//     java.util.Locale var47 = var46.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var39, var47);
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var34, var47);
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var47);
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24, var47);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(17, 20, var8, var47);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "3:59:59 PM PST"+ "'", var23.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var38 + "' != '" + "M/d/yy h:mm a"+ "'", var38.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
// 
//   }

  public void test33() {}
//   public void test33() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var6 = var5.getPattern();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     java.util.Locale var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, var7);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(21, 39, var7);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "M/d/yy h:mm a"+ "'", var6.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
// 
//   }

  public void test34() {}
//   public void test34() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.Object var6 = var2.clone();
//     java.lang.String var8 = var2.format(0L);
//     java.text.ParsePosition var10 = null;
//     java.lang.Object var11 = var2.parseObject("December 31, 1969", var10);
// 
//   }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.TimeZone var6 = var5.getTimeZone();
    java.util.TimeZone var7 = var5.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(17, 21, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.TimeZone var6 = var5.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    java.util.TimeZone var8 = var7.getTimeZone();
    java.util.Locale var9 = var7.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(20, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    java.util.TimeZone var2 = null;
    org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
    boolean var4 = var3.getTimeZoneOverridesCalendar();
    java.util.TimeZone var5 = var3.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var5);
    java.util.Locale var10 = null;
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var10);
    java.util.Locale var12 = var11.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
    java.util.Locale var14 = var13.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var15 = var6.format((java.lang.Object)var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    java.util.TimeZone var2 = null;
    java.util.Locale var8 = null;
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
    java.util.TimeZone var10 = var9.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
    java.util.Locale var12 = var11.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
    java.util.Locale var14 = var13.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(38, 21, var2, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test39() {}
//   public void test39() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     java.lang.String var3 = var0.getPattern();
//     int var4 = var0.getMaxLengthEstimate();
//     java.util.Calendar var5 = null;
//     java.lang.String var6 = var0.format(var5);
// 
//   }

  public void test40() {}
//   public void test40() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Locale var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var18);
//     java.util.TimeZone var25 = null;
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var25);
//     boolean var27 = var26.getTimeZoneOverridesCalendar();
//     java.lang.String var29 = var26.format(1L);
//     java.lang.String var31 = var26.format(1L);
//     int var32 = var26.getMaxLengthEstimate();
//     java.util.TimeZone var33 = var26.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var33);
//     java.util.Locale var37 = null;
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var37);
//     java.util.Locale var39 = var38.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var33, var39);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var39);
//     java.util.TimeZone var47 = null;
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var47);
//     boolean var49 = var48.getTimeZoneOverridesCalendar();
//     java.lang.String var51 = var48.format(1L);
//     java.lang.String var53 = var48.format(1L);
//     int var54 = var48.getMaxLengthEstimate();
//     java.util.TimeZone var55 = var48.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var55);
//     java.util.Locale var59 = null;
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var59);
//     java.util.Locale var61 = var60.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var62 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var55, var61);
//     org.apache.commons.lang3.time.FastDateFormat var64 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var65 = var64.getPattern();
//     java.util.TimeZone var66 = var64.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var68 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var69 = var68.getPattern();
//     java.util.TimeZone var70 = var68.getTimeZone();
//     java.util.Locale var74 = null;
//     org.apache.commons.lang3.time.FastDateFormat var75 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var74);
//     java.util.Locale var76 = var75.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var77 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var76);
//     java.util.Locale var78 = var77.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var79 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var70, var78);
//     org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var66, var78);
//     org.apache.commons.lang3.time.FastDateFormat var81 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var55, var78);
//     java.util.TimeZone var82 = var81.getTimeZone();
//     java.util.Locale var83 = var81.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(100, var8, var83);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "4:00:00 PM PST"+ "'", var29.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "4:00:00 PM PST"+ "'", var31.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var51 + "' != '" + "4:00:00 PM PST"+ "'", var51.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var53 + "' != '" + "4:00:00 PM PST"+ "'", var53.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var65 + "' != '" + "M/d/yy h:mm a"+ "'", var65.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var69 + "' != '" + "M/d/yy h:mm a"+ "'", var69.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var83);
// 
//   }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     java.lang.Object var16 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var17 = var15.format(var16);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test42() {}
//   public void test42() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0);
//     java.lang.String var3 = var1.format((java.lang.Object)0L);
//     java.lang.String var4 = var1.getPattern();
//     java.util.Date var5 = null;
//     java.lang.String var6 = var1.format(var5);
// 
//   }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var8);
//     java.util.Locale var10 = var9.getLocale();
//     java.util.Calendar var11 = null;
//     java.lang.String var12 = var9.format(var11);
// 
//   }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     boolean var7 = var3.getTimeZoneOverridesCalendar();
//     boolean var8 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var3.format((-1L));
//     java.lang.Object var11 = var3.clone();
//     java.util.Locale var12 = var3.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12);
//     java.util.Locale var14 = var13.getLocale();
//     java.util.TimeZone var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var21);
//     boolean var23 = var22.getTimeZoneOverridesCalendar();
//     java.lang.String var25 = var22.format(1L);
//     java.lang.String var27 = var22.format(1L);
//     int var28 = var22.getMaxLengthEstimate();
//     java.util.TimeZone var29 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var29);
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var29, var35);
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var39 = var38.getPattern();
//     java.util.TimeZone var40 = var38.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var43 = var42.getPattern();
//     java.util.TimeZone var44 = var42.getTimeZone();
//     java.util.Locale var48 = null;
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var48);
//     java.util.Locale var50 = var49.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var50);
//     java.util.Locale var52 = var51.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var44, var52);
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var40, var52);
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var29, var52);
//     java.util.TimeZone var56 = var55.getTimeZone();
//     java.util.TimeZone var58 = null;
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var58);
//     boolean var60 = var59.getTimeZoneOverridesCalendar();
//     java.lang.String var62 = var59.format(1L);
//     java.lang.String var64 = var59.format(1L);
//     java.util.Locale var65 = var59.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var56, var65);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var67 = var13.format((java.lang.Object)var56);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "3:59:59 PM PST"+ "'", var10.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "4:00:00 PM PST"+ "'", var25.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "4:00:00 PM PST"+ "'", var27.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var39 + "' != '" + "M/d/yy h:mm a"+ "'", var39.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var43 + "' != '" + "M/d/yy h:mm a"+ "'", var43.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var62 + "' != '" + "4:00:00 PM PST"+ "'", var62.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var64 + "' != '" + "4:00:00 PM PST"+ "'", var64.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
// 
//   }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4:00:00 PM PST", var23);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
// 
//   }

  public void test46() {}
//   public void test46() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     java.lang.String var13 = var11.format(100L);
//     java.util.TimeZone var14 = var11.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[M/d/yy h:mm a]", var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "December 31, 1969"+ "'", var13.equals("December 31, 1969"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     java.lang.String var8 = var6.format((-1L));
//     java.lang.Object var9 = null;
//     boolean var10 = var6.equals(var9);
//     java.util.Date var11 = null;
//     java.lang.StringBuffer var12 = null;
//     java.lang.StringBuffer var13 = var6.format(var11, var12);
// 
//   }

  public void test48() {}
//   public void test48() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var2, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var17);
//     java.util.TimeZone var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var21);
//     boolean var23 = var22.getTimeZoneOverridesCalendar();
//     java.lang.String var25 = var22.format(1L);
//     boolean var26 = var22.getTimeZoneOverridesCalendar();
//     boolean var27 = var22.getTimeZoneOverridesCalendar();
//     java.lang.String var29 = var22.format((-1L));
//     java.lang.Object var30 = var22.clone();
//     java.util.Locale var31 = var22.getLocale();
//     java.lang.String var32 = var22.getPattern();
//     java.util.Locale var33 = var22.getLocale();
//     java.lang.Object var34 = var22.clone();
//     java.lang.StringBuffer var35 = null;
//     java.text.FieldPosition var36 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var37 = var19.format((java.lang.Object)var22, var35, var36);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "4:00:00 PM PST"+ "'", var25.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "3:59:59 PM PST"+ "'", var29.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var32 + "' != '" + "h:mm:ss a z"+ "'", var32.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
// 
//   }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     java.lang.String var4 = var1.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     boolean var6 = var1.equals((java.lang.Object)var5);
//     int var7 = var1.getMaxLengthEstimate();
//     java.util.Locale var8 = var1.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy]", var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "M/d/yy h:mm a"+ "'", var2.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "M/d/yy h:mm a"+ "'", var4.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
// 
//   }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var24 = var23.getPattern();
//     java.util.TimeZone var25 = var23.getTimeZone();
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var25, var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var33);
//     java.util.Locale var36 = var35.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("December 31, 1969", var36);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var24 + "' != '" + "M/d/yy h:mm a"+ "'", var24.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
// 
//   }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    java.util.Locale var2 = null;
    org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
    java.util.TimeZone var4 = var3.getTimeZone();
    java.util.Locale var9 = null;
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var9);
    java.util.TimeZone var11 = var10.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
    java.util.Locale var17 = null;
    org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
    java.util.Locale var19 = var18.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var19);
    java.util.Locale var21 = var20.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var21);
    org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var11, var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var24 = var3.format((java.lang.Object)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test53() {}
//   public void test53() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[]", var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test54() {}
//   public void test54() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z");
//     java.util.Date var2 = null;
//     java.lang.StringBuffer var3 = null;
//     java.lang.StringBuffer var4 = var1.format(var2, var3);
// 
//   }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.TimeZone var7 = var6.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    java.util.Locale var13 = null;
    org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var13);
    java.util.Locale var15 = var14.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
    java.util.Locale var17 = var16.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var17);
    org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(10, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test56() {}
//   public void test56() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     int var8 = var2.getMaxLengthEstimate();
//     java.lang.Object var9 = var2.clone();
//     java.util.Locale var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var18);
//     java.lang.String var20 = var19.toString();
//     java.lang.String var21 = var19.toString();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var22 = var2.format((java.lang.Object)var21);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "FastDateFormat[MMMM d, yyyy]"+ "'", var20.equals("FastDateFormat[MMMM d, yyyy]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "FastDateFormat[MMMM d, yyyy]"+ "'", var21.equals("FastDateFormat[MMMM d, yyyy]"));
// 
//   }

  public void test57() {}
//   public void test57() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format((java.lang.Object)(-1L));
//     java.util.TimeZone var6 = var2.getTimeZone();
//     java.lang.String var8 = var2.format(0L);
//     java.util.Locale var9 = var2.getLocale();
//     java.text.ParsePosition var11 = null;
//     java.lang.Object var12 = var2.parseObject("FastDateFormat[]", var11);
// 
//   }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    java.util.TimeZone var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
    boolean var6 = var5.getTimeZoneOverridesCalendar();
    java.util.TimeZone var7 = var5.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100, 20, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test59() {}
//   public void test59() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     boolean var9 = var7.equals((java.lang.Object)(byte)10);
//     java.util.TimeZone var10 = var7.getTimeZone();
//     java.util.TimeZone var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     boolean var14 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var16 = var13.format(1L);
//     java.lang.Object var17 = var13.clone();
//     java.util.Locale var18 = var13.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4:00:00 PM PST", var10, var18);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "4:00:00 PM PST"+ "'", var16.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
// 
//   }

  public void test60() {}
//   public void test60() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
//     java.util.Locale var9 = var8.getLocale();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     java.util.TimeZone var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var17.format(1L);
//     java.lang.String var22 = var17.format(1L);
//     int var23 = var17.getMaxLengthEstimate();
//     java.util.TimeZone var24 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var24);
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var24, var30);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var34 = var33.getPattern();
//     java.util.TimeZone var35 = var33.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var38 = var37.getPattern();
//     java.util.TimeZone var39 = var37.getTimeZone();
//     java.util.Locale var43 = null;
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var43);
//     java.util.Locale var45 = var44.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var45);
//     java.util.Locale var47 = var46.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var39, var47);
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var35, var47);
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var24, var47);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(21, 17, var10, var47);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "M/d/yy h:mm a"+ "'", var34.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var38 + "' != '" + "M/d/yy h:mm a"+ "'", var38.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
// 
//   }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     boolean var10 = var2.equals((java.lang.Object)var9);
//     java.util.TimeZone var11 = var9.getTimeZone();
//     java.util.Date var12 = null;
//     java.lang.String var13 = var9.format(var12);
// 
//   }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    java.util.TimeZone var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[MMMM d, yyyy h:mm:ss a z]", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.lang.String var19 = var16.format(1L);
//     java.lang.String var21 = var16.format(1L);
//     int var22 = var16.getMaxLengthEstimate();
//     java.util.TimeZone var23 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var26 = var25.getLocale();
//     boolean var27 = var11.equals((java.lang.Object)var26);
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var8, var26);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Wednesday, December 31, 1969", var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "4:00:00 PM PST"+ "'", var19.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var24 = var23.getPattern();
//     java.util.TimeZone var25 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var28 = var27.getPattern();
//     java.util.TimeZone var29 = var27.getTimeZone();
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var29, var37);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var25, var37);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var37);
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var44 = var43.getPattern();
//     java.util.TimeZone var45 = var43.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var48 = var47.getPattern();
//     java.util.TimeZone var49 = var47.getTimeZone();
//     java.util.Locale var53 = null;
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var53);
//     java.util.Locale var55 = var54.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var55);
//     java.util.Locale var57 = var56.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var49, var57);
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var45, var57);
//     org.apache.commons.lang3.time.FastDateFormat var62 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var63 = var62.getPattern();
//     java.util.TimeZone var64 = var62.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var66 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var67 = var66.getPattern();
//     java.util.TimeZone var68 = var66.getTimeZone();
//     java.util.Locale var72 = null;
//     org.apache.commons.lang3.time.FastDateFormat var73 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var72);
//     java.util.Locale var74 = var73.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var75 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var74);
//     java.util.Locale var76 = var75.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var68, var76);
//     org.apache.commons.lang3.time.FastDateFormat var78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var64, var76);
//     org.apache.commons.lang3.time.FastDateFormat var79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var76);
//     org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var45, var76);
//     org.apache.commons.lang3.time.FastDateFormat var81 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14, var76);
//     java.lang.Object var82 = var81.clone();
//     java.util.Calendar var83 = null;
//     java.lang.String var84 = var81.format(var83);
// 
//   }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.lang.String var4 = var3.toString();
//     java.util.Locale var5 = var3.getLocale();
//     java.util.Locale var6 = var3.getLocale();
//     java.util.TimeZone var7 = var3.getTimeZone();
//     java.util.Date var8 = null;
//     java.lang.StringBuffer var9 = null;
//     java.lang.StringBuffer var10 = var3.format(var8, var9);
// 
//   }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }


    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    boolean var10 = var2.equals((java.lang.Object)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = var2.format((java.lang.Object)"December 31, 1969");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test67() {}
//   public void test67() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(100, var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test68() {}
//   public void test68() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.Locale var2 = var1.getLocale();
//     java.util.Calendar var3 = null;
//     java.lang.StringBuffer var4 = null;
//     java.lang.StringBuffer var5 = var1.format(var3, var4);
// 
//   }

  public void test69() {}
//   public void test69() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     java.lang.String var10 = var9.toString();
//     java.text.ParsePosition var12 = null;
//     java.lang.Object var13 = var9.parseObject("EEEE, MMMM d, yyyy", var12);
// 
//   }

  public void test70() {}
//   public void test70() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.lang.String var6 = var5.toString();
//     java.util.Locale var7 = var5.getLocale();
//     java.util.Locale var8 = var5.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(38, 50, var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var6.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
// 
//   }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.lang.Object var11 = var4.clone();
//     java.util.TimeZone var12 = var4.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(38, 0, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
// 
//   }

  public void test73() {}
//   public void test73() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var6 = var5.getPattern();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var10 = var9.getPattern();
//     java.util.TimeZone var11 = var9.getTimeZone();
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var11, var19);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7, var19);
//     java.util.Locale var22 = var21.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(50, 17, var22);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "M/d/yy h:mm a"+ "'", var6.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "M/d/yy h:mm a"+ "'", var10.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
// 
//   }

  public void test74() {}
//   public void test74() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     boolean var7 = var3.getTimeZoneOverridesCalendar();
//     boolean var8 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var3.format((-1L));
//     java.lang.Object var11 = var3.clone();
//     java.util.Locale var12 = var3.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12);
//     java.util.Calendar var14 = null;
//     java.lang.String var15 = var13.format(var14);
// 
//   }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test76() {}
//   public void test76() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var2);
//     java.lang.Object var4 = var3.clone();
//     java.lang.String var5 = var3.getPattern();
//     java.util.Calendar var6 = null;
//     java.lang.String var7 = var3.format(var6);
// 
//   }

  public void test77() {}
//   public void test77() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.Object var7 = var3.clone();
//     java.util.Locale var8 = var3.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[h:mm:ss a z]", var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
// 
//   }

  public void test78() {}
//   public void test78() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var4 = var3.getPattern();
//     java.util.TimeZone var5 = var3.getTimeZone();
//     java.util.Locale var9 = null;
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var9);
//     java.util.Locale var11 = var10.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var5, var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(20, 20, var5);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "M/d/yy h:mm a"+ "'", var4.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test79() {}
//   public void test79() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     int var8 = var2.getMaxLengthEstimate();
//     java.util.TimeZone var9 = var2.getTimeZone();
//     int var10 = var2.getMaxLengthEstimate();
//     java.util.TimeZone var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var18 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var18);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var25 = null;
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var25);
//     boolean var27 = var26.getTimeZoneOverridesCalendar();
//     java.lang.String var29 = var26.format(1L);
//     java.lang.String var31 = var26.format(1L);
//     int var32 = var26.getMaxLengthEstimate();
//     java.util.TimeZone var33 = var26.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var33);
//     java.util.Locale var36 = var35.getLocale();
//     boolean var37 = var21.equals((java.lang.Object)var36);
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var18, var36);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var39 = var2.format((java.lang.Object)var18);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "4:00:00 PM PST"+ "'", var29.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "4:00:00 PM PST"+ "'", var31.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
// 
//   }

  public void test80() {}
//   public void test80() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.lang.String var2 = var0.toString();
//     java.util.Locale var3 = var0.getLocale();
//     java.text.ParsePosition var5 = null;
//     java.lang.Object var6 = var0.parseObject("EEEE, MMMM d, yyyy", var5);
// 
//   }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.TimeZone var7 = var6.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4:00:00 PM PST", var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test82() {}
//   public void test82() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.TimeZone var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     boolean var14 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var16 = var13.format(1L);
//     boolean var17 = var13.getTimeZoneOverridesCalendar();
//     boolean var18 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var13.format((-1L));
//     java.lang.Object var21 = var13.clone();
//     java.util.Locale var22 = var13.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var8, var22);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100, 38, var22);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "4:00:00 PM PST"+ "'", var16.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "3:59:59 PM PST"+ "'", var20.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
// 
//   }

  public void test83() {}
//   public void test83() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var0.format(10L);
//     java.lang.String var3 = var0.toString();
//     java.util.Calendar var4 = null;
//     java.lang.String var5 = var0.format(var4);
// 
//   }

  public void test84() {}
//   public void test84() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var16 = var15.getLocale();
//     boolean var17 = var1.equals((java.lang.Object)var16);
//     boolean var18 = var1.getTimeZoneOverridesCalendar();
//     java.text.ParsePosition var20 = null;
//     java.lang.Object var21 = var1.parseObject("", var20);
// 
//   }

  public void test85() {}
//   public void test85() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var6 = var5.getPattern();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     java.util.Locale var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var3, var15);
//     java.util.Locale var18 = var17.getLocale();
//     java.lang.String var19 = var17.getPattern();
//     java.util.Locale var20 = var17.getLocale();
//     java.util.Date var21 = null;
//     java.lang.String var22 = var17.format(var21);
// 
//   }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format((java.lang.Object)(-1L));
//     java.util.TimeZone var9 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(50, var9);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "3:59:59 PM PST"+ "'", var8.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
// 
//   }

  public void test87() {}
//   public void test87() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var14);
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var20 = var19.getPattern();
//     java.util.TimeZone var21 = var19.getTimeZone();
//     java.lang.String var22 = var19.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     boolean var24 = var19.equals((java.lang.Object)var23);
//     int var25 = var19.getMaxLengthEstimate();
//     java.util.Locale var26 = var19.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 10, var14, var26);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "M/d/yy h:mm a"+ "'", var20.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "M/d/yy h:mm a"+ "'", var22.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
// 
//   }

  public void test88() {}
//   public void test88() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.TimeZone var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var23 = var20.format((java.lang.Object)(-1L));
//     java.util.TimeZone var24 = var20.getTimeZone();
//     java.lang.String var26 = var20.format(0L);
//     java.util.Locale var27 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var27);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(21, 20, var13, var27);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "3:59:59 PM PST"+ "'", var23.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var26 + "' != '" + "4:00:00 PM PST"+ "'", var26.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test89() {}
//   public void test89() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var6 = var5.getPattern();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     java.util.Locale var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var3, var15);
//     java.util.Locale var18 = var17.getLocale();
//     java.lang.String var19 = var17.getPattern();
//     java.util.Locale var20 = var17.getLocale();
//     java.text.ParsePosition var22 = null;
//     java.lang.Object var23 = var17.parseObject("12/31/69 3:59 PM", var22);
// 
//   }

  public void test90() {}
//   public void test90() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var11);
//     java.util.Calendar var14 = null;
//     java.lang.StringBuffer var15 = null;
//     java.lang.StringBuffer var16 = var13.format(var14, var15);
// 
//   }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.lang.String var2 = var0.toString();
//     int var3 = var0.getMaxLengthEstimate();
//     boolean var4 = var0.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     boolean var13 = var12.getTimeZoneOverridesCalendar();
//     java.lang.String var15 = var12.format(1L);
//     java.lang.String var17 = var12.format(1L);
//     int var18 = var12.getMaxLengthEstimate();
//     java.util.TimeZone var19 = var12.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19);
//     java.util.Locale var23 = null;
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var23);
//     java.util.Locale var25 = var24.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var19, var25);
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var33 = var32.getPattern();
//     java.util.TimeZone var34 = var32.getTimeZone();
//     java.util.Locale var38 = null;
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var38);
//     java.util.Locale var40 = var39.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var40);
//     java.util.Locale var42 = var41.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var34, var42);
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var30, var42);
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19, var42);
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var42);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var47 = var0.format((java.lang.Object)var42);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var2.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "4:00:00 PM PST"+ "'", var15.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "4:00:00 PM PST"+ "'", var17.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "M/d/yy h:mm a"+ "'", var33.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
// 
//   }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    boolean var12 = var11.getTimeZoneOverridesCalendar();
    boolean var13 = var11.getTimeZoneOverridesCalendar();
    java.util.Locale var14 = var11.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(21, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Locale var10 = var9.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var10);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var10);
//     java.lang.StringBuffer var14 = null;
//     java.lang.StringBuffer var15 = var12.format(0L, var14);
// 
//   }

  public void test94() {}
//   public void test94() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var4 = var3.getPattern();
//     java.util.TimeZone var5 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var8 = var7.getPattern();
//     java.util.TimeZone var9 = var7.getTimeZone();
//     java.util.Locale var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var5, var17);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var20);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[h:mm:ss a z]", var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "M/d/yy h:mm a"+ "'", var4.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "M/d/yy h:mm a"+ "'", var8.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
// 
//   }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(20, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     java.lang.String var8 = var6.getPattern();
//     java.lang.String var9 = var6.toString();
//     java.lang.Object var10 = var6.clone();
//     java.util.TimeZone var11 = var6.getTimeZone();
//     java.util.TimeZone var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var17);
//     boolean var19 = var18.getTimeZoneOverridesCalendar();
//     java.lang.String var21 = var18.format(1L);
//     java.lang.String var23 = var18.format(1L);
//     int var24 = var18.getMaxLengthEstimate();
//     java.util.TimeZone var25 = var18.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var25);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var25, var31);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var34 = var33.getPattern();
//     java.lang.String var35 = var33.toString();
//     java.util.Locale var36 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var25, var36);
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11, var36);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(38, (-1), var11);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z"+ "'", var8.equals("EEEE, MMMM d, yyyy h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var9.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "4:00:00 PM PST"+ "'", var23.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "M/d/yy h:mm a"+ "'", var34.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var35 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var35.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    boolean var12 = var11.getTimeZoneOverridesCalendar();
    boolean var13 = var11.getTimeZoneOverridesCalendar();
    java.util.Locale var14 = var11.getLocale();
    java.util.Locale var15 = var11.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((-1), var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     java.util.Locale var45 = null;
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var45);
//     java.util.Locale var47 = var46.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var47);
//     java.util.Locale var49 = var48.getLocale();
//     java.util.TimeZone var50 = var48.getTimeZone();
//     java.util.Locale var51 = var48.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15, var51);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(20, var51);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
// 
//   }

  public void test99() {}
//   public void test99() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var7);
//     java.lang.String var12 = var10.format(100L);
//     java.util.TimeZone var13 = var10.getTimeZone();
//     java.util.Calendar var14 = null;
//     java.lang.StringBuffer var15 = null;
//     java.lang.StringBuffer var16 = var10.format(var14, var15);
// 
//   }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     boolean var15 = var14.getTimeZoneOverridesCalendar();
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var33);
//     java.util.TimeZone var40 = null;
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var40);
//     boolean var42 = var41.getTimeZoneOverridesCalendar();
//     java.lang.String var44 = var41.format(1L);
//     java.lang.String var46 = var41.format(1L);
//     int var47 = var41.getMaxLengthEstimate();
//     java.util.TimeZone var48 = var41.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var48);
//     java.util.Locale var52 = null;
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var52);
//     java.util.Locale var54 = var53.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var48, var54);
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var54);
//     boolean var57 = var14.equals((java.lang.Object)var23);
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.TimeZone var59 = var58.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var61 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var62 = var61.getPattern();
//     java.util.TimeZone var63 = var61.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var65 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var66 = var65.getPattern();
//     java.util.TimeZone var67 = var65.getTimeZone();
//     java.util.Locale var71 = null;
//     org.apache.commons.lang3.time.FastDateFormat var72 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var71);
//     java.util.Locale var73 = var72.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var74 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var73);
//     java.util.Locale var75 = var74.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var76 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var67, var75);
//     org.apache.commons.lang3.time.FastDateFormat var77 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var63, var75);
//     java.util.Locale var78 = var77.getLocale();
//     java.lang.String var79 = var77.getPattern();
//     java.util.Locale var80 = var77.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var81 = var58.format((java.lang.Object)var77);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "4:00:00 PM PST"+ "'", var44.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var46 + "' != '" + "4:00:00 PM PST"+ "'", var46.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var62 + "' != '" + "M/d/yy h:mm a"+ "'", var62.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var66 + "' != '" + "M/d/yy h:mm a"+ "'", var66.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var73);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var79 + "' != '" + "h:mm:ss a z"+ "'", var79.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
// 
//   }

  public void test101() {}
//   public void test101() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.lang.String var19 = var16.format(1L);
//     java.lang.String var21 = var16.format(1L);
//     int var22 = var16.getMaxLengthEstimate();
//     java.util.TimeZone var23 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var26 = var25.getLocale();
//     boolean var27 = var11.equals((java.lang.Object)var26);
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var8, var26);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(38, var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "4:00:00 PM PST"+ "'", var19.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    boolean var12 = var11.getTimeZoneOverridesCalendar();
    boolean var13 = var11.getTimeZoneOverridesCalendar();
    java.util.Locale var14 = var11.getLocale();
    java.util.Locale var15 = var11.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(17, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
    java.util.Locale var3 = var2.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(10, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test104() {}
//   public void test104() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var9 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var9);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var13 = var12.getPattern();
//     java.util.TimeZone var14 = var12.getTimeZone();
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var20);
//     java.util.Locale var22 = var21.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var14, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9, var22);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var22);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(50, 38, var22);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "M/d/yy h:mm a"+ "'", var13.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
// 
//   }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    java.util.Locale var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Wednesday, December 31, 1969 4:00:00 PM PST", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var9 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var17.format(1L);
//     java.lang.String var22 = var17.format(1L);
//     int var23 = var17.getMaxLengthEstimate();
//     java.util.TimeZone var24 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var24);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.Locale var27 = var26.getLocale();
//     boolean var28 = var12.equals((java.lang.Object)var27);
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var9, var27);
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]", var9);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
// 
//   }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.TimeZone var8 = var7.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    java.util.Locale var10 = var9.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var10);
    java.util.Locale var12 = var11.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("3:59:59 PM PST", var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test108() {}
//   public void test108() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy");
//     java.text.ParsePosition var3 = null;
//     java.lang.Object var4 = var1.parseObject("3:59:59 PM PST", var3);
// 
//   }

  public void test109() {}
//   public void test109() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     java.util.TimeZone var7 = var6.getTimeZone();
//     java.lang.Object var8 = var6.clone();
//     java.lang.String var9 = var6.getPattern();
//     boolean var10 = var6.getTimeZoneOverridesCalendar();
//     java.util.Calendar var11 = null;
//     java.lang.String var12 = var6.format(var11);
// 
//   }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     boolean var7 = var3.getTimeZoneOverridesCalendar();
//     boolean var8 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var3.format((-1L));
//     java.lang.Object var11 = var3.clone();
//     java.util.Locale var12 = var3.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(50, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "3:59:59 PM PST"+ "'", var10.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
// 
//   }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    java.util.Locale var8 = null;
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
    java.util.Locale var10 = var9.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var10);
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var10);
    org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(10, 1, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test112() {}
//   public void test112() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     boolean var8 = var4.getTimeZoneOverridesCalendar();
//     boolean var9 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var4.format((-1L));
//     java.lang.Object var12 = var4.clone();
//     java.util.Locale var13 = var4.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(17, var13);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "3:59:59 PM PST"+ "'", var11.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test113() {}
//   public void test113() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.lang.Object var11 = var4.clone();
//     java.util.TimeZone var12 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var12);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test114() {}
//   public void test114() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
//     boolean var3 = var1.equals((java.lang.Object)(byte)0);
//     java.lang.String var4 = var1.getPattern();
//     java.lang.String var5 = var1.toString();
//     java.util.TimeZone var9 = null;
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
//     boolean var11 = var10.getTimeZoneOverridesCalendar();
//     java.lang.String var13 = var10.format(1L);
//     java.lang.String var15 = var10.format(1L);
//     int var16 = var10.getMaxLengthEstimate();
//     java.util.TimeZone var17 = var10.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     java.util.Locale var20 = var19.getLocale();
//     java.util.Locale var24 = null;
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var24);
//     java.util.TimeZone var26 = var25.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var26);
//     boolean var29 = var27.equals((java.lang.Object)(byte)10);
//     java.lang.StringBuffer var31 = null;
//     java.lang.StringBuffer var32 = var27.format((-1L), var31);
//     boolean var33 = var19.equals((java.lang.Object)var31);
//     java.util.Locale var35 = null;
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var35);
//     int var37 = var36.getMaxLengthEstimate();
//     boolean var38 = var19.equals((java.lang.Object)var37);
//     java.util.TimeZone var39 = var19.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var40 = var1.format((java.lang.Object)var39);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "EEEE, MMMM d, yyyy"+ "'", var4.equals("EEEE, MMMM d, yyyy"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy]"+ "'", var5.equals("FastDateFormat[EEEE, MMMM d, yyyy]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "4:00:00 PM PST"+ "'", var15.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
// 
//   }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0);
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     int var4 = var3.getMaxLengthEstimate();
//     java.lang.StringBuffer var5 = null;
//     java.text.FieldPosition var6 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var7 = var1.format((java.lang.Object)var4, var5, var6);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 20);
// 
//   }

  public void test116() {}
//   public void test116() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var14);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.text.ParsePosition var21 = null;
//     java.lang.Object var22 = var19.parseObject("FastDateFormat[MMMM d, yyyy h:mm:ss a z]", var21);
// 
//   }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     java.util.Date var3 = null;
//     java.lang.String var4 = var2.format(var3);
// 
//   }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
//     java.util.Locale var10 = var9.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
//     java.util.Locale var12 = var11.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var4, var12);
//     java.util.TimeZone var14 = var13.getTimeZone();
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.Locale var23 = var22.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var23);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(39, var14, var23);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
// 
//   }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     java.lang.String var5 = var2.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     boolean var7 = var2.equals((java.lang.Object)var6);
//     int var8 = var2.getMaxLengthEstimate();
//     java.util.Locale var9 = var2.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(39, (-1), var9);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "M/d/yy h:mm a"+ "'", var5.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
// 
//   }

  public void test120() {}
//   public void test120() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.Locale var9 = var8.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     java.util.Locale var11 = var10.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var3, var11);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
//     boolean var16 = var14.equals((java.lang.Object)(byte)0);
//     java.lang.String var17 = var14.getPattern();
//     java.lang.StringBuffer var18 = null;
//     java.text.FieldPosition var19 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var20 = var12.format((java.lang.Object)var17, var18, var19);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "M/d/yy h:mm a"+ "'", var2.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "EEEE, MMMM d, yyyy"+ "'", var17.equals("EEEE, MMMM d, yyyy"));
// 
//   }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.String var8 = var3.format(1L);
//     java.util.TimeZone var9 = var3.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(10, var9);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
// 
//   }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.Locale var9 = var8.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     boolean var11 = var3.equals((java.lang.Object)var10);
//     java.util.TimeZone var12 = var10.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var17 = var16.getPattern();
//     java.util.TimeZone var18 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var21 = var20.getPattern();
//     java.util.TimeZone var22 = var20.getTimeZone();
//     java.util.Locale var26 = null;
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var26);
//     java.util.Locale var28 = var27.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22, var30);
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var18, var30);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var33);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(38, var12, var33);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "M/d/yy h:mm a"+ "'", var17.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "M/d/yy h:mm a"+ "'", var21.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var14);
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var14);
//     java.util.Locale var20 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(20, var14, var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
// 
//   }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    java.util.Locale var10 = var9.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(38, (-1), var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test125() {}
//   public void test125() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var6 = var5.getPattern();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     java.util.Locale var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var3, var15);
//     java.util.Locale var18 = var17.getLocale();
//     java.lang.String var19 = var17.getPattern();
//     java.util.Locale var20 = var17.getLocale();
//     java.util.Calendar var21 = null;
//     java.lang.String var22 = var17.format(var21);
// 
//   }

  public void test126() {}
//   public void test126() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var9 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var9);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var13 = var12.getPattern();
//     java.util.TimeZone var14 = var12.getTimeZone();
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var20);
//     java.util.Locale var22 = var21.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var14, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9, var22);
//     java.util.TimeZone var25 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var25);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(18, 0, var25);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "M/d/yy h:mm a"+ "'", var13.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
// 
//   }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     java.lang.String var3 = var0.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     boolean var5 = var0.equals((java.lang.Object)var4);
//     java.lang.String var6 = var4.toString();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy");
//     java.util.TimeZone var10 = null;
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10);
//     boolean var12 = var8.equals((java.lang.Object)var10);
//     java.lang.Object var13 = var8.clone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var14 = var4.format((java.lang.Object)var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var6.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     java.lang.String var4 = var1.getPattern();
//     java.util.TimeZone var5 = var1.getTimeZone();
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
//     java.lang.String var10 = var9.toString();
//     java.util.Locale var11 = var9.getLocale();
//     java.util.Locale var12 = var9.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(50, var5, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "M/d/yy h:mm a"+ "'", var2.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "M/d/yy h:mm a"+ "'", var4.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var10.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
// 
//   }

  public void test129() {}
//   public void test129() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(39, 18, var4);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
// 
//   }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    java.util.Locale var7 = null;
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
    java.util.Locale var9 = var8.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var9);
    java.util.TimeZone var12 = var11.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12);
    java.util.Locale var17 = null;
    org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
    java.util.TimeZone var19 = var18.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var19);
    boolean var22 = var20.equals((java.lang.Object)(byte)10);
    java.util.Locale var23 = var20.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(50, 50, var12, var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test131() {}
//   public void test131() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var14 = var13.getLocale();
//     java.lang.Object var15 = var13.clone();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var18 = var17.getPattern();
//     java.util.TimeZone var19 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var22 = var21.getPattern();
//     java.util.TimeZone var23 = var21.getTimeZone();
//     java.util.Locale var27 = null;
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var27);
//     java.util.Locale var29 = var28.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var31);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19, var31);
//     boolean var34 = var13.equals((java.lang.Object)var33);
//     java.lang.String var35 = var33.getPattern();
//     java.util.TimeZone var37 = null;
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var37);
//     boolean var39 = var38.getTimeZoneOverridesCalendar();
//     java.lang.String var41 = var38.format(1L);
//     java.lang.Object var42 = var38.clone();
//     java.lang.Object var43 = var38.clone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var44 = var33.format(var43);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + "M/d/yy h:mm a"+ "'", var18.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "M/d/yy h:mm a"+ "'", var22.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var35 + "' != '" + "h:mm:ss a z"+ "'", var35.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var41 + "' != '" + "4:00:00 PM PST"+ "'", var41.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
// 
//   }

  public void test132() {}
//   public void test132() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.util.Locale var4 = var3.getLocale();
//     java.lang.String var5 = var3.getPattern();
//     java.lang.String var6 = var3.toString();
//     java.text.ParsePosition var8 = null;
//     java.lang.Object var9 = var3.parseObject("Wednesday, December 31, 1969", var8);
// 
//   }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }


    org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test134() {}
//   public void test134() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     boolean var10 = var2.equals((java.lang.Object)var9);
//     java.lang.Object var11 = var9.clone();
//     java.lang.String var13 = var9.format((-1L));
//     java.util.TimeZone var15 = null;
//     java.util.TimeZone var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var23 = var20.format(1L);
//     java.lang.String var25 = var20.format(1L);
//     int var26 = var20.getMaxLengthEstimate();
//     java.util.TimeZone var27 = var20.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var27);
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var27);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var15, var30);
//     int var32 = var31.getMaxLengthEstimate();
//     java.util.Locale var33 = var31.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var34 = var9.format((java.lang.Object)var33);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "4:00:00 PM PST"+ "'", var23.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "4:00:00 PM PST"+ "'", var25.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
// 
//   }

  public void test135() {}
//   public void test135() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     java.lang.String var8 = var5.getPattern();
//     boolean var9 = var5.getTimeZoneOverridesCalendar();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var10 = var2.formatToCharacterIterator((java.lang.Object)var9);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "h:mm:ss a z"+ "'", var8.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
// 
//   }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    java.util.Locale var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(18, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test137() {}
//   public void test137() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     boolean var15 = var14.getTimeZoneOverridesCalendar();
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var33);
//     java.util.TimeZone var40 = null;
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var40);
//     boolean var42 = var41.getTimeZoneOverridesCalendar();
//     java.lang.String var44 = var41.format(1L);
//     java.lang.String var46 = var41.format(1L);
//     int var47 = var41.getMaxLengthEstimate();
//     java.util.TimeZone var48 = var41.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var48);
//     java.util.Locale var52 = null;
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var52);
//     java.util.Locale var54 = var53.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var48, var54);
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var54);
//     boolean var57 = var14.equals((java.lang.Object)var23);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var23);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "4:00:00 PM PST"+ "'", var44.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var46 + "' != '" + "4:00:00 PM PST"+ "'", var46.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == false);
// 
//   }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }


    org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z");
    org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy");
    java.util.TimeZone var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var5);
    boolean var7 = var3.equals((java.lang.Object)var5);
    java.lang.StringBuffer var8 = null;
    java.text.FieldPosition var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.StringBuffer var10 = var1.format((java.lang.Object)var5, var8, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(10, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test140() {}
//   public void test140() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var19 = var18.getPattern();
//     java.util.TimeZone var20 = var18.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var23 = var22.getPattern();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var32);
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var20, var32);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var35);
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var35);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((-1), var12, var35);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "M/d/yy h:mm a"+ "'", var19.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "M/d/yy h:mm a"+ "'", var23.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test141() {}
//   public void test141() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     java.util.TimeZone var9 = null;
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
//     boolean var11 = var10.getTimeZoneOverridesCalendar();
//     java.lang.String var13 = var10.format((java.lang.Object)(-1L));
//     java.util.TimeZone var14 = var10.getTimeZone();
//     boolean var15 = var6.equals((java.lang.Object)var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var14);
//     java.util.TimeZone var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var21);
//     boolean var23 = var22.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var24);
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var28 = var27.getPattern();
//     java.util.TimeZone var29 = var27.getTimeZone();
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var29, var37);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var37);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var37);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14, var37);
//     java.util.TimeZone var47 = null;
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var47);
//     boolean var49 = var48.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var50 = var48.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var50);
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var57 = null;
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var57);
//     boolean var59 = var58.getTimeZoneOverridesCalendar();
//     java.lang.String var61 = var58.format(1L);
//     java.lang.String var63 = var58.format(1L);
//     int var64 = var58.getMaxLengthEstimate();
//     java.util.TimeZone var65 = var58.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var65);
//     org.apache.commons.lang3.time.FastDateFormat var67 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var65);
//     java.util.Locale var68 = var67.getLocale();
//     boolean var69 = var53.equals((java.lang.Object)var68);
//     org.apache.commons.lang3.time.FastDateFormat var70 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var50, var68);
//     org.apache.commons.lang3.time.FastDateFormat var71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var68);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var72 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[MMMM d, yyyy]", var14, var68);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "3:59:59 PM PST"+ "'", var13.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var28 + "' != '" + "M/d/yy h:mm a"+ "'", var28.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var59 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var61 + "' != '" + "4:00:00 PM PST"+ "'", var61.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var63 + "' != '" + "4:00:00 PM PST"+ "'", var63.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var64 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
// 
//   }

  public void test142() {}
//   public void test142() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }
// 
// 
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.TimeZone var9 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var19);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9, var19);
//     java.util.TimeZone var26 = null;
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var26);
//     boolean var28 = var27.getTimeZoneOverridesCalendar();
//     java.lang.String var30 = var27.format(1L);
//     java.lang.String var32 = var27.format(1L);
//     int var33 = var27.getMaxLengthEstimate();
//     java.util.TimeZone var34 = var27.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var34);
//     java.util.Locale var38 = null;
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var38);
//     java.util.Locale var40 = var39.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var34, var40);
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9, var40);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(10, 10, var40);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "4:00:00 PM PST"+ "'", var30.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var32 + "' != '" + "4:00:00 PM PST"+ "'", var32.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
// 
//   }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
//     java.util.TimeZone var10 = var9.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
//     boolean var13 = var11.equals((java.lang.Object)(byte)10);
//     java.util.Locale var14 = var11.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(18, 38, var4, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test144() {}
//   public void test144() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.TimeZone var10 = null;
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     boolean var12 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var14 = var11.format(1L);
//     boolean var15 = var11.getTimeZoneOverridesCalendar();
//     boolean var16 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var18 = var11.format((-1L));
//     java.lang.Object var19 = var11.clone();
//     java.util.Locale var20 = var11.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var6, var20);
//     boolean var24 = var22.equals((java.lang.Object)"FastDateFormat[EEEE, MMMM d, yyyy]");
//     java.util.Date var25 = null;
//     java.lang.String var26 = var22.format(var25);
// 
//   }

  public void test145() {}
//   public void test145() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }
// 
// 
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.Locale var9 = var8.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var9);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var9);
//     java.lang.String var14 = var12.format(100L);
//     java.util.TimeZone var15 = var12.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100, 10, var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "December 31, 1969"+ "'", var14.equals("December 31, 1969"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var23);
//     java.util.TimeZone var25 = var24.getTimeZone();
//     java.util.TimeZone var30 = null;
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var30);
//     boolean var32 = var31.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var33 = var31.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var33);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var40 = null;
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var40);
//     boolean var42 = var41.getTimeZoneOverridesCalendar();
//     java.lang.String var44 = var41.format(1L);
//     java.lang.String var46 = var41.format(1L);
//     int var47 = var41.getMaxLengthEstimate();
//     java.util.TimeZone var48 = var41.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var48);
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var48);
//     java.util.Locale var51 = var50.getLocale();
//     boolean var52 = var36.equals((java.lang.Object)var51);
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var33, var51);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var54 = var24.formatToCharacterIterator((java.lang.Object)0);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "4:00:00 PM PST"+ "'", var44.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var46 + "' != '" + "4:00:00 PM PST"+ "'", var46.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var52 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
// 
//   }

  public void test147() {}
//   public void test147() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var13);
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var13, var19);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var22 = var21.getPattern();
//     java.lang.String var23 = var21.toString();
//     java.util.Locale var24 = var21.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var13, var24);
//     java.lang.Object var26 = null;
//     java.lang.StringBuffer var27 = null;
//     java.text.FieldPosition var28 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var29 = var25.format(var26, var27, var28);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "M/d/yy h:mm a"+ "'", var22.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var23.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
// 
//   }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var14 = var13.getLocale();
//     java.lang.Object var15 = var13.clone();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var18 = var17.getPattern();
//     java.util.TimeZone var19 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var22 = var21.getPattern();
//     java.util.TimeZone var23 = var21.getTimeZone();
//     java.util.Locale var27 = null;
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var27);
//     java.util.Locale var29 = var28.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var31);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19, var31);
//     boolean var34 = var13.equals((java.lang.Object)var33);
//     java.lang.String var35 = var33.getPattern();
//     java.util.Locale var38 = null;
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var38);
//     java.util.Locale var40 = var39.getLocale();
//     java.lang.String var41 = var39.getPattern();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var42 = var33.formatToCharacterIterator((java.lang.Object)var41);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + "M/d/yy h:mm a"+ "'", var18.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "M/d/yy h:mm a"+ "'", var22.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var35 + "' != '" + "h:mm:ss a z"+ "'", var35.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var41 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z"+ "'", var41.equals("EEEE, MMMM d, yyyy h:mm:ss a z"));
// 
//   }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.TimeZone var10 = null;
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     boolean var12 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var14 = var11.format(1L);
//     boolean var15 = var11.getTimeZoneOverridesCalendar();
//     boolean var16 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var18 = var11.format((-1L));
//     java.lang.Object var19 = var11.clone();
//     java.util.Locale var20 = var11.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var6, var20);
//     boolean var24 = var22.equals((java.lang.Object)"FastDateFormat[EEEE, MMMM d, yyyy]");
//     java.util.Calendar var25 = null;
//     java.lang.StringBuffer var26 = null;
//     java.lang.StringBuffer var27 = var22.format(var25, var26);
// 
//   }

  public void test150() {}
//   public void test150() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var44 = var43.getPattern();
//     java.util.TimeZone var45 = var43.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var48 = var47.getPattern();
//     java.util.TimeZone var49 = var47.getTimeZone();
//     java.util.Locale var53 = null;
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var53);
//     java.util.Locale var55 = var54.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var55);
//     java.util.Locale var57 = var56.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var49, var57);
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var45, var57);
//     java.util.Locale var60 = var59.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var61 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 0, var15, var60);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "M/d/yy h:mm a"+ "'", var44.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var48 + "' != '" + "M/d/yy h:mm a"+ "'", var48.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
// 
//   }

  public void test151() {}
//   public void test151() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 20, var13);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test152() {}
//   public void test152() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var4 = var2.toString();
//     java.util.Locale var9 = null;
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var9);
//     java.util.Locale var11 = var10.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var13);
//     java.lang.String var15 = var14.getPattern();
//     java.lang.StringBuffer var16 = null;
//     java.text.FieldPosition var17 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var18 = var2.format((java.lang.Object)var14, var16, var17);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var4.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "MMMM d, yyyy"+ "'", var15.equals("MMMM d, yyyy"));
// 
//   }

  public void test153() {}
//   public void test153() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var14 = var13.getLocale();
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.TimeZone var20 = var19.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var20);
//     boolean var23 = var21.equals((java.lang.Object)(byte)10);
//     java.lang.StringBuffer var25 = null;
//     java.lang.StringBuffer var26 = var21.format((-1L), var25);
//     boolean var27 = var13.equals((java.lang.Object)var25);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var29);
//     int var31 = var30.getMaxLengthEstimate();
//     boolean var32 = var13.equals((java.lang.Object)var31);
//     java.util.TimeZone var33 = var13.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var35 = var13.parseObject("");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
// 
//   }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var1, var16);
//     int var18 = var17.getMaxLengthEstimate();
//     java.util.Locale var19 = var17.getLocale();
//     java.lang.String var21 = var17.format(0L);
//     java.lang.StringBuffer var23 = null;
//     java.lang.StringBuffer var24 = var17.format(0L, var23);
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
    java.lang.Object var2 = var1.clone();
    org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
    java.lang.Object var5 = var4.clone();
    boolean var6 = var4.getTimeZoneOverridesCalendar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = var1.format((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test156() {}
//   public void test156() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var8);
//     java.util.Date var10 = null;
//     java.lang.String var11 = var9.format(var10);
// 
//   }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test158() {}
//   public void test158() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.Object var7 = var3.clone();
//     java.util.Locale var8 = var3.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[]", var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
// 
//   }

  public void test159() {}
//   public void test159() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var8);
//     java.util.Date var13 = null;
//     java.lang.String var14 = var12.format(var13);
// 
//   }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var15);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var15);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(21, 39, var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
// 
//   }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var2, var17);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy]", var17);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
// 
//   }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var8);
//     java.util.Locale var10 = var9.getLocale();
//     java.util.Date var11 = null;
//     java.lang.String var12 = var9.format(var11);
// 
//   }

  public void test163() {}
//   public void test163() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     boolean var15 = var14.getTimeZoneOverridesCalendar();
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var33);
//     java.util.TimeZone var40 = null;
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var40);
//     boolean var42 = var41.getTimeZoneOverridesCalendar();
//     java.lang.String var44 = var41.format(1L);
//     java.lang.String var46 = var41.format(1L);
//     int var47 = var41.getMaxLengthEstimate();
//     java.util.TimeZone var48 = var41.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var48);
//     java.util.Locale var52 = null;
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var52);
//     java.util.Locale var54 = var53.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var48, var54);
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var54);
//     boolean var57 = var14.equals((java.lang.Object)var23);
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.TimeZone var59 = var58.getTimeZone();
//     java.text.ParsePosition var61 = null;
//     java.lang.Object var62 = var58.parseObject("Wednesday, December 31, 1969", var61);
// 
//   }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
    java.util.Locale var2 = var1.getLocale();
    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var5);
    java.util.Locale var7 = var6.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.text.AttributedCharacterIterator var8 = var1.formatToCharacterIterator((java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test166() {}
//   public void test166() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     java.util.TimeZone var9 = null;
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
//     boolean var11 = var10.getTimeZoneOverridesCalendar();
//     java.lang.String var13 = var10.format(1L);
//     java.lang.String var15 = var10.format(1L);
//     int var16 = var10.getMaxLengthEstimate();
//     java.util.TimeZone var17 = var10.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var5, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var20);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(39, var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "4:00:00 PM PST"+ "'", var15.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }


    java.util.Locale var3 = null;
    org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
    java.util.TimeZone var5 = var4.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
    boolean var8 = var6.equals((java.lang.Object)(byte)10);
    java.util.Locale var9 = var6.getLocale();
    java.lang.StringBuffer var11 = null;
    java.lang.StringBuffer var12 = var6.format(100L, var11);
    org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var16 = var6.format((java.lang.Object)0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test168() {}
//   public void test168() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var6 = var2.toString();
//     java.lang.String var7 = var2.getPattern();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var9 = var2.parseObject("M/d/yy h:mm a");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var6.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "h:mm:ss a z"+ "'", var7.equals("h:mm:ss a z"));
// 
//   }

  public void test169() {}
//   public void test169() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     java.util.TimeZone var7 = var6.getTimeZone();
//     java.lang.Object var8 = var6.clone();
//     java.lang.String var9 = var6.getPattern();
//     boolean var10 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var12 = null;
//     java.util.TimeZone var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var17.format(1L);
//     java.lang.String var22 = var17.format(1L);
//     int var23 = var17.getMaxLengthEstimate();
//     java.util.TimeZone var24 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var24);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.Locale var27 = var26.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var12, var27);
//     int var29 = var28.getMaxLengthEstimate();
//     int var30 = var28.getMaxLengthEstimate();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var31 = var6.formatToCharacterIterator((java.lang.Object)var28);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == 21);
// 
//   }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format((java.lang.Object)(-1L));
//     java.util.TimeZone var6 = var2.getTimeZone();
//     java.lang.String var8 = var2.format(0L);
//     java.util.Locale var9 = var2.getLocale();
//     java.lang.String var11 = var2.format(100L);
//     java.util.TimeZone var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var15 = var2.formatToCharacterIterator((java.lang.Object)var13);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "3:59:59 PM PST"+ "'", var5.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var6);
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var18);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var18);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var18);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     java.util.TimeZone var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var28);
//     boolean var30 = var29.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var31 = var29.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var31);
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var38 = null;
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var38);
//     boolean var40 = var39.getTimeZoneOverridesCalendar();
//     java.lang.String var42 = var39.format(1L);
//     java.lang.String var44 = var39.format(1L);
//     int var45 = var39.getMaxLengthEstimate();
//     java.util.TimeZone var46 = var39.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var46);
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var46);
//     java.util.Locale var49 = var48.getLocale();
//     boolean var50 = var34.equals((java.lang.Object)var49);
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var31, var49);
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var23, var49);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var53 = var8.formatToCharacterIterator((java.lang.Object)var49);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var42 + "' != '" + "4:00:00 PM PST"+ "'", var42.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "4:00:00 PM PST"+ "'", var44.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
// 
//   }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }


    java.util.Locale var3 = null;
    org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var3);
    java.util.Locale var5 = var4.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("3:59:59 PM PST", var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test174() {}
//   public void test174() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(100, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
// 
//   }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
//     java.util.Locale var9 = var8.getLocale();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     java.util.TimeZone var12 = null;
//     java.util.TimeZone var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var17.format(1L);
//     java.lang.String var22 = var17.format(1L);
//     int var23 = var17.getMaxLengthEstimate();
//     java.util.TimeZone var24 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var24);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.Locale var27 = var26.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var12, var27);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(18, 50, var10, var27);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test176() {}
//   public void test176() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(39, 0, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
// 
//   }

  public void test177() {}
//   public void test177() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var16 = var15.getLocale();
//     boolean var17 = var1.equals((java.lang.Object)var16);
//     boolean var18 = var1.getTimeZoneOverridesCalendar();
//     java.text.ParsePosition var20 = null;
//     java.lang.Object var21 = var1.parseObject("MMMM d, yyyy h:mm:ss a z", var20);
// 
//   }

  public void test178() {}
//   public void test178() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.util.TimeZone var4 = var3.getTimeZone();
//     java.lang.StringBuffer var6 = null;
//     java.lang.StringBuffer var7 = var3.format((-1L), var6);
// 
//   }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }


    org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
    java.util.TimeZone var2 = var1.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(38, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test180() {}
//   public void test180() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Locale var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var18);
//     java.util.TimeZone var25 = null;
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var25);
//     boolean var27 = var26.getTimeZoneOverridesCalendar();
//     java.lang.String var29 = var26.format(1L);
//     java.lang.String var31 = var26.format(1L);
//     int var32 = var26.getMaxLengthEstimate();
//     java.util.TimeZone var33 = var26.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var33);
//     java.util.Locale var37 = null;
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var37);
//     java.util.Locale var39 = var38.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var33, var39);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var39);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(50, var39);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "4:00:00 PM PST"+ "'", var29.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "4:00:00 PM PST"+ "'", var31.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
// 
//   }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(50, var23);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
// 
//   }

  public void test182() {}
//   public void test182() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.lang.String var2 = var0.toString();
//     int var3 = var0.getMaxLengthEstimate();
//     boolean var4 = var0.getTimeZoneOverridesCalendar();
//     java.util.Locale var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var13);
//     java.lang.Object var18 = var17.clone();
//     java.util.TimeZone var19 = var17.getTimeZone();
//     java.lang.StringBuffer var20 = null;
//     java.text.FieldPosition var21 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var22 = var0.format((java.lang.Object)var17, var20, var21);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var2.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
// 
//   }

  public void test183() {}
//   public void test183() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.lang.String var6 = var5.toString();
//     java.util.Locale var7 = var5.getLocale();
//     java.util.Locale var8 = var5.getLocale();
//     java.util.TimeZone var9 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     java.util.Locale var19 = var18.getLocale();
//     java.util.TimeZone var20 = var18.getTimeZone();
//     java.util.Locale var21 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var21);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(100, var9, var21);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var6.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var14 = var13.getLocale();
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.TimeZone var20 = var19.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var20);
//     boolean var23 = var21.equals((java.lang.Object)(byte)10);
//     java.lang.StringBuffer var25 = null;
//     java.lang.StringBuffer var26 = var21.format((-1L), var25);
//     boolean var27 = var13.equals((java.lang.Object)var25);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var29);
//     int var31 = var30.getMaxLengthEstimate();
//     boolean var32 = var13.equals((java.lang.Object)var31);
//     java.lang.StringBuffer var34 = null;
//     java.lang.StringBuffer var35 = var13.format((-1L), var34);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var37 = var13.parseObject("3:59:59 PM PST");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
// 
//   }

  public void test185() {}
//   public void test185() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.lang.Object var2 = var1.clone();
//     boolean var3 = var1.getTimeZoneOverridesCalendar();
//     java.util.Date var4 = null;
//     java.lang.String var5 = var1.format(var4);
// 
//   }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.Locale var7 = var6.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((-1), var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test187() {}
//   public void test187() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var23 = var22.getPattern();
//     java.lang.String var24 = var22.toString();
//     java.util.Locale var25 = var22.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var14, var25);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(39, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "M/d/yy h:mm a"+ "'", var23.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var24 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var24.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
// 
//   }

  public void test188() {}
//   public void test188() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.Locale var20 = var19.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(10, 0, var14, var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
// 
//   }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     int var8 = var2.getMaxLengthEstimate();
//     java.util.TimeZone var9 = var2.getTimeZone();
//     java.lang.String var10 = var2.toString();
//     java.util.TimeZone var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     boolean var16 = var15.getTimeZoneOverridesCalendar();
//     java.lang.String var18 = var15.format(1L);
//     java.lang.String var20 = var15.format(1L);
//     int var21 = var15.getMaxLengthEstimate();
//     java.util.TimeZone var22 = var15.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var22);
//     boolean var25 = var24.getTimeZoneOverridesCalendar();
//     java.util.Locale var31 = null;
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var31);
//     java.util.TimeZone var33 = var32.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var33);
//     java.util.Locale var39 = null;
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var39);
//     java.util.Locale var41 = var40.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var41);
//     java.util.Locale var43 = var42.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var43);
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var33, var43);
//     java.util.TimeZone var50 = null;
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var50);
//     boolean var52 = var51.getTimeZoneOverridesCalendar();
//     java.lang.String var54 = var51.format(1L);
//     java.lang.String var56 = var51.format(1L);
//     int var57 = var51.getMaxLengthEstimate();
//     java.util.TimeZone var58 = var51.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var58);
//     java.util.Locale var62 = null;
//     org.apache.commons.lang3.time.FastDateFormat var63 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var62);
//     java.util.Locale var64 = var63.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var65 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var58, var64);
//     org.apache.commons.lang3.time.FastDateFormat var66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var33, var64);
//     boolean var67 = var24.equals((java.lang.Object)var33);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var68 = var2.format((java.lang.Object)var33);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var10.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + "4:00:00 PM PST"+ "'", var18.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var52 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var54 + "' != '" + "4:00:00 PM PST"+ "'", var54.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var56 + "' != '" + "4:00:00 PM PST"+ "'", var56.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var67 == false);
// 
//   }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
    java.util.TimeZone var3 = var2.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(10, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(21, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var1, var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
// 
//   }

  public void test193() {}
//   public void test193() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.lang.String var19 = var16.format(1L);
//     java.lang.String var21 = var16.format(1L);
//     int var22 = var16.getMaxLengthEstimate();
//     java.util.TimeZone var23 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var26 = var25.getLocale();
//     boolean var27 = var11.equals((java.lang.Object)var26);
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var8, var26);
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var26);
//     java.lang.String var31 = var29.format(10L);
//     java.util.TimeZone var36 = null;
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var36);
//     boolean var38 = var37.getTimeZoneOverridesCalendar();
//     java.lang.String var40 = var37.format(1L);
//     java.lang.String var42 = var37.format(1L);
//     int var43 = var37.getMaxLengthEstimate();
//     java.util.TimeZone var44 = var37.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var44);
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var44);
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var44);
//     java.lang.Object var48 = var47.clone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var49 = var29.formatToCharacterIterator(var48);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "4:00:00 PM PST"+ "'", var19.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "December 31, 1969"+ "'", var31.equals("December 31, 1969"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "4:00:00 PM PST"+ "'", var40.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var42 + "' != '" + "4:00:00 PM PST"+ "'", var42.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
// 
//   }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     int var3 = var0.getMaxLengthEstimate();
//     java.lang.StringBuffer var5 = null;
//     java.lang.StringBuffer var6 = var0.format(100L, var5);
// 
//   }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var6);
//     java.util.Calendar var9 = null;
//     java.lang.StringBuffer var10 = null;
//     java.lang.StringBuffer var11 = var8.format(var9, var10);
// 
//   }

  public void test196() {}
//   public void test196() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.String var8 = var3.format(1L);
//     int var9 = var3.getMaxLengthEstimate();
//     java.lang.Object var10 = var3.clone();
//     java.util.TimeZone var11 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var11);
//     java.util.Calendar var13 = null;
//     java.lang.StringBuffer var14 = null;
//     java.lang.StringBuffer var15 = var12.format(var13, var14);
// 
//   }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.Locale var9 = var8.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     java.util.Locale var11 = var10.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var3, var11);
//     java.util.TimeZone var13 = var12.getTimeZone();
//     java.util.Calendar var14 = null;
//     java.lang.String var15 = var12.format(var14);
// 
//   }

  public void test198() {}
//   public void test198() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.TimeZone var7 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var7);
//     java.util.TimeZone var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var17.format(1L);
//     java.lang.String var22 = var17.format(1L);
//     int var23 = var17.getMaxLengthEstimate();
//     java.util.TimeZone var24 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var24);
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var24, var30);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var34 = var33.getPattern();
//     java.util.TimeZone var35 = var33.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var38 = var37.getPattern();
//     java.util.TimeZone var39 = var37.getTimeZone();
//     java.util.Locale var43 = null;
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var43);
//     java.util.Locale var45 = var44.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var45);
//     java.util.Locale var47 = var46.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var39, var47);
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var35, var47);
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var24, var47);
//     java.util.Locale var54 = null;
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var54);
//     java.util.Locale var56 = var55.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var56);
//     java.util.Locale var58 = var57.getLocale();
//     java.util.TimeZone var59 = var57.getTimeZone();
//     java.util.Locale var60 = var57.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var24, var60);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var62 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4:00:00 PM PST", var7, var60);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "M/d/yy h:mm a"+ "'", var34.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var38 + "' != '" + "M/d/yy h:mm a"+ "'", var38.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
// 
//   }

  public void test199() {}
//   public void test199() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     boolean var6 = var2.getTimeZoneOverridesCalendar();
//     boolean var7 = var2.getTimeZoneOverridesCalendar();
//     java.lang.StringBuffer var9 = null;
//     java.lang.StringBuffer var10 = var2.format(100L, var9);
// 
//   }

  public void test200() {}
//   public void test200() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(50, 38, var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
// 
//   }

  public void test201() {}
//   public void test201() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12);
//     java.util.Date var16 = null;
//     java.lang.String var17 = var15.format(var16);
// 
//   }

  public void test202() {}
//   public void test202() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
//     java.util.Locale var14 = var13.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var16);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6, var16);
//     boolean var19 = var18.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var18.getPattern();
//     java.util.Date var21 = null;
//     java.lang.String var22 = var18.format(var21);
// 
//   }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var7);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test204() {}
//   public void test204() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
//     boolean var3 = var1.equals((java.lang.Object)(byte)0);
//     java.lang.String var4 = var1.getPattern();
//     java.lang.String var5 = var1.toString();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var7 = var1.parseObject("FastDateFormat[M/d/yy h:mm a]");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "EEEE, MMMM d, yyyy"+ "'", var4.equals("EEEE, MMMM d, yyyy"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy]"+ "'", var5.equals("FastDateFormat[EEEE, MMMM d, yyyy]"));
// 
//   }

  public void test205() {}
//   public void test205() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var15);
//     java.util.TimeZone var24 = null;
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var24);
//     boolean var26 = var25.getTimeZoneOverridesCalendar();
//     java.lang.String var28 = var25.format(1L);
//     java.lang.String var30 = var25.format(1L);
//     int var31 = var25.getMaxLengthEstimate();
//     java.util.TimeZone var32 = var25.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var32);
//     java.util.Locale var36 = null;
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var32, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(20, var38);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var28 + "' != '" + "4:00:00 PM PST"+ "'", var28.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "4:00:00 PM PST"+ "'", var30.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
// 
//   }

  public void test206() {}
//   public void test206() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.lang.Object var11 = var4.clone();
//     java.util.TimeZone var12 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12);
//     java.util.Locale var14 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[MMMM d, yyyy]", var12, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var6);
//     java.util.Date var9 = null;
//     java.lang.String var10 = var8.format(var9);
// 
//   }

  public void test208() {}
//   public void test208() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var12 = var11.getPattern();
//     java.util.TimeZone var13 = var11.getTimeZone();
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var13, var21);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var21);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(18, 39, var21);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "M/d/yy h:mm a"+ "'", var12.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
// 
//   }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
//     boolean var3 = var1.equals((java.lang.Object)(byte)0);
//     java.util.Date var4 = null;
//     java.lang.String var5 = var1.format(var4);
// 
//   }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z");
//     java.text.ParsePosition var3 = null;
//     java.lang.Object var4 = var1.parseObject("EEEE, MMMM d, yyyy", var3);
// 
//   }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var15);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69 3:59 PM", var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
// 
//   }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    java.util.Locale var3 = null;
    org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
    java.util.Locale var5 = var4.getLocale();
    java.util.TimeZone var6 = var4.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(18, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     boolean var8 = var4.getTimeZoneOverridesCalendar();
//     boolean var9 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var4.format((-1L));
//     java.lang.Object var12 = var4.clone();
//     java.util.Locale var13 = var4.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var13);
//     java.util.Locale var15 = var14.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69 4:00 PM", var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "3:59:59 PM PST"+ "'", var11.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test214() {}
//   public void test214() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     int var2 = var1.getMaxLengthEstimate();
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var5 = var4.getPattern();
//     java.util.TimeZone var6 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var9 = var8.getPattern();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     java.util.Locale var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10, var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var6, var18);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var21 = var1.format((java.lang.Object)var18);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "M/d/yy h:mm a"+ "'", var5.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "M/d/yy h:mm a"+ "'", var9.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
// 
//   }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test216() {}
//   public void test216() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     int var8 = var2.getMaxLengthEstimate();
//     java.util.TimeZone var9 = var2.getTimeZone();
//     java.lang.StringBuffer var11 = null;
//     java.lang.StringBuffer var12 = var2.format(0L, var11);
// 
//   }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test218() {}
//   public void test218() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy");
//     java.util.Calendar var2 = null;
//     java.lang.StringBuffer var3 = null;
//     java.lang.StringBuffer var4 = var1.format(var2, var3);
// 
//   }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     java.lang.String var8 = var6.format((-1L));
//     java.text.ParsePosition var10 = null;
//     java.lang.Object var11 = var6.parseObject("3:59:59 PM PST", var10);
// 
//   }

  public void test220() {}
//   public void test220() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var30);
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var30);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var30);
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var30);
//     java.util.TimeZone var35 = var34.getTimeZone();
//     java.util.TimeZone var40 = null;
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var40);
//     boolean var42 = var41.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var43 = var41.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var43);
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var50 = null;
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var50);
//     boolean var52 = var51.getTimeZoneOverridesCalendar();
//     java.lang.String var54 = var51.format(1L);
//     java.lang.String var56 = var51.format(1L);
//     int var57 = var51.getMaxLengthEstimate();
//     java.util.TimeZone var58 = var51.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var58);
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var58);
//     java.util.Locale var61 = var60.getLocale();
//     boolean var62 = var46.equals((java.lang.Object)var61);
//     org.apache.commons.lang3.time.FastDateFormat var63 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var43, var61);
//     org.apache.commons.lang3.time.FastDateFormat var64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var35, var61);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var65 = org.apache.commons.lang3.time.FastDateFormat.getInstance("December 31, 1969", var15, var61);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var52 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var54 + "' != '" + "4:00:00 PM PST"+ "'", var54.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var56 + "' != '" + "4:00:00 PM PST"+ "'", var56.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var62 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
// 
//   }

  public void test221() {}
//   public void test221() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var7);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.util.TimeZone var9 = null;
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
//     boolean var11 = var10.getTimeZoneOverridesCalendar();
//     java.lang.String var13 = var10.format(1L);
//     java.lang.String var15 = var10.format(1L);
//     int var16 = var10.getMaxLengthEstimate();
//     java.util.TimeZone var17 = var10.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var17);
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.Locale var23 = var22.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var17, var23);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var27 = var26.getPattern();
//     java.util.TimeZone var28 = var26.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var31 = var30.getPattern();
//     java.util.TimeZone var32 = var30.getTimeZone();
//     java.util.Locale var36 = null;
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var38);
//     java.util.Locale var40 = var39.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var32, var40);
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var28, var40);
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var17, var40);
//     java.util.TimeZone var44 = var43.getTimeZone();
//     java.util.TimeZone var46 = null;
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var46);
//     boolean var48 = var47.getTimeZoneOverridesCalendar();
//     java.lang.String var50 = var47.format(1L);
//     java.lang.String var52 = var47.format(1L);
//     java.util.Locale var53 = var47.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var44, var53);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var55 = var2.formatToCharacterIterator((java.lang.Object)var53);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "4:00:00 PM PST"+ "'", var15.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "M/d/yy h:mm a"+ "'", var27.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "M/d/yy h:mm a"+ "'", var31.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var50 + "' != '" + "4:00:00 PM PST"+ "'", var50.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var52 + "' != '" + "4:00:00 PM PST"+ "'", var52.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
// 
//   }

  public void test223() {}
//   public void test223() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     int var3 = var0.getMaxLengthEstimate();
//     boolean var4 = var0.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var0.format(0L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "12/31/69 4:00 PM"+ "'", var6.equals("12/31/69 4:00 PM"));
// 
//   }

  public void test224() {}
//   public void test224() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.Locale var2 = var1.getLocale();
//     java.util.Locale var3 = var1.getLocale();
//     java.util.Calendar var4 = null;
//     java.lang.StringBuffer var5 = null;
//     java.lang.StringBuffer var6 = var1.format(var4, var5);
// 
//   }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }
// 
// 
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
//     java.util.TimeZone var10 = var9.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
//     java.util.Locale var12 = var11.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var12);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     java.text.ParsePosition var18 = null;
//     java.lang.Object var19 = var16.parseObject("12/31/69 4:00 PM", var18);
// 
//   }

  public void test226() {}
//   public void test226() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var23 = var22.getPattern();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var32);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((-1), var15, var32);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "M/d/yy h:mm a"+ "'", var23.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
// 
//   }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var17);
//     boolean var19 = var18.getTimeZoneOverridesCalendar();
//     java.lang.String var21 = var18.format(1L);
//     java.lang.String var23 = var18.format(1L);
//     int var24 = var18.getMaxLengthEstimate();
//     java.util.TimeZone var25 = var18.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var25);
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var25);
//     java.util.Locale var28 = var27.getLocale();
//     boolean var29 = var13.equals((java.lang.Object)var28);
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var10, var28);
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(39, 18, var10);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "4:00:00 PM PST"+ "'", var23.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
// 
//   }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.TimeZone var10 = null;
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     boolean var12 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var14 = var11.format(1L);
//     boolean var15 = var11.getTimeZoneOverridesCalendar();
//     boolean var16 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var18 = var11.format((-1L));
//     java.lang.Object var19 = var11.clone();
//     java.util.Locale var20 = var11.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var6, var20);
//     java.lang.StringBuffer var24 = null;
//     java.lang.StringBuffer var25 = var22.format(0L, var24);
// 
//   }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     boolean var8 = var6.equals((java.lang.Object)(byte)10);
//     java.util.Locale var9 = var6.getLocale();
//     java.util.Calendar var10 = null;
//     java.lang.String var11 = var6.format(var10);
// 
//   }

  public void test231() {}
//   public void test231() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     int var5 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var6 = var4.getTimeZone();
//     java.util.TimeZone var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     boolean var14 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var16 = var13.format(1L);
//     java.lang.String var18 = var13.format(1L);
//     int var19 = var13.getMaxLengthEstimate();
//     java.util.TimeZone var20 = var13.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var20);
//     java.util.Locale var24 = null;
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var24);
//     java.util.Locale var26 = var25.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var20, var26);
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var30 = var29.getPattern();
//     java.util.TimeZone var31 = var29.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var34 = var33.getPattern();
//     java.util.TimeZone var35 = var33.getTimeZone();
//     java.util.Locale var39 = null;
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var39);
//     java.util.Locale var41 = var40.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var41);
//     java.util.Locale var43 = var42.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var35, var43);
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var31, var43);
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var20, var43);
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var6, var43);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 0, var43);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "4:00:00 PM PST"+ "'", var16.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + "4:00:00 PM PST"+ "'", var18.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "M/d/yy h:mm a"+ "'", var30.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "M/d/yy h:mm a"+ "'", var34.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
// 
//   }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format((java.lang.Object)(-1L));
//     java.util.TimeZone var9 = var5.getTimeZone();
//     java.lang.String var11 = var5.format(0L);
//     java.util.TimeZone var12 = var5.getTimeZone();
//     java.util.Locale var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(18, 0, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "3:59:59 PM PST"+ "'", var8.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var15);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.Locale var23 = var22.getLocale();
//     java.util.Locale var24 = var22.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[MMMM d, yyyy]", var15, var24);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
// 
//   }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var4 = var3.getPattern();
//     java.util.TimeZone var5 = var3.getTimeZone();
//     java.util.Locale var9 = null;
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var9);
//     java.util.Locale var11 = var10.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var13 = var12.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var5, var13);
//     java.util.TimeZone var15 = var14.getTimeZone();
//     java.util.Locale var22 = null;
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var22);
//     java.util.Locale var24 = var23.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var24);
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var24);
//     boolean var28 = var27.getTimeZoneOverridesCalendar();
//     boolean var29 = var27.getTimeZoneOverridesCalendar();
//     java.util.Locale var30 = var27.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var30);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(18, 20, var15, var30);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "M/d/yy h:mm a"+ "'", var4.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
// 
//   }

  public void test235() {}
//   public void test235() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var6 = var2.toString();
//     java.lang.String var7 = var2.getPattern();
//     java.util.TimeZone var8 = var2.getTimeZone();
//     java.util.TimeZone var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.lang.String var19 = var16.format(1L);
//     java.lang.String var21 = var16.format(1L);
//     int var22 = var16.getMaxLengthEstimate();
//     java.util.TimeZone var23 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var23);
//     java.util.Locale var27 = null;
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var27);
//     java.util.Locale var29 = var28.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var23, var29);
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var33 = var32.getPattern();
//     java.util.TimeZone var34 = var32.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var37 = var36.getPattern();
//     java.util.TimeZone var38 = var36.getTimeZone();
//     java.util.Locale var42 = null;
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var42);
//     java.util.Locale var44 = var43.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var44);
//     java.util.Locale var46 = var45.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var38, var46);
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var34, var46);
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var23, var46);
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var23);
//     boolean var51 = var2.equals((java.lang.Object)var50);
//     java.text.ParsePosition var53 = null;
//     java.lang.Object var54 = var50.parseObject("3:59:59 PM PST", var53);
// 
//   }

  public void test236() {}
//   public void test236() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format((java.lang.Object)(-1L));
//     java.util.TimeZone var10 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(39, var10);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "3:59:59 PM PST"+ "'", var9.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var24 = var23.getPattern();
//     java.util.TimeZone var25 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var28 = var27.getPattern();
//     java.util.TimeZone var29 = var27.getTimeZone();
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var29, var37);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var25, var37);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var37);
//     java.util.Locale var44 = null;
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var44);
//     java.util.Locale var46 = var45.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var46);
//     java.util.Locale var48 = var47.getLocale();
//     java.util.TimeZone var49 = var47.getTimeZone();
//     java.util.Locale var50 = var47.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14, var50);
//     java.util.Date var52 = null;
//     java.lang.String var53 = var51.format(var52);
// 
//   }

  public void test238() {}
//   public void test238() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.lang.String var2 = var0.getPattern();
//     java.lang.String var4 = var0.format((-1L));
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.Locale var9 = var8.getLocale();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var11 = var0.format((java.lang.Object)var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "M/d/yy h:mm a"+ "'", var2.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "12/31/69 3:59 PM"+ "'", var4.equals("12/31/69 3:59 PM"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
// 
//   }

  public void test239() {}
//   public void test239() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.lang.String var4 = var3.toString();
//     java.util.Locale var5 = var3.getLocale();
//     java.util.Locale var6 = var3.getLocale();
//     java.util.TimeZone var7 = var3.getTimeZone();
//     java.util.Date var8 = null;
//     java.lang.String var9 = var3.format(var8);
// 
//   }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }


    java.util.Locale var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.TimeZone var8 = var7.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    java.util.Locale var10 = var9.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var10);
    java.util.Locale var12 = var11.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(50, var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var11);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var15 = var13.parseObject("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }


    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
    java.util.Locale var3 = var2.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(20, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test244() {}
//   public void test244() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }
// 
// 
//     java.util.TimeZone var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var8);
//     boolean var10 = var9.getTimeZoneOverridesCalendar();
//     java.lang.String var12 = var9.format(1L);
//     java.lang.String var14 = var9.format(1L);
//     int var15 = var9.getMaxLengthEstimate();
//     java.util.TimeZone var16 = var9.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var16);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var16);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var16);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(20, 17, var16);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "4:00:00 PM PST"+ "'", var14.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
// 
//   }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }


    java.util.Locale var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(38, 0, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test246() {}
//   public void test246() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var24 = var23.getPattern();
//     java.util.TimeZone var25 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var28 = var27.getPattern();
//     java.util.TimeZone var29 = var27.getTimeZone();
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var29, var37);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var25, var37);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var37);
//     java.util.TimeZone var45 = null;
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var45);
//     boolean var47 = var46.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var48 = var46.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var48);
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var55 = null;
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var55);
//     boolean var57 = var56.getTimeZoneOverridesCalendar();
//     java.lang.String var59 = var56.format(1L);
//     java.lang.String var61 = var56.format(1L);
//     int var62 = var56.getMaxLengthEstimate();
//     java.util.TimeZone var63 = var56.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var63);
//     org.apache.commons.lang3.time.FastDateFormat var65 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var63);
//     java.util.Locale var66 = var65.getLocale();
//     boolean var67 = var51.equals((java.lang.Object)var66);
//     org.apache.commons.lang3.time.FastDateFormat var68 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var48, var66);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var69 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69 4:00 PM", var14, var66);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var24 + "' != '" + "M/d/yy h:mm a"+ "'", var24.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var28 + "' != '" + "M/d/yy h:mm a"+ "'", var28.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var59 + "' != '" + "4:00:00 PM PST"+ "'", var59.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var61 + "' != '" + "4:00:00 PM PST"+ "'", var61.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var62 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var67 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
// 
//   }

  public void test247() {}
//   public void test247() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.TimeZone var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     boolean var14 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var16 = var13.format(1L);
//     boolean var17 = var13.getTimeZoneOverridesCalendar();
//     boolean var18 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var13.format((-1L));
//     java.lang.Object var21 = var13.clone();
//     java.util.Locale var22 = var13.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var8, var22);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.TimeZone var31 = var30.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     boolean var34 = var25.equals((java.lang.Object)var33);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[MMMM d, yyyy h:mm:ss a z]", var33);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "4:00:00 PM PST"+ "'", var16.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "3:59:59 PM PST"+ "'", var20.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
// 
//   }

  public void test248() {}
//   public void test248() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     java.util.TimeZone var11 = var10.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var15 = var14.getPattern();
//     java.util.TimeZone var16 = var14.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var19 = var18.getPattern();
//     java.util.TimeZone var20 = var18.getTimeZone();
//     java.util.Locale var24 = null;
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var24);
//     java.util.Locale var26 = var25.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var26);
//     java.util.Locale var28 = var27.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var20, var28);
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var16, var28);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var31);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(20, (-1), var11, var31);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "M/d/yy h:mm a"+ "'", var15.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "M/d/yy h:mm a"+ "'", var19.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
// 
//   }

  public void test249() {}
//   public void test249() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.lang.StringBuffer var15 = null;
//     java.lang.StringBuffer var16 = var13.format(100L, var15);
//     java.util.TimeZone var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var23 = var20.format(1L);
//     java.lang.String var25 = var20.format(1L);
//     int var26 = var20.getMaxLengthEstimate();
//     java.util.TimeZone var27 = var20.getTimeZone();
//     java.util.TimeZone var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var29);
//     boolean var31 = var30.getTimeZoneOverridesCalendar();
//     java.lang.String var33 = var30.format(1L);
//     boolean var34 = var30.getTimeZoneOverridesCalendar();
//     boolean var35 = var30.getTimeZoneOverridesCalendar();
//     java.lang.String var37 = var30.format((-1L));
//     java.lang.Object var38 = var30.clone();
//     java.util.Locale var39 = var30.getLocale();
//     java.lang.String var40 = var30.getPattern();
//     java.util.Locale var41 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var27, var41);
//     java.lang.StringBuffer var43 = null;
//     java.text.FieldPosition var44 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var45 = var13.format((java.lang.Object)var42, var43, var44);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "4:00:00 PM PST"+ "'", var23.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "4:00:00 PM PST"+ "'", var25.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "4:00:00 PM PST"+ "'", var33.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var37 + "' != '" + "3:59:59 PM PST"+ "'", var37.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "h:mm:ss a z"+ "'", var40.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
// 
//   }

  public void test250() {}
//   public void test250() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     boolean var11 = var7.getTimeZoneOverridesCalendar();
//     boolean var12 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var14 = var7.format((-1L));
//     java.lang.Object var15 = var7.clone();
//     java.util.Locale var16 = var7.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]", var4, var16);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "3:59:59 PM PST"+ "'", var14.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
// 
//   }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    boolean var12 = var11.getTimeZoneOverridesCalendar();
    boolean var13 = var11.getTimeZoneOverridesCalendar();
    java.util.Locale var14 = var11.getLocale();
    java.util.Locale var15 = var11.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(100, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test252() {}
//   public void test252() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.lang.String var3 = var2.toString();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var5 = var2.parseObject("");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "FastDateFormat[MMMM d, yyyy h:mm:ss a z]"+ "'", var3.equals("FastDateFormat[MMMM d, yyyy h:mm:ss a z]"));
// 
//   }

  public void test253() {}
//   public void test253() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.lang.String var2 = var0.toString();
//     java.util.Locale var3 = var0.getLocale();
//     java.lang.Object var4 = var0.clone();
//     java.util.Date var5 = null;
//     java.lang.String var6 = var0.format(var5);
// 
//   }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }


    org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
    java.lang.String var2 = var1.getPattern();
    java.util.TimeZone var3 = var1.getTimeZone();
    java.lang.Object var4 = null;
    java.lang.StringBuffer var5 = null;
    java.text.FieldPosition var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.StringBuffer var7 = var1.format(var4, var5, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     java.util.Locale var24 = null;
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var24);
//     java.lang.Object var26 = var25.clone();
//     java.lang.String var27 = var25.getPattern();
//     java.util.Locale var28 = var25.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(10, 0, var14, var28);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z"+ "'", var27.equals("EEEE, MMMM d, yyyy h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.TimeZone var6 = var5.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    java.util.Locale var12 = null;
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
    java.util.Locale var14 = var13.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
    java.util.Locale var16 = var15.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var16);
    org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6, var16);
    boolean var19 = var18.getTimeZoneOverridesCalendar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var21 = var18.parseObject("MMMM d, yyyy h:mm:ss a z");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test257() {}
//   public void test257() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var14);
//     java.util.TimeZone var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var21);
//     boolean var23 = var22.getTimeZoneOverridesCalendar();
//     java.lang.String var25 = var22.format(1L);
//     java.lang.String var27 = var22.format(1L);
//     int var28 = var22.getMaxLengthEstimate();
//     java.util.TimeZone var29 = var22.getTimeZone();
//     java.lang.String var30 = var22.toString();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var31 = var19.formatToCharacterIterator((java.lang.Object)var30);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "4:00:00 PM PST"+ "'", var25.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "4:00:00 PM PST"+ "'", var27.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var30.equals("FastDateFormat[h:mm:ss a z]"));
// 
//   }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     java.util.Locale var14 = var13.getLocale();
//     java.lang.Object var15 = var13.clone();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var18 = var17.getPattern();
//     java.util.TimeZone var19 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var22 = var21.getPattern();
//     java.util.TimeZone var23 = var21.getTimeZone();
//     java.util.Locale var27 = null;
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var27);
//     java.util.Locale var29 = var28.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var31);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19, var31);
//     boolean var34 = var13.equals((java.lang.Object)var33);
//     java.util.TimeZone var36 = null;
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var36);
//     boolean var38 = var37.getTimeZoneOverridesCalendar();
//     java.lang.String var40 = var37.format(1L);
//     java.lang.String var41 = var37.toString();
//     java.lang.String var42 = var37.getPattern();
//     java.util.TimeZone var43 = var37.getTimeZone();
//     java.util.TimeZone var50 = null;
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var50);
//     boolean var52 = var51.getTimeZoneOverridesCalendar();
//     java.lang.String var54 = var51.format(1L);
//     java.lang.String var56 = var51.format(1L);
//     int var57 = var51.getMaxLengthEstimate();
//     java.util.TimeZone var58 = var51.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var58);
//     java.util.Locale var62 = null;
//     org.apache.commons.lang3.time.FastDateFormat var63 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var62);
//     java.util.Locale var64 = var63.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var65 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var58, var64);
//     org.apache.commons.lang3.time.FastDateFormat var67 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var68 = var67.getPattern();
//     java.util.TimeZone var69 = var67.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var71 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var72 = var71.getPattern();
//     java.util.TimeZone var73 = var71.getTimeZone();
//     java.util.Locale var77 = null;
//     org.apache.commons.lang3.time.FastDateFormat var78 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var77);
//     java.util.Locale var79 = var78.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var79);
//     java.util.Locale var81 = var80.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var82 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var73, var81);
//     org.apache.commons.lang3.time.FastDateFormat var83 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var69, var81);
//     org.apache.commons.lang3.time.FastDateFormat var84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var58, var81);
//     org.apache.commons.lang3.time.FastDateFormat var85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var58);
//     boolean var86 = var37.equals((java.lang.Object)var85);
//     java.lang.StringBuffer var87 = null;
//     java.text.FieldPosition var88 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var89 = var13.format((java.lang.Object)var86, var87, var88);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + "M/d/yy h:mm a"+ "'", var18.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "M/d/yy h:mm a"+ "'", var22.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "4:00:00 PM PST"+ "'", var40.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var41 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var41.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var42 + "' != '" + "h:mm:ss a z"+ "'", var42.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var52 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var54 + "' != '" + "4:00:00 PM PST"+ "'", var54.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var56 + "' != '" + "4:00:00 PM PST"+ "'", var56.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var68 + "' != '" + "M/d/yy h:mm a"+ "'", var68.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var72 + "' != '" + "M/d/yy h:mm a"+ "'", var72.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var73);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var84);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var85);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var86 == false);
// 
//   }

  public void test259() {}
//   public void test259() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.lang.String var19 = var16.format(1L);
//     java.lang.String var21 = var16.format(1L);
//     int var22 = var16.getMaxLengthEstimate();
//     java.util.TimeZone var23 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var26 = var25.getLocale();
//     boolean var27 = var11.equals((java.lang.Object)var26);
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var8, var26);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(21, var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "4:00:00 PM PST"+ "'", var19.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.lang.String var2 = var1.toString();
//     boolean var3 = var1.getTimeZoneOverridesCalendar();
//     java.util.Calendar var4 = null;
//     java.lang.String var5 = var1.format(var4);
// 
//   }

  public void test261() {}
//   public void test261() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     java.util.TimeZone var9 = var7.getTimeZone();
//     java.util.Locale var10 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z", var10);
//     java.util.Calendar var12 = null;
//     java.lang.String var13 = var11.format(var12);
// 
//   }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     boolean var10 = var2.equals((java.lang.Object)var9);
//     java.util.Calendar var11 = null;
//     java.lang.StringBuffer var12 = null;
//     java.lang.StringBuffer var13 = var2.format(var11, var12);
// 
//   }

  public void test263() {}
//   public void test263() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var5 = var4.getPattern();
//     java.util.TimeZone var6 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var9 = var8.getPattern();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     java.util.Locale var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10, var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var6, var18);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var21);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var21);
//     java.util.Locale var24 = var23.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(38, var24);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "M/d/yy h:mm a"+ "'", var5.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "M/d/yy h:mm a"+ "'", var9.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
// 
//   }

  public void test264() {}
//   public void test264() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var6 = var2.toString();
//     java.util.Locale var7 = var2.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var9 = var8.getPattern();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     java.lang.String var11 = var8.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     boolean var13 = var8.equals((java.lang.Object)var12);
//     boolean var14 = var2.equals((java.lang.Object)var13);
//     java.util.TimeZone var15 = var2.getTimeZone();
//     java.util.Calendar var16 = null;
//     java.lang.String var17 = var2.format(var16);
// 
//   }

  public void test265() {}
//   public void test265() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
//     java.util.Locale var9 = var8.getLocale();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     java.util.TimeZone var11 = var8.getTimeZone();
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var19);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var19);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var19);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var11, var19);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var27 = var26.getPattern();
//     java.util.TimeZone var28 = var26.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var31 = var30.getPattern();
//     java.util.TimeZone var32 = var30.getTimeZone();
//     java.util.Locale var36 = null;
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var38);
//     java.util.Locale var40 = var39.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var32, var40);
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var28, var40);
//     java.util.Locale var43 = var42.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var43);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4:00:00 PM PST", var11, var43);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "M/d/yy h:mm a"+ "'", var27.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "M/d/yy h:mm a"+ "'", var31.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
// 
//   }

  public void test266() {}
//   public void test266() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     java.util.TimeZone var42 = var41.getTimeZone();
//     java.util.Locale var43 = var41.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var43);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((-1), var43);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
// 
//   }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z");
//     java.util.Calendar var2 = null;
//     java.lang.String var3 = var1.format(var2);
// 
//   }

  public void test268() {}
//   public void test268() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.Object var6 = var2.clone();
//     boolean var8 = var2.equals((java.lang.Object)"EEEE, MMMM d, yyyy");
//     java.lang.StringBuffer var10 = null;
//     java.text.FieldPosition var11 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var12 = var2.format((java.lang.Object)"hi!", var10, var11);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
// 
//   }

  public void test269() {}
//   public void test269() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.lang.String var3 = var2.toString();
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var10);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var14 = var13.getPattern();
//     java.util.TimeZone var15 = var13.getTimeZone();
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var21);
//     java.util.Locale var23 = var22.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var15, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10, var23);
//     boolean var26 = var2.equals((java.lang.Object)var25);
//     java.lang.String var27 = var2.getPattern();
//     java.util.Date var28 = null;
//     java.lang.String var29 = var2.format(var28);
// 
//   }

  public void test270() {}
//   public void test270() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.lang.String var4 = var2.format((java.lang.Object)1L);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var6 = var2.parseObject("EEEE, MMMM d, yyyy");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "4:00:00 PM PST"+ "'", var4.equals("4:00:00 PM PST"));
// 
//   }

  public void test271() {}
//   public void test271() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var6);
//     java.lang.Object var9 = var8.clone();
//     int var10 = var8.getMaxLengthEstimate();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var12 = var8.parseObject("FastDateFormat[h:mm:ss a z]");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 20);
// 
//   }

  public void test272() {}
//   public void test272() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var7);
//     java.util.TimeZone var10 = var9.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10);
//     java.text.ParsePosition var13 = null;
//     java.lang.Object var14 = var11.parseObject("FastDateFormat[]", var13);
// 
//   }

  public void test273() {}
//   public void test273() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var6 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var6);
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var10 = var9.getPattern();
//     java.util.TimeZone var11 = var9.getTimeZone();
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var11, var19);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6, var19);
//     java.util.TimeZone var22 = var21.getTimeZone();
//     java.util.TimeZone var27 = null;
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var27);
//     boolean var29 = var28.getTimeZoneOverridesCalendar();
//     java.lang.String var31 = var28.format(1L);
//     java.lang.String var33 = var28.format(1L);
//     int var34 = var28.getMaxLengthEstimate();
//     java.util.TimeZone var35 = var28.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var35);
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var35);
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.lang.Object var39 = var38.clone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var40 = var21.format(var39);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "M/d/yy h:mm a"+ "'", var10.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "4:00:00 PM PST"+ "'", var31.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "4:00:00 PM PST"+ "'", var33.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
// 
//   }

  public void test274() {}
//   public void test274() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.lang.String var5 = var4.toString();
//     java.util.Locale var6 = var4.getLocale();
//     java.util.Locale var7 = var4.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69 3:59 PM", var7);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var5.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
// 
//   }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.lang.String var2 = var1.toString();
//     boolean var3 = var1.getTimeZoneOverridesCalendar();
//     java.util.Date var4 = null;
//     java.lang.String var5 = var1.format(var4);
// 
//   }

  public void test276() {}
//   public void test276() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     int var4 = var3.getMaxLengthEstimate();
//     java.lang.Object var5 = null;
//     boolean var6 = var3.equals(var5);
//     java.text.ParsePosition var8 = null;
//     java.lang.Object var9 = var3.parseObject("3:59:59 PM PST", var8);
// 
//   }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    java.util.TimeZone var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(20, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var14);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.TimeZone var23 = null;
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var23);
//     boolean var25 = var24.getTimeZoneOverridesCalendar();
//     java.lang.String var27 = var24.format(1L);
//     java.lang.String var29 = var24.format(1L);
//     int var30 = var24.getMaxLengthEstimate();
//     java.util.TimeZone var31 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var31);
//     java.util.Locale var35 = null;
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var31, var37);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var41 = var40.getPattern();
//     java.util.TimeZone var42 = var40.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var45 = var44.getPattern();
//     java.util.TimeZone var46 = var44.getTimeZone();
//     java.util.Locale var50 = null;
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var50);
//     java.util.Locale var52 = var51.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var52);
//     java.util.Locale var54 = var53.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var46, var54);
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var42, var54);
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var31, var54);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((-1), 0, var14, var54);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "4:00:00 PM PST"+ "'", var27.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "4:00:00 PM PST"+ "'", var29.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var41 + "' != '" + "M/d/yy h:mm a"+ "'", var41.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + "M/d/yy h:mm a"+ "'", var45.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
// 
//   }

  public void test279() {}
//   public void test279() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var4);
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var16 = var5.formatToCharacterIterator((java.lang.Object)var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
//     java.util.Locale var10 = var9.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
//     java.util.Locale var12 = var11.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var4, var12);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy]", var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test281() {}
//   public void test281() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var45 = var44.getPattern();
//     java.util.TimeZone var46 = var44.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var49 = var48.getPattern();
//     java.util.TimeZone var50 = var48.getTimeZone();
//     java.util.Locale var54 = null;
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var54);
//     java.util.Locale var56 = var55.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var56);
//     java.util.Locale var58 = var57.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var50, var58);
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var46, var58);
//     org.apache.commons.lang3.time.FastDateFormat var63 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var64 = var63.getPattern();
//     java.util.TimeZone var65 = var63.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var67 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var68 = var67.getPattern();
//     java.util.TimeZone var69 = var67.getTimeZone();
//     java.util.Locale var73 = null;
//     org.apache.commons.lang3.time.FastDateFormat var74 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var73);
//     java.util.Locale var75 = var74.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var76 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var75);
//     java.util.Locale var77 = var76.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var69, var77);
//     org.apache.commons.lang3.time.FastDateFormat var79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var65, var77);
//     org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var77);
//     org.apache.commons.lang3.time.FastDateFormat var81 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var46, var77);
//     org.apache.commons.lang3.time.FastDateFormat var82 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15, var77);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var83 = org.apache.commons.lang3.time.FastDateFormat.getInstance("12/31/69 4:00 PM", var77);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + "M/d/yy h:mm a"+ "'", var45.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var49 + "' != '" + "M/d/yy h:mm a"+ "'", var49.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var64 + "' != '" + "M/d/yy h:mm a"+ "'", var64.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var68 + "' != '" + "M/d/yy h:mm a"+ "'", var68.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
// 
//   }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }


    java.util.TimeZone var2 = null;
    java.util.Locale var9 = null;
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var9);
    java.util.Locale var11 = var10.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var11);
    org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var11);
    boolean var15 = var14.getTimeZoneOverridesCalendar();
    boolean var16 = var14.getTimeZoneOverridesCalendar();
    java.util.Locale var17 = var14.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(39, 1, var2, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test283() {}
//   public void test283() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     java.util.Locale var8 = var2.getLocale();
//     int var9 = var2.getMaxLengthEstimate();
//     boolean var10 = var2.getTimeZoneOverridesCalendar();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var18);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var18);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var22 = var2.formatToCharacterIterator((java.lang.Object)1);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
// 
//   }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     int var8 = var2.getMaxLengthEstimate();
//     java.lang.Object var9 = var2.clone();
//     java.lang.String var10 = var2.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.Locale var13 = var12.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var14 = var2.formatToCharacterIterator((java.lang.Object)var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "h:mm:ss a z"+ "'", var10.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test285() {}
//   public void test285() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var8);
//     java.util.TimeZone var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var17);
//     boolean var19 = var18.getTimeZoneOverridesCalendar();
//     java.lang.String var21 = var18.format(1L);
//     java.lang.String var23 = var18.format(1L);
//     int var24 = var18.getMaxLengthEstimate();
//     java.util.TimeZone var25 = var18.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var25);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var25, var31);
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var35 = var34.getPattern();
//     java.util.TimeZone var36 = var34.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var39 = var38.getPattern();
//     java.util.TimeZone var40 = var38.getTimeZone();
//     java.util.Locale var44 = null;
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var44);
//     java.util.Locale var46 = var45.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var46);
//     java.util.Locale var48 = var47.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var40, var48);
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var36, var48);
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var25, var48);
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var48);
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var8, var48);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[M/d/yy h:mm a]", var48);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "4:00:00 PM PST"+ "'", var23.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var35 + "' != '" + "M/d/yy h:mm a"+ "'", var35.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var39 + "' != '" + "M/d/yy h:mm a"+ "'", var39.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
// 
//   }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var4 = var3.getPattern();
//     java.util.TimeZone var5 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var8 = var7.getPattern();
//     java.util.TimeZone var9 = var7.getTimeZone();
//     java.util.Locale var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var5, var17);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var23 = var22.getPattern();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var27 = var26.getPattern();
//     java.util.TimeZone var28 = var26.getTimeZone();
//     java.util.Locale var32 = null;
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var32);
//     java.util.Locale var34 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var28, var36);
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var24, var36);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var36);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var5, var36);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var36);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "M/d/yy h:mm a"+ "'", var4.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "M/d/yy h:mm a"+ "'", var8.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "M/d/yy h:mm a"+ "'", var23.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "M/d/yy h:mm a"+ "'", var27.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
// 
//   }

  public void test287() {}
//   public void test287() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var2 = var1.getPattern();
//     java.util.TimeZone var3 = var1.getTimeZone();
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.Locale var9 = var8.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     java.util.Locale var11 = var10.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var3, var11);
//     java.util.TimeZone var13 = var12.getTimeZone();
//     java.util.Date var14 = null;
//     java.lang.StringBuffer var15 = null;
//     java.lang.StringBuffer var16 = var12.format(var14, var15);
// 
//   }

  public void test288() {}
//   public void test288() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var12 = var11.getPattern();
//     java.util.TimeZone var13 = var11.getTimeZone();
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var13, var21);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var21);
//     java.util.TimeZone var24 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var24);
//     java.util.TimeZone var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var29);
//     boolean var31 = var30.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var32 = var30.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var32);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var36 = var35.getPattern();
//     java.util.TimeZone var37 = var35.getTimeZone();
//     java.util.Locale var41 = null;
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var41);
//     java.util.Locale var43 = var42.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var43);
//     java.util.Locale var45 = var44.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var37, var45);
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var32, var45);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Wednesday, December 31, 1969 4:00:00 PM PST", var24, var45);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "M/d/yy h:mm a"+ "'", var12.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var36 + "' != '" + "M/d/yy h:mm a"+ "'", var36.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
// 
//   }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }


    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
    java.lang.String var3 = var2.getPattern();
    java.util.TimeZone var4 = var2.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(39, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.TimeZone var7 = var6.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var7);
    java.util.Locale var11 = null;
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
    boolean var13 = var12.getTimeZoneOverridesCalendar();
    java.lang.Object var14 = var12.clone();
    java.util.Locale var15 = var12.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(100, var7, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test291() {}
//   public void test291() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     java.lang.String var3 = var2.getPattern();
//     java.lang.String var4 = var2.getPattern();
//     java.text.ParsePosition var6 = null;
//     java.lang.Object var7 = var2.parseObject("3:59:59 PM PST", var6);
// 
//   }

  public void test292() {}
//   public void test292() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var12);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     java.util.Date var16 = null;
//     java.lang.StringBuffer var17 = null;
//     java.lang.StringBuffer var18 = var15.format(var16, var17);
// 
//   }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test294() {}
//   public void test294() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     boolean var16 = var15.getTimeZoneOverridesCalendar();
//     java.util.Locale var22 = null;
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var22);
//     java.util.TimeZone var24 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.Locale var30 = null;
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var32);
//     java.util.Locale var34 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var34);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var34);
//     java.util.TimeZone var41 = null;
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var41);
//     boolean var43 = var42.getTimeZoneOverridesCalendar();
//     java.lang.String var45 = var42.format(1L);
//     java.lang.String var47 = var42.format(1L);
//     int var48 = var42.getMaxLengthEstimate();
//     java.util.TimeZone var49 = var42.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var49);
//     java.util.Locale var53 = null;
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var53);
//     java.util.Locale var55 = var54.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var49, var55);
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var55);
//     boolean var58 = var15.equals((java.lang.Object)var24);
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.TimeZone var60 = var59.getTimeZone();
//     java.util.Locale var61 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(10, var60, var61);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + "4:00:00 PM PST"+ "'", var45.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var47 + "' != '" + "4:00:00 PM PST"+ "'", var47.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var58 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
// 
//   }

  public void test295() {}
//   public void test295() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     boolean var16 = var15.getTimeZoneOverridesCalendar();
//     java.util.Locale var22 = null;
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var22);
//     java.util.TimeZone var24 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.Locale var30 = null;
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var32);
//     java.util.Locale var34 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var34);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var34);
//     java.util.TimeZone var41 = null;
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var41);
//     boolean var43 = var42.getTimeZoneOverridesCalendar();
//     java.lang.String var45 = var42.format(1L);
//     java.lang.String var47 = var42.format(1L);
//     int var48 = var42.getMaxLengthEstimate();
//     java.util.TimeZone var49 = var42.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var49);
//     java.util.Locale var53 = null;
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var53);
//     java.util.Locale var55 = var54.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var49, var55);
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var55);
//     boolean var58 = var15.equals((java.lang.Object)var24);
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.TimeZone var60 = var59.getTimeZone();
//     java.util.Locale var65 = null;
//     org.apache.commons.lang3.time.FastDateFormat var66 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var65);
//     java.util.TimeZone var67 = var66.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var68 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var67);
//     java.util.Locale var73 = null;
//     org.apache.commons.lang3.time.FastDateFormat var74 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var73);
//     java.util.Locale var75 = var74.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var76 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var75);
//     java.util.Locale var77 = var76.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var78 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var77);
//     org.apache.commons.lang3.time.FastDateFormat var79 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var67, var77);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(50, var60, var77);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + "4:00:00 PM PST"+ "'", var45.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var47 + "' != '" + "4:00:00 PM PST"+ "'", var47.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var58 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
// 
//   }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.Locale var6 = var5.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var6);
    java.util.TimeZone var10 = null;
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
    boolean var12 = var11.getTimeZoneOverridesCalendar();
    java.util.TimeZone var13 = var11.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var14 = var8.format((java.lang.Object)var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var15 = var13.parseObject("MMMM d, yyyy");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.lang.String var4 = var2.format((-1L));
//     java.util.Calendar var5 = null;
//     java.lang.StringBuffer var6 = null;
//     java.lang.StringBuffer var7 = var2.format(var5, var6);
// 
//   }

  public void test299() {}
//   public void test299() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     java.lang.String var3 = var0.getPattern();
//     java.util.TimeZone var4 = var0.getTimeZone();
//     java.lang.String var5 = var0.getPattern();
//     java.lang.Object var6 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var7 = var0.format(var6);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "M/d/yy h:mm a"+ "'", var5.equals("M/d/yy h:mm a"));
// 
//   }

  public void test300() {}
//   public void test300() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var13);
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.Locale var23 = var22.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var23);
//     boolean var27 = var26.getTimeZoneOverridesCalendar();
//     boolean var28 = var26.getTimeZoneOverridesCalendar();
//     java.util.Locale var29 = var26.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var13, var29);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(39, var29);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
// 
//   }

  public void test301() {}
//   public void test301() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.lang.String var3 = var2.toString();
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var10);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var14 = var13.getPattern();
//     java.util.TimeZone var15 = var13.getTimeZone();
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var21);
//     java.util.Locale var23 = var22.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var15, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10, var23);
//     boolean var26 = var2.equals((java.lang.Object)var25);
//     java.lang.String var27 = var2.getPattern();
//     java.util.TimeZone var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var29);
//     boolean var31 = var30.getTimeZoneOverridesCalendar();
//     java.lang.String var33 = var30.format(1L);
//     boolean var34 = var30.getTimeZoneOverridesCalendar();
//     boolean var35 = var30.getTimeZoneOverridesCalendar();
//     java.lang.String var37 = var30.format((-1L));
//     java.lang.Object var38 = var30.clone();
//     java.util.Locale var39 = var30.getLocale();
//     java.lang.String var40 = var30.getPattern();
//     java.lang.String var41 = var30.toString();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var42 = var2.formatToCharacterIterator((java.lang.Object)var30);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var3.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "M/d/yy h:mm a"+ "'", var14.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "h:mm:ss a z"+ "'", var27.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "4:00:00 PM PST"+ "'", var33.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var37 + "' != '" + "3:59:59 PM PST"+ "'", var37.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "h:mm:ss a z"+ "'", var40.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var41 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var41.equals("FastDateFormat[h:mm:ss a z]"));
// 
//   }

  public void test302() {}
//   public void test302() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.lang.StringBuffer var5 = null;
//     java.lang.StringBuffer var6 = var3.format(0L, var5);
// 
//   }

  public void test303() {}
//   public void test303() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     java.util.Locale var15 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(10, var12, var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.Locale var6 = var5.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    java.util.Locale var8 = var7.getLocale();
    java.util.TimeZone var9 = var7.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test305() {}
//   public void test305() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.util.Date var2 = null;
//     java.lang.String var3 = var1.format(var2);
// 
//   }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.TimeZone var7 = var6.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    boolean var10 = var8.equals((java.lang.Object)(byte)10);
    java.util.TimeZone var11 = var8.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 20, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test307() {}
//   public void test307() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format((java.lang.Object)(-1L));
//     java.util.TimeZone var8 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8);
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.TimeZone var17 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     java.util.Locale var23 = null;
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var23);
//     java.util.Locale var25 = var24.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var25);
//     java.util.Locale var27 = var26.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var27);
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var17, var27);
//     java.util.TimeZone var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var34);
//     boolean var36 = var35.getTimeZoneOverridesCalendar();
//     java.lang.String var38 = var35.format(1L);
//     java.lang.String var40 = var35.format(1L);
//     int var41 = var35.getMaxLengthEstimate();
//     java.util.TimeZone var42 = var35.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var42);
//     java.util.Locale var46 = null;
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var46);
//     java.util.Locale var48 = var47.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var42, var48);
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var17, var48);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[]", var8, var48);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "3:59:59 PM PST"+ "'", var7.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var36 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var38 + "' != '" + "4:00:00 PM PST"+ "'", var38.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "4:00:00 PM PST"+ "'", var40.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
// 
//   }

  public void test308() {}
//   public void test308() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.Object var7 = var3.clone();
//     java.util.Locale var8 = var3.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
// 
//   }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     java.util.Locale var15 = var14.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(50, var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test310() {}
//   public void test310() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.lang.Object var11 = var4.clone();
//     java.util.TimeZone var12 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var12);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((-1), var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test311() {}
//   public void test311() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format((java.lang.Object)(-1L));
//     java.util.TimeZone var6 = var2.getTimeZone();
//     java.lang.String var8 = var2.format(0L);
//     java.util.Locale var9 = var2.getLocale();
//     java.util.Date var10 = null;
//     java.lang.StringBuffer var11 = null;
//     java.lang.StringBuffer var12 = var2.format(var10, var11);
// 
//   }

  public void test312() {}
//   public void test312() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     boolean var15 = var14.getTimeZoneOverridesCalendar();
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var33);
//     java.util.TimeZone var40 = null;
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var40);
//     boolean var42 = var41.getTimeZoneOverridesCalendar();
//     java.lang.String var44 = var41.format(1L);
//     java.lang.String var46 = var41.format(1L);
//     int var47 = var41.getMaxLengthEstimate();
//     java.util.TimeZone var48 = var41.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var48);
//     java.util.Locale var52 = null;
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var52);
//     java.util.Locale var54 = var53.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var48, var54);
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var54);
//     boolean var57 = var14.equals((java.lang.Object)var23);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(10, var23);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "4:00:00 PM PST"+ "'", var44.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var46 + "' != '" + "4:00:00 PM PST"+ "'", var46.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == false);
// 
//   }

  public void test313() {}
//   public void test313() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     java.util.Locale var7 = var6.getLocale();
//     java.util.Locale var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
//     java.util.Locale var14 = var13.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var16);
//     java.lang.String var18 = var17.toString();
//     java.lang.String var19 = var17.toString();
//     boolean var20 = var6.equals((java.lang.Object)var17);
//     java.util.Date var21 = null;
//     java.lang.StringBuffer var22 = null;
//     java.lang.StringBuffer var23 = var17.format(var21, var22);
// 
//   }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
    java.util.Locale var3 = var2.getLocale();
    java.util.Locale var4 = var2.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[MMMM d, yyyy h:mm:ss a z]", var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test315() {}
//   public void test315() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     int var3 = var0.getMaxLengthEstimate();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var5 = var0.parseObject("");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 21);
// 
//   }

  public void test316() {}
//   public void test316() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     boolean var7 = var3.getTimeZoneOverridesCalendar();
//     boolean var8 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var3.format((-1L));
//     java.lang.Object var11 = var3.clone();
//     java.util.Locale var12 = var3.getLocale();
//     java.lang.String var13 = var3.getPattern();
//     java.util.Locale var14 = var3.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "3:59:59 PM PST"+ "'", var10.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "h:mm:ss a z"+ "'", var13.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
    java.lang.String var3 = var2.getPattern();
    java.util.TimeZone var4 = var2.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("hi!", var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.String var8 = var3.format(1L);
//     java.util.Locale var9 = var3.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var9);
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var17);
//     java.util.TimeZone var20 = var19.getTimeZone();
//     java.lang.StringBuffer var21 = null;
//     java.text.FieldPosition var22 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var23 = var10.format((java.lang.Object)var20, var21, var22);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
// 
//   }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    java.util.Locale var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(17, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.TimeZone var7 = var6.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    java.util.Locale var9 = var8.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(39, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test321() {}
//   public void test321() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }
// 
// 
//     java.util.TimeZone var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var8);
//     boolean var10 = var9.getTimeZoneOverridesCalendar();
//     java.lang.String var12 = var9.format(1L);
//     java.lang.String var14 = var9.format(1L);
//     int var15 = var9.getMaxLengthEstimate();
//     java.util.TimeZone var16 = var9.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var16);
//     java.util.Locale var20 = null;
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var20);
//     java.util.Locale var22 = var21.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var16, var22);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var26 = var25.getPattern();
//     java.util.TimeZone var27 = var25.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var30 = var29.getPattern();
//     java.util.TimeZone var31 = var29.getTimeZone();
//     java.util.Locale var35 = null;
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var37);
//     java.util.Locale var39 = var38.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var31, var39);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var27, var39);
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16, var39);
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var16);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(39, 0, var16);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "4:00:00 PM PST"+ "'", var14.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var26 + "' != '" + "M/d/yy h:mm a"+ "'", var26.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "M/d/yy h:mm a"+ "'", var30.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
// 
//   }

  public void test322() {}
//   public void test322() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.lang.String var2 = var0.toString();
//     int var3 = var0.getMaxLengthEstimate();
//     boolean var4 = var0.getTimeZoneOverridesCalendar();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var6 = var0.parseObject("M/d/yy h:mm a");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "M/d/yy h:mm a"+ "'", var1.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var2.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
// 
//   }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }


    java.util.TimeZone var1 = null;
    java.util.TimeZone var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
    boolean var7 = var6.getTimeZoneOverridesCalendar();
    java.util.TimeZone var8 = var6.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var8);
    java.util.Locale var14 = null;
    org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var14);
    java.util.Locale var16 = var15.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
    java.util.Locale var18 = var17.getLocale();
    java.util.TimeZone var19 = var17.getTimeZone();
    java.util.Locale var20 = var17.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z", var20);
    org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var8, var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("December 31, 1969", var1, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test324() {}
//   public void test324() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     boolean var6 = var2.getTimeZoneOverridesCalendar();
//     java.util.Calendar var7 = null;
//     java.lang.String var8 = var2.format(var7);
// 
//   }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }


    java.util.Locale var5 = null;
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
    java.util.Locale var7 = var6.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
    java.util.Locale var9 = var8.getLocale();
    java.util.TimeZone var10 = var8.getTimeZone();
    java.util.TimeZone var11 = var8.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 38, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test326() {}
//   public void test326() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     java.lang.String var7 = var5.getPattern();
//     java.lang.String var8 = var5.toString();
//     java.lang.Object var9 = var5.clone();
//     java.util.TimeZone var10 = var5.getTimeZone();
//     java.util.TimeZone var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var17.format(1L);
//     java.lang.String var22 = var17.format(1L);
//     int var23 = var17.getMaxLengthEstimate();
//     java.util.TimeZone var24 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var24);
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var24, var30);
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var33 = var32.getPattern();
//     java.lang.String var34 = var32.toString();
//     java.util.Locale var35 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var35);
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10, var35);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((-1), var10);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z"+ "'", var7.equals("EEEE, MMMM d, yyyy h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var8.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "M/d/yy h:mm a"+ "'", var33.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "FastDateFormat[M/d/yy h:mm a]"+ "'", var34.equals("FastDateFormat[M/d/yy h:mm a]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var9 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var9);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
//     boolean var18 = var17.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var17.format(1L);
//     java.lang.String var22 = var17.format(1L);
//     int var23 = var17.getMaxLengthEstimate();
//     java.util.TimeZone var24 = var17.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var24);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.Locale var27 = var26.getLocale();
//     boolean var28 = var12.equals((java.lang.Object)var27);
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var9, var27);
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var9);
//     java.util.Locale var31 = var30.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(38, var31);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "4:00:00 PM PST"+ "'", var20.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
// 
//   }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    java.util.Locale var10 = var9.getLocale();
    java.util.TimeZone var11 = var9.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 21, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test329() {}
//   public void test329() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.util.Locale var4 = var3.getLocale();
//     java.lang.String var5 = var3.getPattern();
//     boolean var6 = var3.getTimeZoneOverridesCalendar();
//     java.util.Date var7 = null;
//     java.lang.String var8 = var3.format(var7);
// 
//   }

  public void test330() {}
//   public void test330() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     java.util.TimeZone var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var8);
//     boolean var10 = var9.getTimeZoneOverridesCalendar();
//     java.lang.String var12 = var9.format(1L);
//     java.lang.String var14 = var9.format(1L);
//     int var15 = var9.getMaxLengthEstimate();
//     java.util.TimeZone var16 = var9.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var16);
//     java.util.Locale var20 = null;
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var20);
//     java.util.Locale var22 = var21.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var16, var22);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var26 = var25.getPattern();
//     java.util.TimeZone var27 = var25.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var30 = var29.getPattern();
//     java.util.TimeZone var31 = var29.getTimeZone();
//     java.util.Locale var35 = null;
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var37);
//     java.util.Locale var39 = var38.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var31, var39);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var27, var39);
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16, var39);
//     java.util.Locale var46 = null;
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var46);
//     java.util.Locale var48 = var47.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var48);
//     java.util.Locale var50 = var49.getLocale();
//     java.util.TimeZone var51 = var49.getTimeZone();
//     java.util.Locale var52 = var49.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var16, var52);
//     java.util.Locale var57 = null;
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var57);
//     java.util.TimeZone var59 = var58.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var59);
//     java.lang.String var62 = var60.format((-1L));
//     java.util.Locale var63 = var60.getLocale();
//     boolean var64 = var53.equals((java.lang.Object)var63);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(18, var1, var63);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "4:00:00 PM PST"+ "'", var14.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var26 + "' != '" + "M/d/yy h:mm a"+ "'", var26.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "M/d/yy h:mm a"+ "'", var30.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var64 == false);
// 
//   }

  public void test331() {}
//   public void test331() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format((java.lang.Object)(-1L));
//     java.util.TimeZone var7 = var3.getTimeZone();
//     java.lang.String var9 = var3.format(0L);
//     java.util.TimeZone var10 = var3.getTimeZone();
//     java.util.Locale var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10, var11);
//     java.lang.StringBuffer var14 = null;
//     java.lang.StringBuffer var15 = var12.format(100L, var14);
// 
//   }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     boolean var8 = var6.equals((java.lang.Object)(byte)10);
//     java.util.TimeZone var9 = var6.getTimeZone();
//     java.util.TimeZone var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     boolean var15 = var14.getTimeZoneOverridesCalendar();
//     java.lang.String var17 = var14.format(1L);
//     java.lang.String var19 = var14.format(1L);
//     int var20 = var14.getMaxLengthEstimate();
//     java.util.TimeZone var21 = var14.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var21);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var21);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var24 = var6.format((java.lang.Object)"");
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "4:00:00 PM PST"+ "'", var17.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "4:00:00 PM PST"+ "'", var19.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
// 
//   }

  public void test333() {}
//   public void test333() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.lang.String var3 = var2.toString();
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var10 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var10);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var14 = var13.getPattern();
//     java.util.TimeZone var15 = var13.getTimeZone();
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var21);
//     java.util.Locale var23 = var22.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var15, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10, var23);
//     boolean var26 = var2.equals((java.lang.Object)var25);
//     java.lang.String var27 = var2.getPattern();
//     java.util.Calendar var28 = null;
//     java.lang.StringBuffer var29 = null;
//     java.lang.StringBuffer var30 = var2.format(var28, var29);
// 
//   }

  public void test334() {}
//   public void test334() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.lang.String var5 = var4.toString();
//     java.util.Locale var6 = var4.getLocale();
//     java.util.Locale var7 = var4.getLocale();
//     java.util.TimeZone var8 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Calendar var10 = null;
//     java.lang.StringBuffer var11 = null;
//     java.lang.StringBuffer var12 = var9.format(var10, var11);
// 
//   }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    java.util.TimeZone var2 = null;
    java.util.Locale var9 = null;
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var9);
    java.util.Locale var11 = var10.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var11);
    org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var11);
    org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(20, 1, var2, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test336() {}
//   public void test336() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.TimeZone var6 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
//     java.util.Locale var14 = var13.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var16);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6, var16);
//     java.lang.StringBuffer var20 = null;
//     java.lang.StringBuffer var21 = var18.format(100L, var20);
// 
//   }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.Locale var6 = var5.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var6);
    java.util.Locale var12 = null;
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
    java.util.TimeZone var14 = var13.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
    java.util.TimeZone var16 = var15.getTimeZone();
    java.lang.Object var17 = var15.clone();
    java.lang.String var18 = var15.getPattern();
    boolean var19 = var15.getTimeZoneOverridesCalendar();
    java.lang.StringBuffer var20 = null;
    java.text.FieldPosition var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.StringBuffer var22 = var8.format((java.lang.Object)var15, var20, var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test338() {}
//   public void test338() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var12);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     boolean var16 = var15.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var23 = var20.format((java.lang.Object)(-1L));
//     java.util.TimeZone var24 = var20.getTimeZone();
//     java.lang.String var26 = var20.format(0L);
//     java.util.Locale var27 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var27);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var29 = var15.format((java.lang.Object)var28);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "3:59:59 PM PST"+ "'", var23.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var26 + "' != '" + "4:00:00 PM PST"+ "'", var26.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var6 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6);
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6, var8);
//     java.lang.Object var10 = var9.clone();
//     java.util.Locale var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     java.lang.String var14 = var13.toString();
//     java.lang.Object var15 = null;
//     boolean var16 = var13.equals(var15);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var17 = var9.formatToCharacterIterator(var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var14.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == false);
// 
//   }

  public void test340() {}
//   public void test340() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var15);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var18 = var2.format((java.lang.Object)var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "h:mm:ss a z"+ "'", var3.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
// 
//   }

  public void test341() {}
//   public void test341() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.lang.String var3 = var2.toString();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.lang.String var6 = var5.getPattern();
//     java.lang.String var7 = var5.toString();
//     java.lang.Object var8 = var5.clone();
//     java.lang.StringBuffer var9 = null;
//     java.text.FieldPosition var10 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var11 = var2.format(var8, var9, var10);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var3.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "MMMM d, yyyy"+ "'", var6.equals("MMMM d, yyyy"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "FastDateFormat[MMMM d, yyyy]"+ "'", var7.equals("FastDateFormat[MMMM d, yyyy]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
// 
//   }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    java.util.Locale var8 = null;
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
    java.util.Locale var10 = var9.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var10);
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var10);
    org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var10);
    java.util.TimeZone var15 = var14.getTimeZone();
    java.util.Locale var20 = null;
    org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var20);
    java.util.Locale var22 = var21.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var22);
    java.util.Locale var24 = var23.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var24);
    java.util.Locale var26 = var25.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(10, 17, var15, var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test343() {}
//   public void test343() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.TimeZone var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     boolean var14 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var16 = var13.format(1L);
//     boolean var17 = var13.getTimeZoneOverridesCalendar();
//     boolean var18 = var13.getTimeZoneOverridesCalendar();
//     java.lang.String var20 = var13.format((-1L));
//     java.lang.Object var21 = var13.clone();
//     java.util.Locale var22 = var13.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var8, var22);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.TimeZone var31 = var30.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     boolean var34 = var25.equals((java.lang.Object)var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var33);
//     java.util.Date var36 = null;
//     java.lang.StringBuffer var37 = null;
//     java.lang.StringBuffer var38 = var35.format(var36, var37);
// 
//   }

  public void test344() {}
//   public void test344() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }
// 
// 
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
//     java.util.Locale var10 = var9.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var10);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var10);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var10);
//     java.util.TimeZone var15 = var14.getTimeZone();
//     java.util.TimeZone var20 = null;
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var20);
//     boolean var22 = var21.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var23 = var21.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23);
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var30 = null;
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var30);
//     boolean var32 = var31.getTimeZoneOverridesCalendar();
//     java.lang.String var34 = var31.format(1L);
//     java.lang.String var36 = var31.format(1L);
//     int var37 = var31.getMaxLengthEstimate();
//     java.util.TimeZone var38 = var31.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var38);
//     java.util.Locale var41 = var40.getLocale();
//     boolean var42 = var26.equals((java.lang.Object)var41);
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var23, var41);
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var15, var41);
//     java.util.TimeZone var49 = null;
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var49);
//     boolean var51 = var50.getTimeZoneOverridesCalendar();
//     java.lang.String var53 = var50.format(1L);
//     java.lang.String var55 = var50.format(1L);
//     int var56 = var50.getMaxLengthEstimate();
//     java.util.TimeZone var57 = var50.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var57);
//     java.util.Locale var61 = null;
//     org.apache.commons.lang3.time.FastDateFormat var62 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var61);
//     java.util.Locale var63 = var62.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var64 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var57, var63);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var65 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[]", var15, var63);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "4:00:00 PM PST"+ "'", var34.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var36 + "' != '" + "4:00:00 PM PST"+ "'", var36.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var53 + "' != '" + "4:00:00 PM PST"+ "'", var53.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var55 + "' != '" + "4:00:00 PM PST"+ "'", var55.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var56 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
// 
//   }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     java.util.Locale var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var13);
//     java.util.Locale var15 = var14.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     java.util.Locale var17 = var16.getLocale();
//     java.util.TimeZone var18 = var16.getTimeZone();
//     java.util.Locale var19 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z", var19);
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7, var19);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var38);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(21, var7, var38);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
// 
//   }

  public void test346() {}
//   public void test346() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.lang.String var2 = var1.getPattern();
//     java.lang.String var3 = var1.toString();
//     java.lang.Object var4 = var1.clone();
//     java.util.Date var5 = null;
//     java.lang.String var6 = var1.format(var5);
// 
//   }

  public void test347() {}
//   public void test347() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     boolean var15 = var14.getTimeZoneOverridesCalendar();
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.util.TimeZone var23 = var22.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.Locale var31 = var30.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var33);
//     java.util.TimeZone var40 = null;
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var40);
//     boolean var42 = var41.getTimeZoneOverridesCalendar();
//     java.lang.String var44 = var41.format(1L);
//     java.lang.String var46 = var41.format(1L);
//     int var47 = var41.getMaxLengthEstimate();
//     java.util.TimeZone var48 = var41.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var48);
//     java.util.Locale var52 = null;
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var52);
//     java.util.Locale var54 = var53.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var48, var54);
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var23, var54);
//     boolean var57 = var14.equals((java.lang.Object)var23);
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.TimeZone var59 = var58.getTimeZone();
//     java.lang.Object var60 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var61 = var58.formatToCharacterIterator(var60);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "4:00:00 PM PST"+ "'", var44.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var46 + "' != '" + "4:00:00 PM PST"+ "'", var46.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
// 
//   }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    java.util.Locale var7 = null;
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
    java.util.Locale var9 = var8.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var9);
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var9);
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var9);
    java.lang.Object var14 = var13.clone();
    java.util.TimeZone var15 = var13.getTimeZone();
    java.util.Locale var20 = null;
    org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var20);
    java.util.Locale var22 = var21.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var22);
    org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(18, var15, var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test349() {}
//   public void test349() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     boolean var8 = var6.equals((java.lang.Object)(byte)10);
//     java.util.Locale var9 = var6.getLocale();
//     java.lang.StringBuffer var11 = null;
//     java.lang.StringBuffer var12 = var6.format(100L, var11);
//     java.lang.String var13 = var6.getPattern();
//     java.util.Date var14 = null;
//     java.lang.String var15 = var6.format(var14);
// 
//   }

  public void test350() {}
//   public void test350() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.util.Locale var4 = var3.getLocale();
//     java.lang.String var5 = var3.getPattern();
//     java.lang.String var6 = var3.toString();
//     java.lang.Object var7 = var3.clone();
//     boolean var8 = var3.getTimeZoneOverridesCalendar();
//     java.lang.Object var9 = var3.clone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.lang.String var12 = var10.getPattern();
//     java.lang.String var14 = var10.format((-1L));
//     int var15 = var10.getMaxLengthEstimate();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var16 = var3.formatToCharacterIterator((java.lang.Object)var15);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "EEEE, MMMM d, yyyy h:mm:ss a z"+ "'", var5.equals("EEEE, MMMM d, yyyy h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var6.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "M/d/yy h:mm a"+ "'", var12.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "12/31/69 3:59 PM"+ "'", var14.equals("12/31/69 3:59 PM"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 21);
// 
//   }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.TimeZone var6 = var5.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    java.util.TimeZone var8 = var7.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(17, var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var2, var17);
//     int var19 = var18.getMaxLengthEstimate();
//     java.util.Locale var20 = var18.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var20);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
// 
//   }

  public void test353() {}
//   public void test353() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.util.TimeZone var11 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var11);
//     boolean var14 = var13.getTimeZoneOverridesCalendar();
//     java.util.Locale var20 = null;
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var20);
//     java.util.TimeZone var22 = var21.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var22);
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var32);
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22, var32);
//     java.util.TimeZone var39 = null;
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var39);
//     boolean var41 = var40.getTimeZoneOverridesCalendar();
//     java.lang.String var43 = var40.format(1L);
//     java.lang.String var45 = var40.format(1L);
//     int var46 = var40.getMaxLengthEstimate();
//     java.util.TimeZone var47 = var40.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var47);
//     java.util.Locale var51 = null;
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var51);
//     java.util.Locale var53 = var52.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var47, var53);
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22, var53);
//     boolean var56 = var13.equals((java.lang.Object)var22);
//     java.util.Calendar var57 = null;
//     java.lang.StringBuffer var58 = null;
//     java.lang.StringBuffer var59 = var13.format(var57, var58);
// 
//   }

  public void test354() {}
//   public void test354() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     int var4 = var3.getMaxLengthEstimate();
//     java.lang.Object var5 = null;
//     boolean var6 = var3.equals(var5);
//     java.lang.Object var7 = var3.clone();
//     java.util.Date var8 = null;
//     java.lang.String var9 = var3.format(var8);
// 
//   }

  public void test355() {}
//   public void test355() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format((java.lang.Object)(-1L));
//     java.util.TimeZone var9 = var5.getTimeZone();
//     java.lang.String var11 = var5.format(0L);
//     java.util.TimeZone var12 = var5.getTimeZone();
//     java.util.Locale var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(31, (-1), var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "3:59:59 PM PST"+ "'", var8.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }


    java.util.Locale var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("December 31, 1969", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }


    java.util.Locale var1 = null;
    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
    boolean var3 = var2.getTimeZoneOverridesCalendar();
    java.lang.StringBuffer var5 = null;
    java.text.FieldPosition var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.StringBuffer var7 = var2.format((java.lang.Object)(short)0, var5, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
//     java.lang.String var4 = var3.getPattern();
//     java.util.TimeZone var5 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var5);
//     java.util.Locale var13 = null;
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var13);
//     java.util.TimeZone var15 = var14.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     java.util.TimeZone var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var23 = var20.format(1L);
//     boolean var24 = var20.getTimeZoneOverridesCalendar();
//     boolean var25 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var27 = var20.format((-1L));
//     java.lang.Object var28 = var20.clone();
//     java.util.Locale var29 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var29);
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var15, var29);
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     java.util.Locale var36 = null;
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var36);
//     java.util.TimeZone var38 = var37.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var38);
//     java.util.Locale var40 = var39.getLocale();
//     boolean var41 = var32.equals((java.lang.Object)var40);
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var40);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(17, var5, var40);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "4:00:00 PM PST"+ "'", var23.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var27 + "' != '" + "3:59:59 PM PST"+ "'", var27.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
// 
//   }

  public void test359() {}
//   public void test359() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var6 = var2.toString();
//     java.lang.String var7 = var2.getPattern();
//     java.lang.String var8 = var2.getPattern();
//     java.util.Locale var9 = var2.getLocale();
//     java.lang.Object var10 = null;
//     java.lang.StringBuffer var11 = null;
//     java.text.FieldPosition var12 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var13 = var2.format(var10, var11, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "FastDateFormat[h:mm:ss a z]"+ "'", var6.equals("FastDateFormat[h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "h:mm:ss a z"+ "'", var7.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "h:mm:ss a z"+ "'", var8.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
// 
//   }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }


    java.util.TimeZone var1 = null;
    org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = var2.parseObject("hi!");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test361() {}
//   public void test361() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }
// 
// 
//     java.util.Locale var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var7);
//     java.util.TimeZone var9 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var9);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var9);
//     java.util.TimeZone var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var18);
//     boolean var20 = var19.getTimeZoneOverridesCalendar();
//     java.lang.String var22 = var19.format(1L);
//     java.lang.String var24 = var19.format(1L);
//     int var25 = var19.getMaxLengthEstimate();
//     java.util.TimeZone var26 = var19.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26);
//     java.util.Locale var30 = null;
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var26, var32);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var36 = var35.getPattern();
//     java.util.TimeZone var37 = var35.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var40 = var39.getPattern();
//     java.util.TimeZone var41 = var39.getTimeZone();
//     java.util.Locale var45 = null;
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var45);
//     java.util.Locale var47 = var46.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var47);
//     java.util.Locale var49 = var48.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var41, var49);
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var37, var49);
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var26, var49);
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var49);
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var9, var49);
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var49);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(20, var49);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "4:00:00 PM PST"+ "'", var22.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var24 + "' != '" + "4:00:00 PM PST"+ "'", var24.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var36 + "' != '" + "M/d/yy h:mm a"+ "'", var36.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "M/d/yy h:mm a"+ "'", var40.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
// 
//   }

  public void test362() {}
//   public void test362() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format((java.lang.Object)(-1L));
//     java.util.TimeZone var7 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7);
//     java.util.Date var9 = null;
//     java.lang.String var10 = var8.format(var9);
// 
//   }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.Locale var6 = var5.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    java.util.Locale var8 = var7.getLocale();
    java.util.TimeZone var9 = var7.getTimeZone();
    java.util.TimeZone var10 = var7.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(31, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test364() {}
//   public void test364() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var3 = var2.getPattern();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var4);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(31, var4);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "M/d/yy h:mm a"+ "'", var3.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
// 
//   }

  public void test365() {}
//   public void test365() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var2);
//     java.util.Locale var4 = var3.getLocale();
//     java.util.TimeZone var5 = var3.getTimeZone();
//     java.util.Calendar var6 = null;
//     java.lang.String var7 = var3.format(var6);
// 
//   }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    java.util.Locale var10 = var9.getLocale();
    java.util.TimeZone var11 = var9.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var11);
    java.util.TimeZone var16 = null;
    org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var16);
    boolean var18 = var17.getTimeZoneOverridesCalendar();
    java.util.TimeZone var19 = var17.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19);
    java.util.Locale var25 = null;
    org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var25);
    java.util.Locale var27 = var26.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var27);
    java.util.Locale var29 = var28.getLocale();
    java.util.TimeZone var30 = var28.getTimeZone();
    java.util.Locale var31 = var28.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z", var31);
    org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 20, var11, var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var13);
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var13, var19);
//     java.util.Locale var29 = null;
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var29);
//     java.util.TimeZone var31 = var30.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var33);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var33);
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var33);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("December 31, 1969 4:00:00 PM PST", var13, var33);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test368() {}
//   public void test368() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format((java.lang.Object)(-1L));
//     java.util.TimeZone var7 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7);
//     boolean var10 = var8.equals((java.lang.Object)"4:00:00 PM PST");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var12 = var8.parseObject("FastDateFormat[MMMM d, yyyy h:mm:ss a z]");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "3:59:59 PM PST"+ "'", var6.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
// 
//   }

  public void test369() {}
//   public void test369() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var17 = var16.getPattern();
//     java.util.TimeZone var18 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var21 = var20.getPattern();
//     java.util.TimeZone var22 = var20.getTimeZone();
//     java.util.Locale var26 = null;
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var26);
//     java.util.Locale var28 = var27.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var22, var30);
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var18, var30);
//     java.util.Locale var33 = var32.getLocale();
//     java.lang.String var34 = var32.getPattern();
//     java.util.Locale var35 = var32.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var12, var35);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "M/d/yy h:mm a"+ "'", var17.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "M/d/yy h:mm a"+ "'", var21.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "h:mm:ss a z"+ "'", var34.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
// 
//   }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    java.util.TimeZone var11 = var10.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var11);
    java.util.Locale var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((-1), var11, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    java.util.Locale var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
    java.util.TimeZone var6 = var5.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
    java.util.TimeZone var8 = var7.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test372() {}
//   public void test372() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }
// 
// 
//     java.util.Locale var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var5);
//     java.util.Locale var7 = var6.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var7);
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var7);
//     boolean var11 = var10.getTimeZoneOverridesCalendar();
//     boolean var12 = var10.getTimeZoneOverridesCalendar();
//     int var13 = var10.getMaxLengthEstimate();
//     java.lang.Object var14 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var15 = var10.formatToCharacterIterator(var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 20);
// 
//   }

  public void test373() {}
//   public void test373() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.lang.String var7 = var2.format(1L);
//     int var8 = var2.getMaxLengthEstimate();
//     java.lang.Object var9 = var2.clone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Object var11 = var2.parseObject("4:00:00 PM PST");
//       fail("Expected exception of type java.text.ParseException");
//     } catch (java.text.ParseException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "4:00:00 PM PST"+ "'", var5.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
// 
//   }

  public void test374() {}
//   public void test374() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var8);
//     java.util.TimeZone var10 = var9.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var10);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var10);
//     java.util.TimeZone var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     java.lang.String var23 = var20.format(1L);
//     java.lang.String var25 = var20.format(1L);
//     int var26 = var20.getMaxLengthEstimate();
//     java.util.TimeZone var27 = var20.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var27);
//     java.util.Locale var31 = null;
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var27, var33);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var37 = var36.getPattern();
//     java.util.TimeZone var38 = var36.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var41 = var40.getPattern();
//     java.util.TimeZone var42 = var40.getTimeZone();
//     java.util.Locale var46 = null;
//     org.apache.commons.lang3.time.FastDateFormat var47 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var46);
//     java.util.Locale var48 = var47.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var48);
//     java.util.Locale var50 = var49.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var42, var50);
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var38, var50);
//     org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var27, var50);
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var50);
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var10, var50);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 20, var2, var50);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "4:00:00 PM PST"+ "'", var23.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "4:00:00 PM PST"+ "'", var25.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var37 + "' != '" + "M/d/yy h:mm a"+ "'", var37.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var41 + "' != '" + "M/d/yy h:mm a"+ "'", var41.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
// 
//   }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.TimeZone var8 = var7.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    java.util.Locale var10 = var9.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var10);
    java.util.Locale var12 = var11.getLocale();
    java.util.TimeZone var13 = var11.getTimeZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[h:mm:ss a z]", var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test376() {}
//   public void test376() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     java.lang.String var3 = var0.getPattern();
//     java.util.TimeZone var4 = var0.getTimeZone();
//     java.text.ParsePosition var6 = null;
//     java.lang.Object var7 = var0.parseObject("Wednesday, December 31, 1969", var6);
// 
//   }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }


    java.util.TimeZone var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
    boolean var6 = var5.getTimeZoneOverridesCalendar();
    java.util.TimeZone var7 = var5.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7);
    java.util.Locale var9 = null;
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((-1), var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test378() {}
//   public void test378() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
//     java.lang.String var2 = var1.toString();
//     boolean var3 = var1.getTimeZoneOverridesCalendar();
//     java.lang.StringBuffer var5 = null;
//     java.lang.StringBuffer var6 = var1.format(0L, var5);
// 
//   }

  public void test379() {}
//   public void test379() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var14);
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var14);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a");
//     boolean var23 = var22.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var25 = var20.format((java.lang.Object)var24);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
// 
//   }

  public void test380() {}
//   public void test380() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var13);
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13, var16);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var13);
//     java.util.Date var19 = null;
//     java.lang.String var20 = var18.format(var19);
// 
//   }

  public void test381() {}
//   public void test381() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     boolean var7 = var3.getTimeZoneOverridesCalendar();
//     boolean var8 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var3.format((-1L));
//     java.lang.Object var11 = var3.clone();
//     java.util.Locale var12 = var3.getLocale();
//     java.lang.String var13 = var3.getPattern();
//     java.util.Locale var14 = var3.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(10, var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "4:00:00 PM PST"+ "'", var6.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "3:59:59 PM PST"+ "'", var10.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "h:mm:ss a z"+ "'", var13.equals("h:mm:ss a z"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format((java.lang.Object)(-1L));
//     java.util.TimeZone var7 = var3.getTimeZone();
//     java.lang.String var9 = var3.format(0L);
//     java.util.Locale var10 = var3.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy", var10);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var13 = var12.getPattern();
//     java.util.TimeZone var14 = var12.getTimeZone();
//     java.lang.String var16 = var12.format(10L);
//     java.lang.String var17 = var12.getPattern();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var18 = var11.format((java.lang.Object)var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "3:59:59 PM PST"+ "'", var6.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "M/d/yy h:mm a"+ "'", var13.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "12/31/69 4:00 PM"+ "'", var16.equals("12/31/69 4:00 PM"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "M/d/yy h:mm a"+ "'", var17.equals("M/d/yy h:mm a"));
// 
//   }

  public void test383() {}
//   public void test383() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     java.util.Date var6 = null;
//     java.lang.StringBuffer var7 = null;
//     java.lang.StringBuffer var8 = var2.format(var6, var7);
// 
//   }

  public void test384() {}
//   public void test384() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     java.util.TimeZone var7 = var6.getTimeZone();
//     java.lang.Object var8 = var6.clone();
//     java.lang.String var9 = var6.getPattern();
//     java.util.Calendar var10 = null;
//     java.lang.String var11 = var6.format(var10);
// 
//   }

  public void test385() {}
//   public void test385() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     boolean var16 = var15.getTimeZoneOverridesCalendar();
//     java.lang.String var18 = var15.format(1L);
//     java.lang.String var20 = var15.format(1L);
//     int var21 = var15.getMaxLengthEstimate();
//     java.util.TimeZone var22 = var15.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var22);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var22);
//     java.util.Locale var25 = var24.getLocale();
//     boolean var26 = var10.equals((java.lang.Object)var25);
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var7, var25);
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.TimeZone var35 = var34.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.util.TimeZone var39 = null;
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var39);
//     boolean var41 = var40.getTimeZoneOverridesCalendar();
//     java.lang.String var43 = var40.format(1L);
//     boolean var44 = var40.getTimeZoneOverridesCalendar();
//     boolean var45 = var40.getTimeZoneOverridesCalendar();
//     java.lang.String var47 = var40.format((-1L));
//     java.lang.Object var48 = var40.clone();
//     java.util.Locale var49 = var40.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var49);
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var35, var49);
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     boolean var53 = var27.equals((java.lang.Object)"");
//     java.util.Calendar var54 = null;
//     java.lang.StringBuffer var55 = null;
//     java.lang.StringBuffer var56 = var27.format(var54, var55);
// 
//   }

  public void test386() {}
//   public void test386() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var6 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6);
//     java.util.Locale var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var6, var8);
//     java.util.Date var10 = null;
//     java.lang.String var11 = var9.format(var10);
// 
//   }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }


    java.util.TimeZone var2 = null;
    org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
    boolean var4 = var3.getTimeZoneOverridesCalendar();
    java.util.TimeZone var5 = var3.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var6.parseObject("FastDateFormat[]");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    java.util.TimeZone var4 = null;
    org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
    boolean var6 = var5.getTimeZoneOverridesCalendar();
    java.util.TimeZone var7 = var5.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
    java.util.TimeZone var12 = null;
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
    boolean var14 = var13.getTimeZoneOverridesCalendar();
    java.util.TimeZone var15 = var13.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
    java.util.Locale var21 = null;
    org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
    java.util.Locale var23 = var22.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
    java.util.Locale var25 = var24.getLocale();
    java.util.TimeZone var26 = var24.getTimeZone();
    java.util.Locale var27 = var24.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z", var27);
    org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15, var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 18, var7, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test389() {}
//   public void test389() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var1);
//     java.lang.String var4 = var2.format((-1L));
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0);
//     java.lang.String var8 = var6.format((java.lang.Object)0L);
//     java.lang.String var9 = var6.getPattern();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var10 = var2.format((java.lang.Object)var6);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "3:59:59 PM PST"+ "'", var4.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "h:mm:ss a z"+ "'", var9.equals("h:mm:ss a z"));
// 
//   }

  public void test390() {}
//   public void test390() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }
// 
// 
//     java.util.Locale var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var2);
//     java.lang.Object var4 = var3.clone();
//     java.lang.String var5 = var3.getPattern();
//     java.util.Locale var6 = var3.getLocale();
//     java.util.Locale var7 = var3.getLocale();
//     java.util.Calendar var8 = null;
//     java.lang.StringBuffer var9 = null;
//     java.lang.StringBuffer var10 = var3.format(var8, var9);
// 
//   }

  public void test391() {}
//   public void test391() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     org.apache.commons.lang3.time.FastDateFormat var3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var2);
//     boolean var4 = var3.getTimeZoneOverridesCalendar();
//     java.lang.String var6 = var3.format(1L);
//     java.lang.String var8 = var3.format(1L);
//     int var9 = var3.getMaxLengthEstimate();
//     java.util.TimeZone var10 = var3.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     boolean var12 = var11.getTimeZoneOverridesCalendar();
//     java.util.Calendar var13 = null;
//     java.lang.StringBuffer var14 = null;
//     java.lang.StringBuffer var15 = var11.format(var13, var14);
// 
//   }

  public void test392() {}
//   public void test392() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format(1L);
//     java.lang.String var9 = var4.format(1L);
//     int var10 = var4.getMaxLengthEstimate();
//     java.lang.Object var11 = var4.clone();
//     java.util.TimeZone var12 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var12);
//     java.util.TimeZone var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var17);
//     boolean var19 = var18.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var20 = var18.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var20);
//     java.util.Locale var26 = null;
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var26);
//     java.util.Locale var28 = var27.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var28);
//     java.util.Locale var30 = var29.getLocale();
//     java.util.TimeZone var31 = var29.getTimeZone();
//     java.util.Locale var32 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z", var32);
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var20, var32);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(21, var12, var32);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "4:00:00 PM PST"+ "'", var7.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
// 
//   }

  public void test393() {}
//   public void test393() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     java.lang.String var10 = var5.format(1L);
//     int var11 = var5.getMaxLengthEstimate();
//     java.util.TimeZone var12 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var12);
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var12);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var21);
//     java.util.Locale var23 = var22.getLocale();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     java.util.TimeZone var25 = var22.getTimeZone();
//     java.util.Locale var31 = null;
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var33);
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var33);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var33);
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy", var25, var33);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(10, var12, var33);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test394() {}
//   public void test394() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     boolean var5 = var4.getTimeZoneOverridesCalendar();
//     java.lang.String var7 = var4.format((java.lang.Object)(-1L));
//     java.util.TimeZone var8 = var4.getTimeZone();
//     java.lang.String var10 = var4.format(0L);
//     java.util.TimeZone var11 = var4.getTimeZone();
//     java.util.Locale var12 = null;
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var11, var12);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var11);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "3:59:59 PM PST"+ "'", var7.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test395() {}
//   public void test395() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }
// 
// 
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var7 = var5.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var7);
//     org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var11 = var10.getPattern();
//     java.util.TimeZone var12 = var10.getTimeZone();
//     java.util.Locale var16 = null;
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var12, var20);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var7, var20);
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var30);
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var30);
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var30);
//     boolean var34 = var33.getTimeZoneOverridesCalendar();
//     boolean var35 = var33.getTimeZoneOverridesCalendar();
//     java.util.Locale var36 = var33.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(38, var7, var36);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "M/d/yy h:mm a"+ "'", var11.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
// 
//   }

  public void test396() {}
//   public void test396() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var21 = null;
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var21);
//     java.lang.String var23 = var22.toString();
//     java.util.Locale var24 = var22.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(21, var14, var24);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var23.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
// 
//   }

  public void test397() {}
//   public void test397() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.util.Locale var23 = null;
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var23);
//     java.util.TimeZone var25 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var25);
//     java.util.Locale var31 = null;
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var31);
//     java.util.Locale var33 = var32.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var35);
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var25, var35);
//     java.util.TimeZone var42 = null;
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var42);
//     boolean var44 = var43.getTimeZoneOverridesCalendar();
//     java.lang.String var46 = var43.format(1L);
//     java.lang.String var48 = var43.format(1L);
//     int var49 = var43.getMaxLengthEstimate();
//     java.util.TimeZone var50 = var43.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var50);
//     java.util.Locale var54 = null;
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var54);
//     java.util.Locale var56 = var55.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var50, var56);
//     org.apache.commons.lang3.time.FastDateFormat var58 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var25, var56);
//     boolean var59 = var16.equals((java.lang.Object)var25);
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var25);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var61 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(17, 38, var25);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var46 + "' != '" + "4:00:00 PM PST"+ "'", var46.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var48 + "' != '" + "4:00:00 PM PST"+ "'", var48.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var59 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
// 
//   }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(10, 18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test399() {}
//   public void test399() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     boolean var16 = var15.getTimeZoneOverridesCalendar();
//     java.util.Locale var22 = null;
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var22);
//     java.util.TimeZone var24 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.Locale var30 = null;
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var32);
//     java.util.Locale var34 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var34);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var34);
//     java.util.TimeZone var41 = null;
//     org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var41);
//     boolean var43 = var42.getTimeZoneOverridesCalendar();
//     java.lang.String var45 = var42.format(1L);
//     java.lang.String var47 = var42.format(1L);
//     int var48 = var42.getMaxLengthEstimate();
//     java.util.TimeZone var49 = var42.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var49);
//     java.util.Locale var53 = null;
//     org.apache.commons.lang3.time.FastDateFormat var54 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var53);
//     java.util.Locale var55 = var54.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var49, var55);
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var55);
//     boolean var58 = var15.equals((java.lang.Object)var24);
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var24);
//     java.util.TimeZone var60 = var59.getTimeZone();
//     java.util.Locale var65 = null;
//     org.apache.commons.lang3.time.FastDateFormat var66 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var65);
//     java.util.Locale var67 = var66.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var68 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var67);
//     java.util.Locale var69 = var68.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var69);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var71 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(17, var60, var69);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + "4:00:00 PM PST"+ "'", var45.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var47 + "' != '" + "4:00:00 PM PST"+ "'", var47.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var58 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
// 
//   }

  public void test400() {}
//   public void test400() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var4 = var2.toString();
//     java.lang.Object var5 = null;
//     boolean var6 = var2.equals(var5);
//     java.util.Date var7 = null;
//     java.lang.String var8 = var2.format(var7);
// 
//   }

  public void test401() {}
//   public void test401() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var2, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var17);
//     java.util.Calendar var20 = null;
//     java.lang.String var21 = var19.format(var20);
// 
//   }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    java.util.Locale var3 = null;
    org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
    java.util.TimeZone var5 = var4.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
    boolean var8 = var6.equals((java.lang.Object)(byte)10);
    java.util.Locale var9 = var6.getLocale();
    java.lang.StringBuffer var11 = null;
    java.lang.StringBuffer var12 = var6.format(100L, var11);
    java.lang.String var13 = var6.getPattern();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var6.parseObject("December 31, 1969");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));

  }

  public void test403() {}
//   public void test403() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     java.util.TimeZone var8 = null;
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var8);
//     boolean var10 = var9.getTimeZoneOverridesCalendar();
//     java.lang.String var12 = var9.format((java.lang.Object)(-1L));
//     java.util.TimeZone var13 = var9.getTimeZone();
//     boolean var14 = var5.equals((java.lang.Object)var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var13);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(50, var13);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "3:59:59 PM PST"+ "'", var12.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test404() {}
//   public void test404() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var3);
//     java.util.TimeZone var5 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var5);
//     java.lang.String var8 = var6.format((-1L));
//     java.util.Locale var9 = var6.getLocale();
//     int var10 = var6.getMaxLengthEstimate();
//     java.util.Calendar var11 = null;
//     java.lang.StringBuffer var12 = null;
//     java.lang.StringBuffer var13 = var6.format(var11, var12);
// 
//   }

  public void test405() {}
//   public void test405() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var6);
//     java.lang.Object var9 = var8.clone();
//     java.lang.Object var10 = var8.clone();
//     java.util.Date var11 = null;
//     java.lang.StringBuffer var12 = null;
//     java.lang.StringBuffer var13 = var8.format(var11, var12);
// 
//   }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }


    java.util.TimeZone var3 = null;
    org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
    boolean var5 = var4.getTimeZoneOverridesCalendar();
    java.util.TimeZone var6 = var4.getTimeZone();
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var6);
    java.util.Locale var12 = null;
    org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var12);
    java.util.Locale var14 = var13.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
    java.util.Locale var16 = var15.getLocale();
    java.util.TimeZone var17 = var15.getTimeZone();
    java.util.Locale var18 = var15.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("MMMM d, yyyy h:mm:ss a z", var18);
    org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var6, var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var22 = var20.parseObject("Wednesday, December 31, 1969");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test407() {}
//   public void test407() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var1 = var0.getPattern();
//     java.util.TimeZone var2 = var0.getTimeZone();
//     int var3 = var0.getMaxLengthEstimate();
//     java.lang.StringBuffer var5 = null;
//     java.lang.StringBuffer var6 = var0.format((-1L), var5);
// 
//   }

  public void test408() {}
//   public void test408() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }
// 
// 
//     java.util.Locale var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var1);
//     java.util.TimeZone var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var4);
//     boolean var6 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var8 = var5.format(1L);
//     boolean var9 = var5.getTimeZoneOverridesCalendar();
//     boolean var10 = var5.getTimeZoneOverridesCalendar();
//     java.lang.String var12 = var5.format((-1L));
//     java.lang.Object var13 = var5.clone();
//     java.util.Locale var14 = var5.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var15 = var2.formatToCharacterIterator((java.lang.Object)var14);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var8 + "' != '" + "4:00:00 PM PST"+ "'", var8.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "3:59:59 PM PST"+ "'", var12.equals("3:59:59 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test409() {}
//   public void test409() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     java.util.Locale var45 = null;
//     org.apache.commons.lang3.time.FastDateFormat var46 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var45);
//     java.util.Locale var47 = var46.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var47);
//     java.util.Locale var49 = var48.getLocale();
//     java.util.TimeZone var50 = var48.getTimeZone();
//     java.util.Locale var51 = var48.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15, var51);
//     java.util.Locale var56 = null;
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var56);
//     java.util.TimeZone var58 = var57.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var58);
//     java.lang.String var61 = var59.format((-1L));
//     java.util.Locale var62 = var59.getLocale();
//     boolean var63 = var52.equals((java.lang.Object)var62);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(31, var62);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var63 == false);
// 
//   }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var45 = var44.getPattern();
//     java.util.TimeZone var46 = var44.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var48 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var49 = var48.getPattern();
//     java.util.TimeZone var50 = var48.getTimeZone();
//     java.util.Locale var54 = null;
//     org.apache.commons.lang3.time.FastDateFormat var55 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var54);
//     java.util.Locale var56 = var55.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var56);
//     java.util.Locale var58 = var57.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var50, var58);
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var46, var58);
//     org.apache.commons.lang3.time.FastDateFormat var63 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var64 = var63.getPattern();
//     java.util.TimeZone var65 = var63.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var67 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var68 = var67.getPattern();
//     java.util.TimeZone var69 = var67.getTimeZone();
//     java.util.Locale var73 = null;
//     org.apache.commons.lang3.time.FastDateFormat var74 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var73);
//     java.util.Locale var75 = var74.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var76 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var75);
//     java.util.Locale var77 = var76.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var78 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var69, var77);
//     org.apache.commons.lang3.time.FastDateFormat var79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var65, var77);
//     org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var77);
//     org.apache.commons.lang3.time.FastDateFormat var81 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var46, var77);
//     org.apache.commons.lang3.time.FastDateFormat var82 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15, var77);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(38, var77);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + "M/d/yy h:mm a"+ "'", var45.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var49 + "' != '" + "M/d/yy h:mm a"+ "'", var49.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var64 + "' != '" + "M/d/yy h:mm a"+ "'", var64.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var68 + "' != '" + "M/d/yy h:mm a"+ "'", var68.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
// 
//   }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100, 17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    java.util.Locale var6 = null;
    org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
    java.util.Locale var8 = var7.getLocale();
    org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
    org.apache.commons.lang3.time.FastDateFormat var10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
    boolean var12 = var11.getTimeZoneOverridesCalendar();
    boolean var13 = var11.getTimeZoneOverridesCalendar();
    java.util.Locale var14 = var11.getLocale();
    java.util.Locale var15 = var11.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(10, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }


    java.util.Locale var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("FastDateFormat[MMMM d, yyyy h:mm:ss a z]", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test414() {}
//   public void test414() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     int var10 = var9.getMaxLengthEstimate();
//     java.util.Locale var11 = var9.getLocale();
//     java.lang.StringBuffer var13 = null;
//     java.lang.StringBuffer var14 = var9.format(100L, var13);
// 
//   }

  public void test415() {}
//   public void test415() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     java.util.TimeZone var42 = var41.getTimeZone();
//     java.util.TimeZone var44 = null;
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var44);
//     boolean var46 = var45.getTimeZoneOverridesCalendar();
//     java.lang.String var48 = var45.format(1L);
//     java.lang.String var50 = var45.format(1L);
//     java.util.Locale var51 = var45.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var42, var51);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Wednesday, December 31, 1969", var42);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var48 + "' != '" + "4:00:00 PM PST"+ "'", var48.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var50 + "' != '" + "4:00:00 PM PST"+ "'", var50.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
// 
//   }

  public void test416() {}
//   public void test416() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }
// 
// 
//     java.util.TimeZone var3 = null;
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var15);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var3, var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var18);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(100, var18);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
// 
//   }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     int var10 = var9.getMaxLengthEstimate();
//     java.lang.String var11 = var9.toString();
//     java.lang.String var13 = var9.format(0L);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0);
//     java.lang.String var17 = var16.toString();
//     int var18 = var16.getMaxLengthEstimate();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var19 = var9.formatToCharacterIterator((java.lang.Object)var18);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "FastDateFormat[MMMM d, yyyy]"+ "'", var11.equals("FastDateFormat[MMMM d, yyyy]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "December 31, 1969"+ "'", var13.equals("December 31, 1969"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "FastDateFormat[MMMM d, yyyy h:mm:ss a z]"+ "'", var17.equals("FastDateFormat[MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 39);
// 
//   }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }
// 
// 
//     java.util.Locale var3 = null;
//     org.apache.commons.lang3.time.FastDateFormat var4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var3);
//     java.util.TimeZone var11 = null;
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var11);
//     boolean var13 = var12.getTimeZoneOverridesCalendar();
//     java.lang.String var15 = var12.format(1L);
//     java.lang.String var17 = var12.format(1L);
//     int var18 = var12.getMaxLengthEstimate();
//     java.util.TimeZone var19 = var12.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var19);
//     java.util.Locale var23 = null;
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var23);
//     java.util.Locale var25 = var24.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var19, var25);
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var32 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var33 = var32.getPattern();
//     java.util.TimeZone var34 = var32.getTimeZone();
//     java.util.Locale var38 = null;
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var38);
//     java.util.Locale var40 = var39.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var40);
//     java.util.Locale var42 = var41.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var43 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var34, var42);
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var30, var42);
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var19, var42);
//     java.util.TimeZone var46 = var45.getTimeZone();
//     java.util.TimeZone var48 = null;
//     org.apache.commons.lang3.time.FastDateFormat var49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var48);
//     boolean var50 = var49.getTimeZoneOverridesCalendar();
//     java.lang.String var52 = var49.format(1L);
//     java.lang.String var54 = var49.format(1L);
//     java.util.Locale var55 = var49.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var46, var55);
//     boolean var57 = var4.equals((java.lang.Object)var56);
//     java.util.TimeZone var58 = var4.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var58);
//     org.apache.commons.lang3.time.FastDateFormat var62 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var63 = var62.getPattern();
//     java.util.TimeZone var64 = var62.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var66 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var67 = var66.getPattern();
//     java.util.TimeZone var68 = var66.getTimeZone();
//     java.util.Locale var72 = null;
//     org.apache.commons.lang3.time.FastDateFormat var73 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var72);
//     java.util.Locale var74 = var73.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var75 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var74);
//     java.util.Locale var76 = var75.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var68, var76);
//     org.apache.commons.lang3.time.FastDateFormat var78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var64, var76);
//     org.apache.commons.lang3.time.FastDateFormat var79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var76);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getInstance("hi!", var58, var76);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "4:00:00 PM PST"+ "'", var15.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "4:00:00 PM PST"+ "'", var17.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "M/d/yy h:mm a"+ "'", var33.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var52 + "' != '" + "4:00:00 PM PST"+ "'", var52.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var54 + "' != '" + "4:00:00 PM PST"+ "'", var54.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var63 + "' != '" + "M/d/yy h:mm a"+ "'", var63.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var67 + "' != '" + "M/d/yy h:mm a"+ "'", var67.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var73);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
// 
//   }

  public void test419() {}
//   public void test419() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
//     java.util.Locale var2 = var1.getLocale();
//     int var3 = var1.getMaxLengthEstimate();
//     java.util.TimeZone var6 = null;
//     java.util.TimeZone var10 = null;
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     boolean var12 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var14 = var11.format(1L);
//     java.lang.String var16 = var11.format(1L);
//     int var17 = var11.getMaxLengthEstimate();
//     java.util.TimeZone var18 = var11.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var6, var21);
//     java.util.Locale var23 = var22.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var24 = var1.format((java.lang.Object)var23);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + "4:00:00 PM PST"+ "'", var14.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "4:00:00 PM PST"+ "'", var16.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
// 
//   }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var24 = var23.getPattern();
//     java.util.TimeZone var25 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var28 = var27.getPattern();
//     java.util.TimeZone var29 = var27.getTimeZone();
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var29, var37);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var25, var37);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var37);
//     java.util.Locale var41 = var40.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Wednesday, December 31, 1969", var41);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "4:00:00 PM PST"+ "'", var10.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "4:00:00 PM PST"+ "'", var12.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var24 + "' != '" + "M/d/yy h:mm a"+ "'", var24.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var28 + "' != '" + "M/d/yy h:mm a"+ "'", var28.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
// 
//   }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var8 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8);
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1);
//     java.util.TimeZone var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15);
//     boolean var17 = var16.getTimeZoneOverridesCalendar();
//     java.lang.String var19 = var16.format(1L);
//     java.lang.String var21 = var16.format(1L);
//     int var22 = var16.getMaxLengthEstimate();
//     java.util.TimeZone var23 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var23);
//     org.apache.commons.lang3.time.FastDateFormat var25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var23);
//     java.util.Locale var26 = var25.getLocale();
//     boolean var27 = var11.equals((java.lang.Object)var26);
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var8, var26);
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var8);
//     org.apache.commons.lang3.time.FastDateFormat var30 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var31 = var30.getPattern();
//     java.lang.String var32 = var30.getPattern();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var33 = var29.format((java.lang.Object)var30);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "4:00:00 PM PST"+ "'", var19.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "4:00:00 PM PST"+ "'", var21.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "M/d/yy h:mm a"+ "'", var31.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var32 + "' != '" + "M/d/yy h:mm a"+ "'", var32.equals("M/d/yy h:mm a"));
// 
//   }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }
// 
// 
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var14);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.util.Locale var20 = var19.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var14, var20);
//     org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var24 = var23.getPattern();
//     java.util.TimeZone var25 = var23.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var27 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var28 = var27.getPattern();
//     java.util.TimeZone var29 = var27.getTimeZone();
//     java.util.Locale var33 = null;
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var33);
//     java.util.Locale var35 = var34.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var35);
//     java.util.Locale var37 = var36.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var29, var37);
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var25, var37);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14, var37);
//     java.util.TimeZone var41 = var40.getTimeZone();
//     java.util.TimeZone var43 = null;
//     org.apache.commons.lang3.time.FastDateFormat var44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var43);
//     boolean var45 = var44.getTimeZoneOverridesCalendar();
//     java.lang.String var47 = var44.format(1L);
//     java.lang.String var49 = var44.format(1L);
//     java.util.Locale var50 = var44.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var41, var50);
//     java.text.ParsePosition var53 = null;
//     java.lang.Object var54 = var51.parseObject("", var53);
// 
//   }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var13);
//     java.util.Locale var17 = null;
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var17);
//     java.util.Locale var19 = var18.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var13, var19);
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var23 = var22.getPattern();
//     java.util.TimeZone var24 = var22.getTimeZone();
//     java.util.Locale var28 = null;
//     org.apache.commons.lang3.time.FastDateFormat var29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var28);
//     java.util.Locale var30 = var29.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var24, var32);
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13, var32);
//     java.util.Locale var35 = var34.getLocale();
//     java.util.Calendar var36 = null;
//     java.lang.StringBuffer var37 = null;
//     java.lang.StringBuffer var38 = var34.format(var36, var37);
// 
//   }

  public void test424() {}
//   public void test424() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }
// 
// 
//     java.util.TimeZone var5 = null;
//     org.apache.commons.lang3.time.FastDateFormat var6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var5);
//     boolean var7 = var6.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var6.format(1L);
//     java.lang.String var11 = var6.format(1L);
//     int var12 = var6.getMaxLengthEstimate();
//     java.util.TimeZone var13 = var6.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var13);
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var13);
//     java.util.Locale var18 = null;
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var18);
//     java.lang.String var20 = var19.toString();
//     java.util.Locale var21 = var19.getLocale();
//     java.util.Locale var22 = var19.getLocale();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(21, 10, var13, var22);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "4:00:00 PM PST"+ "'", var9.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"+ "'", var20.equals("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test425() {}
//   public void test425() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.util.TimeZone var4 = var2.getTimeZone();
//     java.lang.String var5 = var2.getPattern();
//     java.lang.String var6 = var2.getPattern();
//     java.util.TimeZone var10 = null;
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     boolean var12 = var11.getTimeZoneOverridesCalendar();
//     java.lang.String var14 = var11.format(1L);
//     java.lang.String var16 = var11.format(1L);
//     int var17 = var11.getMaxLengthEstimate();
//     java.util.TimeZone var18 = var11.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var18);
//     boolean var21 = var20.getTimeZoneOverridesCalendar();
//     boolean var22 = var2.equals((java.lang.Object)var20);
//     java.lang.StringBuffer var24 = null;
//     java.lang.StringBuffer var25 = var2.format(1L, var24);
// 
//   }

  public void test426() {}
//   public void test426() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }
// 
// 
//     org.apache.commons.lang3.time.FastDateFormat var1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0);
//     boolean var3 = var1.equals((java.lang.Object)(byte)0);
//     java.lang.String var4 = var1.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var6 = var5.getPattern();
//     int var7 = var5.getMaxLengthEstimate();
//     java.lang.StringBuffer var8 = null;
//     java.text.FieldPosition var9 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.StringBuffer var10 = var1.format((java.lang.Object)var5, var8, var9);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "EEEE, MMMM d, yyyy"+ "'", var4.equals("EEEE, MMMM d, yyyy"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "M/d/yy h:mm a"+ "'", var6.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 21);
// 
//   }

  public void test427() {}
//   public void test427() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Locale var10 = var9.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var10);
//     org.apache.commons.lang3.time.FastDateFormat var12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var10);
//     org.apache.commons.lang3.time.FastDateFormat var13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var10);
//     java.lang.StringBuffer var15 = null;
//     java.lang.StringBuffer var16 = var13.format(10L, var15);
// 
//   }

  public void test428() {}
//   public void test428() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }
// 
// 
//     java.util.Locale var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var6);
//     java.util.TimeZone var8 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var8);
//     java.util.Locale var14 = null;
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var14);
//     java.util.Locale var16 = var15.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var16);
//     java.util.Locale var18 = var17.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", var18);
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var18);
//     java.util.TimeZone var25 = null;
//     org.apache.commons.lang3.time.FastDateFormat var26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var25);
//     boolean var27 = var26.getTimeZoneOverridesCalendar();
//     java.lang.String var29 = var26.format(1L);
//     java.lang.String var31 = var26.format(1L);
//     int var32 = var26.getMaxLengthEstimate();
//     java.util.TimeZone var33 = var26.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var33);
//     java.util.Locale var37 = null;
//     org.apache.commons.lang3.time.FastDateFormat var38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var37);
//     java.util.Locale var39 = var38.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var33, var39);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var8, var39);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(39, var8);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "4:00:00 PM PST"+ "'", var29.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "4:00:00 PM PST"+ "'", var31.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
// 
//   }

  public void test429() {}
//   public void test429() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }
// 
// 
//     java.util.Locale var4 = null;
//     org.apache.commons.lang3.time.FastDateFormat var5 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var4);
//     java.util.Locale var6 = var5.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var6);
//     java.util.Locale var8 = var7.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, var8);
//     int var10 = var9.getMaxLengthEstimate();
//     java.util.Locale var11 = var9.getLocale();
//     java.util.Locale var15 = null;
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var15);
//     java.util.TimeZone var17 = var16.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var17);
//     boolean var20 = var18.equals((java.lang.Object)(byte)10);
//     java.util.Locale var21 = var18.getLocale();
//     java.lang.StringBuffer var23 = null;
//     java.lang.StringBuffer var24 = var18.format(100L, var23);
//     java.lang.String var25 = var18.getPattern();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.text.AttributedCharacterIterator var26 = var9.formatToCharacterIterator((java.lang.Object)var25);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
// 
//   }

  public void test430() {}
//   public void test430() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }
// 
// 
//     java.util.TimeZone var7 = null;
//     org.apache.commons.lang3.time.FastDateFormat var8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var7);
//     boolean var9 = var8.getTimeZoneOverridesCalendar();
//     java.lang.String var11 = var8.format(1L);
//     java.lang.String var13 = var8.format(1L);
//     int var14 = var8.getMaxLengthEstimate();
//     java.util.TimeZone var15 = var8.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var15);
//     java.util.Locale var19 = null;
//     org.apache.commons.lang3.time.FastDateFormat var20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var19);
//     java.util.Locale var21 = var20.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var22 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var15, var21);
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var29 = var28.getPattern();
//     java.util.TimeZone var30 = var28.getTimeZone();
//     java.util.Locale var34 = null;
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var34);
//     java.util.Locale var36 = var35.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var36);
//     java.util.Locale var38 = var37.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var30, var38);
//     org.apache.commons.lang3.time.FastDateFormat var40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var26, var38);
//     org.apache.commons.lang3.time.FastDateFormat var41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var15, var38);
//     java.util.TimeZone var42 = var41.getTimeZone();
//     java.util.TimeZone var44 = null;
//     org.apache.commons.lang3.time.FastDateFormat var45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var44);
//     boolean var46 = var45.getTimeZoneOverridesCalendar();
//     java.lang.String var48 = var45.format(1L);
//     java.lang.String var50 = var45.format(1L);
//     java.util.Locale var51 = var45.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var42, var51);
//     java.util.TimeZone var59 = null;
//     org.apache.commons.lang3.time.FastDateFormat var60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var59);
//     boolean var61 = var60.getTimeZoneOverridesCalendar();
//     java.lang.String var63 = var60.format(1L);
//     java.lang.String var65 = var60.format(1L);
//     int var66 = var60.getMaxLengthEstimate();
//     java.util.TimeZone var67 = var60.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var67);
//     java.util.Locale var71 = null;
//     org.apache.commons.lang3.time.FastDateFormat var72 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var71);
//     java.util.Locale var73 = var72.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var74 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 1, var67, var73);
//     org.apache.commons.lang3.time.FastDateFormat var76 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var77 = var76.getPattern();
//     java.util.TimeZone var78 = var76.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var80 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var81 = var80.getPattern();
//     java.util.TimeZone var82 = var80.getTimeZone();
//     java.util.Locale var86 = null;
//     org.apache.commons.lang3.time.FastDateFormat var87 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var86);
//     java.util.Locale var88 = var87.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var89 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var88);
//     java.util.Locale var90 = var89.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var91 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var82, var90);
//     org.apache.commons.lang3.time.FastDateFormat var92 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var78, var90);
//     org.apache.commons.lang3.time.FastDateFormat var93 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var67, var90);
//     java.util.TimeZone var94 = var93.getTimeZone();
//     java.util.Locale var95 = var93.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var96 = org.apache.commons.lang3.time.FastDateFormat.getInstance("EEEE, MMMM d, yyyy h:mm:ss a z", var95);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.apache.commons.lang3.time.FastDateFormat var97 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(10, var42, var95);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "4:00:00 PM PST"+ "'", var11.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "4:00:00 PM PST"+ "'", var13.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "M/d/yy h:mm a"+ "'", var25.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "M/d/yy h:mm a"+ "'", var29.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var48 + "' != '" + "4:00:00 PM PST"+ "'", var48.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var50 + "' != '" + "4:00:00 PM PST"+ "'", var50.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var61 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var63 + "' != '" + "4:00:00 PM PST"+ "'", var63.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var65 + "' != '" + "4:00:00 PM PST"+ "'", var65.equals("4:00:00 PM PST"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var66 == 18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var73);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var77 + "' != '" + "M/d/yy h:mm a"+ "'", var77.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var81 + "' != '" + "M/d/yy h:mm a"+ "'", var81.equals("M/d/yy h:mm a"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var87);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var88);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var89);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var90);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var91);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var92);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var93);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var94);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var95);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var96);
// 
//   }

  public void test431() {}
//   public void test431() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }
// 
// 
//     java.util.TimeZone var1 = null;
//     org.apache.commons.lang3.time.FastDateFormat var2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var1);
//     boolean var3 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var5 = var2.format(1L);
//     boolean var6 = var2.getTimeZoneOverridesCalendar();
//     boolean var7 = var2.getTimeZoneOverridesCalendar();
//     java.lang.String var9 = var2.format((-1L));
//     java.lang.Object var10 = var2.clone();
//     java.util.Locale var11 = var2.getLocale();
//     java.util.Date var12 = null;
//     java.lang.String var13 = var2.format(var12);
// 
//   }

  public void test432() {}
//   public void test432() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }
// 
// 
//     java.util.TimeZone var2 = null;
//     java.util.TimeZone var6 = null;
//     org.apache.commons.lang3.time.FastDateFormat var7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var6);
//     boolean var8 = var7.getTimeZoneOverridesCalendar();
//     java.lang.String var10 = var7.format(1L);
//     java.lang.String var12 = var7.format(1L);
//     int var13 = var7.getMaxLengthEstimate();
//     java.util.TimeZone var14 = var7.getTimeZone();
//     org.apache.commons.lang3.time.FastDateFormat var15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, var14);
//     org.apache.commons.lang3.time.FastDateFormat var16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var14);
//     java.util.Locale var17 = var16.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("M/d/yy h:mm a", var2, var17);
//     org.apache.commons.lang3.time.FastDateFormat var19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, var17);
//     java.lang.String var20 = var19.getPattern();
//     org.apache.commons.lang3.time.FastDateFormat var24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
//     java.lang.String var25 = var24.getPattern();
//     java.util.TimeZone var26 = var24.getTimeZone();
//     java.util.Locale var30 = null;
//     org.apache.commons.lang3.time.FastDateFormat var31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, var30);
//     java.util.Locale var32 = var31.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", var32);
//     java.util.Locale var34 = var33.getLocale();
//     org.apache.commons.lang3.time.FastDateFormat var35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, var26, var34);
//     org.apache.commons.lang3.time.FastDateFormat var36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, var26);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var37 = var19.format((java.lang.Object)0);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
/