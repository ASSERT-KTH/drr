
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(29, 0, 2014);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.lang.String var1 = var0.toString();
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     java.lang.Class var5 = var4.getTimePeriodClass();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.util.Collection var10 = var4.getTimePeriodsUniqueToOtherSeries(var8);
//     int var11 = var8.getMaximumItemCount();
//     org.jfree.data.time.Year var12 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var13 = var12.next();
//     org.jfree.data.time.TimeSeriesDataItem var14 = var8.getDataItem(var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     int var18 = var17.getItemCount();
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     org.jfree.data.time.FixedMillisecond var22 = new org.jfree.data.time.FixedMillisecond();
//     var21.delete((org.jfree.data.time.RegularTimePeriod)var22);
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
//     java.lang.Number var29 = var21.getValue((org.jfree.data.time.RegularTimePeriod)var27);
//     org.jfree.data.time.TimeSeriesDataItem var30 = var17.getDataItem((org.jfree.data.time.RegularTimePeriod)var27);
//     int var31 = var8.getIndex((org.jfree.data.time.RegularTimePeriod)var27);
//     java.lang.String var32 = var8.getDomainDescription();
//     java.lang.Class var34 = null;
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var34);
//     java.lang.Class var36 = var35.getTimePeriodClass();
//     java.util.List var37 = var35.getItems();
//     org.jfree.data.time.Year var38 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var39 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var40 = var39.previous();
//     org.jfree.data.time.TimeSeries var41 = var35.createCopy((org.jfree.data.time.RegularTimePeriod)var38, var40);
//     long var42 = var38.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var43 = var38.next();
//     long var44 = var38.getFirstMillisecond();
//     org.jfree.data.time.Year var45 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var46 = var45.previous();
//     java.lang.Class var48 = null;
//     org.jfree.data.time.TimeSeries var49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var48);
//     java.lang.Class var50 = var49.getTimePeriodClass();
//     java.util.List var51 = var49.getItems();
//     org.jfree.data.time.Year var52 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var53 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var54 = var53.previous();
//     org.jfree.data.time.TimeSeries var55 = var49.createCopy((org.jfree.data.time.RegularTimePeriod)var52, var54);
//     boolean var56 = var45.equals((java.lang.Object)var54);
//     org.jfree.data.time.RegularTimePeriod var57 = var45.previous();
//     org.jfree.data.time.TimeSeries var58 = var8.createCopy((org.jfree.data.time.RegularTimePeriod)var38, (org.jfree.data.time.RegularTimePeriod)var45);
//     long var59 = var45.getFirstMillisecond();
//     boolean var60 = var0.equals((java.lang.Object)var45);
//     java.util.Calendar var61 = null;
//     long var62 = var0.getFirstMillisecond(var61);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidMonthCode((-459));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     org.jfree.data.time.Year var14 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var15 = var14.previous();
//     org.jfree.data.time.TimeSeriesDataItem var16 = var13.getDataItem(var15);
//     var13.setNotify(false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139764217L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
// 
//   }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var5 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.general.SeriesChangeEvent var6 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var4);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
    org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    int var19 = var16.compare((org.jfree.data.time.SerialDate)var18);
    boolean var20 = var10.isOnOrAfter((org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
    int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
    org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
    org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    int var33 = var30.compare((org.jfree.data.time.SerialDate)var32);
    boolean var34 = var24.isOnOrAfter((org.jfree.data.time.SerialDate)var32);
    int var35 = var24.getDayOfMonth();
    boolean var37 = var4.isInRange(var21, (org.jfree.data.time.SerialDate)var24, 0);
    boolean var38 = var1.isOnOrBefore(var21);
    java.lang.String var39 = var1.toString();
    org.jfree.data.time.Day var40 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var1);
    int var41 = var40.getMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "30-January-1900"+ "'", var39.equals("30-January-1900"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);

  }

  public void test6() {}
//   public void test6() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.String var11 = var5.toString();
//     long var12 = var5.getSerialIndex();
//     java.util.Calendar var13 = null;
//     long var14 = var5.getFirstMillisecond(var13);
// 
//   }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.lang.String var1 = var0.toString();
//     java.lang.String var2 = var0.toString();
//     java.lang.Object var3 = null;
//     int var4 = var0.compareTo(var3);
//     org.jfree.data.time.RegularTimePeriod var5 = var0.previous();
//     long var6 = var0.getMiddleMillisecond();
//     org.jfree.data.time.SerialDate var7 = var0.getSerialDate();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.SerialDate var9 = var7.getPreviousDayOfWeek(2014);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "20-December-2014"+ "'", var1.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "20-December-2014"+ "'", var2.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419105599999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
// 
//   }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    org.jfree.data.general.SeriesChangeEvent var1 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)1419139748159L);

  }

  public void test9() {}
//   public void test9() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var11.update(28, (java.lang.Number)1419139748031L);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139764307L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139764307L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
// 
//   }

  public void test10() {}
//   public void test10() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     java.lang.String var17 = var10.getDescription();
//     boolean var18 = var10.isEmpty();
//     boolean var19 = var10.isEmpty();
//     org.jfree.data.time.RegularTimePeriod var20 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var22 = var10.addOrUpdate(var20, (java.lang.Number)1419139761620L);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139764354L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "2015"+ "'", var17.equals("2015"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == true);
// 
//   }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.createInstance((-453), (-453), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
    var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
    java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
    java.util.Date var16 = var12.getStart();
    org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
    org.jfree.data.time.Month var20 = new org.jfree.data.time.Month(var16);
    org.jfree.data.time.Month var21 = new org.jfree.data.time.Month(var16);
    java.util.TimeZone var22 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var23 = new org.jfree.data.time.Day(var16, var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.createInstance(13, 2014, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test14() {}
//   public void test14() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     int var23 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var19);
//     boolean var24 = var5.equals((java.lang.Object)var19);
//     java.util.Calendar var25 = null;
//     long var26 = var19.getMiddleMillisecond(var25);
//     java.util.Date var27 = var19.getTime();
//     java.util.TimeZone var28 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var29 = new org.jfree.data.time.Day(var27, var28);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139764362L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1419139764362L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
// 
//   }

  public void test15() {}
//   public void test15() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.String var20 = var19.toString();
//     long var21 = var19.getLastMillisecond();
//     long var22 = var19.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var23 = var19.next();
//     java.util.Calendar var24 = null;
//     long var25 = var19.getFirstMillisecond(var24);
// 
//   }

  public void test16() {}
//   public void test16() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     long var11 = var5.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var12 = var5.next();
//     long var13 = var5.getFirstMillisecond();
//     java.util.Calendar var14 = null;
//     long var15 = var5.getFirstMillisecond(var14);
// 
//   }

  public void test17() {}
//   public void test17() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     long var6 = var0.getMiddleMillisecond();
//     long var7 = var0.getMiddleMillisecond();
//     int var9 = var0.compareTo((java.lang.Object)1419139756011L);
//     java.util.Calendar var10 = null;
//     long var11 = var0.getMiddleMillisecond(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139764408L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139764408L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139764408L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139764408L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1419139764408L);
// 
//   }

  public void test18() {}
//   public void test18() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var2);
//     org.jfree.data.general.SeriesChangeEvent var4 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var2);
//     org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SerialDate var12 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var8);
//     org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var17 = var14.compare((org.jfree.data.time.SerialDate)var16);
//     boolean var18 = var8.isOnOrAfter((org.jfree.data.time.SerialDate)var16);
//     org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var8);
//     org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var25 = var22.compare((org.jfree.data.time.SerialDate)var24);
//     org.jfree.data.time.SerialDate var26 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var22);
//     org.jfree.data.time.SpreadsheetDate var28 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var31 = var28.compare((org.jfree.data.time.SerialDate)var30);
//     boolean var32 = var22.isOnOrAfter((org.jfree.data.time.SerialDate)var30);
//     int var33 = var22.getDayOfMonth();
//     boolean var35 = var2.isInRange(var19, (org.jfree.data.time.SerialDate)var22, 0);
//     int var36 = var2.getDayOfMonth();
//     int var37 = var2.toSerial();
//     org.jfree.data.time.SerialDate var38 = null;
//     boolean var39 = var2.isOn(var38);
// 
//   }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     java.lang.String var9 = var8.getRangeDescription();
//     org.jfree.data.general.SeriesChangeListener var10 = null;
//     var8.addChangeListener(var10);
//     org.jfree.data.time.Year var12 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var13 = var12.previous();
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     boolean var23 = var12.equals((java.lang.Object)var21);
//     org.jfree.data.time.RegularTimePeriod var24 = var12.previous();
//     org.jfree.data.time.TimeSeriesDataItem var25 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.RegularTimePeriod var26 = var12.previous();
//     java.util.Calendar var27 = null;
//     var12.peg(var27);
// 
//   }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }
// 
// 
//     org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("December 2014");
//     int var2 = var1.getYearValue();
//     org.jfree.data.time.RegularTimePeriod var3 = var1.next();
//     java.util.Calendar var4 = null;
//     long var5 = var1.getLastMillisecond(var4);
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
    org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
    var2.clear();
    org.jfree.data.time.RegularTimePeriod var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add(var10, (java.lang.Number)1419139747547L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.FixedMillisecond var10 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var11 = null;
//     var10.peg(var11);
//     org.jfree.data.time.TimeSeriesDataItem var14 = var6.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var10, (-1.0d));
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     int var18 = var17.getItemCount();
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     org.jfree.data.time.FixedMillisecond var22 = new org.jfree.data.time.FixedMillisecond();
//     var21.delete((org.jfree.data.time.RegularTimePeriod)var22);
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
//     java.lang.Number var29 = var21.getValue((org.jfree.data.time.RegularTimePeriod)var27);
//     org.jfree.data.time.TimeSeriesDataItem var30 = var17.getDataItem((org.jfree.data.time.RegularTimePeriod)var27);
//     java.util.Date var31 = var27.getStart();
//     org.jfree.data.time.Day var32 = new org.jfree.data.time.Day(var31);
//     java.lang.Class var34 = null;
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var34);
//     java.lang.Class var36 = var35.getTimePeriodClass();
//     java.util.List var37 = var35.getItems();
//     org.jfree.data.time.Year var38 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var39 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var40 = var39.previous();
//     org.jfree.data.time.TimeSeries var41 = var35.createCopy((org.jfree.data.time.RegularTimePeriod)var38, var40);
//     long var42 = var38.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var43 = var38.next();
//     long var44 = var38.getFirstMillisecond();
//     long var45 = var38.getSerialIndex();
//     long var46 = var38.getLastMillisecond();
//     org.jfree.data.time.TimeSeries var47 = var6.createCopy((org.jfree.data.time.RegularTimePeriod)var32, (org.jfree.data.time.RegularTimePeriod)var38);
// 
//   }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     long var10 = var5.getSerialIndex();
//     java.util.Date var11 = var5.getEnd();
//     long var12 = var5.getMiddleMillisecond();
//     java.util.Calendar var13 = null;
//     long var14 = var5.getLastMillisecond(var13);
// 
//   }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     java.lang.Class var5 = var4.getTimePeriodClass();
//     java.util.List var6 = var4.getItems();
//     org.jfree.data.time.Year var7 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var9 = var8.previous();
//     org.jfree.data.time.TimeSeries var10 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var7, var9);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var14);
//     org.jfree.data.time.TimeSeries var16 = var10.addAndOrUpdate(var15);
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     java.lang.Class var20 = var19.getTimePeriodClass();
//     java.util.List var21 = var19.getItems();
//     org.jfree.data.time.Year var22 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var24 = var23.previous();
//     org.jfree.data.time.TimeSeries var25 = var19.createCopy((org.jfree.data.time.RegularTimePeriod)var22, var24);
//     long var26 = var22.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var27 = var22.next();
//     long var28 = var22.getLastMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var30 = var15.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var22, 100.0d);
//     org.jfree.data.time.Month var31 = new org.jfree.data.time.Month(10, var22);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Month var32 = new org.jfree.data.time.Month((-570), var22);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var30);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
    java.lang.Class var6 = null;
    org.jfree.data.time.TimeSeries var7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var6);
    org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
    var7.delete((org.jfree.data.time.RegularTimePeriod)var8);
    java.lang.Number var10 = var2.getValue((org.jfree.data.time.RegularTimePeriod)var8);
    int var11 = var2.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    int var14 = var3.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
    org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
    int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
    boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
    int var28 = var17.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
    int var35 = var32.compare((org.jfree.data.time.SerialDate)var34);
    org.jfree.data.time.SerialDate var36 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
    int var41 = var38.compare((org.jfree.data.time.SerialDate)var40);
    boolean var42 = var32.isOnOrAfter((org.jfree.data.time.SerialDate)var40);
    org.jfree.data.time.SerialDate var43 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SpreadsheetDate var45 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
    int var48 = var45.compare((org.jfree.data.time.SerialDate)var47);
    int var49 = var47.getMonth();
    boolean var50 = var32.isOnOrAfter((org.jfree.data.time.SerialDate)var47);
    boolean var51 = var3.isInRange((org.jfree.data.time.SerialDate)var17, (org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SpreadsheetDate var54 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var56 = new org.jfree.data.time.SpreadsheetDate(31);
    int var57 = var54.compare((org.jfree.data.time.SerialDate)var56);
    org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var54);
    org.jfree.data.time.Day var60 = new org.jfree.data.time.Day();
    org.jfree.data.time.SerialDate var61 = var60.getSerialDate();
    org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.getNearestDayOfWeek(3, var61);
    boolean var63 = var32.isInRange((org.jfree.data.time.SerialDate)var54, var62);
    org.jfree.data.time.SerialDate var64 = org.jfree.data.time.SerialDate.addDays(12, (org.jfree.data.time.SerialDate)var32);
    int var65 = var32.getMonth();
    int var66 = var32.getYYYY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1900);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidWeekdayCode((-452));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test28() {}
//   public void test28() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     java.lang.String var5 = var2.getRangeDescription();
//     java.beans.PropertyChangeListener var6 = null;
//     var2.removePropertyChangeListener(var6);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     int var11 = var10.getItemCount();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     var14.delete((org.jfree.data.time.RegularTimePeriod)var15);
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Number var22 = var14.getValue((org.jfree.data.time.RegularTimePeriod)var20);
//     org.jfree.data.time.TimeSeriesDataItem var23 = var10.getDataItem((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
//     java.util.Calendar var29 = null;
//     long var30 = var27.getMiddleMillisecond(var29);
//     java.lang.Class var31 = null;
//     org.jfree.data.time.TimeSeries var32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var27, var31);
//     java.lang.Class var34 = null;
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var34);
//     java.lang.Class var36 = var35.getTimePeriodClass();
//     java.lang.Class var38 = null;
//     org.jfree.data.time.TimeSeries var39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var38);
//     java.lang.Class var40 = var39.getTimePeriodClass();
//     java.util.Collection var41 = var35.getTimePeriodsUniqueToOtherSeries(var39);
//     boolean var42 = var27.equals((java.lang.Object)var41);
//     java.util.Calendar var43 = null;
//     long var44 = var27.getFirstMillisecond(var43);
//     org.jfree.data.time.TimeSeries var45 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var20, (org.jfree.data.time.RegularTimePeriod)var27);
//     org.jfree.data.time.FixedMillisecond var46 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var47 = null;
//     long var48 = var46.getFirstMillisecond(var47);
//     java.util.Calendar var49 = null;
//     long var50 = var46.getMiddleMillisecond(var49);
//     java.util.Date var51 = var46.getTime();
//     org.jfree.data.time.TimeSeries var55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var56 = var55.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var51, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var56);
//     java.lang.Class var58 = org.jfree.data.time.RegularTimePeriod.downsize(var56);
//     java.lang.Class var59 = org.jfree.data.time.RegularTimePeriod.downsize(var56);
//     org.jfree.data.time.TimeSeries var60 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var20, var59);
//     
//     // Checks the contract:  equals-hashcode on var32 and var60
//     assertTrue("Contract failed: equals-hashcode on var32 and var60", var32.equals(var60) ? var32.hashCode() == var60.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var60 and var32
//     assertTrue("Contract failed: equals-hashcode on var60 and var32", var60.equals(var32) ? var60.hashCode() == var32.hashCode() : true);
// 
//   }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate((-453), 29, 20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var5);
    var2.setDomainDescription("2015");
    org.jfree.data.time.Year var9 = new org.jfree.data.time.Year();
    org.jfree.data.time.RegularTimePeriod var10 = var9.previous();
    java.lang.Number var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.update(var10, var11);
      fail("Expected exception of type org.jfree.data.general.SeriesException");
    } catch (org.jfree.data.general.SeriesException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    int var1 = org.jfree.data.time.SerialDate.stringToWeekdayCode("Nearest");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }


    org.jfree.data.time.TimePeriodFormatException var1 = new org.jfree.data.time.TimePeriodFormatException("org.jfree.data.time.TimePeriodFormatException: org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]");

  }

  public void test33() {}
//   public void test33() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     var2.fireSeriesChanged();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     java.util.Collection var14 = var8.getTimePeriodsUniqueToOtherSeries(var12);
//     var8.clear();
//     org.jfree.data.time.TimeSeries var16 = var2.addAndOrUpdate(var8);
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     int var20 = var19.getItemCount();
//     java.lang.Class var22 = null;
//     org.jfree.data.time.TimeSeries var23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond();
//     var23.delete((org.jfree.data.time.RegularTimePeriod)var24);
//     java.lang.Class var27 = null;
//     org.jfree.data.time.TimeSeries var28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var27);
//     org.jfree.data.time.FixedMillisecond var29 = new org.jfree.data.time.FixedMillisecond();
//     var28.delete((org.jfree.data.time.RegularTimePeriod)var29);
//     java.lang.Number var31 = var23.getValue((org.jfree.data.time.RegularTimePeriod)var29);
//     org.jfree.data.time.TimeSeriesDataItem var32 = var19.getDataItem((org.jfree.data.time.RegularTimePeriod)var29);
//     java.util.Date var33 = var29.getStart();
//     org.jfree.data.time.FixedMillisecond var34 = new org.jfree.data.time.FixedMillisecond(var33);
//     org.jfree.data.time.FixedMillisecond var35 = new org.jfree.data.time.FixedMillisecond(var33);
//     org.jfree.data.time.Month var36 = new org.jfree.data.time.Month(var33);
//     java.lang.String var37 = var36.toString();
//     long var38 = var36.getLastMillisecond();
//     long var39 = var36.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var40 = var36.next();
//     org.jfree.data.time.Year var41 = var36.getYear();
//     org.jfree.data.time.TimeSeriesDataItem var43 = var8.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var36, 0.0d);
//     java.util.Calendar var44 = null;
//     long var45 = var36.getLastMillisecond(var44);
// 
//   }

  public void test34() {}
//   public void test34() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     long var18 = var14.getMaximumItemAge();
//     boolean var19 = var14.getNotify();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var21 = null;
//     long var22 = var20.getFirstMillisecond(var21);
//     java.util.Calendar var23 = null;
//     long var24 = var20.getMiddleMillisecond(var23);
//     org.jfree.data.time.TimeSeriesDataItem var26 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var20, 10.0d);
//     java.lang.Object var27 = var26.clone();
//     java.lang.Object var28 = var26.clone();
//     java.lang.Number var29 = null;
//     var26.setValue(var29);
//     var14.add(var26, true);
// 
//   }

  public void test35() {}
//   public void test35() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.String var20 = var19.toString();
//     long var21 = var19.getLastMillisecond();
//     long var22 = var19.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var23 = var19.next();
//     org.jfree.data.time.Year var24 = var19.getYear();
//     java.util.Calendar var25 = null;
//     var19.peg(var25);
// 
//   }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.String var4 = var2.getDescription();
    java.beans.PropertyChangeListener var5 = null;
    var2.removePropertyChangeListener(var5);
    int var7 = var2.getItemCount();
    java.lang.Class var9 = null;
    org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
    java.lang.Class var11 = var10.getTimePeriodClass();
    java.lang.Class var13 = null;
    org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
    java.lang.Class var15 = var14.getTimePeriodClass();
    java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
    org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
    org.jfree.data.time.RegularTimePeriod var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.TimeSeriesDataItem var20 = var17.addOrUpdate(var18, (java.lang.Number)1419139760056L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var10 = var2.getTimePeriod(2);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
    org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
    java.lang.Class var12 = null;
    org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var12);
    org.jfree.data.time.TimeSeries var14 = var8.addAndOrUpdate(var13);
    java.lang.String var15 = var13.getRangeDescription();
    java.util.Collection var16 = var13.getTimePeriods();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Value"+ "'", var15.equals("Value"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.String var4 = var2.getDescription();
    java.beans.PropertyChangeListener var5 = null;
    var2.removePropertyChangeListener(var5);
    int var7 = var2.getItemCount();
    java.lang.Class var9 = null;
    org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
    java.lang.Class var11 = var10.getTimePeriodClass();
    java.lang.Class var13 = null;
    org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
    java.lang.Class var15 = var14.getTimePeriodClass();
    java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
    org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
    java.beans.PropertyChangeListener var18 = null;
    var17.removePropertyChangeListener(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day(10, 0, 2014);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     long var11 = var5.getFirstMillisecond();
//     long var12 = var5.getSerialIndex();
//     long var13 = var5.getLastMillisecond();
//     java.util.Calendar var14 = null;
//     long var15 = var5.getMiddleMillisecond(var14);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("Value");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var5 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.general.SeriesChangeEvent var6 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var4);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
//     org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var19 = var16.compare((org.jfree.data.time.SerialDate)var18);
//     boolean var20 = var10.isOnOrAfter((org.jfree.data.time.SerialDate)var18);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
//     org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var33 = var30.compare((org.jfree.data.time.SerialDate)var32);
//     boolean var34 = var24.isOnOrAfter((org.jfree.data.time.SerialDate)var32);
//     int var35 = var24.getDayOfMonth();
//     boolean var37 = var4.isInRange(var21, (org.jfree.data.time.SerialDate)var24, 0);
//     boolean var38 = var1.isOnOrBefore(var21);
//     java.lang.String var39 = var1.toString();
//     org.jfree.data.time.Day var40 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var1);
//     org.jfree.data.time.SpreadsheetDate var42 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var45 = var42.compare((org.jfree.data.time.SerialDate)var44);
//     int var46 = var44.getMonth();
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     org.jfree.data.time.FixedMillisecond var48 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var49 = null;
//     long var50 = var48.getFirstMillisecond(var49);
//     java.util.Calendar var51 = null;
//     long var52 = var48.getMiddleMillisecond(var51);
//     java.util.Date var53 = var48.getTime();
//     org.jfree.data.time.TimeSeries var57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var58 = var57.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var53, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var58);
//     java.lang.Class var60 = org.jfree.data.time.RegularTimePeriod.downsize(var58);
//     java.lang.Class var61 = org.jfree.data.time.RegularTimePeriod.downsize(var58);
//     java.lang.Class var63 = null;
//     org.jfree.data.time.TimeSeries var64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var63);
//     org.jfree.data.time.FixedMillisecond var65 = new org.jfree.data.time.FixedMillisecond();
//     var64.delete((org.jfree.data.time.RegularTimePeriod)var65);
//     java.util.Calendar var67 = null;
//     long var68 = var65.getMiddleMillisecond(var67);
//     java.lang.Class var69 = null;
//     org.jfree.data.time.TimeSeries var70 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var65, var69);
//     java.lang.Class var72 = null;
//     org.jfree.data.time.TimeSeries var73 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var72);
//     java.lang.Class var74 = var73.getTimePeriodClass();
//     java.lang.Class var76 = null;
//     org.jfree.data.time.TimeSeries var77 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var76);
//     java.lang.Class var78 = var77.getTimePeriodClass();
//     java.util.Collection var79 = var73.getTimePeriodsUniqueToOtherSeries(var77);
//     boolean var80 = var65.equals((java.lang.Object)var79);
//     java.util.Date var81 = var65.getEnd();
//     java.util.TimeZone var82 = null;
//     org.jfree.data.time.RegularTimePeriod var83 = org.jfree.data.time.RegularTimePeriod.createInstance(var58, var81, var82);
//     int var84 = var40.compareTo((java.lang.Object)var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var39 + "' != '" + "30-January-1900"+ "'", var39.equals("30-January-1900"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == 1419139765600L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var52 == 1419139765600L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == 1419139765601L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var80 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var84 == 1);
// 
//   }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    int var7 = var5.getYYYY();
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addDays(4, (org.jfree.data.time.SerialDate)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.getFollowingDayOfWeek((-565), (org.jfree.data.time.SerialDate)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1900);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.createInstance(1, 0, (-453));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test46() {}
//   public void test46() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     org.jfree.data.time.TimeSeriesDataItem var6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, 10.0d);
//     java.lang.Object var7 = var6.clone();
//     java.lang.Object var8 = var6.clone();
//     java.lang.Number var9 = null;
//     var6.setValue(var9);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     java.lang.Object var13 = null;
//     boolean var14 = var12.equals(var13);
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10.0f, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var21 = null;
//     long var22 = var20.getFirstMillisecond(var21);
//     java.util.Calendar var23 = null;
//     long var24 = var20.getMiddleMillisecond(var23);
//     java.util.Date var25 = var20.getTime();
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var30 = var29.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var25, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var30);
//     java.util.TimeZone var32 = null;
//     org.jfree.data.time.RegularTimePeriod var33 = org.jfree.data.time.RegularTimePeriod.createInstance(var18, var25, var32);
//     org.jfree.data.time.TimeSeries var34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var14, var18);
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var6, var18);
//     org.jfree.data.time.RegularTimePeriod var36 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var37 = var35.getDataItem(var36);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139765744L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139765744L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139765746L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1419139765746L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
// 
//   }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getLastMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139765784L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139765784L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1420099199999L);
// 
//   }

  public void test48() {}
//   public void test48() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }
// 
// 
//     java.lang.Class var2 = null;
//     org.jfree.data.time.TimeSeries var3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var2);
//     java.lang.Class var4 = var3.getTimePeriodClass();
//     java.util.List var5 = var3.getItems();
//     org.jfree.data.time.Year var6 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var8 = var7.previous();
//     org.jfree.data.time.TimeSeries var9 = var3.createCopy((org.jfree.data.time.RegularTimePeriod)var6, var8);
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var13);
//     org.jfree.data.time.TimeSeries var15 = var9.addAndOrUpdate(var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     java.lang.Class var19 = var18.getTimePeriodClass();
//     java.util.List var20 = var18.getItems();
//     org.jfree.data.time.Year var21 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var22 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var23 = var22.previous();
//     org.jfree.data.time.TimeSeries var24 = var18.createCopy((org.jfree.data.time.RegularTimePeriod)var21, var23);
//     long var25 = var21.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var26 = var21.next();
//     long var27 = var21.getLastMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var29 = var14.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var21, 100.0d);
//     org.jfree.data.time.Month var30 = new org.jfree.data.time.Month(1, var21);
//     java.util.Calendar var31 = null;
//     long var32 = var30.getFirstMillisecond(var31);
// 
//   }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     boolean var3 = var2.getNotify();
//     org.jfree.data.general.SeriesChangeListener var4 = null;
//     var2.removeChangeListener(var4);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.TimeSeriesDataItem var25 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var23, (java.lang.Number)10);
//     java.lang.Class var27 = null;
//     org.jfree.data.time.TimeSeries var28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var27);
//     int var29 = var28.getItemCount();
//     java.lang.Class var31 = null;
//     org.jfree.data.time.TimeSeries var32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var31);
//     org.jfree.data.time.FixedMillisecond var33 = new org.jfree.data.time.FixedMillisecond();
//     var32.delete((org.jfree.data.time.RegularTimePeriod)var33);
//     java.lang.Class var36 = null;
//     org.jfree.data.time.TimeSeries var37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var36);
//     org.jfree.data.time.FixedMillisecond var38 = new org.jfree.data.time.FixedMillisecond();
//     var37.delete((org.jfree.data.time.RegularTimePeriod)var38);
//     java.lang.Number var40 = var32.getValue((org.jfree.data.time.RegularTimePeriod)var38);
//     org.jfree.data.time.TimeSeriesDataItem var41 = var28.getDataItem((org.jfree.data.time.RegularTimePeriod)var38);
//     java.util.Date var42 = var38.getStart();
//     org.jfree.data.time.FixedMillisecond var43 = new org.jfree.data.time.FixedMillisecond(var42);
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond(var42);
//     org.jfree.data.time.Month var45 = new org.jfree.data.time.Month(var42);
//     java.lang.Object var46 = null;
//     boolean var47 = var45.equals(var46);
//     boolean var49 = var45.equals((java.lang.Object)1419139747941L);
//     int var50 = var25.compareTo((java.lang.Object)var49);
//     var2.add(var25, true);
// 
//   }

  public void test50() {}
//   public void test50() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     int var24 = var13.getMaximumItemCount();
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var27 = var26.getTimePeriodClass();
//     int var28 = var26.getItemCount();
//     var26.setRangeDescription("Oct");
//     org.jfree.data.time.FixedMillisecond var31 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var32 = null;
//     long var33 = var31.getFirstMillisecond(var32);
//     java.util.Calendar var34 = null;
//     long var35 = var31.getMiddleMillisecond(var34);
//     java.util.Date var36 = var31.getTime();
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var41 = var40.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var36, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var41);
//     org.jfree.data.time.Month var43 = new org.jfree.data.time.Month();
//     var42.setKey((java.lang.Comparable)var43);
//     long var45 = var43.getFirstMillisecond();
//     long var46 = var43.getSerialIndex();
//     int var47 = var43.getYearValue();
//     int var48 = var26.getIndex((org.jfree.data.time.RegularTimePeriod)var43);
//     int var49 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var43);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var51 = var13.getValue(30);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139765877L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 1419139765881L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 1419139765881L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == (-1));
// 
//   }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.String var20 = var19.toString();
//     long var21 = var19.getFirstMillisecond();
//     org.jfree.data.time.Year var22 = var19.getYear();
//     org.jfree.data.time.RegularTimePeriod var23 = var19.previous();
//     java.util.Calendar var24 = null;
//     long var25 = var19.getFirstMillisecond(var24);
// 
//   }

  public void test52() {}
//   public void test52() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     java.util.Date var10 = var5.getStart();
//     org.jfree.data.time.Month var11 = new org.jfree.data.time.Month(var10);
//     java.util.Calendar var12 = null;
//     long var13 = var11.getLastMillisecond(var12);
// 
//   }

  public void test53() {}
//   public void test53() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     java.lang.String var9 = var8.getRangeDescription();
//     var8.setDescription("Time");
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.List var16 = var14.getItems();
//     org.jfree.data.time.Year var17 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var19 = var18.previous();
//     org.jfree.data.time.TimeSeries var20 = var14.createCopy((org.jfree.data.time.RegularTimePeriod)var17, var19);
//     long var21 = var17.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var22 = var17.next();
//     long var23 = var17.getFirstMillisecond();
//     long var24 = var17.getFirstMillisecond();
//     var8.add((org.jfree.data.time.RegularTimePeriod)var17, (java.lang.Number)1419139761854L, true);
// 
//   }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.monthCodeToString(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "February"+ "'", var1.equals("February"));

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = org.jfree.data.time.SerialDate.monthCodeToQuarter((-565));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(0, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test57() {}
//   public void test57() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     int var16 = var15.getItemCount();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
//     org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
//     int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.String var30 = var6.getDomainDescription();
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     java.lang.Class var34 = var33.getTimePeriodClass();
//     java.util.List var35 = var33.getItems();
//     org.jfree.data.time.Year var36 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var38 = var37.previous();
//     org.jfree.data.time.TimeSeries var39 = var33.createCopy((org.jfree.data.time.RegularTimePeriod)var36, var38);
//     long var40 = var36.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var41 = var36.next();
//     long var42 = var36.getFirstMillisecond();
//     org.jfree.data.time.Year var43 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var44 = var43.previous();
//     java.lang.Class var46 = null;
//     org.jfree.data.time.TimeSeries var47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var46);
//     java.lang.Class var48 = var47.getTimePeriodClass();
//     java.util.List var49 = var47.getItems();
//     org.jfree.data.time.Year var50 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var51 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var52 = var51.previous();
//     org.jfree.data.time.TimeSeries var53 = var47.createCopy((org.jfree.data.time.RegularTimePeriod)var50, var52);
//     boolean var54 = var43.equals((java.lang.Object)var52);
//     org.jfree.data.time.RegularTimePeriod var55 = var43.previous();
//     org.jfree.data.time.TimeSeries var56 = var6.createCopy((org.jfree.data.time.RegularTimePeriod)var36, (org.jfree.data.time.RegularTimePeriod)var43);
//     org.jfree.data.time.Day var57 = new org.jfree.data.time.Day();
//     java.lang.String var58 = var57.toString();
//     java.lang.String var59 = var57.toString();
//     java.lang.Object var60 = null;
//     int var61 = var57.compareTo(var60);
//     org.jfree.data.time.RegularTimePeriod var62 = var57.previous();
//     org.jfree.data.time.TimeSeriesDataItem var64 = var56.addOrUpdate(var62, (java.lang.Number)1419139758374L);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var56.setMaximumItemCount((-565));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "Time"+ "'", var30.equals("Time"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var58 + "' != '" + "20-December-2014"+ "'", var58.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var59 + "' != '" + "20-December-2014"+ "'", var59.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var61 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var64);
// 
//   }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day((-1), (-570), 30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test59() {}
//   public void test59() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     int var16 = var15.getItemCount();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
//     org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
//     int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.String var30 = var6.getDomainDescription();
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     java.lang.Class var34 = var33.getTimePeriodClass();
//     java.util.List var35 = var33.getItems();
//     org.jfree.data.time.Year var36 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var38 = var37.previous();
//     org.jfree.data.time.TimeSeries var39 = var33.createCopy((org.jfree.data.time.RegularTimePeriod)var36, var38);
//     long var40 = var36.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var41 = var36.next();
//     long var42 = var36.getFirstMillisecond();
//     org.jfree.data.time.Year var43 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var44 = var43.previous();
//     java.lang.Class var46 = null;
//     org.jfree.data.time.TimeSeries var47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var46);
//     java.lang.Class var48 = var47.getTimePeriodClass();
//     java.util.List var49 = var47.getItems();
//     org.jfree.data.time.Year var50 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var51 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var52 = var51.previous();
//     org.jfree.data.time.TimeSeries var53 = var47.createCopy((org.jfree.data.time.RegularTimePeriod)var50, var52);
//     boolean var54 = var43.equals((java.lang.Object)var52);
//     org.jfree.data.time.RegularTimePeriod var55 = var43.previous();
//     org.jfree.data.time.TimeSeries var56 = var6.createCopy((org.jfree.data.time.RegularTimePeriod)var36, (org.jfree.data.time.RegularTimePeriod)var43);
//     long var57 = var43.getFirstMillisecond();
//     java.util.Calendar var58 = null;
//     long var59 = var43.getMiddleMillisecond(var58);
// 
//   }

  public void test60() {}
//   public void test60() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     java.util.Calendar var5 = null;
//     long var6 = var4.getLastMillisecond(var5);
// 
//   }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     int var23 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var19);
//     boolean var24 = var5.equals((java.lang.Object)var19);
//     java.util.Calendar var25 = null;
//     long var26 = var19.getMiddleMillisecond(var25);
//     org.jfree.data.time.Day var29 = new org.jfree.data.time.Day();
//     java.lang.String var30 = var29.toString();
//     java.lang.String var31 = var29.toString();
//     java.lang.Object var32 = null;
//     int var33 = var29.compareTo(var32);
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var38 = null;
//     long var39 = var37.getFirstMillisecond(var38);
//     java.util.Calendar var40 = null;
//     long var41 = var37.getMiddleMillisecond(var40);
//     java.util.Date var42 = var37.getTime();
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var42, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var47);
//     java.lang.Class var49 = org.jfree.data.time.RegularTimePeriod.downsize(var47);
//     org.jfree.data.time.TimeSeries var50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var47);
//     int var51 = var29.compareTo((java.lang.Object)var47);
//     org.jfree.data.time.TimeSeries var52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var19, "SerialDate.weekInMonthToString(): invalid code.", "Last", var47);
//     long var53 = var19.getSerialIndex();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139766449L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1419139766449L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "20-December-2014"+ "'", var30.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "20-December-2014"+ "'", var31.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 1419139766451L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 1419139766451L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == 1419139766449L);
// 
//   }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    var2.setKey((java.lang.Comparable)1419139755856L);
    java.lang.Object var6 = null;
    boolean var7 = var2.equals(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Month var20 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Month var21 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Day var22 = new org.jfree.data.time.Day(var16);
//     org.jfree.data.time.Day var23 = new org.jfree.data.time.Day(var16);
//     long var24 = var23.getFirstMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1419062400000L);
// 
//   }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
    org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.time.SpreadsheetDate var15 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.general.SeriesChangeEvent var20 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var18);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
    int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
    org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
    org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    int var33 = var30.compare((org.jfree.data.time.SerialDate)var32);
    boolean var34 = var24.isOnOrAfter((org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
    org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
    int var41 = var38.compare((org.jfree.data.time.SerialDate)var40);
    org.jfree.data.time.SerialDate var42 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var38);
    org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
    int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
    boolean var48 = var38.isOnOrAfter((org.jfree.data.time.SerialDate)var46);
    int var49 = var38.getDayOfMonth();
    boolean var51 = var18.isInRange(var35, (org.jfree.data.time.SerialDate)var38, 0);
    boolean var52 = var15.isOnOrBefore(var35);
    java.lang.String var53 = var15.toString();
    org.jfree.data.time.Day var54 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var15);
    java.lang.Number var55 = var11.getValue((org.jfree.data.time.RegularTimePeriod)var54);
    java.lang.String var56 = var54.toString();
    boolean var57 = var5.equals((java.lang.Object)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "30-January-1900"+ "'", var53.equals("30-January-1900"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "30-January-1900"+ "'", var56.equals("30-January-1900"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     org.jfree.data.time.Day var17 = new org.jfree.data.time.Day();
//     java.lang.String var18 = var17.toString();
//     long var19 = var17.getLastMillisecond();
//     int var20 = var17.getDayOfMonth();
//     long var21 = var17.getSerialIndex();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var10.update((org.jfree.data.time.RegularTimePeriod)var17, (java.lang.Number)1419139755791L);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139766639L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + "20-December-2014"+ "'", var18.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 1419148799999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 41993L);
// 
//   }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekInMonthToString(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Second"+ "'", var1.equals("Second"));

  }

  public void test67() {}
//   public void test67() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     org.jfree.data.time.RegularTimePeriod var14 = var12.next();
//     long var15 = var12.getFirstMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139766642L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139766642L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 1417420800000L);
// 
//   }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(12, 0, (-565));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(12);
    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var6);
    org.jfree.data.general.SeriesChangeEvent var8 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var6);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
    int var15 = var12.compare((org.jfree.data.time.SerialDate)var14);
    org.jfree.data.time.SerialDate var16 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
    int var21 = var18.compare((org.jfree.data.time.SerialDate)var20);
    boolean var22 = var12.isOnOrAfter((org.jfree.data.time.SerialDate)var20);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var28 = new org.jfree.data.time.SpreadsheetDate(31);
    int var29 = var26.compare((org.jfree.data.time.SerialDate)var28);
    org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var26);
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
    int var35 = var32.compare((org.jfree.data.time.SerialDate)var34);
    boolean var36 = var26.isOnOrAfter((org.jfree.data.time.SerialDate)var34);
    int var37 = var26.getDayOfMonth();
    boolean var39 = var6.isInRange(var23, (org.jfree.data.time.SerialDate)var26, 0);
    boolean var40 = var3.isOnOrBefore(var23);
    org.jfree.data.time.SerialDate var41 = var1.getEndOfCurrentMonth(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var43 = var23.getNearestDayOfWeek((-565));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SerialDate var6 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var2);
    int var7 = var2.getDayOfWeek();
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    org.jfree.data.time.SerialDate var13 = var2.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var11);
    org.jfree.data.time.SpreadsheetDate var15 = new org.jfree.data.time.SpreadsheetDate(31);
    int var16 = var15.getMonth();
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    int var22 = var19.compare((org.jfree.data.time.SerialDate)var21);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var19);
    org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var27 = new org.jfree.data.time.SpreadsheetDate(31);
    int var28 = var25.compare((org.jfree.data.time.SerialDate)var27);
    boolean var29 = var19.isOnOrAfter((org.jfree.data.time.SerialDate)var27);
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var33 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SpreadsheetDate var36 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var37 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var36);
    org.jfree.data.general.SeriesChangeEvent var38 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var36);
    boolean var39 = var27.isInRange(var33, (org.jfree.data.time.SerialDate)var36);
    int var40 = var36.getDayOfMonth();
    boolean var41 = var15.isOnOrAfter((org.jfree.data.time.SerialDate)var36);
    boolean var42 = var11.isOn((org.jfree.data.time.SerialDate)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var44 = var15.getPreviousDayOfWeek(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     long var6 = var0.getMiddleMillisecond();
//     long var7 = var0.getMiddleMillisecond();
//     long var8 = var0.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var9 = var0.next();
//     java.util.Calendar var10 = null;
//     long var11 = var0.getMiddleMillisecond(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139766686L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139766686L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139766686L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139766686L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139766686L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1419139766686L);
// 
//   }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     var2.fireSeriesChanged();
//     int var6 = var2.getMaximumItemCount();
//     long var7 = var2.getMaximumItemAge();
//     org.jfree.data.time.FixedMillisecond var11 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var12 = null;
//     long var13 = var11.getFirstMillisecond(var12);
//     java.util.Calendar var14 = null;
//     long var15 = var11.getMiddleMillisecond(var14);
//     java.util.Date var16 = var11.getTime();
//     org.jfree.data.time.TimeSeries var20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var21 = var20.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var16, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var21);
//     java.lang.Class var23 = org.jfree.data.time.RegularTimePeriod.downsize(var21);
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var21);
//     java.lang.Class var26 = null;
//     org.jfree.data.time.TimeSeries var27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var26);
//     org.jfree.data.time.FixedMillisecond var28 = new org.jfree.data.time.FixedMillisecond();
//     var27.delete((org.jfree.data.time.RegularTimePeriod)var28);
//     java.util.Calendar var30 = null;
//     long var31 = var28.getMiddleMillisecond(var30);
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var28, var32);
//     java.lang.Class var35 = null;
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var35);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     java.lang.Class var39 = null;
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var39);
//     java.lang.Class var41 = var40.getTimePeriodClass();
//     java.util.Collection var42 = var36.getTimePeriodsUniqueToOtherSeries(var40);
//     boolean var43 = var28.equals((java.lang.Object)var42);
//     org.jfree.data.time.TimeSeriesDataItem var45 = var24.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var28, (java.lang.Number)1900);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var2.update((org.jfree.data.time.RegularTimePeriod)var28, (java.lang.Number)1419139749232L);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 9223372036854775807L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 1419139766695L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 1419139766695L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 1419139766696L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
// 
//   }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }


    int var1 = org.jfree.data.time.SerialDate.leapYearCount((-460));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-572));

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    int var7 = var4.compare((org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
    boolean var14 = var4.isOnOrAfter((org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SerialDate var15 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
    int var21 = var19.getMonth();
    boolean var22 = var4.isOnOrAfter((org.jfree.data.time.SerialDate)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.getNearestDayOfWeek(100, (org.jfree.data.time.SerialDate)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekInMonthToString(28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SerialDate.weekInMonthToString(): invalid code."+ "'", var1.equals("SerialDate.weekInMonthToString(): invalid code."));

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    org.jfree.data.time.SerialDate var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var2 = org.jfree.data.time.SerialDate.getNearestDayOfWeek(100, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    var2.fireSeriesChanged();
    java.lang.Class var5 = var2.getTimePeriodClass();
    boolean var6 = var2.getNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var7 = var2.getNextTimePeriod();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.relativeToString(30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ERROR : Relative To String"+ "'", var1.equals("ERROR : Relative To String"));

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("February");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test80() {}
//   public void test80() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Month var20 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Month var21 = new org.jfree.data.time.Month(var16);
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var16, "Nearest", "org.jfree.data.general.SeriesException: Time", var24);
//     var25.setDescription("March");
//     java.lang.Class var29 = null;
//     org.jfree.data.time.TimeSeries var30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var29);
//     java.lang.Class var31 = var30.getTimePeriodClass();
//     java.util.List var32 = var30.getItems();
//     org.jfree.data.time.Year var33 = new org.jfree.data.time.Year();
//     var30.delete((org.jfree.data.time.RegularTimePeriod)var33);
//     var25.add((org.jfree.data.time.RegularTimePeriod)var33, 10.0d);
// 
//   }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidWeekInMonthCode((-453));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    java.lang.String var5 = var2.getRangeDescription();
    java.beans.PropertyChangeListener var6 = null;
    var2.removePropertyChangeListener(var6);
    java.util.Collection var8 = var2.getTimePeriods();
    int var9 = var2.getMaximumItemCount();
    var2.clear();
    java.lang.String var11 = var2.getDomainDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Value"+ "'", var5.equals("Value"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Time"+ "'", var11.equals("Time"));

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.relativeToString(2014);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ERROR : Relative To String"+ "'", var1.equals("ERROR : Relative To String"));

  }

  public void test84() {}
//   public void test84() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     org.jfree.data.general.SeriesChangeEvent var2 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var1);
//     java.lang.Class var4 = null;
//     org.jfree.data.time.TimeSeries var5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var4);
//     int var6 = var5.getItemCount();
//     java.lang.Class var8 = null;
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var8);
//     org.jfree.data.time.FixedMillisecond var10 = new org.jfree.data.time.FixedMillisecond();
//     var9.delete((org.jfree.data.time.RegularTimePeriod)var10);
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     var14.delete((org.jfree.data.time.RegularTimePeriod)var15);
//     java.lang.Number var17 = var9.getValue((org.jfree.data.time.RegularTimePeriod)var15);
//     org.jfree.data.time.TimeSeriesDataItem var18 = var5.getDataItem((org.jfree.data.time.RegularTimePeriod)var15);
//     java.util.Date var19 = var15.getStart();
//     long var20 = var15.getSerialIndex();
//     org.jfree.data.time.TimeSeriesDataItem var22 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var15, 100.0d);
//     java.lang.Number var23 = var22.getValue();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.add(var22, false);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 1419139767191L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var23 + "' != '" + 100.0d+ "'", var23.equals(100.0d));
// 
//   }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month((-572), 31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }


    int var1 = org.jfree.data.time.SerialDate.stringToWeekdayCode("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:19 PST 2014]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    boolean var1 = org.jfree.data.time.SerialDate.isLeapYear(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidMonthCode(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.delete(29, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test90() {}
//   public void test90() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     java.lang.String var9 = var8.getRangeDescription();
//     org.jfree.data.general.SeriesChangeListener var10 = null;
//     var8.addChangeListener(var10);
//     org.jfree.data.time.Year var12 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var13 = var12.previous();
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     boolean var23 = var12.equals((java.lang.Object)var21);
//     org.jfree.data.time.RegularTimePeriod var24 = var12.previous();
//     org.jfree.data.time.TimeSeriesDataItem var25 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     var8.removeAgedItems(false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139767706L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "Value"+ "'", var9.equals("Value"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
// 
//   }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var5 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.general.SeriesChangeEvent var6 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var4);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
//     org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var19 = var16.compare((org.jfree.data.time.SerialDate)var18);
//     boolean var20 = var10.isOnOrAfter((org.jfree.data.time.SerialDate)var18);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
//     org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var33 = var30.compare((org.jfree.data.time.SerialDate)var32);
//     boolean var34 = var24.isOnOrAfter((org.jfree.data.time.SerialDate)var32);
//     int var35 = var24.getDayOfMonth();
//     boolean var37 = var4.isInRange(var21, (org.jfree.data.time.SerialDate)var24, 0);
//     boolean var38 = var1.isOnOrBefore(var21);
//     java.lang.String var39 = var1.toString();
//     org.jfree.data.time.Day var40 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var1);
//     org.jfree.data.time.SpreadsheetDate var42 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var45 = var42.compare((org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var49 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var51 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var52 = var49.compare((org.jfree.data.time.SerialDate)var51);
//     org.jfree.data.time.SerialDate var53 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var49);
//     org.jfree.data.time.SpreadsheetDate var55 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var58 = var55.compare((org.jfree.data.time.SerialDate)var57);
//     boolean var59 = var49.isOnOrAfter((org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SerialDate var60 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var49);
//     org.jfree.data.time.SpreadsheetDate var62 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var64 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var65 = var62.compare((org.jfree.data.time.SerialDate)var64);
//     int var66 = var64.getMonth();
//     boolean var67 = var49.isOnOrAfter((org.jfree.data.time.SerialDate)var64);
//     int var68 = var64.getDayOfMonth();
//     int var69 = var64.toSerial();
//     boolean var71 = var1.isInRange((org.jfree.data.time.SerialDate)var44, (org.jfree.data.time.SerialDate)var64, 1900);
//     boolean var73 = var64.equals((java.lang.Object)1419139755791L);
//     org.jfree.data.time.SerialDate var74 = null;
//     int var75 = var64.compare(var74);
// 
//   }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
    var2.fireSeriesChanged();
    java.lang.Class var7 = null;
    org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
    java.lang.Class var9 = var8.getTimePeriodClass();
    java.lang.Class var11 = null;
    org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
    java.lang.Class var13 = var12.getTimePeriodClass();
    java.util.Collection var14 = var8.getTimePeriodsUniqueToOtherSeries(var12);
    var8.clear();
    org.jfree.data.time.TimeSeries var16 = var2.addAndOrUpdate(var8);
    var8.setMaximumItemAge(1419139750864L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     java.lang.Class var12 = var11.getTimePeriodClass();
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     java.lang.Class var16 = var15.getTimePeriodClass();
//     java.util.Collection var17 = var11.getTimePeriodsUniqueToOtherSeries(var15);
//     boolean var18 = var3.equals((java.lang.Object)var17);
//     java.util.Calendar var19 = null;
//     long var20 = var3.getMiddleMillisecond(var19);
//     org.jfree.data.time.RegularTimePeriod var21 = var3.previous();
//     java.util.Calendar var22 = null;
//     long var23 = var21.getMiddleMillisecond(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139767767L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 1419139767767L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 1419139767766L);
// 
//   }

  public void test94() {}
//   public void test94() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.general.SeriesChangeEvent var1 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var0);
//     java.lang.Object var2 = var1.getSource();
//     java.lang.String var3 = var1.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:27 PST 2014]"+ "'", var3.equals("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:27 PST 2014]"));
// 
//   }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    int var8 = var3.getDayOfWeek();
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SerialDate var14 = var3.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var12);
    int var15 = var12.getMonth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var16 = org.jfree.data.time.SerialDate.getFollowingDayOfWeek(1900, (org.jfree.data.time.SerialDate)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);

  }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var12);
//     org.jfree.data.time.TimeSeries var14 = var8.addAndOrUpdate(var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     java.util.List var19 = var17.getItems();
//     org.jfree.data.time.Year var20 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var21 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var22 = var21.previous();
//     org.jfree.data.time.TimeSeries var23 = var17.createCopy((org.jfree.data.time.RegularTimePeriod)var20, var22);
//     long var24 = var20.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var25 = var20.next();
//     long var26 = var20.getLastMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var28 = var13.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var20, 100.0d);
//     org.jfree.data.time.RegularTimePeriod var30 = var13.getTimePeriod(0);
//     org.jfree.data.general.SeriesChangeListener var31 = null;
//     var13.addChangeListener(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    java.lang.String var2 = org.jfree.data.time.SerialDate.monthCodeToString(10, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "October"+ "'", var2.equals("October"));

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     org.jfree.data.time.SerialDate var5 = org.jfree.data.time.SerialDate.createInstance(var3);
//     java.util.TimeZone var6 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var7 = new org.jfree.data.time.Day(var3, var6);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139767999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
// 
//   }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekInMonthToString(31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SerialDate.weekInMonthToString(): invalid code."+ "'", var1.equals("SerialDate.weekInMonthToString(): invalid code."));

  }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.String var20 = var19.toString();
//     long var21 = var19.getFirstMillisecond();
//     org.jfree.data.time.Year var22 = var19.getYear();
//     long var23 = var22.getSerialIndex();
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     java.lang.Class var27 = var26.getTimePeriodClass();
//     java.util.List var28 = var26.getItems();
//     java.lang.String var29 = var26.getRangeDescription();
//     java.beans.PropertyChangeListener var30 = null;
//     var26.removePropertyChangeListener(var30);
//     java.util.Collection var32 = var26.getTimePeriods();
//     var26.removeAgedItems(false);
//     java.lang.Class var36 = null;
//     org.jfree.data.time.TimeSeries var37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var36);
//     org.jfree.data.time.FixedMillisecond var38 = new org.jfree.data.time.FixedMillisecond();
//     var37.delete((org.jfree.data.time.RegularTimePeriod)var38);
//     java.util.Calendar var40 = null;
//     long var41 = var38.getMiddleMillisecond(var40);
//     java.lang.Class var42 = null;
//     org.jfree.data.time.TimeSeries var43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var38, var42);
//     java.lang.Class var45 = null;
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var45);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     java.lang.Class var49 = null;
//     org.jfree.data.time.TimeSeries var50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var49);
//     java.lang.Class var51 = var50.getTimePeriodClass();
//     java.util.Collection var52 = var46.getTimePeriodsUniqueToOtherSeries(var50);
//     boolean var53 = var38.equals((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeriesDataItem var55 = var26.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var38, (-1.0d));
//     java.util.Date var56 = var38.getTime();
//     int var57 = var22.compareTo((java.lang.Object)var38);
//     java.util.Calendar var58 = null;
//     long var59 = var22.getLastMillisecond(var58);
// 
//   }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    int var4 = var1.compare((org.jfree.data.time.SerialDate)var3);
    int var5 = var3.getDayOfMonth();
    int var6 = var3.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
    int var12 = var10.getMonth();
    boolean var13 = var3.isAfter((org.jfree.data.time.SerialDate)var10);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
    int var21 = var18.compare((org.jfree.data.time.SerialDate)var20);
    org.jfree.data.time.SerialDate var22 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
    int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
    boolean var28 = var18.isOnOrAfter((org.jfree.data.time.SerialDate)var26);
    int var29 = var18.getDayOfMonth();
    org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.addDays((-1), (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addDays(4, var30);
    org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var36 = new org.jfree.data.time.SpreadsheetDate(31);
    int var37 = var34.compare((org.jfree.data.time.SerialDate)var36);
    org.jfree.data.time.SerialDate var38 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var34);
    int var39 = var34.getDayOfWeek();
    org.jfree.data.time.SpreadsheetDate var41 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var43 = new org.jfree.data.time.SpreadsheetDate(31);
    int var44 = var41.compare((org.jfree.data.time.SerialDate)var43);
    org.jfree.data.time.SerialDate var45 = var34.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var43);
    org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
    int var48 = var47.getMonth();
    org.jfree.data.time.SpreadsheetDate var51 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var53 = new org.jfree.data.time.SpreadsheetDate(31);
    int var54 = var51.compare((org.jfree.data.time.SerialDate)var53);
    org.jfree.data.time.SerialDate var55 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var51);
    org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var59 = new org.jfree.data.time.SpreadsheetDate(31);
    int var60 = var57.compare((org.jfree.data.time.SerialDate)var59);
    boolean var61 = var51.isOnOrAfter((org.jfree.data.time.SerialDate)var59);
    org.jfree.data.time.SpreadsheetDate var64 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var65 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var64);
    org.jfree.data.time.SpreadsheetDate var68 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var69 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var68);
    org.jfree.data.general.SeriesChangeEvent var70 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var68);
    boolean var71 = var59.isInRange(var65, (org.jfree.data.time.SerialDate)var68);
    int var72 = var68.getDayOfMonth();
    boolean var73 = var47.isOnOrAfter((org.jfree.data.time.SerialDate)var68);
    boolean var74 = var43.isOn((org.jfree.data.time.SerialDate)var47);
    org.jfree.data.time.SerialDate var75 = var30.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var43);
    boolean var76 = var3.isAfter(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test102() {}
//   public void test102() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     java.lang.String var9 = var8.getRangeDescription();
//     org.jfree.data.general.SeriesChangeListener var10 = null;
//     var8.addChangeListener(var10);
//     boolean var12 = var8.isEmpty();
//     var8.setDescription("");
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Class var28 = null;
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var28);
//     org.jfree.data.time.FixedMillisecond var30 = new org.jfree.data.time.FixedMillisecond();
//     var29.delete((org.jfree.data.time.RegularTimePeriod)var30);
//     java.lang.Number var32 = var24.getValue((org.jfree.data.time.RegularTimePeriod)var30);
//     long var33 = var30.getFirstMillisecond();
//     boolean var34 = var17.equals((java.lang.Object)var33);
//     org.jfree.data.time.SpreadsheetDate var36 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var39 = var36.compare((org.jfree.data.time.SerialDate)var38);
//     boolean var40 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var36);
//     org.jfree.data.time.Day var41 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var36);
//     var8.add((org.jfree.data.time.RegularTimePeriod)var41, (java.lang.Number)1419139750932L);
// 
//   }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    org.jfree.data.general.SeriesException var1 = new org.jfree.data.general.SeriesException("");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    java.lang.Throwable[] var3 = var1.getSuppressed();
    org.jfree.data.general.SeriesException var5 = new org.jfree.data.general.SeriesException("Time");
    var1.addSuppressed((java.lang.Throwable)var5);
    org.jfree.data.general.SeriesException var8 = new org.jfree.data.general.SeriesException("Time");
    var5.addSuppressed((java.lang.Throwable)var8);
    java.lang.String var10 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "org.jfree.data.general.SeriesException: Time"+ "'", var10.equals("org.jfree.data.general.SeriesException: Time"));

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.beans.PropertyChangeListener var4 = null;
    var2.addPropertyChangeListener(var4);
    long var6 = var2.getMaximumItemAge();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9223372036854775807L);

  }

  public void test105() {}
//   public void test105() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var2 = var1.getMonth();
//     org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var7 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var8 = var5.compare((org.jfree.data.time.SerialDate)var7);
//     org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var5);
//     org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var13 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var14 = var11.compare((org.jfree.data.time.SerialDate)var13);
//     boolean var15 = var5.isOnOrAfter((org.jfree.data.time.SerialDate)var13);
//     org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var18);
//     org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var22);
//     org.jfree.data.general.SeriesChangeEvent var24 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var22);
//     boolean var25 = var13.isInRange(var19, (org.jfree.data.time.SerialDate)var22);
//     int var26 = var22.getDayOfMonth();
//     boolean var27 = var1.isOnOrAfter((org.jfree.data.time.SerialDate)var22);
//     java.lang.String var28 = var22.toString();
//     java.lang.Class var30 = null;
//     org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var30);
//     java.lang.Class var32 = var31.getTimePeriodClass();
//     java.util.List var33 = var31.getItems();
//     org.jfree.data.time.Year var34 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var35 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var36 = var35.previous();
//     org.jfree.data.time.TimeSeries var37 = var31.createCopy((org.jfree.data.time.RegularTimePeriod)var34, var36);
//     long var38 = var34.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var39 = var34.next();
//     long var40 = var34.getFirstMillisecond();
//     long var41 = var34.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var42 = var34.next();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       int var43 = var22.compareTo((java.lang.Object)var34);
//       fail("Expected exception of type java.lang.ClassCastException");
//     } catch (java.lang.ClassCastException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var28 + "' != '" + "30-January-1900"+ "'", var28.equals("30-January-1900"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 2014L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
// 
//   }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }


    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var7 = new org.jfree.data.time.SpreadsheetDate(31);
    int var8 = var5.compare((org.jfree.data.time.SerialDate)var7);
    org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var13 = new org.jfree.data.time.SpreadsheetDate(31);
    int var14 = var11.compare((org.jfree.data.time.SerialDate)var13);
    boolean var15 = var5.isOnOrAfter((org.jfree.data.time.SerialDate)var13);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var22);
    org.jfree.data.general.SeriesChangeEvent var24 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var22);
    boolean var25 = var13.isInRange(var19, (org.jfree.data.time.SerialDate)var22);
    org.jfree.data.time.SerialDate var26 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var22);
    int var27 = var22.getMonth();
    int var28 = var22.getMonth();
    org.jfree.data.time.SerialDate var29 = org.jfree.data.time.SerialDate.addMonths(31, (org.jfree.data.time.SerialDate)var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.addYears((-565), (org.jfree.data.time.SerialDate)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekdayCodeToString(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Wednesday"+ "'", var1.equals("Wednesday"));

  }

  public void test108() {}
//   public void test108() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.lang.String var1 = var0.toString();
//     java.lang.String var2 = var0.toString();
//     java.lang.Object var3 = null;
//     int var4 = var0.compareTo(var3);
//     org.jfree.data.time.RegularTimePeriod var5 = var0.previous();
//     org.jfree.data.time.TimeSeriesDataItem var7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, 100.0d);
//     java.util.Calendar var8 = null;
//     long var9 = var0.getFirstMillisecond(var8);
// 
//   }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate((-460));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = org.jfree.data.time.SerialDate.monthCodeToString(13, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var16 = var3.getPreviousDayOfWeek(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }


    boolean var1 = org.jfree.data.time.SerialDate.isLeapYear(31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test113() {}
//   public void test113() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     int var17 = var12.compareTo((java.lang.Object)"Value");
//     long var18 = var12.getLastMillisecond();
//     java.util.Calendar var19 = null;
//     long var20 = var12.getMiddleMillisecond(var19);
//     long var21 = var12.getSerialIndex();
//     long var22 = var12.getSerialIndex();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 1419139768827L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 1419139768827L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 1419139768827L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139768827L);
// 
//   }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
    var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
    java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
    java.util.Date var16 = var12.getStart();
    org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
    org.jfree.data.time.Month var20 = new org.jfree.data.time.Month(var16);
    org.jfree.data.time.Month var21 = new org.jfree.data.time.Month(var16);
    java.lang.Class var24 = null;
    org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var16, "Nearest", "org.jfree.data.general.SeriesException: Time", var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var25.delete(10, 2014);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.lang.String var1 = var0.toString();
//     long var2 = var0.getLastMillisecond();
//     int var3 = var0.getDayOfMonth();
//     int var4 = var0.getYear();
//     org.jfree.data.time.Day var5 = new org.jfree.data.time.Day();
//     java.lang.String var6 = var5.toString();
//     long var7 = var5.getLastMillisecond();
//     int var8 = var5.getDayOfMonth();
//     boolean var9 = var0.equals((java.lang.Object)var5);
//     java.lang.Number var10 = null;
//     org.jfree.data.time.TimeSeriesDataItem var11 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var5, var10);
//     java.lang.String var12 = var5.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "20-December-2014"+ "'", var1.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419148799999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "20-December-2014"+ "'", var6.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419148799999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var12 + "' != '" + "20-December-2014"+ "'", var12.equals("20-December-2014"));
// 
//   }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.String var4 = var2.getDescription();
    java.beans.PropertyChangeListener var5 = null;
    var2.removePropertyChangeListener(var5);
    int var7 = var2.getItemCount();
    java.lang.Class var9 = null;
    org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
    java.lang.Class var11 = var10.getTimePeriodClass();
    java.lang.Class var13 = null;
    org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
    java.lang.Class var15 = var14.getTimePeriodClass();
    java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
    org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
    java.lang.Object var18 = var17.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     org.jfree.data.time.TimeSeriesDataItem var6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, 10.0d);
//     java.lang.Object var7 = var6.clone();
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var15 = var12.compare((org.jfree.data.time.SerialDate)var14);
//     org.jfree.data.time.SerialDate var16 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var12);
//     org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var21 = var18.compare((org.jfree.data.time.SerialDate)var20);
//     boolean var22 = var12.isOnOrAfter((org.jfree.data.time.SerialDate)var20);
//     int var23 = var12.getDayOfMonth();
//     org.jfree.data.time.SerialDate var24 = org.jfree.data.time.SerialDate.addDays((-1), (org.jfree.data.time.SerialDate)var12);
//     org.jfree.data.time.SerialDate var25 = org.jfree.data.time.SerialDate.addDays(4, var24);
//     boolean var26 = var6.equals((java.lang.Object)var24);
//     int var28 = var6.compareTo((java.lang.Object)1419139757855L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139768914L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139768914L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 1);
// 
//   }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     int var24 = var13.getMaximumItemCount();
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var27 = var26.getTimePeriodClass();
//     int var28 = var26.getItemCount();
//     var26.setRangeDescription("Oct");
//     org.jfree.data.time.FixedMillisecond var31 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var32 = null;
//     long var33 = var31.getFirstMillisecond(var32);
//     java.util.Calendar var34 = null;
//     long var35 = var31.getMiddleMillisecond(var34);
//     java.util.Date var36 = var31.getTime();
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var41 = var40.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var36, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var41);
//     org.jfree.data.time.Month var43 = new org.jfree.data.time.Month();
//     var42.setKey((java.lang.Comparable)var43);
//     long var45 = var43.getFirstMillisecond();
//     long var46 = var43.getSerialIndex();
//     int var47 = var43.getYearValue();
//     int var48 = var26.getIndex((org.jfree.data.time.RegularTimePeriod)var43);
//     int var49 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var43);
//     java.lang.Class var51 = null;
//     org.jfree.data.time.TimeSeries var52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var51);
//     java.lang.Class var53 = var52.getTimePeriodClass();
//     java.util.List var54 = var52.getItems();
//     org.jfree.data.time.Year var55 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var56 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var57 = var56.previous();
//     org.jfree.data.time.TimeSeries var58 = var52.createCopy((org.jfree.data.time.RegularTimePeriod)var55, var57);
//     java.lang.Class var62 = null;
//     org.jfree.data.time.TimeSeries var63 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var62);
//     org.jfree.data.time.TimeSeries var64 = var58.addAndOrUpdate(var63);
//     java.lang.Class var66 = null;
//     org.jfree.data.time.TimeSeries var67 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var66);
//     java.lang.Class var68 = var67.getTimePeriodClass();
//     java.util.List var69 = var67.getItems();
//     org.jfree.data.time.Year var70 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var71 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var72 = var71.previous();
//     org.jfree.data.time.TimeSeries var73 = var67.createCopy((org.jfree.data.time.RegularTimePeriod)var70, var72);
//     long var74 = var70.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var75 = var70.next();
//     long var76 = var70.getLastMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var78 = var63.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var70, 100.0d);
//     java.util.Date var79 = var70.getStart();
//     int var80 = var43.compareTo((java.lang.Object)var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139768947L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 1419139768950L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 1419139768950L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var73);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var74 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var76 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var80 == 1);
// 
//   }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day((-453), 20, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test120() {}
//   public void test120() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     java.util.Date var10 = var5.getStart();
//     org.jfree.data.time.RegularTimePeriod var11 = var5.previous();
//     java.util.Calendar var12 = null;
//     var5.peg(var12);
// 
//   }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     java.lang.String var17 = var10.getDomainDescription();
//     var10.setKey((java.lang.Comparable)1419139748031L);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var21 = null;
//     var20.peg(var21);
//     var10.setKey((java.lang.Comparable)var20);
//     int var24 = var10.getMaximumItemCount();
//     var10.setRangeDescription("");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeries var29 = var10.createCopy(100, 12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139769232L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "Time"+ "'", var17.equals("Time"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 2147483647);
// 
//   }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
    int var6 = var4.getDayOfMonth();
    java.lang.String var7 = var4.getDescription();
    var4.setDescription("");
    org.jfree.data.time.SerialDate var10 = org.jfree.data.time.SerialDate.getFollowingDayOfWeek(3, (org.jfree.data.time.SerialDate)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var12 = var10.getPreviousDayOfWeek(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    int var14 = var3.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
    org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
    int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
    boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
    int var28 = var17.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
    int var35 = var32.compare((org.jfree.data.time.SerialDate)var34);
    org.jfree.data.time.SerialDate var36 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
    int var41 = var38.compare((org.jfree.data.time.SerialDate)var40);
    boolean var42 = var32.isOnOrAfter((org.jfree.data.time.SerialDate)var40);
    org.jfree.data.time.SerialDate var43 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SpreadsheetDate var45 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
    int var48 = var45.compare((org.jfree.data.time.SerialDate)var47);
    int var49 = var47.getMonth();
    boolean var50 = var32.isOnOrAfter((org.jfree.data.time.SerialDate)var47);
    boolean var51 = var3.isInRange((org.jfree.data.time.SerialDate)var17, (org.jfree.data.time.SerialDate)var32);
    org.jfree.data.time.SpreadsheetDate var54 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var56 = new org.jfree.data.time.SpreadsheetDate(31);
    int var57 = var54.compare((org.jfree.data.time.SerialDate)var56);
    org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var54);
    org.jfree.data.time.Day var60 = new org.jfree.data.time.Day();
    org.jfree.data.time.SerialDate var61 = var60.getSerialDate();
    org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.getNearestDayOfWeek(3, var61);
    boolean var63 = var32.isInRange((org.jfree.data.time.SerialDate)var54, var62);
    int var64 = var54.getDayOfWeek();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var65 = org.jfree.data.time.SerialDate.getFollowingDayOfWeek(2014, (org.jfree.data.time.SerialDate)var54);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 3);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day(30, 31, (-459));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    var2.setKey((java.lang.Comparable)1419139755856L);
    var2.setMaximumItemCount(31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    int var4 = var1.compare((org.jfree.data.time.SerialDate)var3);
    int var5 = var3.getYYYY();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var7 = var3.getPreviousDayOfWeek(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1900);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    int var9 = var6.getMaximumItemCount();
    org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
    org.jfree.data.time.RegularTimePeriod var11 = var10.next();
    org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
    java.lang.Class var14 = null;
    org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
    int var16 = var15.getItemCount();
    java.lang.Class var18 = null;
    org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
    org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
    var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.Class var23 = null;
    org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
    org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
    var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
    java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
    org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
    int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
    org.jfree.data.time.RegularTimePeriod var30 = var25.next();
    org.jfree.data.time.TimeSeriesDataItem var32 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var25, (java.lang.Number)(byte)(-1));
    var32.setValue((java.lang.Number)1419139747950L);
    var32.setValue((java.lang.Number)1419139764798L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    int var2 = var1.getMonth();
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var7 = new org.jfree.data.time.SpreadsheetDate(31);
    int var8 = var5.compare((org.jfree.data.time.SerialDate)var7);
    org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var13 = new org.jfree.data.time.SpreadsheetDate(31);
    int var14 = var11.compare((org.jfree.data.time.SerialDate)var13);
    boolean var15 = var5.isOnOrAfter((org.jfree.data.time.SerialDate)var13);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var22);
    org.jfree.data.general.SeriesChangeEvent var24 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var22);
    boolean var25 = var13.isInRange(var19, (org.jfree.data.time.SerialDate)var22);
    int var26 = var22.getDayOfMonth();
    boolean var27 = var1.isOnOrAfter((org.jfree.data.time.SerialDate)var22);
    java.lang.String var28 = var22.toString();
    int var29 = var22.getDayOfMonth();
    int var30 = var22.getDayOfWeek();
    org.jfree.data.time.Day var31 = new org.jfree.data.time.Day();
    org.jfree.data.time.SerialDate var32 = var31.getSerialDate();
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var36 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var35);
    org.jfree.data.general.SeriesChangeEvent var37 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var35);
    org.jfree.data.time.SpreadsheetDate var41 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var43 = new org.jfree.data.time.SpreadsheetDate(31);
    int var44 = var41.compare((org.jfree.data.time.SerialDate)var43);
    org.jfree.data.time.SerialDate var45 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var41);
    org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var49 = new org.jfree.data.time.SpreadsheetDate(31);
    int var50 = var47.compare((org.jfree.data.time.SerialDate)var49);
    boolean var51 = var41.isOnOrAfter((org.jfree.data.time.SerialDate)var49);
    org.jfree.data.time.SerialDate var52 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var41);
    org.jfree.data.time.SpreadsheetDate var55 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
    int var58 = var55.compare((org.jfree.data.time.SerialDate)var57);
    org.jfree.data.time.SerialDate var59 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var55);
    org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var63 = new org.jfree.data.time.SpreadsheetDate(31);
    int var64 = var61.compare((org.jfree.data.time.SerialDate)var63);
    boolean var65 = var55.isOnOrAfter((org.jfree.data.time.SerialDate)var63);
    int var66 = var55.getDayOfMonth();
    boolean var68 = var35.isInRange(var52, (org.jfree.data.time.SerialDate)var55, 0);
    boolean var70 = var22.isInRange(var32, var52, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var72 = var32.getNearestDayOfWeek((-460));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "30-January-1900"+ "'", var28.equals("30-January-1900"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = org.jfree.data.time.SerialDate.monthCodeToQuarter(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test130() {}
//   public void test130() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     java.lang.String var9 = var6.getDescription();
//     org.jfree.data.time.TimeSeries var10 = null;
//     org.jfree.data.time.TimeSeries var11 = var6.addAndOrUpdate(var10);
// 
//   }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = org.jfree.data.time.SerialDate.monthCodeToString(31, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test132() {}
//   public void test132() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.general.SeriesException var11 = new org.jfree.data.general.SeriesException("Time");
//     java.lang.String var12 = var11.toString();
//     boolean var13 = var6.equals((java.lang.Object)var11);
//     var6.setKey((java.lang.Comparable)1419139761638L);
//     var6.removeAgedItems(0L, false);
// 
//   }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.createInstance(2147483647, 0, (-459));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test134() {}
//   public void test134() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     org.jfree.data.time.Year var4 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.util.List var10 = var8.getItems();
//     org.jfree.data.time.Year var11 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var13 = var12.previous();
//     org.jfree.data.time.TimeSeries var14 = var8.createCopy((org.jfree.data.time.RegularTimePeriod)var11, var13);
//     boolean var15 = var4.equals((java.lang.Object)var13);
//     int var16 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     org.jfree.data.time.FixedMillisecond var22 = new org.jfree.data.time.FixedMillisecond();
//     var21.delete((org.jfree.data.time.RegularTimePeriod)var22);
//     java.util.Calendar var24 = null;
//     long var25 = var22.getMiddleMillisecond(var24);
//     java.lang.Class var26 = null;
//     org.jfree.data.time.TimeSeries var27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var22, var26);
//     var27.setDescription("");
//     org.jfree.data.time.TimeSeries var30 = var18.addAndOrUpdate(var27);
//     var18.setDomainDescription("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:09 PST 2014]");
//     java.util.Collection var33 = var18.getTimePeriods();
//     java.lang.Class var34 = var18.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var16, var34);
//     org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var41 = var38.compare((org.jfree.data.time.SerialDate)var40);
//     org.jfree.data.time.SerialDate var42 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var38);
//     int var43 = var38.getDayOfWeek();
//     java.util.Date var44 = var38.toDate();
//     java.util.TimeZone var45 = null;
//     org.jfree.data.time.RegularTimePeriod var46 = org.jfree.data.time.RegularTimePeriod.createInstance(var34, var44, var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 1419139769704L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var46);
// 
//   }

  public void test135() {}
//   public void test135() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getYear();
//     long var2 = var0.getLastMillisecond();
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
// 
//   }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidWeekdayCode(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test137() {}
//   public void test137() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
//     boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
//     int var38 = var12.compareTo((java.lang.Object)var25);
//     org.jfree.data.time.FixedMillisecond var42 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var43 = null;
//     long var44 = var42.getFirstMillisecond(var43);
//     java.util.Calendar var45 = null;
//     long var46 = var42.getMiddleMillisecond(var45);
//     java.util.Date var47 = var42.getTime();
//     org.jfree.data.time.TimeSeries var51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var52 = var51.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var47, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var52);
//     java.lang.Class var54 = org.jfree.data.time.RegularTimePeriod.downsize(var52);
//     org.jfree.data.time.TimeSeries var55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var52);
//     java.lang.Class var57 = null;
//     org.jfree.data.time.TimeSeries var58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var57);
//     java.lang.Class var59 = var58.getTimePeriodClass();
//     java.util.List var60 = var58.getItems();
//     org.jfree.data.time.Year var61 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var62 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var63 = var62.previous();
//     org.jfree.data.time.TimeSeries var64 = var58.createCopy((org.jfree.data.time.RegularTimePeriod)var61, var63);
//     long var65 = var61.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var66 = var61.next();
//     long var67 = var61.getFirstMillisecond();
//     int var68 = var55.getIndex((org.jfree.data.time.RegularTimePeriod)var61);
//     int var69 = var12.compareTo((java.lang.Object)var61);
//     java.util.Calendar var70 = null;
//     long var71 = var61.getLastMillisecond(var70);
// 
//   }

  public void test138() {}
//   public void test138() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     var8.setDescription("");
//     java.beans.PropertyChangeListener var11 = null;
//     var8.removePropertyChangeListener(var11);
//     java.lang.String var13 = var8.getRangeDescription();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var8.delete(12, 2014);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139769905L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "Value"+ "'", var13.equals("Value"));
// 
//   }

  public void test139() {}
//   public void test139() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var19 = null;
//     long var20 = var18.getFirstMillisecond(var19);
//     java.util.Calendar var21 = null;
//     long var22 = var18.getMiddleMillisecond(var21);
//     java.util.Date var23 = var18.getTime();
//     java.util.Calendar var24 = null;
//     var18.peg(var24);
//     org.jfree.data.time.TimeSeriesDataItem var27 = var14.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var18, 100.0d);
//     boolean var28 = var14.isEmpty();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 1419139769908L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139769908L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
// 
//   }

  public void test140() {}
//   public void test140() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }
// 
// 
//     org.jfree.data.time.Year var0 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     long var2 = var0.getFirstMillisecond();
//     java.util.Calendar var3 = null;
//     long var4 = var0.getLastMillisecond(var3);
// 
//   }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(0, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
    java.util.Collection var5 = var2.getTimePeriods();
    java.lang.Object var6 = var2.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.update(2147483647, (java.lang.Number)1419139747407L);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     java.lang.Class var19 = null;
//     org.jfree.data.time.TimeSeries var20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var19);
//     int var21 = var20.getItemCount();
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Class var28 = null;
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var28);
//     org.jfree.data.time.FixedMillisecond var30 = new org.jfree.data.time.FixedMillisecond();
//     var29.delete((org.jfree.data.time.RegularTimePeriod)var30);
//     java.lang.Number var32 = var24.getValue((org.jfree.data.time.RegularTimePeriod)var30);
//     org.jfree.data.time.TimeSeriesDataItem var33 = var20.getDataItem((org.jfree.data.time.RegularTimePeriod)var30);
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var37 = null;
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var37);
//     org.jfree.data.time.FixedMillisecond var39 = new org.jfree.data.time.FixedMillisecond();
//     var38.delete((org.jfree.data.time.RegularTimePeriod)var39);
//     java.util.Calendar var41 = null;
//     long var42 = var39.getMiddleMillisecond(var41);
//     java.lang.Class var43 = null;
//     org.jfree.data.time.TimeSeries var44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var39, var43);
//     var44.setDescription("");
//     org.jfree.data.time.TimeSeries var47 = var35.addAndOrUpdate(var44);
//     java.lang.String var48 = var44.getDescription();
//     var44.setDescription("2015");
//     org.jfree.data.time.TimeSeries var51 = var20.addAndOrUpdate(var44);
//     java.util.Collection var52 = var17.getTimePeriodsUniqueToOtherSeries(var20);
//     org.jfree.data.time.RegularTimePeriod var53 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var20.add(var53, (java.lang.Number)1419139764309L);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == 1419139769932L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
// 
//   }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
    int var6 = var4.getDayOfMonth();
    java.lang.String var7 = var4.getDescription();
    var4.setDescription("");
    org.jfree.data.time.SerialDate var10 = org.jfree.data.time.SerialDate.getFollowingDayOfWeek(3, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SpreadsheetDate var15 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
    int var18 = var15.compare((org.jfree.data.time.SerialDate)var17);
    org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var15);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    int var24 = var21.compare((org.jfree.data.time.SerialDate)var23);
    boolean var25 = var15.isOnOrAfter((org.jfree.data.time.SerialDate)var23);
    int var26 = var15.getDayOfMonth();
    org.jfree.data.time.SerialDate var27 = org.jfree.data.time.SerialDate.addDays((-1), (org.jfree.data.time.SerialDate)var15);
    org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addDays(4, var27);
    org.jfree.data.time.SerialDate var30 = var28.getNearestDayOfWeek(4);
    boolean var31 = var4.isBefore(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var33 = var4.getPreviousDayOfWeek((-452));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test145() {}
//   public void test145() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }
// 
// 
//     org.jfree.data.time.Year var1 = null;
//     org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(2, var1);
// 
//   }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     var10.clear();
//     var10.setMaximumItemCount(31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139770128L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
// 
//   }

  public void test147() {}
//   public void test147() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var16 = var15.previous();
//     java.util.Calendar var17 = null;
//     long var18 = var15.getMiddleMillisecond(var17);
//     org.jfree.data.time.RegularTimePeriod var19 = var15.previous();
//     java.util.Calendar var20 = null;
//     var15.peg(var20);
//     org.jfree.data.time.TimeSeriesDataItem var23 = var10.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var15, (java.lang.Number)1419139758374L);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var25 = var10.getDataItem(10);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139770257L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 1419139770258L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
// 
//   }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     org.jfree.data.time.TimeSeriesDataItem var7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, (-1.0d));
//     var7.setValue((java.lang.Number)100);
//     var7.setValue((java.lang.Number)1419139763686L);
//     org.jfree.data.time.Day var12 = new org.jfree.data.time.Day();
//     int var13 = var12.getYear();
//     int var14 = var12.getYear();
//     int var15 = var12.getDayOfMonth();
//     int var16 = var7.compareTo((java.lang.Object)var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139770259L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139770259L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == 1);
// 
//   }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     org.jfree.data.time.FixedMillisecond var67 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.general.SeriesChangeEvent var68 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var67);
//     java.lang.String var69 = var68.toString();
//     boolean var70 = var39.equals((java.lang.Object)var69);
//     long var71 = var39.getLastMillisecond();
//     java.util.Calendar var72 = null;
//     long var73 = var39.getLastMillisecond(var72);
// 
//   }

  public void test150() {}
//   public void test150() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     java.util.Date var10 = var5.getStart();
//     org.jfree.data.time.Month var11 = new org.jfree.data.time.Month(var10);
//     java.util.Calendar var12 = null;
//     long var13 = var11.getFirstMillisecond(var12);
// 
//   }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }


    org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("December 2014");
    int var2 = var1.getYearValue();
    int var3 = var1.getMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2014);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 12);

  }

  public void test152() {}
//   public void test152() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     long var10 = var5.getSerialIndex();
//     java.util.Date var11 = var5.getEnd();
//     java.util.TimeZone var12 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var13 = new org.jfree.data.time.Day(var11, var12);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 2014L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
// 
//   }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }


    int var1 = org.jfree.data.time.SerialDate.stringToWeekdayCode("org.jfree.data.general.SeriesException: Time");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var7 = var4.compare((org.jfree.data.time.SerialDate)var6);
//     org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
//     boolean var14 = var4.isOnOrAfter((org.jfree.data.time.SerialDate)var12);
//     int var15 = var4.getDayOfMonth();
//     org.jfree.data.time.SerialDate var16 = org.jfree.data.time.SerialDate.addDays((-1), (org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.time.SerialDate var17 = org.jfree.data.time.SerialDate.addDays(4, var16);
//     org.jfree.data.time.SerialDate var19 = var17.getNearestDayOfWeek(4);
//     org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var25 = var22.compare((org.jfree.data.time.SerialDate)var24);
//     org.jfree.data.time.SerialDate var26 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var22);
//     java.lang.Class var28 = null;
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var28);
//     org.jfree.data.time.FixedMillisecond var30 = new org.jfree.data.time.FixedMillisecond();
//     var29.delete((org.jfree.data.time.RegularTimePeriod)var30);
//     java.lang.Class var33 = null;
//     org.jfree.data.time.TimeSeries var34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var33);
//     org.jfree.data.time.FixedMillisecond var35 = new org.jfree.data.time.FixedMillisecond();
//     var34.delete((org.jfree.data.time.RegularTimePeriod)var35);
//     java.lang.Number var37 = var29.getValue((org.jfree.data.time.RegularTimePeriod)var35);
//     long var38 = var35.getFirstMillisecond();
//     boolean var39 = var22.equals((java.lang.Object)var38);
//     org.jfree.data.time.SerialDate var40 = var17.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var22);
//     int var41 = var22.getMonth();
//     int var42 = var22.getMonth();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1419139770312L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == 1);
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var1 = org.jfree.data.time.SerialDate.createInstance((-453));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test156() {}
//   public void test156() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     org.jfree.data.time.FixedMillisecond var4 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
//     java.util.Calendar var6 = null;
//     long var7 = var4.getMiddleMillisecond(var6);
//     org.jfree.data.time.RegularTimePeriod var8 = var4.previous();
//     int var9 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
//     java.util.Collection var10 = var2.getTimePeriods();
//     org.jfree.data.time.FixedMillisecond var11 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var12 = null;
//     long var13 = var11.getFirstMillisecond(var12);
//     java.util.Calendar var14 = null;
//     long var15 = var11.getMiddleMillisecond(var14);
//     org.jfree.data.time.TimeSeriesDataItem var17 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var11, 10.0d);
//     java.lang.Object var18 = var17.clone();
//     org.jfree.data.time.RegularTimePeriod var19 = var17.getPeriod();
//     var2.add(var17, true);
// 
//   }

  public void test157() {}
//   public void test157() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     var17.setDescription("");
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     int var23 = var22.getItemCount();
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
//     java.lang.Class var30 = null;
//     org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var30);
//     org.jfree.data.time.FixedMillisecond var32 = new org.jfree.data.time.FixedMillisecond();
//     var31.delete((org.jfree.data.time.RegularTimePeriod)var32);
//     java.lang.Number var34 = var26.getValue((org.jfree.data.time.RegularTimePeriod)var32);
//     org.jfree.data.time.TimeSeriesDataItem var35 = var22.getDataItem((org.jfree.data.time.RegularTimePeriod)var32);
//     int var37 = var32.compareTo((java.lang.Object)"Value");
//     long var38 = var32.getLastMillisecond();
//     java.util.Calendar var39 = null;
//     long var40 = var32.getFirstMillisecond(var39);
//     java.util.Calendar var41 = null;
//     var32.peg(var41);
//     long var43 = var32.getSerialIndex();
//     java.lang.Class var45 = null;
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var45);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     java.lang.Class var49 = null;
//     org.jfree.data.time.TimeSeries var50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var49);
//     java.lang.Class var51 = var50.getTimePeriodClass();
//     java.util.Collection var52 = var46.getTimePeriodsUniqueToOtherSeries(var50);
//     int var53 = var50.getMaximumItemCount();
//     org.jfree.data.time.Year var54 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var55 = var54.next();
//     org.jfree.data.time.TimeSeriesDataItem var56 = var50.getDataItem(var55);
//     java.lang.Class var58 = null;
//     org.jfree.data.time.TimeSeries var59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var58);
//     int var60 = var59.getItemCount();
//     java.lang.Class var62 = null;
//     org.jfree.data.time.TimeSeries var63 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var62);
//     org.jfree.data.time.FixedMillisecond var64 = new org.jfree.data.time.FixedMillisecond();
//     var63.delete((org.jfree.data.time.RegularTimePeriod)var64);
//     java.lang.Class var67 = null;
//     org.jfree.data.time.TimeSeries var68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var67);
//     org.jfree.data.time.FixedMillisecond var69 = new org.jfree.data.time.FixedMillisecond();
//     var68.delete((org.jfree.data.time.RegularTimePeriod)var69);
//     java.lang.Number var71 = var63.getValue((org.jfree.data.time.RegularTimePeriod)var69);
//     org.jfree.data.time.TimeSeriesDataItem var72 = var59.getDataItem((org.jfree.data.time.RegularTimePeriod)var69);
//     int var73 = var50.getIndex((org.jfree.data.time.RegularTimePeriod)var69);
//     org.jfree.data.time.RegularTimePeriod var74 = var69.next();
//     org.jfree.data.time.TimeSeriesDataItem var76 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var69, (java.lang.Number)(byte)(-1));
//     long var77 = var69.getMiddleMillisecond();
//     java.util.Calendar var78 = null;
//     long var79 = var69.getLastMillisecond(var78);
//     org.jfree.data.time.TimeSeries var80 = var17.createCopy((org.jfree.data.time.RegularTimePeriod)var32, (org.jfree.data.time.RegularTimePeriod)var69);
//     java.util.Collection var81 = var80.getTimePeriods();
//     java.lang.Class var82 = var80.getTimePeriodClass();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1419139770581L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 1419139770581L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 1419139770581L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var73 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var77 == 1419139770585L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var79 == 1419139770585L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var82);
// 
//   }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SerialDate var6 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var2);
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
    boolean var12 = var2.isOnOrAfter((org.jfree.data.time.SerialDate)var10);
    org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
    org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
    int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
    boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
    org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
    org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
    org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
    boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
    org.jfree.data.time.SerialDate var38 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var34);
    org.jfree.data.time.SerialDate var39 = org.jfree.data.time.SerialDate.addDays(0, var38);
    boolean var40 = var2.isOnOrBefore(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var42 = var38.getNearestDayOfWeek((-452));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var2);
    org.jfree.data.general.SeriesChangeEvent var4 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var2);
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
    org.jfree.data.time.SerialDate var12 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var8);
    org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
    int var17 = var14.compare((org.jfree.data.time.SerialDate)var16);
    boolean var18 = var8.isOnOrAfter((org.jfree.data.time.SerialDate)var16);
    org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var8);
    org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    int var25 = var22.compare((org.jfree.data.time.SerialDate)var24);
    org.jfree.data.time.SerialDate var26 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var22);
    org.jfree.data.time.SpreadsheetDate var28 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
    int var31 = var28.compare((org.jfree.data.time.SerialDate)var30);
    boolean var32 = var22.isOnOrAfter((org.jfree.data.time.SerialDate)var30);
    int var33 = var22.getDayOfMonth();
    boolean var35 = var2.isInRange(var19, (org.jfree.data.time.SerialDate)var22, 0);
    int var36 = var2.getDayOfMonth();
    int var37 = var2.toSerial();
    int var38 = var2.toSerial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 31);

  }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     long var6 = var0.getMiddleMillisecond();
//     long var7 = var0.getMiddleMillisecond();
//     int var9 = var0.compareTo((java.lang.Object)1419139756011L);
//     org.jfree.data.time.RegularTimePeriod var10 = var0.previous();
//     java.util.Calendar var11 = null;
//     var0.peg(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139770757L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139770757L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139770757L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139770757L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
// 
//   }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }
// 
// 
//     org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(1, 20);
//     java.util.Calendar var3 = null;
//     long var4 = var2.getMiddleMillisecond(var3);
// 
//   }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }
// 
// 
//     org.jfree.data.time.Year var0 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     java.lang.Class var5 = var4.getTimePeriodClass();
//     java.util.List var6 = var4.getItems();
//     org.jfree.data.time.Year var7 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var9 = var8.previous();
//     org.jfree.data.time.TimeSeries var10 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var7, var9);
//     boolean var11 = var0.equals((java.lang.Object)var9);
//     java.util.Calendar var12 = null;
//     long var13 = var0.getLastMillisecond(var12);
// 
//   }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }


    int var1 = org.jfree.data.time.SerialDate.leapYearCount((-459));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-571));

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
    java.util.Collection var5 = var2.getTimePeriods();
    java.lang.Class var7 = null;
    org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
    java.lang.Class var9 = var8.getTimePeriodClass();
    java.util.List var10 = var8.getItems();
    org.jfree.data.time.Year var11 = new org.jfree.data.time.Year();
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    org.jfree.data.time.RegularTimePeriod var13 = var12.previous();
    org.jfree.data.time.TimeSeries var14 = var8.createCopy((org.jfree.data.time.RegularTimePeriod)var11, var13);
    var2.delete(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.delete(28, 28);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }
// 
// 
//     java.lang.Comparable var0 = null;
//     org.jfree.data.time.FixedMillisecond var1 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var2 = null;
//     long var3 = var1.getFirstMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var1.getMiddleMillisecond(var4);
//     java.util.Date var6 = var1.getTime();
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var6, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var11);
//     java.lang.Class var13 = org.jfree.data.time.RegularTimePeriod.downsize(var11);
//     java.lang.Class var14 = org.jfree.data.time.RegularTimePeriod.downsize(var11);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries(var0, var11);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139770824L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139770824L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test166() {}
//   public void test166() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     java.lang.String var17 = var10.getDomainDescription();
//     var10.setKey((java.lang.Comparable)1419139748031L);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var21 = null;
//     var20.peg(var21);
//     var10.setKey((java.lang.Comparable)var20);
//     int var24 = var10.getMaximumItemCount();
//     var10.clear();
//     org.jfree.data.time.FixedMillisecond var29 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var30 = null;
//     long var31 = var29.getFirstMillisecond(var30);
//     java.util.Calendar var32 = null;
//     long var33 = var29.getMiddleMillisecond(var32);
//     java.util.Date var34 = var29.getTime();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var39 = var38.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var34, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var39);
//     java.lang.Class var41 = org.jfree.data.time.RegularTimePeriod.downsize(var39);
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var39);
//     java.lang.Class var44 = null;
//     org.jfree.data.time.TimeSeries var45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var44);
//     org.jfree.data.time.FixedMillisecond var46 = new org.jfree.data.time.FixedMillisecond();
//     var45.delete((org.jfree.data.time.RegularTimePeriod)var46);
//     java.util.Calendar var48 = null;
//     long var49 = var46.getMiddleMillisecond(var48);
//     java.lang.Class var50 = null;
//     org.jfree.data.time.TimeSeries var51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var46, var50);
//     java.lang.Class var53 = null;
//     org.jfree.data.time.TimeSeries var54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var53);
//     java.lang.Class var55 = var54.getTimePeriodClass();
//     java.lang.Class var57 = null;
//     org.jfree.data.time.TimeSeries var58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var57);
//     java.lang.Class var59 = var58.getTimePeriodClass();
//     java.util.Collection var60 = var54.getTimePeriodsUniqueToOtherSeries(var58);
//     boolean var61 = var46.equals((java.lang.Object)var60);
//     org.jfree.data.time.TimeSeriesDataItem var63 = var42.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var46, (java.lang.Number)1900);
//     var10.add((org.jfree.data.time.RegularTimePeriod)var46, 1.0d, false);
// 
//   }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
//     boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
//     int var38 = var12.compareTo((java.lang.Object)var25);
//     org.jfree.data.time.FixedMillisecond var42 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var43 = null;
//     long var44 = var42.getFirstMillisecond(var43);
//     java.util.Calendar var45 = null;
//     long var46 = var42.getMiddleMillisecond(var45);
//     java.util.Date var47 = var42.getTime();
//     org.jfree.data.time.TimeSeries var51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var52 = var51.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var47, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var52);
//     java.lang.Class var54 = org.jfree.data.time.RegularTimePeriod.downsize(var52);
//     org.jfree.data.time.TimeSeries var55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var52);
//     java.lang.Class var57 = null;
//     org.jfree.data.time.TimeSeries var58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var57);
//     java.lang.Class var59 = var58.getTimePeriodClass();
//     java.util.List var60 = var58.getItems();
//     org.jfree.data.time.Year var61 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var62 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var63 = var62.previous();
//     org.jfree.data.time.TimeSeries var64 = var58.createCopy((org.jfree.data.time.RegularTimePeriod)var61, var63);
//     long var65 = var61.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var66 = var61.next();
//     long var67 = var61.getFirstMillisecond();
//     int var68 = var55.getIndex((org.jfree.data.time.RegularTimePeriod)var61);
//     int var69 = var12.compareTo((java.lang.Object)var61);
//     org.jfree.data.time.RegularTimePeriod var70 = var61.next();
//     org.jfree.data.time.RegularTimePeriod var71 = var61.next();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139770831L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139770831L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 1419139770835L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 1419139770835L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var65 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var67 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
// 
//   }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(2014, 13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }


    int var1 = org.jfree.data.time.SerialDate.stringToMonthCode("Wednesday");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getMonth();
//     int var2 = var0.getYear();
//     long var3 = var0.getSerialIndex();
//     int var4 = var0.getYear();
//     java.util.Calendar var5 = null;
//     long var6 = var0.getLastMillisecond(var5);
// 
//   }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    java.lang.Object var3 = null;
    boolean var4 = var2.equals(var3);
    org.jfree.data.time.SpreadsheetDate var7 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var7);
    org.jfree.data.general.SeriesChangeEvent var9 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var7);
    org.jfree.data.time.SpreadsheetDate var13 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var15 = new org.jfree.data.time.SpreadsheetDate(31);
    int var16 = var13.compare((org.jfree.data.time.SerialDate)var15);
    org.jfree.data.time.SerialDate var17 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var13);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    int var22 = var19.compare((org.jfree.data.time.SerialDate)var21);
    boolean var23 = var13.isOnOrAfter((org.jfree.data.time.SerialDate)var21);
    org.jfree.data.time.SerialDate var24 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var13);
    org.jfree.data.time.SpreadsheetDate var27 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
    int var30 = var27.compare((org.jfree.data.time.SerialDate)var29);
    org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var27);
    org.jfree.data.time.SpreadsheetDate var33 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    int var36 = var33.compare((org.jfree.data.time.SerialDate)var35);
    boolean var37 = var27.isOnOrAfter((org.jfree.data.time.SerialDate)var35);
    int var38 = var27.getDayOfMonth();
    boolean var40 = var7.isInRange(var24, (org.jfree.data.time.SerialDate)var27, 0);
    boolean var41 = var2.isBefore(var24);
    int var42 = var2.getDayOfMonth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var43 = org.jfree.data.time.SerialDate.getPreviousDayOfWeek(31, (org.jfree.data.time.SerialDate)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 30);

  }

  public void test172() {}
//   public void test172() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.general.SeriesException var11 = new org.jfree.data.general.SeriesException("Time");
//     java.lang.String var12 = var11.toString();
//     boolean var13 = var6.equals((java.lang.Object)var11);
//     int var14 = var6.getMaximumItemCount();
//     int var15 = var6.getItemCount();
//     java.lang.Comparable var16 = var6.getKey();
//     org.jfree.data.time.Day var17 = new org.jfree.data.time.Day();
//     java.lang.String var18 = var17.toString();
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     java.lang.Class var22 = var21.getTimePeriodClass();
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     java.lang.Class var26 = var25.getTimePeriodClass();
//     java.util.Collection var27 = var21.getTimePeriodsUniqueToOtherSeries(var25);
//     int var28 = var25.getMaximumItemCount();
//     org.jfree.data.time.Year var29 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var30 = var29.next();
//     org.jfree.data.time.TimeSeriesDataItem var31 = var25.getDataItem(var30);
//     java.lang.Class var33 = null;
//     org.jfree.data.time.TimeSeries var34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var33);
//     int var35 = var34.getItemCount();
//     java.lang.Class var37 = null;
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var37);
//     org.jfree.data.time.FixedMillisecond var39 = new org.jfree.data.time.FixedMillisecond();
//     var38.delete((org.jfree.data.time.RegularTimePeriod)var39);
//     java.lang.Class var42 = null;
//     org.jfree.data.time.TimeSeries var43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var42);
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond();
//     var43.delete((org.jfree.data.time.RegularTimePeriod)var44);
//     java.lang.Number var46 = var38.getValue((org.jfree.data.time.RegularTimePeriod)var44);
//     org.jfree.data.time.TimeSeriesDataItem var47 = var34.getDataItem((org.jfree.data.time.RegularTimePeriod)var44);
//     int var48 = var25.getIndex((org.jfree.data.time.RegularTimePeriod)var44);
//     java.lang.String var49 = var25.getDomainDescription();
//     java.lang.Class var51 = null;
//     org.jfree.data.time.TimeSeries var52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var51);
//     java.lang.Class var53 = var52.getTimePeriodClass();
//     java.util.List var54 = var52.getItems();
//     org.jfree.data.time.Year var55 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var56 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var57 = var56.previous();
//     org.jfree.data.time.TimeSeries var58 = var52.createCopy((org.jfree.data.time.RegularTimePeriod)var55, var57);
//     long var59 = var55.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var60 = var55.next();
//     long var61 = var55.getFirstMillisecond();
//     org.jfree.data.time.Year var62 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var63 = var62.previous();
//     java.lang.Class var65 = null;
//     org.jfree.data.time.TimeSeries var66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var65);
//     java.lang.Class var67 = var66.getTimePeriodClass();
//     java.util.List var68 = var66.getItems();
//     org.jfree.data.time.Year var69 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var70 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var71 = var70.previous();
//     org.jfree.data.time.TimeSeries var72 = var66.createCopy((org.jfree.data.time.RegularTimePeriod)var69, var71);
//     boolean var73 = var62.equals((java.lang.Object)var71);
//     org.jfree.data.time.RegularTimePeriod var74 = var62.previous();
//     org.jfree.data.time.TimeSeries var75 = var25.createCopy((org.jfree.data.time.RegularTimePeriod)var55, (org.jfree.data.time.RegularTimePeriod)var62);
//     long var76 = var62.getFirstMillisecond();
//     boolean var77 = var17.equals((java.lang.Object)var62);
//     org.jfree.data.time.TimeSeriesDataItem var79 = var6.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var17, (java.lang.Number)1419139749113L);
//     java.util.Calendar var80 = null;
//     long var81 = var17.getFirstMillisecond(var80);
// 
//   }

  public void test173() {}
//   public void test173() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     java.util.Calendar var6 = null;
//     long var7 = var0.getMiddleMillisecond(var6);
//     java.util.Calendar var8 = null;
//     long var9 = var0.getFirstMillisecond(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139771358L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139771358L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139771358L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1419139771358L);
// 
//   }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.relativeToString(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Following"+ "'", var1.equals("Following"));

  }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var4 = null;
//     long var5 = var3.getFirstMillisecond(var4);
//     java.util.Calendar var6 = null;
//     long var7 = var3.getMiddleMillisecond(var6);
//     java.util.Date var8 = var3.getTime();
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var8, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var13);
//     java.lang.Class var15 = org.jfree.data.time.RegularTimePeriod.downsize(var13);
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var13);
//     long var17 = var16.getMaximumItemAge();
//     java.lang.String var18 = var16.getRangeDescription();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139771447L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139771447L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 9223372036854775807L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + "org.jfree.data.general.SeriesException: Time"+ "'", var18.equals("org.jfree.data.general.SeriesException: Time"));
// 
//   }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.createInstance(0, 0, 2014);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test177() {}
//   public void test177() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     java.util.TimeZone var5 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var6 = new org.jfree.data.time.Day(var3, var5);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139771457L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
// 
//   }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:09 PST 2014]");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }


    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    int var7 = var4.compare((org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
    boolean var14 = var4.isOnOrAfter((org.jfree.data.time.SerialDate)var12);
    int var15 = var4.getDayOfMonth();
    org.jfree.data.time.SerialDate var16 = org.jfree.data.time.SerialDate.addDays((-1), (org.jfree.data.time.SerialDate)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var17 = org.jfree.data.time.SerialDate.addYears((-565), var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    var2.fireSeriesChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.update((-460), (java.lang.Number)1419139764379L);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    org.jfree.data.time.Year var4 = new org.jfree.data.time.Year();
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    java.lang.Class var7 = null;
    org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
    java.lang.Class var9 = var8.getTimePeriodClass();
    java.util.List var10 = var8.getItems();
    org.jfree.data.time.Year var11 = new org.jfree.data.time.Year();
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    org.jfree.data.time.RegularTimePeriod var13 = var12.previous();
    org.jfree.data.time.TimeSeries var14 = var8.createCopy((org.jfree.data.time.RegularTimePeriod)var11, var13);
    boolean var15 = var4.equals((java.lang.Object)var13);
    int var16 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.delete((-460), (-452));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));

  }

  public void test182() {}
//   public void test182() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var1 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var2 = null;
//     long var3 = var1.getFirstMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var1.getMiddleMillisecond(var4);
//     java.util.Date var6 = var1.getTime();
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var6, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var11);
//     org.jfree.data.time.Month var13 = new org.jfree.data.time.Month();
//     var12.setKey((java.lang.Comparable)var13);
//     long var15 = var13.getFirstMillisecond();
//     long var16 = var13.getSerialIndex();
//     int var17 = var13.getYearValue();
//     org.jfree.data.time.Year var18 = var13.getYear();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(30, var18);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139771757L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139771757L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
// 
//   }

  public void test183() {}
//   public void test183() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
//     org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
//     org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
//     boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
//     int var14 = var3.getDayOfMonth();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     int var28 = var17.getDayOfMonth();
//     org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var35 = var32.compare((org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.time.SerialDate var36 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var32);
//     org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var41 = var38.compare((org.jfree.data.time.SerialDate)var40);
//     boolean var42 = var32.isOnOrAfter((org.jfree.data.time.SerialDate)var40);
//     org.jfree.data.time.SerialDate var43 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var32);
//     org.jfree.data.time.SpreadsheetDate var45 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var48 = var45.compare((org.jfree.data.time.SerialDate)var47);
//     int var49 = var47.getMonth();
//     boolean var50 = var32.isOnOrAfter((org.jfree.data.time.SerialDate)var47);
//     boolean var51 = var3.isInRange((org.jfree.data.time.SerialDate)var17, (org.jfree.data.time.SerialDate)var32);
//     org.jfree.data.time.SpreadsheetDate var54 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var56 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var57 = var54.compare((org.jfree.data.time.SerialDate)var56);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var54);
//     org.jfree.data.time.Day var60 = new org.jfree.data.time.Day();
//     org.jfree.data.time.SerialDate var61 = var60.getSerialDate();
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.getNearestDayOfWeek(3, var61);
//     boolean var63 = var32.isInRange((org.jfree.data.time.SerialDate)var54, var62);
//     org.jfree.data.time.SerialDate var64 = org.jfree.data.time.SerialDate.addDays(12, (org.jfree.data.time.SerialDate)var32);
//     org.jfree.data.time.SerialDate var65 = null;
//     boolean var66 = var32.isOn(var65);
// 
//   }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = org.jfree.data.time.SerialDate.weekdayCodeToString((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test185() {}
//   public void test185() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     int var23 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var19);
//     boolean var24 = var5.equals((java.lang.Object)var19);
//     java.util.Calendar var25 = null;
//     long var26 = var19.getMiddleMillisecond(var25);
//     org.jfree.data.time.Day var29 = new org.jfree.data.time.Day();
//     java.lang.String var30 = var29.toString();
//     java.lang.String var31 = var29.toString();
//     java.lang.Object var32 = null;
//     int var33 = var29.compareTo(var32);
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var38 = null;
//     long var39 = var37.getFirstMillisecond(var38);
//     java.util.Calendar var40 = null;
//     long var41 = var37.getMiddleMillisecond(var40);
//     java.util.Date var42 = var37.getTime();
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var42, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var47);
//     java.lang.Class var49 = org.jfree.data.time.RegularTimePeriod.downsize(var47);
//     org.jfree.data.time.TimeSeries var50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var47);
//     int var51 = var29.compareTo((java.lang.Object)var47);
//     org.jfree.data.time.TimeSeries var52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var19, "SerialDate.weekInMonthToString(): invalid code.", "Last", var47);
//     org.jfree.data.time.TimeSeriesDataItem var54 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var19, 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139771855L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1419139771855L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "20-December-2014"+ "'", var30.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var31 + "' != '" + "20-December-2014"+ "'", var31.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 1419139771857L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 1419139771857L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == 1);
// 
//   }

  public void test186() {}
//   public void test186() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var2 = var1.getTimePeriodClass();
//     int var3 = var1.getItemCount();
//     var1.fireSeriesChanged();
//     java.lang.Class var6 = null;
//     org.jfree.data.time.TimeSeries var7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var6);
//     java.lang.Class var8 = var7.getTimePeriodClass();
//     java.util.List var9 = var7.getItems();
//     java.lang.Object var10 = var7.clone();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     java.lang.Class var14 = var13.getTimePeriodClass();
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     java.util.Collection var19 = var13.getTimePeriodsUniqueToOtherSeries(var17);
//     int var20 = var17.getMaximumItemCount();
//     org.jfree.data.time.Year var21 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var22 = var21.next();
//     org.jfree.data.time.TimeSeriesDataItem var23 = var17.getDataItem(var22);
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     int var27 = var26.getItemCount();
//     java.lang.Class var29 = null;
//     org.jfree.data.time.TimeSeries var30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var29);
//     org.jfree.data.time.FixedMillisecond var31 = new org.jfree.data.time.FixedMillisecond();
//     var30.delete((org.jfree.data.time.RegularTimePeriod)var31);
//     java.lang.Class var34 = null;
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var34);
//     org.jfree.data.time.FixedMillisecond var36 = new org.jfree.data.time.FixedMillisecond();
//     var35.delete((org.jfree.data.time.RegularTimePeriod)var36);
//     java.lang.Number var38 = var30.getValue((org.jfree.data.time.RegularTimePeriod)var36);
//     org.jfree.data.time.TimeSeriesDataItem var39 = var26.getDataItem((org.jfree.data.time.RegularTimePeriod)var36);
//     int var40 = var17.getIndex((org.jfree.data.time.RegularTimePeriod)var36);
//     java.util.Calendar var41 = null;
//     var36.peg(var41);
//     org.jfree.data.time.TimeSeriesDataItem var44 = var7.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var36, 1.0d);
//     org.jfree.data.time.Day var45 = new org.jfree.data.time.Day();
//     int var46 = var45.getYear();
//     int var47 = var45.getYear();
//     java.lang.Number var48 = null;
//     org.jfree.data.time.TimeSeriesDataItem var49 = var7.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var45, var48);
//     var1.add((org.jfree.data.time.RegularTimePeriod)var45, (java.lang.Number)1419139752385L);
//     long var52 = var45.getLastMillisecond();
//     java.util.Calendar var53 = null;
//     long var54 = var45.getLastMillisecond(var53);
// 
//   }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = org.jfree.data.time.SerialDate.monthCodeToQuarter(2014);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test188() {}
//   public void test188() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var6 = null;
//     long var7 = var5.getMiddleMillisecond(var6);
//     java.util.Date var8 = var5.getEnd();
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     java.lang.Class var12 = var11.getTimePeriodClass();
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     java.lang.Class var16 = var15.getTimePeriodClass();
//     java.util.Collection var17 = var11.getTimePeriodsUniqueToOtherSeries(var15);
//     org.jfree.data.general.SeriesChangeEvent var18 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var11);
//     boolean var19 = var5.equals((java.lang.Object)var11);
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     org.jfree.data.time.RegularTimePeriod var21 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var23 = var2.addOrUpdate(var21, 1.0d);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139771971L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
// 
//   }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     int var16 = var15.getItemCount();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
//     org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
//     int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.String var30 = var6.getDomainDescription();
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     java.lang.Class var34 = var33.getTimePeriodClass();
//     java.util.List var35 = var33.getItems();
//     org.jfree.data.time.Year var36 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var38 = var37.previous();
//     org.jfree.data.time.TimeSeries var39 = var33.createCopy((org.jfree.data.time.RegularTimePeriod)var36, var38);
//     long var40 = var36.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var41 = var36.next();
//     long var42 = var36.getFirstMillisecond();
//     org.jfree.data.time.Year var43 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var44 = var43.previous();
//     java.lang.Class var46 = null;
//     org.jfree.data.time.TimeSeries var47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var46);
//     java.lang.Class var48 = var47.getTimePeriodClass();
//     java.util.List var49 = var47.getItems();
//     org.jfree.data.time.Year var50 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var51 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var52 = var51.previous();
//     org.jfree.data.time.TimeSeries var53 = var47.createCopy((org.jfree.data.time.RegularTimePeriod)var50, var52);
//     boolean var54 = var43.equals((java.lang.Object)var52);
//     org.jfree.data.time.RegularTimePeriod var55 = var43.previous();
//     org.jfree.data.time.TimeSeries var56 = var6.createCopy((org.jfree.data.time.RegularTimePeriod)var36, (org.jfree.data.time.RegularTimePeriod)var43);
//     java.util.Calendar var57 = null;
//     long var58 = var36.getLastMillisecond(var57);
// 
//   }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = org.jfree.data.time.Year.parseYear("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:25 PST 2014]");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month((-453), 2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     org.jfree.data.time.TimeSeriesDataItem var6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, 10.0d);
//     java.lang.Object var7 = var6.clone();
//     int var9 = var6.compareTo((java.lang.Object)1419139747950L);
//     java.lang.Object var10 = var6.clone();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     int var14 = var13.getItemCount();
//     java.lang.String var15 = var13.getDescription();
//     java.beans.PropertyChangeListener var16 = null;
//     var13.removePropertyChangeListener(var16);
//     int var18 = var13.getItemCount();
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     java.lang.Class var22 = var21.getTimePeriodClass();
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     java.lang.Class var26 = var25.getTimePeriodClass();
//     java.util.Collection var27 = var21.getTimePeriodsUniqueToOtherSeries(var25);
//     org.jfree.data.time.TimeSeries var28 = var13.addAndOrUpdate(var25);
//     var28.setDescription("");
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     int var34 = var33.getItemCount();
//     java.lang.Class var36 = null;
//     org.jfree.data.time.TimeSeries var37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var36);
//     org.jfree.data.time.FixedMillisecond var38 = new org.jfree.data.time.FixedMillisecond();
//     var37.delete((org.jfree.data.time.RegularTimePeriod)var38);
//     java.lang.Class var41 = null;
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var41);
//     org.jfree.data.time.FixedMillisecond var43 = new org.jfree.data.time.FixedMillisecond();
//     var42.delete((org.jfree.data.time.RegularTimePeriod)var43);
//     java.lang.Number var45 = var37.getValue((org.jfree.data.time.RegularTimePeriod)var43);
//     org.jfree.data.time.TimeSeriesDataItem var46 = var33.getDataItem((org.jfree.data.time.RegularTimePeriod)var43);
//     int var48 = var43.compareTo((java.lang.Object)"Value");
//     long var49 = var43.getLastMillisecond();
//     java.util.Calendar var50 = null;
//     long var51 = var43.getFirstMillisecond(var50);
//     java.util.Calendar var52 = null;
//     var43.peg(var52);
//     long var54 = var43.getSerialIndex();
//     java.lang.Class var56 = null;
//     org.jfree.data.time.TimeSeries var57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var56);
//     java.lang.Class var58 = var57.getTimePeriodClass();
//     java.lang.Class var60 = null;
//     org.jfree.data.time.TimeSeries var61 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var60);
//     java.lang.Class var62 = var61.getTimePeriodClass();
//     java.util.Collection var63 = var57.getTimePeriodsUniqueToOtherSeries(var61);
//     int var64 = var61.getMaximumItemCount();
//     org.jfree.data.time.Year var65 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var66 = var65.next();
//     org.jfree.data.time.TimeSeriesDataItem var67 = var61.getDataItem(var66);
//     java.lang.Class var69 = null;
//     org.jfree.data.time.TimeSeries var70 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var69);
//     int var71 = var70.getItemCount();
//     java.lang.Class var73 = null;
//     org.jfree.data.time.TimeSeries var74 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var73);
//     org.jfree.data.time.FixedMillisecond var75 = new org.jfree.data.time.FixedMillisecond();
//     var74.delete((org.jfree.data.time.RegularTimePeriod)var75);
//     java.lang.Class var78 = null;
//     org.jfree.data.time.TimeSeries var79 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var78);
//     org.jfree.data.time.FixedMillisecond var80 = new org.jfree.data.time.FixedMillisecond();
//     var79.delete((org.jfree.data.time.RegularTimePeriod)var80);
//     java.lang.Number var82 = var74.getValue((org.jfree.data.time.RegularTimePeriod)var80);
//     org.jfree.data.time.TimeSeriesDataItem var83 = var70.getDataItem((org.jfree.data.time.RegularTimePeriod)var80);
//     int var84 = var61.getIndex((org.jfree.data.time.RegularTimePeriod)var80);
//     org.jfree.data.time.RegularTimePeriod var85 = var80.next();
//     org.jfree.data.time.TimeSeriesDataItem var87 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var80, (java.lang.Number)(byte)(-1));
//     long var88 = var80.getMiddleMillisecond();
//     java.util.Calendar var89 = null;
//     long var90 = var80.getLastMillisecond(var89);
//     org.jfree.data.time.TimeSeries var91 = var28.createCopy((org.jfree.data.time.RegularTimePeriod)var43, (org.jfree.data.time.RegularTimePeriod)var80);
//     int var92 = var6.compareTo((java.lang.Object)var91);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.RegularTimePeriod var93 = var91.getNextTimePeriod();
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139772325L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139772325L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == 1419139772329L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == 1419139772329L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == 1419139772329L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var64 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var71 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var84 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var85);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var88 == 1419139772334L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var90 == 1419139772334L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var91);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var92 == 1);
// 
//   }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(0, 2147483647, (-459));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     int var23 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var19);
//     boolean var24 = var5.equals((java.lang.Object)var19);
//     java.util.Calendar var25 = null;
//     long var26 = var19.getMiddleMillisecond(var25);
//     org.jfree.data.time.Day var29 = new org.jfree.data.time.Day();
//     java.lang.String var30 = var29.toString();
//     java.lang.String var31 = var29.toString();
//     java.lang.Object var32 = null;
//     int var33 = var29.compareTo(var32);
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var38 = null;
//     long var39 = var37.getFirstMillisecond(var38);
//     java.util.Calendar var40 = null;
//     long var41 = var37.getMiddleMillisecond(var40);
//     java.util.Date var42 = var37.getTime();
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var42, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var47);
//     java.lang.Class var49 = org.jfree.data.time.RegularTimePeriod.downsize(var47);
//     org.jfree.data.time.TimeSeries var50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var47);
//     int var51 = var29.compareTo((java.lang.Object)var47);
//     org.jfree.data.time.TimeSeries var52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var19, "SerialDate.weekInMonthToString(): invalid code.", "Last", var47);
//     org.jfree.data.time.TimeSeries var55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var56 = var55.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10.0f, var56);
//     org.jfree.data.time.FixedMillisecond var58 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var59 = null;
//     long var60 = var58.getFirstMillisecond(var59);
//     java.util.Calendar var61 = null;
//     long var62 = var58.getMiddleMillisecond(var61);
//     java.util.Date var63 = var58.getTime();
//     org.jfree.data.time.TimeSeries var67 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var68 = var67.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var69 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var63, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var68);
//     java.util.TimeZone var70 = null;
//     org.jfree.data.time.RegularTimePeriod var71 = org.jfree.data.time.RegularTimePeriod.createInstance(var56, var63, var70);
//     java.lang.Class var73 = null;
//     org.jfree.data.time.TimeSeries var74 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var73);
//     int var75 = var74.getItemCount();
//     java.lang.Class var77 = null;
//     org.jfree.data.time.TimeSeries var78 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var77);
//     org.jfree.data.time.FixedMillisecond var79 = new org.jfree.data.time.FixedMillisecond();
//     var78.delete((org.jfree.data.time.RegularTimePeriod)var79);
//     java.lang.Class var82 = null;
//     org.jfree.data.time.TimeSeries var83 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var82);
//     org.jfree.data.time.FixedMillisecond var84 = new org.jfree.data.time.FixedMillisecond();
//     var83.delete((org.jfree.data.time.RegularTimePeriod)var84);
//     java.lang.Number var86 = var78.getValue((org.jfree.data.time.RegularTimePeriod)var84);
//     org.jfree.data.time.TimeSeriesDataItem var87 = var74.getDataItem((org.jfree.data.time.RegularTimePeriod)var84);
//     java.util.Date var88 = var84.getStart();
//     org.jfree.data.time.FixedMillisecond var89 = new org.jfree.data.time.FixedMillisecond(var88);
//     org.jfree.data.time.FixedMillisecond var90 = new org.jfree.data.time.FixedMillisecond(var88);
//     org.jfree.data.time.Month var91 = new org.jfree.data.time.Month(var88);
//     java.util.TimeZone var92 = null;
//     org.jfree.data.time.RegularTimePeriod var93 = org.jfree.data.time.RegularTimePeriod.createInstance(var56, var88, var92);
//     var52.setKey((java.lang.Comparable)var88);
//     java.util.TimeZone var95 = null;
//     org.jfree.data.time.Year var96 = new org.jfree.data.time.Year(var88, var95);
// 
//   }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(0, (-459), 2014);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test196() {}
//   public void test196() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     java.util.Date var10 = var5.getStart();
//     org.jfree.data.time.Month var11 = new org.jfree.data.time.Month(var10);
//     java.util.Calendar var12 = null;
//     var11.peg(var12);
// 
//   }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }


    org.jfree.data.general.SeriesException var1 = new org.jfree.data.general.SeriesException("Preceding");

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
    var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
    java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
    java.util.Date var16 = var12.getStart();
    org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.TimeSeriesDataItem var19 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var17, (java.lang.Number)10);
    java.lang.Class var21 = null;
    org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
    int var23 = var22.getItemCount();
    java.lang.Class var25 = null;
    org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
    org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
    var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
    java.lang.Class var30 = null;
    org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var30);
    org.jfree.data.time.FixedMillisecond var32 = new org.jfree.data.time.FixedMillisecond();
    var31.delete((org.jfree.data.time.RegularTimePeriod)var32);
    java.lang.Number var34 = var26.getValue((org.jfree.data.time.RegularTimePeriod)var32);
    org.jfree.data.time.TimeSeriesDataItem var35 = var22.getDataItem((org.jfree.data.time.RegularTimePeriod)var32);
    java.util.Date var36 = var32.getStart();
    org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond(var36);
    org.jfree.data.time.FixedMillisecond var38 = new org.jfree.data.time.FixedMillisecond(var36);
    org.jfree.data.time.Month var39 = new org.jfree.data.time.Month(var36);
    java.lang.Object var40 = null;
    boolean var41 = var39.equals(var40);
    boolean var43 = var39.equals((java.lang.Object)1419139747941L);
    int var44 = var19.compareTo((java.lang.Object)var43);
    var19.setValue((java.lang.Number)(-570));
    java.lang.Number var47 = var19.getValue();
    org.jfree.data.time.TimeSeries var48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + (-570)+ "'", var47.equals((-570)));

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    java.lang.Object var5 = var2.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var7 = var2.getTimePeriod(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test200() {}
//   public void test200() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     org.jfree.data.time.TimeSeriesDataItem var7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, (-1.0d));
//     org.jfree.data.time.RegularTimePeriod var8 = var7.getPeriod();
//     org.jfree.data.time.RegularTimePeriod var9 = var7.getPeriod();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.Collection var18 = var12.getTimePeriodsUniqueToOtherSeries(var16);
//     int var19 = var16.getMaximumItemCount();
//     org.jfree.data.time.Year var20 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.next();
//     org.jfree.data.time.TimeSeriesDataItem var22 = var16.getDataItem(var21);
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     int var26 = var25.getItemCount();
//     java.lang.Class var28 = null;
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var28);
//     org.jfree.data.time.FixedMillisecond var30 = new org.jfree.data.time.FixedMillisecond();
//     var29.delete((org.jfree.data.time.RegularTimePeriod)var30);
//     java.lang.Class var33 = null;
//     org.jfree.data.time.TimeSeries var34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var33);
//     org.jfree.data.time.FixedMillisecond var35 = new org.jfree.data.time.FixedMillisecond();
//     var34.delete((org.jfree.data.time.RegularTimePeriod)var35);
//     java.lang.Number var37 = var29.getValue((org.jfree.data.time.RegularTimePeriod)var35);
//     org.jfree.data.time.TimeSeriesDataItem var38 = var25.getDataItem((org.jfree.data.time.RegularTimePeriod)var35);
//     int var39 = var16.getIndex((org.jfree.data.time.RegularTimePeriod)var35);
//     java.util.Collection var40 = var16.getTimePeriods();
//     boolean var41 = var7.equals((java.lang.Object)var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139772611L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139772611L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == false);
// 
//   }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month((-435), 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test202() {}
//   public void test202() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var5 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.general.SeriesChangeEvent var6 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var4);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
//     org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var19 = var16.compare((org.jfree.data.time.SerialDate)var18);
//     boolean var20 = var10.isOnOrAfter((org.jfree.data.time.SerialDate)var18);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
//     org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var33 = var30.compare((org.jfree.data.time.SerialDate)var32);
//     boolean var34 = var24.isOnOrAfter((org.jfree.data.time.SerialDate)var32);
//     int var35 = var24.getDayOfMonth();
//     boolean var37 = var4.isInRange(var21, (org.jfree.data.time.SerialDate)var24, 0);
//     boolean var38 = var1.isOnOrBefore(var21);
//     java.lang.String var39 = var1.toString();
//     org.jfree.data.time.Day var40 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var1);
//     org.jfree.data.time.SpreadsheetDate var42 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var45 = var42.compare((org.jfree.data.time.SerialDate)var44);
//     int var46 = var44.getMonth();
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     java.lang.Class var49 = null;
//     org.jfree.data.time.TimeSeries var50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var49);
//     int var51 = var50.getItemCount();
//     java.lang.String var52 = var50.getDescription();
//     java.beans.PropertyChangeListener var53 = null;
//     var50.removePropertyChangeListener(var53);
//     int var55 = var50.getItemCount();
//     java.lang.Class var57 = null;
//     org.jfree.data.time.TimeSeries var58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var57);
//     java.lang.Class var59 = var58.getTimePeriodClass();
//     java.lang.Class var61 = null;
//     org.jfree.data.time.TimeSeries var62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var61);
//     java.lang.Class var63 = var62.getTimePeriodClass();
//     java.util.Collection var64 = var58.getTimePeriodsUniqueToOtherSeries(var62);
//     org.jfree.data.time.TimeSeries var65 = var50.addAndOrUpdate(var62);
//     org.jfree.data.time.FixedMillisecond var66 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var67 = null;
//     long var68 = var66.getFirstMillisecond(var67);
//     java.util.Calendar var69 = null;
//     long var70 = var66.getMiddleMillisecond(var69);
//     java.util.Date var71 = var66.getTime();
//     java.util.Calendar var72 = null;
//     var66.peg(var72);
//     org.jfree.data.time.TimeSeriesDataItem var75 = var62.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var66, 100.0d);
//     boolean var76 = var40.equals((java.lang.Object)var66);
//     org.jfree.data.time.TimeSeriesDataItem var78 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var40, (-1.0d));
//     org.jfree.data.time.RegularTimePeriod var79 = var40.next();
//     java.util.Calendar var80 = null;
//     var40.peg(var80);
// 
//   }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     java.util.Calendar var6 = null;
//     long var7 = var0.getMiddleMillisecond(var6);
//     long var8 = var0.getMiddleMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139772929L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139772929L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139772929L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139772929L);
// 
//   }

  public void test204() {}
//   public void test204() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     var8.setDescription("");
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     int var23 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var19);
//     org.jfree.data.time.TimeSeriesDataItem var24 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var19);
//     var8.removeAgedItems(false);
//     int var27 = var8.getMaximumItemCount();
//     org.jfree.data.general.SeriesChangeListener var28 = null;
//     var8.addChangeListener(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139772932L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139772934L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == 2147483647);
// 
//   }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SerialDate var6 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var2);
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
    boolean var12 = var2.isOnOrAfter((org.jfree.data.time.SerialDate)var10);
    org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    int var19 = var16.compare((org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SerialDate var20 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var16);
    org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    int var25 = var22.compare((org.jfree.data.time.SerialDate)var24);
    boolean var26 = var16.isOnOrAfter((org.jfree.data.time.SerialDate)var24);
    org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var29);
    org.jfree.data.time.SpreadsheetDate var33 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var34 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var33);
    org.jfree.data.general.SeriesChangeEvent var35 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var33);
    boolean var36 = var24.isInRange(var30, (org.jfree.data.time.SerialDate)var33);
    org.jfree.data.time.SerialDate var37 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var33);
    org.jfree.data.time.SpreadsheetDate var39 = new org.jfree.data.time.SpreadsheetDate(31);
    int var40 = var39.getMonth();
    org.jfree.data.time.SpreadsheetDate var43 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var45 = new org.jfree.data.time.SpreadsheetDate(31);
    int var46 = var43.compare((org.jfree.data.time.SerialDate)var45);
    org.jfree.data.time.SerialDate var47 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var43);
    org.jfree.data.time.SpreadsheetDate var49 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var51 = new org.jfree.data.time.SpreadsheetDate(31);
    int var52 = var49.compare((org.jfree.data.time.SerialDate)var51);
    boolean var53 = var43.isOnOrAfter((org.jfree.data.time.SerialDate)var51);
    org.jfree.data.time.SpreadsheetDate var56 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var57 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var56);
    org.jfree.data.time.SpreadsheetDate var60 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var61 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var60);
    org.jfree.data.general.SeriesChangeEvent var62 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var60);
    boolean var63 = var51.isInRange(var57, (org.jfree.data.time.SerialDate)var60);
    int var64 = var60.getDayOfMonth();
    boolean var65 = var39.isOnOrAfter((org.jfree.data.time.SerialDate)var60);
    java.lang.String var66 = var60.toString();
    int var67 = var60.getDayOfMonth();
    int var68 = var60.getDayOfWeek();
    boolean var70 = var2.isInRange((org.jfree.data.time.SerialDate)var33, (org.jfree.data.time.SerialDate)var60, 0);
    java.lang.Class var72 = null;
    org.jfree.data.time.TimeSeries var73 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var72);
    java.lang.Class var74 = var73.getTimePeriodClass();
    java.util.List var75 = var73.getItems();
    org.jfree.data.time.Year var76 = new org.jfree.data.time.Year();
    var73.delete((org.jfree.data.time.RegularTimePeriod)var76);
    java.util.List var78 = var73.getItems();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var79 = var2.compareTo((java.lang.Object)var78);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "30-January-1900"+ "'", var66.equals("30-January-1900"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    int var2 = var1.getMonth();
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var7 = new org.jfree.data.time.SpreadsheetDate(31);
    int var8 = var5.compare((org.jfree.data.time.SerialDate)var7);
    org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var13 = new org.jfree.data.time.SpreadsheetDate(31);
    int var14 = var11.compare((org.jfree.data.time.SerialDate)var13);
    boolean var15 = var5.isOnOrAfter((org.jfree.data.time.SerialDate)var13);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var22);
    org.jfree.data.general.SeriesChangeEvent var24 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var22);
    boolean var25 = var13.isInRange(var19, (org.jfree.data.time.SerialDate)var22);
    int var26 = var22.getDayOfMonth();
    boolean var27 = var1.isOnOrAfter((org.jfree.data.time.SerialDate)var22);
    java.lang.String var28 = var22.toString();
    int var29 = var22.getDayOfMonth();
    int var30 = var22.getDayOfWeek();
    org.jfree.data.time.Day var31 = new org.jfree.data.time.Day();
    org.jfree.data.time.SerialDate var32 = var31.getSerialDate();
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var36 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var35);
    org.jfree.data.general.SeriesChangeEvent var37 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var35);
    org.jfree.data.time.SpreadsheetDate var41 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var43 = new org.jfree.data.time.SpreadsheetDate(31);
    int var44 = var41.compare((org.jfree.data.time.SerialDate)var43);
    org.jfree.data.time.SerialDate var45 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var41);
    org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var49 = new org.jfree.data.time.SpreadsheetDate(31);
    int var50 = var47.compare((org.jfree.data.time.SerialDate)var49);
    boolean var51 = var41.isOnOrAfter((org.jfree.data.time.SerialDate)var49);
    org.jfree.data.time.SerialDate var52 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var41);
    org.jfree.data.time.SpreadsheetDate var55 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
    int var58 = var55.compare((org.jfree.data.time.SerialDate)var57);
    org.jfree.data.time.SerialDate var59 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var55);
    org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var63 = new org.jfree.data.time.SpreadsheetDate(31);
    int var64 = var61.compare((org.jfree.data.time.SerialDate)var63);
    boolean var65 = var55.isOnOrAfter((org.jfree.data.time.SerialDate)var63);
    int var66 = var55.getDayOfMonth();
    boolean var68 = var35.isInRange(var52, (org.jfree.data.time.SerialDate)var55, 0);
    boolean var70 = var22.isInRange(var32, var52, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var72 = var32.getPreviousDayOfWeek(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "30-January-1900"+ "'", var28.equals("30-January-1900"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }


    int var1 = org.jfree.data.time.SerialDate.leapYearCount((-572));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-599));

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }


    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    int var9 = var6.compare((org.jfree.data.time.SerialDate)var8);
    org.jfree.data.time.SerialDate var10 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
    int var15 = var12.compare((org.jfree.data.time.SerialDate)var14);
    boolean var16 = var6.isOnOrAfter((org.jfree.data.time.SerialDate)var14);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var20 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var19);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var24 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var23);
    org.jfree.data.general.SeriesChangeEvent var25 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var23);
    boolean var26 = var14.isInRange(var20, (org.jfree.data.time.SerialDate)var23);
    org.jfree.data.time.SerialDate var27 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var23);
    org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addDays(0, var27);
    org.jfree.data.time.SerialDate var29 = org.jfree.data.time.SerialDate.addDays(13, var28);
    org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.addDays(20, var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("October");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.jfree.data.time.SerialDate.lastDayOfMonth((-565), (-459));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.String var4 = var2.getDescription();
    java.beans.PropertyChangeListener var5 = null;
    var2.removePropertyChangeListener(var5);
    int var7 = var2.getItemCount();
    java.lang.Class var9 = null;
    org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
    java.lang.Class var11 = var10.getTimePeriodClass();
    java.lang.Class var13 = null;
    org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
    java.lang.Class var15 = var14.getTimePeriodClass();
    java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
    org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
    long var18 = var14.getMaximumItemAge();
    java.lang.Comparable var19 = var14.getKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.update(1, (java.lang.Number)1419139769798L);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 9223372036854775807L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + (short)100+ "'", var19.equals((short)100));

  }

  public void test212() {}
//   public void test212() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     org.jfree.data.time.Year var4 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.util.List var10 = var8.getItems();
//     org.jfree.data.time.Year var11 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var13 = var12.previous();
//     org.jfree.data.time.TimeSeries var14 = var8.createCopy((org.jfree.data.time.RegularTimePeriod)var11, var13);
//     boolean var15 = var4.equals((java.lang.Object)var13);
//     int var16 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     org.jfree.data.time.FixedMillisecond var22 = new org.jfree.data.time.FixedMillisecond();
//     var21.delete((org.jfree.data.time.RegularTimePeriod)var22);
//     java.util.Calendar var24 = null;
//     long var25 = var22.getMiddleMillisecond(var24);
//     java.lang.Class var26 = null;
//     org.jfree.data.time.TimeSeries var27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var22, var26);
//     var27.setDescription("");
//     org.jfree.data.time.TimeSeries var30 = var18.addAndOrUpdate(var27);
//     var18.setDomainDescription("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:09 PST 2014]");
//     java.util.Collection var33 = var18.getTimePeriods();
//     java.lang.Class var34 = var18.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var16, var34);
//     org.jfree.data.time.Day var36 = new org.jfree.data.time.Day();
//     java.lang.String var37 = var36.toString();
//     java.lang.String var38 = var36.toString();
//     org.jfree.data.time.RegularTimePeriod var39 = var36.next();
//     java.util.Date var40 = var39.getEnd();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var35.update(var39, (java.lang.Number)1419139759944L);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 1419139773031L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var37 + "' != '" + "20-December-2014"+ "'", var37.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var38 + "' != '" + "20-December-2014"+ "'", var38.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
// 
//   }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     org.jfree.data.time.Day var2 = new org.jfree.data.time.Day();
//     java.lang.String var3 = var2.toString();
//     java.lang.String var4 = var2.toString();
//     java.lang.Object var5 = null;
//     int var6 = var2.compareTo(var5);
//     org.jfree.data.time.RegularTimePeriod var7 = var2.previous();
//     org.jfree.data.time.TimeSeriesDataItem var9 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var2, 100.0d);
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     java.util.List var14 = var12.getItems();
//     org.jfree.data.time.Year var15 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var16 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var17 = var16.previous();
//     org.jfree.data.time.TimeSeries var18 = var12.createCopy((org.jfree.data.time.RegularTimePeriod)var15, var17);
//     long var19 = var15.getFirstMillisecond();
//     java.util.Date var20 = var15.getStart();
//     org.jfree.data.time.RegularTimePeriod var21 = var15.previous();
//     java.lang.String var22 = var15.toString();
//     int var23 = var2.compareTo((java.lang.Object)var15);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.add((org.jfree.data.time.RegularTimePeriod)var15, (java.lang.Number)1419139752915L);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var3 + "' != '" + "20-December-2014"+ "'", var3.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "20-December-2014"+ "'", var4.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "2014"+ "'", var22.equals("2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 0);
// 
//   }

  public void test214() {}
//   public void test214() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     org.jfree.data.time.TimeSeriesDataItem var7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, (-1.0d));
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Object var10 = var9.clone();
//     boolean var11 = var7.equals(var10);
//     org.jfree.data.time.RegularTimePeriod var12 = var7.getPeriod();
//     var7.setValue((java.lang.Number)1419139754361L);
//     java.lang.Number var15 = null;
//     var7.setValue(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139773043L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139773043L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
// 
//   }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    java.lang.String var9 = var6.getDomainDescription();
    var6.setNotify(true);
    var6.removeAgedItems(false);
    java.util.List var14 = var6.getItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Time"+ "'", var9.equals("Time"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }


    org.jfree.data.time.SerialDate var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var2 = org.jfree.data.time.SerialDate.getNearestDayOfWeek(0, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    int var3 = var2.getMonth();
    java.lang.String var4 = var2.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var5 = org.jfree.data.time.SerialDate.addDays(2147483647, (org.jfree.data.time.SerialDate)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "30-January-1900"+ "'", var4.equals("30-January-1900"));

  }

  public void test218() {}
//   public void test218() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var10 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var9);
//     org.jfree.data.general.SeriesChangeEvent var11 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var9);
//     org.jfree.data.time.SpreadsheetDate var15 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var18 = var15.compare((org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var15);
//     org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var24 = var21.compare((org.jfree.data.time.SerialDate)var23);
//     boolean var25 = var15.isOnOrAfter((org.jfree.data.time.SerialDate)var23);
//     org.jfree.data.time.SerialDate var26 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var15);
//     org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var31 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var32 = var29.compare((org.jfree.data.time.SerialDate)var31);
//     org.jfree.data.time.SerialDate var33 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var29);
//     org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var37 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var38 = var35.compare((org.jfree.data.time.SerialDate)var37);
//     boolean var39 = var29.isOnOrAfter((org.jfree.data.time.SerialDate)var37);
//     int var40 = var29.getDayOfMonth();
//     boolean var42 = var9.isInRange(var26, (org.jfree.data.time.SerialDate)var29, 0);
//     boolean var43 = var6.isOnOrBefore(var26);
//     java.lang.String var44 = var6.toString();
//     org.jfree.data.time.Day var45 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var6);
//     java.lang.Number var46 = var2.getValue((org.jfree.data.time.RegularTimePeriod)var45);
//     java.lang.Class var47 = var2.getTimePeriodClass();
//     org.jfree.data.time.FixedMillisecond var48 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var49 = null;
//     long var50 = var48.getFirstMillisecond(var49);
//     java.util.Calendar var51 = null;
//     long var52 = var48.getMiddleMillisecond(var51);
//     java.util.Date var53 = var48.getTime();
//     java.util.Calendar var54 = null;
//     var48.peg(var54);
//     java.util.Date var56 = var48.getStart();
//     var2.add((org.jfree.data.time.RegularTimePeriod)var48, (-1.0d), true);
// 
//   }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.time.SerialDate var6 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var2);
//     org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
//     boolean var12 = var2.isOnOrAfter((org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SerialDate var13 = null;
//     org.jfree.data.time.SerialDate var14 = var10.getEndOfCurrentMonth(var13);
// 
//   }

  public void test220() {}
//   public void test220() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     int var23 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var19);
//     boolean var24 = var5.equals((java.lang.Object)var19);
//     java.util.Calendar var25 = null;
//     long var26 = var5.getFirstMillisecond(var25);
// 
//   }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    org.jfree.data.time.FixedMillisecond var1 = new org.jfree.data.time.FixedMillisecond(1419139751483L);
    long var2 = var1.getMiddleMillisecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1419139751483L);

  }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     boolean var3 = var2.getNotify();
//     boolean var4 = var2.getNotify();
//     java.lang.Class var6 = null;
//     org.jfree.data.time.TimeSeries var7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var6);
//     java.lang.Class var8 = var7.getTimePeriodClass();
//     java.util.List var9 = var7.getItems();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var11 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var12 = var11.previous();
//     org.jfree.data.time.TimeSeries var13 = var7.createCopy((org.jfree.data.time.RegularTimePeriod)var10, var12);
//     long var14 = var10.getFirstMillisecond();
//     java.util.Date var15 = var10.getStart();
//     org.jfree.data.time.TimeSeriesDataItem var17 = var2.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var10, 100.0d);
//     long var18 = var2.getMaximumItemAge();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var2.setMaximumItemCount((-435));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 9223372036854775807L);
// 
//   }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day((-599), 2014, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test224() {}
//   public void test224() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     int var16 = var15.getItemCount();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
//     org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
//     int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.String var30 = var6.getDomainDescription();
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     java.lang.Class var34 = var33.getTimePeriodClass();
//     java.util.List var35 = var33.getItems();
//     org.jfree.data.time.Year var36 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var38 = var37.previous();
//     org.jfree.data.time.TimeSeries var39 = var33.createCopy((org.jfree.data.time.RegularTimePeriod)var36, var38);
//     long var40 = var36.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var41 = var36.next();
//     long var42 = var36.getFirstMillisecond();
//     org.jfree.data.time.Year var43 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var44 = var43.previous();
//     java.lang.Class var46 = null;
//     org.jfree.data.time.TimeSeries var47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var46);
//     java.lang.Class var48 = var47.getTimePeriodClass();
//     java.util.List var49 = var47.getItems();
//     org.jfree.data.time.Year var50 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var51 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var52 = var51.previous();
//     org.jfree.data.time.TimeSeries var53 = var47.createCopy((org.jfree.data.time.RegularTimePeriod)var50, var52);
//     boolean var54 = var43.equals((java.lang.Object)var52);
//     org.jfree.data.time.RegularTimePeriod var55 = var43.previous();
//     org.jfree.data.time.TimeSeries var56 = var6.createCopy((org.jfree.data.time.RegularTimePeriod)var36, (org.jfree.data.time.RegularTimePeriod)var43);
//     java.lang.Object var57 = null;
//     boolean var58 = var36.equals(var57);
//     org.jfree.data.time.TimeSeriesDataItem var60 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var36, 0.0d);
//     java.lang.Object var61 = null;
//     boolean var62 = var36.equals(var61);
//     java.util.Calendar var63 = null;
//     var36.peg(var63);
// 
//   }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     long var6 = var0.getMiddleMillisecond();
//     boolean var8 = var0.equals((java.lang.Object)false);
//     long var9 = var0.getFirstMillisecond();
//     long var10 = var0.getFirstMillisecond();
//     long var11 = var0.getMiddleMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139773570L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139773570L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139773570L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1419139773570L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1419139773570L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1419139773570L);
// 
//   }

  public void test226() {}
//   public void test226() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }
// 
// 
//     org.jfree.data.time.Year var0 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     long var2 = var0.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var3 = var0.previous();
//     long var4 = var0.getFirstMillisecond();
//     java.lang.Class var6 = null;
//     org.jfree.data.time.TimeSeries var7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var6);
//     int var8 = var7.getItemCount();
//     java.lang.String var9 = var7.getDescription();
//     java.beans.PropertyChangeListener var10 = null;
//     var7.removePropertyChangeListener(var10);
//     int var12 = var7.getItemCount();
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     java.lang.Class var16 = var15.getTimePeriodClass();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     java.lang.Class var20 = var19.getTimePeriodClass();
//     java.util.Collection var21 = var15.getTimePeriodsUniqueToOtherSeries(var19);
//     org.jfree.data.time.TimeSeries var22 = var7.addAndOrUpdate(var19);
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     int var26 = var25.getItemCount();
//     java.lang.Class var28 = null;
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var28);
//     org.jfree.data.time.FixedMillisecond var30 = new org.jfree.data.time.FixedMillisecond();
//     var29.delete((org.jfree.data.time.RegularTimePeriod)var30);
//     java.lang.Class var33 = null;
//     org.jfree.data.time.TimeSeries var34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var33);
//     org.jfree.data.time.FixedMillisecond var35 = new org.jfree.data.time.FixedMillisecond();
//     var34.delete((org.jfree.data.time.RegularTimePeriod)var35);
//     java.lang.Number var37 = var29.getValue((org.jfree.data.time.RegularTimePeriod)var35);
//     org.jfree.data.time.TimeSeriesDataItem var38 = var25.getDataItem((org.jfree.data.time.RegularTimePeriod)var35);
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var42 = null;
//     org.jfree.data.time.TimeSeries var43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var42);
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond();
//     var43.delete((org.jfree.data.time.RegularTimePeriod)var44);
//     java.util.Calendar var46 = null;
//     long var47 = var44.getMiddleMillisecond(var46);
//     java.lang.Class var48 = null;
//     org.jfree.data.time.TimeSeries var49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var44, var48);
//     var49.setDescription("");
//     org.jfree.data.time.TimeSeries var52 = var40.addAndOrUpdate(var49);
//     java.lang.String var53 = var49.getDescription();
//     var49.setDescription("2015");
//     org.jfree.data.time.TimeSeries var56 = var25.addAndOrUpdate(var49);
//     java.util.Collection var57 = var22.getTimePeriodsUniqueToOtherSeries(var25);
//     boolean var58 = var0.equals((java.lang.Object)var25);
//     org.jfree.data.time.FixedMillisecond var59 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var60 = null;
//     long var61 = var59.getMiddleMillisecond(var60);
//     java.util.Date var62 = var59.getEnd();
//     org.jfree.data.time.Day var63 = new org.jfree.data.time.Day(var62);
//     org.jfree.data.time.RegularTimePeriod var64 = var63.next();
//     var25.add(var64, (java.lang.Number)1419139770360L);
// 
//   }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var5);
    int var7 = var2.getMaximumItemCount();
    java.lang.Comparable var8 = var2.getKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.TimeSeries var11 = var2.createCopy(10, 4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + (short)100+ "'", var8.equals((short)100));

  }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.String var20 = var19.toString();
//     long var21 = var19.getFirstMillisecond();
//     org.jfree.data.time.Year var22 = var19.getYear();
//     long var23 = var22.getSerialIndex();
//     long var24 = var22.getMiddleMillisecond();
//     org.jfree.data.time.RegularTimePeriod var25 = var22.next();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "December 2014"+ "'", var20.equals("December 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 2014L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1404331199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
// 
//   }

  public void test229() {}
//   public void test229() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     long var6 = var0.getLastMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139773718L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139773718L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139773718L);
// 
//   }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
//     int var6 = var4.getDayOfWeek();
//     org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addYears(1, (org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.time.SerialDate var8 = null;
//     boolean var9 = var4.isOnOrAfter(var8);
// 
//   }

  public void test231() {}
//   public void test231() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     java.lang.String var9 = var5.toString();
//     int var10 = var5.getYear();
//     org.jfree.data.time.Day var11 = new org.jfree.data.time.Day();
//     int var12 = var11.getYear();
//     int var13 = var11.getYear();
//     org.jfree.data.time.RegularTimePeriod var14 = var11.next();
//     int var15 = var5.compareTo((java.lang.Object)var11);
//     java.util.Calendar var16 = null;
//     var5.peg(var16);
// 
//   }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     org.jfree.data.time.FixedMillisecond var4 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
//     java.util.Calendar var6 = null;
//     long var7 = var4.getMiddleMillisecond(var6);
//     org.jfree.data.time.RegularTimePeriod var8 = var4.previous();
//     int var9 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
//     long var10 = var4.getFirstMillisecond();
//     long var11 = var4.getFirstMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139773725L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1419139773725L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1419139773725L);
// 
//   }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     org.jfree.data.time.TimeSeriesDataItem var7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, (-1.0d));
//     java.util.Date var8 = var0.getTime();
//     java.util.TimeZone var9 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var10 = new org.jfree.data.time.Day(var8, var9);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139773729L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139773729L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
// 
//   }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.lang.Class var6 = null;
//     org.jfree.data.time.TimeSeries var7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var6);
//     org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
//     var7.delete((org.jfree.data.time.RegularTimePeriod)var8);
//     java.util.Calendar var10 = null;
//     long var11 = var8.getMiddleMillisecond(var10);
//     int var12 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var8);
//     org.jfree.data.general.SeriesChangeListener var13 = null;
//     var2.removeChangeListener(var13);
//     var2.setRangeDescription("org.jfree.data.time.TimePeriodFormatException: org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.RegularTimePeriod var17 = var2.getNextTimePeriod();
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1419139773731L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == (-1));
// 
//   }

  public void test235() {}
//   public void test235() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     var17.removeAgedItems(0L, true);
// 
//   }

  public void test236() {}
//   public void test236() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.general.SeriesChangeEvent var15 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.lang.Class var22 = null;
//     org.jfree.data.time.TimeSeries var23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond();
//     var23.delete((org.jfree.data.time.RegularTimePeriod)var24);
//     java.lang.Number var26 = var18.getValue((org.jfree.data.time.RegularTimePeriod)var24);
//     long var27 = var24.getFirstMillisecond();
//     org.jfree.data.time.TimeSeries var28 = var1.createCopy((org.jfree.data.time.RegularTimePeriod)var14, (org.jfree.data.time.RegularTimePeriod)var24);
//     java.lang.Class var30 = null;
//     org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var30);
//     java.lang.Class var32 = var31.getTimePeriodClass();
//     java.lang.Class var34 = null;
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var34);
//     java.lang.Class var36 = var35.getTimePeriodClass();
//     java.util.Collection var37 = var31.getTimePeriodsUniqueToOtherSeries(var35);
//     java.lang.Class var39 = null;
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var39);
//     java.lang.Class var41 = var40.getTimePeriodClass();
//     java.util.List var42 = var40.getItems();
//     java.lang.String var43 = var40.getRangeDescription();
//     java.beans.PropertyChangeListener var44 = null;
//     var40.removePropertyChangeListener(var44);
//     java.util.Collection var46 = var40.getTimePeriods();
//     var40.removeAgedItems(false);
//     boolean var49 = var31.equals((java.lang.Object)var40);
//     java.util.Collection var50 = var31.getTimePeriods();
//     org.jfree.data.time.TimeSeries var51 = var28.addAndOrUpdate(var31);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var53 = var51.getValue(2014);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139773851L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == 1419139773853L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var43 + "' != '" + "Value"+ "'", var43.equals("Value"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
// 
//   }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     java.lang.String var17 = var10.getDescription();
//     boolean var18 = var10.isEmpty();
//     boolean var19 = var10.isEmpty();
//     org.jfree.data.time.RegularTimePeriod var20 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var10.add(var20, (java.lang.Number)2147483647, true);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139773857L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "2015"+ "'", var17.equals("2015"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == true);
// 
//   }

  public void test238() {}
//   public void test238() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     java.lang.String var17 = var10.getDomainDescription();
//     var10.setKey((java.lang.Comparable)1419139748031L);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var21 = null;
//     var20.peg(var21);
//     var10.setKey((java.lang.Comparable)var20);
//     int var24 = var10.getMaximumItemCount();
//     var10.setRangeDescription("");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var28 = var10.getDataItem(0);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139773860L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "Time"+ "'", var17.equals("Time"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 2147483647);
// 
//   }

  public void test239() {}
//   public void test239() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     org.jfree.data.time.Year var67 = var39.getYear();
//     java.util.Calendar var68 = null;
//     long var69 = var39.getLastMillisecond(var68);
// 
//   }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
//     org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
//     org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
//     boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
//     org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var17 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var16);
//     org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var20);
//     org.jfree.data.general.SeriesChangeEvent var22 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var20);
//     boolean var23 = var11.isInRange(var17, (org.jfree.data.time.SerialDate)var20);
//     org.jfree.data.time.SerialDate var24 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var20);
//     int var25 = var20.getMonth();
//     org.jfree.data.time.SpreadsheetDate var27 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var30 = var27.compare((org.jfree.data.time.SerialDate)var29);
//     int var31 = var29.getMonth();
//     boolean var32 = var20.isOn((org.jfree.data.time.SerialDate)var29);
//     int var33 = var20.getDayOfMonth();
//     org.jfree.data.time.SerialDate var34 = null;
//     org.jfree.data.time.SpreadsheetDate var36 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var39 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var40 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var39);
//     org.jfree.data.general.SeriesChangeEvent var41 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var39);
//     org.jfree.data.time.SpreadsheetDate var45 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var48 = var45.compare((org.jfree.data.time.SerialDate)var47);
//     org.jfree.data.time.SerialDate var49 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var45);
//     org.jfree.data.time.SpreadsheetDate var51 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var53 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var54 = var51.compare((org.jfree.data.time.SerialDate)var53);
//     boolean var55 = var45.isOnOrAfter((org.jfree.data.time.SerialDate)var53);
//     org.jfree.data.time.SerialDate var56 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var45);
//     org.jfree.data.time.SpreadsheetDate var59 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var62 = var59.compare((org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.time.SerialDate var63 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var59);
//     org.jfree.data.time.SpreadsheetDate var65 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var67 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var68 = var65.compare((org.jfree.data.time.SerialDate)var67);
//     boolean var69 = var59.isOnOrAfter((org.jfree.data.time.SerialDate)var67);
//     int var70 = var59.getDayOfMonth();
//     boolean var72 = var39.isInRange(var56, (org.jfree.data.time.SerialDate)var59, 0);
//     boolean var73 = var36.isOnOrBefore(var56);
//     java.lang.String var74 = var36.toString();
//     org.jfree.data.time.Day var75 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var36);
//     org.jfree.data.time.SerialDate var76 = var75.getSerialDate();
//     boolean var77 = var20.isInRange(var34, var76);
// 
//   }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.createInstance(30, (-571), 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     long var18 = var14.getMaximumItemAge();
//     boolean var19 = var14.getNotify();
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     java.lang.Class var23 = var22.getTimePeriodClass();
//     java.util.List var24 = var22.getItems();
//     java.lang.String var25 = var22.getRangeDescription();
//     java.beans.PropertyChangeListener var26 = null;
//     var22.removePropertyChangeListener(var26);
//     java.util.Collection var28 = var22.getTimePeriods();
//     var22.removeAgedItems(false);
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     org.jfree.data.time.FixedMillisecond var34 = new org.jfree.data.time.FixedMillisecond();
//     var33.delete((org.jfree.data.time.RegularTimePeriod)var34);
//     java.util.Calendar var36 = null;
//     long var37 = var34.getMiddleMillisecond(var36);
//     java.lang.Class var38 = null;
//     org.jfree.data.time.TimeSeries var39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var34, var38);
//     java.lang.Class var41 = null;
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var41);
//     java.lang.Class var43 = var42.getTimePeriodClass();
//     java.lang.Class var45 = null;
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var45);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     java.util.Collection var48 = var42.getTimePeriodsUniqueToOtherSeries(var46);
//     boolean var49 = var34.equals((java.lang.Object)var48);
//     org.jfree.data.time.TimeSeriesDataItem var51 = var22.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var34, (-1.0d));
//     var22.fireSeriesChanged();
//     org.jfree.data.time.TimeSeries var53 = var14.addAndOrUpdate(var22);
//     java.lang.String var54 = var53.getDomainDescription();
//     org.jfree.data.general.SeriesChangeListener var55 = null;
//     var53.addChangeListener(var55);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeries var59 = var53.createCopy(13, 1);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 9223372036854775807L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "Value"+ "'", var25.equals("Value"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == 1419139773934L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var54 + "' != '" + "Time"+ "'", var54.equals("Time"));
// 
//   }

  public void test243() {}
//   public void test243() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     boolean var3 = var2.getNotify();
//     boolean var4 = var2.getNotify();
//     java.lang.Class var6 = null;
//     org.jfree.data.time.TimeSeries var7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var6);
//     java.lang.Class var8 = var7.getTimePeriodClass();
//     java.util.List var9 = var7.getItems();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var11 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var12 = var11.previous();
//     org.jfree.data.time.TimeSeries var13 = var7.createCopy((org.jfree.data.time.RegularTimePeriod)var10, var12);
//     long var14 = var10.getFirstMillisecond();
//     java.util.Date var15 = var10.getStart();
//     org.jfree.data.time.TimeSeriesDataItem var17 = var2.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var10, 100.0d);
//     org.jfree.data.time.Year var18 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var19 = var18.next();
//     long var20 = var19.getMiddleMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var22 = new org.jfree.data.time.TimeSeriesDataItem(var19, (-1.0d));
//     var2.delete(var19);
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     java.lang.Class var27 = var26.getTimePeriodClass();
//     java.lang.Class var29 = null;
//     org.jfree.data.time.TimeSeries var30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var29);
//     java.lang.Class var31 = var30.getTimePeriodClass();
//     java.util.Collection var32 = var26.getTimePeriodsUniqueToOtherSeries(var30);
//     int var33 = var30.getMaximumItemCount();
//     org.jfree.data.time.Year var34 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var35 = var34.next();
//     org.jfree.data.time.TimeSeriesDataItem var36 = var30.getDataItem(var35);
//     java.lang.Class var38 = null;
//     org.jfree.data.time.TimeSeries var39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var38);
//     int var40 = var39.getItemCount();
//     java.lang.Class var42 = null;
//     org.jfree.data.time.TimeSeries var43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var42);
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond();
//     var43.delete((org.jfree.data.time.RegularTimePeriod)var44);
//     java.lang.Class var47 = null;
//     org.jfree.data.time.TimeSeries var48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var47);
//     org.jfree.data.time.FixedMillisecond var49 = new org.jfree.data.time.FixedMillisecond();
//     var48.delete((org.jfree.data.time.RegularTimePeriod)var49);
//     java.lang.Number var51 = var43.getValue((org.jfree.data.time.RegularTimePeriod)var49);
//     org.jfree.data.time.TimeSeriesDataItem var52 = var39.getDataItem((org.jfree.data.time.RegularTimePeriod)var49);
//     int var53 = var30.getIndex((org.jfree.data.time.RegularTimePeriod)var49);
//     java.lang.String var54 = var30.getDomainDescription();
//     java.lang.Class var56 = null;
//     org.jfree.data.time.TimeSeries var57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var56);
//     java.lang.Class var58 = var57.getTimePeriodClass();
//     java.util.List var59 = var57.getItems();
//     org.jfree.data.time.Year var60 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var61 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var62 = var61.previous();
//     org.jfree.data.time.TimeSeries var63 = var57.createCopy((org.jfree.data.time.RegularTimePeriod)var60, var62);
//     long var64 = var60.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var65 = var60.next();
//     long var66 = var60.getFirstMillisecond();
//     org.jfree.data.time.Year var67 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var68 = var67.previous();
//     java.lang.Class var70 = null;
//     org.jfree.data.time.TimeSeries var71 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var70);
//     java.lang.Class var72 = var71.getTimePeriodClass();
//     java.util.List var73 = var71.getItems();
//     org.jfree.data.time.Year var74 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var75 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var76 = var75.previous();
//     org.jfree.data.time.TimeSeries var77 = var71.createCopy((org.jfree.data.time.RegularTimePeriod)var74, var76);
//     boolean var78 = var67.equals((java.lang.Object)var76);
//     org.jfree.data.time.RegularTimePeriod var79 = var67.previous();
//     org.jfree.data.time.TimeSeries var80 = var30.createCopy((org.jfree.data.time.RegularTimePeriod)var60, (org.jfree.data.time.RegularTimePeriod)var67);
//     java.lang.Object var81 = null;
//     boolean var82 = var60.equals(var81);
//     var2.add((org.jfree.data.time.RegularTimePeriod)var60, 1.0d);
// 
//   }

  public void test244() {}
//   public void test244() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
//     boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
//     int var38 = var12.compareTo((java.lang.Object)var25);
//     org.jfree.data.time.RegularTimePeriod var39 = var12.next();
//     java.lang.String var40 = var12.toString();
//     java.lang.String var41 = var12.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139774173L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139774173L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "December 2014"+ "'", var40.equals("December 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var41 + "' != '" + "December 2014"+ "'", var41.equals("December 2014"));
// 
//   }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }


    int var1 = org.jfree.data.time.SerialDate.stringToMonthCode("December 2014");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
    org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
    java.lang.Class var12 = null;
    org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var12);
    org.jfree.data.time.TimeSeries var14 = var8.addAndOrUpdate(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var16 = var14.getValue(13);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test247() {}
//   public void test247() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Month var20 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Month var21 = new org.jfree.data.time.Month(var16);
//     org.jfree.data.time.Day var22 = new org.jfree.data.time.Day(var16);
//     org.jfree.data.time.Day var23 = new org.jfree.data.time.Day(var16);
//     java.util.Calendar var24 = null;
//     var23.peg(var24);
// 
//   }

  public void test248() {}
//   public void test248() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     var2.setRangeDescription("");
//     int var5 = var2.getMaximumItemCount();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     int var23 = var18.compareTo((java.lang.Object)"Value");
//     long var24 = var18.getLastMillisecond();
//     java.util.Calendar var25 = null;
//     long var26 = var18.getFirstMillisecond(var25);
//     java.util.Calendar var27 = null;
//     var18.peg(var27);
//     long var29 = var18.getSerialIndex();
//     java.lang.Class var31 = null;
//     org.jfree.data.time.TimeSeries var32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var31);
//     java.lang.Class var33 = var32.getTimePeriodClass();
//     java.util.List var34 = var32.getItems();
//     org.jfree.data.time.Year var35 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var36 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var37 = var36.previous();
//     org.jfree.data.time.TimeSeries var38 = var32.createCopy((org.jfree.data.time.RegularTimePeriod)var35, var37);
//     long var39 = var35.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var40 = var35.next();
//     java.lang.Class var42 = null;
//     org.jfree.data.time.TimeSeries var43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var42);
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond();
//     var43.delete((org.jfree.data.time.RegularTimePeriod)var44);
//     java.lang.Class var47 = null;
//     org.jfree.data.time.TimeSeries var48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var47);
//     org.jfree.data.time.FixedMillisecond var49 = new org.jfree.data.time.FixedMillisecond();
//     var48.delete((org.jfree.data.time.RegularTimePeriod)var49);
//     java.util.Calendar var51 = null;
//     long var52 = var49.getMiddleMillisecond(var51);
//     int var53 = var43.getIndex((org.jfree.data.time.RegularTimePeriod)var49);
//     boolean var54 = var35.equals((java.lang.Object)var49);
//     org.jfree.data.time.TimeSeries var55 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var18, (org.jfree.data.time.RegularTimePeriod)var35);
//     var55.removeAgedItems(1419139766136L, true);
// 
//   }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.relativeToString(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ERROR : Relative To String"+ "'", var1.equals("ERROR : Relative To String"));

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }


    org.jfree.data.general.SeriesException var1 = new org.jfree.data.general.SeriesException("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]"+ "'", var2.equals("org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]"));

  }

  public void test251() {}
//   public void test251() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     long var5 = var4.getSerialIndex();
//     java.util.Calendar var6 = null;
//     var4.peg(var6);
// 
//   }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("Time");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test253() {}
//   public void test253() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.beans.PropertyChangeListener var24 = null;
//     var13.addPropertyChangeListener(var24);
//     int var26 = var13.getMaximumItemCount();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139774566L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 2147483647);
// 
//   }

  public void test254() {}
//   public void test254() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.String var20 = var19.toString();
//     int var21 = var19.getYearValue();
//     long var22 = var19.getLastMillisecond();
//     java.util.Calendar var23 = null;
//     long var24 = var19.getLastMillisecond(var23);
// 
//   }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }


    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
    org.jfree.data.general.SeriesChangeEvent var2 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var1);
    boolean var3 = var1.isEmpty();
    var1.setDomainDescription("org.jfree.data.general.SeriesChangeEvent[source=1419139747407]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test256() {}
//   public void test256() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     long var5 = var4.getSerialIndex();
//     long var6 = var4.getMiddleMillisecond();
//     java.util.Date var7 = var4.getEnd();
//     java.util.Calendar var8 = null;
//     long var9 = var4.getFirstMillisecond(var8);
// 
//   }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
    var2.fireSeriesChanged();
    java.lang.Class var6 = var2.getTimePeriodClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.delete(1, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }
// 
// 
//     org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(3, 3);
//     int var3 = var2.getMonth();
//     org.jfree.data.time.TimeSeriesDataItem var5 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var2, (java.lang.Number)1419139761592L);
//     java.util.Calendar var6 = null;
//     var2.peg(var6);
// 
//   }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    int var1 = org.jfree.data.time.SerialDate.leapYearCount((-453));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-570));

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.String var4 = var2.getDescription();
    long var5 = var2.getMaximumItemAge();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.TimeSeriesDataItem var7 = var2.getDataItem(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9223372036854775807L);

  }

  public void test261() {}
//   public void test261() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     java.lang.String var9 = var5.toString();
//     int var10 = var5.getYear();
//     org.jfree.data.time.Day var11 = new org.jfree.data.time.Day();
//     int var12 = var11.getYear();
//     int var13 = var11.getYear();
//     org.jfree.data.time.RegularTimePeriod var14 = var11.next();
//     int var15 = var5.compareTo((java.lang.Object)var11);
//     org.jfree.data.time.SerialDate var16 = var11.getSerialDate();
//     java.util.Calendar var17 = null;
//     long var18 = var11.getMiddleMillisecond(var17);
// 
//   }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("org.jfree.data.general.SeriesException: Time");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekdayCodeToString(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Sunday"+ "'", var1.equals("Sunday"));

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var17 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var16);
    org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var20);
    org.jfree.data.general.SeriesChangeEvent var22 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var20);
    boolean var23 = var11.isInRange(var17, (org.jfree.data.time.SerialDate)var20);
    org.jfree.data.time.SerialDate var24 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var20);
    int var25 = var20.getYYYY();
    org.jfree.data.time.SerialDate var27 = var20.getNearestDayOfWeek(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var29 = var20.getFollowingDayOfWeek(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1900);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    int var2 = var1.getMonth();
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    int var9 = var6.compare((org.jfree.data.time.SerialDate)var8);
    org.jfree.data.time.SerialDate var10 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
    int var15 = var12.compare((org.jfree.data.time.SerialDate)var14);
    boolean var16 = var6.isOnOrAfter((org.jfree.data.time.SerialDate)var14);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var20 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var19);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var24 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var23);
    org.jfree.data.general.SeriesChangeEvent var25 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var23);
    boolean var26 = var14.isInRange(var20, (org.jfree.data.time.SerialDate)var23);
    org.jfree.data.time.SerialDate var27 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var23);
    int var28 = var23.getMonth();
    org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(12);
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var36 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var35);
    org.jfree.data.general.SeriesChangeEvent var37 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var35);
    org.jfree.data.time.SpreadsheetDate var41 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var43 = new org.jfree.data.time.SpreadsheetDate(31);
    int var44 = var41.compare((org.jfree.data.time.SerialDate)var43);
    org.jfree.data.time.SerialDate var45 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var41);
    org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var49 = new org.jfree.data.time.SpreadsheetDate(31);
    int var50 = var47.compare((org.jfree.data.time.SerialDate)var49);
    boolean var51 = var41.isOnOrAfter((org.jfree.data.time.SerialDate)var49);
    org.jfree.data.time.SerialDate var52 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var41);
    org.jfree.data.time.SpreadsheetDate var55 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
    int var58 = var55.compare((org.jfree.data.time.SerialDate)var57);
    org.jfree.data.time.SerialDate var59 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var55);
    org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var63 = new org.jfree.data.time.SpreadsheetDate(31);
    int var64 = var61.compare((org.jfree.data.time.SerialDate)var63);
    boolean var65 = var55.isOnOrAfter((org.jfree.data.time.SerialDate)var63);
    int var66 = var55.getDayOfMonth();
    boolean var68 = var35.isInRange(var52, (org.jfree.data.time.SerialDate)var55, 0);
    boolean var69 = var32.isOnOrBefore(var52);
    org.jfree.data.time.SerialDate var70 = var30.getEndOfCurrentMonth(var52);
    boolean var71 = var1.isInRange((org.jfree.data.time.SerialDate)var23, var52);
    int var72 = var1.toSerial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 31);

  }

  public void test266() {}
//   public void test266() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     int var16 = var15.getItemCount();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
//     org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
//     int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.String var30 = var6.getDomainDescription();
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     java.lang.Class var34 = var33.getTimePeriodClass();
//     java.util.List var35 = var33.getItems();
//     org.jfree.data.time.Year var36 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var38 = var37.previous();
//     org.jfree.data.time.TimeSeries var39 = var33.createCopy((org.jfree.data.time.RegularTimePeriod)var36, var38);
//     long var40 = var36.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var41 = var36.next();
//     long var42 = var36.getFirstMillisecond();
//     org.jfree.data.time.Year var43 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var44 = var43.previous();
//     java.lang.Class var46 = null;
//     org.jfree.data.time.TimeSeries var47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var46);
//     java.lang.Class var48 = var47.getTimePeriodClass();
//     java.util.List var49 = var47.getItems();
//     org.jfree.data.time.Year var50 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var51 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var52 = var51.previous();
//     org.jfree.data.time.TimeSeries var53 = var47.createCopy((org.jfree.data.time.RegularTimePeriod)var50, var52);
//     boolean var54 = var43.equals((java.lang.Object)var52);
//     org.jfree.data.time.RegularTimePeriod var55 = var43.previous();
//     org.jfree.data.time.TimeSeries var56 = var6.createCopy((org.jfree.data.time.RegularTimePeriod)var36, (org.jfree.data.time.RegularTimePeriod)var43);
//     var56.setMaximumItemAge(1419139750824L);
//     org.jfree.data.time.Year var59 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var60 = var59.next();
//     long var61 = var60.getMiddleMillisecond();
//     java.lang.String var62 = var60.toString();
//     org.jfree.data.time.TimeSeriesDataItem var64 = var56.addOrUpdate(var60, 1.0d);
//     org.jfree.data.time.TimeSeries var65 = null;
//     org.jfree.data.time.TimeSeries var66 = var56.addAndOrUpdate(var65);
// 
//   }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    java.util.Date var15 = var3.toDate();
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
    int var21 = var18.compare((org.jfree.data.time.SerialDate)var20);
    org.jfree.data.time.SerialDate var22 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
    int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
    boolean var28 = var18.isOnOrAfter((org.jfree.data.time.SerialDate)var26);
    org.jfree.data.time.SpreadsheetDate var31 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var32 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var31);
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var36 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var35);
    org.jfree.data.general.SeriesChangeEvent var37 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var35);
    boolean var38 = var26.isInRange(var32, (org.jfree.data.time.SerialDate)var35);
    org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var42 = new org.jfree.data.time.SpreadsheetDate(31);
    int var43 = var40.compare((org.jfree.data.time.SerialDate)var42);
    int var44 = var42.getDayOfMonth();
    java.lang.String var45 = var42.getDescription();
    org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
    int var48 = var47.getMonth();
    int var49 = var42.compare((org.jfree.data.time.SerialDate)var47);
    boolean var51 = var3.isInRange(var32, (org.jfree.data.time.SerialDate)var47, 3);
    int var52 = var3.getDayOfMonth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var54 = var3.getPreviousDayOfWeek(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 30);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("Second");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = org.jfree.data.time.Year.parseYear("2-February-1900");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test270() {}
//   public void test270() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     int var23 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var19);
//     boolean var24 = var5.equals((java.lang.Object)var19);
//     java.util.Calendar var25 = null;
//     long var26 = var19.getMiddleMillisecond(var25);
//     java.util.Date var27 = var19.getTime();
//     java.util.Date var28 = var19.getTime();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139775197L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1419139775197L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test271() {}
//   public void test271() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     int var23 = var22.getItemCount();
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
//     java.lang.Class var30 = null;
//     org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var30);
//     org.jfree.data.time.FixedMillisecond var32 = new org.jfree.data.time.FixedMillisecond();
//     var31.delete((org.jfree.data.time.RegularTimePeriod)var32);
//     java.lang.Number var34 = var26.getValue((org.jfree.data.time.RegularTimePeriod)var32);
//     org.jfree.data.time.TimeSeriesDataItem var35 = var22.getDataItem((org.jfree.data.time.RegularTimePeriod)var32);
//     int var37 = var32.compareTo((java.lang.Object)"Value");
//     int var38 = var19.compareTo((java.lang.Object)var32);
//     org.jfree.data.time.Day var39 = new org.jfree.data.time.Day();
//     java.lang.String var40 = var39.toString();
//     java.lang.String var41 = var39.toString();
//     java.lang.Object var42 = null;
//     int var43 = var39.compareTo(var42);
//     org.jfree.data.time.RegularTimePeriod var44 = var39.previous();
//     boolean var45 = var19.equals((java.lang.Object)var39);
//     long var46 = var19.getFirstMillisecond();
//     java.util.Calendar var47 = null;
//     long var48 = var19.getFirstMillisecond(var47);
// 
//   }

  public void test272() {}
//   public void test272() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     java.util.Date var10 = var5.getStart();
//     org.jfree.data.time.SerialDate var11 = org.jfree.data.time.SerialDate.createInstance(var10);
//     org.jfree.data.time.SerialDate var12 = org.jfree.data.time.SerialDate.createInstance(var10);
//     org.jfree.data.time.Year var13 = new org.jfree.data.time.Year(var10);
//     java.util.TimeZone var14 = null;
//     org.jfree.data.time.Month var15 = new org.jfree.data.time.Month(var10, var14);
// 
//   }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
    org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
    java.lang.String var9 = var2.getRangeDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var11 = var2.getValue((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Value"+ "'", var9.equals("Value"));

  }

  public void test274() {}
//   public void test274() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getMonth();
//     java.lang.String var2 = var0.toString();
//     long var3 = var0.getMiddleMillisecond();
//     java.util.Calendar var4 = null;
//     long var5 = var0.getFirstMillisecond(var4);
// 
//   }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }


    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    int var7 = var4.compare((org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addYears(30, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addYears(20, var8);
    org.jfree.data.time.SerialDate var10 = org.jfree.data.time.SerialDate.addYears(1, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test276() {}
//   public void test276() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     long var11 = var5.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var12 = var5.next();
//     org.jfree.data.time.RegularTimePeriod var13 = var5.previous();
//     java.util.Date var14 = var5.getEnd();
//     java.util.TimeZone var15 = null;
//     org.jfree.data.time.Year var16 = new org.jfree.data.time.Year(var14, var15);
// 
//   }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    int var1 = org.jfree.data.time.SerialDate.stringToWeekdayCode("Time");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     boolean var14 = var1.isEmpty();
//     java.lang.String var15 = var1.getDomainDescription();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeries var18 = var1.createCopy(1900, (-599));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139775404L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var15 + "' != '" + "Time"+ "'", var15.equals("Time"));
// 
//   }

  public void test279() {}
//   public void test279() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }
// 
// 
//     java.lang.Class var2 = null;
//     org.jfree.data.time.TimeSeries var3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var2);
//     org.jfree.data.time.FixedMillisecond var4 = new org.jfree.data.time.FixedMillisecond();
//     var3.delete((org.jfree.data.time.RegularTimePeriod)var4);
//     var3.fireSeriesChanged();
//     java.lang.Class var8 = null;
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var8);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     java.lang.Class var14 = var13.getTimePeriodClass();
//     java.util.Collection var15 = var9.getTimePeriodsUniqueToOtherSeries(var13);
//     var9.clear();
//     org.jfree.data.time.TimeSeries var17 = var3.addAndOrUpdate(var9);
//     java.util.Collection var18 = var17.getTimePeriods();
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var20 = null;
//     long var21 = var19.getFirstMillisecond(var20);
//     java.util.Calendar var22 = null;
//     long var23 = var19.getMiddleMillisecond(var22);
//     java.util.Date var24 = var19.getTime();
//     org.jfree.data.time.TimeSeries var28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var29 = var28.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var24, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var29);
//     org.jfree.data.time.Month var31 = new org.jfree.data.time.Month();
//     var30.setKey((java.lang.Comparable)var31);
//     long var33 = var31.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var36 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var39 = var36.compare((org.jfree.data.time.SerialDate)var38);
//     org.jfree.data.time.SerialDate var40 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var36);
//     org.jfree.data.time.SpreadsheetDate var42 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var45 = var42.compare((org.jfree.data.time.SerialDate)var44);
//     boolean var46 = var36.isOnOrAfter((org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var49 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var50 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var49);
//     org.jfree.data.time.SpreadsheetDate var53 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var54 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var53);
//     org.jfree.data.general.SeriesChangeEvent var55 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var53);
//     boolean var56 = var44.isInRange(var50, (org.jfree.data.time.SerialDate)var53);
//     int var57 = var31.compareTo((java.lang.Object)var44);
//     var17.setKey((java.lang.Comparable)var44);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.SerialDate var59 = org.jfree.data.time.SerialDate.getPreviousDayOfWeek(0, (org.jfree.data.time.SerialDate)var44);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 1419139775407L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 1419139775407L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var56 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == 1);
// 
//   }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day((-599), 2014, 4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    int var7 = var4.compare((org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
    boolean var14 = var4.isOnOrAfter((org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var18 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var17);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var22 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var21);
    org.jfree.data.general.SeriesChangeEvent var23 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var21);
    boolean var24 = var12.isInRange(var18, (org.jfree.data.time.SerialDate)var21);
    org.jfree.data.time.SerialDate var25 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var21);
    int var26 = var21.getMonth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var27 = org.jfree.data.time.SerialDate.getFollowingDayOfWeek(29, (org.jfree.data.time.SerialDate)var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);

  }

  public void test282() {}
//   public void test282() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     java.lang.String var19 = var18.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var19 + "' != '" + "Sat Dec 20 21:29:35 PST 2014"+ "'", var19.equals("Sat Dec 20 21:29:35 PST 2014"));
// 
//   }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.String var4 = var2.getDescription();
    var2.clear();
    java.util.List var6 = var2.getItems();
    var2.setRangeDescription("org.jfree.data.general.SeriesException: Time");
    java.lang.Comparable var9 = var2.getKey();
    var2.setNotify(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (short)100+ "'", var9.equals((short)100));

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = org.jfree.data.time.Year.parseYear("Following");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test285() {}
//   public void test285() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.String var20 = var19.toString();
//     long var21 = var19.getFirstMillisecond();
//     java.util.Date var22 = var19.getStart();
//     org.jfree.data.time.Year var23 = new org.jfree.data.time.Year(var22);
//     java.util.TimeZone var24 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var25 = new org.jfree.data.time.Day(var22, var24);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var20 + "' != '" + "December 2014"+ "'", var20.equals("December 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
// 
//   }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond();
//     var16.delete((org.jfree.data.time.RegularTimePeriod)var17);
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     org.jfree.data.time.FixedMillisecond var22 = new org.jfree.data.time.FixedMillisecond();
//     var21.delete((org.jfree.data.time.RegularTimePeriod)var22);
//     java.util.Calendar var24 = null;
//     long var25 = var22.getMiddleMillisecond(var24);
//     int var26 = var16.getIndex((org.jfree.data.time.RegularTimePeriod)var22);
//     var1.delete((org.jfree.data.time.RegularTimePeriod)var22);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.RegularTimePeriod var28 = var1.getNextTimePeriod();
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139775584L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 1419139775585L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == (-1));
// 
//   }

  public void test287() {}
//   public void test287() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     java.lang.String var5 = var2.getRangeDescription();
//     java.beans.PropertyChangeListener var6 = null;
//     var2.removePropertyChangeListener(var6);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     int var11 = var10.getItemCount();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     var14.delete((org.jfree.data.time.RegularTimePeriod)var15);
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Number var22 = var14.getValue((org.jfree.data.time.RegularTimePeriod)var20);
//     org.jfree.data.time.TimeSeriesDataItem var23 = var10.getDataItem((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
//     java.util.Calendar var29 = null;
//     long var30 = var27.getMiddleMillisecond(var29);
//     java.lang.Class var31 = null;
//     org.jfree.data.time.TimeSeries var32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var27, var31);
//     java.lang.Class var34 = null;
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var34);
//     java.lang.Class var36 = var35.getTimePeriodClass();
//     java.lang.Class var38 = null;
//     org.jfree.data.time.TimeSeries var39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var38);
//     java.lang.Class var40 = var39.getTimePeriodClass();
//     java.util.Collection var41 = var35.getTimePeriodsUniqueToOtherSeries(var39);
//     boolean var42 = var27.equals((java.lang.Object)var41);
//     java.util.Calendar var43 = null;
//     long var44 = var27.getFirstMillisecond(var43);
//     org.jfree.data.time.TimeSeries var45 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var20, (org.jfree.data.time.RegularTimePeriod)var27);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.RegularTimePeriod var47 = var2.getTimePeriod(0);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var5 + "' != '" + "Value"+ "'", var5.equals("Value"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == 1419139775604L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 1419139775604L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
// 
//   }

  public void test288() {}
//   public void test288() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Object var2 = var1.clone();
//     var1.removeAgedItems(1419139766451L, true);
//     org.jfree.data.general.SeriesChangeListener var6 = null;
//     var1.removeChangeListener(var6);
//     org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var9 = null;
//     long var10 = var8.getFirstMillisecond(var9);
//     java.util.Calendar var11 = null;
//     long var12 = var8.getMiddleMillisecond(var11);
//     java.util.Date var13 = var8.getTime();
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var13, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var18);
//     org.jfree.data.time.Month var20 = new org.jfree.data.time.Month();
//     var19.setKey((java.lang.Comparable)var20);
//     long var22 = var20.getFirstMillisecond();
//     long var23 = var20.getSerialIndex();
//     int var24 = var20.getYearValue();
//     org.jfree.data.time.Year var25 = var20.getYear();
//     org.jfree.data.time.FixedMillisecond var26 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var27 = var26.previous();
//     java.util.Calendar var28 = null;
//     long var29 = var26.getMiddleMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var26.getLastMillisecond(var30);
//     long var32 = var26.getMiddleMillisecond();
//     boolean var34 = var26.equals((java.lang.Object)false);
//     long var35 = var26.getFirstMillisecond();
//     int var36 = var20.compareTo((java.lang.Object)var35);
//     org.jfree.data.time.RegularTimePeriod var37 = var20.previous();
//     var1.delete(var37);
//     org.jfree.data.time.RegularTimePeriod var39 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var40 = var1.getDataItem(var39);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1419139775607L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 1419139775607L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 1419139775609L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 1419139775609L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 1419139775609L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 1419139775609L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var36 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.jfree.data.time.SerialDate.lastDayOfMonth(28, (-453));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }
// 
// 
//     org.jfree.data.time.Year var0 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.next();
//     long var2 = var1.getMiddleMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var4 = new org.jfree.data.time.TimeSeriesDataItem(var1, (-1.0d));
//     java.lang.Object var5 = var4.clone();
//     var4.setValue((java.lang.Number)1419139760135L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1435867199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
// 
//   }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }


    org.jfree.data.general.SeriesException var1 = new org.jfree.data.general.SeriesException("31-January-1900");

  }

  public void test292() {}
//   public void test292() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     java.lang.Class var19 = null;
//     org.jfree.data.time.TimeSeries var20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var19);
//     int var21 = var20.getItemCount();
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Class var28 = null;
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var28);
//     org.jfree.data.time.FixedMillisecond var30 = new org.jfree.data.time.FixedMillisecond();
//     var29.delete((org.jfree.data.time.RegularTimePeriod)var30);
//     java.lang.Number var32 = var24.getValue((org.jfree.data.time.RegularTimePeriod)var30);
//     org.jfree.data.time.TimeSeriesDataItem var33 = var20.getDataItem((org.jfree.data.time.RegularTimePeriod)var30);
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var37 = null;
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var37);
//     org.jfree.data.time.FixedMillisecond var39 = new org.jfree.data.time.FixedMillisecond();
//     var38.delete((org.jfree.data.time.RegularTimePeriod)var39);
//     java.util.Calendar var41 = null;
//     long var42 = var39.getMiddleMillisecond(var41);
//     java.lang.Class var43 = null;
//     org.jfree.data.time.TimeSeries var44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var39, var43);
//     var44.setDescription("");
//     org.jfree.data.time.TimeSeries var47 = var35.addAndOrUpdate(var44);
//     java.lang.String var48 = var44.getDescription();
//     var44.setDescription("2015");
//     org.jfree.data.time.TimeSeries var51 = var20.addAndOrUpdate(var44);
//     java.util.Collection var52 = var17.getTimePeriodsUniqueToOtherSeries(var20);
//     var17.removeAgedItems(false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == 1419139775738L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
// 
//   }

  public void test293() {}
//   public void test293() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Day var12 = new org.jfree.data.time.Day(var5);
//     long var13 = var12.getSerialIndex();
//     java.util.Calendar var14 = null;
//     long var15 = var12.getLastMillisecond(var14);
// 
//   }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    int var4 = var1.compare((org.jfree.data.time.SerialDate)var3);
    int var5 = var3.getDayOfMonth();
    int var6 = var3.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
    int var12 = var10.getMonth();
    boolean var13 = var3.isAfter((org.jfree.data.time.SerialDate)var10);
    int var14 = var10.getMonth();
    java.util.Date var15 = var10.toDate();
    java.util.TimeZone var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var17 = new org.jfree.data.time.Day(var15, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }


    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    int var7 = var4.compare((org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
    boolean var14 = var4.isOnOrAfter((org.jfree.data.time.SerialDate)var12);
    int var15 = var4.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
    int var21 = var18.compare((org.jfree.data.time.SerialDate)var20);
    org.jfree.data.time.SerialDate var22 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var18);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
    int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
    boolean var28 = var18.isOnOrAfter((org.jfree.data.time.SerialDate)var26);
    int var29 = var18.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var33 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    int var36 = var33.compare((org.jfree.data.time.SerialDate)var35);
    org.jfree.data.time.SerialDate var37 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var33);
    org.jfree.data.time.SpreadsheetDate var39 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var41 = new org.jfree.data.time.SpreadsheetDate(31);
    int var42 = var39.compare((org.jfree.data.time.SerialDate)var41);
    boolean var43 = var33.isOnOrAfter((org.jfree.data.time.SerialDate)var41);
    org.jfree.data.time.SerialDate var44 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var33);
    org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var48 = new org.jfree.data.time.SpreadsheetDate(31);
    int var49 = var46.compare((org.jfree.data.time.SerialDate)var48);
    int var50 = var48.getMonth();
    boolean var51 = var33.isOnOrAfter((org.jfree.data.time.SerialDate)var48);
    boolean var52 = var4.isInRange((org.jfree.data.time.SerialDate)var18, (org.jfree.data.time.SerialDate)var33);
    org.jfree.data.time.SpreadsheetDate var55 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
    int var58 = var55.compare((org.jfree.data.time.SerialDate)var57);
    org.jfree.data.time.SerialDate var59 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var55);
    org.jfree.data.time.Day var61 = new org.jfree.data.time.Day();
    org.jfree.data.time.SerialDate var62 = var61.getSerialDate();
    org.jfree.data.time.SerialDate var63 = org.jfree.data.time.SerialDate.getNearestDayOfWeek(3, var62);
    boolean var64 = var33.isInRange((org.jfree.data.time.SerialDate)var55, var63);
    org.jfree.data.time.SerialDate var65 = org.jfree.data.time.SerialDate.addMonths(31, (org.jfree.data.time.SerialDate)var33);
    org.jfree.data.time.SerialDate var66 = org.jfree.data.time.SerialDate.addYears(30, (org.jfree.data.time.SerialDate)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test296() {}
//   public void test296() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     var11.setNotify(true);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var11.setMaximumItemCount((-452));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139776061L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139776061L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
// 
//   }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getFirstMillisecond(var7);
// 
//   }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    int var9 = var6.getMaximumItemCount();
    org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
    org.jfree.data.time.RegularTimePeriod var11 = var10.next();
    org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
    java.lang.Class var14 = null;
    org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
    int var16 = var15.getItemCount();
    java.lang.Class var18 = null;
    org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
    org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
    var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.Class var23 = null;
    org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
    org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
    var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
    java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
    org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
    int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
    java.lang.String var30 = var6.getDomainDescription();
    org.jfree.data.general.SeriesChangeListener var31 = null;
    var6.removeChangeListener(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.TimeSeries var35 = var6.createCopy((-572), (-459));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Time"+ "'", var30.equals("Time"));

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
    var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
    java.util.Collection var5 = var2.getTimePeriods();
    int var6 = var2.getMaximumItemCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.delete(13, (-452));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483647);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.String var4 = var2.getDescription();
    java.beans.PropertyChangeListener var5 = null;
    var2.removePropertyChangeListener(var5);
    int var7 = var2.getItemCount();
    java.lang.Class var9 = null;
    org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
    java.lang.Class var11 = var10.getTimePeriodClass();
    java.lang.Class var13 = null;
    org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
    java.lang.Class var15 = var14.getTimePeriodClass();
    java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
    org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
    java.beans.PropertyChangeListener var18 = null;
    var14.addPropertyChangeListener(var18);
    var14.setMaximumItemCount(1900);
    java.util.List var22 = var14.getItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test301() {}
//   public void test301() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.lang.String var1 = var0.toString();
//     java.lang.String var2 = var0.toString();
//     java.lang.Object var3 = null;
//     int var4 = var0.compareTo(var3);
//     java.util.Calendar var5 = null;
//     long var6 = var0.getFirstMillisecond(var5);
// 
//   }

  public void test302() {}
//   public void test302() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.beans.PropertyChangeListener var24 = null;
//     var13.addPropertyChangeListener(var24);
//     org.jfree.data.time.TimeSeries var28 = var13.createCopy(1, 1900);
//     java.lang.String var29 = var28.getDescription();
//     int var30 = var28.getItemCount();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139776089L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == 0);
// 
//   }

  public void test303() {}
//   public void test303() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     int var67 = var25.getYearValue();
//     java.util.Calendar var68 = null;
//     long var69 = var25.getLastMillisecond(var68);
// 
//   }

  public void test304() {}
//   public void test304() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.String var11 = var5.toString();
//     long var12 = var5.getLastMillisecond();
//     long var13 = var5.getLastMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "2014"+ "'", var11.equals("2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 1420099199999L);
// 
//   }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.jfree.data.time.SerialDate.lastDayOfMonth(13, 13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test306() {}
//   public void test306() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     boolean var15 = var1.equals((java.lang.Object)(byte)0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139776141L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
// 
//   }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    var2.setRangeDescription("");
    int var5 = var2.getMaximumItemCount();
    long var6 = var2.getMaximumItemAge();
    java.lang.String var7 = var2.getRangeDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9223372036854775807L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));

  }

  public void test308() {}
//   public void test308() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var8.update((-565), (java.lang.Number)1419139769908L);
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139776159L);
// 
//   }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.lang.String var1 = var0.toString();
//     java.lang.String var2 = var0.toString();
//     java.lang.Object var3 = null;
//     int var4 = var0.compareTo(var3);
//     org.jfree.data.time.RegularTimePeriod var5 = var0.previous();
//     long var6 = var0.getMiddleMillisecond();
//     java.lang.String var7 = var0.toString();
//     org.jfree.data.time.SerialDate var8 = var0.getSerialDate();
//     int var9 = var0.getYear();
//     long var10 = var0.getSerialIndex();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "20-December-2014"+ "'", var1.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "20-December-2014"+ "'", var2.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419105599999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "20-December-2014"+ "'", var7.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 41993L);
// 
//   }

  public void test310() {}
//   public void test310() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     var8.setDescription("");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var8.setMaximumItemCount((-570));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139776248L);
// 
//   }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(2147483647, (-572));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test312() {}
//   public void test312() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     org.jfree.data.time.Year var67 = var39.getYear();
//     java.util.Calendar var68 = null;
//     long var69 = var39.getFirstMillisecond(var68);
// 
//   }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }


    org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var2);
    org.jfree.data.general.SeriesChangeEvent var4 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var2);
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
    int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
    org.jfree.data.time.SerialDate var12 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var8);
    org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
    int var17 = var14.compare((org.jfree.data.time.SerialDate)var16);
    boolean var18 = var8.isOnOrAfter((org.jfree.data.time.SerialDate)var16);
    org.jfree.data.time.SerialDate var19 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var8);
    org.jfree.data.time.SpreadsheetDate var22 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
    int var25 = var22.compare((org.jfree.data.time.SerialDate)var24);
    org.jfree.data.time.SerialDate var26 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var22);
    org.jfree.data.time.SpreadsheetDate var28 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
    int var31 = var28.compare((org.jfree.data.time.SerialDate)var30);
    boolean var32 = var22.isOnOrAfter((org.jfree.data.time.SerialDate)var30);
    int var33 = var22.getDayOfMonth();
    boolean var35 = var2.isInRange(var19, (org.jfree.data.time.SerialDate)var22, 0);
    int var36 = var22.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 30);

  }

  public void test314() {}
//   public void test314() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }
// 
// 
//     org.jfree.data.time.SerialDate var1 = null;
//     org.jfree.data.time.SerialDate var2 = org.jfree.data.time.SerialDate.addMonths(31, var1);
// 
//   }

  public void test315() {}
//   public void test315() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var6 = null;
//     long var7 = var5.getMiddleMillisecond(var6);
//     java.util.Date var8 = var5.getEnd();
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     java.lang.Class var12 = var11.getTimePeriodClass();
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     java.lang.Class var16 = var15.getTimePeriodClass();
//     java.util.Collection var17 = var11.getTimePeriodsUniqueToOtherSeries(var15);
//     org.jfree.data.general.SeriesChangeEvent var18 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var11);
//     boolean var19 = var5.equals((java.lang.Object)var11);
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.RegularTimePeriod var22 = var2.getTimePeriod(1);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139776388L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
// 
//   }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate((-571), 31, (-435));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    int var7 = var4.compare((org.jfree.data.time.SerialDate)var6);
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addYears(30, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var4);
    org.jfree.data.time.SerialDate var11 = var4.getFollowingDayOfWeek(4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var12 = org.jfree.data.time.SerialDate.addDays(2147483647, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }


    org.jfree.data.time.SerialDate var1 = org.jfree.data.time.SerialDate.createInstance(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.jfree.data.time.SerialDate.lastDayOfMonth((-452), 0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test320() {}
//   public void test320() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     int var16 = var15.getItemCount();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
//     org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
//     int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.String var30 = var6.getDomainDescription();
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     java.lang.Class var34 = var33.getTimePeriodClass();
//     java.util.List var35 = var33.getItems();
//     org.jfree.data.time.Year var36 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var38 = var37.previous();
//     org.jfree.data.time.TimeSeries var39 = var33.createCopy((org.jfree.data.time.RegularTimePeriod)var36, var38);
//     long var40 = var36.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var41 = var36.next();
//     long var42 = var36.getFirstMillisecond();
//     org.jfree.data.time.Year var43 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var44 = var43.previous();
//     java.lang.Class var46 = null;
//     org.jfree.data.time.TimeSeries var47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var46);
//     java.lang.Class var48 = var47.getTimePeriodClass();
//     java.util.List var49 = var47.getItems();
//     org.jfree.data.time.Year var50 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var51 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var52 = var51.previous();
//     org.jfree.data.time.TimeSeries var53 = var47.createCopy((org.jfree.data.time.RegularTimePeriod)var50, var52);
//     boolean var54 = var43.equals((java.lang.Object)var52);
//     org.jfree.data.time.RegularTimePeriod var55 = var43.previous();
//     org.jfree.data.time.TimeSeries var56 = var6.createCopy((org.jfree.data.time.RegularTimePeriod)var36, (org.jfree.data.time.RegularTimePeriod)var43);
//     org.jfree.data.time.Day var57 = new org.jfree.data.time.Day();
//     java.lang.String var58 = var57.toString();
//     java.lang.String var59 = var57.toString();
//     java.lang.Object var60 = null;
//     int var61 = var57.compareTo(var60);
//     org.jfree.data.time.RegularTimePeriod var62 = var57.previous();
//     org.jfree.data.time.TimeSeriesDataItem var64 = var56.addOrUpdate(var62, (java.lang.Number)1419139758374L);
//     org.jfree.data.time.Day var65 = new org.jfree.data.time.Day();
//     int var66 = var65.getMonth();
//     var56.setKey((java.lang.Comparable)var66);
//     java.lang.Class var69 = null;
//     org.jfree.data.time.TimeSeries var70 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var69);
//     int var71 = var70.getItemCount();
//     java.lang.Class var73 = null;
//     org.jfree.data.time.TimeSeries var74 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var73);
//     org.jfree.data.time.FixedMillisecond var75 = new org.jfree.data.time.FixedMillisecond();
//     var74.delete((org.jfree.data.time.RegularTimePeriod)var75);
//     java.lang.Class var78 = null;
//     org.jfree.data.time.TimeSeries var79 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var78);
//     org.jfree.data.time.FixedMillisecond var80 = new org.jfree.data.time.FixedMillisecond();
//     var79.delete((org.jfree.data.time.RegularTimePeriod)var80);
//     java.lang.Number var82 = var74.getValue((org.jfree.data.time.RegularTimePeriod)var80);
//     org.jfree.data.time.TimeSeriesDataItem var83 = var70.getDataItem((org.jfree.data.time.RegularTimePeriod)var80);
//     java.util.Date var84 = var80.getStart();
//     org.jfree.data.time.FixedMillisecond var85 = new org.jfree.data.time.FixedMillisecond(var84);
//     org.jfree.data.time.FixedMillisecond var86 = new org.jfree.data.time.FixedMillisecond(var84);
//     org.jfree.data.time.Month var87 = new org.jfree.data.time.Month(var84);
//     org.jfree.data.time.TimeSeriesDataItem var89 = var56.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var87, (java.lang.Number)1419139759421L);
//     java.lang.String var90 = var56.getRangeDescription();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var30 + "' != '" + "Time"+ "'", var30.equals("Time"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var58 + "' != '" + "20-December-2014"+ "'", var58.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var59 + "' != '" + "20-December-2014"+ "'", var59.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var61 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var66 == 12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var71 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var84);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var89);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var90 + "' != '" + "Value"+ "'", var90.equals("Value"));
// 
//   }

  public void test321() {}
//   public void test321() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }
// 
// 
//     org.jfree.data.time.Year var0 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     java.lang.Class var5 = var4.getTimePeriodClass();
//     java.util.List var6 = var4.getItems();
//     org.jfree.data.time.Year var7 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var9 = var8.previous();
//     org.jfree.data.time.TimeSeries var10 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var7, var9);
//     boolean var11 = var0.equals((java.lang.Object)var9);
//     org.jfree.data.time.RegularTimePeriod var12 = var0.previous();
//     org.jfree.data.time.RegularTimePeriod var13 = var0.previous();
//     long var14 = var0.getFirstMillisecond();
//     java.util.Calendar var15 = null;
//     long var16 = var0.getFirstMillisecond(var15);
// 
//   }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    int var14 = var3.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    int var22 = var19.compare((org.jfree.data.time.SerialDate)var21);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var19);
    boolean var24 = var3.isInRange((org.jfree.data.time.SerialDate)var16, (org.jfree.data.time.SerialDate)var19);
    int var25 = var19.getDayOfWeek();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var26 = org.jfree.data.time.SerialDate.getFollowingDayOfWeek((-572), (org.jfree.data.time.SerialDate)var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3);

  }

  public void test323() {}
//   public void test323() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     long var15 = var12.getSerialIndex();
//     org.jfree.data.time.Year var16 = var12.getYear();
//     long var17 = var12.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var18 = var12.previous();
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     int var22 = var21.getItemCount();
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     org.jfree.data.time.FixedMillisecond var26 = new org.jfree.data.time.FixedMillisecond();
//     var25.delete((org.jfree.data.time.RegularTimePeriod)var26);
//     java.lang.Class var29 = null;
//     org.jfree.data.time.TimeSeries var30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var29);
//     org.jfree.data.time.FixedMillisecond var31 = new org.jfree.data.time.FixedMillisecond();
//     var30.delete((org.jfree.data.time.RegularTimePeriod)var31);
//     java.lang.Number var33 = var25.getValue((org.jfree.data.time.RegularTimePeriod)var31);
//     org.jfree.data.time.TimeSeriesDataItem var34 = var21.getDataItem((org.jfree.data.time.RegularTimePeriod)var31);
//     java.util.Date var35 = var31.getStart();
//     org.jfree.data.time.FixedMillisecond var36 = new org.jfree.data.time.FixedMillisecond(var35);
//     org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond(var35);
//     java.util.Calendar var38 = null;
//     long var39 = var37.getMiddleMillisecond(var38);
//     int var40 = var12.compareTo((java.lang.Object)var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139776828L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139776828L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 1419139776831L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 1);
// 
//   }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekInMonthToString(30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SerialDate.weekInMonthToString(): invalid code."+ "'", var1.equals("SerialDate.weekInMonthToString(): invalid code."));

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var4 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.general.SeriesChangeEvent var5 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var3);
    org.jfree.data.time.SerialDate var6 = org.jfree.data.time.SerialDate.getPreviousDayOfWeek(4, (org.jfree.data.time.SerialDate)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var8 = var6.getNearestDayOfWeek(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    int var8 = var3.getDayOfWeek();
    java.util.Date var9 = var3.toDate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var10 = org.jfree.data.time.SerialDate.getPreviousDayOfWeek((-453), (org.jfree.data.time.SerialDate)var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekInMonthToString((-453));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "SerialDate.weekInMonthToString(): invalid code."+ "'", var1.equals("SerialDate.weekInMonthToString(): invalid code."));

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    int var9 = var6.getMaximumItemCount();
    org.jfree.data.general.SeriesException var11 = new org.jfree.data.general.SeriesException("Time");
    java.lang.String var12 = var11.toString();
    boolean var13 = var6.equals((java.lang.Object)var11);
    var6.setKey((java.lang.Comparable)1419139761638L);
    org.jfree.data.time.TimeSeries var18 = var6.createCopy(0, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var19 = var6.getNextTimePeriod();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jfree.data.general.SeriesException: Time"+ "'", var12.equals("org.jfree.data.general.SeriesException: Time"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test329() {}
//   public void test329() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     int var24 = var13.getMaximumItemCount();
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var27 = var26.getTimePeriodClass();
//     int var28 = var26.getItemCount();
//     var26.setRangeDescription("Oct");
//     org.jfree.data.time.FixedMillisecond var31 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var32 = null;
//     long var33 = var31.getFirstMillisecond(var32);
//     java.util.Calendar var34 = null;
//     long var35 = var31.getMiddleMillisecond(var34);
//     java.util.Date var36 = var31.getTime();
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var41 = var40.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var36, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var41);
//     org.jfree.data.time.Month var43 = new org.jfree.data.time.Month();
//     var42.setKey((java.lang.Comparable)var43);
//     long var45 = var43.getFirstMillisecond();
//     long var46 = var43.getSerialIndex();
//     int var47 = var43.getYearValue();
//     int var48 = var26.getIndex((org.jfree.data.time.RegularTimePeriod)var43);
//     int var49 = var13.getIndex((org.jfree.data.time.RegularTimePeriod)var43);
//     org.jfree.data.time.RegularTimePeriod var50 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       int var51 = var13.getIndex(var50);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139777003L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 1419139777006L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 1419139777006L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == (-1));
// 
//   }

  public void test330() {}
//   public void test330() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     java.lang.Object var5 = var4.clone();
//     int var6 = var4.getMaximumItemCount();
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var8 = null;
//     long var9 = var7.getFirstMillisecond(var8);
//     java.util.Calendar var10 = null;
//     long var11 = var7.getMiddleMillisecond(var10);
//     java.lang.Number var12 = var4.getValue((org.jfree.data.time.RegularTimePeriod)var7);
//     long var13 = var7.getMiddleMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1419139777010L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1419139777010L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 1419139777010L);
// 
//   }

  public void test331() {}
//   public void test331() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
//     boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
//     int var38 = var12.compareTo((java.lang.Object)var25);
//     org.jfree.data.time.RegularTimePeriod var39 = var12.next();
//     java.lang.Class var41 = null;
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var41);
//     java.lang.Class var43 = var42.getTimePeriodClass();
//     java.lang.Class var45 = null;
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var45);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     java.util.Collection var48 = var42.getTimePeriodsUniqueToOtherSeries(var46);
//     int var49 = var46.getMaximumItemCount();
//     org.jfree.data.time.Year var50 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var51 = var50.next();
//     org.jfree.data.time.TimeSeriesDataItem var52 = var46.getDataItem(var51);
//     java.lang.Class var54 = null;
//     org.jfree.data.time.TimeSeries var55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var54);
//     int var56 = var55.getItemCount();
//     java.lang.Class var58 = null;
//     org.jfree.data.time.TimeSeries var59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var58);
//     org.jfree.data.time.FixedMillisecond var60 = new org.jfree.data.time.FixedMillisecond();
//     var59.delete((org.jfree.data.time.RegularTimePeriod)var60);
//     java.lang.Class var63 = null;
//     org.jfree.data.time.TimeSeries var64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var63);
//     org.jfree.data.time.FixedMillisecond var65 = new org.jfree.data.time.FixedMillisecond();
//     var64.delete((org.jfree.data.time.RegularTimePeriod)var65);
//     java.lang.Number var67 = var59.getValue((org.jfree.data.time.RegularTimePeriod)var65);
//     org.jfree.data.time.TimeSeriesDataItem var68 = var55.getDataItem((org.jfree.data.time.RegularTimePeriod)var65);
//     int var69 = var46.getIndex((org.jfree.data.time.RegularTimePeriod)var65);
//     org.jfree.data.time.RegularTimePeriod var70 = var65.next();
//     int var71 = var12.compareTo((java.lang.Object)var70);
//     org.jfree.data.time.RegularTimePeriod var72 = var12.previous();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139777013L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139777013L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var56 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var71 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var72);
// 
//   }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("2-February-1900");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test333() {}
//   public void test333() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     java.lang.Object var15 = var10.clone();
//     java.beans.PropertyChangeListener var16 = null;
//     var10.addPropertyChangeListener(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139777066L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
// 
//   }

  public void test334() {}
//   public void test334() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     var2.setRangeDescription("");
//     int var5 = var2.getMaximumItemCount();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     int var23 = var18.compareTo((java.lang.Object)"Value");
//     long var24 = var18.getLastMillisecond();
//     java.util.Calendar var25 = null;
//     long var26 = var18.getFirstMillisecond(var25);
//     java.util.Calendar var27 = null;
//     var18.peg(var27);
//     long var29 = var18.getSerialIndex();
//     java.lang.Class var31 = null;
//     org.jfree.data.time.TimeSeries var32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var31);
//     java.lang.Class var33 = var32.getTimePeriodClass();
//     java.util.List var34 = var32.getItems();
//     org.jfree.data.time.Year var35 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var36 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var37 = var36.previous();
//     org.jfree.data.time.TimeSeries var38 = var32.createCopy((org.jfree.data.time.RegularTimePeriod)var35, var37);
//     long var39 = var35.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var40 = var35.next();
//     java.lang.Class var42 = null;
//     org.jfree.data.time.TimeSeries var43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var42);
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond();
//     var43.delete((org.jfree.data.time.RegularTimePeriod)var44);
//     java.lang.Class var47 = null;
//     org.jfree.data.time.TimeSeries var48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var47);
//     org.jfree.data.time.FixedMillisecond var49 = new org.jfree.data.time.FixedMillisecond();
//     var48.delete((org.jfree.data.time.RegularTimePeriod)var49);
//     java.util.Calendar var51 = null;
//     long var52 = var49.getMiddleMillisecond(var51);
//     int var53 = var43.getIndex((org.jfree.data.time.RegularTimePeriod)var49);
//     boolean var54 = var35.equals((java.lang.Object)var49);
//     org.jfree.data.time.TimeSeries var55 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var18, (org.jfree.data.time.RegularTimePeriod)var35);
//     java.lang.Class var57 = null;
//     org.jfree.data.time.TimeSeries var58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var57);
//     org.jfree.data.time.FixedMillisecond var59 = new org.jfree.data.time.FixedMillisecond();
//     var58.delete((org.jfree.data.time.RegularTimePeriod)var59);
//     java.util.Calendar var61 = null;
//     long var62 = var59.getMiddleMillisecond(var61);
//     java.lang.Class var63 = null;
//     org.jfree.data.time.TimeSeries var64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var59, var63);
//     java.lang.String var65 = var64.getRangeDescription();
//     var64.setKey((java.lang.Comparable)(-452));
//     boolean var68 = var18.equals((java.lang.Object)var64);
//     org.jfree.data.time.RegularTimePeriod var69 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var64.update(var69, (java.lang.Number)(short)100);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1419139777075L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1419139777075L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 1419139777075L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var52 == 1419139777078L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var62 == 1419139777079L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var65 + "' != '" + "Value"+ "'", var65.equals("Value"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == false);
// 
//   }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("org.jfree.data.general.SeriesChangeEvent[source=1419139747407]");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }


    org.jfree.data.general.SeriesException var1 = new org.jfree.data.general.SeriesException("");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    java.lang.Throwable[] var3 = var1.getSuppressed();
    org.jfree.data.general.SeriesException var5 = new org.jfree.data.general.SeriesException("Time");
    var1.addSuppressed((java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month((-571), (-599));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test338() {}
//   public void test338() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     long var10 = var5.getSerialIndex();
//     java.util.Date var11 = var5.getEnd();
//     org.jfree.data.time.Day var12 = new org.jfree.data.time.Day(var11);
//     int var13 = var12.getDayOfMonth();
//     java.util.Calendar var14 = null;
//     long var15 = var12.getFirstMillisecond(var14);
// 
//   }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }
// 
// 
//     java.lang.Comparable var0 = null;
//     org.jfree.data.time.FixedMillisecond var1 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var2 = null;
//     long var3 = var1.getFirstMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var1.getMiddleMillisecond(var4);
//     java.util.Date var6 = var1.getTime();
//     java.util.Calendar var7 = null;
//     var1.peg(var7);
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var12 = org.jfree.data.time.RegularTimePeriod.downsize(var11);
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var1, var11);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries(var0, var11);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139777187L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139777187L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
// 
//   }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var7 = new org.jfree.data.time.SpreadsheetDate(31);
    int var8 = var5.compare((org.jfree.data.time.SerialDate)var7);
    org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var13 = new org.jfree.data.time.SpreadsheetDate(31);
    int var14 = var11.compare((org.jfree.data.time.SerialDate)var13);
    boolean var15 = var5.isOnOrAfter((org.jfree.data.time.SerialDate)var13);
    int var16 = var5.getDayOfMonth();
    org.jfree.data.time.SerialDate var17 = org.jfree.data.time.SerialDate.addDays((-1), (org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var18 = org.jfree.data.time.SerialDate.addDays(4, var17);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    int var24 = var21.compare((org.jfree.data.time.SerialDate)var23);
    org.jfree.data.time.SerialDate var25 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var21);
    int var26 = var21.getDayOfWeek();
    org.jfree.data.time.SpreadsheetDate var28 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
    int var31 = var28.compare((org.jfree.data.time.SerialDate)var30);
    org.jfree.data.time.SerialDate var32 = var21.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var30);
    org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
    int var35 = var34.getMonth();
    org.jfree.data.time.SpreadsheetDate var38 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
    int var41 = var38.compare((org.jfree.data.time.SerialDate)var40);
    org.jfree.data.time.SerialDate var42 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var38);
    org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
    int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
    boolean var48 = var38.isOnOrAfter((org.jfree.data.time.SerialDate)var46);
    org.jfree.data.time.SpreadsheetDate var51 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var52 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var51);
    org.jfree.data.time.SpreadsheetDate var55 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var56 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var55);
    org.jfree.data.general.SeriesChangeEvent var57 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var55);
    boolean var58 = var46.isInRange(var52, (org.jfree.data.time.SerialDate)var55);
    int var59 = var55.getDayOfMonth();
    boolean var60 = var34.isOnOrAfter((org.jfree.data.time.SerialDate)var55);
    boolean var61 = var30.isOn((org.jfree.data.time.SerialDate)var34);
    org.jfree.data.time.SerialDate var62 = var17.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var63 = org.jfree.data.time.SerialDate.addDays(2147483647, var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    org.jfree.data.time.Month var0 = new org.jfree.data.time.Month();
    org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    int var3 = var2.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("Sat Dec 20 21:29:35 PST 2014");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidWeekInMonthCode(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = org.jfree.data.time.SerialDate.monthCodeToString(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }
// 
// 
//     org.jfree.data.time.Year var1 = null;
//     org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(1, var1);
// 
//   }

  public void test346() {}
//   public void test346() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     long var5 = var4.getSerialIndex();
//     long var6 = var4.getMiddleMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var4.previous();
//     org.jfree.data.time.RegularTimePeriod var8 = var4.next();
//     int var9 = var4.getYear();
//     java.lang.String var10 = var4.toString();
//     java.util.Calendar var11 = null;
//     var4.peg(var11);
// 
//   }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    int var9 = var6.getMaximumItemCount();
    org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
    org.jfree.data.time.RegularTimePeriod var11 = var10.next();
    org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
    java.lang.Class var14 = null;
    org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
    int var16 = var15.getItemCount();
    java.lang.Class var18 = null;
    org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
    org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
    var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.Class var23 = null;
    org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
    org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
    var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
    java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
    org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
    int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
    java.lang.String var30 = var6.getDomainDescription();
    org.jfree.data.general.SeriesChangeListener var31 = null;
    var6.removeChangeListener(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var33 = var6.getNextTimePeriod();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Time"+ "'", var30.equals("Time"));

  }

  public void test348() {}
//   public void test348() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var12);
//     org.jfree.data.time.TimeSeries var14 = var8.addAndOrUpdate(var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     java.util.List var19 = var17.getItems();
//     org.jfree.data.time.Year var20 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var21 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var22 = var21.previous();
//     org.jfree.data.time.TimeSeries var23 = var17.createCopy((org.jfree.data.time.RegularTimePeriod)var20, var22);
//     long var24 = var20.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var25 = var20.next();
//     long var26 = var20.getLastMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var28 = var13.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var20, 100.0d);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var13.delete(2014, (-460));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var28);
// 
//   }

  public void test349() {}
//   public void test349() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     long var17 = var12.getSerialIndex();
//     org.jfree.data.time.TimeSeriesDataItem var19 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var12, 100.0d);
//     org.jfree.data.time.TimeSeries var20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 1419139777676L);
// 
//   }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    int var1 = org.jfree.data.time.SerialDate.leapYearCount(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-457));

  }

  public void test351() {}
//   public void test351() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var19 = null;
//     long var20 = var18.getFirstMillisecond(var19);
//     java.util.Calendar var21 = null;
//     long var22 = var18.getMiddleMillisecond(var21);
//     java.util.Date var23 = var18.getTime();
//     java.util.Calendar var24 = null;
//     var18.peg(var24);
//     org.jfree.data.time.TimeSeriesDataItem var27 = var14.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var18, 100.0d);
//     long var28 = var18.getMiddleMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 1419139777706L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139777706L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 1419139777706L);
// 
//   }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
//     int var6 = var4.getDayOfMonth();
//     java.lang.String var7 = var4.getDescription();
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
//     org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond();
//     var22.delete((org.jfree.data.time.RegularTimePeriod)var23);
//     java.lang.Number var25 = var17.getValue((org.jfree.data.time.RegularTimePeriod)var23);
//     long var26 = var23.getFirstMillisecond();
//     boolean var27 = var10.equals((java.lang.Object)var26);
//     org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var31 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var32 = var29.compare((org.jfree.data.time.SerialDate)var31);
//     boolean var33 = var10.isOnOrAfter((org.jfree.data.time.SerialDate)var29);
//     java.util.Date var34 = var29.toDate();
//     org.jfree.data.time.SpreadsheetDate var37 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var38 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var37);
//     boolean var39 = var4.isInRange((org.jfree.data.time.SerialDate)var29, var38);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.SerialDate var40 = org.jfree.data.time.SerialDate.addMonths((-457), (org.jfree.data.time.SerialDate)var29);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1419139777748L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == true);
// 
//   }

  public void test353() {}
//   public void test353() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var4 = null;
//     long var5 = var3.getFirstMillisecond(var4);
//     java.util.Calendar var6 = null;
//     long var7 = var3.getMiddleMillisecond(var6);
//     java.util.Date var8 = var3.getTime();
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var8, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var13);
//     java.lang.Class var15 = org.jfree.data.time.RegularTimePeriod.downsize(var13);
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var13);
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.util.Calendar var22 = null;
//     long var23 = var20.getMiddleMillisecond(var22);
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var20, var24);
//     java.lang.Class var27 = null;
//     org.jfree.data.time.TimeSeries var28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var27);
//     java.lang.Class var29 = var28.getTimePeriodClass();
//     java.lang.Class var31 = null;
//     org.jfree.data.time.TimeSeries var32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var31);
//     java.lang.Class var33 = var32.getTimePeriodClass();
//     java.util.Collection var34 = var28.getTimePeriodsUniqueToOtherSeries(var32);
//     boolean var35 = var20.equals((java.lang.Object)var34);
//     org.jfree.data.time.TimeSeriesDataItem var37 = var16.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var20, (java.lang.Number)1900);
//     org.jfree.data.time.RegularTimePeriod var38 = var20.next();
//     java.util.Date var39 = var20.getEnd();
//     org.jfree.data.time.Year var40 = new org.jfree.data.time.Year(var39);
//     org.jfree.data.time.Year var41 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var42 = var41.previous();
//     long var43 = var41.getSerialIndex();
//     long var44 = var41.getFirstMillisecond();
//     long var45 = var41.getFirstMillisecond();
//     int var46 = var40.compareTo((java.lang.Object)var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139777751L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139777751L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 1419139777752L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 2014L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 1);
// 
//   }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }


    org.jfree.data.general.SeriesException var1 = new org.jfree.data.general.SeriesException("Time");
    java.lang.String var2 = var1.toString();
    java.lang.Throwable[] var3 = var1.getSuppressed();
    java.lang.String var4 = var1.toString();
    org.jfree.data.time.TimePeriodFormatException var6 = new org.jfree.data.time.TimePeriodFormatException("Time");
    java.lang.String var7 = var6.toString();
    var1.addSuppressed((java.lang.Throwable)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.jfree.data.general.SeriesException: Time"+ "'", var2.equals("org.jfree.data.general.SeriesException: Time"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.data.general.SeriesException: Time"+ "'", var4.equals("org.jfree.data.general.SeriesException: Time"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jfree.data.time.TimePeriodFormatException: Time"+ "'", var7.equals("org.jfree.data.time.TimePeriodFormatException: Time"));

  }

  public void test355() {}
//   public void test355() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     long var10 = var5.getSerialIndex();
//     java.util.Date var11 = var5.getEnd();
//     org.jfree.data.time.Day var12 = new org.jfree.data.time.Day(var11);
//     java.util.Calendar var13 = null;
//     long var14 = var12.getMiddleMillisecond(var13);
// 
//   }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate((-572), (-459), 2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }


    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
    java.lang.Class var2 = var1.getTimePeriodClass();
    var1.setDomainDescription("hi!");
    var1.clear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.TimeSeries var8 = var1.createCopy((-571), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getMonth();
//     java.lang.String var2 = var0.toString();
//     long var3 = var0.getMiddleMillisecond();
//     org.jfree.data.time.RegularTimePeriod var4 = var0.next();
//     java.util.Calendar var5 = null;
//     long var6 = var0.getLastMillisecond(var5);
// 
//   }

  public void test359() {}
//   public void test359() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     var6.clear();
//     java.lang.Class var15 = null;
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var15);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     java.util.List var18 = var16.getItems();
//     org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
//     org.jfree.data.time.TimeSeries var22 = var16.createCopy((org.jfree.data.time.RegularTimePeriod)var19, var21);
//     long var23 = var19.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var24 = var19.next();
//     long var25 = var19.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var26 = var19.next();
//     org.jfree.data.time.RegularTimePeriod var27 = var19.previous();
//     java.util.Date var28 = var19.getEnd();
//     long var29 = var19.getFirstMillisecond();
//     var6.add((org.jfree.data.time.RegularTimePeriod)var19, 1.0d, true);
// 
//   }

  public void test360() {}
//   public void test360() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     long var18 = var14.getMaximumItemAge();
//     boolean var19 = var14.getNotify();
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     java.lang.Class var23 = var22.getTimePeriodClass();
//     java.util.List var24 = var22.getItems();
//     java.lang.String var25 = var22.getRangeDescription();
//     java.beans.PropertyChangeListener var26 = null;
//     var22.removePropertyChangeListener(var26);
//     java.util.Collection var28 = var22.getTimePeriods();
//     var22.removeAgedItems(false);
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     org.jfree.data.time.FixedMillisecond var34 = new org.jfree.data.time.FixedMillisecond();
//     var33.delete((org.jfree.data.time.RegularTimePeriod)var34);
//     java.util.Calendar var36 = null;
//     long var37 = var34.getMiddleMillisecond(var36);
//     java.lang.Class var38 = null;
//     org.jfree.data.time.TimeSeries var39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var34, var38);
//     java.lang.Class var41 = null;
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var41);
//     java.lang.Class var43 = var42.getTimePeriodClass();
//     java.lang.Class var45 = null;
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var45);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     java.util.Collection var48 = var42.getTimePeriodsUniqueToOtherSeries(var46);
//     boolean var49 = var34.equals((java.lang.Object)var48);
//     org.jfree.data.time.TimeSeriesDataItem var51 = var22.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var34, (-1.0d));
//     var22.fireSeriesChanged();
//     org.jfree.data.time.TimeSeries var53 = var14.addAndOrUpdate(var22);
//     org.jfree.data.time.TimeSeries var56 = var22.createCopy(0, 0);
// 
//   }

  public void test361() {}
//   public void test361() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     java.util.Date var10 = var5.getStart();
//     java.util.TimeZone var11 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var12 = new org.jfree.data.time.Day(var10, var11);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
// 
//   }

  public void test362() {}
//   public void test362() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.time.SerialDate var6 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var2);
//     java.lang.Class var8 = null;
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var8);
//     org.jfree.data.time.FixedMillisecond var10 = new org.jfree.data.time.FixedMillisecond();
//     var9.delete((org.jfree.data.time.RegularTimePeriod)var10);
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     var14.delete((org.jfree.data.time.RegularTimePeriod)var15);
//     java.lang.Number var17 = var9.getValue((org.jfree.data.time.RegularTimePeriod)var15);
//     long var18 = var15.getFirstMillisecond();
//     boolean var19 = var2.equals((java.lang.Object)var18);
//     int var20 = var2.toSerial();
//     java.lang.String var21 = var2.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 1419139778047L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "30-January-1900"+ "'", var21.equals("30-January-1900"));
// 
//   }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month((-459), 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test364() {}
//   public void test364() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     java.lang.String var17 = var10.getDescription();
//     boolean var18 = var10.isEmpty();
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     java.lang.Class var22 = var21.getTimePeriodClass();
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     java.lang.Class var26 = var25.getTimePeriodClass();
//     java.util.Collection var27 = var21.getTimePeriodsUniqueToOtherSeries(var25);
//     int var28 = var25.getMaximumItemCount();
//     org.jfree.data.time.Year var29 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var30 = var29.next();
//     org.jfree.data.time.TimeSeriesDataItem var31 = var25.getDataItem(var30);
//     java.lang.Class var33 = null;
//     org.jfree.data.time.TimeSeries var34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var33);
//     int var35 = var34.getItemCount();
//     java.lang.Class var37 = null;
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var37);
//     org.jfree.data.time.FixedMillisecond var39 = new org.jfree.data.time.FixedMillisecond();
//     var38.delete((org.jfree.data.time.RegularTimePeriod)var39);
//     java.lang.Class var42 = null;
//     org.jfree.data.time.TimeSeries var43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var42);
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond();
//     var43.delete((org.jfree.data.time.RegularTimePeriod)var44);
//     java.lang.Number var46 = var38.getValue((org.jfree.data.time.RegularTimePeriod)var44);
//     org.jfree.data.time.TimeSeriesDataItem var47 = var34.getDataItem((org.jfree.data.time.RegularTimePeriod)var44);
//     int var48 = var25.getIndex((org.jfree.data.time.RegularTimePeriod)var44);
//     java.lang.String var49 = var25.getDomainDescription();
//     org.jfree.data.general.SeriesChangeListener var50 = null;
//     var25.removeChangeListener(var50);
//     java.util.Collection var52 = var25.getTimePeriods();
//     org.jfree.data.time.TimeSeries var53 = var10.addAndOrUpdate(var25);
//     org.jfree.data.general.SeriesChangeEvent var54 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var25);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var56 = var25.getDataItem(28);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139778054L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "2015"+ "'", var17.equals("2015"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var49 + "' != '" + "Time"+ "'", var49.equals("Time"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
// 
//   }

  public void test365() {}
//   public void test365() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     var2.fireSeriesChanged();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     java.util.Collection var14 = var8.getTimePeriodsUniqueToOtherSeries(var12);
//     var8.clear();
//     org.jfree.data.time.TimeSeries var16 = var2.addAndOrUpdate(var8);
//     org.jfree.data.time.Day var17 = new org.jfree.data.time.Day();
//     var16.delete((org.jfree.data.time.RegularTimePeriod)var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var20 = var19.previous();
//     java.util.Calendar var21 = null;
//     long var22 = var19.getMiddleMillisecond(var21);
//     org.jfree.data.time.RegularTimePeriod var23 = var19.previous();
//     java.util.Calendar var24 = null;
//     var19.peg(var24);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var16.update((org.jfree.data.time.RegularTimePeriod)var19, (java.lang.Number)1419139751469L);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139778062L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
// 
//   }

  public void test366() {}
//   public void test366() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var5 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.general.SeriesChangeEvent var6 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var4);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var13 = var10.compare((org.jfree.data.time.SerialDate)var12);
//     org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var19 = var16.compare((org.jfree.data.time.SerialDate)var18);
//     boolean var20 = var10.isOnOrAfter((org.jfree.data.time.SerialDate)var18);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var10);
//     org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
//     org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var33 = var30.compare((org.jfree.data.time.SerialDate)var32);
//     boolean var34 = var24.isOnOrAfter((org.jfree.data.time.SerialDate)var32);
//     int var35 = var24.getDayOfMonth();
//     boolean var37 = var4.isInRange(var21, (org.jfree.data.time.SerialDate)var24, 0);
//     boolean var38 = var1.isOnOrBefore(var21);
//     java.lang.String var39 = var1.toString();
//     org.jfree.data.time.Day var40 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var1);
//     org.jfree.data.time.SpreadsheetDate var42 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var45 = var42.compare((org.jfree.data.time.SerialDate)var44);
//     int var46 = var44.getMonth();
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     java.lang.Class var49 = null;
//     org.jfree.data.time.TimeSeries var50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var49);
//     org.jfree.data.time.FixedMillisecond var51 = new org.jfree.data.time.FixedMillisecond();
//     var50.delete((org.jfree.data.time.RegularTimePeriod)var51);
//     java.lang.Class var54 = null;
//     org.jfree.data.time.TimeSeries var55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var54);
//     org.jfree.data.time.FixedMillisecond var56 = new org.jfree.data.time.FixedMillisecond();
//     var55.delete((org.jfree.data.time.RegularTimePeriod)var56);
//     java.util.Calendar var58 = null;
//     long var59 = var56.getMiddleMillisecond(var58);
//     int var60 = var50.getIndex((org.jfree.data.time.RegularTimePeriod)var56);
//     java.lang.Object var61 = var50.clone();
//     boolean var62 = var40.equals((java.lang.Object)var50);
//     java.util.Calendar var63 = null;
//     var40.peg(var63);
// 
//   }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day(13, 2, 31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test368() {}
//   public void test368() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
//     boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
//     int var38 = var12.compareTo((java.lang.Object)var25);
//     org.jfree.data.time.FixedMillisecond var42 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var43 = null;
//     long var44 = var42.getFirstMillisecond(var43);
//     java.util.Calendar var45 = null;
//     long var46 = var42.getMiddleMillisecond(var45);
//     java.util.Date var47 = var42.getTime();
//     org.jfree.data.time.TimeSeries var51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var52 = var51.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var47, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var52);
//     java.lang.Class var54 = org.jfree.data.time.RegularTimePeriod.downsize(var52);
//     org.jfree.data.time.TimeSeries var55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var52);
//     java.lang.Class var57 = null;
//     org.jfree.data.time.TimeSeries var58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var57);
//     java.lang.Class var59 = var58.getTimePeriodClass();
//     java.util.List var60 = var58.getItems();
//     org.jfree.data.time.Year var61 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var62 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var63 = var62.previous();
//     org.jfree.data.time.TimeSeries var64 = var58.createCopy((org.jfree.data.time.RegularTimePeriod)var61, var63);
//     long var65 = var61.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var66 = var61.next();
//     long var67 = var61.getFirstMillisecond();
//     int var68 = var55.getIndex((org.jfree.data.time.RegularTimePeriod)var61);
//     int var69 = var12.compareTo((java.lang.Object)var61);
//     long var70 = var12.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var71 = var12.previous();
//     org.jfree.data.time.RegularTimePeriod var72 = var12.previous();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139778124L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139778124L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 1419139778128L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 1419139778128L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var65 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var67 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var70 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var72);
// 
//   }

  public void test369() {}
//   public void test369() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     java.lang.Class var7 = var6.getTimePeriodClass();
//     java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
//     int var9 = var6.getMaximumItemCount();
//     org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var11 = var10.next();
//     org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
//     java.lang.Class var14 = null;
//     org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
//     int var16 = var15.getItemCount();
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
//     java.lang.Class var23 = null;
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
//     org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
//     var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
//     java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
//     org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
//     int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
//     long var30 = var6.getMaximumItemAge();
//     var6.setNotify(true);
//     java.lang.Class var34 = null;
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var34);
//     boolean var36 = var35.getNotify();
//     boolean var37 = var35.getNotify();
//     java.lang.Class var39 = null;
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var39);
//     java.lang.Class var41 = var40.getTimePeriodClass();
//     java.util.List var42 = var40.getItems();
//     org.jfree.data.time.Year var43 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var44 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var45 = var44.previous();
//     org.jfree.data.time.TimeSeries var46 = var40.createCopy((org.jfree.data.time.RegularTimePeriod)var43, var45);
//     long var47 = var43.getFirstMillisecond();
//     java.util.Date var48 = var43.getStart();
//     org.jfree.data.time.TimeSeriesDataItem var50 = var35.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var43, 100.0d);
//     org.jfree.data.time.TimeSeries var51 = var6.addAndOrUpdate(var35);
//     java.lang.Class var53 = null;
//     org.jfree.data.time.TimeSeries var54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var53);
//     java.lang.Class var55 = var54.getTimePeriodClass();
//     java.util.List var56 = var54.getItems();
//     org.jfree.data.time.Year var57 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var58 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var59 = var58.previous();
//     org.jfree.data.time.TimeSeries var60 = var54.createCopy((org.jfree.data.time.RegularTimePeriod)var57, var59);
//     long var61 = var57.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var62 = var57.next();
//     java.lang.String var63 = var57.toString();
//     long var64 = var57.getLastMillisecond();
//     long var65 = var57.getSerialIndex();
//     org.jfree.data.time.TimeSeriesDataItem var67 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var57, 0.0d);
//     java.lang.Number var68 = var67.getValue();
//     var6.add(var67, false);
// 
//   }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var6 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var6);
    org.jfree.data.general.SeriesChangeEvent var8 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var6);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var14 = new org.jfree.data.time.SpreadsheetDate(31);
    int var15 = var12.compare((org.jfree.data.time.SerialDate)var14);
    org.jfree.data.time.SerialDate var16 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
    int var21 = var18.compare((org.jfree.data.time.SerialDate)var20);
    boolean var22 = var12.isOnOrAfter((org.jfree.data.time.SerialDate)var20);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var12);
    org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var28 = new org.jfree.data.time.SpreadsheetDate(31);
    int var29 = var26.compare((org.jfree.data.time.SerialDate)var28);
    org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var26);
    org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
    int var35 = var32.compare((org.jfree.data.time.SerialDate)var34);
    boolean var36 = var26.isOnOrAfter((org.jfree.data.time.SerialDate)var34);
    int var37 = var26.getDayOfMonth();
    boolean var39 = var6.isInRange(var23, (org.jfree.data.time.SerialDate)var26, 0);
    boolean var40 = var3.isOnOrBefore(var23);
    java.lang.String var41 = var3.toString();
    org.jfree.data.time.Day var42 = new org.jfree.data.time.Day((org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SerialDate var43 = org.jfree.data.time.SerialDate.addYears(20, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SerialDate var44 = org.jfree.data.time.SerialDate.addDays((-453), var43);
    java.lang.String var45 = var44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "30-January-1900"+ "'", var41.equals("30-January-1900"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "3-November-1918"+ "'", var45.equals("3-November-1918"));

  }

  public void test371() {}
//   public void test371() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Day var12 = new org.jfree.data.time.Day(var5);
//     java.util.TimeZone var13 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.Day var14 = new org.jfree.data.time.Day(var5, var13);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139778280L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139778280L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
// 
//   }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = var1.getFollowingDayOfWeek((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test373() {}
//   public void test373() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     var1.setDomainDescription("org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:09 PST 2014]");
//     org.jfree.data.time.RegularTimePeriod var16 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.add(var16, (-1.0d), false);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139778288L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
// 
//   }

  public void test374() {}
//   public void test374() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
//     java.lang.Object var20 = null;
//     boolean var21 = var19.equals(var20);
//     boolean var23 = var19.equals((java.lang.Object)1419139747941L);
//     int var24 = var19.getYearValue();
//     boolean var26 = var19.equals((java.lang.Object)1419139754447L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == false);
// 
//   }

  public void test375() {}
//   public void test375() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var12);
//     org.jfree.data.time.TimeSeries var14 = var8.addAndOrUpdate(var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     java.util.List var19 = var17.getItems();
//     org.jfree.data.time.Year var20 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var21 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var22 = var21.previous();
//     org.jfree.data.time.TimeSeries var23 = var17.createCopy((org.jfree.data.time.RegularTimePeriod)var20, var22);
//     long var24 = var20.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var25 = var20.next();
//     long var26 = var20.getLastMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var28 = var13.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var20, 100.0d);
//     java.util.Date var29 = var20.getStart();
//     org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.createInstance(var29);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.SerialDate var32 = var30.getFollowingDayOfWeek((-570));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
// 
//   }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("20-December-2014");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
    var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
    java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.general.SeriesChangeListener var16 = null;
    var2.addChangeListener(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
    var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
    java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
    java.util.Date var16 = var12.getStart();
    org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(var16);
    org.jfree.data.time.Month var20 = new org.jfree.data.time.Month(var16);
    org.jfree.data.time.Month var21 = new org.jfree.data.time.Month(var16);
    org.jfree.data.time.Year var22 = new org.jfree.data.time.Year(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }


    org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(3, 3);
    int var3 = var2.getMonth();
    org.jfree.data.time.TimeSeriesDataItem var5 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var2, (java.lang.Number)1419139761592L);
    org.jfree.data.time.RegularTimePeriod var6 = var2.previous();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test380() {}
//   public void test380() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.Class var5 = null;
//     org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
//     org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
//     java.util.Date var16 = var12.getStart();
//     org.jfree.data.time.Day var17 = new org.jfree.data.time.Day(var16);
//     java.util.Calendar var18 = null;
//     long var19 = var17.getLastMillisecond(var18);
// 
//   }

  public void test381() {}
//   public void test381() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     long var11 = var5.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var12 = var5.next();
//     org.jfree.data.time.RegularTimePeriod var13 = var5.previous();
//     java.util.Date var14 = var5.getEnd();
//     java.util.TimeZone var15 = null;
//     org.jfree.data.time.Month var16 = new org.jfree.data.time.Month(var14, var15);
// 
//   }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.lang.String var1 = var0.toString();
//     java.lang.String var2 = var0.toString();
//     java.lang.Object var3 = null;
//     int var4 = var0.compareTo(var3);
//     org.jfree.data.time.RegularTimePeriod var5 = var0.previous();
//     long var6 = var0.getMiddleMillisecond();
//     java.lang.String var7 = var0.toString();
//     org.jfree.data.time.SerialDate var8 = var0.getSerialDate();
//     int var9 = var0.getYear();
//     long var10 = var0.getFirstMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var1 + "' != '" + "20-December-2014"+ "'", var1.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var2 + "' != '" + "20-December-2014"+ "'", var2.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419105599999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + "20-December-2014"+ "'", var7.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1419062400000L);
// 
//   }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = new org.jfree.data.time.Year(1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    int var9 = var6.getMaximumItemCount();
    org.jfree.data.general.SeriesException var11 = new org.jfree.data.general.SeriesException("Time");
    java.lang.String var12 = var11.toString();
    boolean var13 = var6.equals((java.lang.Object)var11);
    var6.setKey((java.lang.Comparable)1419139761638L);
    java.lang.String var16 = var6.getRangeDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jfree.data.general.SeriesException: Time"+ "'", var12.equals("org.jfree.data.general.SeriesException: Time"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Value"+ "'", var16.equals("Value"));

  }

  public void test385() {}
//   public void test385() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.general.SeriesChangeEvent var1 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var0);
//     long var2 = var0.getLastMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139778821L);
// 
//   }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    int var7 = var5.getDayOfWeek();
    org.jfree.data.time.SerialDate var8 = org.jfree.data.time.SerialDate.addYears(1, (org.jfree.data.time.SerialDate)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var9 = org.jfree.data.time.SerialDate.addMonths((-572), (org.jfree.data.time.SerialDate)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekdayCodeToString(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Tuesday"+ "'", var1.equals("Tuesday"));

  }

  public void test388() {}
//   public void test388() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     int var67 = var4.getItemCount();
//     var4.setMaximumItemCount(3);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var71 = var4.getValue(28);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var26 + "' != '" + "December 2014"+ "'", var26.equals("December 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 1419139778887L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 1419139778887L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var64 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var65 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var67 == 0);
// 
//   }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = org.jfree.data.time.SerialDate.monthCodeToString(28, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day((-460), (-452), 2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = org.jfree.data.time.Year.parseYear("Wednesday");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test392() {}
//   public void test392() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     java.util.Date var10 = var5.getStart();
//     org.jfree.data.time.RegularTimePeriod var11 = var5.previous();
//     long var12 = var5.getSerialIndex();
//     java.lang.String var13 = var5.toString();
//     java.util.Calendar var14 = null;
//     long var15 = var5.getLastMillisecond(var14);
// 
//   }

  public void test393() {}
//   public void test393() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var16 = var15.previous();
//     java.util.Calendar var17 = null;
//     long var18 = var15.getMiddleMillisecond(var17);
//     org.jfree.data.time.RegularTimePeriod var19 = var15.previous();
//     java.util.Calendar var20 = null;
//     var15.peg(var20);
//     org.jfree.data.time.TimeSeriesDataItem var23 = var10.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var15, (java.lang.Number)1419139758374L);
//     java.lang.Class var24 = var10.getTimePeriodClass();
//     int var25 = var10.getItemCount();
//     org.jfree.data.general.SeriesChangeEvent var26 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139779158L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 1419139779160L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 1);
// 
//   }

  public void test394() {}
//   public void test394() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }
// 
// 
//     java.lang.Class var2 = null;
//     org.jfree.data.time.TimeSeries var3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var2);
//     java.lang.Class var4 = var3.getTimePeriodClass();
//     java.util.List var5 = var3.getItems();
//     org.jfree.data.time.Year var6 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var8 = var7.previous();
//     org.jfree.data.time.TimeSeries var9 = var3.createCopy((org.jfree.data.time.RegularTimePeriod)var6, var8);
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var13);
//     org.jfree.data.time.TimeSeries var15 = var9.addAndOrUpdate(var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     java.lang.Class var19 = var18.getTimePeriodClass();
//     java.util.List var20 = var18.getItems();
//     org.jfree.data.time.Year var21 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var22 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var23 = var22.previous();
//     org.jfree.data.time.TimeSeries var24 = var18.createCopy((org.jfree.data.time.RegularTimePeriod)var21, var23);
//     long var25 = var21.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var26 = var21.next();
//     long var27 = var21.getLastMillisecond();
//     org.jfree.data.time.TimeSeriesDataItem var29 = var14.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var21, 100.0d);
//     org.jfree.data.time.Month var30 = new org.jfree.data.time.Month(10, var21);
//     long var31 = var21.getLastMillisecond();
//     java.util.Calendar var32 = null;
//     long var33 = var21.getFirstMillisecond(var32);
// 
//   }

  public void test395() {}
//   public void test395() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }
// 
// 
//     org.jfree.data.time.Year var0 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     java.lang.Class var5 = var4.getTimePeriodClass();
//     java.util.List var6 = var4.getItems();
//     org.jfree.data.time.Year var7 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var9 = var8.previous();
//     org.jfree.data.time.TimeSeries var10 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var7, var9);
//     boolean var11 = var0.equals((java.lang.Object)var9);
//     org.jfree.data.time.RegularTimePeriod var12 = var0.previous();
//     org.jfree.data.time.RegularTimePeriod var13 = var0.previous();
//     long var14 = var0.getFirstMillisecond();
//     java.util.Calendar var15 = null;
//     long var16 = var0.getLastMillisecond(var15);
// 
//   }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate((-571), 30, 31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(30, (-572));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test398() {}
//   public void test398() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
//     boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
//     int var38 = var12.compareTo((java.lang.Object)var25);
//     org.jfree.data.time.RegularTimePeriod var39 = var12.next();
//     int var40 = var12.getMonth();
//     java.lang.Object var41 = null;
//     boolean var42 = var12.equals(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139779187L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139779187L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
// 
//   }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var3 = org.jfree.data.time.SerialDate.createInstance(0, (-599), 4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31, 20, 31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test401() {}
//   public void test401() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     var2.fireSeriesChanged();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     java.util.Collection var14 = var8.getTimePeriodsUniqueToOtherSeries(var12);
//     var8.clear();
//     org.jfree.data.time.TimeSeries var16 = var2.addAndOrUpdate(var8);
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
//     int var20 = var19.getItemCount();
//     java.lang.Class var22 = null;
//     org.jfree.data.time.TimeSeries var23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond();
//     var23.delete((org.jfree.data.time.RegularTimePeriod)var24);
//     java.lang.Class var27 = null;
//     org.jfree.data.time.TimeSeries var28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var27);
//     org.jfree.data.time.FixedMillisecond var29 = new org.jfree.data.time.FixedMillisecond();
//     var28.delete((org.jfree.data.time.RegularTimePeriod)var29);
//     java.lang.Number var31 = var23.getValue((org.jfree.data.time.RegularTimePeriod)var29);
//     org.jfree.data.time.TimeSeriesDataItem var32 = var19.getDataItem((org.jfree.data.time.RegularTimePeriod)var29);
//     java.util.Date var33 = var29.getStart();
//     org.jfree.data.time.FixedMillisecond var34 = new org.jfree.data.time.FixedMillisecond(var33);
//     org.jfree.data.time.FixedMillisecond var35 = new org.jfree.data.time.FixedMillisecond(var33);
//     org.jfree.data.time.Month var36 = new org.jfree.data.time.Month(var33);
//     java.lang.String var37 = var36.toString();
//     long var38 = var36.getLastMillisecond();
//     long var39 = var36.getSerialIndex();
//     org.jfree.data.time.RegularTimePeriod var40 = var36.next();
//     org.jfree.data.time.Year var41 = var36.getYear();
//     org.jfree.data.time.TimeSeriesDataItem var43 = var8.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var36, 0.0d);
//     java.lang.String var44 = var8.getRangeDescription();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var37 + "' != '" + "December 2014"+ "'", var37.equals("December 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "Value"+ "'", var44.equals("Value"));
// 
//   }

  public void test402() {}
//   public void test402() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getYear();
//     int var2 = var0.getYear();
//     org.jfree.data.time.RegularTimePeriod var3 = var0.next();
//     org.jfree.data.time.TimeSeriesDataItem var5 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, (java.lang.Number)1419139762677L);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     org.jfree.data.time.FixedMillisecond var9 = new org.jfree.data.time.FixedMillisecond();
//     var8.delete((org.jfree.data.time.RegularTimePeriod)var9);
//     java.util.Calendar var11 = null;
//     long var12 = var9.getMiddleMillisecond(var11);
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var9, var13);
//     var14.setDescription("");
//     java.beans.PropertyChangeListener var17 = null;
//     var14.removePropertyChangeListener(var17);
//     int var19 = var0.compareTo((java.lang.Object)var14);
//     long var20 = var0.getFirstMillisecond();
//     java.util.Calendar var21 = null;
//     long var22 = var0.getLastMillisecond(var21);
// 
//   }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }


    int var1 = org.jfree.data.time.SerialDate.stringToWeekdayCode("Monday");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = org.jfree.data.time.SerialDate.monthCodeToQuarter((-571));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test405() {}
//   public void test405() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     var8.setDescription("");
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     int var14 = var13.getItemCount();
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond();
//     var22.delete((org.jfree.data.time.RegularTimePeriod)var23);
//     java.lang.Number var25 = var17.getValue((org.jfree.data.time.RegularTimePeriod)var23);
//     org.jfree.data.time.TimeSeriesDataItem var26 = var13.getDataItem((org.jfree.data.time.RegularTimePeriod)var23);
//     int var28 = var23.compareTo((java.lang.Object)"Value");
//     org.jfree.data.time.TimeSeriesDataItem var29 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var23);
//     java.beans.PropertyChangeListener var30 = null;
//     var8.removePropertyChangeListener(var30);
//     int var32 = var8.getMaximumItemCount();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139779464L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 2147483647);
// 
//   }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     boolean var68 = var66.equals((java.lang.Object)1419139748141L);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var66.delete((-599), 10);
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var26 + "' != '" + "December 2014"+ "'", var26.equals("December 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 1419139779518L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 1419139779518L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var64 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var65 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == false);
// 
//   }

  public void test407() {}
//   public void test407() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     long var11 = var5.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var12 = var5.previous();
//     long var13 = var5.getLastMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1388563200000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1420099199999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 1420099199999L);
// 
//   }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }


    org.jfree.data.general.SeriesChangeEvent var1 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)1419139760849L);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }


    org.jfree.data.time.FixedMillisecond var1 = new org.jfree.data.time.FixedMillisecond(1419139753818L);
    long var2 = var1.getLastMillisecond();
    java.util.Calendar var3 = null;
    long var4 = var1.getLastMillisecond(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1419139753818L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1419139753818L);

  }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.lang.Class var6 = null;
//     org.jfree.data.time.TimeSeries var7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var6);
//     org.jfree.data.time.FixedMillisecond var8 = new org.jfree.data.time.FixedMillisecond();
//     var7.delete((org.jfree.data.time.RegularTimePeriod)var8);
//     java.lang.Number var10 = var2.getValue((org.jfree.data.time.RegularTimePeriod)var8);
//     java.lang.Class var12 = null;
//     org.jfree.data.time.TimeSeries var13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var12);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     var13.delete((org.jfree.data.time.RegularTimePeriod)var14);
//     java.util.Calendar var16 = null;
//     long var17 = var14.getMiddleMillisecond(var16);
//     java.lang.Class var18 = null;
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var14, var18);
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     java.lang.Class var23 = var22.getTimePeriodClass();
//     java.lang.Class var25 = null;
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
//     java.lang.Class var27 = var26.getTimePeriodClass();
//     java.util.Collection var28 = var22.getTimePeriodsUniqueToOtherSeries(var26);
//     boolean var29 = var14.equals((java.lang.Object)var28);
//     int var30 = var8.compareTo((java.lang.Object)var14);
//     org.jfree.data.time.RegularTimePeriod var31 = var14.previous();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 1419139779597L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
// 
//   }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    int var9 = var6.getMaximumItemCount();
    org.jfree.data.general.SeriesException var11 = new org.jfree.data.general.SeriesException("Time");
    java.lang.String var12 = var11.toString();
    boolean var13 = var6.equals((java.lang.Object)var11);
    int var14 = var6.getMaximumItemCount();
    int var15 = var6.getMaximumItemCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var16 = var6.getNextTimePeriod();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jfree.data.general.SeriesException: Time"+ "'", var12.equals("org.jfree.data.general.SeriesException: Time"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2147483647);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = org.jfree.data.time.SerialDate.weekdayCodeToString(29);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    java.lang.Class var12 = var11.getTimePeriodClass();
    java.util.List var13 = var11.getItems();
    java.lang.String var14 = var11.getRangeDescription();
    java.beans.PropertyChangeListener var15 = null;
    var11.removePropertyChangeListener(var15);
    java.util.Collection var17 = var11.getTimePeriods();
    var11.removeAgedItems(false);
    boolean var20 = var2.equals((java.lang.Object)var11);
    java.lang.Object var21 = var11.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Value"+ "'", var14.equals("Value"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("December 2014");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test415() {}
//   public void test415() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getYear();
//     long var2 = var0.getFirstMillisecond();
//     boolean var4 = var0.equals((java.lang.Object)0);
//     java.util.Calendar var5 = null;
//     long var6 = var0.getMiddleMillisecond(var5);
// 
//   }

  public void test416() {}
//   public void test416() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var6 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
//     org.jfree.data.time.TimeSeries var8 = var2.createCopy((org.jfree.data.time.RegularTimePeriod)var5, var7);
//     long var9 = var5.getFirstMillisecond();
//     org.jfree.data.time.RegularTimePeriod var10 = var5.next();
//     java.lang.String var11 = var5.toString();
//     long var12 = var5.getSerialIndex();
//     java.util.Calendar var13 = null;
//     var5.peg(var13);
// 
//   }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     org.jfree.data.time.Year var4 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.util.List var10 = var8.getItems();
//     org.jfree.data.time.Year var11 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var13 = var12.previous();
//     org.jfree.data.time.TimeSeries var14 = var8.createCopy((org.jfree.data.time.RegularTimePeriod)var11, var13);
//     boolean var15 = var4.equals((java.lang.Object)var13);
//     int var16 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
//     java.util.Calendar var17 = null;
//     long var18 = var4.getMiddleMillisecond(var17);
// 
//   }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     long var5 = var4.getSerialIndex();
//     long var6 = var4.getMiddleMillisecond();
//     org.jfree.data.time.RegularTimePeriod var7 = var4.previous();
//     org.jfree.data.time.RegularTimePeriod var8 = var4.next();
//     java.util.Calendar var9 = null;
//     long var10 = var4.getFirstMillisecond(var9);
// 
//   }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate((-1), (-570), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     java.lang.Class var19 = null;
//     org.jfree.data.time.TimeSeries var20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var19);
//     org.jfree.data.time.FixedMillisecond var21 = new org.jfree.data.time.FixedMillisecond();
//     var20.delete((org.jfree.data.time.RegularTimePeriod)var21);
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     org.jfree.data.time.FixedMillisecond var26 = new org.jfree.data.time.FixedMillisecond();
//     var25.delete((org.jfree.data.time.RegularTimePeriod)var26);
//     java.lang.Number var28 = var20.getValue((org.jfree.data.time.RegularTimePeriod)var26);
//     java.lang.Class var30 = null;
//     org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var30);
//     org.jfree.data.time.FixedMillisecond var32 = new org.jfree.data.time.FixedMillisecond();
//     var31.delete((org.jfree.data.time.RegularTimePeriod)var32);
//     java.util.Calendar var34 = null;
//     long var35 = var32.getMiddleMillisecond(var34);
//     java.lang.Class var36 = null;
//     org.jfree.data.time.TimeSeries var37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, var36);
//     java.lang.Class var39 = null;
//     org.jfree.data.time.TimeSeries var40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var39);
//     java.lang.Class var41 = var40.getTimePeriodClass();
//     java.lang.Class var43 = null;
//     org.jfree.data.time.TimeSeries var44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var43);
//     java.lang.Class var45 = var44.getTimePeriodClass();
//     java.util.Collection var46 = var40.getTimePeriodsUniqueToOtherSeries(var44);
//     boolean var47 = var32.equals((java.lang.Object)var46);
//     int var48 = var26.compareTo((java.lang.Object)var32);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var17.update((org.jfree.data.time.RegularTimePeriod)var26, (java.lang.Number)1419139763051L);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 1419139779743L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == (-1));
// 
//   }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     java.util.Calendar var67 = null;
//     var39.peg(var67);
// 
//   }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     org.jfree.data.time.FixedMillisecond var14 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.general.SeriesChangeEvent var15 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var14);
//     java.lang.Class var17 = null;
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var17);
//     org.jfree.data.time.FixedMillisecond var19 = new org.jfree.data.time.FixedMillisecond();
//     var18.delete((org.jfree.data.time.RegularTimePeriod)var19);
//     java.lang.Class var22 = null;
//     org.jfree.data.time.TimeSeries var23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond();
//     var23.delete((org.jfree.data.time.RegularTimePeriod)var24);
//     java.lang.Number var26 = var18.getValue((org.jfree.data.time.RegularTimePeriod)var24);
//     long var27 = var24.getFirstMillisecond();
//     org.jfree.data.time.TimeSeries var28 = var1.createCopy((org.jfree.data.time.RegularTimePeriod)var14, (org.jfree.data.time.RegularTimePeriod)var24);
//     var1.fireSeriesChanged();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139779873L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == 1419139779875L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
// 
//   }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Object var2 = var1.clone();
//     var1.removeAgedItems(1419139766451L, true);
//     java.lang.Comparable var6 = var1.getKey();
//     org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var8 = null;
//     long var9 = var7.getFirstMillisecond(var8);
//     java.util.Calendar var10 = null;
//     long var11 = var7.getMiddleMillisecond(var10);
//     java.util.Date var12 = var7.getTime();
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var17 = var16.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var12, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var17);
//     org.jfree.data.time.Month var19 = new org.jfree.data.time.Month();
//     var18.setKey((java.lang.Comparable)var19);
//     long var21 = var19.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var24 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var27 = var24.compare((org.jfree.data.time.SerialDate)var26);
//     org.jfree.data.time.SerialDate var28 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var24);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var32 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var33 = var30.compare((org.jfree.data.time.SerialDate)var32);
//     boolean var34 = var24.isOnOrAfter((org.jfree.data.time.SerialDate)var32);
//     org.jfree.data.time.SpreadsheetDate var37 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var38 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var37);
//     org.jfree.data.time.SpreadsheetDate var41 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var42 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var41);
//     org.jfree.data.general.SeriesChangeEvent var43 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var41);
//     boolean var44 = var32.isInRange(var38, (org.jfree.data.time.SerialDate)var41);
//     int var45 = var19.compareTo((java.lang.Object)var32);
//     org.jfree.data.time.RegularTimePeriod var46 = var19.next();
//     java.lang.Class var48 = null;
//     org.jfree.data.time.TimeSeries var49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var48);
//     java.lang.Class var50 = var49.getTimePeriodClass();
//     java.lang.Class var52 = null;
//     org.jfree.data.time.TimeSeries var53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var52);
//     java.lang.Class var54 = var53.getTimePeriodClass();
//     java.util.Collection var55 = var49.getTimePeriodsUniqueToOtherSeries(var53);
//     int var56 = var53.getMaximumItemCount();
//     org.jfree.data.time.Year var57 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var58 = var57.next();
//     org.jfree.data.time.TimeSeriesDataItem var59 = var53.getDataItem(var58);
//     java.lang.Class var61 = null;
//     org.jfree.data.time.TimeSeries var62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var61);
//     int var63 = var62.getItemCount();
//     java.lang.Class var65 = null;
//     org.jfree.data.time.TimeSeries var66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var65);
//     org.jfree.data.time.FixedMillisecond var67 = new org.jfree.data.time.FixedMillisecond();
//     var66.delete((org.jfree.data.time.RegularTimePeriod)var67);
//     java.lang.Class var70 = null;
//     org.jfree.data.time.TimeSeries var71 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var70);
//     org.jfree.data.time.FixedMillisecond var72 = new org.jfree.data.time.FixedMillisecond();
//     var71.delete((org.jfree.data.time.RegularTimePeriod)var72);
//     java.lang.Number var74 = var66.getValue((org.jfree.data.time.RegularTimePeriod)var72);
//     org.jfree.data.time.TimeSeriesDataItem var75 = var62.getDataItem((org.jfree.data.time.RegularTimePeriod)var72);
//     int var76 = var53.getIndex((org.jfree.data.time.RegularTimePeriod)var72);
//     org.jfree.data.time.RegularTimePeriod var77 = var72.next();
//     int var78 = var19.compareTo((java.lang.Object)var77);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.add((org.jfree.data.time.RegularTimePeriod)var19, (java.lang.Number)1419139770166L, false);
//       fail("Expected exception of type org.jfree.data.general.SeriesException");
//     } catch (org.jfree.data.general.SeriesException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + (byte)100+ "'", var6.equals((byte)100));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1419139779897L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 1419139779897L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var56 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var63 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var76 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var78 == 0);
// 
//   }

  public void test424() {}
//   public void test424() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }
// 
// 
//     org.jfree.data.time.SpreadsheetDate var2 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var4 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var5 = var2.compare((org.jfree.data.time.SerialDate)var4);
//     org.jfree.data.time.SerialDate var6 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var2);
//     org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var10 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var11 = var8.compare((org.jfree.data.time.SerialDate)var10);
//     boolean var12 = var2.isOnOrAfter((org.jfree.data.time.SerialDate)var10);
//     int var13 = var2.getDayOfMonth();
//     org.jfree.data.time.SpreadsheetDate var15 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var18 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var20 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var21 = var18.compare((org.jfree.data.time.SerialDate)var20);
//     org.jfree.data.time.SerialDate var22 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var18);
//     boolean var23 = var2.isInRange((org.jfree.data.time.SerialDate)var15, (org.jfree.data.time.SerialDate)var18);
//     org.jfree.data.time.SpreadsheetDate var26 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var28 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var29 = var26.compare((org.jfree.data.time.SerialDate)var28);
//     org.jfree.data.time.SerialDate var30 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var26);
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     org.jfree.data.time.FixedMillisecond var34 = new org.jfree.data.time.FixedMillisecond();
//     var33.delete((org.jfree.data.time.RegularTimePeriod)var34);
//     java.lang.Class var37 = null;
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var37);
//     org.jfree.data.time.FixedMillisecond var39 = new org.jfree.data.time.FixedMillisecond();
//     var38.delete((org.jfree.data.time.RegularTimePeriod)var39);
//     java.lang.Number var41 = var33.getValue((org.jfree.data.time.RegularTimePeriod)var39);
//     long var42 = var39.getFirstMillisecond();
//     boolean var43 = var26.equals((java.lang.Object)var42);
//     org.jfree.data.time.SpreadsheetDate var45 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var48 = var45.compare((org.jfree.data.time.SerialDate)var47);
//     boolean var49 = var26.isOnOrAfter((org.jfree.data.time.SerialDate)var45);
//     org.jfree.data.time.SerialDate var50 = var2.getEndOfCurrentMonth((org.jfree.data.time.SerialDate)var26);
//     org.jfree.data.time.SpreadsheetDate var54 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var56 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var57 = var54.compare((org.jfree.data.time.SerialDate)var56);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var54);
//     org.jfree.data.time.SpreadsheetDate var60 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var62 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var63 = var60.compare((org.jfree.data.time.SerialDate)var62);
//     boolean var64 = var54.isOnOrAfter((org.jfree.data.time.SerialDate)var62);
//     org.jfree.data.time.SerialDate var65 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var54);
//     boolean var66 = var26.isOn((org.jfree.data.time.SerialDate)var54);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.SerialDate var68 = var26.getNearestDayOfWeek(10);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == 1419139779909L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var63 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var64 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var66 == true);
// 
//   }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    java.lang.Object var2 = null;
    boolean var3 = var1.equals(var2);
    org.jfree.data.general.SeriesChangeEvent var4 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test426() {}
//   public void test426() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getYear();
//     int var2 = var0.getYear();
//     org.jfree.data.time.RegularTimePeriod var3 = var0.next();
//     org.jfree.data.time.TimeSeriesDataItem var5 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, (java.lang.Number)1419139762677L);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     org.jfree.data.time.FixedMillisecond var9 = new org.jfree.data.time.FixedMillisecond();
//     var8.delete((org.jfree.data.time.RegularTimePeriod)var9);
//     java.util.Calendar var11 = null;
//     long var12 = var9.getMiddleMillisecond(var11);
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var9, var13);
//     var14.setDescription("");
//     java.beans.PropertyChangeListener var17 = null;
//     var14.removePropertyChangeListener(var17);
//     int var19 = var0.compareTo((java.lang.Object)var14);
//     java.util.Calendar var20 = null;
//     long var21 = var0.getFirstMillisecond(var20);
// 
//   }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }


    org.jfree.data.time.TimePeriodFormatException var1 = new org.jfree.data.time.TimePeriodFormatException("Second");

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    int var14 = var3.getDayOfMonth();
    org.jfree.data.time.SpreadsheetDate var16 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    int var22 = var19.compare((org.jfree.data.time.SerialDate)var21);
    org.jfree.data.time.SerialDate var23 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var19);
    boolean var24 = var3.isInRange((org.jfree.data.time.SerialDate)var16, (org.jfree.data.time.SerialDate)var19);
    org.jfree.data.time.SpreadsheetDate var27 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
    int var30 = var27.compare((org.jfree.data.time.SerialDate)var29);
    org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var27);
    org.jfree.data.time.SpreadsheetDate var33 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    int var36 = var33.compare((org.jfree.data.time.SerialDate)var35);
    boolean var37 = var27.isOnOrAfter((org.jfree.data.time.SerialDate)var35);
    boolean var38 = var16.isOnOrAfter((org.jfree.data.time.SerialDate)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var39 = org.jfree.data.time.SerialDate.getPreviousDayOfWeek((-459), (org.jfree.data.time.SerialDate)var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.util.List var4 = var2.getItems();
    java.lang.Object var5 = var2.clone();
    java.lang.String var6 = var2.getDomainDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setMaximumItemCount((-435));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Time"+ "'", var6.equals("Time"));

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    boolean var3 = var2.getNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var4 = var2.getNextTimePeriod();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test431() {}
//   public void test431() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     org.jfree.data.time.TimeSeriesDataItem var7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, (-1.0d));
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Object var10 = var9.clone();
//     boolean var11 = var7.equals(var10);
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     var14.delete((org.jfree.data.time.RegularTimePeriod)var15);
//     var14.fireSeriesChanged();
//     int var18 = var14.getMaximumItemCount();
//     long var19 = var14.getMaximumItemAge();
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var23 = var22.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10.0f, var23);
//     var24.setNotify(false);
//     org.jfree.data.time.TimeSeries var27 = var14.addAndOrUpdate(var24);
//     int var28 = var7.compareTo((java.lang.Object)var14);
//     java.lang.String var29 = var14.getRangeDescription();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139780109L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139780109L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 2147483647);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 9223372036854775807L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var29 + "' != '" + "Value"+ "'", var29.equals("Value"));
// 
//   }

  public void test432() {}
//   public void test432() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     var2.fireSeriesChanged();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     java.util.Collection var14 = var8.getTimePeriodsUniqueToOtherSeries(var12);
//     var8.clear();
//     org.jfree.data.time.TimeSeries var16 = var2.addAndOrUpdate(var8);
//     org.jfree.data.time.Day var17 = new org.jfree.data.time.Day();
//     var16.delete((org.jfree.data.time.RegularTimePeriod)var17);
//     long var19 = var17.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var20 = var17.next();
//     java.lang.String var21 = var17.toString();
//     java.lang.String var22 = var17.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 1419148799999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "20-December-2014"+ "'", var21.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var22 + "' != '" + "20-December-2014"+ "'", var22.equals("20-December-2014"));
// 
//   }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate((-452), (-435), 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test434() {}
//   public void test434() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     var2.fireSeriesChanged();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     java.lang.Class var9 = var8.getTimePeriodClass();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     java.util.Collection var14 = var8.getTimePeriodsUniqueToOtherSeries(var12);
//     var8.clear();
//     org.jfree.data.time.TimeSeries var16 = var2.addAndOrUpdate(var8);
//     org.jfree.data.time.Day var17 = new org.jfree.data.time.Day();
//     var16.delete((org.jfree.data.time.RegularTimePeriod)var17);
//     long var19 = var17.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var20 = var17.next();
//     java.util.Calendar var21 = null;
//     long var22 = var17.getLastMillisecond(var21);
// 
//   }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }


    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var5 = new org.jfree.data.time.SpreadsheetDate(31);
    int var6 = var3.compare((org.jfree.data.time.SerialDate)var5);
    org.jfree.data.time.SerialDate var7 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var3);
    org.jfree.data.time.SpreadsheetDate var9 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var11 = new org.jfree.data.time.SpreadsheetDate(31);
    int var12 = var9.compare((org.jfree.data.time.SerialDate)var11);
    boolean var13 = var3.isOnOrAfter((org.jfree.data.time.SerialDate)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var14 = org.jfree.data.time.SerialDate.getNearestDayOfWeek((-1), (org.jfree.data.time.SerialDate)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }


    org.jfree.data.time.SpreadsheetDate var1 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(31);
    int var4 = var1.compare((org.jfree.data.time.SerialDate)var3);
    int var5 = var3.getDayOfMonth();
    java.lang.String var6 = var3.getDescription();
    org.jfree.data.time.SpreadsheetDate var8 = new org.jfree.data.time.SpreadsheetDate(31);
    int var9 = var8.getMonth();
    int var10 = var3.compare((org.jfree.data.time.SerialDate)var8);
    org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var15 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SerialDate var16 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var15);
    org.jfree.data.general.SeriesChangeEvent var17 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var15);
    org.jfree.data.time.SpreadsheetDate var21 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
    int var24 = var21.compare((org.jfree.data.time.SerialDate)var23);
    org.jfree.data.time.SerialDate var25 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var21);
    org.jfree.data.time.SpreadsheetDate var27 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
    int var30 = var27.compare((org.jfree.data.time.SerialDate)var29);
    boolean var31 = var21.isOnOrAfter((org.jfree.data.time.SerialDate)var29);
    org.jfree.data.time.SerialDate var32 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var21);
    org.jfree.data.time.SpreadsheetDate var35 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var37 = new org.jfree.data.time.SpreadsheetDate(31);
    int var38 = var35.compare((org.jfree.data.time.SerialDate)var37);
    org.jfree.data.time.SerialDate var39 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var35);
    org.jfree.data.time.SpreadsheetDate var41 = new org.jfree.data.time.SpreadsheetDate(31);
    org.jfree.data.time.SpreadsheetDate var43 = new org.jfree.data.time.SpreadsheetDate(31);
    int var44 = var41.compare((org.jfree.data.time.SerialDate)var43);
    boolean var45 = var35.isOnOrAfter((org.jfree.data.time.SerialDate)var43);
    int var46 = var35.getDayOfMonth();
    boolean var48 = var15.isInRange(var32, (org.jfree.data.time.SerialDate)var35, 0);
    boolean var49 = var12.isOnOrBefore(var32);
    int var50 = var8.compare((org.jfree.data.time.SerialDate)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var52 = var12.getPreviousDayOfWeek(2147483647);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = org.jfree.data.time.SerialDate.monthCodeToString((-435), true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test438() {}
//   public void test438() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     org.jfree.data.time.FixedMillisecond var4 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
//     java.util.Calendar var6 = null;
//     long var7 = var4.getMiddleMillisecond(var6);
//     org.jfree.data.time.RegularTimePeriod var8 = var4.previous();
//     int var9 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
//     java.util.Collection var10 = var2.getTimePeriods();
//     org.jfree.data.time.FixedMillisecond var11 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var12 = var11.previous();
//     java.util.Calendar var13 = null;
//     long var14 = var11.getMiddleMillisecond(var13);
//     java.util.Calendar var15 = null;
//     long var16 = var11.getLastMillisecond(var15);
//     org.jfree.data.time.TimeSeriesDataItem var18 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var11, (-1.0d));
//     org.jfree.data.time.TimeSeries var20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Object var21 = var20.clone();
//     boolean var22 = var18.equals(var21);
//     java.lang.Class var24 = null;
//     org.jfree.data.time.TimeSeries var25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var24);
//     java.lang.Class var26 = var25.getTimePeriodClass();
//     java.lang.Class var28 = null;
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var28);
//     java.lang.Class var30 = var29.getTimePeriodClass();
//     java.util.Collection var31 = var25.getTimePeriodsUniqueToOtherSeries(var29);
//     int var32 = var29.getMaximumItemCount();
//     org.jfree.data.time.Year var33 = new org.jfree.data.time.Year();
//     org.jfree.data.time.RegularTimePeriod var34 = var33.next();
//     org.jfree.data.time.TimeSeriesDataItem var35 = var29.getDataItem(var34);
//     java.lang.Class var37 = null;
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var37);
//     int var39 = var38.getItemCount();
//     java.lang.Class var41 = null;
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var41);
//     org.jfree.data.time.FixedMillisecond var43 = new org.jfree.data.time.FixedMillisecond();
//     var42.delete((org.jfree.data.time.RegularTimePeriod)var43);
//     java.lang.Class var46 = null;
//     org.jfree.data.time.TimeSeries var47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var46);
//     org.jfree.data.time.FixedMillisecond var48 = new org.jfree.data.time.FixedMillisecond();
//     var47.delete((org.jfree.data.time.RegularTimePeriod)var48);
//     java.lang.Number var50 = var42.getValue((org.jfree.data.time.RegularTimePeriod)var48);
//     org.jfree.data.time.TimeSeriesDataItem var51 = var38.getDataItem((org.jfree.data.time.RegularTimePeriod)var48);
//     int var52 = var29.getIndex((org.jfree.data.time.RegularTimePeriod)var48);
//     java.lang.String var53 = var29.getDomainDescription();
//     int var54 = var18.compareTo((java.lang.Object)var53);
//     java.lang.Number var55 = var18.getValue();
//     java.lang.Number var56 = var18.getValue();
//     var2.add(var18);
// 
//   }

  public void test439() {}
//   public void test439() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     java.util.Calendar var6 = null;
//     var0.peg(var6);
//     java.util.Date var8 = var0.getStart();
//     java.util.TimeZone var9 = null;
//     org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(var8, var9);
// 
//   }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    java.lang.Class var3 = var2.getTimePeriodClass();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    java.lang.Class var7 = var6.getTimePeriodClass();
    java.util.Collection var8 = var2.getTimePeriodsUniqueToOtherSeries(var6);
    int var9 = var6.getMaximumItemCount();
    org.jfree.data.time.Year var10 = new org.jfree.data.time.Year();
    org.jfree.data.time.RegularTimePeriod var11 = var10.next();
    org.jfree.data.time.TimeSeriesDataItem var12 = var6.getDataItem(var11);
    java.lang.Class var14 = null;
    org.jfree.data.time.TimeSeries var15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var14);
    int var16 = var15.getItemCount();
    java.lang.Class var18 = null;
    org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var18);
    org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
    var19.delete((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.Class var23 = null;
    org.jfree.data.time.TimeSeries var24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var23);
    org.jfree.data.time.FixedMillisecond var25 = new org.jfree.data.time.FixedMillisecond();
    var24.delete((org.jfree.data.time.RegularTimePeriod)var25);
    java.lang.Number var27 = var19.getValue((org.jfree.data.time.RegularTimePeriod)var25);
    org.jfree.data.time.TimeSeriesDataItem var28 = var15.getDataItem((org.jfree.data.time.RegularTimePeriod)var25);
    int var29 = var6.getIndex((org.jfree.data.time.RegularTimePeriod)var25);
    long var30 = var6.getMaximumItemAge();
    var6.setNotify(true);
    java.lang.String var33 = var6.getRangeDescription();
    java.beans.PropertyChangeListener var34 = null;
    var6.removePropertyChangeListener(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.update((-1), (java.lang.Number)1900);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9223372036854775807L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "Value"+ "'", var33.equals("Value"));

  }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }
// 
// 
//     java.lang.Class var2 = null;
//     org.jfree.data.time.TimeSeries var3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var2);
//     org.jfree.data.time.FixedMillisecond var4 = new org.jfree.data.time.FixedMillisecond();
//     var3.delete((org.jfree.data.time.RegularTimePeriod)var4);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     org.jfree.data.time.FixedMillisecond var9 = new org.jfree.data.time.FixedMillisecond();
//     var8.delete((org.jfree.data.time.RegularTimePeriod)var9);
//     java.util.Calendar var11 = null;
//     long var12 = var9.getMiddleMillisecond(var11);
//     int var13 = var3.getIndex((org.jfree.data.time.RegularTimePeriod)var9);
//     java.util.Calendar var14 = null;
//     long var15 = var9.getFirstMillisecond(var14);
//     java.lang.String var16 = var9.toString();
//     long var17 = var9.getSerialIndex();
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SerialDate var27 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var23);
//     org.jfree.data.time.SpreadsheetDate var29 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var31 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var32 = var29.compare((org.jfree.data.time.SerialDate)var31);
//     boolean var33 = var23.isOnOrAfter((org.jfree.data.time.SerialDate)var31);
//     org.jfree.data.time.SpreadsheetDate var36 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var37 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var36);
//     org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var41 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var40);
//     org.jfree.data.general.SeriesChangeEvent var42 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var40);
//     boolean var43 = var31.isInRange(var37, (org.jfree.data.time.SerialDate)var40);
//     org.jfree.data.time.SerialDate var44 = org.jfree.data.time.SerialDate.addMonths(10, (org.jfree.data.time.SerialDate)var40);
//     org.jfree.data.time.SerialDate var45 = org.jfree.data.time.SerialDate.addDays(0, var44);
//     org.jfree.data.time.SerialDate var46 = org.jfree.data.time.SerialDate.addDays(13, var45);
//     int var47 = var9.compareTo((java.lang.Object)var45);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addDays((-599), var45);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 1419139780299L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == 1419139780299L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "Sat Dec 20 21:29:40 PST 2014"+ "'", var16.equals("Sat Dec 20 21:29:40 PST 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == 1419139780299L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == 1);
// 
//   }

  public void test442() {}
//   public void test442() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test442"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var3);
//     java.util.Calendar var5 = null;
//     long var6 = var3.getMiddleMillisecond(var5);
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var3, var7);
//     var8.setDescription("");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeriesDataItem var12 = var8.getDataItem((-459));
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139780304L);
// 
//   }

  public void test443() {}
//   public void test443() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test443"); }
// 
// 
//     org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)100.0d);
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var3);
//     org.jfree.data.time.FixedMillisecond var5 = new org.jfree.data.time.FixedMillisecond();
//     var4.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     java.util.Calendar var7 = null;
//     long var8 = var5.getMiddleMillisecond(var7);
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, var9);
//     var10.setDescription("");
//     org.jfree.data.time.TimeSeries var13 = var1.addAndOrUpdate(var10);
//     java.lang.String var14 = var10.getDescription();
//     var10.setDescription("2015");
//     java.lang.String var17 = var10.getDomainDescription();
//     var10.setKey((java.lang.Comparable)1419139748031L);
//     java.lang.Class var20 = var10.getTimePeriodClass();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.TimeSeries var23 = var10.createCopy((-452), (-452));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139780305L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var17 + "' != '" + "Time"+ "'", var17.equals("Time"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var20);
// 
//   }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test444"); }


    int var1 = org.jfree.data.time.SerialDate.monthCodeToQuarter(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test445() {}
//   public void test445() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test445"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     org.jfree.data.time.FixedMillisecond var4 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
//     java.util.Calendar var6 = null;
//     long var7 = var4.getMiddleMillisecond(var6);
//     org.jfree.data.time.RegularTimePeriod var8 = var4.previous();
//     int var9 = var2.getIndex((org.jfree.data.time.RegularTimePeriod)var4);
//     org.jfree.data.general.SeriesChangeListener var10 = null;
//     var2.removeChangeListener(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139780308L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == (-1));
// 
//   }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test446"); }


    java.lang.Class var1 = null;
    org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
    int var3 = var2.getItemCount();
    java.lang.Class var5 = null;
    org.jfree.data.time.TimeSeries var6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var5);
    org.jfree.data.time.FixedMillisecond var7 = new org.jfree.data.time.FixedMillisecond();
    var6.delete((org.jfree.data.time.RegularTimePeriod)var7);
    java.lang.Class var10 = null;
    org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
    org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
    var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
    java.lang.Number var14 = var6.getValue((org.jfree.data.time.RegularTimePeriod)var12);
    org.jfree.data.time.TimeSeriesDataItem var15 = var2.getDataItem((org.jfree.data.time.RegularTimePeriod)var12);
    java.util.Date var16 = var12.getStart();
    org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond(var16);
    org.jfree.data.time.TimeSeriesDataItem var19 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var17, (java.lang.Number)10);
    java.lang.Class var21 = null;
    org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
    int var23 = var22.getItemCount();
    java.lang.Class var25 = null;
    org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var25);
    org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
    var26.delete((org.jfree.data.time.RegularTimePeriod)var27);
    java.lang.Class var30 = null;
    org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var30);
    org.jfree.data.time.FixedMillisecond var32 = new org.jfree.data.time.FixedMillisecond();
    var31.delete((org.jfree.data.time.RegularTimePeriod)var32);
    java.lang.Number var34 = var26.getValue((org.jfree.data.time.RegularTimePeriod)var32);
    org.jfree.data.time.TimeSeriesDataItem var35 = var22.getDataItem((org.jfree.data.time.RegularTimePeriod)var32);
    java.util.Date var36 = var32.getStart();
    org.jfree.data.time.FixedMillisecond var37 = new org.jfree.data.time.FixedMillisecond(var36);
    org.jfree.data.time.FixedMillisecond var38 = new org.jfree.data.time.FixedMillisecond(var36);
    org.jfree.data.time.Month var39 = new org.jfree.data.time.Month(var36);
    java.lang.Object var40 = null;
    boolean var41 = var39.equals(var40);
    boolean var43 = var39.equals((java.lang.Object)1419139747941L);
    int var44 = var19.compareTo((java.lang.Object)var43);
    var19.setValue((java.lang.Number)(-570));
    org.jfree.data.time.RegularTimePeriod var47 = var19.getPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test447() {}
//   public void test447() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test447"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     int var3 = var2.getItemCount();
//     java.lang.String var4 = var2.getDescription();
//     java.beans.PropertyChangeListener var5 = null;
//     var2.removePropertyChangeListener(var5);
//     int var7 = var2.getItemCount();
//     java.lang.Class var9 = null;
//     org.jfree.data.time.TimeSeries var10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var9);
//     java.lang.Class var11 = var10.getTimePeriodClass();
//     java.lang.Class var13 = null;
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var13);
//     java.lang.Class var15 = var14.getTimePeriodClass();
//     java.util.Collection var16 = var10.getTimePeriodsUniqueToOtherSeries(var14);
//     org.jfree.data.time.TimeSeries var17 = var2.addAndOrUpdate(var14);
//     long var18 = var14.getMaximumItemAge();
//     boolean var19 = var14.getNotify();
//     java.lang.Class var21 = null;
//     org.jfree.data.time.TimeSeries var22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var21);
//     java.lang.Class var23 = var22.getTimePeriodClass();
//     java.util.List var24 = var22.getItems();
//     java.lang.String var25 = var22.getRangeDescription();
//     java.beans.PropertyChangeListener var26 = null;
//     var22.removePropertyChangeListener(var26);
//     java.util.Collection var28 = var22.getTimePeriods();
//     var22.removeAgedItems(false);
//     java.lang.Class var32 = null;
//     org.jfree.data.time.TimeSeries var33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var32);
//     org.jfree.data.time.FixedMillisecond var34 = new org.jfree.data.time.FixedMillisecond();
//     var33.delete((org.jfree.data.time.RegularTimePeriod)var34);
//     java.util.Calendar var36 = null;
//     long var37 = var34.getMiddleMillisecond(var36);
//     java.lang.Class var38 = null;
//     org.jfree.data.time.TimeSeries var39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var34, var38);
//     java.lang.Class var41 = null;
//     org.jfree.data.time.TimeSeries var42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var41);
//     java.lang.Class var43 = var42.getTimePeriodClass();
//     java.lang.Class var45 = null;
//     org.jfree.data.time.TimeSeries var46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var45);
//     java.lang.Class var47 = var46.getTimePeriodClass();
//     java.util.Collection var48 = var42.getTimePeriodsUniqueToOtherSeries(var46);
//     boolean var49 = var34.equals((java.lang.Object)var48);
//     org.jfree.data.time.TimeSeriesDataItem var51 = var22.addOrUpdate((org.jfree.data.time.RegularTimePeriod)var34, (-1.0d));
//     var22.fireSeriesChanged();
//     org.jfree.data.time.TimeSeries var53 = var14.addAndOrUpdate(var22);
//     java.beans.PropertyChangeListener var54 = null;
//     var53.addPropertyChangeListener(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 9223372036854775807L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "Value"+ "'", var25.equals("Value"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == 1419139780365L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
// 
//   }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test448"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = org.jfree.data.time.SerialDate.weekdayCodeToString((-565));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test449() {}
//   public void test449() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test449"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     var2.setDomainDescription("2015");
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     java.lang.Class var12 = var11.getTimePeriodClass();
//     java.util.List var13 = var11.getItems();
//     org.jfree.data.time.Year var14 = new org.jfree.data.time.Year();
//     org.jfree.data.time.FixedMillisecond var15 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var16 = var15.previous();
//     org.jfree.data.time.TimeSeries var17 = var11.createCopy((org.jfree.data.time.RegularTimePeriod)var14, var16);
//     long var18 = var14.getFirstMillisecond();
//     java.util.Date var19 = var14.getStart();
//     org.jfree.data.time.RegularTimePeriod var20 = var14.previous();
//     long var21 = var14.getSerialIndex();
//     java.lang.String var22 = var14.toString();
//     long var23 = var14.getLastMillisecond();
//     var2.add((org.jfree.data.time.RegularTimePeriod)var14, 10.0d, true);
// 
//   }

  public void test450() {}
//   public void test450() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test450"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var0.getMiddleMillisecond(var2);
//     java.util.Calendar var4 = null;
//     long var5 = var0.getLastMillisecond(var4);
//     long var6 = var0.getLastMillisecond();
//     java.util.Calendar var7 = null;
//     long var8 = var0.getFirstMillisecond(var7);
//     long var9 = var0.getSerialIndex();
//     java.lang.String var10 = var0.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 1419139780542L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139780542L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 1419139780542L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 1419139780542L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 1419139780542L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "Sat Dec 20 21:29:40 PST 2014"+ "'", var10.equals("Sat Dec 20 21:29:40 PST 2014"));
// 
//   }

  public void test451() {}
//   public void test451() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test451"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getMiddleMillisecond(var1);
//     java.util.Date var3 = var0.getEnd();
//     org.jfree.data.time.Day var4 = new org.jfree.data.time.Day(var3);
//     long var5 = var4.getSerialIndex();
//     long var6 = var4.getMiddleMillisecond();
//     java.util.Date var7 = var4.getEnd();
//     java.util.TimeZone var8 = null;
//     org.jfree.data.time.Year var9 = new org.jfree.data.time.Year(var7, var8);
// 
//   }

  public void test452() {}
//   public void test452() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test452"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     int var1 = var0.getYear();
//     long var2 = var0.getLastMillisecond();
//     org.jfree.data.time.RegularTimePeriod var3 = var0.previous();
//     java.util.Calendar var4 = null;
//     long var5 = var0.getFirstMillisecond(var4);
// 
//   }

  public void test453() {}
//   public void test453() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test453"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     org.jfree.data.time.TimeSeriesDataItem var6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, 10.0d);
//     java.lang.Object var7 = var6.clone();
//     java.lang.Object var8 = var6.clone();
//     java.lang.Number var9 = null;
//     var6.setValue(var9);
//     org.jfree.data.time.SpreadsheetDate var12 = new org.jfree.data.time.SpreadsheetDate(31);
//     java.lang.Object var13 = null;
//     boolean var14 = var12.equals(var13);
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10.0f, var18);
//     org.jfree.data.time.FixedMillisecond var20 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var21 = null;
//     long var22 = var20.getFirstMillisecond(var21);
//     java.util.Calendar var23 = null;
//     long var24 = var20.getMiddleMillisecond(var23);
//     java.util.Date var25 = var20.getTime();
//     org.jfree.data.time.TimeSeries var29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var30 = var29.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var25, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var30);
//     java.util.TimeZone var32 = null;
//     org.jfree.data.time.RegularTimePeriod var33 = org.jfree.data.time.RegularTimePeriod.createInstance(var18, var25, var32);
//     org.jfree.data.time.TimeSeries var34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var14, var18);
//     org.jfree.data.time.TimeSeries var35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var6, var18);
//     java.lang.Object var36 = null;
//     boolean var37 = var6.equals(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 1419139780564L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 1419139780564L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 1419139780565L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 1419139780565L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
// 
//   }

  public void test454() {}
//   public void test454() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test454"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var0 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
//     java.util.Calendar var3 = null;
//     long var4 = var0.getMiddleMillisecond(var3);
//     java.util.Date var5 = var0.getTime();
//     org.jfree.data.time.TimeSeries var9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var10 = var9.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var5, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var10);
//     org.jfree.data.time.Month var12 = new org.jfree.data.time.Month();
//     var11.setKey((java.lang.Comparable)var12);
//     long var14 = var12.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var17 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var19 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var20 = var17.compare((org.jfree.data.time.SerialDate)var19);
//     org.jfree.data.time.SerialDate var21 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var17);
//     org.jfree.data.time.SpreadsheetDate var23 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var25 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var26 = var23.compare((org.jfree.data.time.SerialDate)var25);
//     boolean var27 = var17.isOnOrAfter((org.jfree.data.time.SerialDate)var25);
//     org.jfree.data.time.SpreadsheetDate var30 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var31 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var30);
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var35 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.general.SeriesChangeEvent var36 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var34);
//     boolean var37 = var25.isInRange(var31, (org.jfree.data.time.SerialDate)var34);
//     int var38 = var12.compareTo((java.lang.Object)var25);
//     org.jfree.data.time.RegularTimePeriod var39 = var12.next();
//     java.lang.String var40 = var12.toString();
//     long var41 = var12.getMiddleMillisecond();
//     java.util.Date var42 = var12.getStart();
//     java.util.Calendar var43 = null;
//     var12.peg(var43);
// 
//   }

  public void test455() {}
//   public void test455() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test455"); }
// 
// 
//     org.jfree.data.time.FixedMillisecond var3 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var4 = null;
//     long var5 = var3.getFirstMillisecond(var4);
//     java.util.Calendar var6 = null;
//     long var7 = var3.getMiddleMillisecond(var6);
//     java.util.Date var8 = var3.getTime();
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var13 = var12.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var8, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var13);
//     java.lang.Class var15 = org.jfree.data.time.RegularTimePeriod.downsize(var13);
//     org.jfree.data.time.TimeSeries var16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)1419139749237L, "Last", "org.jfree.data.general.SeriesException: Time", var13);
//     org.jfree.data.time.FixedMillisecond var17 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var18 = null;
//     long var19 = var17.getFirstMillisecond(var18);
//     java.util.Calendar var20 = null;
//     long var21 = var17.getMiddleMillisecond(var20);
//     java.util.Date var22 = var17.getTime();
//     org.jfree.data.time.TimeSeries var26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var27 = var26.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var22, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var27);
//     org.jfree.data.time.Month var29 = new org.jfree.data.time.Month();
//     var28.setKey((java.lang.Comparable)var29);
//     long var31 = var29.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var34 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var36 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var37 = var34.compare((org.jfree.data.time.SerialDate)var36);
//     org.jfree.data.time.SerialDate var38 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var34);
//     org.jfree.data.time.SpreadsheetDate var40 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var42 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var43 = var40.compare((org.jfree.data.time.SerialDate)var42);
//     boolean var44 = var34.isOnOrAfter((org.jfree.data.time.SerialDate)var42);
//     org.jfree.data.time.SpreadsheetDate var47 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var47);
//     org.jfree.data.time.SpreadsheetDate var51 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var52 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var51);
//     org.jfree.data.general.SeriesChangeEvent var53 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var51);
//     boolean var54 = var42.isInRange(var48, (org.jfree.data.time.SerialDate)var51);
//     int var55 = var29.compareTo((java.lang.Object)var42);
//     org.jfree.data.time.RegularTimePeriod var56 = var29.next();
//     java.lang.String var57 = var29.toString();
//     long var58 = var29.getMiddleMillisecond();
//     java.util.Date var59 = var29.getStart();
//     java.util.TimeZone var60 = null;
//     org.jfree.data.time.RegularTimePeriod var61 = org.jfree.data.time.RegularTimePeriod.createInstance(var13, var59, var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419139780596L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1419139780596L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 1419139780597L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 1419139780597L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 1417420800000L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var55 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var57 + "' != '" + "December 2014"+ "'", var57.equals("December 2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var58 == 1418759999999L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var61);
// 
//   }

  public void test456() {}
//   public void test456() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test456"); }
// 
// 
//     java.lang.Class var3 = null;
//     org.jfree.data.time.TimeSeries var4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)10, "", "Value", var3);
//     boolean var5 = var4.isEmpty();
//     java.lang.Class var7 = null;
//     org.jfree.data.time.TimeSeries var8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var7);
//     int var9 = var8.getItemCount();
//     java.lang.Class var11 = null;
//     org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var11);
//     org.jfree.data.time.FixedMillisecond var13 = new org.jfree.data.time.FixedMillisecond();
//     var12.delete((org.jfree.data.time.RegularTimePeriod)var13);
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     org.jfree.data.time.FixedMillisecond var18 = new org.jfree.data.time.FixedMillisecond();
//     var17.delete((org.jfree.data.time.RegularTimePeriod)var18);
//     java.lang.Number var20 = var12.getValue((org.jfree.data.time.RegularTimePeriod)var18);
//     org.jfree.data.time.TimeSeriesDataItem var21 = var8.getDataItem((org.jfree.data.time.RegularTimePeriod)var18);
//     java.util.Date var22 = var18.getStart();
//     org.jfree.data.time.FixedMillisecond var23 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.FixedMillisecond var24 = new org.jfree.data.time.FixedMillisecond(var22);
//     org.jfree.data.time.Month var25 = new org.jfree.data.time.Month(var22);
//     java.lang.String var26 = var25.toString();
//     org.jfree.data.time.FixedMillisecond var27 = new org.jfree.data.time.FixedMillisecond();
//     java.util.Calendar var28 = null;
//     long var29 = var27.getFirstMillisecond(var28);
//     java.util.Calendar var30 = null;
//     long var31 = var27.getMiddleMillisecond(var30);
//     java.util.Date var32 = var27.getTime();
//     org.jfree.data.time.TimeSeries var36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(byte)100);
//     java.lang.Class var37 = var36.getTimePeriodClass();
//     org.jfree.data.time.TimeSeries var38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var32, "org.jfree.data.general.SeriesChangeEvent[source=Sat Dec 20 21:29:07 PST 2014]", "Time", var37);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     var38.setKey((java.lang.Comparable)var39);
//     long var41 = var39.getFirstMillisecond();
//     org.jfree.data.time.SpreadsheetDate var44 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var46 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var47 = var44.compare((org.jfree.data.time.SerialDate)var46);
//     org.jfree.data.time.SerialDate var48 = org.jfree.data.time.SerialDate.addMonths(0, (org.jfree.data.time.SerialDate)var44);
//     org.jfree.data.time.SpreadsheetDate var50 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SpreadsheetDate var52 = new org.jfree.data.time.SpreadsheetDate(31);
//     int var53 = var50.compare((org.jfree.data.time.SerialDate)var52);
//     boolean var54 = var44.isOnOrAfter((org.jfree.data.time.SerialDate)var52);
//     org.jfree.data.time.SpreadsheetDate var57 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var58 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var57);
//     org.jfree.data.time.SpreadsheetDate var61 = new org.jfree.data.time.SpreadsheetDate(31);
//     org.jfree.data.time.SerialDate var62 = org.jfree.data.time.SerialDate.addYears(0, (org.jfree.data.time.SerialDate)var61);
//     org.jfree.data.general.SeriesChangeEvent var63 = new org.jfree.data.general.SeriesChangeEvent((java.lang.Object)var61);
//     boolean var64 = var52.isInRange(var58, (org.jfree.data.time.SerialDate)var61);
//     int var65 = var39.compareTo((java.lang.Object)var52);
//     org.jfree.data.time.TimeSeries var66 = var4.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var39);
//     java.util.Calendar var67 = null;
//     long var68 = var25.getLastMillisecond(var67);
// 
//   }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test457"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = org.jfree.data.time.SerialDate.monthCodeToString((-571), true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test458() {}
//   public void test458() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test458"); }
// 
// 
//     java.lang.Class var1 = null;
//     org.jfree.data.time.TimeSeries var2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var1);
//     java.lang.Class var3 = var2.getTimePeriodClass();
//     java.util.List var4 = var2.getItems();
//     org.jfree.data.time.Year var5 = new org.jfree.data.time.Year();
//     var2.delete((org.jfree.data.time.RegularTimePeriod)var5);
//     var2.setDomainDescription("2015");
//     java.lang.Class var10 = null;
//     org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var10);
//     org.jfree.data.time.FixedMillisecond var12 = new org.jfree.data.time.FixedMillisecond();
//     var11.delete((org.jfree.data.time.RegularTimePeriod)var12);
//     var11.fireSeriesChanged();
//     java.lang.Class var16 = null;
//     org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var16);
//     java.lang.Class var18 = var17.getTimePeriodClass();
//     java.lang.Class var20 = null;
//     org.jfree.data.time.TimeSeries var21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var20);
//     java.lang.Class var22 = var21.getTimePeriodClass();
//     java.util.Collection var23 = var17.getTimePeriodsUniqueToOtherSeries(var21);
//     var17.clear();
//     org.jfree.data.time.TimeSeries var25 = var11.addAndOrUpdate(var17);
//     java.lang.Class var27 = null;
//     org.jfree.data.time.TimeSeries var28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var27);
//     int var29 = var28.getItemCount();
//     java.lang.Class var31 = null;
//     org.jfree.data.time.TimeSeries var32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var31);
//     org.jfree.data.time.FixedMillisecond var33 = new org.jfree.data.time.FixedMillisecond();
//     var32.delete((org.jfree.data.time.RegularTimePeriod)var33);
//     java.lang.Class var36 = null;
//     org.jfree.data.time.TimeSeries var37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)(short)100, var36);
//     org.jfree.data.time.FixedMillisecond var38 = new org.jfree.data.time.FixedMillisecond();
//     var37.delete((org.jfree.data.time.RegularTimePeriod)var38);
//     java.lang.Number var40 = var32.getValue((org.jfree.data.time.RegularTimePeriod)var38);
//     org.jfree.data.time.TimeSer