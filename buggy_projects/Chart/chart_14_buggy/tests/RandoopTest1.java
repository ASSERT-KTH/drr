
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() {}
//   public void test1() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Date var11 = var0.getStart();
//     org.jfree.data.time.RegularTimePeriod var12 = var0.next();
//     long var13 = var0.getSerialIndex();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 41993L);
// 
//   }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     int var29 = var15.indexOf(var28);
//     float var30 = var15.getBackgroundImageAlpha();
//     var15.setRangeCrosshairLockedOnData(false);
//     var15.setRangeCrosshairLockedOnData(true);
//     org.jfree.chart.util.Layer var35 = null;
//     java.util.Collection var36 = var15.getDomainMarkers(var35);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
//     var38.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var40 = var38.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var42 = null;
//     var38.setRenderer(255, var42);
//     java.awt.Stroke var44 = var38.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var45 = var38.getDataset();
//     java.awt.Paint var46 = var38.getNoDataMessagePaint();
//     org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var50 = var49.getAlpha();
//     java.awt.Stroke var51 = var49.getStroke();
//     org.jfree.chart.util.Layer var52 = null;
//     var38.addRangeMarker((-668), (org.jfree.chart.plot.Marker)var49, var52);
//     org.jfree.chart.util.Layer var54 = null;
//     boolean var55 = var15.removeDomainMarker(4, (org.jfree.chart.plot.Marker)var49, var54);
//     
//     // Checks the contract:  equals-hashcode on var20 and var38
//     assertTrue("Contract failed: equals-hashcode on var20 and var38", var20.equals(var38) ? var20.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var20
//     assertTrue("Contract failed: equals-hashcode on var38 and var20", var38.equals(var20) ? var38.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
    var1.clear();
    org.jfree.data.xy.XYDataset var3 = null;
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.awt.Paint var6 = var4.getTickLabelPaint();
    java.awt.Paint var7 = var4.getTickLabelPaint();
    var4.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    var10.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var10.setRangeWithMargins(var15);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    org.jfree.chart.plot.XYPlot var18 = new org.jfree.chart.plot.XYPlot(var3, (org.jfree.chart.axis.ValueAxis)var4, (org.jfree.chart.axis.ValueAxis)var10, var17);
    org.jfree.chart.util.RectangleEdge var20 = var18.getDomainAxisEdge(12);
    var18.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var27 = null;
    var23.setRenderer(255, var27);
    java.awt.Stroke var29 = var23.getOutlineStroke();
    var18.setRangeZeroBaselineStroke(var29);
    org.jfree.chart.LegendItemCollection var31 = var18.getLegendItems();
    var18.setBackgroundImageAlpha(0.0f);
    java.util.List var34 = var18.getAnnotations();
    var18.configureRangeAxes();
    int var36 = var1.indexOf((java.lang.Object)var18);
    java.lang.Object var38 = var1.get((-668));
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    var39.setRange(0.0d, 100.0d);
    var39.setLowerBound((-6.0d));
    var39.setLabelURL("hi!");
    java.awt.Shape var48 = var39.getRightArrow();
    org.jfree.data.general.Dataset var49 = null;
    org.jfree.data.general.DatasetChangeEvent var50 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var39, var49);
    int var51 = var1.indexOf((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));

  }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var12 = var7.getParent();
//     var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     java.awt.Image var14 = null;
//     var7.setBackgroundImage(var14);
//     org.jfree.chart.axis.AxisLocation var17 = var7.getDomainAxisLocation((-668));
//     org.jfree.chart.axis.AxisLocation var19 = var7.getDomainAxisLocation(255);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var22 = null;
//     var20.setFixedRangeAxisSpace(var22, false);
//     boolean var25 = var20.isRangeZoomable();
//     var20.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var29 = var20.getDomainAxisEdge(0);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.clearRangeAxes();
//     boolean var32 = var30.isDomainGridlinesVisible();
//     java.awt.Stroke var33 = var30.getRangeGridlineStroke();
//     org.jfree.chart.plot.ValueMarker var35 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var36 = var35.getAlpha();
//     java.awt.Stroke var37 = var35.getStroke();
//     org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var39 = var38.getRange();
//     java.text.DateFormat var40 = var38.getDateFormatOverride();
//     var38.resizeRange((-1.0d), (-1.0d));
//     boolean var44 = var35.equals((java.lang.Object)var38);
//     org.jfree.chart.util.RectangleInsets var45 = var35.getLabelOffset();
//     java.awt.Paint var46 = var35.getOutlinePaint();
//     java.awt.Paint var47 = var35.getPaint();
//     java.lang.String var48 = var35.getLabel();
//     org.jfree.chart.util.Layer var49 = null;
//     var30.addRangeMarker((org.jfree.chart.plot.Marker)var35, var49);
//     org.jfree.chart.util.Layer var51 = null;
//     boolean var52 = var20.removeDomainMarker((org.jfree.chart.plot.Marker)var35, var51);
//     java.awt.Font var53 = var20.getNoDataMessageFont();
//     var7.setNoDataMessageFont(var53);
//     
//     // Checks the contract:  equals-hashcode on var7 and var30
//     assertTrue("Contract failed: equals-hashcode on var7 and var30", var7.equals(var30) ? var7.hashCode() == var30.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var7
//     assertTrue("Contract failed: equals-hashcode on var30 and var7", var30.equals(var7) ? var30.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleInsets var16 = var15.getAxisOffset();
    org.jfree.chart.axis.AxisSpace var17 = var15.getFixedDomainAxisSpace();
    boolean var18 = var15.isRangeCrosshairVisible();
    var15.clearDomainMarkers(12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    java.awt.Color var2 = java.awt.Color.getColor("CONTRACT", 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.annotations.XYAnnotation var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var16, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    java.awt.Image var14 = null;
    var7.setBackgroundImage(var14);
    boolean var16 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.CategoryAxis var18 = new org.jfree.chart.axis.CategoryAxis("");
    var18.configure();
    float var20 = var18.getMaximumCategoryLabelWidthRatio();
    var18.setCategoryLabelPositionOffset(0);
    var18.setMaximumCategoryLabelLines(0);
    java.lang.String var25 = var18.getLabelToolTip();
    java.awt.Paint var27 = var18.getTickLabelPaint((java.lang.Comparable)100.0d);
    var7.setRangeGridlinePaint(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }


    java.awt.Color var2 = java.awt.Color.getColor("", 100);
    int var3 = var2.getRed();
    int var4 = var2.getRGB();
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    boolean var7 = var5.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var9 = var5.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var10 = var5.getParent();
    org.jfree.chart.plot.IntervalMarker var13 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var13.setStartValue(0.0d);
    double var16 = var13.getStartValue();
    java.awt.Paint var17 = var13.getPaint();
    var5.setOutlinePaint(var17);
    boolean var19 = var2.equals((java.lang.Object)var5);
    int var20 = var5.getWeight();
    org.jfree.chart.annotations.CategoryAnnotation var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.addAnnotation(var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test10() {}
//   public void test10() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
//     org.jfree.chart.plot.ValueMarker var33 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var34 = var33.getLabelOffsetType();
//     java.awt.Font var35 = var33.getLabelFont();
//     org.jfree.chart.util.Layer var36 = null;
//     boolean var37 = var15.removeDomainMarker(20, (org.jfree.chart.plot.Marker)var33, var36);
//     var15.clearDomainAxes();
//     org.jfree.data.xy.XYDataset var39 = null;
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     java.awt.Paint var42 = var40.getTickLabelPaint();
//     java.awt.Paint var43 = var40.getTickLabelPaint();
//     var40.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var47 = var46.getRange();
//     var46.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     var46.setRangeWithMargins(var51);
//     org.jfree.chart.renderer.xy.XYItemRenderer var53 = null;
//     org.jfree.chart.plot.XYPlot var54 = new org.jfree.chart.plot.XYPlot(var39, (org.jfree.chart.axis.ValueAxis)var40, (org.jfree.chart.axis.ValueAxis)var46, var53);
//     org.jfree.chart.util.RectangleInsets var55 = var54.getAxisOffset();
//     org.jfree.chart.plot.DefaultDrawingSupplier var56 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     java.awt.Stroke var57 = var56.getNextOutlineStroke();
//     var54.setRangeZeroBaselineStroke(var57);
//     var15.setRangeZeroBaselineStroke(var57);
//     
//     // Checks the contract:  equals-hashcode on var15 and var54
//     assertTrue("Contract failed: equals-hashcode on var15 and var54", var15.equals(var54) ? var15.hashCode() == var54.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var15 and var54.", var15.equals(var54) == var54.equals(var15));
// 
//   }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    org.jfree.chart.util.UnitType var10 = var2.getUnitType();
    org.jfree.chart.util.RectangleInsets var15 = new org.jfree.chart.util.RectangleInsets(var10, 1.0d, 2.0d, 8.0d, 9.223372036854776E18d);
    org.jfree.chart.plot.IntervalMarker var18 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var21 = var19.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var23 = null;
    var19.setRenderer(255, var23);
    var19.clearRangeMarkers();
    var18.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var19);
    boolean var27 = var10.equals((java.lang.Object)var19);
    java.lang.Object var28 = null;
    boolean var29 = var10.equals(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    java.lang.Class var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    org.jfree.chart.axis.TickUnitSource var3 = null;
    var1.setStandardTickUnits(var3);
    boolean var5 = var1.isNegativeArrowVisible();
    java.awt.Font var6 = var1.getTickLabelFont();
    org.jfree.chart.axis.TickUnitSource var7 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits();
    var1.setStandardTickUnits(var7);
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    org.jfree.chart.util.RectangleInsets var11 = var9.getLabelInsets();
    java.awt.geom.Rectangle2D var13 = null;
    org.jfree.chart.util.RectangleEdge var14 = null;
    double var15 = var9.java2DToValue(100.0d, var13, var14);
    org.jfree.chart.axis.DateTickUnit var16 = null;
    var9.setTickUnit(var16);
    org.jfree.data.Range var18 = var9.getDefaultAutoRange();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
    var19.setAutoRangeMinimumSize(2.0d);
    java.lang.String var24 = var19.getLabel();
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    java.awt.Shape var27 = var25.getLeftArrow();
    var25.setLabelAngle(0.0d);
    var25.setNegativeArrowVisible(false);
    java.lang.String var32 = var25.getLabelURL();
    org.jfree.chart.axis.DateTickUnit var33 = var25.getTickUnit();
    var19.setTickUnit(var33);
    var9.setTickUnit(var33, false, false);
    java.util.Date var38 = var1.calculateHighestVisibleTickValue(var33);
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    java.awt.Shape var41 = var39.getLeftArrow();
    var39.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var45 = var44.getRange();
    var44.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var49 = var48.getRange();
    var44.setRangeWithMargins(var49);
    java.util.TimeZone var51 = var44.getTimeZone();
    var39.setTimeZone(var51);
    org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var55 = var54.getRange();
    java.awt.Shape var56 = var54.getLeftArrow();
    var54.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var60 = var59.getRange();
    var59.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var63 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var64 = var63.getRange();
    var59.setRangeWithMargins(var64);
    java.util.TimeZone var66 = var59.getTimeZone();
    var54.setTimeZone(var66);
    org.jfree.chart.axis.DateAxis var68 = new org.jfree.chart.axis.DateAxis("XY Plot", var66);
    var39.setTimeZone(var66);
    org.jfree.data.time.RegularTimePeriod var70 = org.jfree.data.time.RegularTimePeriod.createInstance(var0, var38, var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var0.setRangeGridlinePaint((java.awt.Paint)var10);
    org.jfree.chart.plot.DrawingSupplier var12 = var0.getDrawingSupplier();
    var0.mapDatasetToRangeAxis(2, 255);
    org.jfree.chart.event.AxisChangeEvent var16 = null;
    var0.axisChanged(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDomainAxisCount();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    var18.clearRangeAxes();
    boolean var20 = var18.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var24 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var25 = null;
    boolean var26 = var18.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var24, var25);
    org.jfree.chart.plot.IntervalMarker var29 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var29.setStartValue(0.0d);
    double var32 = var29.getStartValue();
    java.awt.Paint var33 = var29.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var34 = var29.getGradientPaintTransformer();
    var29.setEndValue(9.223372036854776E18d);
    java.awt.Color var39 = java.awt.Color.getColor("", 100);
    int var40 = var39.getRed();
    int var41 = var39.getAlpha();
    var29.setPaint((java.awt.Paint)var39);
    var24.setPaint((java.awt.Paint)var39);
    java.awt.Color var44 = java.awt.Color.getColor("XY Plot", var39);
    var15.setDomainCrosshairPaint((java.awt.Paint)var44);
    java.util.List var46 = var15.getAnnotations();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var49 = var48.getAlpha();
    java.awt.Stroke var50 = var48.getStroke();
    org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var52 = var51.getRange();
    java.text.DateFormat var53 = var51.getDateFormatOverride();
    var51.resizeRange((-1.0d), (-1.0d));
    boolean var57 = var48.equals((java.lang.Object)var51);
    org.jfree.chart.util.RectangleInsets var58 = var48.getLabelOffset();
    java.awt.Paint var59 = var48.getOutlinePaint();
    org.jfree.chart.util.Layer var60 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var48, var60);
    var15.configureDomainAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test15() {}
//   public void test15() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     var15.clearAnnotations();
//     org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
//     int var30 = var29.getWeight();
//     boolean var31 = var29.isRangeCrosshairLockedOnData();
//     org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
//     var32.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var35 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var36 = var35.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var38 = var37.getRange();
//     org.jfree.chart.util.RectangleInsets var39 = var37.getLabelInsets();
//     double var41 = var39.trimWidth((-1.0d));
//     double var43 = var39.trimHeight((-6.0d));
//     boolean var44 = var36.equals((java.lang.Object)var39);
//     var32.setInsets(var39, true);
//     org.jfree.chart.LegendItemCollection var47 = var32.getLegendItems();
//     var29.setFixedLegendItems(var47);
//     var15.setFixedLegendItems(var47);
//     
//     // Checks the contract:  equals-hashcode on var22 and var35
//     assertTrue("Contract failed: equals-hashcode on var22 and var35", var22.equals(var35) ? var22.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var22
//     assertTrue("Contract failed: equals-hashcode on var35 and var22", var35.equals(var22) ? var35.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    boolean var7 = var0.isVisible();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Shape var10 = var8.getLeftArrow();
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    var8.setRangeWithMargins(var16, true, true);
    var0.setRange(var16);
    boolean var23 = var0.isHiddenValue(41993L);
    var0.setVisible(false);
    org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var28 = var27.getAlpha();
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    org.jfree.chart.axis.TickUnitSource var31 = null;
    var29.setStandardTickUnits(var31);
    org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var34 = var33.getRange();
    java.awt.Paint var35 = var33.getTickLabelPaint();
    var29.setTickLabelPaint(var35);
    var27.setOutlinePaint(var35);
    java.awt.Stroke var38 = var27.getStroke();
    org.jfree.chart.plot.DefaultDrawingSupplier var39 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Stroke var40 = var39.getNextStroke();
    java.awt.Stroke var41 = var39.getNextStroke();
    var27.setStroke(var41);
    var0.setTickMarkStroke(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var18 = var17.getAlpha();
    java.awt.Stroke var19 = var17.getStroke();
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.text.DateFormat var22 = var20.getDateFormatOverride();
    var20.resizeRange((-1.0d), (-1.0d));
    boolean var26 = var17.equals((java.lang.Object)var20);
    org.jfree.chart.util.Layer var27 = null;
    boolean var28 = var7.removeRangeMarker(20, (org.jfree.chart.plot.Marker)var17, var27);
    java.lang.Object var29 = null;
    boolean var30 = var17.equals(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    java.awt.Stroke var5 = var0.getTickMarkStroke();
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    java.awt.Paint var8 = var6.getTickLabelPaint();
    double var9 = var6.getLowerMargin();
    java.awt.Shape var10 = var6.getLeftArrow();
    var0.setDownArrow(var10);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    org.jfree.chart.axis.TickUnitSource var14 = null;
    var12.setStandardTickUnits(var14);
    boolean var16 = var12.isNegativeArrowVisible();
    java.awt.Font var17 = var12.getTickLabelFont();
    org.jfree.chart.axis.TickUnitSource var18 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits();
    var12.setStandardTickUnits(var18);
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
    java.awt.geom.Rectangle2D var24 = null;
    org.jfree.chart.util.RectangleEdge var25 = null;
    double var26 = var20.java2DToValue(100.0d, var24, var25);
    org.jfree.chart.axis.DateTickUnit var27 = null;
    var20.setTickUnit(var27);
    org.jfree.data.Range var29 = var20.getDefaultAutoRange();
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    org.jfree.chart.util.RectangleInsets var32 = var30.getLabelInsets();
    var30.setAutoRangeMinimumSize(2.0d);
    java.lang.String var35 = var30.getLabel();
    org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var37 = var36.getRange();
    java.awt.Shape var38 = var36.getLeftArrow();
    var36.setLabelAngle(0.0d);
    var36.setNegativeArrowVisible(false);
    java.lang.String var43 = var36.getLabelURL();
    org.jfree.chart.axis.DateTickUnit var44 = var36.getTickUnit();
    var30.setTickUnit(var44);
    var20.setTickUnit(var44, false, false);
    java.util.Date var49 = var12.calculateHighestVisibleTickValue(var44);
    java.util.Date var50 = var0.calculateLowestVisibleTickValue(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    org.jfree.chart.util.UnitType var10 = var2.getUnitType();
    double var12 = var2.calculateRightInset(110.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3.0d);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
    var15.clearAnnotations();
    java.awt.Graphics2D var29 = null;
    java.awt.geom.Rectangle2D var30 = null;
    org.jfree.data.xy.XYDataset var31 = null;
    org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var33 = var32.getRange();
    java.awt.Paint var34 = var32.getTickLabelPaint();
    java.awt.Paint var35 = var32.getTickLabelPaint();
    var32.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    var38.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    var38.setRangeWithMargins(var43);
    org.jfree.chart.renderer.xy.XYItemRenderer var45 = null;
    org.jfree.chart.plot.XYPlot var46 = new org.jfree.chart.plot.XYPlot(var31, (org.jfree.chart.axis.ValueAxis)var32, (org.jfree.chart.axis.ValueAxis)var38, var45);
    org.jfree.chart.util.RectangleEdge var48 = var46.getDomainAxisEdge(12);
    var46.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    var51.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var53 = var51.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var55 = null;
    var51.setRenderer(255, var55);
    java.awt.Stroke var57 = var51.getOutlineStroke();
    var46.setRangeZeroBaselineStroke(var57);
    org.jfree.chart.LegendItemCollection var59 = var46.getLegendItems();
    var46.setBackgroundImageAlpha(0.0f);
    java.util.List var62 = var46.getAnnotations();
    var15.drawRangeTickBands(var29, var30, var62);
    org.jfree.chart.axis.DateAxis var64 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var65 = var64.getRange();
    var64.setRange(0.0d, 100.0d);
    boolean var69 = var64.isInverted();
    var64.setAutoTickUnitSelection(false);
    org.jfree.chart.axis.ValueAxis[] var72 = new org.jfree.chart.axis.ValueAxis[] { var64};
    var15.setRangeAxes(var72);
    var15.setDomainGridlinesVisible(false);
    java.awt.Graphics2D var76 = null;
    java.awt.geom.Rectangle2D var77 = null;
    org.jfree.chart.plot.PlotRenderingInfo var79 = null;
    org.jfree.chart.plot.CrosshairState var80 = null;
    boolean var81 = var15.render(var76, var77, 0, var79, var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    var15.setRangeCrosshairValue(0.0d, true);
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.plot.PlotRenderingInfo var36 = null;
    var15.drawAnnotations(var34, var35, var36);
    org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var41.setStartValue(0.0d);
    double var44 = var41.getStartValue();
    org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var47 = var46.getAlpha();
    java.awt.Stroke var48 = var46.getStroke();
    var41.setOutlineStroke(var48);
    var41.setStartValue(9.223372036854776E18d);
    org.jfree.chart.util.Layer var52 = null;
    boolean var54 = var15.removeDomainMarker(253, (org.jfree.chart.plot.Marker)var41, var52, true);
    java.awt.Paint var55 = var15.getRangeGridlinePaint();
    boolean var56 = var15.isDomainCrosshairLockedOnData();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDomainAxisCount();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    var18.clearRangeAxes();
    boolean var20 = var18.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var24 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var25 = null;
    boolean var26 = var18.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var24, var25);
    org.jfree.chart.plot.IntervalMarker var29 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var29.setStartValue(0.0d);
    double var32 = var29.getStartValue();
    java.awt.Paint var33 = var29.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var34 = var29.getGradientPaintTransformer();
    var29.setEndValue(9.223372036854776E18d);
    java.awt.Color var39 = java.awt.Color.getColor("", 100);
    int var40 = var39.getRed();
    int var41 = var39.getAlpha();
    var29.setPaint((java.awt.Paint)var39);
    var24.setPaint((java.awt.Paint)var39);
    java.awt.Color var44 = java.awt.Color.getColor("XY Plot", var39);
    var15.setDomainCrosshairPaint((java.awt.Paint)var44);
    java.util.List var46 = var15.getAnnotations();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var49 = var48.getAlpha();
    java.awt.Stroke var50 = var48.getStroke();
    org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var52 = var51.getRange();
    java.text.DateFormat var53 = var51.getDateFormatOverride();
    var51.resizeRange((-1.0d), (-1.0d));
    boolean var57 = var48.equals((java.lang.Object)var51);
    org.jfree.chart.util.RectangleInsets var58 = var48.getLabelOffset();
    java.awt.Paint var59 = var48.getOutlinePaint();
    org.jfree.chart.util.Layer var60 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var48, var60);
    java.awt.Color var64 = java.awt.Color.getColor("hi!", (-16646144));
    java.awt.image.ColorModel var65 = null;
    java.awt.Rectangle var66 = null;
    java.awt.geom.Rectangle2D var67 = null;
    java.awt.geom.AffineTransform var68 = null;
    java.awt.RenderingHints var69 = null;
    java.awt.PaintContext var70 = var64.createContext(var65, var66, var67, var68, var69);
    var48.setLabelPaint((java.awt.Paint)var64);
    java.awt.Paint var72 = var48.getOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    org.jfree.chart.util.UnitType var10 = var2.getUnitType();
    org.jfree.chart.util.RectangleInsets var15 = new org.jfree.chart.util.RectangleInsets(var10, 1.0d, 2.0d, 8.0d, 9.223372036854776E18d);
    org.jfree.chart.plot.IntervalMarker var18 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var21 = var19.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var23 = null;
    var19.setRenderer(255, var23);
    var19.clearRangeMarkers();
    var18.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var19);
    boolean var27 = var10.equals((java.lang.Object)var19);
    org.jfree.chart.axis.CategoryAnchor var28 = var19.getDomainGridlinePosition();
    boolean var29 = var19.isDomainGridlinesVisible();
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
    var30.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var33 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var34 = var33.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var36 = var35.getRange();
    org.jfree.chart.util.RectangleInsets var37 = var35.getLabelInsets();
    double var39 = var37.trimWidth((-1.0d));
    double var41 = var37.trimHeight((-6.0d));
    boolean var42 = var34.equals((java.lang.Object)var37);
    var30.setInsets(var37, true);
    org.jfree.chart.LegendItemCollection var45 = var30.getLegendItems();
    var19.setFixedLegendItems(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("Category Plot");

  }

  public void test25() {}
//   public void test25() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     java.awt.Paint var8 = var0.getNoDataMessagePaint();
//     org.jfree.chart.plot.ValueMarker var11 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var12 = var11.getAlpha();
//     java.awt.Stroke var13 = var11.getStroke();
//     org.jfree.chart.util.Layer var14 = null;
//     var0.addRangeMarker((-668), (org.jfree.chart.plot.Marker)var11, var14);
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     var16.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var18 = null;
//     var16.setFixedRangeAxisSpace(var18, false);
//     boolean var21 = var16.isRangeZoomable();
//     var11.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var16);
//     
//     // Checks the contract:  equals-hashcode on var0 and var16
//     assertTrue("Contract failed: equals-hashcode on var0 and var16", var0.equals(var16) ? var0.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var0
//     assertTrue("Contract failed: equals-hashcode on var16 and var0", var16.equals(var0) ? var16.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test26() {}
//   public void test26() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     java.awt.Stroke var26 = var15.getDomainZeroBaselineStroke();
//     org.jfree.chart.LegendItemCollection var27 = var15.getLegendItems();
//     var15.clearRangeMarkers(12);
//     java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var35 = null;
//     java.awt.Rectangle var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     java.awt.geom.AffineTransform var38 = null;
//     java.awt.RenderingHints var39 = null;
//     java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
//     org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var43 = var42.getRange();
//     org.jfree.chart.axis.TickUnitSource var44 = null;
//     var42.setStandardTickUnits(var44);
//     org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var47 = var46.getRange();
//     java.awt.Paint var48 = var46.getTickLabelPaint();
//     var42.setTickLabelPaint(var48);
//     org.jfree.chart.plot.ValueMarker var51 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var52 = var51.getAlpha();
//     java.awt.Stroke var53 = var51.getStroke();
//     org.jfree.chart.plot.CategoryMarker var54 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var48, var53);
//     java.awt.Color var58 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var59 = null;
//     java.awt.Rectangle var60 = null;
//     java.awt.geom.Rectangle2D var61 = null;
//     java.awt.geom.AffineTransform var62 = null;
//     java.awt.RenderingHints var63 = null;
//     java.awt.PaintContext var64 = var58.createContext(var59, var60, var61, var62, var63);
//     org.jfree.chart.axis.DateAxis var65 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var66 = var65.getRange();
//     java.awt.Paint var67 = var65.getTickLabelPaint();
//     double var68 = var65.getLowerMargin();
//     java.awt.Shape var69 = var65.getLeftArrow();
//     java.awt.Stroke var70 = var65.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var72 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var34, var53, (java.awt.Paint)var58, var70, 0.8f);
//     var15.setDomainCrosshairStroke(var70);
//     
//     // Checks the contract:  equals-hashcode on var22 and var51
//     assertTrue("Contract failed: equals-hashcode on var22 and var51", var22.equals(var51) ? var22.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var22
//     assertTrue("Contract failed: equals-hashcode on var51 and var22", var51.equals(var22) ? var51.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    java.awt.Paint var6 = var2.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var7 = var2.getGradientPaintTransformer();
    var2.setEndValue(9.223372036854776E18d);
    java.awt.Color var12 = java.awt.Color.getColor("", 100);
    int var13 = var12.getRed();
    int var14 = var12.getAlpha();
    var2.setPaint((java.awt.Paint)var12);
    int var16 = var12.getRGB();
    int var17 = var12.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 255);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var11 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var12 = null;
    java.awt.Rectangle var13 = null;
    java.awt.geom.Rectangle2D var14 = null;
    java.awt.geom.AffineTransform var15 = null;
    java.awt.RenderingHints var16 = null;
    java.awt.PaintContext var17 = var11.createContext(var12, var13, var14, var15, var16);
    var6.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var11);
    var6.removeCategoryLabelToolTip((java.lang.Comparable)100L);
    java.lang.String var22 = var6.getCategoryLabelToolTip((java.lang.Comparable)10L);
    org.jfree.chart.axis.CategoryAxis[] var23 = new org.jfree.chart.axis.CategoryAxis[] { var6};
    var0.setDomainAxes(var23);
    boolean var25 = var0.isRangeCrosshairVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test29() {}
//   public void test29() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var33 = null;
//     var31.notifyListeners(var33);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     double var44 = var42.trimWidth((-1.0d));
//     double var46 = var42.trimHeight((-6.0d));
//     boolean var47 = var39.equals((java.lang.Object)var42);
//     var35.setInsets(var42, true);
//     java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
//     var31.setOutlineStroke(var50);
//     var15.setRangeGridlineStroke(var50);
//     java.awt.Paint var53 = var15.getRangeCrosshairPaint();
//     org.jfree.data.xy.XYDataset var55 = null;
//     org.jfree.chart.axis.DateAxis var56 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var57 = var56.getRange();
//     java.awt.Paint var58 = var56.getTickLabelPaint();
//     java.awt.Paint var59 = var56.getTickLabelPaint();
//     var56.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var62 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var63 = var62.getRange();
//     var62.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var66 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var67 = var66.getRange();
//     var62.setRangeWithMargins(var67);
//     org.jfree.chart.renderer.xy.XYItemRenderer var69 = null;
//     org.jfree.chart.plot.XYPlot var70 = new org.jfree.chart.plot.XYPlot(var55, (org.jfree.chart.axis.ValueAxis)var56, (org.jfree.chart.axis.ValueAxis)var62, var69);
//     org.jfree.chart.util.RectangleEdge var72 = var70.getDomainAxisEdge(12);
//     var70.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var75 = new org.jfree.chart.plot.CategoryPlot();
//     var75.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var77 = var75.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var79 = null;
//     var75.setRenderer(255, var79);
//     java.awt.Stroke var81 = var75.getOutlineStroke();
//     var70.setRangeZeroBaselineStroke(var81);
//     org.jfree.chart.axis.ValueAxis var83 = null;
//     int var84 = var70.getRangeAxisIndex(var83);
//     org.jfree.chart.plot.ValueMarker var87 = new org.jfree.chart.plot.ValueMarker((-1.0d));
//     org.jfree.chart.util.Layer var88 = null;
//     boolean var89 = var70.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var87, var88);
//     org.jfree.chart.util.Layer var90 = null;
//     var15.addRangeMarker(0, (org.jfree.chart.plot.Marker)var87, var90, true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var70
//     assertTrue("Contract failed: equals-hashcode on var15 and var70", var15.equals(var70) ? var15.hashCode() == var70.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var70 and var15
//     assertTrue("Contract failed: equals-hashcode on var70 and var15", var70.equals(var15) ? var70.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var75
//     assertTrue("Contract failed: equals-hashcode on var20 and var75", var20.equals(var75) ? var20.hashCode() == var75.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var75 and var20
//     assertTrue("Contract failed: equals-hashcode on var75 and var20", var75.equals(var20) ? var75.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    double var19 = var7.getRight();
    double var21 = var7.calculateRightOutset((-1.0d));
    org.jfree.chart.util.UnitType var22 = var7.getUnitType();
    double var24 = var7.calculateBottomOutset(0.0d);
    double var26 = var7.calculateBottomInset(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3.0d);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    float var19 = var15.getForegroundAlpha();
    org.jfree.chart.util.RectangleEdge var20 = var15.getRangeAxisEdge();
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var24 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var25 = var24.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    org.jfree.chart.util.RectangleInsets var28 = var26.getLabelInsets();
    double var30 = var28.trimWidth((-1.0d));
    double var32 = var28.trimHeight((-6.0d));
    boolean var33 = var25.equals((java.lang.Object)var28);
    var21.setInsets(var28, true);
    org.jfree.chart.LegendItemCollection var36 = var21.getLegendItems();
    boolean var37 = var15.equals((java.lang.Object)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test32() {}
//   public void test32() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleInsets var16 = var15.getAxisOffset();
//     org.jfree.chart.axis.AxisSpace var17 = var15.getFixedDomainAxisSpace();
//     boolean var18 = var15.isRangeCrosshairVisible();
//     org.jfree.data.xy.XYDataset var20 = var15.getDataset(253);
//     org.jfree.data.xy.XYDataset var21 = null;
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     java.awt.Paint var25 = var22.getTickLabelPaint();
//     var22.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var28.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var28.setRangeWithMargins(var33);
//     org.jfree.chart.renderer.xy.XYItemRenderer var35 = null;
//     org.jfree.chart.plot.XYPlot var36 = new org.jfree.chart.plot.XYPlot(var21, (org.jfree.chart.axis.ValueAxis)var22, (org.jfree.chart.axis.ValueAxis)var28, var35);
//     org.jfree.chart.util.RectangleEdge var38 = var36.getDomainAxisEdge(12);
//     var36.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     var41.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var43 = var41.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var45 = null;
//     var41.setRenderer(255, var45);
//     java.awt.Stroke var47 = var41.getOutlineStroke();
//     var36.setRangeZeroBaselineStroke(var47);
//     var15.setDomainZeroBaselineStroke(var47);
//     
//     // Checks the contract:  equals-hashcode on var15 and var36
//     assertTrue("Contract failed: equals-hashcode on var15 and var36", var15.equals(var36) ? var15.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var15
//     assertTrue("Contract failed: equals-hashcode on var36 and var15", var36.equals(var15) ? var36.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.configureRangeAxes();
    org.jfree.data.xy.XYDataset var25 = var15.getDataset((-1));
    org.jfree.chart.axis.AxisLocation var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setRangeAxisLocation((-16777116), var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    var0.setTickMarksVisible(false);
    boolean var4 = var0.isHiddenValue(100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.axis.MarkerAxisBand var4 = null;
    var1.setMarkerBand(var4);
    org.jfree.chart.axis.MarkerAxisBand var6 = var1.getMarkerBand();
    var1.setAutoRangeIncludesZero(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
    var15.setRangeAxis((org.jfree.chart.axis.ValueAxis)var20);
    org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
    var25.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var27 = var25.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var29 = null;
    var25.setRenderer(255, var29);
    java.awt.Stroke var31 = var25.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var32 = var25.getDataset();
    java.awt.Paint var33 = var25.getNoDataMessagePaint();
    org.jfree.chart.util.Layer var35 = null;
    java.util.Collection var36 = var25.getDomainMarkers(1, var35);
    org.jfree.chart.axis.AxisLocation var37 = var25.getRangeAxisLocation();
    var15.setRangeAxisLocation(10, var37);
    org.jfree.chart.axis.CategoryAxis var40 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var45 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var46 = null;
    java.awt.Rectangle var47 = null;
    java.awt.geom.Rectangle2D var48 = null;
    java.awt.geom.AffineTransform var49 = null;
    java.awt.RenderingHints var50 = null;
    java.awt.PaintContext var51 = var45.createContext(var46, var47, var48, var49, var50);
    var40.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var45);
    var40.setTickMarkInsideLength(2.0f);
    var40.setCategoryLabelPositionOffset((-668));
    org.jfree.chart.axis.CategoryLabelPositions var57 = var40.getCategoryLabelPositions();
    boolean var58 = var37.equals((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    java.lang.Object var13 = var0.clone();
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var17 = var15.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var19 = null;
    var15.setRenderer(255, var19);
    java.awt.Stroke var21 = var15.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var22 = var15.getDataset();
    java.awt.Paint var23 = var15.getNoDataMessagePaint();
    org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
    var25.clearRangeAxes();
    boolean var27 = var25.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var29 = var25.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var30 = var25.getParent();
    org.jfree.chart.axis.AxisLocation var32 = var25.getDomainAxisLocation((-668));
    var24.setRangeAxisLocation(var32);
    var15.setDomainAxisLocation(var32, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxisLocation((-16777216), var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var6 = var0.getLabelFont();
    org.jfree.data.general.Dataset var7 = null;
    org.jfree.data.general.DatasetChangeEvent var8 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var0, var7);
    java.lang.String var9 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    var15.clearRangeAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test40() {}
//   public void test40() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }
// 
// 
//     org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var2.setStartValue(0.0d);
//     double var5 = var2.getStartValue();
//     org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var8 = var7.getAlpha();
//     java.awt.Stroke var9 = var7.getStroke();
//     var2.setOutlineStroke(var9);
//     var2.setStartValue(9.223372036854776E18d);
//     org.jfree.chart.util.RectangleInsets var13 = var2.getLabelOffset();
//     double var15 = var13.extendHeight(1.0d);
//     double var17 = var13.calculateRightOutset((-12.0d));
//     org.jfree.data.xy.XYDataset var18 = null;
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     java.awt.Paint var21 = var19.getTickLabelPaint();
//     java.awt.Paint var22 = var19.getTickLabelPaint();
//     var19.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var26 = var25.getRange();
//     var25.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     var25.setRangeWithMargins(var30);
//     org.jfree.chart.renderer.xy.XYItemRenderer var32 = null;
//     org.jfree.chart.plot.XYPlot var33 = new org.jfree.chart.plot.XYPlot(var18, (org.jfree.chart.axis.ValueAxis)var19, (org.jfree.chart.axis.ValueAxis)var25, var32);
//     org.jfree.chart.renderer.xy.XYItemRenderer var35 = null;
//     var33.setRenderer(0, var35);
//     org.jfree.data.xy.XYDataset var37 = null;
//     var33.setDataset(var37);
//     org.jfree.chart.plot.ValueMarker var40 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var41 = var40.getAlpha();
//     java.awt.Stroke var42 = var40.getStroke();
//     var33.setDomainZeroBaselineStroke(var42);
//     java.awt.Stroke var44 = var33.getDomainZeroBaselineStroke();
//     org.jfree.chart.axis.AxisLocation var46 = var33.getDomainAxisLocation((-203));
//     java.awt.Stroke var47 = var33.getRangeZeroBaselineStroke();
//     boolean var48 = var13.equals((java.lang.Object)var47);
//     
//     // Checks the contract:  equals-hashcode on var7 and var40
//     assertTrue("Contract failed: equals-hashcode on var7 and var40", var7.equals(var40) ? var7.hashCode() == var40.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var40 and var7
//     assertTrue("Contract failed: equals-hashcode on var40 and var7", var40.equals(var7) ? var40.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     var1.configure();
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     java.text.DateFormat var11 = var9.getDateFormatOverride();
//     var9.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var15 = var9.getStandardTickUnits();
//     var9.setLabelURL("");
//     java.awt.Font var18 = var9.getTickLabelFont();
//     var1.setTickLabelFont((java.lang.Comparable)(byte)100, var18);
//     java.awt.Graphics2D var20 = null;
//     org.jfree.data.xy.XYDataset var21 = null;
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     java.awt.Paint var25 = var22.getTickLabelPaint();
//     var22.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var28.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var28.setRangeWithMargins(var33);
//     org.jfree.chart.renderer.xy.XYItemRenderer var35 = null;
//     org.jfree.chart.plot.XYPlot var36 = new org.jfree.chart.plot.XYPlot(var21, (org.jfree.chart.axis.ValueAxis)var22, (org.jfree.chart.axis.ValueAxis)var28, var35);
//     int var37 = var36.getDomainAxisCount();
//     org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot();
//     var39.clearRangeAxes();
//     boolean var41 = var39.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var45 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var46 = null;
//     boolean var47 = var39.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var45, var46);
//     org.jfree.chart.plot.IntervalMarker var50 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var50.setStartValue(0.0d);
//     double var53 = var50.getStartValue();
//     java.awt.Paint var54 = var50.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var55 = var50.getGradientPaintTransformer();
//     var50.setEndValue(9.223372036854776E18d);
//     java.awt.Color var60 = java.awt.Color.getColor("", 100);
//     int var61 = var60.getRed();
//     int var62 = var60.getAlpha();
//     var50.setPaint((java.awt.Paint)var60);
//     var45.setPaint((java.awt.Paint)var60);
//     java.awt.Color var65 = java.awt.Color.getColor("XY Plot", var60);
//     var36.setDomainCrosshairPaint((java.awt.Paint)var65);
//     java.awt.geom.Rectangle2D var67 = null;
//     org.jfree.chart.axis.CategoryAxis var69 = new org.jfree.chart.axis.CategoryAxis("");
//     var69.configure();
//     float var71 = var69.getMaximumCategoryLabelWidthRatio();
//     var69.setCategoryLabelPositionOffset(0);
//     var69.setMaximumCategoryLabelLines(0);
//     java.lang.String var76 = var69.getLabelToolTip();
//     java.awt.Paint var78 = var69.getTickLabelPaint((java.lang.Comparable)100.0d);
//     org.jfree.chart.plot.Plot var79 = var69.getPlot();
//     org.jfree.chart.axis.CategoryAnchor var80 = null;
//     java.awt.geom.Rectangle2D var83 = null;
//     org.jfree.chart.plot.CategoryPlot var84 = new org.jfree.chart.plot.CategoryPlot();
//     var84.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var86 = null;
//     var84.setFixedRangeAxisSpace(var86, false);
//     boolean var89 = var84.isRangeZoomable();
//     var84.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var93 = var84.getDomainAxisEdge(0);
//     double var94 = var69.getCategoryJava2DCoordinate(var80, (-203), 10, var83, var93);
//     org.jfree.chart.axis.AxisSpace var95 = null;
//     org.jfree.chart.axis.AxisSpace var96 = var1.reserveSpace(var20, (org.jfree.chart.plot.Plot)var36, var67, var93, var95);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.plot.PlotRenderingInfo var17 = null;
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.clearRangeAxes();
    boolean var21 = var19.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var23 = var19.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var24 = var19.getParent();
    org.jfree.chart.axis.AxisLocation var26 = var19.getDomainAxisLocation((-668));
    var18.setRangeAxisLocation(var26);
    org.jfree.chart.axis.AxisSpace var28 = null;
    var18.setFixedDomainAxisSpace(var28, true);
    org.jfree.chart.plot.PlotRenderingInfo var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    org.jfree.chart.util.RectangleAnchor var34 = null;
    java.awt.geom.Point2D var35 = org.jfree.chart.util.RectangleAnchor.coordinates(var33, var34);
    var18.zoomDomainAxes(9.223372036854776E18d, var32, var35);
    var15.zoomRangeAxes((-9.223372036854776E18d), var17, var35);
    org.jfree.chart.plot.CategoryMarker var40 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    org.jfree.chart.util.Layer var41 = null;
    boolean var42 = var15.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var40, var41);
    float var43 = var15.getBackgroundAlpha();
    org.jfree.chart.plot.ValueMarker var45 = new org.jfree.chart.plot.ValueMarker(7.0d);
    boolean var46 = var15.removeDomainMarker((org.jfree.chart.plot.Marker)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setTickMarkOutsideLength(100.0f);
//     var1.setUpperMargin((-7.0d));
//     org.jfree.data.time.Day var8 = new org.jfree.data.time.Day();
//     long var9 = var8.getSerialIndex();
//     long var10 = var8.getSerialIndex();
//     java.awt.Font var11 = var1.getTickLabelFont((java.lang.Comparable)var8);
//     java.awt.geom.Rectangle2D var14 = null;
//     org.jfree.data.xy.XYDataset var15 = null;
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     java.awt.Paint var18 = var16.getTickLabelPaint();
//     java.awt.Paint var19 = var16.getTickLabelPaint();
//     var16.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     var22.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     var22.setRangeWithMargins(var27);
//     org.jfree.chart.renderer.xy.XYItemRenderer var29 = null;
//     org.jfree.chart.plot.XYPlot var30 = new org.jfree.chart.plot.XYPlot(var15, (org.jfree.chart.axis.ValueAxis)var16, (org.jfree.chart.axis.ValueAxis)var22, var29);
//     org.jfree.chart.renderer.xy.XYItemRenderer var32 = null;
//     var30.setRenderer(0, var32);
//     float var34 = var30.getForegroundAlpha();
//     org.jfree.chart.util.RectangleEdge var35 = var30.getRangeAxisEdge();
//     double var36 = var1.getCategoryEnd((-16777116), (-1), var14, var35);
// 
//   }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }


    org.jfree.chart.plot.Marker var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.event.MarkerChangeEvent var1 = new org.jfree.chart.event.MarkerChangeEvent(var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    var15.setRangeCrosshairVisible(false);
    org.jfree.chart.annotations.XYAnnotation var22 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test46() {}
//   public void test46() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     java.awt.Stroke var3 = var0.getRangeGridlineStroke();
//     java.awt.Graphics2D var4 = null;
//     java.awt.geom.Rectangle2D var5 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var7 = null;
//     boolean var8 = var0.render(var4, var5, 20, var7);
//     org.jfree.chart.axis.CategoryAxis var11 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var14 = null;
//     org.jfree.chart.util.RectangleEdge var15 = null;
//     double var16 = var11.getCategoryMiddle(0, (-1), var14, var15);
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     var17.clearRangeAxes();
//     boolean var19 = var17.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var21 = var17.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var22 = var17.getParent();
//     var11.addChangeListener((org.jfree.chart.event.AxisChangeListener)var17);
//     java.awt.Image var24 = null;
//     var17.setBackgroundImage(var24);
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     var26.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var28 = var26.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var30 = null;
//     var26.setRenderer(255, var30);
//     java.awt.Stroke var32 = var26.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var33 = var26.getDataset();
//     java.awt.Paint var34 = var26.getNoDataMessagePaint();
//     org.jfree.chart.util.Layer var36 = null;
//     java.util.Collection var37 = var26.getDomainMarkers(1, var36);
//     org.jfree.chart.axis.AxisLocation var38 = var26.getRangeAxisLocation();
//     var17.setDomainAxisLocation(var38, true);
//     var0.setDomainAxisLocation(0, var38);
//     
//     // Checks the contract:  equals-hashcode on var0 and var17
//     assertTrue("Contract failed: equals-hashcode on var0 and var17", var0.equals(var17) ? var0.hashCode() == var17.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.configureRangeAxes();
    java.lang.String var24 = var15.getPlotType();
    org.jfree.chart.annotations.XYAnnotation var25 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "XY Plot"+ "'", var24.equals("XY Plot"));

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }


    org.jfree.chart.util.RectangleInsets var4 = new org.jfree.chart.util.RectangleInsets(10.0d, 0.05d, 3.0d, (-4.0d));
    java.awt.geom.Rectangle2D var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var8 = var4.createInsetRectangle(var5, false, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    java.awt.Graphics2D var16 = null;
    java.awt.geom.Rectangle2D var17 = null;
    java.util.List var18 = null;
    var15.drawRangeTickBands(var16, var17, var18);
    org.jfree.chart.renderer.xy.XYItemRenderer var20 = null;
    var15.setRenderer(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var22 = null;
    java.awt.Rectangle var23 = null;
    java.awt.geom.Rectangle2D var24 = null;
    java.awt.geom.AffineTransform var25 = null;
    java.awt.RenderingHints var26 = null;
    java.awt.PaintContext var27 = var21.createContext(var22, var23, var24, var25, var26);
    var16.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var21);
    var16.setTickMarkInsideLength(2.0f);
    var16.clearCategoryLabelToolTips();
    java.awt.geom.Rectangle2D var34 = null;
    org.jfree.chart.util.RectangleEdge var35 = null;
    double var36 = var16.getCategoryEnd((-1), (-668), var34, var35);
    var7.setDomainAxis(var16);
    org.jfree.chart.util.RectangleEdge var39 = var7.getDomainAxisEdge((-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     var1.configure();
//     boolean var4 = var1.getAutoRangeStickyZero();
//     var1.setFixedAutoRange(0.05d);
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.data.xy.XYDataset var9 = null;
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     java.awt.Paint var12 = var10.getTickLabelPaint();
//     java.awt.Paint var13 = var10.getTickLabelPaint();
//     var10.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     var16.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     var16.setRangeWithMargins(var21);
//     org.jfree.chart.renderer.xy.XYItemRenderer var23 = null;
//     org.jfree.chart.plot.XYPlot var24 = new org.jfree.chart.plot.XYPlot(var9, (org.jfree.chart.axis.ValueAxis)var10, (org.jfree.chart.axis.ValueAxis)var16, var23);
//     org.jfree.chart.util.RectangleEdge var26 = var24.getDomainAxisEdge(12);
//     var24.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
//     var29.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var31 = var29.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var33 = null;
//     var29.setRenderer(255, var33);
//     java.awt.Stroke var35 = var29.getOutlineStroke();
//     var24.setRangeZeroBaselineStroke(var35);
//     org.jfree.chart.LegendItemCollection var37 = var24.getLegendItems();
//     var24.setBackgroundImageAlpha(0.0f);
//     java.util.List var40 = var24.getAnnotations();
//     org.jfree.chart.axis.AxisSpace var41 = null;
//     var24.setFixedDomainAxisSpace(var41, false);
//     org.jfree.chart.util.RectangleEdge var45 = var24.getRangeAxisEdge(20);
//     double var46 = var1.valueToJava2D(0.0d, var8, var45);
// 
//   }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    var15.setBackgroundImageAlpha(0.0f);
    java.util.List var31 = var15.getAnnotations();
    org.jfree.chart.axis.AxisSpace var32 = null;
    var15.setFixedDomainAxisSpace(var32, false);
    var15.clearRangeMarkers(100);
    org.jfree.data.xy.XYDataset var37 = var15.getDataset();
    org.jfree.chart.axis.AxisSpace var38 = null;
    var15.setFixedRangeAxisSpace(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
    var15.setRangeAxis((org.jfree.chart.axis.ValueAxis)var20);
    double var24 = var20.getLowerBound();
    boolean var26 = var20.isHiddenValue(1419105599999L);
    java.awt.Shape var27 = var20.getDownArrow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    var15.setRangeCrosshairValue(0.0d, true);
    org.jfree.chart.axis.AxisSpace var34 = var15.getFixedRangeAxisSpace();
    org.jfree.chart.plot.IntervalMarker var37 = new org.jfree.chart.plot.IntervalMarker(3.0d, (-9.223372036854776E18d));
    java.awt.Paint var38 = var37.getLabelPaint();
    var15.setRangeGridlinePaint(var38);
    org.jfree.chart.axis.CategoryAxis var42 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var45 = null;
    org.jfree.chart.util.RectangleEdge var46 = null;
    double var47 = var42.getCategoryMiddle(0, (-1), var45, var46);
    org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
    var48.clearRangeAxes();
    boolean var50 = var48.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var52 = var48.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var53 = var48.getParent();
    var42.addChangeListener((org.jfree.chart.event.AxisChangeListener)var48);
    java.awt.Image var55 = null;
    var48.setBackgroundImage(var55);
    org.jfree.chart.axis.AxisLocation var58 = var48.getDomainAxisLocation((-668));
    org.jfree.chart.axis.AxisLocation var60 = var48.getDomainAxisLocation(255);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setRangeAxisLocation((-1), var60, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var7 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var8 = null;
    java.awt.Rectangle var9 = null;
    java.awt.geom.Rectangle2D var10 = null;
    java.awt.geom.AffineTransform var11 = null;
    java.awt.RenderingHints var12 = null;
    java.awt.PaintContext var13 = var7.createContext(var8, var9, var10, var11, var12);
    var2.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var7);
    var2.setTickMarkInsideLength(2.0f);
    org.jfree.chart.axis.ValueAxis var17 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer var18 = null;
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot(var0, var2, var17, var18);
    org.jfree.data.time.Day var20 = new org.jfree.data.time.Day();
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.text.DateFormat var23 = var21.getDateFormatOverride();
    var21.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var27 = var21.getLabelFont();
    org.jfree.data.general.Dataset var28 = null;
    org.jfree.data.general.DatasetChangeEvent var29 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var21, var28);
    int var30 = var20.compareTo((java.lang.Object)var21);
    var2.addCategoryLabelToolTip((java.lang.Comparable)var30, "hi!");
    var2.setLabelURL("java.awt.Color[r=255,g=253,b=100]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    int var1 = var0.getWeight();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.awt.Shape var5 = var3.getLeftArrow();
    var3.setLabelAngle(0.0d);
    var0.setRangeAxis(255, (org.jfree.chart.axis.ValueAxis)var3);
    boolean var9 = var3.isAutoTickUnitSelection();
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    var10.setRange(0.0d, 100.0d);
    boolean var15 = var10.isInverted();
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    java.text.DateFormat var18 = var16.getDateFormatOverride();
    var16.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var22 = var16.getStandardTickUnits();
    var16.setLabelURL("");
    boolean var25 = var16.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    var26.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    var26.setRangeWithMargins(var31);
    var16.setRange(var31);
    var10.setRange(var31, true, false);
    var3.setRange(var31);
    org.jfree.chart.util.RectangleInsets var38 = var3.getLabelInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    var0.setTickMarkInsideLength(10.0f);
    boolean var7 = var0.isNegativeArrowVisible();
    var0.setLabelAngle((-6.0d));
    org.jfree.data.xy.XYDataset var10 = null;
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    java.awt.Paint var13 = var11.getTickLabelPaint();
    java.awt.Paint var14 = var11.getTickLabelPaint();
    var11.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    var17.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    var17.setRangeWithMargins(var22);
    org.jfree.chart.renderer.xy.XYItemRenderer var24 = null;
    org.jfree.chart.plot.XYPlot var25 = new org.jfree.chart.plot.XYPlot(var10, (org.jfree.chart.axis.ValueAxis)var11, (org.jfree.chart.axis.ValueAxis)var17, var24);
    org.jfree.chart.util.RectangleEdge var27 = var25.getDomainAxisEdge(12);
    var25.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
    var30.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var32 = var30.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var34 = null;
    var30.setRenderer(255, var34);
    java.awt.Stroke var36 = var30.getOutlineStroke();
    var25.setRangeZeroBaselineStroke(var36);
    org.jfree.chart.LegendItemCollection var38 = var25.getLegendItems();
    var25.setBackgroundImageAlpha(0.0f);
    java.util.List var41 = var25.getAnnotations();
    var25.configureRangeAxes();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var25);
    org.jfree.chart.annotations.XYAnnotation var44 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var45 = var25.removeAnnotation(var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.plot.PlotRenderingInfo var17 = null;
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.clearRangeAxes();
    boolean var21 = var19.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var23 = var19.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var24 = var19.getParent();
    org.jfree.chart.axis.AxisLocation var26 = var19.getDomainAxisLocation((-668));
    var18.setRangeAxisLocation(var26);
    org.jfree.chart.axis.AxisSpace var28 = null;
    var18.setFixedDomainAxisSpace(var28, true);
    org.jfree.chart.plot.PlotRenderingInfo var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    org.jfree.chart.util.RectangleAnchor var34 = null;
    java.awt.geom.Point2D var35 = org.jfree.chart.util.RectangleAnchor.coordinates(var33, var34);
    var18.zoomDomainAxes(9.223372036854776E18d, var32, var35);
    var15.zoomRangeAxes((-9.223372036854776E18d), var17, var35);
    java.awt.Paint var39 = var15.getQuadrantPaint(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    java.awt.Shape var3 = var0.getUpArrow();
    boolean var4 = var0.isVisible();
    var0.setAutoTickUnitSelection(true);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.text.DateFormat var9 = var7.getDateFormatOverride();
    java.awt.Shape var10 = var7.getUpArrow();
    boolean var11 = var7.isAutoRange();
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var12.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    var12.setRangeWithMargins(var17);
    java.util.TimeZone var19 = var12.getTimeZone();
    var7.setTimeZone(var19);
    var0.setTimeZone(var19);
    var0.resizeRange((-6.0d), 7.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.plot.IntervalMarker var30 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var30.setStartValue(0.0d);
    double var33 = var30.getStartValue();
    java.awt.Paint var34 = var30.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var35 = var30.getGradientPaintTransformer();
    java.awt.Color var38 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var39 = null;
    java.awt.Rectangle var40 = null;
    java.awt.geom.Rectangle2D var41 = null;
    java.awt.geom.AffineTransform var42 = null;
    java.awt.RenderingHints var43 = null;
    java.awt.PaintContext var44 = var38.createContext(var39, var40, var41, var42, var43);
    java.awt.image.ColorModel var45 = null;
    java.awt.Rectangle var46 = null;
    java.awt.geom.Rectangle2D var47 = null;
    java.awt.geom.AffineTransform var48 = null;
    java.awt.RenderingHints var49 = null;
    java.awt.PaintContext var50 = var38.createContext(var45, var46, var47, var48, var49);
    var30.setLabelPaint((java.awt.Paint)var38);
    java.awt.Color var52 = var38.darker();
    java.awt.Color var56 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var57 = null;
    java.awt.Rectangle var58 = null;
    java.awt.geom.Rectangle2D var59 = null;
    java.awt.geom.AffineTransform var60 = null;
    java.awt.RenderingHints var61 = null;
    java.awt.PaintContext var62 = var56.createContext(var57, var58, var59, var60, var61);
    java.awt.color.ColorSpace var63 = var56.getColorSpace();
    java.awt.Color var69 = java.awt.Color.getColor("", 100);
    int var70 = var69.getRed();
    int var71 = var69.getAlpha();
    float[] var75 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var76 = var69.getColorComponents(var75);
    float[] var77 = java.awt.Color.RGBtoHSB(20, 255, 12, var75);
    float[] var78 = var52.getColorComponents(var63, var75);
    var15.setRangeTickBandPaint((java.awt.Paint)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var0.setRangeGridlinePaint((java.awt.Paint)var10);
    org.jfree.chart.axis.CategoryAxis var14 = new org.jfree.chart.axis.CategoryAxis("");
    var14.configure();
    float var16 = var14.getMaximumCategoryLabelWidthRatio();
    var14.setCategoryLabelPositionOffset(0);
    var14.setCategoryMargin(1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxis((-16777216), var14, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0f);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Paint var8 = var0.getDomainGridlinePaint();
    org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var12.setStartValue(0.0d);
    double var15 = var12.getStartValue();
    java.awt.Paint var16 = var12.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
    var12.setEndValue(9.223372036854776E18d);
    java.lang.Object var20 = var12.clone();
    org.jfree.chart.util.Layer var21 = null;
    var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
    org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(0);
    org.jfree.chart.plot.Marker var26 = null;
    org.jfree.chart.util.Layer var27 = null;
    boolean var29 = var0.removeDomainMarker(20, var26, var27, false);
    org.jfree.chart.util.RectangleInsets var30 = var0.getAxisOffset();
    org.jfree.data.category.CategoryDataset var32 = null;
    var0.setDataset(12, var32);
    org.jfree.chart.axis.CategoryAxis var36 = new org.jfree.chart.axis.CategoryAxis("");
    var36.configure();
    float var38 = var36.getMaximumCategoryLabelWidthRatio();
    var36.setCategoryLabelPositionOffset(0);
    var36.setMaximumCategoryLabelLines(0);
    java.lang.String var43 = var36.getLabelToolTip();
    java.awt.Paint var45 = var36.getTickLabelPaint((java.lang.Comparable)100.0d);
    org.jfree.chart.plot.Plot var46 = var36.getPlot();
    org.jfree.chart.axis.CategoryAnchor var47 = null;
    java.awt.geom.Rectangle2D var50 = null;
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    var51.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var53 = null;
    var51.setFixedRangeAxisSpace(var53, false);
    boolean var56 = var51.isRangeZoomable();
    var51.setWeight((-1));
    org.jfree.chart.util.RectangleEdge var60 = var51.getDomainAxisEdge(0);
    double var61 = var36.getCategoryJava2DCoordinate(var47, (-203), 10, var50, var60);
    java.awt.Paint var63 = null;
    var36.setTickLabelPaint((java.lang.Comparable)10.0f, var63);
    var0.setDomainAxis(255, var36);
    org.jfree.chart.util.RectangleInsets var66 = var0.getAxisOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    org.jfree.chart.axis.TickUnitSource var5 = null;
    var3.setStandardTickUnits(var5);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.awt.Paint var9 = var7.getTickLabelPaint();
    var3.setTickLabelPaint(var9);
    var3.resizeRange((-1.0d));
    java.util.Date var13 = var3.getMinimumDate();
    var0.setMinimumDate(var13);
    boolean var15 = var0.isAutoRange();
    var0.setLowerBound((-9.223372036854776E18d));
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    var21.setVerticalTickLabels(false);
    org.jfree.data.Range var25 = var21.getDefaultAutoRange();
    var19.setRange(var25);
    var18.setRange(var25, true, false);
    java.util.Date var30 = var18.getMaximumDate();
    java.lang.Class var31 = null;
    java.lang.Class var32 = null;
    org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var34 = var33.getRange();
    org.jfree.chart.util.RectangleInsets var35 = var33.getLabelInsets();
    org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var37 = var36.getRange();
    org.jfree.chart.axis.TickUnitSource var38 = null;
    var36.setStandardTickUnits(var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    var36.setTickLabelPaint(var42);
    var36.resizeRange((-1.0d));
    java.util.Date var46 = var36.getMinimumDate();
    var33.setMinimumDate(var46);
    org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var49 = var48.getRange();
    java.awt.Shape var50 = var48.getLeftArrow();
    var48.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var53 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var54 = var53.getRange();
    var53.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var57 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var58 = var57.getRange();
    var53.setRangeWithMargins(var58);
    java.util.TimeZone var60 = var53.getTimeZone();
    var48.setTimeZone(var60);
    org.jfree.data.time.RegularTimePeriod var62 = org.jfree.data.time.RegularTimePeriod.createInstance(var32, var46, var60);
    org.jfree.chart.axis.DateAxis var63 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var64 = var63.getRange();
    var63.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var67 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var68 = var67.getRange();
    var63.setRangeWithMargins(var68);
    java.util.TimeZone var70 = var63.getTimeZone();
    org.jfree.data.time.RegularTimePeriod var71 = org.jfree.data.time.RegularTimePeriod.createInstance(var31, var46, var70);
    org.jfree.chart.axis.TickUnitSource var72 = org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(var70);
    var18.setStandardTickUnits(var72);
    var0.setStandardTickUnits(var72);
    var0.setRangeWithMargins((-1.0d), 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    org.jfree.chart.axis.CategoryAxis var8 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var11 = null;
    org.jfree.chart.util.RectangleEdge var12 = null;
    double var13 = var8.getCategoryMiddle(0, (-1), var11, var12);
    var8.configure();
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    java.text.DateFormat var18 = var16.getDateFormatOverride();
    var16.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var22 = var16.getStandardTickUnits();
    var16.setLabelURL("");
    java.awt.Font var25 = var16.getTickLabelFont();
    var8.setTickLabelFont((java.lang.Comparable)(byte)100, var25);
    var1.setTickLabelFont((java.lang.Comparable)2.0d, var25);
    java.lang.String var29 = var1.getCategoryLabelToolTip((java.lang.Comparable)(short)100);
    double var30 = var1.getCategoryMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.2d);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }


    org.jfree.chart.ChartColor var3 = new org.jfree.chart.ChartColor(255, 15, 0);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Shape var2 = var0.getLeftArrow();
    var0.setLabelAngle(0.0d);
    var0.setNegativeArrowVisible(false);
    java.lang.String var7 = var0.getLabelURL();
    org.jfree.chart.axis.DateTickUnit var8 = var0.getTickUnit();
    var0.setFixedDimension(112.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.renderer.category.CategoryItemRenderer var19 = var15.getRenderer();
    org.jfree.chart.axis.AxisSpace var20 = null;
    var15.setFixedDomainAxisSpace(var20, false);
    org.jfree.chart.annotations.CategoryAnnotation var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var23, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(7.0d);
    double var2 = var1.getValue();
    java.awt.Stroke var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setStroke(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 7.0d);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var0.setRangeGridlinePaint((java.awt.Paint)var10);
    org.jfree.chart.plot.DrawingSupplier var12 = var0.getDrawingSupplier();
    org.jfree.chart.axis.ValueAxis var13 = var0.getRangeAxis();
    var0.setAnchorValue(106.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    org.jfree.chart.util.Layer var14 = null;
    java.util.Collection var15 = var7.getRangeMarkers(var14);
    org.jfree.chart.renderer.category.CategoryItemRenderer var16 = null;
    int var17 = var7.getIndexOf(var16);
    java.util.List var18 = var7.getAnnotations();
    boolean var19 = var7.isDomainGridlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    java.awt.Shape var3 = var0.getUpArrow();
    var0.configure();
    java.lang.String var5 = var0.getLabel();
    java.util.TimeZone var6 = var0.getTimeZone();
    java.awt.Color var9 = java.awt.Color.getColor("", 100);
    int var10 = var9.getRed();
    int var11 = var9.getAlpha();
    var0.setLabelPaint((java.awt.Paint)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 255);

  }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     var1.configure();
//     boolean var4 = var1.getAutoRangeStickyZero();
//     java.awt.Graphics2D var5 = null;
//     java.awt.geom.Rectangle2D var7 = null;
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.data.xy.XYDataset var9 = null;
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     java.awt.Paint var12 = var10.getTickLabelPaint();
//     java.awt.Paint var13 = var10.getTickLabelPaint();
//     var10.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     var16.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     var16.setRangeWithMargins(var21);
//     org.jfree.chart.renderer.xy.XYItemRenderer var23 = null;
//     org.jfree.chart.plot.XYPlot var24 = new org.jfree.chart.plot.XYPlot(var9, (org.jfree.chart.axis.ValueAxis)var10, (org.jfree.chart.axis.ValueAxis)var16, var23);
//     org.jfree.chart.util.RectangleEdge var26 = var24.getDomainAxisEdge(12);
//     org.jfree.chart.plot.PlotRenderingInfo var27 = null;
//     org.jfree.chart.axis.AxisState var28 = var1.draw(var5, (-9.223372036854776E18d), var7, var8, var26, var27);
// 
//   }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.event.PlotChangeListener var19 = null;
    var15.removeChangeListener(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    org.jfree.chart.util.RectangleInsets var23 = var21.getLabelInsets();
    double var25 = var23.trimWidth((-1.0d));
    double var27 = var23.trimHeight((-6.0d));
    double var29 = var23.extendWidth((-6.0d));
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    java.text.DateFormat var32 = var30.getDateFormatOverride();
    boolean var33 = var23.equals((java.lang.Object)var30);
    var15.setAxisOffset(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var0.setRangeGridlinePaint((java.awt.Paint)var10);
    org.jfree.chart.plot.DrawingSupplier var12 = var0.getDrawingSupplier();
    org.jfree.chart.plot.Plot var13 = var0.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    double var4 = var0.getAutoRangeMinimumSize();
    var0.setAutoRangeMinimumSize(3.0d, true);
    boolean var8 = var0.isPositiveArrowVisible();
    double var9 = var0.getUpperMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.05d);

  }

  public void test76() {}
//   public void test76() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     var1.setAutoRangeIncludesZero(false);
//     org.jfree.chart.axis.MarkerAxisBand var4 = null;
//     var1.setMarkerBand(var4);
//     var1.setAutoRangeStickyZero(false);
//     org.jfree.chart.axis.MarkerAxisBand var8 = null;
//     var1.setMarkerBand(var8);
//     org.jfree.data.xy.XYDataset var10 = null;
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     java.awt.Paint var13 = var11.getTickLabelPaint();
//     java.awt.Paint var14 = var11.getTickLabelPaint();
//     var11.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     var17.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     var17.setRangeWithMargins(var22);
//     org.jfree.chart.renderer.xy.XYItemRenderer var24 = null;
//     org.jfree.chart.plot.XYPlot var25 = new org.jfree.chart.plot.XYPlot(var10, (org.jfree.chart.axis.ValueAxis)var11, (org.jfree.chart.axis.ValueAxis)var17, var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var27 = null;
//     var25.setRenderer(0, var27);
//     org.jfree.data.xy.XYDataset var29 = null;
//     var25.setDataset(var29);
//     org.jfree.chart.plot.ValueMarker var32 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var33 = var32.getAlpha();
//     java.awt.Stroke var34 = var32.getStroke();
//     var25.setDomainZeroBaselineStroke(var34);
//     org.jfree.chart.axis.ValueAxis var37 = var25.getRangeAxisForDataset(0);
//     org.jfree.chart.util.Layer var38 = null;
//     java.util.Collection var39 = var25.getDomainMarkers(var38);
//     org.jfree.chart.util.RectangleEdge var40 = var25.getDomainAxisEdge();
//     java.awt.Paint var41 = var25.getBackgroundPaint();
//     var25.setRangeCrosshairLockedOnData(true);
//     boolean var44 = var1.equals((java.lang.Object)var25);
//     java.awt.Graphics2D var45 = null;
//     java.awt.geom.Rectangle2D var47 = null;
//     java.awt.geom.Rectangle2D var48 = null;
//     org.jfree.data.xy.XYDataset var49 = null;
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     java.awt.Paint var52 = var50.getTickLabelPaint();
//     java.awt.Paint var53 = var50.getTickLabelPaint();
//     var50.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var56 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var57 = var56.getRange();
//     var56.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var60 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var61 = var60.getRange();
//     var56.setRangeWithMargins(var61);
//     org.jfree.chart.renderer.xy.XYItemRenderer var63 = null;
//     org.jfree.chart.plot.XYPlot var64 = new org.jfree.chart.plot.XYPlot(var49, (org.jfree.chart.axis.ValueAxis)var50, (org.jfree.chart.axis.ValueAxis)var56, var63);
//     org.jfree.chart.renderer.xy.XYItemRenderer var66 = null;
//     var64.setRenderer(0, var66);
//     org.jfree.data.xy.XYDataset var68 = null;
//     var64.setDataset(var68);
//     org.jfree.chart.util.Layer var70 = null;
//     java.util.Collection var71 = var64.getRangeMarkers(var70);
//     var64.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.RectangleEdge var75 = var64.getRangeAxisEdge(20);
//     org.jfree.chart.plot.PlotRenderingInfo var76 = null;
//     org.jfree.chart.axis.AxisState var77 = var1.draw(var45, (-1.0d), var47, var48, var75, var76);
// 
//   }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var9 = var0.getPlot();
    java.awt.Shape var10 = var0.getDownArrow();
    boolean var11 = var0.isPositiveArrowVisible();
    var0.setRange(0.0d, 10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAutoRangeMinimumSize((-7.0d), false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Paint var8 = var0.getDomainGridlinePaint();
    org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var12.setStartValue(0.0d);
    double var15 = var12.getStartValue();
    java.awt.Paint var16 = var12.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
    var12.setEndValue(9.223372036854776E18d);
    java.lang.Object var20 = var12.clone();
    org.jfree.chart.util.Layer var21 = null;
    var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
    org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(0);
    var0.clearDomainMarkers((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var3 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var0);
    org.jfree.chart.plot.Plot var4 = var3.getPlot();
    org.jfree.chart.plot.Plot var5 = var3.getPlot();
    org.jfree.chart.plot.Plot var6 = var3.getPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    java.awt.Stroke var26 = var15.getDomainZeroBaselineStroke();
    int var27 = var15.getDomainAxisCount();
    java.awt.Graphics2D var28 = null;
    java.awt.geom.Rectangle2D var29 = null;
    org.jfree.chart.plot.PlotRenderingInfo var30 = null;
    var15.drawAnnotations(var28, var29, var30);
    org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var34 = var33.getRange();
    org.jfree.chart.util.RectangleInsets var35 = var33.getLabelInsets();
    org.jfree.chart.axis.CategoryAxis var37 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var43 = null;
    java.awt.Rectangle var44 = null;
    java.awt.geom.Rectangle2D var45 = null;
    java.awt.geom.AffineTransform var46 = null;
    java.awt.RenderingHints var47 = null;
    java.awt.PaintContext var48 = var42.createContext(var43, var44, var45, var46, var47);
    var37.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var42);
    var33.setAxisLinePaint((java.awt.Paint)var42);
    org.jfree.chart.axis.ValueAxis[] var51 = new org.jfree.chart.axis.ValueAxis[] { var33};
    var32.setRangeAxes(var51);
    var15.setDomainAxes(var51);
    int var54 = var15.getWeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    org.jfree.chart.util.RectangleInsets var4 = new org.jfree.chart.util.RectangleInsets((-4.0d), 0.0d, 106.0d, (-4.0d));
    double var6 = var4.extendHeight(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 102.0d);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var9 = var0.getPlot();
    java.awt.Shape var10 = var0.getDownArrow();
    boolean var11 = var0.isPositiveArrowVisible();
    var0.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    java.text.DateFormat var16 = var14.getDateFormatOverride();
    var14.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var20 = var14.getLabelFont();
    org.jfree.data.general.Dataset var21 = null;
    org.jfree.data.general.DatasetChangeEvent var22 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var14, var21);
    org.jfree.chart.axis.Timeline var23 = var14.getTimeline();
    var0.setTimeline(var23);
    java.awt.Paint var25 = var0.getAxisLinePaint();
    org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
    var26.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var28 = null;
    var26.setFixedRangeAxisSpace(var28, false);
    org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
    var31.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var33 = var31.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var35 = null;
    var31.setRenderer(255, var35);
    var31.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var38 = var31.getAxisOffset();
    var26.setInsets(var38);
    org.jfree.chart.renderer.category.CategoryItemRenderer var40 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var41 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var40};
    var26.setRenderers(var41);
    var26.clearRangeAxes();
    org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
    var44.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var48 = var47.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var50 = var49.getRange();
    org.jfree.chart.util.RectangleInsets var51 = var49.getLabelInsets();
    double var53 = var51.trimWidth((-1.0d));
    double var55 = var51.trimHeight((-6.0d));
    boolean var56 = var48.equals((java.lang.Object)var51);
    var44.setInsets(var51, true);
    var26.setAxisOffset(var51);
    var0.setLabelInsets(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setUpperMargin((-7.0d));
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Paint var10 = var8.getTickLabelPaint();
    double var11 = var8.getLowerMargin();
    java.awt.Shape var12 = var8.getLeftArrow();
    java.awt.Stroke var13 = var8.getTickMarkStroke();
    var8.configure();
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    java.text.DateFormat var17 = var15.getDateFormatOverride();
    var15.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var21 = var15.getStandardTickUnits();
    var15.setLabelURL("");
    boolean var24 = var15.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    var25.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    var25.setRangeWithMargins(var30);
    var15.setRange(var30);
    org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var34 = var33.getRange();
    java.text.DateFormat var35 = var33.getDateFormatOverride();
    java.awt.Shape var36 = var33.getUpArrow();
    var15.setDownArrow(var36);
    var8.setDownArrow(var36);
    boolean var39 = var1.equals((java.lang.Object)var8);
    float var40 = var8.getTickMarkOutsideLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2.0f);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    org.jfree.chart.event.ChartChangeEvent var1 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    org.jfree.chart.event.ChartChangeEventType var2 = null;
    var1.setType(var2);
    java.lang.String var4 = var1.toString();
    org.jfree.chart.JFreeChart var5 = var1.getChart();
    org.jfree.chart.JFreeChart var6 = var1.getChart();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var4.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test85() {}
//   public void test85() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
//     boolean var31 = var15.isDomainGridlinesVisible();
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     java.text.DateFormat var35 = var33.getDateFormatOverride();
//     java.awt.Shape var36 = var33.getUpArrow();
//     var33.configure();
//     java.lang.String var38 = var33.getLabel();
//     var15.setDomainAxis(0, (org.jfree.chart.axis.ValueAxis)var33, false);
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     int var42 = var41.getWeight();
//     boolean var43 = var41.isRangeCrosshairLockedOnData();
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     var44.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var48 = var47.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     org.jfree.chart.util.RectangleInsets var51 = var49.getLabelInsets();
//     double var53 = var51.trimWidth((-1.0d));
//     double var55 = var51.trimHeight((-6.0d));
//     boolean var56 = var48.equals((java.lang.Object)var51);
//     var44.setInsets(var51, true);
//     org.jfree.chart.LegendItemCollection var59 = var44.getLegendItems();
//     var41.setFixedLegendItems(var59);
//     var15.setFixedLegendItems(var59);
//     
//     // Checks the contract:  equals-hashcode on var20 and var41
//     assertTrue("Contract failed: equals-hashcode on var20 and var41", var20.equals(var41) ? var20.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var20
//     assertTrue("Contract failed: equals-hashcode on var41 and var20", var41.equals(var20) ? var41.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    org.jfree.chart.plot.IntervalMarker var17 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var17.setStartValue(0.0d);
    double var20 = var17.getStartValue();
    java.awt.Paint var21 = var17.getPaint();
    boolean var22 = var7.removeRangeMarker((org.jfree.chart.plot.Marker)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
    var5.setRenderer(255, var9);
    var5.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
    var0.setInsets(var12);
    org.jfree.chart.axis.ValueAxis var15 = var0.getRangeAxisForDataset((-203));
    var0.setForegroundAlpha(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setUpperMargin((-7.0d));
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var8.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var10 = var8.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var12 = null;
    var8.setRenderer(255, var12);
    java.awt.Color var18 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var19 = null;
    java.awt.Rectangle var20 = null;
    java.awt.geom.Rectangle2D var21 = null;
    java.awt.geom.AffineTransform var22 = null;
    java.awt.RenderingHints var23 = null;
    java.awt.PaintContext var24 = var18.createContext(var19, var20, var21, var22, var23);
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    org.jfree.chart.axis.TickUnitSource var28 = null;
    var26.setStandardTickUnits(var28);
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    java.awt.Paint var32 = var30.getTickLabelPaint();
    var26.setTickLabelPaint(var32);
    org.jfree.chart.plot.ValueMarker var35 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var36 = var35.getAlpha();
    java.awt.Stroke var37 = var35.getStroke();
    org.jfree.chart.plot.CategoryMarker var38 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var32, var37);
    java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var43 = null;
    java.awt.Rectangle var44 = null;
    java.awt.geom.Rectangle2D var45 = null;
    java.awt.geom.AffineTransform var46 = null;
    java.awt.RenderingHints var47 = null;
    java.awt.PaintContext var48 = var42.createContext(var43, var44, var45, var46, var47);
    org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var50 = var49.getRange();
    java.awt.Paint var51 = var49.getTickLabelPaint();
    double var52 = var49.getLowerMargin();
    java.awt.Shape var53 = var49.getLeftArrow();
    java.awt.Stroke var54 = var49.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var56 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var18, var37, (java.awt.Paint)var42, var54, 0.8f);
    boolean var57 = var8.removeRangeMarker((org.jfree.chart.plot.Marker)var56);
    org.jfree.chart.plot.Marker var58 = null;
    boolean var59 = var8.removeDomainMarker(var58);
    boolean var60 = var1.hasListener((java.util.EventListener)var8);
    boolean var61 = var8.isOutlineVisible();
    org.jfree.chart.axis.DateAxis var62 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var63 = var62.getRange();
    org.jfree.chart.util.RectangleInsets var64 = var62.getLabelInsets();
    double var66 = var64.trimWidth((-1.0d));
    double var68 = var64.trimHeight((-6.0d));
    double var70 = var64.extendWidth((-6.0d));
    double var71 = var64.getLeft();
    org.jfree.chart.util.UnitType var72 = var64.getUnitType();
    org.jfree.chart.util.RectangleInsets var77 = new org.jfree.chart.util.RectangleInsets(var72, 1.0d, 2.0d, 8.0d, 9.223372036854776E18d);
    org.jfree.chart.plot.IntervalMarker var80 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.plot.CategoryPlot var81 = new org.jfree.chart.plot.CategoryPlot();
    var81.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var83 = var81.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var85 = null;
    var81.setRenderer(255, var85);
    var81.clearRangeMarkers();
    var80.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var81);
    boolean var89 = var72.equals((java.lang.Object)var81);
    org.jfree.chart.axis.CategoryAnchor var90 = var81.getDomainGridlinePosition();
    java.lang.String var91 = var90.toString();
    var8.setDomainGridlinePosition(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "CategoryAnchor.MIDDLE"+ "'", var91.equals("CategoryAnchor.MIDDLE"));

  }

  public void test89() {}
//   public void test89() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     java.lang.String var4 = var1.getCategoryLabelToolTip((java.lang.Comparable)(byte)(-1));
//     java.awt.geom.Rectangle2D var7 = null;
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var8.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var10 = null;
//     var8.setFixedRangeAxisSpace(var10, false);
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     var13.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var15 = var13.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var17 = null;
//     var13.setRenderer(255, var17);
//     var13.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var20 = var13.getAxisOffset();
//     var8.setInsets(var20);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var22 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var23 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var22};
//     var8.setRenderers(var23);
//     org.jfree.chart.util.RectangleEdge var25 = var8.getRangeAxisEdge();
//     double var26 = var1.getCategoryStart(0, 15, var7, var25);
// 
//   }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("XY Plot");
    java.awt.Shape var2 = var1.getDownArrow();
    java.awt.Font var3 = var1.getTickLabelFont();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    org.jfree.chart.util.RectangleInsets var6 = var4.getLabelInsets();
    java.lang.String var7 = var6.toString();
    var1.setLabelInsets(var6);
    java.awt.geom.Rectangle2D var9 = null;
    org.jfree.chart.util.LengthAdjustmentType var10 = null;
    org.jfree.chart.util.LengthAdjustmentType var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var12 = var6.createAdjustedRectangle(var9, var10, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"+ "'", var7.equals("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"));

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
    int var29 = var0.getIndexOf(var28);
    org.jfree.chart.plot.IntervalMarker var33 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.util.RectangleAnchor var34 = var33.getLabelAnchor();
    org.jfree.chart.util.Layer var35 = null;
    boolean var36 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var33, var35);
    int var37 = var0.getRangeAxisCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);

  }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var7 = null;
//     boolean var8 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var6, var7);
//     org.jfree.chart.util.GradientPaintTransformer var9 = null;
//     var6.setGradientPaintTransformer(var9);
//     org.jfree.chart.util.GradientPaintTransformer var11 = var6.getGradientPaintTransformer();
//     org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
//     var12.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var16 = var15.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     org.jfree.chart.util.RectangleInsets var19 = var17.getLabelInsets();
//     double var21 = var19.trimWidth((-1.0d));
//     double var23 = var19.trimHeight((-6.0d));
//     boolean var24 = var16.equals((java.lang.Object)var19);
//     var12.setInsets(var19, true);
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     var27.clearRangeAxes();
//     boolean var29 = var27.isDomainGridlinesVisible();
//     boolean var30 = var19.equals((java.lang.Object)var27);
//     double var31 = var19.getRight();
//     double var33 = var19.calculateRightOutset((-1.0d));
//     org.jfree.chart.util.UnitType var34 = var19.getUnitType();
//     boolean var35 = var6.equals((java.lang.Object)var34);
//     
//     // Checks the contract:  equals-hashcode on var0 and var27
//     assertTrue("Contract failed: equals-hashcode on var0 and var27", var0.equals(var27) ? var0.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var0
//     assertTrue("Contract failed: equals-hashcode on var27 and var0", var27.equals(var0) ? var27.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     var1.clearCategoryLabelToolTips();
//     org.jfree.data.category.CategoryDataset var19 = null;
//     java.awt.geom.Rectangle2D var21 = null;
//     org.jfree.data.xy.XYDataset var22 = null;
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     java.awt.Paint var25 = var23.getTickLabelPaint();
//     java.awt.Paint var26 = var23.getTickLabelPaint();
//     var23.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     var29.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     var29.setRangeWithMargins(var34);
//     org.jfree.chart.renderer.xy.XYItemRenderer var36 = null;
//     org.jfree.chart.plot.XYPlot var37 = new org.jfree.chart.plot.XYPlot(var22, (org.jfree.chart.axis.ValueAxis)var23, (org.jfree.chart.axis.ValueAxis)var29, var36);
//     org.jfree.chart.renderer.xy.XYItemRenderer var39 = null;
//     var37.setRenderer(0, var39);
//     float var41 = var37.getForegroundAlpha();
//     org.jfree.chart.util.RectangleEdge var42 = var37.getRangeAxisEdge();
//     double var43 = var1.getCategorySeriesMiddle((java.lang.Comparable)(-1), (java.lang.Comparable)(-6.0d), var19, 0.2d, var21, var42);
// 
//   }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    var15.clearRangeMarkers(12);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
    var23.setRangeGridlinesVisible(false);
    java.awt.Color var32 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var33 = null;
    java.awt.Rectangle var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    java.awt.geom.AffineTransform var36 = null;
    java.awt.RenderingHints var37 = null;
    java.awt.PaintContext var38 = var32.createContext(var33, var34, var35, var36, var37);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    org.jfree.chart.axis.TickUnitSource var42 = null;
    var40.setStandardTickUnits(var42);
    org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var45 = var44.getRange();
    java.awt.Paint var46 = var44.getTickLabelPaint();
    var40.setTickLabelPaint(var46);
    org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var50 = var49.getAlpha();
    java.awt.Stroke var51 = var49.getStroke();
    org.jfree.chart.plot.CategoryMarker var52 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var46, var51);
    java.awt.Color var56 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var57 = null;
    java.awt.Rectangle var58 = null;
    java.awt.geom.Rectangle2D var59 = null;
    java.awt.geom.AffineTransform var60 = null;
    java.awt.RenderingHints var61 = null;
    java.awt.PaintContext var62 = var56.createContext(var57, var58, var59, var60, var61);
    org.jfree.chart.axis.DateAxis var63 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var64 = var63.getRange();
    java.awt.Paint var65 = var63.getTickLabelPaint();
    double var66 = var63.getLowerMargin();
    java.awt.Shape var67 = var63.getLeftArrow();
    java.awt.Stroke var68 = var63.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var70 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var32, var51, (java.awt.Paint)var56, var68, 0.8f);
    var23.setDomainGridlinePaint((java.awt.Paint)var56);
    var15.setDomainGridlinePaint((java.awt.Paint)var56);
    var15.setDomainCrosshairValue((-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Paint var76 = var15.getQuadrantPaint(253);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.plot.Plot var28 = var15.getParent();
    boolean var29 = var15.isRangeCrosshairLockedOnData();
    org.jfree.data.xy.XYDataset var30 = null;
    int var31 = var15.indexOf(var30);
    var15.setDomainGridlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     var13.clearRangeAxes();
//     org.jfree.chart.plot.CategoryMarker var16 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     var13.addDomainMarker(var16);
//     var16.setAlpha(0.0f);
//     org.jfree.chart.util.Layer var20 = null;
//     boolean var21 = var0.removeDomainMarker(255, (org.jfree.chart.plot.Marker)var16, var20);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     double var25 = var22.getLowerMargin();
//     java.awt.Shape var26 = var22.getLeftArrow();
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     var27.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var29 = var27.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var31 = null;
//     var27.setRenderer(255, var31);
//     java.awt.Stroke var33 = var27.getOutlineStroke();
//     var22.setAxisLineStroke(var33);
//     org.jfree.chart.plot.DefaultDrawingSupplier var35 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     java.awt.Stroke var36 = var35.getNextStroke();
//     java.awt.Stroke var37 = var35.getNextStroke();
//     var22.setTickMarkStroke(var37);
//     var16.setOutlineStroke(var37);
//     
//     // Checks the contract:  equals-hashcode on var13 and var27
//     assertTrue("Contract failed: equals-hashcode on var13 and var27", var13.equals(var27) ? var13.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var13
//     assertTrue("Contract failed: equals-hashcode on var27 and var13", var27.equals(var13) ? var27.hashCode() == var13.hashCode() : true);
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    org.jfree.chart.plot.IntervalMarker var9 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    org.jfree.chart.util.Layer var10 = null;
    var0.addRangeMarker(10, (org.jfree.chart.plot.Marker)var9, var10, true);
    var0.mapDatasetToDomainAxis(20, (-668));
    float var16 = var0.getForegroundAlpha();
    var0.setRangeCrosshairValue(7.0d, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0f);

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }
// 
// 
//     org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var2.setStartValue(0.0d);
//     double var5 = var2.getStartValue();
//     org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var8 = var7.getAlpha();
//     java.awt.Stroke var9 = var7.getStroke();
//     var2.setOutlineStroke(var9);
//     var2.setStartValue(9.223372036854776E18d);
//     double var13 = var2.getEndValue();
//     double var14 = var2.getStartValue();
//     double var15 = var2.getStartValue();
//     org.jfree.data.xy.XYDataset var16 = null;
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     java.awt.Paint var20 = var17.getTickLabelPaint();
//     var17.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     var23.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var28 = var27.getRange();
//     var23.setRangeWithMargins(var28);
//     org.jfree.chart.renderer.xy.XYItemRenderer var30 = null;
//     org.jfree.chart.plot.XYPlot var31 = new org.jfree.chart.plot.XYPlot(var16, (org.jfree.chart.axis.ValueAxis)var17, (org.jfree.chart.axis.ValueAxis)var23, var30);
//     int var32 = var31.getDomainAxisCount();
//     org.jfree.chart.plot.IntervalMarker var35 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var35.setStartValue(0.0d);
//     double var38 = var35.getStartValue();
//     java.awt.Paint var39 = var35.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var40 = var35.getGradientPaintTransformer();
//     java.awt.Color var43 = java.awt.Color.getColor("", 100);
//     java.awt.image.ColorModel var44 = null;
//     java.awt.Rectangle var45 = null;
//     java.awt.geom.Rectangle2D var46 = null;
//     java.awt.geom.AffineTransform var47 = null;
//     java.awt.RenderingHints var48 = null;
//     java.awt.PaintContext var49 = var43.createContext(var44, var45, var46, var47, var48);
//     java.awt.image.ColorModel var50 = null;
//     java.awt.Rectangle var51 = null;
//     java.awt.geom.Rectangle2D var52 = null;
//     java.awt.geom.AffineTransform var53 = null;
//     java.awt.RenderingHints var54 = null;
//     java.awt.PaintContext var55 = var43.createContext(var50, var51, var52, var53, var54);
//     var35.setLabelPaint((java.awt.Paint)var43);
//     java.awt.Color var57 = var43.darker();
//     var31.setDomainTickBandPaint((java.awt.Paint)var57);
//     org.jfree.chart.plot.CategoryPlot var59 = new org.jfree.chart.plot.CategoryPlot();
//     var59.clearRangeAxes();
//     boolean var61 = var59.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var63 = var59.getRangeAxis((-16646144));
//     boolean var64 = var59.getDrawSharedDomainAxis();
//     var59.clearRangeMarkers(255);
//     java.awt.Paint[] var67 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var68 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var69 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var70 = new org.jfree.chart.plot.CategoryPlot();
//     var70.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var73 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var74 = var73.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var75 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var76 = var75.getRange();
//     org.jfree.chart.util.RectangleInsets var77 = var75.getLabelInsets();
//     double var79 = var77.trimWidth((-1.0d));
//     double var81 = var77.trimHeight((-6.0d));
//     boolean var82 = var74.equals((java.lang.Object)var77);
//     var70.setInsets(var77, true);
//     java.awt.Stroke var85 = var70.getRangeCrosshairStroke();
//     java.awt.Stroke[] var86 = new java.awt.Stroke[] { var85};
//     org.jfree.chart.axis.DateAxis var87 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var88 = var87.getRange();
//     java.awt.Paint var89 = var87.getTickLabelPaint();
//     double var90 = var87.getLowerMargin();
//     java.awt.Shape var91 = var87.getLeftArrow();
//     java.awt.Stroke var92 = var87.getTickMarkStroke();
//     java.awt.Stroke[] var93 = new java.awt.Stroke[] { var92};
//     java.awt.Shape[] var94 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var95 = new org.jfree.chart.plot.DefaultDrawingSupplier(var67, var68, var69, var86, var93, var94);
//     java.awt.Stroke var96 = var95.getNextOutlineStroke();
//     var59.setRangeGridlineStroke(var96);
//     var31.setDomainCrosshairStroke(var96);
//     var2.setOutlineStroke(var96);
//     
//     // Checks the contract:  equals-hashcode on var7 and var73
//     assertTrue("Contract failed: equals-hashcode on var7 and var73", var7.equals(var73) ? var7.hashCode() == var73.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var73 and var7
//     assertTrue("Contract failed: equals-hashcode on var73 and var7", var73.equals(var7) ? var73.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(0.0f, 0.0f, 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    java.lang.String var3 = var2.toString();
    double var5 = var2.trimWidth(10.0d);
    java.awt.geom.Rectangle2D var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var7 = var2.createOutsetRectangle(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"+ "'", var3.equals("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4.0d);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    int var20 = var15.indexOf(var19);
    org.jfree.chart.renderer.xy.XYItemRenderer var21 = var15.getRenderer();
    org.jfree.chart.axis.AxisLocation var23 = var15.getRangeAxisLocation(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test102() {}
//   public void test102() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     java.awt.Paint var8 = var0.getDomainGridlinePaint();
//     org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var12.setStartValue(0.0d);
//     double var15 = var12.getStartValue();
//     java.awt.Paint var16 = var12.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
//     var12.setEndValue(9.223372036854776E18d);
//     java.lang.Object var20 = var12.clone();
//     org.jfree.chart.util.Layer var21 = null;
//     var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
//     org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(0);
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     var26.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var28 = var26.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var30 = null;
//     var26.setRenderer(255, var30);
//     java.awt.Color var36 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var37 = null;
//     java.awt.Rectangle var38 = null;
//     java.awt.geom.Rectangle2D var39 = null;
//     java.awt.geom.AffineTransform var40 = null;
//     java.awt.RenderingHints var41 = null;
//     java.awt.PaintContext var42 = var36.createContext(var37, var38, var39, var40, var41);
//     org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var45 = var44.getRange();
//     org.jfree.chart.axis.TickUnitSource var46 = null;
//     var44.setStandardTickUnits(var46);
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var49 = var48.getRange();
//     java.awt.Paint var50 = var48.getTickLabelPaint();
//     var44.setTickLabelPaint(var50);
//     org.jfree.chart.plot.ValueMarker var53 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var54 = var53.getAlpha();
//     java.awt.Stroke var55 = var53.getStroke();
//     org.jfree.chart.plot.CategoryMarker var56 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var50, var55);
//     java.awt.Color var60 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var61 = null;
//     java.awt.Rectangle var62 = null;
//     java.awt.geom.Rectangle2D var63 = null;
//     java.awt.geom.AffineTransform var64 = null;
//     java.awt.RenderingHints var65 = null;
//     java.awt.PaintContext var66 = var60.createContext(var61, var62, var63, var64, var65);
//     org.jfree.chart.axis.DateAxis var67 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var68 = var67.getRange();
//     java.awt.Paint var69 = var67.getTickLabelPaint();
//     double var70 = var67.getLowerMargin();
//     java.awt.Shape var71 = var67.getLeftArrow();
//     java.awt.Stroke var72 = var67.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var74 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var36, var55, (java.awt.Paint)var60, var72, 0.8f);
//     boolean var75 = var26.removeRangeMarker((org.jfree.chart.plot.Marker)var74);
//     org.jfree.chart.plot.Marker var76 = null;
//     boolean var77 = var26.removeDomainMarker(var76);
//     org.jfree.chart.axis.AxisLocation var78 = var26.getDomainAxisLocation();
//     var0.setRangeAxisLocation(255, var78);
//     
//     // Checks the contract:  equals-hashcode on var26 and var0
//     assertTrue("Contract failed: equals-hashcode on var26 and var0", var26.equals(var0) ? var26.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var26 and var0.", var26.equals(var0) == var0.equals(var26));
// 
//   }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.data.xy.XYDataset var6 = null;
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.awt.Paint var9 = var7.getTickLabelPaint();
    java.awt.Paint var10 = var7.getTickLabelPaint();
    var7.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    var13.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    var13.setRangeWithMargins(var18);
    org.jfree.chart.renderer.xy.XYItemRenderer var20 = null;
    org.jfree.chart.plot.XYPlot var21 = new org.jfree.chart.plot.XYPlot(var6, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.axis.ValueAxis)var13, var20);
    org.jfree.chart.renderer.xy.XYItemRenderer var23 = null;
    var21.setRenderer(0, var23);
    org.jfree.data.xy.XYDataset var25 = null;
    var21.setDataset(var25);
    org.jfree.chart.plot.ValueMarker var28 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var29 = var28.getAlpha();
    java.awt.Stroke var30 = var28.getStroke();
    var21.setDomainZeroBaselineStroke(var30);
    org.jfree.chart.axis.ValueAxis var33 = var21.getRangeAxisForDataset(0);
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    java.util.List var36 = null;
    var21.drawDomainTickBands(var34, var35, var36);
    org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var41.setStartValue(0.0d);
    double var44 = var41.getStartValue();
    java.awt.Paint var45 = var41.getPaint();
    org.jfree.chart.util.Layer var46 = null;
    boolean var47 = var21.removeRangeMarker(10, (org.jfree.chart.plot.Marker)var41, var46);
    var0.setPlot((org.jfree.chart.plot.Plot)var21);
    org.jfree.chart.axis.AxisSpace var49 = null;
    var21.setFixedDomainAxisSpace(var49, true);
    java.lang.Object var52 = var21.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test104() {}
//   public void test104() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.plot.Plot var28 = var15.getParent();
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.clearRangeAxes();
//     boolean var32 = var30.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var36 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var37 = null;
//     boolean var38 = var30.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var36, var37);
//     org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var41.setStartValue(0.0d);
//     double var44 = var41.getStartValue();
//     java.awt.Paint var45 = var41.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var46 = var41.getGradientPaintTransformer();
//     var41.setEndValue(9.223372036854776E18d);
//     java.awt.Color var51 = java.awt.Color.getColor("", 100);
//     int var52 = var51.getRed();
//     int var53 = var51.getAlpha();
//     var41.setPaint((java.awt.Paint)var51);
//     var36.setPaint((java.awt.Paint)var51);
//     org.jfree.chart.util.LengthAdjustmentType var56 = var36.getLabelOffsetType();
//     org.jfree.chart.util.Layer var57 = null;
//     var15.addRangeMarker(10, (org.jfree.chart.plot.Marker)var36, var57, true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var30
//     assertTrue("Contract failed: equals-hashcode on var20 and var30", var20.equals(var30) ? var20.hashCode() == var30.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var20
//     assertTrue("Contract failed: equals-hashcode on var30 and var20", var30.equals(var20) ? var30.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    float var30 = var15.getBackgroundImageAlpha();
    var15.setRangeCrosshairLockedOnData(false);
    var15.setRangeCrosshairLockedOnData(true);
    org.jfree.chart.util.Layer var35 = null;
    java.util.Collection var36 = var15.getDomainMarkers(var35);
    org.jfree.chart.plot.SeriesRenderingOrder var37 = var15.getSeriesRenderingOrder();
    java.awt.Paint var38 = var15.getRangeTickBandPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var1 = var0.getRenderer();
    org.jfree.chart.event.PlotChangeListener var2 = null;
    var0.addChangeListener(var2);
    org.jfree.chart.axis.CategoryAxis var5 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
    var5.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var10);
    var0.setDomainGridlinePaint((java.awt.Paint)var10);
    java.awt.Color var21 = java.awt.Color.getColor("", 100);
    int var22 = var21.getRed();
    int var23 = var21.getAlpha();
    float[] var27 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var28 = var21.getColorComponents(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var29 = var10.getComponents(var28);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    int var1 = var0.getWeight();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.awt.Shape var5 = var3.getLeftArrow();
    var3.setLabelAngle(0.0d);
    var0.setRangeAxis(255, (org.jfree.chart.axis.ValueAxis)var3);
    var0.setRangeGridlinesVisible(true);
    org.jfree.chart.renderer.category.CategoryItemRenderer var12 = null;
    var0.setRenderer(255, var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    java.awt.Stroke var5 = var0.getTickMarkStroke();
    var0.setLowerMargin(100.0d);
    boolean var8 = var0.isNegativeArrowVisible();
    var0.setRangeAboutValue(106.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryMargin(9.223372036854776E18d);
    var1.setLowerMargin((-6.0d));
    double var8 = var1.getFixedDimension();
    org.jfree.chart.axis.CategoryAxis var10 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var13 = null;
    org.jfree.chart.util.RectangleEdge var14 = null;
    double var15 = var10.getCategoryMiddle(0, (-1), var13, var14);
    org.jfree.data.time.Day var16 = new org.jfree.data.time.Day();
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.text.DateFormat var19 = var17.getDateFormatOverride();
    var17.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var23 = var17.getLabelFont();
    org.jfree.data.general.Dataset var24 = null;
    org.jfree.data.general.DatasetChangeEvent var25 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var17, var24);
    int var26 = var16.compareTo((java.lang.Object)var17);
    java.awt.Paint var27 = var10.getTickLabelPaint((java.lang.Comparable)var16);
    java.awt.Font var28 = var1.getTickLabelFont((java.lang.Comparable)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    boolean var7 = var0.isVisible();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Shape var10 = var8.getLeftArrow();
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    var8.setRangeWithMargins(var16, true, true);
    var0.setRange(var16);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.text.DateFormat var24 = var22.getDateFormatOverride();
    java.awt.Shape var25 = var22.getUpArrow();
    var22.setRange((-7.0d), 100.0d);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    var29.setVerticalTickLabels(false);
    org.jfree.data.Range var33 = var29.getDefaultAutoRange();
    var29.setAutoRangeMinimumSize(4.0d);
    org.jfree.chart.axis.DateTickUnit var36 = var29.getTickUnit();
    var22.setTickUnit(var36);
    java.util.Date var38 = var0.calculateLowestVisibleTickValue(var36);
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    java.text.DateFormat var41 = var39.getDateFormatOverride();
    java.awt.Shape var42 = var39.getUpArrow();
    boolean var43 = var39.isVisible();
    org.jfree.chart.plot.Plot var44 = null;
    var39.setPlot(var44);
    var39.setTickLabelsVisible(true);
    org.jfree.chart.axis.CategoryAxis var49 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var52 = null;
    org.jfree.chart.util.RectangleEdge var53 = null;
    double var54 = var49.getCategoryMiddle(0, (-1), var52, var53);
    var49.configure();
    org.jfree.chart.axis.DateAxis var57 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var58 = var57.getRange();
    java.text.DateFormat var59 = var57.getDateFormatOverride();
    var57.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var63 = var57.getStandardTickUnits();
    var57.setLabelURL("");
    java.awt.Font var66 = var57.getTickLabelFont();
    var49.setTickLabelFont((java.lang.Comparable)(byte)100, var66);
    var39.setTickLabelFont(var66);
    var0.setTickLabelFont(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAutoRangeMinimumSize((-2.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    var0.setTickMarkInsideLength(10.0f);
    boolean var7 = var0.isNegativeArrowVisible();
    var0.setTickMarkOutsideLength(0.0f);
    var0.setTickMarkOutsideLength(0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day(2014, (-203), (-203));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var7 = var0.getAxisOffset();
    java.awt.Paint var8 = var0.getDomainGridlinePaint();
    org.jfree.chart.plot.PlotRenderingInfo var10 = null;
    org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
    var11.clearRangeAxes();
    boolean var13 = var11.isDomainGridlinesVisible();
    org.jfree.chart.plot.PlotRenderingInfo var15 = null;
    java.awt.geom.Rectangle2D var16 = null;
    org.jfree.chart.util.RectangleAnchor var17 = null;
    java.awt.geom.Point2D var18 = org.jfree.chart.util.RectangleAnchor.coordinates(var16, var17);
    var11.zoomRangeAxes(0.05d, var15, var18);
    var0.zoomDomainAxes((-6.0d), var10, var18);
    var0.setNoDataMessage("CONTRACT");
    boolean var23 = var0.isRangeCrosshairVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    org.jfree.data.category.CategoryDataset var14 = null;
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var22 = null;
    java.awt.Rectangle var23 = null;
    java.awt.geom.Rectangle2D var24 = null;
    java.awt.geom.AffineTransform var25 = null;
    java.awt.RenderingHints var26 = null;
    java.awt.PaintContext var27 = var21.createContext(var22, var23, var24, var25, var26);
    var16.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var21);
    var16.setTickMarkInsideLength(2.0f);
    org.jfree.chart.axis.ValueAxis var31 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer var32 = null;
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot(var14, var16, var31, var32);
    var0.setDomainAxis(2014, var16, true);
    org.jfree.chart.axis.AxisLocation var36 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxisLocation(var36, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     var1.setCategoryLabelPositionOffset((-668));
//     java.awt.Graphics2D var18 = null;
//     org.jfree.chart.axis.AxisState var19 = null;
//     java.awt.geom.Rectangle2D var20 = null;
//     org.jfree.data.xy.XYDataset var21 = null;
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     java.awt.Paint var25 = var22.getTickLabelPaint();
//     var22.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var28.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var28.setRangeWithMargins(var33);
//     org.jfree.chart.renderer.xy.XYItemRenderer var35 = null;
//     org.jfree.chart.plot.XYPlot var36 = new org.jfree.chart.plot.XYPlot(var21, (org.jfree.chart.axis.ValueAxis)var22, (org.jfree.chart.axis.ValueAxis)var28, var35);
//     org.jfree.chart.util.RectangleEdge var38 = var36.getDomainAxisEdge(12);
//     var36.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     var41.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var43 = var41.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var45 = null;
//     var41.setRenderer(255, var45);
//     java.awt.Stroke var47 = var41.getOutlineStroke();
//     var36.setRangeZeroBaselineStroke(var47);
//     org.jfree.data.xy.XYDataset var49 = null;
//     int var50 = var36.indexOf(var49);
//     float var51 = var36.getBackgroundImageAlpha();
//     var36.setRangeCrosshairLockedOnData(false);
//     org.jfree.chart.util.RectangleEdge var54 = var36.getDomainAxisEdge();
//     java.util.List var55 = var1.refreshTicks(var18, var19, var20, var54);
// 
//   }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.data.category.CategoryDataset var50 = var0.getDataset((-1));
    var0.setAnchorValue(0.0d, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDomainAxisCount();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    var18.clearRangeAxes();
    boolean var20 = var18.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var24 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var25 = null;
    boolean var26 = var18.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var24, var25);
    org.jfree.chart.plot.IntervalMarker var29 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var29.setStartValue(0.0d);
    double var32 = var29.getStartValue();
    java.awt.Paint var33 = var29.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var34 = var29.getGradientPaintTransformer();
    var29.setEndValue(9.223372036854776E18d);
    java.awt.Color var39 = java.awt.Color.getColor("", 100);
    int var40 = var39.getRed();
    int var41 = var39.getAlpha();
    var29.setPaint((java.awt.Paint)var39);
    var24.setPaint((java.awt.Paint)var39);
    java.awt.Color var44 = java.awt.Color.getColor("XY Plot", var39);
    var15.setDomainCrosshairPaint((java.awt.Paint)var44);
    java.util.List var46 = var15.getAnnotations();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var49 = var48.getAlpha();
    java.awt.Stroke var50 = var48.getStroke();
    org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var52 = var51.getRange();
    java.text.DateFormat var53 = var51.getDateFormatOverride();
    var51.resizeRange((-1.0d), (-1.0d));
    boolean var57 = var48.equals((java.lang.Object)var51);
    org.jfree.chart.util.RectangleInsets var58 = var48.getLabelOffset();
    java.awt.Paint var59 = var48.getOutlinePaint();
    org.jfree.chart.util.Layer var60 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var48, var60);
    java.awt.Paint var62 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setDomainCrosshairPaint(var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
    var5.setRenderer(255, var9);
    var5.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
    var0.setInsets(var12);
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    var14.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var18 = var17.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
    double var23 = var21.trimWidth((-1.0d));
    double var25 = var21.trimHeight((-6.0d));
    boolean var26 = var18.equals((java.lang.Object)var21);
    var14.setInsets(var21, true);
    org.jfree.chart.LegendItemCollection var29 = var14.getLegendItems();
    var0.setFixedLegendItems(var29);
    org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var32 = var31.getRange();
    java.awt.Paint var33 = var31.getTickLabelPaint();
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    java.awt.Shape var36 = var34.getLeftArrow();
    var34.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    var39.setRange(0.0d, 100.0d);
    var39.setLowerBound((-6.0d));
    var39.setAutoRangeMinimumSize(9.223372036854776E18d);
    org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var49 = var48.getRange();
    var48.setRange(0.0d, 100.0d);
    boolean var53 = var48.isInverted();
    org.jfree.chart.axis.Timeline var54 = var48.getTimeline();
    var39.setTimeline(var54);
    var34.setTimeline(var54);
    var31.setTimeline(var54);
    var0.setRangeAxis((org.jfree.chart.axis.ValueAxis)var31);
    org.jfree.chart.axis.AxisSpace var59 = null;
    var0.setFixedDomainAxisSpace(var59);
    org.jfree.chart.plot.DatasetRenderingOrder var61 = var0.getDatasetRenderingOrder();
    boolean var62 = var0.getDrawSharedDomainAxis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    var0.setRangeCrosshairVisible(false);
    org.jfree.chart.event.RendererChangeEvent var12 = null;
    var0.rendererChanged(var12);
    java.lang.String var14 = var0.getPlotType();
    org.jfree.chart.renderer.category.CategoryItemRenderer var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRenderer((-203), var16, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Category Plot"+ "'", var14.equals("Category Plot"));

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var7 = null;
    boolean var8 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var6, var7);
    org.jfree.chart.util.GradientPaintTransformer var9 = null;
    var6.setGradientPaintTransformer(var9);
    var6.setEndValue(106.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var4 = var3.getRange();
//     java.text.DateFormat var5 = var3.getDateFormatOverride();
//     var3.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var9 = var3.getLabelFont();
//     var0.setNoDataMessageFont(var9);
//     var0.zoom(1.0d);
// 
//   }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
//     double var12 = var10.trimWidth(0.0d);
//     org.jfree.chart.plot.ValueMarker var14 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var15 = var14.getAlpha();
//     java.awt.Stroke var16 = var14.getStroke();
//     float var17 = var14.getAlpha();
//     boolean var18 = var10.equals((java.lang.Object)var14);
//     java.awt.Paint var19 = var14.getPaint();
//     var0.setNoDataMessagePaint(var19);
//     org.jfree.chart.plot.PlotRenderingInfo var22 = null;
//     org.jfree.data.xy.XYDataset var23 = null;
//     org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var25 = var24.getRange();
//     java.awt.Paint var26 = var24.getTickLabelPaint();
//     java.awt.Paint var27 = var24.getTickLabelPaint();
//     var24.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var31 = var30.getRange();
//     var30.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var35 = var34.getRange();
//     var30.setRangeWithMargins(var35);
//     org.jfree.chart.renderer.xy.XYItemRenderer var37 = null;
//     org.jfree.chart.plot.XYPlot var38 = new org.jfree.chart.plot.XYPlot(var23, (org.jfree.chart.axis.ValueAxis)var24, (org.jfree.chart.axis.ValueAxis)var30, var37);
//     org.jfree.chart.renderer.xy.XYItemRenderer var40 = null;
//     var38.setRenderer(0, var40);
//     org.jfree.data.xy.XYDataset var42 = null;
//     var38.setDataset(var42);
//     org.jfree.chart.util.Layer var44 = null;
//     java.util.Collection var45 = var38.getRangeMarkers(var44);
//     var38.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.Layer var49 = null;
//     java.util.Collection var50 = var38.getRangeMarkers((-16777116), var49);
//     var38.setDomainCrosshairValue((-1.0d), true);
//     org.jfree.chart.axis.CategoryAxis var55 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var58 = null;
//     org.jfree.chart.util.RectangleEdge var59 = null;
//     double var60 = var55.getCategoryMiddle(0, (-1), var58, var59);
//     org.jfree.chart.plot.CategoryPlot var61 = new org.jfree.chart.plot.CategoryPlot();
//     var61.clearRangeAxes();
//     boolean var63 = var61.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var65 = var61.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var66 = var61.getParent();
//     var55.addChangeListener((org.jfree.chart.event.AxisChangeListener)var61);
//     boolean var68 = var61.isRangeZoomable();
//     var61.setRangeCrosshairValue((-7.0d), false);
//     org.jfree.chart.LegendItemCollection var72 = var61.getLegendItems();
//     var38.setFixedLegendItems(var72);
//     org.jfree.chart.plot.CategoryPlot var74 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var75 = new org.jfree.chart.plot.CategoryPlot();
//     var75.clearRangeAxes();
//     boolean var77 = var75.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var79 = var75.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var80 = var75.getParent();
//     org.jfree.chart.axis.AxisLocation var82 = var75.getDomainAxisLocation((-668));
//     var74.setRangeAxisLocation(var82);
//     org.jfree.chart.axis.AxisSpace var84 = null;
//     var74.setFixedDomainAxisSpace(var84, true);
//     org.jfree.chart.plot.PlotRenderingInfo var88 = null;
//     java.awt.geom.Rectangle2D var89 = null;
//     org.jfree.chart.util.RectangleAnchor var90 = null;
//     java.awt.geom.Point2D var91 = org.jfree.chart.util.RectangleAnchor.coordinates(var89, var90);
//     var74.zoomDomainAxes(9.223372036854776E18d, var88, var91);
//     var38.setQuadrantOrigin(var91);
//     var0.zoomRangeAxes(0.0d, var22, var91, true);
//     org.jfree.chart.plot.PlotRenderingInfo var98 = null;
//     var0.handleClick(253, (-16777116), var98);
// 
//   }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    org.jfree.chart.axis.AxisLocation var6 = var0.getRangeAxisLocation(2014);
    org.jfree.chart.util.SortOrder var7 = var0.getRowRenderingOrder();
    java.lang.String var8 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "SortOrder.ASCENDING"+ "'", var8.equals("SortOrder.ASCENDING"));

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis("");
    var6.configure();
    float var8 = var6.getMaximumCategoryLabelWidthRatio();
    var6.setCategoryLabelPositionOffset(0);
    var6.setMaximumCategoryLabelLines(0);
    int var13 = var0.getDomainAxisIndex(var6);
    org.jfree.chart.axis.CategoryAxis var14 = null;
    java.util.List var15 = var0.getCategoriesForAxis(var14);
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
    var17.clearRangeAxes();
    boolean var19 = var17.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var21 = var17.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var22 = var17.getParent();
    org.jfree.chart.axis.AxisLocation var24 = var17.getDomainAxisLocation((-668));
    var16.setRangeAxisLocation(var24);
    org.jfree.chart.axis.AxisSpace var26 = null;
    var16.setFixedDomainAxisSpace(var26, true);
    var16.configureDomainAxes();
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
    var30.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var33 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var34 = var33.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var36 = var35.getRange();
    org.jfree.chart.util.RectangleInsets var37 = var35.getLabelInsets();
    double var39 = var37.trimWidth((-1.0d));
    double var41 = var37.trimHeight((-6.0d));
    boolean var42 = var34.equals((java.lang.Object)var37);
    var30.setInsets(var37, true);
    org.jfree.chart.LegendItemCollection var45 = var30.getLegendItems();
    boolean var46 = var30.isSubplot();
    org.jfree.chart.plot.PlotOrientation var47 = var30.getOrientation();
    var16.setOrientation(var47);
    var0.setOrientation(var47);
    org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot();
    var50.clearRangeAxes();
    boolean var52 = var50.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var53 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var50);
    var50.setDrawSharedDomainAxis(true);
    boolean var56 = var47.equals((java.lang.Object)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var10 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var11 = var10.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    org.jfree.chart.util.RectangleInsets var14 = var12.getLabelInsets();
    double var16 = var14.trimWidth((-1.0d));
    double var18 = var14.trimHeight((-6.0d));
    boolean var19 = var11.equals((java.lang.Object)var14);
    var7.setInsets(var14, true);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
    var22.clearRangeAxes();
    boolean var24 = var22.isDomainGridlinesVisible();
    boolean var25 = var14.equals((java.lang.Object)var22);
    org.jfree.chart.axis.CategoryAxis var27 = new org.jfree.chart.axis.CategoryAxis("");
    var27.configure();
    float var29 = var27.getMaximumCategoryLabelWidthRatio();
    var27.setCategoryMargin(9.223372036854776E18d);
    var27.setLowerMargin((-6.0d));
    int var34 = var22.getDomainAxisIndex(var27);
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var22);
    float var36 = var22.getBackgroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0f);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var7 = null;
    java.awt.Rectangle var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    java.awt.geom.AffineTransform var10 = null;
    java.awt.RenderingHints var11 = null;
    java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
    var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
    var1.setTickMarkInsideLength(2.0f);
    var1.clearCategoryLabelToolTips();
    java.lang.String var18 = var1.getCategoryLabelToolTip((java.lang.Comparable)"TextAnchor.CENTER");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getDomainGridlinePaint();
    org.jfree.chart.axis.ValueAxis var29 = var0.getDomainAxis();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.ValueAxis var31 = var0.getRangeAxisForDataset(2014);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setAutoRangeMinimumSize(9.223372036854776E18d);
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    var9.setRange(0.0d, 100.0d);
    boolean var14 = var9.isInverted();
    org.jfree.chart.axis.Timeline var15 = var9.getTimeline();
    var0.setTimeline(var15);
    double var17 = var0.getAutoRangeMinimumSize();
    boolean var18 = var0.isVerticalTickLabels();
    org.jfree.data.xy.XYDataset var19 = null;
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.awt.Paint var22 = var20.getTickLabelPaint();
    java.awt.Paint var23 = var20.getTickLabelPaint();
    var20.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    var26.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    var26.setRangeWithMargins(var31);
    org.jfree.chart.renderer.xy.XYItemRenderer var33 = null;
    org.jfree.chart.plot.XYPlot var34 = new org.jfree.chart.plot.XYPlot(var19, (org.jfree.chart.axis.ValueAxis)var20, (org.jfree.chart.axis.ValueAxis)var26, var33);
    org.jfree.chart.renderer.xy.XYItemRenderer var36 = null;
    var34.setRenderer(0, var36);
    org.jfree.data.xy.XYDataset var38 = null;
    var34.setDataset(var38);
    org.jfree.chart.plot.ValueMarker var41 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var42 = var41.getAlpha();
    java.awt.Stroke var43 = var41.getStroke();
    var34.setDomainZeroBaselineStroke(var43);
    java.awt.Stroke var45 = var34.getDomainZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var47 = var34.getDomainAxisLocation((-203));
    java.awt.Stroke var48 = var34.getRangeZeroBaselineStroke();
    var0.setAxisLineStroke(var48);
    java.awt.Paint var50 = var0.getAxisLinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    java.awt.Stroke var15 = var0.getRangeCrosshairStroke();
    java.awt.Paint var16 = var0.getRangeGridlinePaint();
    org.jfree.chart.plot.PlotOrientation var17 = var0.getOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    var0.setDomainCrosshairLockedOnData(false);
    boolean var13 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var15.setRange(0.0d, 100.0d);
    var15.setLowerBound((-6.0d));
    var15.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var24 = var15.getPlot();
    java.awt.Shape var25 = var15.getDownArrow();
    var0.setDomainAxis(0, (org.jfree.chart.axis.ValueAxis)var15, true);
    var15.setFixedAutoRange(1.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test131() {}
//   public void test131() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setCategoryLabelPositionOffset(0);
//     var1.setCategoryMargin(1.0d);
//     java.lang.String var8 = var1.getLabelURL();
//     boolean var9 = var1.isTickLabelsVisible();
//     java.awt.Graphics2D var10 = null;
//     org.jfree.chart.plot.Plot var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     org.jfree.data.xy.XYDataset var13 = null;
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     java.awt.Paint var16 = var14.getTickLabelPaint();
//     java.awt.Paint var17 = var14.getTickLabelPaint();
//     var14.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     var20.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var25 = var24.getRange();
//     var20.setRangeWithMargins(var25);
//     org.jfree.chart.renderer.xy.XYItemRenderer var27 = null;
//     org.jfree.chart.plot.XYPlot var28 = new org.jfree.chart.plot.XYPlot(var13, (org.jfree.chart.axis.ValueAxis)var14, (org.jfree.chart.axis.ValueAxis)var20, var27);
//     org.jfree.chart.renderer.xy.XYItemRenderer var30 = null;
//     var28.setRenderer(0, var30);
//     org.jfree.data.xy.XYDataset var32 = null;
//     var28.setDataset(var32);
//     org.jfree.chart.util.Layer var34 = null;
//     java.util.Collection var35 = var28.getRangeMarkers(var34);
//     var28.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.RectangleEdge var39 = var28.getRangeAxisEdge(20);
//     org.jfree.chart.axis.AxisSpace var40 = null;
//     org.jfree.chart.axis.AxisSpace var41 = var1.reserveSpace(var10, var11, var12, var39, var40);
// 
//   }

  public void test132() {}
//   public void test132() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     var0.setRangeCrosshairValue(8.0d, false);
//     org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var7 = var6.getAlpha();
//     java.awt.Stroke var8 = var6.getStroke();
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     java.text.DateFormat var11 = var9.getDateFormatOverride();
//     var9.resizeRange((-1.0d), (-1.0d));
//     boolean var15 = var6.equals((java.lang.Object)var9);
//     org.jfree.chart.util.RectangleInsets var16 = var6.getLabelOffset();
//     java.awt.Paint var17 = var6.getOutlinePaint();
//     java.awt.Paint var18 = var6.getPaint();
//     org.jfree.chart.plot.IntervalMarker var21 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var21.setStartValue(0.0d);
//     double var24 = var21.getStartValue();
//     java.awt.Paint var25 = var21.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var26 = var21.getGradientPaintTransformer();
//     java.awt.Color var29 = java.awt.Color.getColor("", 100);
//     java.awt.image.ColorModel var30 = null;
//     java.awt.Rectangle var31 = null;
//     java.awt.geom.Rectangle2D var32 = null;
//     java.awt.geom.AffineTransform var33 = null;
//     java.awt.RenderingHints var34 = null;
//     java.awt.PaintContext var35 = var29.createContext(var30, var31, var32, var33, var34);
//     java.awt.image.ColorModel var36 = null;
//     java.awt.Rectangle var37 = null;
//     java.awt.geom.Rectangle2D var38 = null;
//     java.awt.geom.AffineTransform var39 = null;
//     java.awt.RenderingHints var40 = null;
//     java.awt.PaintContext var41 = var29.createContext(var36, var37, var38, var39, var40);
//     var21.setLabelPaint((java.awt.Paint)var29);
//     boolean var43 = var6.equals((java.lang.Object)var21);
//     org.jfree.chart.util.Layer var44 = null;
//     boolean var46 = var0.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var21, var44, true);
//     org.jfree.chart.event.PlotChangeEvent var47 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var0);
//     org.jfree.data.xy.XYDataset var48 = null;
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     java.awt.Paint var51 = var49.getTickLabelPaint();
//     java.awt.Paint var52 = var49.getTickLabelPaint();
//     var49.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var56 = var55.getRange();
//     var55.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var60 = var59.getRange();
//     var55.setRangeWithMargins(var60);
//     org.jfree.chart.renderer.xy.XYItemRenderer var62 = null;
//     org.jfree.chart.plot.XYPlot var63 = new org.jfree.chart.plot.XYPlot(var48, (org.jfree.chart.axis.ValueAxis)var49, (org.jfree.chart.axis.ValueAxis)var55, var62);
//     org.jfree.chart.renderer.xy.XYItemRenderer var65 = null;
//     var63.setRenderer(0, var65);
//     org.jfree.data.xy.XYDataset var67 = null;
//     var63.setDataset(var67);
//     org.jfree.chart.plot.ValueMarker var70 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var71 = var70.getAlpha();
//     java.awt.Stroke var72 = var70.getStroke();
//     var63.setDomainZeroBaselineStroke(var72);
//     org.jfree.chart.axis.AxisLocation var75 = var63.getRangeAxisLocation(20);
//     float var76 = var63.getBackgroundAlpha();
//     boolean var77 = var0.equals((java.lang.Object)var63);
//     
//     // Checks the contract:  equals-hashcode on var6 and var70
//     assertTrue("Contract failed: equals-hashcode on var6 and var70", var6.equals(var70) ? var6.hashCode() == var70.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var70 and var6
//     assertTrue("Contract failed: equals-hashcode on var70 and var6", var70.equals(var6) ? var70.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
    int var27 = var15.getIndexOf(var26);
    var15.clearAnnotations();
    org.jfree.chart.plot.Marker var30 = null;
    org.jfree.chart.util.Layer var31 = null;
    boolean var33 = var15.removeDomainMarker(100, var30, var31, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test134() {}
//   public void test134() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     var1.configure();
//     boolean var4 = var1.getAutoRangeStickyZero();
//     var1.resizeRange(4.0d, 0.0d);
//     org.jfree.chart.axis.NumberAxis var9 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     var9.setAutoRangeIncludesZero(false);
//     org.jfree.chart.axis.MarkerAxisBand var12 = null;
//     var9.setMarkerBand(var12);
//     org.jfree.chart.axis.NumberAxis var14 = new org.jfree.chart.axis.NumberAxis();
//     org.jfree.chart.axis.NumberTickUnit var15 = var14.getTickUnit();
//     var9.setTickUnit(var15);
//     var1.setTickUnit(var15, true, false);
//     java.awt.Graphics2D var20 = null;
//     java.awt.geom.Rectangle2D var22 = null;
//     java.awt.geom.Rectangle2D var23 = null;
//     org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
//     int var25 = var24.getWeight();
//     org.jfree.chart.util.RectangleEdge var26 = var24.getDomainAxisEdge();
//     org.jfree.chart.plot.PlotRenderingInfo var27 = null;
//     org.jfree.chart.axis.AxisState var28 = var1.draw(var20, (-1.0d), var22, var23, var26, var27);
// 
//   }

  public void test135() {}
//   public void test135() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     var0.setRangeCrosshairVisible(false);
//     org.jfree.chart.event.RendererChangeEvent var12 = null;
//     var0.rendererChanged(var12);
//     org.jfree.chart.plot.PlotRenderingInfo var15 = null;
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     var16.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var18 = var16.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var20 = null;
//     var16.setRenderer(255, var20);
//     java.awt.Stroke var22 = var16.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var23 = var16.getDataset();
//     java.awt.Image var24 = var16.getBackgroundImage();
//     org.jfree.data.category.CategoryDataset var26 = var16.getDataset(20);
//     org.jfree.chart.plot.PlotRenderingInfo var28 = null;
//     org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
//     var29.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var31 = var29.getFixedLegendItems();
//     var29.setRangeGridlinesVisible(false);
//     java.awt.Color var38 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var39 = null;
//     java.awt.Rectangle var40 = null;
//     java.awt.geom.Rectangle2D var41 = null;
//     java.awt.geom.AffineTransform var42 = null;
//     java.awt.RenderingHints var43 = null;
//     java.awt.PaintContext var44 = var38.createContext(var39, var40, var41, var42, var43);
//     org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var47 = var46.getRange();
//     org.jfree.chart.axis.TickUnitSource var48 = null;
//     var46.setStandardTickUnits(var48);
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     java.awt.Paint var52 = var50.getTickLabelPaint();
//     var46.setTickLabelPaint(var52);
//     org.jfree.chart.plot.ValueMarker var55 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var56 = var55.getAlpha();
//     java.awt.Stroke var57 = var55.getStroke();
//     org.jfree.chart.plot.CategoryMarker var58 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var52, var57);
//     java.awt.Color var62 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var63 = null;
//     java.awt.Rectangle var64 = null;
//     java.awt.geom.Rectangle2D var65 = null;
//     java.awt.geom.AffineTransform var66 = null;
//     java.awt.RenderingHints var67 = null;
//     java.awt.PaintContext var68 = var62.createContext(var63, var64, var65, var66, var67);
//     org.jfree.chart.axis.DateAxis var69 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var70 = var69.getRange();
//     java.awt.Paint var71 = var69.getTickLabelPaint();
//     double var72 = var69.getLowerMargin();
//     java.awt.Shape var73 = var69.getLeftArrow();
//     java.awt.Stroke var74 = var69.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var76 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var38, var57, (java.awt.Paint)var62, var74, 0.8f);
//     var29.setDomainGridlinePaint((java.awt.Paint)var62);
//     org.jfree.chart.plot.PlotRenderingInfo var79 = null;
//     java.awt.geom.Rectangle2D var80 = null;
//     org.jfree.chart.util.RectangleAnchor var81 = null;
//     java.awt.geom.Point2D var82 = org.jfree.chart.util.RectangleAnchor.coordinates(var80, var81);
//     var29.zoomDomainAxes(9.223372036854776E18d, var79, var82, false);
//     var16.zoomRangeAxes(0.0d, var28, var82);
//     var0.zoomDomainAxes(3.0d, var15, var82);
//     
//     // Checks the contract:  equals-hashcode on var1 and var16
//     assertTrue("Contract failed: equals-hashcode on var1 and var16", var1.equals(var16) ? var1.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var1
//     assertTrue("Contract failed: equals-hashcode on var16 and var1", var16.equals(var1) ? var16.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var18 = var17.getAlpha();
    java.awt.Stroke var19 = var17.getStroke();
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.text.DateFormat var22 = var20.getDateFormatOverride();
    var20.resizeRange((-1.0d), (-1.0d));
    boolean var26 = var17.equals((java.lang.Object)var20);
    org.jfree.chart.util.Layer var27 = null;
    boolean var28 = var7.removeRangeMarker(20, (org.jfree.chart.plot.Marker)var17, var27);
    org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
    var29.clearRangeAxes();
    org.jfree.chart.plot.CategoryMarker var32 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    var29.addDomainMarker(var32);
    org.jfree.chart.axis.CategoryAxis var35 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var38 = null;
    org.jfree.chart.util.RectangleEdge var39 = null;
    double var40 = var35.getCategoryMiddle(0, (-1), var38, var39);
    var35.configure();
    org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var44 = var43.getRange();
    java.text.DateFormat var45 = var43.getDateFormatOverride();
    var43.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var49 = var43.getStandardTickUnits();
    var43.setLabelURL("");
    java.awt.Font var52 = var43.getTickLabelFont();
    var35.setTickLabelFont((java.lang.Comparable)(byte)100, var52);
    var32.setLabelFont(var52);
    org.jfree.chart.util.Layer var55 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addDomainMarker(var32, var55);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Color var4 = java.awt.Color.getColor("", 100);
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    org.jfree.chart.axis.TickUnitSource var8 = null;
    var6.setStandardTickUnits(var8);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    java.awt.Paint var12 = var10.getTickLabelPaint();
    var6.setTickLabelPaint(var12);
    org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var16 = var15.getAlpha();
    java.awt.Stroke var17 = var15.getStroke();
    org.jfree.chart.plot.CategoryMarker var18 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var12, var17);
    org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var4, var17);
    boolean var20 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var19);
    org.jfree.data.xy.XYDataset var21 = null;
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.awt.Paint var24 = var22.getTickLabelPaint();
    java.awt.Paint var25 = var22.getTickLabelPaint();
    var22.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var29 = var28.getRange();
    var28.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var33 = var32.getRange();
    var28.setRangeWithMargins(var33);
    org.jfree.chart.renderer.xy.XYItemRenderer var35 = null;
    org.jfree.chart.plot.XYPlot var36 = new org.jfree.chart.plot.XYPlot(var21, (org.jfree.chart.axis.ValueAxis)var22, (org.jfree.chart.axis.ValueAxis)var28, var35);
    var0.setRangeAxis((org.jfree.chart.axis.ValueAxis)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var28.zoomRange(0.0d, (-2.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test138() {}
//   public void test138() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }
// 
// 
//     org.jfree.chart.util.Size2D var0 = null;
//     org.jfree.chart.plot.IntervalMarker var5 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var5.setStartValue(0.0d);
//     var5.setLabel("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]");
//     double var10 = var5.getStartValue();
//     java.awt.Stroke var11 = null;
//     var5.setOutlineStroke(var11);
//     org.jfree.chart.util.RectangleAnchor var13 = var5.getLabelAnchor();
//     java.awt.geom.Rectangle2D var14 = org.jfree.chart.util.RectangleAnchor.createRectangle(var0, 8.0d, 9.223372036854776E18d, var13);
// 
//   }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    var0.setRangeWithMargins((-1.0d), (-1.0d));
    var0.setLowerBound((-2.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var7 = null;
    boolean var8 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var6, var7);
    org.jfree.chart.plot.IntervalMarker var11 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var11.setStartValue(0.0d);
    double var14 = var11.getStartValue();
    java.awt.Paint var15 = var11.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var16 = var11.getGradientPaintTransformer();
    var11.setEndValue(9.223372036854776E18d);
    java.awt.Color var21 = java.awt.Color.getColor("", 100);
    int var22 = var21.getRed();
    int var23 = var21.getAlpha();
    var11.setPaint((java.awt.Paint)var21);
    var6.setPaint((java.awt.Paint)var21);
    org.jfree.chart.util.LengthAdjustmentType var26 = var6.getLabelOffsetType();
    org.jfree.data.xy.XYDataset var27 = null;
    org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var29 = var28.getRange();
    java.awt.Paint var30 = var28.getTickLabelPaint();
    java.awt.Paint var31 = var28.getTickLabelPaint();
    var28.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    var34.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    var34.setRangeWithMargins(var39);
    org.jfree.chart.renderer.xy.XYItemRenderer var41 = null;
    org.jfree.chart.plot.XYPlot var42 = new org.jfree.chart.plot.XYPlot(var27, (org.jfree.chart.axis.ValueAxis)var28, (org.jfree.chart.axis.ValueAxis)var34, var41);
    org.jfree.chart.renderer.xy.XYItemRenderer var44 = null;
    var42.setRenderer(0, var44);
    org.jfree.data.xy.XYDataset var46 = null;
    var42.setDataset(var46);
    org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var50 = var49.getAlpha();
    java.awt.Stroke var51 = var49.getStroke();
    var42.setDomainZeroBaselineStroke(var51);
    org.jfree.chart.renderer.xy.XYItemRenderer var53 = null;
    int var54 = var42.getIndexOf(var53);
    boolean var55 = var6.equals((java.lang.Object)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var3 = var2.getRange();
    java.awt.Shape var4 = var2.getLeftArrow();
    var2.setLabelAngle(0.0d);
    var2.setNegativeArrowVisible(false);
    java.lang.String var9 = var2.getLabelURL();
    int var10 = var0.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var2);
    org.jfree.chart.axis.AxisLocation var11 = var0.getDomainAxisLocation();
    int var12 = var0.getRangeAxisCount();
    var0.clearDomainMarkers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test142() {}
//   public void test142() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }
// 
// 
//     org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var5 = var3.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var7 = null;
//     var3.setRenderer(255, var7);
//     var3.clearRangeMarkers();
//     var2.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var3);
//     java.awt.Paint var11 = var2.getPaint();
//     org.jfree.chart.plot.IntervalMarker var14 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     var14.setStartValue(0.0d);
//     org.jfree.chart.text.TextAnchor var17 = var14.getLabelTextAnchor();
//     org.jfree.chart.util.LengthAdjustmentType var18 = var14.getLabelOffsetType();
//     var2.setLabelOffsetType(var18);
//     
//     // Checks the contract:  equals-hashcode on var2 and var14
//     assertTrue("Contract failed: equals-hashcode on var2 and var14", var2.equals(var14) ? var2.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var2
//     assertTrue("Contract failed: equals-hashcode on var14 and var2", var14.equals(var2) ? var14.hashCode() == var2.hashCode() : true);
// 
//   }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    var15.setDomainCrosshairVisible(false);
    int var23 = var15.getWeight();
    boolean var24 = var15.isDomainCrosshairVisible();
    boolean var25 = var15.isDomainGridlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
    java.lang.Object var3 = var1.get((-16646144));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test145() {}
//   public void test145() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var33 = null;
//     var31.notifyListeners(var33);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     double var44 = var42.trimWidth((-1.0d));
//     double var46 = var42.trimHeight((-6.0d));
//     boolean var47 = var39.equals((java.lang.Object)var42);
//     var35.setInsets(var42, true);
//     java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
//     var31.setOutlineStroke(var50);
//     var15.setRangeGridlineStroke(var50);
//     org.jfree.chart.util.RectangleEdge var53 = var15.getRangeAxisEdge();
//     org.jfree.chart.axis.AxisLocation var55 = var15.getDomainAxisLocation(0);
//     java.awt.Paint var56 = var15.getRangeTickBandPaint();
//     org.jfree.chart.plot.PlotRenderingInfo var58 = null;
//     org.jfree.data.xy.XYDataset var59 = null;
//     org.jfree.chart.axis.DateAxis var60 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var61 = var60.getRange();
//     java.awt.Paint var62 = var60.getTickLabelPaint();
//     java.awt.Paint var63 = var60.getTickLabelPaint();
//     var60.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var66 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var67 = var66.getRange();
//     var66.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var70 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var71 = var70.getRange();
//     var66.setRangeWithMargins(var71);
//     org.jfree.chart.renderer.xy.XYItemRenderer var73 = null;
//     org.jfree.chart.plot.XYPlot var74 = new org.jfree.chart.plot.XYPlot(var59, (org.jfree.chart.axis.ValueAxis)var60, (org.jfree.chart.axis.ValueAxis)var66, var73);
//     org.jfree.chart.util.RectangleEdge var76 = var74.getDomainAxisEdge(12);
//     var74.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var79 = new org.jfree.chart.plot.CategoryPlot();
//     var79.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var81 = var79.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var83 = null;
//     var79.setRenderer(255, var83);
//     java.awt.Stroke var85 = var79.getOutlineStroke();
//     var74.setRangeZeroBaselineStroke(var85);
//     org.jfree.data.xy.XYDataset var87 = null;
//     int var88 = var74.indexOf(var87);
//     float var89 = var74.getBackgroundImageAlpha();
//     var74.setRangeCrosshairLockedOnData(false);
//     var74.setRangeCrosshairLockedOnData(true);
//     org.jfree.chart.axis.AxisLocation var95 = var74.getRangeAxisLocation(15);
//     java.awt.geom.Point2D var96 = var74.getQuadrantOrigin();
//     var15.zoomDomainAxes(8.0d, var58, var96, false);
//     
//     // Checks the contract:  equals-hashcode on var20 and var79
//     assertTrue("Contract failed: equals-hashcode on var20 and var79", var20.equals(var79) ? var20.hashCode() == var79.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var79 and var20
//     assertTrue("Contract failed: equals-hashcode on var79 and var20", var79.equals(var20) ? var79.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }
// 
// 
//     org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var2 = var1.getAlpha();
//     java.awt.Stroke var3 = var1.getStroke();
//     org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var5 = var4.getRange();
//     java.text.DateFormat var6 = var4.getDateFormatOverride();
//     var4.resizeRange((-1.0d), (-1.0d));
//     boolean var10 = var1.equals((java.lang.Object)var4);
//     org.jfree.chart.util.RectangleInsets var11 = var1.getLabelOffset();
//     java.awt.Paint var12 = var1.getOutlinePaint();
//     java.awt.Paint var13 = var1.getPaint();
//     org.jfree.chart.plot.IntervalMarker var16 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var16.setStartValue(0.0d);
//     double var19 = var16.getStartValue();
//     java.awt.Paint var20 = var16.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var21 = var16.getGradientPaintTransformer();
//     java.awt.Color var24 = java.awt.Color.getColor("", 100);
//     java.awt.image.ColorModel var25 = null;
//     java.awt.Rectangle var26 = null;
//     java.awt.geom.Rectangle2D var27 = null;
//     java.awt.geom.AffineTransform var28 = null;
//     java.awt.RenderingHints var29 = null;
//     java.awt.PaintContext var30 = var24.createContext(var25, var26, var27, var28, var29);
//     java.awt.image.ColorModel var31 = null;
//     java.awt.Rectangle var32 = null;
//     java.awt.geom.Rectangle2D var33 = null;
//     java.awt.geom.AffineTransform var34 = null;
//     java.awt.RenderingHints var35 = null;
//     java.awt.PaintContext var36 = var24.createContext(var31, var32, var33, var34, var35);
//     var16.setLabelPaint((java.awt.Paint)var24);
//     boolean var38 = var1.equals((java.lang.Object)var16);
//     org.jfree.chart.plot.CategoryMarker var40 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     java.awt.Paint var41 = var40.getLabelPaint();
//     org.jfree.chart.text.TextAnchor var42 = var40.getLabelTextAnchor();
//     org.jfree.chart.plot.CategoryPlot var43 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.util.RectangleInsets var44 = var43.getAxisOffset();
//     var43.setRangeCrosshairValue(1.05d);
//     boolean var47 = var42.equals((java.lang.Object)var43);
//     org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
//     var48.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var51 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var52 = var51.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var53 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var54 = var53.getRange();
//     org.jfree.chart.util.RectangleInsets var55 = var53.getLabelInsets();
//     double var57 = var55.trimWidth((-1.0d));
//     double var59 = var55.trimHeight((-6.0d));
//     boolean var60 = var52.equals((java.lang.Object)var55);
//     var48.setInsets(var55, true);
//     java.awt.Stroke var63 = var48.getRangeCrosshairStroke();
//     java.awt.Paint var64 = var48.getRangeGridlinePaint();
//     org.jfree.chart.axis.ValueAxis var66 = var48.getRangeAxisForDataset(20);
//     org.jfree.chart.axis.AxisSpace var67 = null;
//     var48.setFixedRangeAxisSpace(var67, false);
//     boolean var70 = var42.equals((java.lang.Object)var67);
//     var16.setLabelTextAnchor(var42);
//     
//     // Checks the contract:  equals-hashcode on var1 and var51
//     assertTrue("Contract failed: equals-hashcode on var1 and var51", var1.equals(var51) ? var1.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var1
//     assertTrue("Contract failed: equals-hashcode on var51 and var1", var51.equals(var1) ? var51.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDomainAxisCount();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    var18.clearRangeAxes();
    boolean var20 = var18.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var24 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var25 = null;
    boolean var26 = var18.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var24, var25);
    org.jfree.chart.plot.IntervalMarker var29 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var29.setStartValue(0.0d);
    double var32 = var29.getStartValue();
    java.awt.Paint var33 = var29.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var34 = var29.getGradientPaintTransformer();
    var29.setEndValue(9.223372036854776E18d);
    java.awt.Color var39 = java.awt.Color.getColor("", 100);
    int var40 = var39.getRed();
    int var41 = var39.getAlpha();
    var29.setPaint((java.awt.Paint)var39);
    var24.setPaint((java.awt.Paint)var39);
    java.awt.Color var44 = java.awt.Color.getColor("XY Plot", var39);
    var15.setDomainCrosshairPaint((java.awt.Paint)var44);
    java.util.List var46 = var15.getAnnotations();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var49 = var48.getAlpha();
    java.awt.Stroke var50 = var48.getStroke();
    org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var52 = var51.getRange();
    java.text.DateFormat var53 = var51.getDateFormatOverride();
    var51.resizeRange((-1.0d), (-1.0d));
    boolean var57 = var48.equals((java.lang.Object)var51);
    org.jfree.chart.util.RectangleInsets var58 = var48.getLabelOffset();
    java.awt.Paint var59 = var48.getOutlinePaint();
    org.jfree.chart.util.Layer var60 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var48, var60);
    float var62 = var48.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.8f);

  }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }
// 
// 
//     java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var2 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var3 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
//     var4.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var8 = var7.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     org.jfree.chart.util.RectangleInsets var11 = var9.getLabelInsets();
//     double var13 = var11.trimWidth((-1.0d));
//     double var15 = var11.trimHeight((-6.0d));
//     boolean var16 = var8.equals((java.lang.Object)var11);
//     var4.setInsets(var11, true);
//     java.awt.Stroke var19 = var4.getRangeCrosshairStroke();
//     java.awt.Stroke[] var20 = new java.awt.Stroke[] { var19};
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.awt.Paint var23 = var21.getTickLabelPaint();
//     double var24 = var21.getLowerMargin();
//     java.awt.Shape var25 = var21.getLeftArrow();
//     java.awt.Stroke var26 = var21.getTickMarkStroke();
//     java.awt.Stroke[] var27 = new java.awt.Stroke[] { var26};
//     java.awt.Shape[] var28 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var29 = new org.jfree.chart.plot.DefaultDrawingSupplier(var1, var2, var3, var20, var27, var28);
//     java.awt.Paint[] var30 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var31 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var32 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
//     var33.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var37 = var36.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var39 = var38.getRange();
//     org.jfree.chart.util.RectangleInsets var40 = var38.getLabelInsets();
//     double var42 = var40.trimWidth((-1.0d));
//     double var44 = var40.trimHeight((-6.0d));
//     boolean var45 = var37.equals((java.lang.Object)var40);
//     var33.setInsets(var40, true);
//     java.awt.Stroke var48 = var33.getRangeCrosshairStroke();
//     java.awt.Stroke[] var49 = new java.awt.Stroke[] { var48};
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     java.awt.Paint var52 = var50.getTickLabelPaint();
//     double var53 = var50.getLowerMargin();
//     java.awt.Shape var54 = var50.getLeftArrow();
//     java.awt.Stroke var55 = var50.getTickMarkStroke();
//     java.awt.Stroke[] var56 = new java.awt.Stroke[] { var55};
//     java.awt.Shape[] var57 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var58 = new org.jfree.chart.plot.DefaultDrawingSupplier(var30, var31, var32, var49, var56, var57);
//     java.awt.Paint[] var59 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var60 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var61 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot();
//     var62.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var65 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var66 = var65.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var67 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var68 = var67.getRange();
//     org.jfree.chart.util.RectangleInsets var69 = var67.getLabelInsets();
//     double var71 = var69.trimWidth((-1.0d));
//     double var73 = var69.trimHeight((-6.0d));
//     boolean var74 = var66.equals((java.lang.Object)var69);
//     var62.setInsets(var69, true);
//     java.awt.Stroke var77 = var62.getRangeCrosshairStroke();
//     java.awt.Stroke[] var78 = new java.awt.Stroke[] { var77};
//     org.jfree.chart.axis.DateAxis var79 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var80 = var79.getRange();
//     java.awt.Paint var81 = var79.getTickLabelPaint();
//     double var82 = var79.getLowerMargin();
//     java.awt.Shape var83 = var79.getLeftArrow();
//     java.awt.Stroke var84 = var79.getTickMarkStroke();
//     java.awt.Stroke[] var85 = new java.awt.Stroke[] { var84};
//     java.awt.Shape[] var86 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var87 = new org.jfree.chart.plot.DefaultDrawingSupplier(var59, var60, var61, var78, var85, var86);
//     java.awt.Stroke[] var88 = null;
//     java.awt.Shape[] var89 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var90 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var3, var31, var78, var88, var89);
//     
//     // Checks the contract:  equals-hashcode on var4 and var33
//     assertTrue("Contract failed: equals-hashcode on var4 and var33", var4.equals(var33) ? var4.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var62
//     assertTrue("Contract failed: equals-hashcode on var4 and var62", var4.equals(var62) ? var4.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var4
//     assertTrue("Contract failed: equals-hashcode on var33 and var4", var33.equals(var4) ? var33.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var62
//     assertTrue("Contract failed: equals-hashcode on var33 and var62", var33.equals(var62) ? var33.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var62 and var4
//     assertTrue("Contract failed: equals-hashcode on var62 and var4", var62.equals(var4) ? var62.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var62 and var33
//     assertTrue("Contract failed: equals-hashcode on var62 and var33", var62.equals(var33) ? var62.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var36
//     assertTrue("Contract failed: equals-hashcode on var7 and var36", var7.equals(var36) ? var7.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var65
//     assertTrue("Contract failed: equals-hashcode on var7 and var65", var7.equals(var65) ? var7.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var7
//     assertTrue("Contract failed: equals-hashcode on var36 and var7", var36.equals(var7) ? var36.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var65
//     assertTrue("Contract failed: equals-hashcode on var36 and var65", var36.equals(var65) ? var36.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var7
//     assertTrue("Contract failed: equals-hashcode on var65 and var7", var65.equals(var7) ? var65.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var36
//     assertTrue("Contract failed: equals-hashcode on var65 and var36", var65.equals(var36) ? var65.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var58
//     assertTrue("Contract failed: equals-hashcode on var29 and var58", var29.equals(var58) ? var29.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var87
//     assertTrue("Contract failed: equals-hashcode on var29 and var87", var29.equals(var87) ? var29.hashCode() == var87.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var29
//     assertTrue("Contract failed: equals-hashcode on var58 and var29", var58.equals(var29) ? var58.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var87
//     assertTrue("Contract failed: equals-hashcode on var58 and var87", var58.equals(var87) ? var58.hashCode() == var87.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var87 and var29
//     assertTrue("Contract failed: equals-hashcode on var87 and var29", var87.equals(var29) ? var87.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var87 and var58
//     assertTrue("Contract failed: equals-hashcode on var87 and var58", var87.equals(var58) ? var87.hashCode() == var58.hashCode() : true);
// 
//   }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.awt.Paint var2 = var0.getTickLabelPaint();
//     java.awt.Paint var3 = var0.getTickLabelPaint();
//     java.awt.geom.Rectangle2D var5 = null;
//     org.jfree.chart.util.RectangleEdge var6 = null;
//     double var7 = var0.java2DToValue((-7.0d), var5, var6);
//     var0.setNegativeArrowVisible(false);
//     double var10 = var0.getAutoRangeMinimumSize();
//     java.awt.geom.Rectangle2D var12 = null;
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     var13.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var15 = null;
//     var13.setFixedRangeAxisSpace(var15, false);
//     boolean var18 = var13.isRangeZoomable();
//     var13.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var22 = var13.getDomainAxisEdge(0);
//     double var23 = var0.java2DToValue(1.0d, var12, var22);
// 
//   }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    org.jfree.chart.event.PlotChangeListener var6 = null;
    var0.addChangeListener(var6);
    org.jfree.chart.annotations.CategoryAnnotation var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var0.removeAnnotation(var8, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.plot.Plot var28 = var15.getParent();
    boolean var29 = var15.isRangeCrosshairLockedOnData();
    java.awt.Stroke var30 = var15.getDomainCrosshairStroke();
    org.jfree.chart.plot.DatasetRenderingOrder var31 = var15.getDatasetRenderingOrder();
    org.jfree.data.xy.XYDataset var33 = null;
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    java.awt.Paint var36 = var34.getTickLabelPaint();
    java.awt.Paint var37 = var34.getTickLabelPaint();
    var34.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    var40.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var45 = var44.getRange();
    var40.setRangeWithMargins(var45);
    org.jfree.chart.renderer.xy.XYItemRenderer var47 = null;
    org.jfree.chart.plot.XYPlot var48 = new org.jfree.chart.plot.XYPlot(var33, (org.jfree.chart.axis.ValueAxis)var34, (org.jfree.chart.axis.ValueAxis)var40, var47);
    java.awt.Graphics2D var49 = null;
    java.awt.geom.Rectangle2D var50 = null;
    java.util.List var51 = null;
    var48.drawRangeTickBands(var49, var50, var51);
    org.jfree.chart.axis.CategoryAxis var55 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var58 = null;
    org.jfree.chart.util.RectangleEdge var59 = null;
    double var60 = var55.getCategoryMiddle(0, (-1), var58, var59);
    org.jfree.chart.plot.CategoryPlot var61 = new org.jfree.chart.plot.CategoryPlot();
    var61.clearRangeAxes();
    boolean var63 = var61.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var65 = var61.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var66 = var61.getParent();
    var55.addChangeListener((org.jfree.chart.event.AxisChangeListener)var61);
    boolean var68 = var61.isRangeZoomable();
    var61.setRangeCrosshairValue((-7.0d), false);
    org.jfree.chart.plot.IntervalMarker var75 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var75.setStartValue(0.0d);
    double var78 = var75.getStartValue();
    org.jfree.chart.plot.ValueMarker var80 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var81 = var80.getAlpha();
    java.awt.Stroke var82 = var80.getStroke();
    var75.setOutlineStroke(var82);
    var75.setStartValue(9.223372036854776E18d);
    org.jfree.chart.util.GradientPaintTransformer var86 = null;
    var75.setGradientPaintTransformer(var86);
    org.jfree.chart.util.Layer var88 = null;
    boolean var90 = var61.removeRangeMarker((-16646144), (org.jfree.chart.plot.Marker)var75, var88, true);
    org.jfree.chart.util.Layer var91 = null;
    var48.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var75, var91, true);
    org.jfree.chart.util.Layer var94 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var75, var94);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test152() {}
//   public void test152() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     int var29 = var15.indexOf(var28);
//     org.jfree.data.xy.XYDataset var30 = null;
//     var15.setDataset(var30);
//     boolean var32 = var15.isRangeGridlinesVisible();
//     org.jfree.chart.plot.DatasetRenderingOrder var33 = var15.getDatasetRenderingOrder();
//     org.jfree.chart.plot.CategoryPlot var34 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     boolean var37 = var35.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var39 = var35.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var40 = var35.getParent();
//     org.jfree.chart.axis.AxisLocation var42 = var35.getDomainAxisLocation((-668));
//     var34.setRangeAxisLocation(var42);
//     var34.setRangeCrosshairVisible(false);
//     float var46 = var34.getBackgroundImageAlpha();
//     boolean var47 = var15.equals((java.lang.Object)var46);
//     
//     // Checks the contract:  equals-hashcode on var20 and var35
//     assertTrue("Contract failed: equals-hashcode on var20 and var35", var20.equals(var35) ? var20.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var20
//     assertTrue("Contract failed: equals-hashcode on var35 and var20", var35.equals(var20) ? var35.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.axis.TickUnitSource var2 = null;
    var0.setStandardTickUnits(var2);
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.awt.Paint var6 = var4.getTickLabelPaint();
    var0.setTickLabelPaint(var6);
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
    double var12 = var10.trimWidth(0.0d);
    org.jfree.chart.plot.ValueMarker var14 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var15 = var14.getAlpha();
    java.awt.Stroke var16 = var14.getStroke();
    float var17 = var14.getAlpha();
    boolean var18 = var10.equals((java.lang.Object)var14);
    var0.setTickLabelInsets(var10);
    double var21 = var10.calculateBottomOutset((-1.0d));
    double var23 = var10.calculateTopOutset((-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3.0d);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getDomainGridlinePaint();
    org.jfree.chart.axis.AxisSpace var29 = null;
    var0.setFixedDomainAxisSpace(var29);
    org.jfree.chart.renderer.xy.XYItemRenderer var31 = var0.getRenderer();
    var0.mapDatasetToRangeAxis(1, 4);
    org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Color var40 = java.awt.Color.getColor("", 100);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    org.jfree.chart.axis.TickUnitSource var44 = null;
    var42.setStandardTickUnits(var44);
    org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var47 = var46.getRange();
    java.awt.Paint var48 = var46.getTickLabelPaint();
    var42.setTickLabelPaint(var48);
    org.jfree.chart.plot.ValueMarker var51 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var52 = var51.getAlpha();
    java.awt.Stroke var53 = var51.getStroke();
    org.jfree.chart.plot.CategoryMarker var54 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var48, var53);
    org.jfree.chart.plot.ValueMarker var55 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var40, var53);
    boolean var56 = var36.removeRangeMarker((org.jfree.chart.plot.Marker)var55);
    org.jfree.chart.axis.AxisLocation var57 = var36.getRangeAxisLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxisLocation((-16646144), var57, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    java.awt.Color var2 = java.awt.Color.getColor("DatasetRenderingOrder.REVERSE", 1);
    int var3 = var2.getRGB();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-16777215));

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.util.RectangleInsets var4 = var1.getLabelInsets();
    org.jfree.chart.JFreeChart var5 = null;
    org.jfree.chart.axis.CategoryAxis var7 = new org.jfree.chart.axis.CategoryAxis("");
    var7.configure();
    float var9 = var7.getMaximumCategoryLabelWidthRatio();
    var7.setTickMarkOutsideLength(100.0f);
    var7.setUpperMargin(0.0d);
    float var14 = var7.getMaximumCategoryLabelWidthRatio();
    org.jfree.chart.JFreeChart var15 = null;
    org.jfree.chart.event.ChartChangeEvent var16 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var14, var15);
    org.jfree.chart.event.ChartChangeEventType var17 = var16.getType();
    java.lang.String var18 = var17.toString();
    org.jfree.chart.event.ChartChangeEvent var19 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var4, var5, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ChartChangeEventType.GENERAL"+ "'", var18.equals("ChartChangeEventType.GENERAL"));

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    boolean var5 = var0.getDrawSharedDomainAxis();
    double var6 = var0.getRangeCrosshairValue();
    org.jfree.data.xy.XYDataset var7 = null;
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Paint var10 = var8.getTickLabelPaint();
    java.awt.Paint var11 = var8.getTickLabelPaint();
    var8.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var14.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    var14.setRangeWithMargins(var19);
    org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
    org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot(var7, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.axis.ValueAxis)var14, var21);
    java.awt.Paint var23 = var22.getDomainZeroBaselinePaint();
    var0.setDomainGridlinePaint(var23);
    org.jfree.chart.renderer.category.CategoryItemRenderer var25 = null;
    var0.setRenderer(var25);
    org.jfree.chart.axis.CategoryAxis var29 = new org.jfree.chart.axis.CategoryAxis("");
    var29.configure();
    float var31 = var29.getMaximumCategoryLabelWidthRatio();
    var29.setCategoryLabelPositionOffset(0);
    var29.setCategoryMargin(1.0d);
    org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var37 = var36.getRange();
    org.jfree.chart.util.RectangleInsets var38 = var36.getLabelInsets();
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    org.jfree.chart.axis.TickUnitSource var41 = null;
    var39.setStandardTickUnits(var41);
    org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var44 = var43.getRange();
    java.awt.Paint var45 = var43.getTickLabelPaint();
    var39.setTickLabelPaint(var45);
    var39.resizeRange((-1.0d));
    java.util.Date var49 = var39.getMinimumDate();
    var36.setMinimumDate(var49);
    java.awt.Font var51 = var29.getTickLabelFont((java.lang.Comparable)var49);
    java.awt.Paint var52 = var29.getTickMarkPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxis((-16777215), var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    org.jfree.chart.plot.CategoryMarker var1 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    java.awt.Paint var2 = var1.getLabelPaint();
    java.lang.Comparable var3 = var1.getKey();
    var1.setKey((java.lang.Comparable)8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 0L+ "'", var3.equals(0L));

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    org.jfree.data.Range var4 = var0.getDefaultAutoRange();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    var5.setRange(0.0d, 100.0d);
    boolean var10 = var5.isInverted();
    org.jfree.chart.axis.Timeline var11 = var5.getTimeline();
    var0.setTimeline(var11);
    boolean var13 = var0.isInverted();
    var0.centerRange(7.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    var0.setRangeWithMargins((-1.0d), (-1.0d));
    java.awt.Shape var7 = var0.getRightArrow();
    org.jfree.chart.ChartColor var11 = new org.jfree.chart.ChartColor(2, 0, 12);
    var0.setTickLabelPaint((java.awt.Paint)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    java.lang.Object var2 = var1.clone();
    java.text.NumberFormat var3 = var1.getNumberFormatOverride();
    java.awt.Graphics2D var4 = null;
    org.jfree.chart.axis.AxisState var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.util.RectangleEdge var7 = null;
    java.util.List var8 = var1.refreshTicks(var4, var5, var6, var7);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var9.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var11 = var9.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var13 = null;
    var9.setRenderer(255, var13);
    java.awt.Stroke var15 = var9.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var16 = var9.getDataset();
    java.awt.Paint var17 = var9.getNoDataMessagePaint();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.clearRangeAxes();
    boolean var21 = var19.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var23 = var19.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var24 = var19.getParent();
    org.jfree.chart.axis.AxisLocation var26 = var19.getDomainAxisLocation((-668));
    var18.setRangeAxisLocation(var26);
    var9.setDomainAxisLocation(var26, true);
    boolean var30 = var1.equals((java.lang.Object)true);
    double var31 = var1.getFixedAutoRange();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.0d);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var3 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var0);
    org.jfree.chart.event.ChartChangeEventType var4 = var3.getType();
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ChartChangeEventType.GENERAL"+ "'", var5.equals("ChartChangeEventType.GENERAL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ChartChangeEventType.GENERAL"+ "'", var6.equals("ChartChangeEventType.GENERAL"));

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }


    org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    int var10 = var0.compareTo((java.lang.Object)var1);
    java.util.Date var11 = var0.getStart();
    org.jfree.data.time.RegularTimePeriod var12 = var0.previous();
    java.util.Date var13 = var12.getStart();
    org.jfree.data.time.Day var14 = new org.jfree.data.time.Day(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.awt.Shape var5 = var3.getLeftArrow();
    var3.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    var8.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var8.setRangeWithMargins(var13);
    java.util.TimeZone var15 = var8.getTimeZone();
    var3.setTimeZone(var15);
    org.jfree.chart.axis.TickUnitSource var17 = org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(var15);
    var0.setTimeZone(var15);
    boolean var20 = var0.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }
// 
// 
//     java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var2 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var7 = var6.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
//     double var12 = var10.trimWidth((-1.0d));
//     double var14 = var10.trimHeight((-6.0d));
//     boolean var15 = var7.equals((java.lang.Object)var10);
//     var3.setInsets(var10, true);
//     java.awt.Stroke var18 = var3.getRangeCrosshairStroke();
//     java.awt.Stroke[] var19 = new java.awt.Stroke[] { var18};
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     java.awt.Paint var22 = var20.getTickLabelPaint();
//     double var23 = var20.getLowerMargin();
//     java.awt.Shape var24 = var20.getLeftArrow();
//     java.awt.Stroke var25 = var20.getTickMarkStroke();
//     java.awt.Stroke[] var26 = new java.awt.Stroke[] { var25};
//     java.awt.Shape[] var27 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var28 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var1, var2, var19, var26, var27);
//     java.lang.Object var29 = var28.clone();
//     java.awt.Shape var30 = var28.getNextShape();
//     org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
//     var31.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var34 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var35 = var34.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     org.jfree.chart.util.RectangleInsets var38 = var36.getLabelInsets();
//     double var40 = var38.trimWidth((-1.0d));
//     double var42 = var38.trimHeight((-6.0d));
//     boolean var43 = var35.equals((java.lang.Object)var38);
//     var31.setInsets(var38, true);
//     org.jfree.chart.plot.CategoryPlot var46 = new org.jfree.chart.plot.CategoryPlot();
//     var46.clearRangeAxes();
//     boolean var48 = var46.isDomainGridlinesVisible();
//     boolean var49 = var38.equals((java.lang.Object)var46);
//     double var50 = var38.getRight();
//     double var52 = var38.calculateRightOutset((-1.0d));
//     org.jfree.chart.util.UnitType var53 = var38.getUnitType();
//     double var54 = var38.getBottom();
//     double var56 = var38.calculateTopOutset((-7.0d));
//     boolean var57 = var28.equals((java.lang.Object)(-7.0d));
//     
//     // Checks the contract:  equals-hashcode on var3 and var31
//     assertTrue("Contract failed: equals-hashcode on var3 and var31", var3.equals(var31) ? var3.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var3
//     assertTrue("Contract failed: equals-hashcode on var31 and var3", var31.equals(var3) ? var31.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var6 and var34
//     assertTrue("Contract failed: equals-hashcode on var6 and var34", var6.equals(var34) ? var6.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var6
//     assertTrue("Contract failed: equals-hashcode on var34 and var6", var34.equals(var6) ? var34.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day((-16777215), 255, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     org.jfree.chart.axis.AxisSpace var10 = null;
//     var0.setFixedDomainAxisSpace(var10, true);
//     java.lang.Object var13 = var0.clone();
//     boolean var14 = var0.isSubplot();
//     var0.mapDatasetToRangeAxis(2014, (-668));
//     org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var20 = var19.getAlpha();
//     java.awt.Stroke var21 = var19.getStroke();
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.text.DateFormat var24 = var22.getDateFormatOverride();
//     var22.resizeRange((-1.0d), (-1.0d));
//     boolean var28 = var19.equals((java.lang.Object)var22);
//     org.jfree.chart.util.Layer var29 = null;
//     boolean var30 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var19, var29);
//     org.jfree.chart.plot.PlotRenderingInfo var33 = null;
//     org.jfree.data.xy.XYDataset var34 = null;
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     java.awt.Paint var37 = var35.getTickLabelPaint();
//     java.awt.Paint var38 = var35.getTickLabelPaint();
//     var35.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     var41.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var46 = var45.getRange();
//     var41.setRangeWithMargins(var46);
//     org.jfree.chart.renderer.xy.XYItemRenderer var48 = null;
//     org.jfree.chart.plot.XYPlot var49 = new org.jfree.chart.plot.XYPlot(var34, (org.jfree.chart.axis.ValueAxis)var35, (org.jfree.chart.axis.ValueAxis)var41, var48);
//     org.jfree.chart.plot.PlotRenderingInfo var51 = null;
//     org.jfree.chart.plot.CategoryPlot var52 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var53 = new org.jfree.chart.plot.CategoryPlot();
//     var53.clearRangeAxes();
//     boolean var55 = var53.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var57 = var53.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var58 = var53.getParent();
//     org.jfree.chart.axis.AxisLocation var60 = var53.getDomainAxisLocation((-668));
//     var52.setRangeAxisLocation(var60);
//     org.jfree.chart.axis.AxisSpace var62 = null;
//     var52.setFixedDomainAxisSpace(var62, true);
//     org.jfree.chart.plot.PlotRenderingInfo var66 = null;
//     java.awt.geom.Rectangle2D var67 = null;
//     org.jfree.chart.util.RectangleAnchor var68 = null;
//     java.awt.geom.Point2D var69 = org.jfree.chart.util.RectangleAnchor.coordinates(var67, var68);
//     var52.zoomDomainAxes(9.223372036854776E18d, var66, var69);
//     var49.zoomRangeAxes((-9.223372036854776E18d), var51, var69);
//     var0.zoomRangeAxes((-4.0d), 102.0d, var33, var69);
//     
//     // Checks the contract:  equals-hashcode on var1 and var53
//     assertTrue("Contract failed: equals-hashcode on var1 and var53", var1.equals(var53) ? var1.hashCode() == var53.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var52 and var0
//     assertTrue("Contract failed: equals-hashcode on var52 and var0", var52.equals(var0) ? var52.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var53 and var1
//     assertTrue("Contract failed: equals-hashcode on var53 and var1", var53.equals(var1) ? var53.hashCode() == var1.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var52 and var0.", var52.equals(var0) == var0.equals(var52));
// 
//   }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }


    java.lang.Class var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    org.jfree.chart.axis.TickUnitSource var3 = null;
    var1.setStandardTickUnits(var3);
    boolean var5 = var1.isNegativeArrowVisible();
    boolean var6 = var1.isVisible();
    var1.setLabelURL("");
    java.util.Date var9 = var1.getMaximumDate();
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    java.text.DateFormat var12 = var10.getDateFormatOverride();
    java.awt.Shape var13 = var10.getUpArrow();
    boolean var14 = var10.isAutoRange();
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var15.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    var15.setRangeWithMargins(var20);
    java.util.TimeZone var22 = var15.getTimeZone();
    var10.setTimeZone(var22);
    org.jfree.data.time.RegularTimePeriod var24 = org.jfree.data.time.RegularTimePeriod.createInstance(var0, var9, var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var18 = var15.getDomainAxisLocation();
    org.jfree.chart.plot.ValueMarker var20 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var21 = var20.getAlpha();
    java.awt.Stroke var22 = var20.getStroke();
    var15.setRangeCrosshairStroke(var22);
    java.awt.Paint var24 = var15.getDomainZeroBaselinePaint();
    org.jfree.chart.util.RectangleEdge var25 = var15.getRangeAxisEdge();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDomainAxisCount();
    org.jfree.chart.plot.IntervalMarker var19 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var19.setStartValue(0.0d);
    double var22 = var19.getStartValue();
    java.awt.Paint var23 = var19.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var24 = var19.getGradientPaintTransformer();
    java.awt.Color var27 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var28 = null;
    java.awt.Rectangle var29 = null;
    java.awt.geom.Rectangle2D var30 = null;
    java.awt.geom.AffineTransform var31 = null;
    java.awt.RenderingHints var32 = null;
    java.awt.PaintContext var33 = var27.createContext(var28, var29, var30, var31, var32);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var27.createContext(var34, var35, var36, var37, var38);
    var19.setLabelPaint((java.awt.Paint)var27);
    java.awt.Color var41 = var27.darker();
    var15.setDomainTickBandPaint((java.awt.Paint)var41);
    org.jfree.chart.util.RectangleInsets var43 = var15.getAxisOffset();
    double var45 = var43.trimHeight(1.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-6.95d));

  }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var2 = null;
//     var0.setFixedRangeAxisSpace(var2, false);
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     var5.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
//     var5.setRenderer(255, var9);
//     var5.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
//     var0.setInsets(var12);
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     var0.drawBackgroundImage(var14, var15);
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     var17.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var19 = var17.getFixedLegendItems();
//     var17.setRangeGridlinesVisible(false);
//     org.jfree.chart.axis.CategoryAxis var23 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var28 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var29 = null;
//     java.awt.Rectangle var30 = null;
//     java.awt.geom.Rectangle2D var31 = null;
//     java.awt.geom.AffineTransform var32 = null;
//     java.awt.RenderingHints var33 = null;
//     java.awt.PaintContext var34 = var28.createContext(var29, var30, var31, var32, var33);
//     var23.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var28);
//     var23.removeCategoryLabelToolTip((java.lang.Comparable)100L);
//     java.lang.String var39 = var23.getCategoryLabelToolTip((java.lang.Comparable)10L);
//     org.jfree.chart.axis.CategoryAxis[] var40 = new org.jfree.chart.axis.CategoryAxis[] { var23};
//     var17.setDomainAxes(var40);
//     org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var43 = var42.getRange();
//     org.jfree.chart.util.RectangleInsets var44 = var42.getLabelInsets();
//     double var46 = var44.trimWidth((-1.0d));
//     double var48 = var44.trimHeight((-6.0d));
//     double var50 = var44.extendWidth((-6.0d));
//     double var51 = var44.getLeft();
//     org.jfree.chart.util.UnitType var52 = var44.getUnitType();
//     org.jfree.chart.util.RectangleInsets var57 = new org.jfree.chart.util.RectangleInsets(var52, 1.0d, 2.0d, 8.0d, 9.223372036854776E18d);
//     org.jfree.chart.plot.IntervalMarker var60 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     org.jfree.chart.plot.CategoryPlot var61 = new org.jfree.chart.plot.CategoryPlot();
//     var61.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var63 = var61.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var65 = null;
//     var61.setRenderer(255, var65);
//     var61.clearRangeMarkers();
//     var60.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var61);
//     boolean var69 = var52.equals((java.lang.Object)var61);
//     org.jfree.chart.axis.CategoryAnchor var70 = var61.getDomainGridlinePosition();
//     var17.setDomainGridlinePosition(var70);
//     var0.setDomainGridlinePosition(var70);
//     
//     // Checks the contract:  equals-hashcode on var5 and var61
//     assertTrue("Contract failed: equals-hashcode on var5 and var61", var5.equals(var61) ? var5.hashCode() == var61.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var61 and var5
//     assertTrue("Contract failed: equals-hashcode on var61 and var5", var61.equals(var5) ? var61.hashCode() == var5.hashCode() : true);
// 
//   }

  public void test172() {}
//   public void test172() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     int var11 = var0.getMonth();
//     java.lang.String var12 = var0.toString();
//     long var13 = var0.getFirstMillisecond();
//     java.util.Calendar var14 = null;
//     long var15 = var0.getLastMillisecond(var14);
// 
//   }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }


    int var3 = java.awt.Color.HSBtoRGB(10.0f, 0.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-100));

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    org.jfree.data.Range var4 = var0.getDefaultAutoRange();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    var5.setRange(0.0d, 100.0d);
    boolean var10 = var5.isInverted();
    org.jfree.chart.axis.Timeline var11 = var5.getTimeline();
    var0.setTimeline(var11);
    org.jfree.chart.plot.Plot var13 = var0.getPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }
// 
// 
//     org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var2 = var1.getAlpha();
//     java.awt.Stroke var3 = var1.getStroke();
//     org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var5 = var4.getRange();
//     java.text.DateFormat var6 = var4.getDateFormatOverride();
//     var4.resizeRange((-1.0d), (-1.0d));
//     boolean var10 = var1.equals((java.lang.Object)var4);
//     org.jfree.chart.util.RectangleInsets var11 = var1.getLabelOffset();
//     java.awt.Paint var12 = var1.getOutlinePaint();
//     java.awt.Paint var13 = var1.getPaint();
//     java.lang.String var14 = var1.getLabel();
//     org.jfree.chart.plot.IntervalMarker var17 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     var17.setStartValue(0.0d);
//     org.jfree.chart.text.TextAnchor var20 = var17.getLabelTextAnchor();
//     var1.setLabelTextAnchor(var20);
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
//     var22.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var25 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var26 = var25.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var28 = var27.getRange();
//     org.jfree.chart.util.RectangleInsets var29 = var27.getLabelInsets();
//     double var31 = var29.trimWidth((-1.0d));
//     double var33 = var29.trimHeight((-6.0d));
//     boolean var34 = var26.equals((java.lang.Object)var29);
//     var22.setInsets(var29, true);
//     java.awt.Stroke var37 = var22.getRangeCrosshairStroke();
//     java.awt.Paint var38 = var22.getRangeGridlinePaint();
//     org.jfree.chart.axis.ValueAxis var40 = var22.getRangeAxisForDataset(20);
//     org.jfree.chart.event.AxisChangeEvent var41 = null;
//     var22.axisChanged(var41);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     java.awt.Paint var45 = var43.getTickLabelPaint();
//     double var46 = var43.getLowerMargin();
//     java.awt.Shape var47 = var43.getLeftArrow();
//     var43.setTickMarkInsideLength(10.0f);
//     boolean var50 = var43.isNegativeArrowVisible();
//     org.jfree.data.Range var51 = var22.getDataRange((org.jfree.chart.axis.ValueAxis)var43);
//     boolean var52 = var20.equals((java.lang.Object)var43);
//     
//     // Checks the contract:  equals-hashcode on var1 and var25
//     assertTrue("Contract failed: equals-hashcode on var1 and var25", var1.equals(var25) ? var1.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var1
//     assertTrue("Contract failed: equals-hashcode on var25 and var1", var25.equals(var1) ? var25.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    var15.setRangeCrosshairValue(0.0d, true);
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.plot.PlotRenderingInfo var36 = null;
    var15.drawAnnotations(var34, var35, var36);
    org.jfree.chart.plot.Plot var38 = var15.getRootPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test177() {}
//   public void test177() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.awt.Paint var2 = var0.getTickLabelPaint();
//     double var3 = var0.getLowerMargin();
//     java.awt.Shape var4 = var0.getLeftArrow();
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.util.RectangleEdge var7 = null;
//     double var8 = var0.lengthToJava2D(0.0d, var6, var7);
//     var0.setVerticalTickLabels(true);
//     java.awt.Graphics2D var11 = null;
//     org.jfree.chart.axis.AxisState var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     org.jfree.chart.axis.CategoryAxis var15 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var18 = null;
//     org.jfree.chart.util.RectangleEdge var19 = null;
//     double var20 = var15.getCategoryMiddle(0, (-1), var18, var19);
//     org.jfree.chart.axis.CategoryAnchor var21 = null;
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     var25.clearRangeAxes();
//     boolean var27 = var25.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var29 = var25.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var30 = var25.getParent();
//     org.jfree.chart.plot.IntervalMarker var33 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var33.setStartValue(0.0d);
//     double var36 = var33.getStartValue();
//     java.awt.Paint var37 = var33.getPaint();
//     var25.setOutlinePaint(var37);
//     boolean var39 = var25.isDomainZoomable();
//     org.jfree.chart.util.RectangleEdge var40 = var25.getRangeAxisEdge();
//     double var41 = var15.getCategoryJava2DCoordinate(var21, 15, (-203), var24, var40);
//     java.util.List var42 = var0.refreshTicks(var11, var12, var13, var40);
// 
//   }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    boolean var5 = var0.isRangeZoomable();
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    java.text.DateFormat var8 = var6.getDateFormatOverride();
    var6.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var12 = var6.getStandardTickUnits();
    var6.setTickMarkOutsideLength(1.0f);
    int var15 = var0.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var6);
    var0.mapDatasetToRangeAxis(20, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var7 = null;
    java.awt.Rectangle var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    java.awt.geom.AffineTransform var10 = null;
    java.awt.RenderingHints var11 = null;
    java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
    var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
    var1.setTickMarkInsideLength(2.0f);
    var1.clearCategoryLabelToolTips();
    org.jfree.chart.axis.CategoryLabelPositions var17 = var1.getCategoryLabelPositions();
    float var18 = var1.getTickMarkOutsideLength();
    java.awt.Stroke var19 = var1.getAxisLineStroke();
    double var20 = var1.getCategoryMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.2d);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.event.PlotChangeEvent var49 = null;
    var0.notifyListeners(var49);
    org.jfree.chart.axis.AxisLocation var52 = var0.getDomainAxisLocation(2014);
    org.jfree.chart.axis.CategoryAxis var54 = null;
    var0.setDomainAxis(12, var54, true);
    org.jfree.chart.plot.IntervalMarker var60 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var60.setStartValue(0.0d);
    double var63 = var60.getStartValue();
    java.awt.Paint var64 = var60.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var65 = var60.getGradientPaintTransformer();
    var60.setEndValue(9.223372036854776E18d);
    java.lang.Object var68 = var60.clone();
    org.jfree.chart.util.Layer var69 = null;
    boolean var71 = var0.removeDomainMarker(100, (org.jfree.chart.plot.Marker)var60, var69, false);
    var60.setStartValue(3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    org.jfree.chart.plot.IntervalMarker var9 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    org.jfree.chart.util.Layer var10 = null;
    var0.addRangeMarker(10, (org.jfree.chart.plot.Marker)var9, var10, true);
    float var13 = var0.getBackgroundImageAlpha();
    org.jfree.chart.util.Layer var14 = null;
    java.util.Collection var15 = var0.getRangeMarkers(var14);
    org.jfree.chart.annotations.CategoryAnnotation var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    java.lang.String var7 = var0.getLabelURL();
    float var8 = var0.getTickMarkInsideLength();
    double var9 = var0.getUpperMargin();
    org.jfree.chart.axis.CategoryAxis var11 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var16 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var17 = null;
    java.awt.Rectangle var18 = null;
    java.awt.geom.Rectangle2D var19 = null;
    java.awt.geom.AffineTransform var20 = null;
    java.awt.RenderingHints var21 = null;
    java.awt.PaintContext var22 = var16.createContext(var17, var18, var19, var20, var21);
    var11.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var16);
    var0.setTickLabelPaint((java.awt.Paint)var16);
    java.text.DateFormat var25 = null;
    var0.setDateFormatOverride(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    var0.setTickMarkInsideLength(10.0f);
    org.jfree.chart.util.ObjectList var7 = new org.jfree.chart.util.ObjectList();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    var8.setRange(0.0d, 100.0d);
    boolean var13 = var8.isInverted();
    org.jfree.chart.axis.Timeline var14 = var8.getTimeline();
    boolean var15 = var8.isVisible();
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    java.awt.Shape var18 = var16.getLeftArrow();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    var19.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var24 = var23.getRange();
    var19.setRangeWithMargins(var24);
    var16.setRangeWithMargins(var24, true, true);
    var8.setRange(var24);
    boolean var30 = var7.equals((java.lang.Object)var24);
    var0.setRangeWithMargins(var24);
    java.util.TimeZone var32 = var0.getTimeZone();
    boolean var33 = var0.isInverted();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    java.awt.Stroke var5 = var0.getTickMarkStroke();
    var0.configure();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.text.DateFormat var9 = var7.getDateFormatOverride();
    var7.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var13 = var7.getStandardTickUnits();
    var7.setLabelURL("");
    boolean var16 = var7.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    var17.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    var17.setRangeWithMargins(var22);
    var7.setRange(var22);
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    java.text.DateFormat var27 = var25.getDateFormatOverride();
    java.awt.Shape var28 = var25.getUpArrow();
    var7.setDownArrow(var28);
    var0.setDownArrow(var28);
    org.jfree.data.xy.XYDataset var31 = null;
    org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var33 = var32.getRange();
    java.awt.Paint var34 = var32.getTickLabelPaint();
    java.awt.Paint var35 = var32.getTickLabelPaint();
    var32.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    var38.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    var38.setRangeWithMargins(var43);
    org.jfree.chart.renderer.xy.XYItemRenderer var45 = null;
    org.jfree.chart.plot.XYPlot var46 = new org.jfree.chart.plot.XYPlot(var31, (org.jfree.chart.axis.ValueAxis)var32, (org.jfree.chart.axis.ValueAxis)var38, var45);
    org.jfree.chart.renderer.xy.XYItemRenderer var48 = null;
    var46.setRenderer(0, var48);
    boolean var50 = var0.hasListener((java.util.EventListener)var46);
    org.jfree.data.xy.XYDataset var52 = null;
    var46.setDataset(15, var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    boolean var9 = var0.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    var10.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var10.setRangeWithMargins(var15);
    var0.setRange(var15);
    boolean var18 = var0.isPositiveArrowVisible();
    java.awt.Stroke var19 = var0.getAxisLineStroke();
    org.jfree.chart.axis.CategoryAxis var21 = new org.jfree.chart.axis.CategoryAxis("");
    var21.configure();
    float var23 = var21.getMaximumCategoryLabelWidthRatio();
    var21.setCategoryLabelPositionOffset(0);
    var21.setCategoryMargin(1.0d);
    org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var29 = var28.getRange();
    org.jfree.chart.util.RectangleInsets var30 = var28.getLabelInsets();
    org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var32 = var31.getRange();
    org.jfree.chart.axis.TickUnitSource var33 = null;
    var31.setStandardTickUnits(var33);
    org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var36 = var35.getRange();
    java.awt.Paint var37 = var35.getTickLabelPaint();
    var31.setTickLabelPaint(var37);
    var31.resizeRange((-1.0d));
    java.util.Date var41 = var31.getMinimumDate();
    var28.setMinimumDate(var41);
    java.awt.Font var43 = var21.getTickLabelFont((java.lang.Comparable)var41);
    var0.setTickLabelFont(var43);
    var0.setAutoRangeMinimumSize(0.05d);
    boolean var47 = var0.isVerticalTickLabels();
    var0.setVerticalTickLabels(true);
    java.awt.Font var50 = var0.getTickLabelFont();
    java.util.Date var51 = var0.getMinimumDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test186() {}
//   public void test186() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Date var11 = var0.getStart();
//     int var12 = var0.getYear();
//     java.lang.Object var13 = null;
//     boolean var14 = var0.equals(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
// 
//   }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.setRangeCrosshairLockedOnData(false);
    org.jfree.chart.util.SortOrder var8 = var0.getRowRenderingOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test188() {}
//   public void test188() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     long var1 = var0.getSerialIndex();
//     long var2 = var0.getSerialIndex();
//     java.util.Date var3 = var0.getEnd();
//     int var4 = var0.getYear();
//     java.util.Calendar var5 = null;
//     long var6 = var0.getFirstMillisecond(var5);
// 
//   }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var3 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var0);
    var0.setDrawSharedDomainAxis(true);
    java.awt.Paint[] var6 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var7 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var8 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var9.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var12 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var13 = var12.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    org.jfree.chart.util.RectangleInsets var16 = var14.getLabelInsets();
    double var18 = var16.trimWidth((-1.0d));
    double var20 = var16.trimHeight((-6.0d));
    boolean var21 = var13.equals((java.lang.Object)var16);
    var9.setInsets(var16, true);
    java.awt.Stroke var24 = var9.getRangeCrosshairStroke();
    java.awt.Stroke[] var25 = new java.awt.Stroke[] { var24};
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    java.awt.Paint var28 = var26.getTickLabelPaint();
    double var29 = var26.getLowerMargin();
    java.awt.Shape var30 = var26.getLeftArrow();
    java.awt.Stroke var31 = var26.getTickMarkStroke();
    java.awt.Stroke[] var32 = new java.awt.Stroke[] { var31};
    java.awt.Shape[] var33 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var34 = new org.jfree.chart.plot.DefaultDrawingSupplier(var6, var7, var8, var25, var32, var33);
    java.lang.Object var35 = var34.clone();
    java.awt.Shape var36 = var34.getNextShape();
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var34);
    java.awt.Paint var38 = var34.getNextPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    var0.setAutoTickUnitSelection(false);
    boolean var8 = var0.isInverted();
    var0.setLabel("RectangleAnchor.TOP_LEFT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    var15.mapDatasetToDomainAxis(255, 2);
    org.jfree.data.xy.XYDataset var19 = null;
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.awt.Paint var22 = var20.getTickLabelPaint();
    java.awt.Paint var23 = var20.getTickLabelPaint();
    var20.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    var26.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    var26.setRangeWithMargins(var31);
    org.jfree.chart.renderer.xy.XYItemRenderer var33 = null;
    org.jfree.chart.plot.XYPlot var34 = new org.jfree.chart.plot.XYPlot(var19, (org.jfree.chart.axis.ValueAxis)var20, (org.jfree.chart.axis.ValueAxis)var26, var33);
    org.jfree.chart.renderer.xy.XYItemRenderer var36 = null;
    var34.setRenderer(0, var36);
    org.jfree.data.xy.XYDataset var38 = null;
    int var39 = var34.indexOf(var38);
    org.jfree.chart.axis.AxisSpace var40 = null;
    var34.setFixedDomainAxisSpace(var40);
    org.jfree.data.xy.XYDataset var42 = null;
    org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var44 = var43.getRange();
    java.awt.Paint var45 = var43.getTickLabelPaint();
    java.awt.Paint var46 = var43.getTickLabelPaint();
    var43.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var50 = var49.getRange();
    var49.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var53 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var54 = var53.getRange();
    var49.setRangeWithMargins(var54);
    org.jfree.chart.renderer.xy.XYItemRenderer var56 = null;
    org.jfree.chart.plot.XYPlot var57 = new org.jfree.chart.plot.XYPlot(var42, (org.jfree.chart.axis.ValueAxis)var43, (org.jfree.chart.axis.ValueAxis)var49, var56);
    org.jfree.chart.util.RectangleEdge var59 = var57.getDomainAxisEdge(12);
    var57.setDomainCrosshairLockedOnData(true);
    java.lang.String var62 = var57.getPlotType();
    org.jfree.chart.util.Layer var64 = null;
    java.util.Collection var65 = var57.getDomainMarkers(0, var64);
    boolean var66 = var57.isDomainCrosshairVisible();
    java.awt.Paint var67 = var57.getDomainCrosshairPaint();
    var34.setOutlinePaint(var67);
    var15.setRangeCrosshairPaint(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "XY Plot"+ "'", var62.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     int var27 = var15.getIndexOf(var26);
//     java.lang.String var28 = var15.getPlotType();
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     java.awt.Shape var31 = var29.getLeftArrow();
//     var29.setLabelAngle(0.0d);
//     org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var35 = var34.getRange();
//     var34.setRange(0.0d, 100.0d);
//     var34.setLowerBound((-6.0d));
//     var34.setAutoRangeMinimumSize(9.223372036854776E18d);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var43.setRange(0.0d, 100.0d);
//     boolean var48 = var43.isInverted();
//     org.jfree.chart.axis.Timeline var49 = var43.getTimeline();
//     var34.setTimeline(var49);
//     var29.setTimeline(var49);
//     boolean var53 = var29.isHiddenValue(41993L);
//     var15.setDomainAxis((org.jfree.chart.axis.ValueAxis)var29);
//     java.awt.Stroke var55 = var15.getDomainCrosshairStroke();
//     org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
//     var56.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var59 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var60 = var59.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var62 = var61.getRange();
//     org.jfree.chart.util.RectangleInsets var63 = var61.getLabelInsets();
//     double var65 = var63.trimWidth((-1.0d));
//     double var67 = var63.trimHeight((-6.0d));
//     boolean var68 = var60.equals((java.lang.Object)var63);
//     var56.setInsets(var63, true);
//     java.awt.Stroke var71 = var56.getRangeCrosshairStroke();
//     var15.setOutlineStroke(var71);
//     
//     // Checks the contract:  equals-hashcode on var22 and var59
//     assertTrue("Contract failed: equals-hashcode on var22 and var59", var22.equals(var59) ? var22.hashCode() == var59.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var22
//     assertTrue("Contract failed: equals-hashcode on var59 and var22", var59.equals(var22) ? var59.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }


    java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var2 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    var3.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var7 = var6.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
    double var12 = var10.trimWidth((-1.0d));
    double var14 = var10.trimHeight((-6.0d));
    boolean var15 = var7.equals((java.lang.Object)var10);
    var3.setInsets(var10, true);
    java.awt.Stroke var18 = var3.getRangeCrosshairStroke();
    java.awt.Stroke[] var19 = new java.awt.Stroke[] { var18};
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.awt.Paint var22 = var20.getTickLabelPaint();
    double var23 = var20.getLowerMargin();
    java.awt.Shape var24 = var20.getLeftArrow();
    java.awt.Stroke var25 = var20.getTickMarkStroke();
    java.awt.Stroke[] var26 = new java.awt.Stroke[] { var25};
    java.awt.Shape[] var27 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var28 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var1, var2, var19, var26, var27);
    java.awt.Stroke var29 = var28.getNextStroke();
    java.awt.Stroke var30 = var28.getNextOutlineStroke();
    java.awt.Paint var31 = var28.getNextFillPaint();
    java.lang.Object var32 = var28.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }


    org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var3 = var2.getRange();
    java.text.DateFormat var4 = var2.getDateFormatOverride();
    java.awt.Shape var5 = var2.getUpArrow();
    var2.setRange((-7.0d), 100.0d);
    org.jfree.chart.plot.IntervalMarker var11 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var11.setStartValue(0.0d);
    double var14 = var11.getStartValue();
    java.awt.Paint var15 = var11.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var16 = var11.getGradientPaintTransformer();
    java.awt.Color var19 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var20 = null;
    java.awt.Rectangle var21 = null;
    java.awt.geom.Rectangle2D var22 = null;
    java.awt.geom.AffineTransform var23 = null;
    java.awt.RenderingHints var24 = null;
    java.awt.PaintContext var25 = var19.createContext(var20, var21, var22, var23, var24);
    java.awt.image.ColorModel var26 = null;
    java.awt.Rectangle var27 = null;
    java.awt.geom.Rectangle2D var28 = null;
    java.awt.geom.AffineTransform var29 = null;
    java.awt.RenderingHints var30 = null;
    java.awt.PaintContext var31 = var19.createContext(var26, var27, var28, var29, var30);
    var11.setLabelPaint((java.awt.Paint)var19);
    java.awt.Color var33 = var19.darker();
    var2.setLabelPaint((java.awt.Paint)var19);
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
    var35.clearRangeAxes();
    boolean var37 = var35.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var39 = var35.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var40 = var35.getParent();
    org.jfree.chart.plot.IntervalMarker var43 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var43.setStartValue(0.0d);
    double var46 = var43.getStartValue();
    java.awt.Paint var47 = var43.getPaint();
    var35.setOutlinePaint(var47);
    org.jfree.chart.axis.CategoryAxis var49 = var35.getDomainAxis();
    java.awt.Stroke var50 = var35.getDomainGridlineStroke();
    org.jfree.chart.plot.IntervalMarker var53 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var53.setStartValue(0.0d);
    double var56 = var53.getStartValue();
    java.awt.Paint var57 = var53.getPaint();
    org.jfree.data.xy.XYDataset var58 = null;
    org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var60 = var59.getRange();
    java.awt.Paint var61 = var59.getTickLabelPaint();
    java.awt.Paint var62 = var59.getTickLabelPaint();
    var59.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var65 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var66 = var65.getRange();
    var65.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var69 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var70 = var69.getRange();
    var65.setRangeWithMargins(var70);
    org.jfree.chart.renderer.xy.XYItemRenderer var72 = null;
    org.jfree.chart.plot.XYPlot var73 = new org.jfree.chart.plot.XYPlot(var58, (org.jfree.chart.axis.ValueAxis)var59, (org.jfree.chart.axis.ValueAxis)var65, var72);
    org.jfree.chart.util.RectangleInsets var74 = var73.getAxisOffset();
    org.jfree.chart.plot.DefaultDrawingSupplier var75 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Stroke var76 = var75.getNextOutlineStroke();
    var73.setRangeZeroBaselineStroke(var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.IntervalMarker var79 = new org.jfree.chart.plot.IntervalMarker(0.2d, 112.0d, (java.awt.Paint)var19, var50, var57, var76, 100.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var33 = null;
//     var31.notifyListeners(var33);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     double var44 = var42.trimWidth((-1.0d));
//     double var46 = var42.trimHeight((-6.0d));
//     boolean var47 = var39.equals((java.lang.Object)var42);
//     var35.setInsets(var42, true);
//     java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
//     var31.setOutlineStroke(var50);
//     var15.setRangeGridlineStroke(var50);
//     org.jfree.chart.util.RectangleEdge var53 = var15.getRangeAxisEdge();
//     org.jfree.chart.axis.AxisLocation var55 = var15.getDomainAxisLocation(0);
//     org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
//     var56.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var58 = var56.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var60 = null;
//     var56.setRenderer(255, var60);
//     var56.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var63 = var56.getAxisOffset();
//     java.awt.Paint var64 = var56.getDomainGridlinePaint();
//     org.jfree.chart.plot.PlotRenderingInfo var66 = null;
//     org.jfree.chart.plot.CategoryPlot var67 = new org.jfree.chart.plot.CategoryPlot();
//     var67.clearRangeAxes();
//     boolean var69 = var67.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var71 = null;
//     java.awt.geom.Rectangle2D var72 = null;
//     org.jfree.chart.util.RectangleAnchor var73 = null;
//     java.awt.geom.Point2D var74 = org.jfree.chart.util.RectangleAnchor.coordinates(var72, var73);
//     var67.zoomRangeAxes(0.05d, var71, var74);
//     var56.zoomDomainAxes((-6.0d), var66, var74);
//     var15.setQuadrantOrigin(var74);
//     
//     // Checks the contract:  equals-hashcode on var20 and var67
//     assertTrue("Contract failed: equals-hashcode on var20 and var67", var20.equals(var67) ? var20.hashCode() == var67.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var67 and var20
//     assertTrue("Contract failed: equals-hashcode on var67 and var20", var67.equals(var20) ? var67.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var18 = var17.getAlpha();
    java.awt.Stroke var19 = var17.getStroke();
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.text.DateFormat var22 = var20.getDateFormatOverride();
    var20.resizeRange((-1.0d), (-1.0d));
    boolean var26 = var17.equals((java.lang.Object)var20);
    org.jfree.chart.util.Layer var27 = null;
    boolean var28 = var7.removeRangeMarker(20, (org.jfree.chart.plot.Marker)var17, var27);
    org.jfree.chart.util.RectangleEdge var29 = var7.getRangeAxisEdge();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    boolean var9 = var0.isNegativeArrowVisible();
    float var10 = var0.getTickMarkOutsideLength();
    java.lang.String var11 = var0.getLabelToolTip();
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var12.setRange(0.0d, 100.0d);
    boolean var17 = var12.isInverted();
    org.jfree.chart.axis.Timeline var18 = var12.getTimeline();
    var0.setTimeline(var18);
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var24 = var23.getRange();
    var23.setVerticalTickLabels(false);
    org.jfree.data.Range var27 = var23.getDefaultAutoRange();
    var21.setRange(var27);
    var20.setRange(var27, true, false);
    java.util.Date var32 = var20.getMaximumDate();
    java.awt.Shape var33 = var20.getRightArrow();
    var0.setDownArrow(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var0.java2DToValue(100.0d, var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    org.jfree.chart.plot.IntervalMarker var15 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var15.setStartValue(0.0d);
    double var18 = var15.getStartValue();
    java.awt.Paint var19 = var15.getPaint();
    var7.setOutlinePaint(var19);
    var0.setLabelPaint(var19);
    var0.setInverted(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    java.awt.Color var1 = java.awt.Color.getColor("PlotOrientation.VERTICAL");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    float var30 = var15.getBackgroundImageAlpha();
    org.jfree.chart.util.Layer var31 = null;
    java.util.Collection var32 = var15.getDomainMarkers(var31);
    org.jfree.chart.LegendItemCollection var33 = var15.getLegendItems();
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    var34.setRange(0.0d, 100.0d);
    var34.setLowerBound((-6.0d));
    var34.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var43 = var34.getPlot();
    java.awt.Shape var44 = var34.getDownArrow();
    boolean var45 = var34.isPositiveArrowVisible();
    var34.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var49 = var48.getRange();
    java.text.DateFormat var50 = var48.getDateFormatOverride();
    var48.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var54 = var48.getLabelFont();
    org.jfree.data.general.Dataset var55 = null;
    org.jfree.data.general.DatasetChangeEvent var56 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var48, var55);
    org.jfree.chart.axis.Timeline var57 = var48.getTimeline();
    var34.setTimeline(var57);
    java.awt.Paint var59 = var34.getAxisLinePaint();
    boolean var60 = var34.isPositiveArrowVisible();
    org.jfree.data.Range var61 = var15.getDataRange((org.jfree.chart.axis.ValueAxis)var34);
    var34.centerRange(8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.ChartColor var3 = new org.jfree.chart.ChartColor((-16777116), (-100), (-16777116));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    java.awt.Image var14 = null;
    var7.setBackgroundImage(var14);
    boolean var16 = var7.isDomainGridlinesVisible();
    java.awt.Paint[] var17 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var18 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var19 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var23 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var24 = var23.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    org.jfree.chart.util.RectangleInsets var27 = var25.getLabelInsets();
    double var29 = var27.trimWidth((-1.0d));
    double var31 = var27.trimHeight((-6.0d));
    boolean var32 = var24.equals((java.lang.Object)var27);
    var20.setInsets(var27, true);
    java.awt.Stroke var35 = var20.getRangeCrosshairStroke();
    java.awt.Stroke[] var36 = new java.awt.Stroke[] { var35};
    org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var38 = var37.getRange();
    java.awt.Paint var39 = var37.getTickLabelPaint();
    double var40 = var37.getLowerMargin();
    java.awt.Shape var41 = var37.getLeftArrow();
    java.awt.Stroke var42 = var37.getTickMarkStroke();
    java.awt.Stroke[] var43 = new java.awt.Stroke[] { var42};
    java.awt.Shape[] var44 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var45 = new org.jfree.chart.plot.DefaultDrawingSupplier(var17, var18, var19, var36, var43, var44);
    java.lang.Object var46 = var45.clone();
    java.awt.Paint var47 = var45.getNextOutlinePaint();
    var7.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var45);
    java.lang.Object var49 = var45.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     org.jfree.chart.util.RectangleInsets var16 = var1.getLabelInsets();
//     double var18 = var16.calculateBottomInset(0.2d);
//     java.awt.geom.Rectangle2D var19 = null;
//     var16.trim(var19);
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var8 = var7.getAlpha();
    java.awt.Stroke var9 = var7.getStroke();
    var2.setOutlineStroke(var9);
    var2.setStartValue(9.223372036854776E18d);
    org.jfree.chart.util.GradientPaintTransformer var13 = null;
    var2.setGradientPaintTransformer(var13);
    org.jfree.chart.util.GradientPaintTransformer var15 = null;
    var2.setGradientPaintTransformer(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    var15.setRangeCrosshairValue(0.0d, true);
    org.jfree.chart.axis.AxisSpace var34 = var15.getFixedRangeAxisSpace();
    org.jfree.chart.axis.AxisLocation var35 = var15.getRangeAxisLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test206() {}
//   public void test206() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var5 = var0.getParent();
//     org.jfree.chart.plot.IntervalMarker var8 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var8.setStartValue(0.0d);
//     double var11 = var8.getStartValue();
//     java.awt.Paint var12 = var8.getPaint();
//     var0.setOutlinePaint(var12);
//     org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var15 = var14.getRenderer();
//     org.jfree.chart.event.PlotChangeListener var16 = null;
//     var14.addChangeListener(var16);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var18 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var19 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var18};
//     var14.setRenderers(var19);
//     org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
//     var21.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var24 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var25 = var24.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     org.jfree.chart.util.RectangleInsets var28 = var26.getLabelInsets();
//     double var30 = var28.trimWidth((-1.0d));
//     double var32 = var28.trimHeight((-6.0d));
//     boolean var33 = var25.equals((java.lang.Object)var28);
//     var21.setInsets(var28, true);
//     java.awt.Stroke var36 = var21.getRangeCrosshairStroke();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var37 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var38 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var37};
//     var21.setRenderers(var38);
//     var14.setRenderers(var38);
//     var0.setRenderers(var38);
//     
//     // Checks the contract:  equals-hashcode on var0 and var14
//     assertTrue("Contract failed: equals-hashcode on var0 and var14", var0.equals(var14) ? var0.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var0
//     assertTrue("Contract failed: equals-hashcode on var14 and var0", var14.equals(var0) ? var14.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    var0.setRangeWithMargins(var5);
    var0.configure();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }


    org.jfree.chart.plot.CategoryMarker var1 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    java.awt.Paint var2 = var1.getLabelPaint();
    var1.setLabel("UnitType.ABSOLUTE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     var0.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var7 = var0.getAxisOffset();
//     java.awt.Paint var8 = var0.getDomainGridlinePaint();
//     org.jfree.chart.plot.PlotRenderingInfo var10 = null;
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     var11.clearRangeAxes();
//     boolean var13 = var11.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var15 = null;
//     java.awt.geom.Rectangle2D var16 = null;
//     org.jfree.chart.util.RectangleAnchor var17 = null;
//     java.awt.geom.Point2D var18 = org.jfree.chart.util.RectangleAnchor.coordinates(var16, var17);
//     var11.zoomRangeAxes(0.05d, var15, var18);
//     var0.zoomDomainAxes((-6.0d), var10, var18);
//     var0.zoom(0.2d);
// 
//   }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
//     org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var4 = var3.getRange();
//     java.awt.Shape var5 = var3.getLeftArrow();
//     var3.setLabelAngle(0.0d);
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     var8.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var13 = var12.getRange();
//     var8.setRangeWithMargins(var13);
//     java.util.TimeZone var15 = var8.getTimeZone();
//     var3.setTimeZone(var15);
//     org.jfree.chart.axis.TickUnitSource var17 = org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(var15);
//     var0.setTimeZone(var15);
//     org.jfree.chart.axis.TickUnitSource var19 = org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(var15);
//     
//     // Checks the contract:  equals-hashcode on var17 and var19
//     assertTrue("Contract failed: equals-hashcode on var17 and var19", var17.equals(var19) ? var17.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var19 and var17
//     assertTrue("Contract failed: equals-hashcode on var19 and var17", var19.equals(var17) ? var19.hashCode() == var17.hashCode() : true);
// 
//   }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    org.jfree.data.category.CategoryDataset var15 = null;
    var7.setDataset(1, var15);
    java.awt.Paint[] var17 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var18 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var19 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var23 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var24 = var23.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    org.jfree.chart.util.RectangleInsets var27 = var25.getLabelInsets();
    double var29 = var27.trimWidth((-1.0d));
    double var31 = var27.trimHeight((-6.0d));
    boolean var32 = var24.equals((java.lang.Object)var27);
    var20.setInsets(var27, true);
    java.awt.Stroke var35 = var20.getRangeCrosshairStroke();
    java.awt.Stroke[] var36 = new java.awt.Stroke[] { var35};
    org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var38 = var37.getRange();
    java.awt.Paint var39 = var37.getTickLabelPaint();
    double var40 = var37.getLowerMargin();
    java.awt.Shape var41 = var37.getLeftArrow();
    java.awt.Stroke var42 = var37.getTickMarkStroke();
    java.awt.Stroke[] var43 = new java.awt.Stroke[] { var42};
    java.awt.Shape[] var44 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var45 = new org.jfree.chart.plot.DefaultDrawingSupplier(var17, var18, var19, var36, var43, var44);
    java.lang.Object var46 = var45.clone();
    java.awt.Paint var47 = var45.getNextOutlinePaint();
    var7.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var45);
    java.awt.Paint var49 = var45.getNextFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
    int var29 = var0.getIndexOf(var28);
    var0.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.ValueAxis var33 = null;
    var0.setDomainAxis(255, var33, false);
    org.jfree.chart.plot.Marker var36 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var37 = var0.removeRangeMarker(var36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     java.lang.String var20 = var15.getPlotType();
//     var15.clearRangeMarkers(12);
//     org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
//     var23.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
//     var23.setRangeGridlinesVisible(false);
//     java.awt.Color var32 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var33 = null;
//     java.awt.Rectangle var34 = null;
//     java.awt.geom.Rectangle2D var35 = null;
//     java.awt.geom.AffineTransform var36 = null;
//     java.awt.RenderingHints var37 = null;
//     java.awt.PaintContext var38 = var32.createContext(var33, var34, var35, var36, var37);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     org.jfree.chart.axis.TickUnitSource var42 = null;
//     var40.setStandardTickUnits(var42);
//     org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var45 = var44.getRange();
//     java.awt.Paint var46 = var44.getTickLabelPaint();
//     var40.setTickLabelPaint(var46);
//     org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var50 = var49.getAlpha();
//     java.awt.Stroke var51 = var49.getStroke();
//     org.jfree.chart.plot.CategoryMarker var52 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var46, var51);
//     java.awt.Color var56 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var57 = null;
//     java.awt.Rectangle var58 = null;
//     java.awt.geom.Rectangle2D var59 = null;
//     java.awt.geom.AffineTransform var60 = null;
//     java.awt.RenderingHints var61 = null;
//     java.awt.PaintContext var62 = var56.createContext(var57, var58, var59, var60, var61);
//     org.jfree.chart.axis.DateAxis var63 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var64 = var63.getRange();
//     java.awt.Paint var65 = var63.getTickLabelPaint();
//     double var66 = var63.getLowerMargin();
//     java.awt.Shape var67 = var63.getLeftArrow();
//     java.awt.Stroke var68 = var63.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var70 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var32, var51, (java.awt.Paint)var56, var68, 0.8f);
//     var23.setDomainGridlinePaint((java.awt.Paint)var56);
//     var15.setDomainGridlinePaint((java.awt.Paint)var56);
//     org.jfree.chart.axis.AxisLocation var73 = var15.getRangeAxisLocation();
//     org.jfree.chart.plot.ValueMarker var75 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var76 = var75.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var77 = null;
//     var75.notifyListeners(var77);
//     org.jfree.chart.plot.CategoryPlot var79 = new org.jfree.chart.plot.CategoryPlot();
//     var79.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var82 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var83 = var82.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var84 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var85 = var84.getRange();
//     org.jfree.chart.util.RectangleInsets var86 = var84.getLabelInsets();
//     double var88 = var86.trimWidth((-1.0d));
//     double var90 = var86.trimHeight((-6.0d));
//     boolean var91 = var83.equals((java.lang.Object)var86);
//     var79.setInsets(var86, true);
//     java.awt.Stroke var94 = var79.getRangeCrosshairStroke();
//     var75.setOutlineStroke(var94);
//     var15.setDomainZeroBaselineStroke(var94);
//     
//     // Checks the contract:  equals-hashcode on var49 and var82
//     assertTrue("Contract failed: equals-hashcode on var49 and var82", var49.equals(var82) ? var49.hashCode() == var82.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var82 and var49
//     assertTrue("Contract failed: equals-hashcode on var82 and var49", var82.equals(var49) ? var82.hashCode() == var49.hashCode() : true);
// 
//   }

  public void test214() {}
//   public void test214() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var2 = null;
//     var0.setFixedRangeAxisSpace(var2, false);
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.util.RectangleInsets var6 = var5.getAxisOffset();
//     org.jfree.chart.util.SortOrder var7 = var5.getColumnRenderingOrder();
//     var0.setColumnRenderingOrder(var7);
//     
//     // Checks the contract:  equals-hashcode on var0 and var5
//     assertTrue("Contract failed: equals-hashcode on var0 and var5", var0.equals(var5) ? var0.hashCode() == var5.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var5 and var0
//     assertTrue("Contract failed: equals-hashcode on var5 and var0", var5.equals(var0) ? var5.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    double var19 = var7.getRight();
    double var21 = var7.calculateRightOutset((-1.0d));
    org.jfree.chart.util.UnitType var22 = var7.getUnitType();
    double var23 = var7.getBottom();
    double var25 = var7.extendHeight(106.0d);
    double var27 = var7.trimWidth((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 112.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-7.0d));

  }

  public void test216() {}
//   public void test216() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }
// 
// 
//     org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var2.setStartValue(0.0d);
//     double var5 = var2.getStartValue();
//     org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var8 = var7.getAlpha();
//     java.awt.Stroke var9 = var7.getStroke();
//     var2.setOutlineStroke(var9);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     org.jfree.chart.util.RectangleInsets var13 = var11.getLabelInsets();
//     double var15 = var13.trimWidth((-1.0d));
//     double var17 = var13.trimHeight((-6.0d));
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     var18.setVerticalTickLabels(false);
//     var18.resizeRange((-7.0d));
//     boolean var24 = var13.equals((java.lang.Object)var18);
//     org.jfree.data.xy.XYDataset var25 = null;
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     java.awt.Paint var28 = var26.getTickLabelPaint();
//     java.awt.Paint var29 = var26.getTickLabelPaint();
//     var26.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var32.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     var32.setRangeWithMargins(var37);
//     org.jfree.chart.renderer.xy.XYItemRenderer var39 = null;
//     org.jfree.chart.plot.XYPlot var40 = new org.jfree.chart.plot.XYPlot(var25, (org.jfree.chart.axis.ValueAxis)var26, (org.jfree.chart.axis.ValueAxis)var32, var39);
//     org.jfree.chart.renderer.xy.XYItemRenderer var42 = null;
//     var40.setRenderer(0, var42);
//     org.jfree.data.xy.XYDataset var44 = null;
//     var40.setDataset(var44);
//     org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var48 = var47.getAlpha();
//     java.awt.Stroke var49 = var47.getStroke();
//     var40.setDomainZeroBaselineStroke(var49);
//     org.jfree.chart.renderer.xy.XYItemRenderer var51 = null;
//     int var52 = var40.getIndexOf(var51);
//     java.lang.String var53 = var40.getPlotType();
//     org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var55 = var54.getRange();
//     java.awt.Shape var56 = var54.getLeftArrow();
//     var54.setLabelAngle(0.0d);
//     org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var60 = var59.getRange();
//     var59.setRange(0.0d, 100.0d);
//     var59.setLowerBound((-6.0d));
//     var59.setAutoRangeMinimumSize(9.223372036854776E18d);
//     org.jfree.chart.axis.DateAxis var68 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var69 = var68.getRange();
//     var68.setRange(0.0d, 100.0d);
//     boolean var73 = var68.isInverted();
//     org.jfree.chart.axis.Timeline var74 = var68.getTimeline();
//     var59.setTimeline(var74);
//     var54.setTimeline(var74);
//     boolean var78 = var54.isHiddenValue(41993L);
//     var40.setDomainAxis((org.jfree.chart.axis.ValueAxis)var54);
//     java.awt.Stroke var80 = var40.getDomainCrosshairStroke();
//     var18.setAxisLineStroke(var80);
//     boolean var82 = var2.equals((java.lang.Object)var18);
//     
//     // Checks the contract:  equals-hashcode on var7 and var47
//     assertTrue("Contract failed: equals-hashcode on var7 and var47", var7.equals(var47) ? var7.hashCode() == var47.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var7
//     assertTrue("Contract failed: equals-hashcode on var47 and var7", var47.equals(var7) ? var47.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test217() {}
//   public void test217() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var3 = var2.getRange();
//     java.awt.Shape var4 = var2.getLeftArrow();
//     var2.setLabelAngle(0.0d);
//     var2.setNegativeArrowVisible(false);
//     java.lang.String var9 = var2.getLabelURL();
//     int var10 = var0.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var2);
//     java.lang.Object var11 = var2.clone();
//     java.awt.Graphics2D var12 = null;
//     java.awt.geom.Rectangle2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     org.jfree.data.xy.XYDataset var16 = null;
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     java.awt.Paint var20 = var17.getTickLabelPaint();
//     var17.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     var23.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var28 = var27.getRange();
//     var23.setRangeWithMargins(var28);
//     org.jfree.chart.renderer.xy.XYItemRenderer var30 = null;
//     org.jfree.chart.plot.XYPlot var31 = new org.jfree.chart.plot.XYPlot(var16, (org.jfree.chart.axis.ValueAxis)var17, (org.jfree.chart.axis.ValueAxis)var23, var30);
//     org.jfree.chart.renderer.xy.XYItemRenderer var33 = null;
//     var31.setRenderer(0, var33);
//     org.jfree.data.xy.XYDataset var35 = null;
//     var31.setDataset(var35);
//     org.jfree.chart.util.Layer var37 = null;
//     java.util.Collection var38 = var31.getRangeMarkers(var37);
//     var31.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.Layer var42 = null;
//     java.util.Collection var43 = var31.getRangeMarkers((-16777116), var42);
//     var31.setDomainCrosshairValue((-1.0d), true);
//     org.jfree.chart.axis.ValueAxis var47 = var31.getDomainAxis();
//     float var48 = var31.getBackgroundAlpha();
//     org.jfree.chart.util.RectangleEdge var49 = var31.getDomainAxisEdge();
//     org.jfree.chart.plot.PlotRenderingInfo var50 = null;
//     org.jfree.chart.axis.AxisState var51 = var2.draw(var12, 3.0d, var14, var15, var49, var50);
// 
//   }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    double var20 = var7.trimHeight((-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-12.0d));

  }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     org.jfree.chart.axis.AxisSpace var10 = null;
//     var0.setFixedDomainAxisSpace(var10, true);
//     java.lang.Object var13 = var0.clone();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var14 = null;
//     var0.setRenderer(var14);
//     org.jfree.chart.plot.PlotRenderingInfo var18 = null;
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     var19.clearRangeAxes();
//     boolean var21 = var19.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var23 = null;
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.util.RectangleAnchor var25 = null;
//     java.awt.geom.Point2D var26 = org.jfree.chart.util.RectangleAnchor.coordinates(var24, var25);
//     var19.zoomRangeAxes(0.05d, var23, var26);
//     var0.zoomRangeAxes(9.223372036854776E18d, (-12.0d), var18, var26);
//     
//     // Checks the contract:  equals-hashcode on var1 and var19
//     assertTrue("Contract failed: equals-hashcode on var1 and var19", var1.equals(var19) ? var1.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var19 and var1
//     assertTrue("Contract failed: equals-hashcode on var19 and var1", var19.equals(var1) ? var19.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setAutoRangeMinimumSize(9.223372036854776E18d);
    double var9 = var0.getLowerMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.05d);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    org.jfree.data.xy.XYDataset var29 = null;
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    java.awt.Paint var32 = var30.getTickLabelPaint();
    java.awt.Paint var33 = var30.getTickLabelPaint();
    var30.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var37 = var36.getRange();
    var36.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    var36.setRangeWithMargins(var41);
    org.jfree.chart.renderer.xy.XYItemRenderer var43 = null;
    org.jfree.chart.plot.XYPlot var44 = new org.jfree.chart.plot.XYPlot(var29, (org.jfree.chart.axis.ValueAxis)var30, (org.jfree.chart.axis.ValueAxis)var36, var43);
    org.jfree.chart.plot.PlotRenderingInfo var46 = null;
    org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
    var48.clearRangeAxes();
    boolean var50 = var48.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var52 = var48.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var53 = var48.getParent();
    org.jfree.chart.axis.AxisLocation var55 = var48.getDomainAxisLocation((-668));
    var47.setRangeAxisLocation(var55);
    org.jfree.chart.axis.AxisSpace var57 = null;
    var47.setFixedDomainAxisSpace(var57, true);
    org.jfree.chart.plot.PlotRenderingInfo var61 = null;
    java.awt.geom.Rectangle2D var62 = null;
    org.jfree.chart.util.RectangleAnchor var63 = null;
    java.awt.geom.Point2D var64 = org.jfree.chart.util.RectangleAnchor.coordinates(var62, var63);
    var47.zoomDomainAxes(9.223372036854776E18d, var61, var64);
    var44.zoomRangeAxes((-9.223372036854776E18d), var46, var64);
    org.jfree.chart.plot.CategoryMarker var69 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    org.jfree.chart.util.Layer var70 = null;
    boolean var71 = var44.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var69, var70);
    float var72 = var44.getBackgroundAlpha();
    org.jfree.chart.plot.CategoryPlot var73 = new org.jfree.chart.plot.CategoryPlot();
    var73.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var75 = var73.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var77 = null;
    var73.setRenderer(255, var77);
    var73.setRangeCrosshairLockedOnData(false);
    java.awt.Paint var81 = var73.getRangeCrosshairPaint();
    var44.setDomainTickBandPaint(var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setQuadrantPaint((-16777116), var81);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    org.jfree.chart.axis.ValueAxis var30 = var15.getRangeAxis(2014);
    int var31 = var15.getWeight();
    org.jfree.chart.axis.CategoryAxis var33 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var36 = null;
    org.jfree.chart.util.RectangleEdge var37 = null;
    double var38 = var33.getCategoryMiddle(0, (-1), var36, var37);
    org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot();
    var39.clearRangeAxes();
    boolean var41 = var39.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var43 = var39.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var44 = var39.getParent();
    var33.addChangeListener((org.jfree.chart.event.AxisChangeListener)var39);
    boolean var46 = var39.isRangeZoomable();
    var39.setRangeCrosshairVisible(true);
    org.jfree.chart.plot.PlotOrientation var49 = var39.getOrientation();
    int var50 = var39.getDatasetCount();
    org.jfree.chart.plot.DrawingSupplier var51 = var39.getDrawingSupplier();
    var15.setDrawingSupplier(var51);
    var15.setBackgroundAlpha(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.renderer.category.CategoryItemRenderer var19 = var15.getRenderer();
    org.jfree.chart.axis.AxisSpace var20 = null;
    var15.setFixedDomainAxisSpace(var20, false);
    boolean var23 = var15.isDomainGridlinesVisible();
    var15.mapDatasetToDomainAxis(0, 12);
    org.jfree.chart.axis.CategoryAxis var28 = var15.getDomainAxis(12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test224() {}
//   public void test224() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     java.awt.Shape var4 = var1.getUpArrow();
//     boolean var5 = var1.isAutoRange();
//     org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var7 = var6.getRange();
//     var6.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     var6.setRangeWithMargins(var11);
//     java.util.TimeZone var13 = var6.getTimeZone();
//     var1.setTimeZone(var13);
//     org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]", var13);
//     java.awt.Graphics2D var16 = null;
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     int var18 = var17.getWeight();
//     boolean var19 = var17.isRangeCrosshairLockedOnData();
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var23 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var24 = var23.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var26 = var25.getRange();
//     org.jfree.chart.util.RectangleInsets var27 = var25.getLabelInsets();
//     double var29 = var27.trimWidth((-1.0d));
//     double var31 = var27.trimHeight((-6.0d));
//     boolean var32 = var24.equals((java.lang.Object)var27);
//     var20.setInsets(var27, true);
//     org.jfree.chart.LegendItemCollection var35 = var20.getLegendItems();
//     var17.setFixedLegendItems(var35);
//     java.awt.geom.Rectangle2D var37 = null;
//     org.jfree.data.xy.XYDataset var38 = null;
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     java.awt.Paint var41 = var39.getTickLabelPaint();
//     java.awt.Paint var42 = var39.getTickLabelPaint();
//     var39.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var46 = var45.getRange();
//     var45.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     var45.setRangeWithMargins(var50);
//     org.jfree.chart.renderer.xy.XYItemRenderer var52 = null;
//     org.jfree.chart.plot.XYPlot var53 = new org.jfree.chart.plot.XYPlot(var38, (org.jfree.chart.axis.ValueAxis)var39, (org.jfree.chart.axis.ValueAxis)var45, var52);
//     org.jfree.chart.renderer.xy.XYItemRenderer var55 = null;
//     var53.setRenderer(0, var55);
//     org.jfree.data.xy.XYDataset var57 = null;
//     var53.setDataset(var57);
//     org.jfree.chart.plot.ValueMarker var60 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var61 = var60.getAlpha();
//     java.awt.Stroke var62 = var60.getStroke();
//     var53.setDomainZeroBaselineStroke(var62);
//     org.jfree.chart.axis.ValueAxis var65 = var53.getRangeAxisForDataset(0);
//     org.jfree.chart.util.Layer var66 = null;
//     java.util.Collection var67 = var53.getDomainMarkers(var66);
//     org.jfree.chart.util.RectangleEdge var68 = var53.getDomainAxisEdge();
//     org.jfree.chart.axis.AxisSpace var69 = null;
//     org.jfree.chart.axis.AxisSpace var70 = var15.reserveSpace(var16, (org.jfree.chart.plot.Plot)var17, var37, var68, var69);
// 
//   }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Color var4 = java.awt.Color.getColor("", 100);
//     org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var7 = var6.getRange();
//     org.jfree.chart.axis.TickUnitSource var8 = null;
//     var6.setStandardTickUnits(var8);
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     java.awt.Paint var12 = var10.getTickLabelPaint();
//     var6.setTickLabelPaint(var12);
//     org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var16 = var15.getAlpha();
//     java.awt.Stroke var17 = var15.getStroke();
//     org.jfree.chart.plot.CategoryMarker var18 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var12, var17);
//     org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var4, var17);
//     boolean var20 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var19);
//     org.jfree.chart.axis.AxisLocation var21 = var0.getRangeAxisLocation();
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
//     var22.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var25 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var26 = var25.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var28 = var27.getRange();
//     org.jfree.chart.util.RectangleInsets var29 = var27.getLabelInsets();
//     double var31 = var29.trimWidth((-1.0d));
//     double var33 = var29.trimHeight((-6.0d));
//     boolean var34 = var26.equals((java.lang.Object)var29);
//     var22.setInsets(var29, true);
//     org.jfree.chart.LegendItemCollection var37 = var22.getLegendItems();
//     boolean var38 = var22.isSubplot();
//     org.jfree.chart.plot.PlotOrientation var39 = var22.getOrientation();
//     org.jfree.chart.util.RectangleEdge var40 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var21, var39);
//     
//     // Checks the contract:  equals-hashcode on var15 and var25
//     assertTrue("Contract failed: equals-hashcode on var15 and var25", var15.equals(var25) ? var15.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var15
//     assertTrue("Contract failed: equals-hashcode on var25 and var15", var25.equals(var15) ? var25.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.configure();
    java.awt.geom.Rectangle2D var9 = null;
    org.jfree.chart.util.RectangleEdge var10 = null;
    double var11 = var1.getCategoryMiddle(0, 10, var9, var10);
    boolean var13 = var1.equals((java.lang.Object)4.0d);
    var1.clearCategoryLabelToolTips();
    var1.setAxisLineVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     java.awt.Paint var8 = var0.getNoDataMessagePaint();
//     java.awt.Graphics2D var9 = null;
//     java.awt.geom.Rectangle2D var10 = null;
//     org.jfree.data.xy.XYDataset var11 = null;
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var13 = var12.getRange();
//     java.awt.Paint var14 = var12.getTickLabelPaint();
//     java.awt.Paint var15 = var12.getTickLabelPaint();
//     var12.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     var18.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     var18.setRangeWithMargins(var23);
//     org.jfree.chart.renderer.xy.XYItemRenderer var25 = null;
//     org.jfree.chart.plot.XYPlot var26 = new org.jfree.chart.plot.XYPlot(var11, (org.jfree.chart.axis.ValueAxis)var12, (org.jfree.chart.axis.ValueAxis)var18, var25);
//     int var27 = var26.getDomainAxisCount();
//     org.jfree.chart.plot.IntervalMarker var30 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var30.setStartValue(0.0d);
//     double var33 = var30.getStartValue();
//     java.awt.Paint var34 = var30.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var35 = var30.getGradientPaintTransformer();
//     java.awt.Color var38 = java.awt.Color.getColor("", 100);
//     java.awt.image.ColorModel var39 = null;
//     java.awt.Rectangle var40 = null;
//     java.awt.geom.Rectangle2D var41 = null;
//     java.awt.geom.AffineTransform var42 = null;
//     java.awt.RenderingHints var43 = null;
//     java.awt.PaintContext var44 = var38.createContext(var39, var40, var41, var42, var43);
//     java.awt.image.ColorModel var45 = null;
//     java.awt.Rectangle var46 = null;
//     java.awt.geom.Rectangle2D var47 = null;
//     java.awt.geom.AffineTransform var48 = null;
//     java.awt.RenderingHints var49 = null;
//     java.awt.PaintContext var50 = var38.createContext(var45, var46, var47, var48, var49);
//     var30.setLabelPaint((java.awt.Paint)var38);
//     java.awt.Color var52 = var38.darker();
//     var26.setDomainTickBandPaint((java.awt.Paint)var52);
//     var26.setWeight((-16777216));
//     java.awt.geom.Point2D var56 = var26.getQuadrantOrigin();
//     org.jfree.chart.plot.PlotState var57 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var58 = null;
//     var0.draw(var9, var10, var56, var57, var58);
// 
//   }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var6.setStartValue(0.0d);
    double var9 = var6.getStartValue();
    java.awt.Paint var10 = var6.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var11 = var6.getGradientPaintTransformer();
    java.awt.Color var14 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var15 = null;
    java.awt.Rectangle var16 = null;
    java.awt.geom.Rectangle2D var17 = null;
    java.awt.geom.AffineTransform var18 = null;
    java.awt.RenderingHints var19 = null;
    java.awt.PaintContext var20 = var14.createContext(var15, var16, var17, var18, var19);
    java.awt.image.ColorModel var21 = null;
    java.awt.Rectangle var22 = null;
    java.awt.geom.Rectangle2D var23 = null;
    java.awt.geom.AffineTransform var24 = null;
    java.awt.RenderingHints var25 = null;
    java.awt.PaintContext var26 = var14.createContext(var21, var22, var23, var24, var25);
    var6.setLabelPaint((java.awt.Paint)var14);
    java.awt.Color var28 = var14.darker();
    java.awt.Color var32 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var33 = null;
    java.awt.Rectangle var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    java.awt.geom.AffineTransform var36 = null;
    java.awt.RenderingHints var37 = null;
    java.awt.PaintContext var38 = var32.createContext(var33, var34, var35, var36, var37);
    java.awt.color.ColorSpace var39 = var32.getColorSpace();
    java.awt.Color var45 = java.awt.Color.getColor("", 100);
    int var46 = var45.getRed();
    int var47 = var45.getAlpha();
    float[] var51 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var52 = var45.getColorComponents(var51);
    float[] var53 = java.awt.Color.RGBtoHSB(20, 255, 12, var51);
    float[] var54 = var28.getColorComponents(var39, var51);
    java.awt.Color var58 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var59 = null;
    java.awt.Rectangle var60 = null;
    java.awt.geom.Rectangle2D var61 = null;
    java.awt.geom.AffineTransform var62 = null;
    java.awt.RenderingHints var63 = null;
    java.awt.PaintContext var64 = var58.createContext(var59, var60, var61, var62, var63);
    int var65 = var58.getRGB();
    float[] var72 = new float[] { 100.0f, 1.0f, (-1.0f)};
    float[] var73 = java.awt.Color.RGBtoHSB((-1), 100, 100, var72);
    float[] var74 = var58.getRGBColorComponents(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var75 = var3.getComponents(var39, var74);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-668));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var4 = var3.getAlpha();
    java.awt.Stroke var5 = var3.getStroke();
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    java.text.DateFormat var8 = var6.getDateFormatOverride();
    var6.resizeRange((-1.0d), (-1.0d));
    boolean var12 = var3.equals((java.lang.Object)var6);
    org.jfree.chart.util.RectangleInsets var13 = var3.getLabelOffset();
    java.awt.Paint var14 = var3.getOutlinePaint();
    java.awt.Paint var15 = var3.getPaint();
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    var16.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var18 = null;
    var16.setFixedRangeAxisSpace(var18, false);
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var23 = var21.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var25 = null;
    var21.setRenderer(255, var25);
    var21.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var28 = var21.getAxisOffset();
    var16.setInsets(var28);
    org.jfree.chart.renderer.category.CategoryItemRenderer var30 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var31 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var30};
    var16.setRenderers(var31);
    var16.clearRangeAxes();
    org.jfree.chart.plot.IntervalMarker var37 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    var37.setStartValue(0.0d);
    org.jfree.chart.util.Layer var40 = null;
    boolean var41 = var16.removeRangeMarker(20, (org.jfree.chart.plot.Marker)var37, var40);
    org.jfree.chart.plot.IntervalMarker var44 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var44.setStartValue(0.0d);
    double var47 = var44.getStartValue();
    org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var50 = var49.getAlpha();
    java.awt.Stroke var51 = var49.getStroke();
    var44.setOutlineStroke(var51);
    var37.setStroke(var51);
    java.awt.Color var56 = java.awt.Color.getColor("hi!", (-16646144));
    org.jfree.chart.plot.XYPlot var57 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var58 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var59 = var58.getRange();
    java.text.DateFormat var60 = var58.getDateFormatOverride();
    var58.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var64 = var58.getLabelFont();
    org.jfree.data.general.Dataset var65 = null;
    org.jfree.data.general.DatasetChangeEvent var66 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var58, var65);
    var57.datasetChanged(var66);
    boolean var68 = var57.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var70 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var71 = var70.getRange();
    org.jfree.chart.axis.TickUnitSource var72 = null;
    var70.setStandardTickUnits(var72);
    org.jfree.chart.axis.DateAxis var74 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var75 = var74.getRange();
    java.awt.Paint var76 = var74.getTickLabelPaint();
    var70.setTickLabelPaint(var76);
    org.jfree.chart.plot.ValueMarker var79 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var80 = var79.getAlpha();
    java.awt.Stroke var81 = var79.getStroke();
    org.jfree.chart.plot.CategoryMarker var82 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var76, var81);
    var57.setDomainTickBandPaint(var76);
    java.awt.Paint var84 = var57.getRangeZeroBaselinePaint();
    java.awt.Paint var85 = var57.getRangeZeroBaselinePaint();
    org.jfree.data.xy.XYDataset var86 = null;
    var57.setDataset(var86);
    var57.mapDatasetToRangeAxis(2014, 10);
    java.awt.Stroke var91 = var57.getDomainGridlineStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.IntervalMarker var93 = new org.jfree.chart.plot.IntervalMarker(7.0d, (-12.0d), var15, var51, (java.awt.Paint)var56, var91, 10.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
    org.jfree.chart.event.MarkerChangeEvent var33 = null;
    var31.notifyListeners(var33);
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
    var35.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
    double var44 = var42.trimWidth((-1.0d));
    double var46 = var42.trimHeight((-6.0d));
    boolean var47 = var39.equals((java.lang.Object)var42);
    var35.setInsets(var42, true);
    java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
    var31.setOutlineStroke(var50);
    var15.setRangeGridlineStroke(var50);
    org.jfree.chart.util.RectangleEdge var53 = var15.getRangeAxisEdge();
    org.jfree.chart.axis.AxisLocation var55 = var15.getDomainAxisLocation(0);
    org.jfree.chart.plot.DrawingSupplier var56 = var15.getDrawingSupplier();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
    var15.setRangeAxis((org.jfree.chart.axis.ValueAxis)var20);
    org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
    var25.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var27 = var25.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var29 = null;
    var25.setRenderer(255, var29);
    java.awt.Stroke var31 = var25.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var32 = var25.getDataset();
    java.awt.Paint var33 = var25.getNoDataMessagePaint();
    org.jfree.chart.util.Layer var35 = null;
    java.util.Collection var36 = var25.getDomainMarkers(1, var35);
    org.jfree.chart.axis.AxisLocation var37 = var25.getRangeAxisLocation();
    var15.setRangeAxisLocation(10, var37);
    org.jfree.chart.plot.ValueMarker var40 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.event.MarkerChangeListener var41 = null;
    var40.addChangeListener(var41);
    var15.addDomainMarker((org.jfree.chart.plot.Marker)var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var40.setAlpha((-1.0f));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    org.jfree.chart.plot.IntervalMarker var9 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    org.jfree.chart.util.Layer var10 = null;
    var0.addRangeMarker(10, (org.jfree.chart.plot.Marker)var9, var10, true);
    var0.mapDatasetToDomainAxis(20, (-668));
    float var16 = var0.getForegroundAlpha();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToRangeAxis((-16777216), 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0f);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    var15.clearDomainAxes();
    var15.clearAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));

  }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }
// 
// 
//     java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var2 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var7 = var6.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
//     double var12 = var10.trimWidth((-1.0d));
//     double var14 = var10.trimHeight((-6.0d));
//     boolean var15 = var7.equals((java.lang.Object)var10);
//     var3.setInsets(var10, true);
//     java.awt.Stroke var18 = var3.getRangeCrosshairStroke();
//     java.awt.Stroke[] var19 = new java.awt.Stroke[] { var18};
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     java.awt.Paint var22 = var20.getTickLabelPaint();
//     double var23 = var20.getLowerMargin();
//     java.awt.Shape var24 = var20.getLeftArrow();
//     java.awt.Stroke var25 = var20.getTickMarkStroke();
//     java.awt.Stroke[] var26 = new java.awt.Stroke[] { var25};
//     java.awt.Shape[] var27 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var28 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var1, var2, var19, var26, var27);
//     java.awt.Paint[] var29 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Stroke[] var30 = null;
//     java.awt.Paint[] var31 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var32 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var33 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var34 = new org.jfree.chart.plot.CategoryPlot();
//     var34.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var37 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var38 = var37.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     org.jfree.chart.util.RectangleInsets var41 = var39.getLabelInsets();
//     double var43 = var41.trimWidth((-1.0d));
//     double var45 = var41.trimHeight((-6.0d));
//     boolean var46 = var38.equals((java.lang.Object)var41);
//     var34.setInsets(var41, true);
//     java.awt.Stroke var49 = var34.getRangeCrosshairStroke();
//     java.awt.Stroke[] var50 = new java.awt.Stroke[] { var49};
//     org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var52 = var51.getRange();
//     java.awt.Paint var53 = var51.getTickLabelPaint();
//     double var54 = var51.getLowerMargin();
//     java.awt.Shape var55 = var51.getLeftArrow();
//     java.awt.Stroke var56 = var51.getTickMarkStroke();
//     java.awt.Stroke[] var57 = new java.awt.Stroke[] { var56};
//     java.awt.Shape[] var58 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var59 = new org.jfree.chart.plot.DefaultDrawingSupplier(var31, var32, var33, var50, var57, var58);
//     org.jfree.chart.axis.DateAxis var60 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var61 = var60.getRange();
//     java.awt.Paint var62 = var60.getTickLabelPaint();
//     double var63 = var60.getLowerMargin();
//     java.awt.Shape var64 = var60.getLeftArrow();
//     java.awt.Stroke var65 = var60.getTickMarkStroke();
//     org.jfree.chart.axis.DateAxis var66 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var67 = var66.getRange();
//     java.awt.Paint var68 = var66.getTickLabelPaint();
//     double var69 = var66.getLowerMargin();
//     java.awt.Shape var70 = var66.getLeftArrow();
//     var60.setDownArrow(var70);
//     java.awt.Shape[] var72 = new java.awt.Shape[] { var70};
//     org.jfree.chart.plot.DefaultDrawingSupplier var73 = new org.jfree.chart.plot.DefaultDrawingSupplier(var1, var29, var30, var57, var72);
//     
//     // Checks the contract:  equals-hashcode on var3 and var34
//     assertTrue("Contract failed: equals-hashcode on var3 and var34", var3.equals(var34) ? var3.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var3
//     assertTrue("Contract failed: equals-hashcode on var34 and var3", var34.equals(var3) ? var34.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var6 and var37
//     assertTrue("Contract failed: equals-hashcode on var6 and var37", var6.equals(var37) ? var6.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var6
//     assertTrue("Contract failed: equals-hashcode on var37 and var6", var37.equals(var6) ? var37.hashCode() == var6.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var59
//     assertTrue("Contract failed: equals-hashcode on var28 and var59", var28.equals(var59) ? var28.hashCode() == var59.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var28
//     assertTrue("Contract failed: equals-hashcode on var59 and var28", var59.equals(var28) ? var59.hashCode() == var28.hashCode() : true);
// 
//   }

  public void test235() {}
//   public void test235() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     org.jfree.chart.axis.TickUnitSource var2 = null;
//     var0.setStandardTickUnits(var2);
//     org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var5 = var4.getRange();
//     java.awt.Paint var6 = var4.getTickLabelPaint();
//     var0.setTickLabelPaint(var6);
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
//     double var12 = var10.trimWidth(0.0d);
//     org.jfree.chart.plot.ValueMarker var14 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var15 = var14.getAlpha();
//     java.awt.Stroke var16 = var14.getStroke();
//     float var17 = var14.getAlpha();
//     boolean var18 = var10.equals((java.lang.Object)var14);
//     var0.setTickLabelInsets(var10);
//     java.awt.geom.Rectangle2D var21 = null;
//     org.jfree.data.xy.XYDataset var22 = null;
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     java.awt.Paint var25 = var23.getTickLabelPaint();
//     java.awt.Paint var26 = var23.getTickLabelPaint();
//     var23.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     var29.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     var29.setRangeWithMargins(var34);
//     org.jfree.chart.renderer.xy.XYItemRenderer var36 = null;
//     org.jfree.chart.plot.XYPlot var37 = new org.jfree.chart.plot.XYPlot(var22, (org.jfree.chart.axis.ValueAxis)var23, (org.jfree.chart.axis.ValueAxis)var29, var36);
//     org.jfree.chart.util.RectangleEdge var39 = var37.getDomainAxisEdge(12);
//     var37.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
//     var42.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var44 = var42.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var46 = null;
//     var42.setRenderer(255, var46);
//     java.awt.Stroke var48 = var42.getOutlineStroke();
//     var37.setRangeZeroBaselineStroke(var48);
//     org.jfree.chart.plot.Plot var50 = var37.getParent();
//     java.awt.Stroke var51 = var37.getDomainCrosshairStroke();
//     org.jfree.chart.util.RectangleEdge var52 = var37.getDomainAxisEdge();
//     double var53 = var0.java2DToValue(0.0d, var21, var52);
// 
//   }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Paint var8 = var0.getNoDataMessagePaint();
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    var10.clearRangeAxes();
    boolean var12 = var10.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var14 = var10.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var15 = var10.getParent();
    org.jfree.chart.axis.AxisLocation var17 = var10.getDomainAxisLocation((-668));
    var9.setRangeAxisLocation(var17);
    var0.setDomainAxisLocation(var17, true);
    java.lang.String var21 = var0.getPlotType();
    org.jfree.chart.axis.CategoryAxis var23 = var0.getDomainAxis((-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Category Plot"+ "'", var21.equals("Category Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.chart.event.PlotChangeEvent var7 = null;
    var0.notifyListeners(var7);
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    java.text.DateFormat var11 = var9.getDateFormatOverride();
    var9.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var15 = var9.getLabelFont();
    org.jfree.data.general.Dataset var16 = null;
    org.jfree.data.general.DatasetChangeEvent var17 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var9, var16);
    var0.datasetChanged(var17);
    org.jfree.chart.axis.CategoryAxis var20 = new org.jfree.chart.axis.CategoryAxis("");
    var20.configure();
    float var22 = var20.getMaximumCategoryLabelWidthRatio();
    var20.setTickMarkOutsideLength(100.0f);
    var20.setUpperMargin((-7.0d));
    java.util.List var27 = var0.getCategoriesForAxis(var20);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    java.awt.Paint var31 = var29.getTickLabelPaint();
    java.awt.Paint var32 = var29.getTickLabelPaint();
    var20.setTickLabelPaint((java.lang.Comparable)2, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    var7.setRangeCrosshairVisible(true);
    org.jfree.chart.plot.PlotOrientation var17 = var7.getOrientation();
    int var18 = var7.getDatasetCount();
    org.jfree.chart.plot.DrawingSupplier var19 = var7.getDrawingSupplier();
    org.jfree.chart.axis.CategoryAxis var21 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var26 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var27 = null;
    java.awt.Rectangle var28 = null;
    java.awt.geom.Rectangle2D var29 = null;
    java.awt.geom.AffineTransform var30 = null;
    java.awt.RenderingHints var31 = null;
    java.awt.PaintContext var32 = var26.createContext(var27, var28, var29, var30, var31);
    var21.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var26);
    var21.setTickMarkInsideLength(2.0f);
    var21.clearCategoryLabelToolTips();
    org.jfree.chart.axis.CategoryLabelPositions var37 = var21.getCategoryLabelPositions();
    var7.setDomainAxis(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var7 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var8 = null;
    java.awt.Rectangle var9 = null;
    java.awt.geom.Rectangle2D var10 = null;
    java.awt.geom.AffineTransform var11 = null;
    java.awt.RenderingHints var12 = null;
    java.awt.PaintContext var13 = var7.createContext(var8, var9, var10, var11, var12);
    var2.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var7);
    var2.setTickMarkInsideLength(2.0f);
    org.jfree.chart.axis.ValueAxis var17 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer var18 = null;
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot(var0, var2, var17, var18);
    org.jfree.data.time.Day var20 = new org.jfree.data.time.Day();
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.text.DateFormat var23 = var21.getDateFormatOverride();
    var21.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var27 = var21.getLabelFont();
    org.jfree.data.general.Dataset var28 = null;
    org.jfree.data.general.DatasetChangeEvent var29 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var21, var28);
    int var30 = var20.compareTo((java.lang.Object)var21);
    var2.addCategoryLabelToolTip((java.lang.Comparable)var30, "hi!");
    var2.setTickMarkOutsideLength(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    var16.clearRangeAxes();
    boolean var18 = var16.isDomainGridlinesVisible();
    java.awt.Stroke var19 = var16.getRangeGridlineStroke();
    org.jfree.chart.plot.ValueMarker var21 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var22 = var21.getAlpha();
    java.awt.Stroke var23 = var21.getStroke();
    org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var25 = var24.getRange();
    java.text.DateFormat var26 = var24.getDateFormatOverride();
    var24.resizeRange((-1.0d), (-1.0d));
    boolean var30 = var21.equals((java.lang.Object)var24);
    org.jfree.chart.util.RectangleInsets var31 = var21.getLabelOffset();
    java.awt.Paint var32 = var21.getOutlinePaint();
    java.awt.Paint var33 = var21.getPaint();
    java.lang.String var34 = var21.getLabel();
    org.jfree.chart.util.Layer var35 = null;
    var16.addRangeMarker((org.jfree.chart.plot.Marker)var21, var35);
    org.jfree.chart.util.Layer var37 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((org.jfree.chart.plot.Marker)var21, var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test241() {}
//   public void test241() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     var0.setOutlineVisible(false);
//     org.jfree.chart.plot.Plot var17 = var0.getRootPlot();
//     org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var22 = null;
//     org.jfree.chart.util.RectangleEdge var23 = null;
//     double var24 = var19.getCategoryMiddle(10, 1, var22, var23);
//     int var25 = var0.getDomainAxisIndex(var19);
//     org.jfree.chart.plot.IntervalMarker var28 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var28.setStartValue(0.0d);
//     double var31 = var28.getStartValue();
//     org.jfree.chart.plot.ValueMarker var33 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var34 = var33.getAlpha();
//     java.awt.Stroke var35 = var33.getStroke();
//     var28.setOutlineStroke(var35);
//     var28.setStartValue(9.223372036854776E18d);
//     double var39 = var28.getEndValue();
//     double var40 = var28.getStartValue();
//     double var41 = var28.getStartValue();
//     boolean var42 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var28);
//     
//     // Checks the contract:  equals-hashcode on var3 and var33
//     assertTrue("Contract failed: equals-hashcode on var3 and var33", var3.equals(var33) ? var3.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var3
//     assertTrue("Contract failed: equals-hashcode on var33 and var3", var33.equals(var3) ? var33.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    var0.configureDomainAxes();
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    var14.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var18 = var17.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
    double var23 = var21.trimWidth((-1.0d));
    double var25 = var21.trimHeight((-6.0d));
    boolean var26 = var18.equals((java.lang.Object)var21);
    var14.setInsets(var21, true);
    org.jfree.chart.LegendItemCollection var29 = var14.getLegendItems();
    boolean var30 = var14.isSubplot();
    org.jfree.chart.plot.PlotOrientation var31 = var14.getOrientation();
    var0.setOrientation(var31);
    org.jfree.chart.axis.NumberAxis var35 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var35.setAutoRangeIncludesZero(false);
    org.jfree.chart.axis.MarkerAxisBand var38 = null;
    var35.setMarkerBand(var38);
    org.jfree.chart.axis.MarkerAxisBand var40 = var35.getMarkerBand();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxis((-16777116), (org.jfree.chart.axis.ValueAxis)var35, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.event.PlotChangeEvent var49 = null;
    var0.notifyListeners(var49);
    var0.clearDomainMarkers((-1));
    java.awt.Stroke var53 = var0.getRangeGridlineStroke();
    var0.setRangeCrosshairValue(102.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.renderer.category.CategoryItemRenderer var19 = var15.getRenderer();
    org.jfree.chart.axis.AxisSpace var20 = null;
    var15.setFixedDomainAxisSpace(var20, false);
    float var23 = var15.getBackgroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0f);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var3 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var0);
    org.jfree.data.xy.XYDataset var4 = null;
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    java.awt.Paint var7 = var5.getTickLabelPaint();
    java.awt.Paint var8 = var5.getTickLabelPaint();
    var5.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    org.jfree.chart.renderer.xy.XYItemRenderer var18 = null;
    org.jfree.chart.plot.XYPlot var19 = new org.jfree.chart.plot.XYPlot(var4, (org.jfree.chart.axis.ValueAxis)var5, (org.jfree.chart.axis.ValueAxis)var11, var18);
    var19.setRangeGridlinesVisible(true);
    var19.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.event.AxisChangeEvent var24 = null;
    var19.axisChanged(var24);
    var0.setParent((org.jfree.chart.plot.Plot)var19);
    float var27 = var0.getBackgroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1.0f);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    org.jfree.data.xy.XYDataset var24 = null;
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    java.awt.Paint var27 = var25.getTickLabelPaint();
    java.awt.Paint var28 = var25.getTickLabelPaint();
    var25.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var32 = var31.getRange();
    var31.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var36 = var35.getRange();
    var31.setRangeWithMargins(var36);
    org.jfree.chart.renderer.xy.XYItemRenderer var38 = null;
    org.jfree.chart.plot.XYPlot var39 = new org.jfree.chart.plot.XYPlot(var24, (org.jfree.chart.axis.ValueAxis)var25, (org.jfree.chart.axis.ValueAxis)var31, var38);
    org.jfree.chart.plot.PlotRenderingInfo var41 = null;
    org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var43 = new org.jfree.chart.plot.CategoryPlot();
    var43.clearRangeAxes();
    boolean var45 = var43.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var47 = var43.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var48 = var43.getParent();
    org.jfree.chart.axis.AxisLocation var50 = var43.getDomainAxisLocation((-668));
    var42.setRangeAxisLocation(var50);
    org.jfree.chart.axis.AxisSpace var52 = null;
    var42.setFixedDomainAxisSpace(var52, true);
    org.jfree.chart.plot.PlotRenderingInfo var56 = null;
    java.awt.geom.Rectangle2D var57 = null;
    org.jfree.chart.util.RectangleAnchor var58 = null;
    java.awt.geom.Point2D var59 = org.jfree.chart.util.RectangleAnchor.coordinates(var57, var58);
    var42.zoomDomainAxes(9.223372036854776E18d, var56, var59);
    var39.zoomRangeAxes((-9.223372036854776E18d), var41, var59);
    org.jfree.chart.plot.CategoryMarker var64 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    org.jfree.chart.util.Layer var65 = null;
    boolean var66 = var39.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var64, var65);
    java.awt.Paint var67 = var64.getOutlinePaint();
    org.jfree.chart.util.Layer var68 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((-203), (org.jfree.chart.plot.Marker)var64, var68, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getBottom();
    java.awt.geom.Rectangle2D var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var13 = var2.createOutsetRectangle(var10, false, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryLabelPositionOffset(0);
    var1.setMaximumCategoryLabelLines(0);
    java.lang.String var8 = var1.getLabelToolTip();
    java.awt.Paint var10 = var1.getTickLabelPaint((java.lang.Comparable)100.0d);
    org.jfree.chart.plot.Plot var11 = var1.getPlot();
    org.jfree.chart.axis.CategoryAnchor var12 = null;
    java.awt.geom.Rectangle2D var15 = null;
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    var16.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var18 = null;
    var16.setFixedRangeAxisSpace(var18, false);
    boolean var21 = var16.isRangeZoomable();
    var16.setWeight((-1));
    org.jfree.chart.util.RectangleEdge var25 = var16.getDomainAxisEdge(0);
    double var26 = var1.getCategoryJava2DCoordinate(var12, (-203), 10, var15, var25);
    java.awt.Paint var28 = null;
    var1.setTickLabelPaint((java.lang.Comparable)10.0f, var28);
    java.awt.Stroke var30 = var1.getTickMarkStroke();
    var1.setMaximumCategoryLabelWidthRatio(2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    org.jfree.chart.util.Layer var22 = null;
    java.util.Collection var23 = var15.getDomainMarkers(0, var22);
    org.jfree.chart.axis.ValueAxis var25 = var15.getRangeAxis(0);
    var15.mapDatasetToRangeAxis((-668), (-203));
    org.jfree.chart.plot.IntervalMarker var31 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var31.setStartValue(0.0d);
    double var34 = var31.getStartValue();
    org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var37 = var36.getAlpha();
    java.awt.Stroke var38 = var36.getStroke();
    var31.setOutlineStroke(var38);
    var15.setDomainGridlineStroke(var38);
    org.jfree.chart.renderer.xy.XYItemRenderer var42 = null;
    var15.setRenderer(0, var42);
    int var44 = var15.getRangeAxisCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
    var13.clearRangeAxes();
    org.jfree.chart.plot.CategoryMarker var16 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    var13.addDomainMarker(var16);
    var16.setAlpha(0.0f);
    org.jfree.chart.util.Layer var20 = null;
    boolean var21 = var0.removeDomainMarker(255, (org.jfree.chart.plot.Marker)var16, var20);
    org.jfree.chart.renderer.xy.XYItemRenderer var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRenderer((-16777216), var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }


    java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var5 = null;
    java.awt.Rectangle var6 = null;
    java.awt.geom.Rectangle2D var7 = null;
    java.awt.geom.AffineTransform var8 = null;
    java.awt.RenderingHints var9 = null;
    java.awt.PaintContext var10 = var4.createContext(var5, var6, var7, var8, var9);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    org.jfree.chart.axis.TickUnitSource var14 = null;
    var12.setStandardTickUnits(var14);
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    java.awt.Paint var18 = var16.getTickLabelPaint();
    var12.setTickLabelPaint(var18);
    org.jfree.chart.plot.ValueMarker var21 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var22 = var21.getAlpha();
    java.awt.Stroke var23 = var21.getStroke();
    org.jfree.chart.plot.CategoryMarker var24 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var18, var23);
    java.awt.Color var28 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var29 = null;
    java.awt.Rectangle var30 = null;
    java.awt.geom.Rectangle2D var31 = null;
    java.awt.geom.AffineTransform var32 = null;
    java.awt.RenderingHints var33 = null;
    java.awt.PaintContext var34 = var28.createContext(var29, var30, var31, var32, var33);
    org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var36 = var35.getRange();
    java.awt.Paint var37 = var35.getTickLabelPaint();
    double var38 = var35.getLowerMargin();
    java.awt.Shape var39 = var35.getLeftArrow();
    java.awt.Stroke var40 = var35.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var42 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var4, var23, (java.awt.Paint)var28, var40, 0.8f);
    java.lang.Object var43 = var42.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryLabelPositionOffset(0);
    var1.setLabelAngle(0.05d);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var8.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var11 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var12 = var11.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.util.RectangleInsets var15 = var13.getLabelInsets();
    double var17 = var15.trimWidth((-1.0d));
    double var19 = var15.trimHeight((-6.0d));
    boolean var20 = var12.equals((java.lang.Object)var15);
    var8.setInsets(var15, true);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    boolean var25 = var23.isDomainGridlinesVisible();
    boolean var26 = var15.equals((java.lang.Object)var23);
    org.jfree.chart.renderer.category.CategoryItemRenderer var27 = var23.getRenderer();
    org.jfree.chart.util.SortOrder var28 = var23.getColumnRenderingOrder();
    java.awt.Stroke var29 = var23.getRangeGridlineStroke();
    var1.setTickMarkStroke(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    org.jfree.chart.util.Layer var22 = null;
    java.util.Collection var23 = var15.getDomainMarkers(0, var22);
    boolean var24 = var15.isDomainCrosshairVisible();
    java.awt.Paint var25 = var15.getDomainCrosshairPaint();
    java.awt.Paint var26 = var15.getRangeZeroBaselinePaint();
    org.jfree.chart.annotations.XYAnnotation var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var27, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
    var5.setRenderer(255, var9);
    var5.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
    var0.setInsets(var12);
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    var14.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var18 = var17.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
    double var23 = var21.trimWidth((-1.0d));
    double var25 = var21.trimHeight((-6.0d));
    boolean var26 = var18.equals((java.lang.Object)var21);
    var14.setInsets(var21, true);
    org.jfree.chart.LegendItemCollection var29 = var14.getLegendItems();
    var0.setFixedLegendItems(var29);
    org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
    var31.clearRangeAxes();
    boolean var33 = var31.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var37 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var38 = null;
    boolean var39 = var31.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var37, var38);
    org.jfree.chart.plot.IntervalMarker var42 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var42.setStartValue(0.0d);
    double var45 = var42.getStartValue();
    java.awt.Paint var46 = var42.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var47 = var42.getGradientPaintTransformer();
    var42.setEndValue(9.223372036854776E18d);
    java.awt.Color var52 = java.awt.Color.getColor("", 100);
    int var53 = var52.getRed();
    int var54 = var52.getAlpha();
    var42.setPaint((java.awt.Paint)var52);
    var37.setPaint((java.awt.Paint)var52);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var37);
    org.jfree.chart.plot.CategoryPlot var59 = new org.jfree.chart.plot.CategoryPlot();
    var59.clearRangeAxes();
    org.jfree.chart.plot.CategoryMarker var62 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    var59.addDomainMarker(var62);
    var62.setAlpha(0.0f);
    org.jfree.chart.util.Layer var66 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(0, var62, var66);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 255);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
    var15.setDomainCrosshairValue((-1.0d), true);
    org.jfree.chart.axis.CategoryAxis var32 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.util.RectangleEdge var36 = null;
    double var37 = var32.getCategoryMiddle(0, (-1), var35, var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
    var38.clearRangeAxes();
    boolean var40 = var38.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var42 = var38.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var43 = var38.getParent();
    var32.addChangeListener((org.jfree.chart.event.AxisChangeListener)var38);
    boolean var45 = var38.isRangeZoomable();
    var38.setRangeCrosshairValue((-7.0d), false);
    org.jfree.chart.LegendItemCollection var49 = var38.getLegendItems();
    var15.setFixedLegendItems(var49);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var52 = new org.jfree.chart.plot.CategoryPlot();
    var52.clearRangeAxes();
    boolean var54 = var52.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var56 = var52.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var57 = var52.getParent();
    org.jfree.chart.axis.AxisLocation var59 = var52.getDomainAxisLocation((-668));
    var51.setRangeAxisLocation(var59);
    org.jfree.chart.axis.AxisSpace var61 = null;
    var51.setFixedDomainAxisSpace(var61, true);
    org.jfree.chart.plot.PlotRenderingInfo var65 = null;
    java.awt.geom.Rectangle2D var66 = null;
    org.jfree.chart.util.RectangleAnchor var67 = null;
    java.awt.geom.Point2D var68 = org.jfree.chart.util.RectangleAnchor.coordinates(var66, var67);
    var51.zoomDomainAxes(9.223372036854776E18d, var65, var68);
    var15.setQuadrantOrigin(var68);
    var15.configureDomainAxes();
    org.jfree.chart.axis.AxisSpace var72 = null;
    var15.setFixedRangeAxisSpace(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
    var5.setRenderer(255, var9);
    var5.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
    var0.setInsets(var12);
    org.jfree.chart.renderer.category.CategoryItemRenderer var14 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var15 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var14};
    var0.setRenderers(var15);
    var0.setRangeCrosshairValue(2.0d, true);
    var0.clearRangeMarkers(0);
    float var22 = var0.getBackgroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0f);

  }

  public void test257() {}
//   public void test257() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }
// 
// 
//     java.awt.geom.Rectangle2D var0 = null;
//     org.jfree.chart.plot.IntervalMarker var3 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var3.setStartValue(0.0d);
//     double var6 = var3.getStartValue();
//     java.awt.Paint var7 = var3.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var8 = var3.getGradientPaintTransformer();
//     var3.setEndValue(9.223372036854776E18d);
//     java.awt.Paint var11 = var3.getOutlinePaint();
//     org.jfree.chart.util.RectangleAnchor var12 = var3.getLabelAnchor();
//     java.awt.geom.Point2D var13 = org.jfree.chart.util.RectangleAnchor.coordinates(var0, var12);
// 
//   }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var2 = null;
//     var0.setFixedRangeAxisSpace(var2, false);
//     boolean var5 = var0.isRangeZoomable();
//     var0.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var9 = var0.getDomainAxisEdge(0);
//     org.jfree.chart.axis.AxisLocation var10 = var0.getDomainAxisLocation();
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     var11.clearRangeAxes();
//     boolean var13 = var11.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var15 = var11.getRangeAxis((-16646144));
//     org.jfree.chart.axis.AxisLocation var17 = var11.getRangeAxisLocation(2014);
//     org.jfree.chart.util.SortOrder var18 = var11.getRowRenderingOrder();
//     org.jfree.chart.event.ChartChangeEvent var20 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     org.jfree.chart.event.ChartChangeEventType var21 = null;
//     var20.setType(var21);
//     org.jfree.chart.util.ObjectList var23 = new org.jfree.chart.util.ObjectList();
//     org.jfree.chart.event.ChartChangeEvent var25 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     java.lang.String var26 = var25.toString();
//     java.lang.String var27 = var25.toString();
//     int var28 = var23.indexOf((java.lang.Object)var25);
//     org.jfree.chart.axis.CategoryAxis var30 = new org.jfree.chart.axis.CategoryAxis("");
//     var30.configure();
//     float var32 = var30.getMaximumCategoryLabelWidthRatio();
//     var30.setTickMarkOutsideLength(100.0f);
//     var30.setUpperMargin(0.0d);
//     float var37 = var30.getMaximumCategoryLabelWidthRatio();
//     org.jfree.chart.JFreeChart var38 = null;
//     org.jfree.chart.event.ChartChangeEvent var39 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var37, var38);
//     org.jfree.chart.event.ChartChangeEventType var40 = var39.getType();
//     var25.setType(var40);
//     var20.setType(var40);
//     boolean var43 = var18.equals((java.lang.Object)var20);
//     var0.setRowRenderingOrder(var18);
//     org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot();
//     var45.clearRangeAxes();
//     boolean var47 = var45.isDomainGridlinesVisible();
//     java.awt.Stroke var48 = var45.getRangeGridlineStroke();
//     var0.setRangeCrosshairStroke(var48);
//     
//     // Checks the contract:  equals-hashcode on var11 and var45
//     assertTrue("Contract failed: equals-hashcode on var11 and var45", var11.equals(var45) ? var11.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var45 and var11
//     assertTrue("Contract failed: equals-hashcode on var45 and var11", var45.equals(var11) ? var45.hashCode() == var11.hashCode() : true);
// 
//   }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    org.jfree.chart.plot.DefaultDrawingSupplier var0 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Stroke var1 = var0.getNextStroke();
    java.awt.Shape var2 = var0.getNextShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     int var29 = var15.indexOf(var28);
//     float var30 = var15.getBackgroundImageAlpha();
//     var15.setRangeCrosshairLockedOnData(false);
//     var15.setRangeCrosshairLockedOnData(true);
//     org.jfree.chart.util.Layer var35 = null;
//     java.util.Collection var36 = var15.getDomainMarkers(var35);
//     org.jfree.chart.plot.SeriesRenderingOrder var37 = var15.getSeriesRenderingOrder();
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
//     var38.clearRangeAxes();
//     boolean var40 = var38.isDomainGridlinesVisible();
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.text.DateFormat var43 = var41.getDateFormatOverride();
//     var41.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var47 = var41.getLabelFont();
//     var38.setNoDataMessageFont(var47);
//     float var49 = var38.getBackgroundImageAlpha();
//     boolean var50 = var37.equals((java.lang.Object)var38);
//     
//     // Checks the contract:  equals-hashcode on var20 and var38
//     assertTrue("Contract failed: equals-hashcode on var20 and var38", var20.equals(var38) ? var20.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var20
//     assertTrue("Contract failed: equals-hashcode on var38 and var20", var38.equals(var20) ? var38.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.data.xy.XYDataset var6 = null;
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.awt.Paint var9 = var7.getTickLabelPaint();
    java.awt.Paint var10 = var7.getTickLabelPaint();
    var7.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    var13.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    var13.setRangeWithMargins(var18);
    org.jfree.chart.renderer.xy.XYItemRenderer var20 = null;
    org.jfree.chart.plot.XYPlot var21 = new org.jfree.chart.plot.XYPlot(var6, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.axis.ValueAxis)var13, var20);
    org.jfree.chart.renderer.xy.XYItemRenderer var23 = null;
    var21.setRenderer(0, var23);
    org.jfree.data.xy.XYDataset var25 = null;
    var21.setDataset(var25);
    org.jfree.chart.plot.ValueMarker var28 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var29 = var28.getAlpha();
    java.awt.Stroke var30 = var28.getStroke();
    var21.setDomainZeroBaselineStroke(var30);
    org.jfree.chart.axis.ValueAxis var33 = var21.getRangeAxisForDataset(0);
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    java.util.List var36 = null;
    var21.drawDomainTickBands(var34, var35, var36);
    org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var41.setStartValue(0.0d);
    double var44 = var41.getStartValue();
    java.awt.Paint var45 = var41.getPaint();
    org.jfree.chart.util.Layer var46 = null;
    boolean var47 = var21.removeRangeMarker(10, (org.jfree.chart.plot.Marker)var41, var46);
    var0.setPlot((org.jfree.chart.plot.Plot)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAutoRangeMinimumSize((-4.0d), false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("");
    var2.configure();
    float var4 = var2.getMaximumCategoryLabelWidthRatio();
    var2.setCategoryLabelPositionOffset(0);
    org.jfree.chart.util.RectangleInsets var7 = var2.getLabelInsets();
    double var8 = var7.getRight();
    double var10 = var7.calculateRightInset(0.0d);
    var0.setInsets(var7, true);
    java.awt.geom.Rectangle2D var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var16 = var7.createOutsetRectangle(var13, true, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3.0d);

  }

  public void test263() {}
//   public void test263() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
//     var15.setBackgroundImageAlpha(0.0f);
//     java.awt.Stroke var31 = var15.getOutlineStroke();
//     org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
//     var32.clearRangeAxes();
//     boolean var34 = var32.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var38 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var39 = null;
//     boolean var40 = var32.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var38, var39);
//     org.jfree.chart.plot.IntervalMarker var43 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var43.setStartValue(0.0d);
//     double var46 = var43.getStartValue();
//     java.awt.Paint var47 = var43.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var48 = var43.getGradientPaintTransformer();
//     var43.setEndValue(9.223372036854776E18d);
//     java.awt.Color var53 = java.awt.Color.getColor("", 100);
//     int var54 = var53.getRed();
//     int var55 = var53.getAlpha();
//     var43.setPaint((java.awt.Paint)var53);
//     var38.setPaint((java.awt.Paint)var53);
//     boolean var58 = var15.removeDomainMarker((org.jfree.chart.plot.Marker)var38);
//     
//     // Checks the contract:  equals-hashcode on var20 and var32
//     assertTrue("Contract failed: equals-hashcode on var20 and var32", var20.equals(var32) ? var20.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var20
//     assertTrue("Contract failed: equals-hashcode on var32 and var20", var32.equals(var20) ? var32.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(10, 1, var4, var5);
    java.lang.Comparable var7 = null;
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.text.DateFormat var10 = var8.getDateFormatOverride();
    var8.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var14 = var8.getLabelFont();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setTickLabelFont(var7, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    java.awt.Shape var3 = var0.getUpArrow();
    var0.setRange((-7.0d), 100.0d);
    java.awt.Paint var7 = var0.getTickLabelPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
    var5.setRenderer(255, var9);
    var5.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
    var0.setInsets(var12);
    org.jfree.chart.annotations.CategoryAnnotation var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var0.removeAnnotation(var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }


    org.jfree.chart.util.ObjectList var0 = new org.jfree.chart.util.ObjectList();
    int var1 = var0.size();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    var3.setRange(0.0d, 100.0d);
    var3.setLowerBound((-6.0d));
    var3.setAutoRangeMinimumSize(9.223372036854776E18d);
    var3.resizeRange((-7.0d), 0.0d);
    var0.set(100, (java.lang.Object)(-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.plot.PlotRenderingInfo var50 = null;
    java.awt.geom.Rectangle2D var51 = null;
    org.jfree.chart.util.RectangleAnchor var52 = null;
    java.awt.geom.Point2D var53 = org.jfree.chart.util.RectangleAnchor.coordinates(var51, var52);
    var0.zoomDomainAxes(9.223372036854776E18d, var50, var53, false);
    org.jfree.chart.LegendItemCollection var56 = var0.getLegendItems();
    org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
    int var59 = var58.getWeight();
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    java.awt.Shape var63 = var61.getLeftArrow();
    var61.setLabelAngle(0.0d);
    var58.setRangeAxis(255, (org.jfree.chart.axis.ValueAxis)var61);
    org.jfree.chart.axis.AxisLocation var67 = var58.getDomainAxisLocation();
    var0.setRangeAxisLocation(2, var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    java.awt.Color var2 = java.awt.Color.getColor("DatasetRenderingOrder.REVERSE", 1);
    float[] var9 = new float[] { 100.0f, 1.0f, (-1.0f)};
    float[] var10 = java.awt.Color.RGBtoHSB((-1), 100, 100, var9);
    float[] var11 = var2.getRGBColorComponents(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    java.awt.Paint var3 = var0.getTickLabelPaint();
    java.awt.geom.Rectangle2D var5 = null;
    org.jfree.chart.util.RectangleEdge var6 = null;
    double var7 = var0.java2DToValue((-7.0d), var5, var6);
    org.jfree.chart.plot.Plot var8 = var0.getPlot();
    java.util.TimeZone var9 = var0.getTimeZone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-9.223372036854776E18d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    var0.setOutlineVisible(false);
    org.jfree.chart.plot.Plot var17 = var0.getRootPlot();
    org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var22 = null;
    org.jfree.chart.util.RectangleEdge var23 = null;
    double var24 = var19.getCategoryMiddle(10, 1, var22, var23);
    int var25 = var0.getDomainAxisIndex(var19);
    var0.setAnchorValue((-2.0d), true);
    java.awt.Stroke var29 = var0.getRangeCrosshairStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.AxisLocation var28 = var15.getRangeAxisLocation();
    org.jfree.chart.plot.IntervalMarker var31 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var31.setStartValue(0.0d);
    double var34 = var31.getStartValue();
    org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var37 = var36.getAlpha();
    java.awt.Stroke var38 = var36.getStroke();
    var31.setOutlineStroke(var38);
    var31.setStartValue(9.223372036854776E18d);
    double var42 = var31.getEndValue();
    double var43 = var31.getStartValue();
    java.awt.Paint var44 = var31.getOutlinePaint();
    org.jfree.chart.plot.DefaultDrawingSupplier var45 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var47 = var46.getRange();
    var46.setRange(0.0d, 100.0d);
    var46.setLowerBound((-6.0d));
    var46.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var55 = var46.getPlot();
    java.awt.Shape var56 = var46.getDownArrow();
    boolean var57 = var46.isPositiveArrowVisible();
    var46.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var60 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var61 = var60.getRange();
    java.text.DateFormat var62 = var60.getDateFormatOverride();
    var60.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var66 = var60.getLabelFont();
    org.jfree.data.general.Dataset var67 = null;
    org.jfree.data.general.DatasetChangeEvent var68 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var60, var67);
    org.jfree.chart.axis.Timeline var69 = var60.getTimeline();
    var46.setTimeline(var69);
    boolean var71 = var45.equals((java.lang.Object)var69);
    java.awt.Paint var72 = var45.getNextPaint();
    var31.setOutlinePaint(var72);
    boolean var74 = var28.equals((java.lang.Object)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    java.lang.Object var13 = var0.clone();
    boolean var14 = var0.isSubplot();
    org.jfree.chart.plot.IntervalMarker var17 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    java.lang.String var18 = var17.getLabel();
    org.jfree.chart.util.Layer var19 = null;
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var17, var19);
    org.jfree.chart.event.AxisChangeEvent var21 = null;
    var0.axisChanged(var21);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var25 = null;
    var23.setFixedRangeAxisSpace(var25, false);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    var28.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var30 = var28.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var32 = null;
    var28.setRenderer(255, var32);
    var28.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var35 = var28.getAxisOffset();
    var23.setInsets(var35);
    org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
    var37.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var40 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var41 = var40.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    org.jfree.chart.util.RectangleInsets var44 = var42.getLabelInsets();
    double var46 = var44.trimWidth((-1.0d));
    double var48 = var44.trimHeight((-6.0d));
    boolean var49 = var41.equals((java.lang.Object)var44);
    var37.setInsets(var44, true);
    org.jfree.chart.LegendItemCollection var52 = var37.getLegendItems();
    var23.setFixedLegendItems(var52);
    org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var55 = var54.getRange();
    java.awt.Paint var56 = var54.getTickLabelPaint();
    org.jfree.chart.axis.DateAxis var57 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var58 = var57.getRange();
    java.awt.Shape var59 = var57.getLeftArrow();
    var57.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var62 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var63 = var62.getRange();
    var62.setRange(0.0d, 100.0d);
    var62.setLowerBound((-6.0d));
    var62.setAutoRangeMinimumSize(9.223372036854776E18d);
    org.jfree.chart.axis.DateAxis var71 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var72 = var71.getRange();
    var71.setRange(0.0d, 100.0d);
    boolean var76 = var71.isInverted();
    org.jfree.chart.axis.Timeline var77 = var71.getTimeline();
    var62.setTimeline(var77);
    var57.setTimeline(var77);
    var54.setTimeline(var77);
    var23.setRangeAxis((org.jfree.chart.axis.ValueAxis)var54);
    java.text.DateFormat var82 = null;
    var54.setDateFormatOverride(var82);
    org.jfree.chart.util.RectangleInsets var84 = var54.getLabelInsets();
    var0.setInsets(var84);
    java.awt.geom.Rectangle2D var86 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var89 = var84.createOutsetRectangle(var86, false, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test274() {}
//   public void test274() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var0 = new org.jfree.chart.axis.NumberAxis();
//     java.text.NumberFormat var1 = null;
//     var0.setNumberFormatOverride(var1);
//     java.lang.String var3 = var0.getLabelURL();
//     java.awt.geom.Rectangle2D var5 = null;
//     org.jfree.data.xy.XYDataset var6 = null;
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     java.awt.Paint var9 = var7.getTickLabelPaint();
//     java.awt.Paint var10 = var7.getTickLabelPaint();
//     var7.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     var13.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     var13.setRangeWithMargins(var18);
//     org.jfree.chart.renderer.xy.XYItemRenderer var20 = null;
//     org.jfree.chart.plot.XYPlot var21 = new org.jfree.chart.plot.XYPlot(var6, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.axis.ValueAxis)var13, var20);
//     org.jfree.chart.renderer.xy.XYItemRenderer var23 = null;
//     var21.setRenderer(0, var23);
//     org.jfree.data.xy.XYDataset var25 = null;
//     var21.setDataset(var25);
//     org.jfree.chart.plot.ValueMarker var28 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var29 = var28.getAlpha();
//     java.awt.Stroke var30 = var28.getStroke();
//     var21.setDomainZeroBaselineStroke(var30);
//     org.jfree.chart.axis.ValueAxis var33 = var21.getRangeAxisForDataset(0);
//     org.jfree.chart.util.Layer var34 = null;
//     java.util.Collection var35 = var21.getDomainMarkers(var34);
//     org.jfree.chart.util.RectangleEdge var36 = var21.getDomainAxisEdge();
//     double var37 = var0.valueToJava2D((-4.0d), var5, var36);
// 
//   }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     int var11 = var0.getDayOfMonth();
//     int var12 = var0.getYear();
//     long var13 = var0.getLastMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == 20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 1419148799999L);
// 
//   }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    java.lang.Object var2 = var1.clone();
    java.text.NumberFormat var3 = var1.getNumberFormatOverride();
    org.jfree.chart.axis.MarkerAxisBand var4 = var1.getMarkerBand();
    org.jfree.chart.axis.MarkerAxisBand var5 = null;
    var1.setMarkerBand(var5);
    var1.configure();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test277() {}
//   public void test277() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     int var11 = var0.getDayOfMonth();
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var13 = var12.getRange();
//     java.awt.Paint var14 = var12.getTickLabelPaint();
//     double var15 = var12.getLowerMargin();
//     java.awt.Shape var16 = var12.getLeftArrow();
//     java.awt.geom.Rectangle2D var18 = null;
//     org.jfree.chart.util.RectangleEdge var19 = null;
//     double var20 = var12.lengthToJava2D(0.0d, var18, var19);
//     java.awt.Paint var21 = var12.getTickLabelPaint();
//     org.jfree.chart.plot.DefaultDrawingSupplier var22 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     java.awt.Stroke var23 = var22.getNextOutlineStroke();
//     org.jfree.chart.plot.CategoryMarker var24 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)var0, var21, var23);
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     var25.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var27 = var25.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var29 = null;
//     var25.setRenderer(255, var29);
//     var25.setRangeCrosshairLockedOnData(false);
//     java.awt.Paint var33 = var25.getRangeCrosshairPaint();
//     var25.setOutlineVisible(false);
//     org.jfree.chart.axis.AxisSpace var36 = var25.getFixedDomainAxisSpace();
//     boolean var37 = var24.equals((java.lang.Object)var25);
//     org.jfree.chart.plot.PlotRenderingInfo var40 = null;
//     var25.handleClick(2, 12, var40);
// 
//   }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setCategoryLabelPositionOffset(0);
//     var1.setLabelAngle(0.05d);
//     org.jfree.data.time.Day var8 = new org.jfree.data.time.Day();
//     java.lang.String var9 = var8.toString();
//     org.jfree.data.time.RegularTimePeriod var10 = var8.previous();
//     java.awt.Paint var11 = var1.getTickLabelPaint((java.lang.Comparable)var8);
//     var1.clearCategoryLabelToolTips();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0.0f);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "20-December-2014"+ "'", var9.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
// 
//   }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    java.awt.Graphics2D var16 = null;
    java.awt.geom.Rectangle2D var17 = null;
    java.util.List var18 = null;
    var15.drawRangeTickBands(var16, var17, var18);
    org.jfree.chart.axis.CategoryAxis var22 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.util.RectangleEdge var26 = null;
    double var27 = var22.getCategoryMiddle(0, (-1), var25, var26);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    var28.clearRangeAxes();
    boolean var30 = var28.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var32 = var28.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var33 = var28.getParent();
    var22.addChangeListener((org.jfree.chart.event.AxisChangeListener)var28);
    boolean var35 = var28.isRangeZoomable();
    var28.setRangeCrosshairValue((-7.0d), false);
    org.jfree.chart.plot.IntervalMarker var42 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var42.setStartValue(0.0d);
    double var45 = var42.getStartValue();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var48 = var47.getAlpha();
    java.awt.Stroke var49 = var47.getStroke();
    var42.setOutlineStroke(var49);
    var42.setStartValue(9.223372036854776E18d);
    org.jfree.chart.util.GradientPaintTransformer var53 = null;
    var42.setGradientPaintTransformer(var53);
    org.jfree.chart.util.Layer var55 = null;
    boolean var57 = var28.removeRangeMarker((-16646144), (org.jfree.chart.plot.Marker)var42, var55, true);
    org.jfree.chart.util.Layer var58 = null;
    var15.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var42, var58, true);
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    var61.setRange(0.0d, 100.0d);
    var61.setLowerBound((-6.0d));
    var61.setAutoRangeMinimumSize(9.223372036854776E18d);
    org.jfree.chart.axis.DateAxis var70 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var71 = var70.getRange();
    var70.setRange(0.0d, 100.0d);
    boolean var75 = var70.isInverted();
    org.jfree.chart.axis.Timeline var76 = var70.getTimeline();
    var61.setTimeline(var76);
    double var78 = var61.getAutoRangeMinimumSize();
    boolean var79 = var61.isVerticalTickLabels();
    org.jfree.chart.axis.ValueAxis[] var80 = new org.jfree.chart.axis.ValueAxis[] { var61};
    var15.setRangeAxes(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.CategoryMarker var3 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    var0.addDomainMarker(var3);
    var3.setAlpha(0.0f);
    java.lang.Comparable var7 = var3.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 0L+ "'", var7.equals(0L));

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    java.awt.Shape var3 = var0.getUpArrow();
    var0.setRange((-7.0d), 100.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.awt.Shape var9 = var7.getLeftArrow();
    var0.setRightArrow(var9);
    java.lang.Object var11 = var0.clone();
    var0.setUpperBound(0.0d);
    java.lang.String var14 = var0.getLabelToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test282() {}
//   public void test282() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var2 = null;
//     var0.setFixedRangeAxisSpace(var2, false);
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     var5.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
//     var5.setRenderer(255, var9);
//     var5.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
//     var0.setInsets(var12);
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     var0.drawBackgroundImage(var14, var15);
//     var0.zoom((-2.0d));
// 
//   }

  public void test283() {}
//   public void test283() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     java.awt.Paint var8 = var0.getDomainGridlinePaint();
//     org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var12.setStartValue(0.0d);
//     double var15 = var12.getStartValue();
//     java.awt.Paint var16 = var12.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
//     var12.setEndValue(9.223372036854776E18d);
//     java.lang.Object var20 = var12.clone();
//     org.jfree.chart.util.Layer var21 = null;
//     var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
//     org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(0);
//     org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis("");
//     var26.configure();
//     float var28 = var26.getMaximumCategoryLabelWidthRatio();
//     var26.setTickMarkOutsideLength(100.0f);
//     var26.setUpperMargin((-7.0d));
//     org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
//     var33.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var35 = var33.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var37 = null;
//     var33.setRenderer(255, var37);
//     java.awt.Color var43 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var44 = null;
//     java.awt.Rectangle var45 = null;
//     java.awt.geom.Rectangle2D var46 = null;
//     java.awt.geom.AffineTransform var47 = null;
//     java.awt.RenderingHints var48 = null;
//     java.awt.PaintContext var49 = var43.createContext(var44, var45, var46, var47, var48);
//     org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var52 = var51.getRange();
//     org.jfree.chart.axis.TickUnitSource var53 = null;
//     var51.setStandardTickUnits(var53);
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var56 = var55.getRange();
//     java.awt.Paint var57 = var55.getTickLabelPaint();
//     var51.setTickLabelPaint(var57);
//     org.jfree.chart.plot.ValueMarker var60 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var61 = var60.getAlpha();
//     java.awt.Stroke var62 = var60.getStroke();
//     org.jfree.chart.plot.CategoryMarker var63 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var57, var62);
//     java.awt.Color var67 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var68 = null;
//     java.awt.Rectangle var69 = null;
//     java.awt.geom.Rectangle2D var70 = null;
//     java.awt.geom.AffineTransform var71 = null;
//     java.awt.RenderingHints var72 = null;
//     java.awt.PaintContext var73 = var67.createContext(var68, var69, var70, var71, var72);
//     org.jfree.chart.axis.DateAxis var74 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var75 = var74.getRange();
//     java.awt.Paint var76 = var74.getTickLabelPaint();
//     double var77 = var74.getLowerMargin();
//     java.awt.Shape var78 = var74.getLeftArrow();
//     java.awt.Stroke var79 = var74.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var81 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var43, var62, (java.awt.Paint)var67, var79, 0.8f);
//     boolean var82 = var33.removeRangeMarker((org.jfree.chart.plot.Marker)var81);
//     org.jfree.chart.plot.Marker var83 = null;
//     boolean var84 = var33.removeDomainMarker(var83);
//     boolean var85 = var26.hasListener((java.util.EventListener)var33);
//     org.jfree.chart.LegendItemCollection var86 = var33.getLegendItems();
//     var0.setFixedLegendItems(var86);
//     
//     // Checks the contract:  equals-hashcode on var0 and var33
//     assertTrue("Contract failed: equals-hashcode on var0 and var33", var0.equals(var33) ? var0.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var0
//     assertTrue("Contract failed: equals-hashcode on var33 and var0", var33.equals(var0) ? var33.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    java.lang.String var7 = var0.getLabelURL();
    float var8 = var0.getTickMarkInsideLength();
    double var9 = var0.getUpperMargin();
    org.jfree.chart.axis.CategoryAxis var11 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var16 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var17 = null;
    java.awt.Rectangle var18 = null;
    java.awt.geom.Rectangle2D var19 = null;
    java.awt.geom.AffineTransform var20 = null;
    java.awt.RenderingHints var21 = null;
    java.awt.PaintContext var22 = var16.createContext(var17, var18, var19, var20, var21);
    var11.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var16);
    var0.setTickLabelPaint((java.awt.Paint)var16);
    double var25 = var0.getFixedAutoRange();
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    var26.setRange(0.0d, 100.0d);
    boolean var31 = var26.isInverted();
    org.jfree.chart.axis.Timeline var32 = var26.getTimeline();
    java.lang.String var33 = var26.getLabelURL();
    java.util.TimeZone var34 = var26.getTimeZone();
    var0.setTimeZone(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    org.jfree.data.xy.XYDataset var28 = null;
    var0.setDataset(0, var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }


    org.jfree.chart.JFreeChart var1 = null;
    org.jfree.chart.event.ChartChangeEventType var2 = null;
    org.jfree.chart.event.ChartChangeEvent var3 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(-1.0d), var1, var2);
    org.jfree.chart.util.ObjectList var4 = new org.jfree.chart.util.ObjectList();
    org.jfree.chart.event.ChartChangeEvent var6 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    java.lang.String var7 = var6.toString();
    java.lang.String var8 = var6.toString();
    int var9 = var4.indexOf((java.lang.Object)var6);
    org.jfree.chart.axis.CategoryAxis var11 = new org.jfree.chart.axis.CategoryAxis("");
    var11.configure();
    float var13 = var11.getMaximumCategoryLabelWidthRatio();
    var11.setTickMarkOutsideLength(100.0f);
    var11.setUpperMargin(0.0d);
    float var18 = var11.getMaximumCategoryLabelWidthRatio();
    org.jfree.chart.JFreeChart var19 = null;
    org.jfree.chart.event.ChartChangeEvent var20 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var18, var19);
    org.jfree.chart.event.ChartChangeEventType var21 = var20.getType();
    var6.setType(var21);
    org.jfree.chart.JFreeChart var23 = null;
    var6.setChart(var23);
    org.jfree.chart.event.ChartChangeEventType var25 = var6.getType();
    var3.setType(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var7.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var8.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.util.RectangleAnchor var3 = var2.getLabelAnchor();
    java.lang.String var4 = var3.toString();
    org.jfree.data.xy.XYDataset var5 = null;
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    java.awt.Paint var8 = var6.getTickLabelPaint();
    java.awt.Paint var9 = var6.getTickLabelPaint();
    var6.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var12.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    var12.setRangeWithMargins(var17);
    org.jfree.chart.renderer.xy.XYItemRenderer var19 = null;
    org.jfree.chart.plot.XYPlot var20 = new org.jfree.chart.plot.XYPlot(var5, (org.jfree.chart.axis.ValueAxis)var6, (org.jfree.chart.axis.ValueAxis)var12, var19);
    org.jfree.chart.util.RectangleEdge var22 = var20.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var24 = var20.getDataset((-1));
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    org.jfree.chart.util.RectangleInsets var27 = var25.getLabelInsets();
    var20.setRangeAxis((org.jfree.chart.axis.ValueAxis)var25);
    boolean var29 = var3.equals((java.lang.Object)var20);
    java.lang.String var30 = var3.toString();
    java.lang.String var31 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "RectangleAnchor.TOP_LEFT"+ "'", var4.equals("RectangleAnchor.TOP_LEFT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "RectangleAnchor.TOP_LEFT"+ "'", var30.equals("RectangleAnchor.TOP_LEFT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "RectangleAnchor.TOP_LEFT"+ "'", var31.equals("RectangleAnchor.TOP_LEFT"));

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }


    org.jfree.chart.plot.IntervalMarker var5 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var5.setStartValue(0.0d);
    double var8 = var5.getStartValue();
    java.awt.Paint var9 = var5.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var10 = var5.getGradientPaintTransformer();
    java.awt.Color var13 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var14 = null;
    java.awt.Rectangle var15 = null;
    java.awt.geom.Rectangle2D var16 = null;
    java.awt.geom.AffineTransform var17 = null;
    java.awt.RenderingHints var18 = null;
    java.awt.PaintContext var19 = var13.createContext(var14, var15, var16, var17, var18);
    java.awt.image.ColorModel var20 = null;
    java.awt.Rectangle var21 = null;
    java.awt.geom.Rectangle2D var22 = null;
    java.awt.geom.AffineTransform var23 = null;
    java.awt.RenderingHints var24 = null;
    java.awt.PaintContext var25 = var13.createContext(var20, var21, var22, var23, var24);
    var5.setLabelPaint((java.awt.Paint)var13);
    java.awt.Color var27 = var13.darker();
    java.awt.Color var31 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var32 = null;
    java.awt.Rectangle var33 = null;
    java.awt.geom.Rectangle2D var34 = null;
    java.awt.geom.AffineTransform var35 = null;
    java.awt.RenderingHints var36 = null;
    java.awt.PaintContext var37 = var31.createContext(var32, var33, var34, var35, var36);
    java.awt.color.ColorSpace var38 = var31.getColorSpace();
    java.awt.Color var44 = java.awt.Color.getColor("", 100);
    int var45 = var44.getRed();
    int var46 = var44.getAlpha();
    float[] var50 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var51 = var44.getColorComponents(var50);
    float[] var52 = java.awt.Color.RGBtoHSB(20, 255, 12, var50);
    float[] var53 = var27.getColorComponents(var38, var50);
    float[] var54 = java.awt.Color.RGBtoHSB((-16646144), (-100), (-100), var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var18 = var15.getDomainAxisLocation();
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Color var30 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var31 = null;
    java.awt.Rectangle var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    java.awt.geom.AffineTransform var34 = null;
    java.awt.RenderingHints var35 = null;
    java.awt.PaintContext var36 = var30.createContext(var31, var32, var33, var34, var35);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    org.jfree.chart.axis.TickUnitSource var40 = null;
    var38.setStandardTickUnits(var40);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    java.awt.Paint var44 = var42.getTickLabelPaint();
    var38.setTickLabelPaint(var44);
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var48 = var47.getAlpha();
    java.awt.Stroke var49 = var47.getStroke();
    org.jfree.chart.plot.CategoryMarker var50 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var44, var49);
    java.awt.Color var54 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var55 = null;
    java.awt.Rectangle var56 = null;
    java.awt.geom.Rectangle2D var57 = null;
    java.awt.geom.AffineTransform var58 = null;
    java.awt.RenderingHints var59 = null;
    java.awt.PaintContext var60 = var54.createContext(var55, var56, var57, var58, var59);
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    java.awt.Paint var63 = var61.getTickLabelPaint();
    double var64 = var61.getLowerMargin();
    java.awt.Shape var65 = var61.getLeftArrow();
    java.awt.Stroke var66 = var61.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var68 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var30, var49, (java.awt.Paint)var54, var66, 0.8f);
    boolean var69 = var20.removeRangeMarker((org.jfree.chart.plot.Marker)var68);
    org.jfree.chart.plot.Marker var70 = null;
    boolean var71 = var20.removeDomainMarker(var70);
    org.jfree.chart.axis.AxisLocation var72 = var20.getDomainAxisLocation();
    var15.setDomainAxisLocation(0, var72, false);
    org.jfree.chart.axis.ValueAxis var76 = var15.getDomainAxis(12);
    org.jfree.chart.plot.ValueMarker var78 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var79 = var78.getAlpha();
    org.jfree.chart.axis.DateAxis var80 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var81 = var80.getRange();
    org.jfree.chart.axis.TickUnitSource var82 = null;
    var80.setStandardTickUnits(var82);
    org.jfree.chart.axis.DateAxis var84 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var85 = var84.getRange();
    java.awt.Paint var86 = var84.getTickLabelPaint();
    var80.setTickLabelPaint(var86);
    var78.setOutlinePaint(var86);
    java.awt.Stroke var89 = var78.getStroke();
    org.jfree.chart.util.Layer var90 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var78, var90);
    org.jfree.chart.plot.PlotRenderingInfo var93 = null;
    java.awt.geom.Point2D var94 = null;
    var15.zoomRangeAxes((-9.223372036854776E18d), var93, var94);
    org.jfree.chart.axis.ValueAxis var97 = var15.getRangeAxis((-668));
    var15.setForegroundAlpha((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     var27.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var29 = var27.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var31 = null;
//     var27.setRenderer(255, var31);
//     var27.setRangeCrosshairLockedOnData(false);
//     java.awt.Paint var35 = var27.getRangeCrosshairPaint();
//     var0.setDomainGridlinePaint(var35);
//     org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
//     var37.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var39 = var37.getFixedLegendItems();
//     var37.setRangeGridlinesVisible(false);
//     org.jfree.chart.axis.CategoryAxis var43 = new org.jfree.chart.axis.CategoryAxis("");
//     var43.configure();
//     float var45 = var43.getMaximumCategoryLabelWidthRatio();
//     var43.setCategoryLabelPositionOffset(0);
//     var43.setMaximumCategoryLabelLines(0);
//     int var50 = var37.getDomainAxisIndex(var43);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var52 = null;
//     var37.setRenderer(2, var52);
//     org.jfree.chart.plot.ValueMarker var56 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.Layer var57 = null;
//     boolean var59 = var37.removeDomainMarker((-203), (org.jfree.chart.plot.Marker)var56, var57, false);
//     boolean var60 = var0.removeDomainMarker((org.jfree.chart.plot.Marker)var56);
//     
//     // Checks the contract:  equals-hashcode on var22 and var56
//     assertTrue("Contract failed: equals-hashcode on var22 and var56", var22.equals(var56) ? var22.hashCode() == var56.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var56 and var22
//     assertTrue("Contract failed: equals-hashcode on var56 and var22", var56.equals(var22) ? var56.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    org.jfree.chart.util.Layer var22 = null;
    java.util.Collection var23 = var15.getDomainMarkers(0, var22);
    org.jfree.chart.axis.ValueAxis var25 = var15.getRangeAxis(0);
    java.lang.Object var26 = var15.clone();
    org.jfree.data.xy.XYDataset var27 = null;
    org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var29 = var28.getRange();
    java.awt.Paint var30 = var28.getTickLabelPaint();
    java.awt.Paint var31 = var28.getTickLabelPaint();
    var28.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    var34.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    var34.setRangeWithMargins(var39);
    org.jfree.chart.renderer.xy.XYItemRenderer var41 = null;
    org.jfree.chart.plot.XYPlot var42 = new org.jfree.chart.plot.XYPlot(var27, (org.jfree.chart.axis.ValueAxis)var28, (org.jfree.chart.axis.ValueAxis)var34, var41);
    org.jfree.chart.renderer.xy.XYItemRenderer var44 = null;
    var42.setRenderer(0, var44);
    org.jfree.data.xy.XYDataset var46 = null;
    var42.setDataset(var46);
    org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var50 = var49.getAlpha();
    java.awt.Stroke var51 = var49.getStroke();
    var42.setDomainZeroBaselineStroke(var51);
    java.awt.Stroke var53 = var42.getDomainZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var55 = var42.getDomainAxisLocation((-203));
    var15.setDomainAxisLocation(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var18 = var15.getDomainAxisLocation();
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Color var30 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var31 = null;
    java.awt.Rectangle var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    java.awt.geom.AffineTransform var34 = null;
    java.awt.RenderingHints var35 = null;
    java.awt.PaintContext var36 = var30.createContext(var31, var32, var33, var34, var35);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    org.jfree.chart.axis.TickUnitSource var40 = null;
    var38.setStandardTickUnits(var40);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    java.awt.Paint var44 = var42.getTickLabelPaint();
    var38.setTickLabelPaint(var44);
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var48 = var47.getAlpha();
    java.awt.Stroke var49 = var47.getStroke();
    org.jfree.chart.plot.CategoryMarker var50 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var44, var49);
    java.awt.Color var54 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var55 = null;
    java.awt.Rectangle var56 = null;
    java.awt.geom.Rectangle2D var57 = null;
    java.awt.geom.AffineTransform var58 = null;
    java.awt.RenderingHints var59 = null;
    java.awt.PaintContext var60 = var54.createContext(var55, var56, var57, var58, var59);
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    java.awt.Paint var63 = var61.getTickLabelPaint();
    double var64 = var61.getLowerMargin();
    java.awt.Shape var65 = var61.getLeftArrow();
    java.awt.Stroke var66 = var61.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var68 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var30, var49, (java.awt.Paint)var54, var66, 0.8f);
    boolean var69 = var20.removeRangeMarker((org.jfree.chart.plot.Marker)var68);
    org.jfree.chart.plot.Marker var70 = null;
    boolean var71 = var20.removeDomainMarker(var70);
    org.jfree.chart.axis.AxisLocation var72 = var20.getDomainAxisLocation();
    var15.setDomainAxisLocation(0, var72, false);
    org.jfree.chart.axis.ValueAxis var76 = var15.getDomainAxis(12);
    org.jfree.chart.plot.ValueMarker var78 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var79 = var78.getAlpha();
    org.jfree.chart.axis.DateAxis var80 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var81 = var80.getRange();
    org.jfree.chart.axis.TickUnitSource var82 = null;
    var80.setStandardTickUnits(var82);
    org.jfree.chart.axis.DateAxis var84 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var85 = var84.getRange();
    java.awt.Paint var86 = var84.getTickLabelPaint();
    var80.setTickLabelPaint(var86);
    var78.setOutlinePaint(var86);
    java.awt.Stroke var89 = var78.getStroke();
    org.jfree.chart.util.Layer var90 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var78, var90);
    var15.setRangeCrosshairValue(8.0d, true);
    java.awt.Paint var95 = var15.getDomainZeroBaselinePaint();
    var15.setDomainGridlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    org.jfree.chart.util.Layer var22 = null;
    java.util.Collection var23 = var15.getDomainMarkers(0, var22);
    java.awt.Font var24 = var15.getNoDataMessageFont();
    java.awt.Stroke var25 = var15.getRangeGridlineStroke();
    org.jfree.data.xy.XYDataset var26 = null;
    org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var28 = var27.getRange();
    java.awt.Paint var29 = var27.getTickLabelPaint();
    java.awt.Paint var30 = var27.getTickLabelPaint();
    var27.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var34 = var33.getRange();
    var33.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var38 = var37.getRange();
    var33.setRangeWithMargins(var38);
    org.jfree.chart.renderer.xy.XYItemRenderer var40 = null;
    org.jfree.chart.plot.XYPlot var41 = new org.jfree.chart.plot.XYPlot(var26, (org.jfree.chart.axis.ValueAxis)var27, (org.jfree.chart.axis.ValueAxis)var33, var40);
    org.jfree.chart.renderer.xy.XYItemRenderer var43 = null;
    var41.setRenderer(0, var43);
    org.jfree.data.xy.XYDataset var45 = null;
    var41.setDataset(var45);
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var49 = var48.getAlpha();
    java.awt.Stroke var50 = var48.getStroke();
    var41.setDomainZeroBaselineStroke(var50);
    var15.setRangeGridlineStroke(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getRangeZeroBaselinePaint();
    org.jfree.chart.axis.AxisSpace var29 = var0.getFixedDomainAxisSpace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Color var4 = java.awt.Color.getColor("", 100);
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    org.jfree.chart.axis.TickUnitSource var8 = null;
    var6.setStandardTickUnits(var8);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    java.awt.Paint var12 = var10.getTickLabelPaint();
    var6.setTickLabelPaint(var12);
    org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var16 = var15.getAlpha();
    java.awt.Stroke var17 = var15.getStroke();
    org.jfree.chart.plot.CategoryMarker var18 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var12, var17);
    org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var4, var17);
    boolean var20 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var19);
    org.jfree.chart.plot.IntervalMarker var23 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var23.setStartValue(0.0d);
    double var26 = var23.getStartValue();
    java.awt.Paint var27 = var23.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var28 = var23.getGradientPaintTransformer();
    java.awt.Color var31 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var32 = null;
    java.awt.Rectangle var33 = null;
    java.awt.geom.Rectangle2D var34 = null;
    java.awt.geom.AffineTransform var35 = null;
    java.awt.RenderingHints var36 = null;
    java.awt.PaintContext var37 = var31.createContext(var32, var33, var34, var35, var36);
    java.awt.image.ColorModel var38 = null;
    java.awt.Rectangle var39 = null;
    java.awt.geom.Rectangle2D var40 = null;
    java.awt.geom.AffineTransform var41 = null;
    java.awt.RenderingHints var42 = null;
    java.awt.PaintContext var43 = var31.createContext(var38, var39, var40, var41, var42);
    var23.setLabelPaint((java.awt.Paint)var31);
    java.awt.Color var45 = var31.darker();
    var19.setPaint((java.awt.Paint)var31);
    org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var48 = var47.getRange();
    java.text.DateFormat var49 = var47.getDateFormatOverride();
    java.awt.Shape var50 = var47.getUpArrow();
    boolean var51 = var47.isVisible();
    org.jfree.chart.plot.Plot var52 = null;
    var47.setPlot(var52);
    var47.setTickLabelsVisible(true);
    boolean var56 = var19.equals((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setAutoRangeMinimumSize(9.223372036854776E18d);
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    var9.setRange(0.0d, 100.0d);
    boolean var14 = var9.isInverted();
    org.jfree.chart.axis.Timeline var15 = var9.getTimeline();
    var0.setTimeline(var15);
    double var17 = var0.getAutoRangeMinimumSize();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    var18.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var20 = var18.getFixedLegendItems();
    var18.setRangeGridlinesVisible(false);
    java.awt.Color var27 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var28 = null;
    java.awt.Rectangle var29 = null;
    java.awt.geom.Rectangle2D var30 = null;
    java.awt.geom.AffineTransform var31 = null;
    java.awt.RenderingHints var32 = null;
    java.awt.PaintContext var33 = var27.createContext(var28, var29, var30, var31, var32);
    org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var36 = var35.getRange();
    org.jfree.chart.axis.TickUnitSource var37 = null;
    var35.setStandardTickUnits(var37);
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    java.awt.Paint var41 = var39.getTickLabelPaint();
    var35.setTickLabelPaint(var41);
    org.jfree.chart.plot.ValueMarker var44 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var45 = var44.getAlpha();
    java.awt.Stroke var46 = var44.getStroke();
    org.jfree.chart.plot.CategoryMarker var47 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var41, var46);
    java.awt.Color var51 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var52 = null;
    java.awt.Rectangle var53 = null;
    java.awt.geom.Rectangle2D var54 = null;
    java.awt.geom.AffineTransform var55 = null;
    java.awt.RenderingHints var56 = null;
    java.awt.PaintContext var57 = var51.createContext(var52, var53, var54, var55, var56);
    org.jfree.chart.axis.DateAxis var58 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var59 = var58.getRange();
    java.awt.Paint var60 = var58.getTickLabelPaint();
    double var61 = var58.getLowerMargin();
    java.awt.Shape var62 = var58.getLeftArrow();
    java.awt.Stroke var63 = var58.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var65 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var27, var46, (java.awt.Paint)var51, var63, 0.8f);
    var18.setDomainGridlinePaint((java.awt.Paint)var51);
    boolean var67 = var0.equals((java.lang.Object)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }
// 
// 
//     java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var4 = null;
//     java.awt.Rectangle var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     java.awt.geom.AffineTransform var7 = null;
//     java.awt.RenderingHints var8 = null;
//     java.awt.PaintContext var9 = var3.createContext(var4, var5, var6, var7, var8);
//     int var10 = var3.getRGB();
//     float[] var17 = new float[] { 100.0f, 1.0f, (-1.0f)};
//     float[] var18 = java.awt.Color.RGBtoHSB((-1), 100, 100, var17);
//     float[] var19 = var3.getRGBColorComponents(var18);
//     java.awt.color.ColorSpace var20 = null;
//     java.awt.Color var24 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var25 = null;
//     java.awt.Rectangle var26 = null;
//     java.awt.geom.Rectangle2D var27 = null;
//     java.awt.geom.AffineTransform var28 = null;
//     java.awt.RenderingHints var29 = null;
//     java.awt.PaintContext var30 = var24.createContext(var25, var26, var27, var28, var29);
//     int var31 = var24.getRGB();
//     float[] var38 = new float[] { 100.0f, 1.0f, (-1.0f)};
//     float[] var39 = java.awt.Color.RGBtoHSB((-1), 100, 100, var38);
//     float[] var40 = var24.getRGBColorComponents(var39);
//     float[] var41 = var3.getComponents(var20, var40);
// 
//   }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
    var1.clear();
    org.jfree.data.xy.XYDataset var3 = null;
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.awt.Paint var6 = var4.getTickLabelPaint();
    java.awt.Paint var7 = var4.getTickLabelPaint();
    var4.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    var10.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var10.setRangeWithMargins(var15);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    org.jfree.chart.plot.XYPlot var18 = new org.jfree.chart.plot.XYPlot(var3, (org.jfree.chart.axis.ValueAxis)var4, (org.jfree.chart.axis.ValueAxis)var10, var17);
    org.jfree.chart.util.RectangleEdge var20 = var18.getDomainAxisEdge(12);
    var18.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var27 = null;
    var23.setRenderer(255, var27);
    java.awt.Stroke var29 = var23.getOutlineStroke();
    var18.setRangeZeroBaselineStroke(var29);
    org.jfree.chart.LegendItemCollection var31 = var18.getLegendItems();
    var18.setBackgroundImageAlpha(0.0f);
    java.util.List var34 = var18.getAnnotations();
    var18.configureRangeAxes();
    int var36 = var1.indexOf((java.lang.Object)var18);
    org.jfree.chart.renderer.xy.XYItemRenderer var37 = var18.getRenderer();
    org.jfree.chart.util.Layer var38 = null;
    java.util.Collection var39 = var18.getRangeMarkers(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    java.awt.Font var9 = var0.getTickLabelFont();
    boolean var10 = var0.isTickLabelsVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    org.jfree.chart.util.UnitType var10 = var2.getUnitType();
    org.jfree.chart.util.RectangleInsets var15 = new org.jfree.chart.util.RectangleInsets(var10, 1.0d, 2.0d, 8.0d, 9.223372036854776E18d);
    org.jfree.chart.plot.IntervalMarker var18 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var21 = var19.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var23 = null;
    var19.setRenderer(255, var23);
    var19.clearRangeMarkers();
    var18.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var19);
    boolean var27 = var10.equals((java.lang.Object)var19);
    org.jfree.chart.plot.IntervalMarker var31 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    var31.setStartValue(0.0d);
    var31.setEndValue(8.0d);
    org.jfree.chart.util.Layer var36 = null;
    var19.addRangeMarker(12, (org.jfree.chart.plot.Marker)var31, var36);
    org.jfree.chart.plot.Marker var39 = null;
    org.jfree.chart.util.Layer var40 = null;
    boolean var41 = var19.removeDomainMarker(20, var39, var40);
    org.jfree.chart.axis.CategoryAxis var43 = var19.getDomainAxisForDataset(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var3 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var0);
    var0.setDrawSharedDomainAxis(true);
    java.awt.Paint[] var6 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var7 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var8 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var9.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var12 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var13 = var12.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    org.jfree.chart.util.RectangleInsets var16 = var14.getLabelInsets();
    double var18 = var16.trimWidth((-1.0d));
    double var20 = var16.trimHeight((-6.0d));
    boolean var21 = var13.equals((java.lang.Object)var16);
    var9.setInsets(var16, true);
    java.awt.Stroke var24 = var9.getRangeCrosshairStroke();
    java.awt.Stroke[] var25 = new java.awt.Stroke[] { var24};
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    java.awt.Paint var28 = var26.getTickLabelPaint();
    double var29 = var26.getLowerMargin();
    java.awt.Shape var30 = var26.getLeftArrow();
    java.awt.Stroke var31 = var26.getTickMarkStroke();
    java.awt.Stroke[] var32 = new java.awt.Stroke[] { var31};
    java.awt.Shape[] var33 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var34 = new org.jfree.chart.plot.DefaultDrawingSupplier(var6, var7, var8, var25, var32, var33);
    java.lang.Object var35 = var34.clone();
    java.awt.Shape var36 = var34.getNextShape();
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var34);
    var0.setNoDataMessage("CategoryAnchor.MIDDLE");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test302() {}
//   public void test302() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var0.java2DToValue(100.0d, var4, var5);
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.chart.axis.CategoryAxis var10 = new org.jfree.chart.axis.CategoryAxis("");
//     var10.configure();
//     float var12 = var10.getMaximumCategoryLabelWidthRatio();
//     var10.setCategoryLabelPositionOffset(0);
//     var10.setMaximumCategoryLabelLines(0);
//     java.lang.String var17 = var10.getLabelToolTip();
//     java.awt.Paint var19 = var10.getTickLabelPaint((java.lang.Comparable)100.0d);
//     org.jfree.chart.plot.Plot var20 = var10.getPlot();
//     org.jfree.chart.axis.CategoryAnchor var21 = null;
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     var25.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var27 = null;
//     var25.setFixedRangeAxisSpace(var27, false);
//     boolean var30 = var25.isRangeZoomable();
//     var25.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var34 = var25.getDomainAxisEdge(0);
//     double var35 = var10.getCategoryJava2DCoordinate(var21, (-203), 10, var24, var34);
//     double var36 = var0.valueToJava2D(110.0d, var8, var34);
// 
//   }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    java.awt.Stroke var21 = var15.getDomainGridlineStroke();
    org.jfree.chart.axis.AxisSpace var22 = null;
    var15.setFixedRangeAxisSpace(var22, false);
    java.awt.Stroke var25 = var15.getRangeCrosshairStroke();
    org.jfree.chart.util.Layer var27 = null;
    java.util.Collection var28 = var15.getRangeMarkers(0, var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("AxisLocation.BOTTOM_OR_RIGHT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.event.PlotChangeListener var19 = null;
    var15.removeChangeListener(var19);
    org.jfree.data.category.CategoryDataset var21 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer var22 = var15.getRendererForDataset(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var1 = var0.getRenderer();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.data.xy.XYDataset var4 = null;
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    java.awt.Paint var7 = var5.getTickLabelPaint();
    java.awt.Paint var8 = var5.getTickLabelPaint();
    var5.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    org.jfree.chart.renderer.xy.XYItemRenderer var18 = null;
    org.jfree.chart.plot.XYPlot var19 = new org.jfree.chart.plot.XYPlot(var4, (org.jfree.chart.axis.ValueAxis)var5, (org.jfree.chart.axis.ValueAxis)var11, var18);
    org.jfree.chart.plot.PlotRenderingInfo var21 = null;
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    boolean var25 = var23.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var27 = var23.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var28 = var23.getParent();
    org.jfree.chart.axis.AxisLocation var30 = var23.getDomainAxisLocation((-668));
    var22.setRangeAxisLocation(var30);
    org.jfree.chart.axis.AxisSpace var32 = null;
    var22.setFixedDomainAxisSpace(var32, true);
    org.jfree.chart.plot.PlotRenderingInfo var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    org.jfree.chart.util.RectangleAnchor var38 = null;
    java.awt.geom.Point2D var39 = org.jfree.chart.util.RectangleAnchor.coordinates(var37, var38);
    var22.zoomDomainAxes(9.223372036854776E18d, var36, var39);
    var19.zoomRangeAxes((-9.223372036854776E18d), var21, var39);
    org.jfree.chart.plot.CategoryMarker var44 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    org.jfree.chart.util.Layer var45 = null;
    boolean var46 = var19.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var44, var45);
    java.lang.Object var47 = null;
    boolean var48 = var44.equals(var47);
    java.awt.Paint var49 = var44.getLabelPaint();
    boolean var50 = var44.getDrawAsLine();
    org.jfree.chart.util.Layer var51 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(100, var44, var51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test307() {}
//   public void test307() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setTickMarkOutsideLength(100.0f);
//     var1.setUpperMargin((-7.0d));
//     org.jfree.data.time.Day var8 = new org.jfree.data.time.Day();
//     long var9 = var8.getSerialIndex();
//     long var10 = var8.getSerialIndex();
//     java.awt.Font var11 = var1.getTickLabelFont((java.lang.Comparable)var8);
//     org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     var13.clearRangeAxes();
//     boolean var15 = var13.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var17 = var13.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var18 = var13.getParent();
//     org.jfree.chart.axis.AxisLocation var20 = var13.getDomainAxisLocation((-668));
//     var12.setRangeAxisLocation(var20);
//     org.jfree.chart.axis.AxisSpace var22 = null;
//     var12.setFixedDomainAxisSpace(var22, true);
//     java.lang.Object var25 = var12.clone();
//     boolean var26 = var12.isSubplot();
//     org.jfree.chart.plot.IntervalMarker var29 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     java.lang.String var30 = var29.getLabel();
//     org.jfree.chart.util.Layer var31 = null;
//     var12.addRangeMarker((org.jfree.chart.plot.Marker)var29, var31);
//     int var33 = var8.compareTo((java.lang.Object)var29);
//     java.util.Calendar var34 = null;
//     long var35 = var8.getMiddleMillisecond(var34);
// 
//   }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.axis.MarkerAxisBand var4 = null;
    var1.setMarkerBand(var4);
    var1.setAutoRangeStickyZero(false);
    org.jfree.chart.axis.NumberTickUnit var8 = var1.getTickUnit();
    double var9 = var1.getUpperMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.05d);

  }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.awt.Shape var2 = var0.getLeftArrow();
//     org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var4 = var3.getRange();
//     var3.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var3.setRangeWithMargins(var8);
//     var0.setRangeWithMargins(var8, true, true);
//     org.jfree.chart.axis.DateTickUnit var13 = null;
//     java.util.Date var14 = var0.calculateLowestVisibleTickValue(var13);
// 
//   }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    org.jfree.data.category.CategoryDataset var14 = null;
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var22 = null;
    java.awt.Rectangle var23 = null;
    java.awt.geom.Rectangle2D var24 = null;
    java.awt.geom.AffineTransform var25 = null;
    java.awt.RenderingHints var26 = null;
    java.awt.PaintContext var27 = var21.createContext(var22, var23, var24, var25, var26);
    var16.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var21);
    var16.setTickMarkInsideLength(2.0f);
    org.jfree.chart.axis.ValueAxis var31 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer var32 = null;
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot(var14, var16, var31, var32);
    var0.setDomainAxis(2014, var16, true);
    var16.setVisible(false);
    int var38 = var16.getCategoryLabelPositionOffset();
    float var39 = var16.getTickMarkOutsideLength();
    org.jfree.chart.event.AxisChangeListener var40 = null;
    var16.addChangeListener(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2.0f);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var4 = null;
    java.awt.Rectangle var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    java.awt.geom.AffineTransform var7 = null;
    java.awt.RenderingHints var8 = null;
    java.awt.PaintContext var9 = var3.createContext(var4, var5, var6, var7, var8);
    int var10 = var3.getTransparency();
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var3.createContext(var11, var12, var13, var14, var15);
    java.awt.Color var20 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var21 = null;
    java.awt.Rectangle var22 = null;
    java.awt.geom.Rectangle2D var23 = null;
    java.awt.geom.AffineTransform var24 = null;
    java.awt.RenderingHints var25 = null;
    java.awt.PaintContext var26 = var20.createContext(var21, var22, var23, var24, var25);
    java.awt.color.ColorSpace var27 = var20.getColorSpace();
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
    var30.clearRangeAxes();
    boolean var32 = var30.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var36 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var37 = null;
    boolean var38 = var30.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var36, var37);
    org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var41.setStartValue(0.0d);
    double var44 = var41.getStartValue();
    java.awt.Paint var45 = var41.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var46 = var41.getGradientPaintTransformer();
    var41.setEndValue(9.223372036854776E18d);
    java.awt.Color var51 = java.awt.Color.getColor("", 100);
    int var52 = var51.getRed();
    int var53 = var51.getAlpha();
    var41.setPaint((java.awt.Paint)var51);
    var36.setPaint((java.awt.Paint)var51);
    java.awt.Color var56 = java.awt.Color.getColor("XY Plot", var51);
    int var57 = var56.getTransparency();
    java.awt.Color var58 = java.awt.Color.getColor("", var56);
    float[] var65 = new float[] { 100.0f, 1.0f, (-1.0f)};
    float[] var66 = java.awt.Color.RGBtoHSB((-1), 100, 100, var65);
    float[] var67 = var56.getColorComponents(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var68 = var3.getComponents(var27, var67);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.axis.CategoryAxis var20 = new org.jfree.chart.axis.CategoryAxis("");
    var20.configure();
    float var22 = var20.getMaximumCategoryLabelWidthRatio();
    var20.setCategoryMargin(9.223372036854776E18d);
    var20.setLowerMargin((-6.0d));
    int var27 = var15.getDomainAxisIndex(var20);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    var29.setRange(0.0d, 100.0d);
    var29.setLowerBound((-6.0d));
    var29.setLabelURL("hi!");
    var15.setRangeAxis(20, (org.jfree.chart.axis.ValueAxis)var29, true);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Shape var42 = var40.getLeftArrow();
    var29.setLeftArrow(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
    org.jfree.chart.event.MarkerChangeEvent var33 = null;
    var31.notifyListeners(var33);
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
    var35.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
    double var44 = var42.trimWidth((-1.0d));
    double var46 = var42.trimHeight((-6.0d));
    boolean var47 = var39.equals((java.lang.Object)var42);
    var35.setInsets(var42, true);
    java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
    var31.setOutlineStroke(var50);
    var15.setRangeGridlineStroke(var50);
    java.awt.Paint var53 = var15.getRangeCrosshairPaint();
    org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var55 = var54.getRange();
    var54.setRange(0.0d, 100.0d);
    var54.setLowerBound((-6.0d));
    var54.setLabelURL("hi!");
    java.awt.Shape var63 = var54.getRightArrow();
    org.jfree.data.general.Dataset var64 = null;
    org.jfree.data.general.DatasetChangeEvent var65 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var54, var64);
    var15.datasetChanged(var65);
    org.jfree.chart.plot.IntervalMarker var69 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.util.RectangleAnchor var70 = var69.getLabelAnchor();
    org.jfree.chart.util.Layer var71 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var69, var71);
    org.jfree.data.xy.XYDataset var73 = null;
    int var74 = var15.indexOf(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.text.DateFormat var6 = var4.getDateFormatOverride();
    var4.resizeRange((-1.0d), (-1.0d));
    boolean var10 = var1.equals((java.lang.Object)var4);
    java.awt.Paint var11 = var1.getPaint();
    java.awt.Stroke var12 = var1.getStroke();
    var1.setAlpha(1.0f);
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var19 = null;
    org.jfree.chart.util.RectangleEdge var20 = null;
    double var21 = var16.getCategoryMiddle(0, (-1), var19, var20);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
    var22.clearRangeAxes();
    boolean var24 = var22.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var26 = var22.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var27 = var22.getParent();
    var16.addChangeListener((org.jfree.chart.event.AxisChangeListener)var22);
    boolean var29 = var22.isRangeZoomable();
    java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var35 = null;
    java.awt.Rectangle var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    java.awt.geom.AffineTransform var38 = null;
    java.awt.RenderingHints var39 = null;
    java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    org.jfree.chart.axis.TickUnitSource var44 = null;
    var42.setStandardTickUnits(var44);
    org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var47 = var46.getRange();
    java.awt.Paint var48 = var46.getTickLabelPaint();
    var42.setTickLabelPaint(var48);
    org.jfree.chart.plot.ValueMarker var51 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var52 = var51.getAlpha();
    java.awt.Stroke var53 = var51.getStroke();
    org.jfree.chart.plot.CategoryMarker var54 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var48, var53);
    java.awt.Color var58 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var59 = null;
    java.awt.Rectangle var60 = null;
    java.awt.geom.Rectangle2D var61 = null;
    java.awt.geom.AffineTransform var62 = null;
    java.awt.RenderingHints var63 = null;
    java.awt.PaintContext var64 = var58.createContext(var59, var60, var61, var62, var63);
    org.jfree.chart.axis.DateAxis var65 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var66 = var65.getRange();
    java.awt.Paint var67 = var65.getTickLabelPaint();
    double var68 = var65.getLowerMargin();
    java.awt.Shape var69 = var65.getLeftArrow();
    java.awt.Stroke var70 = var65.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var72 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var34, var53, (java.awt.Paint)var58, var70, 0.8f);
    var22.setDomainGridlineStroke(var70);
    var1.setStroke(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
    var5.setRenderer(255, var9);
    var5.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
    var0.setInsets(var12);
    org.jfree.chart.renderer.category.CategoryItemRenderer var14 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var15 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var14};
    var0.setRenderers(var15);
    var0.clearRangeAxes();
    org.jfree.chart.plot.IntervalMarker var21 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    var21.setStartValue(0.0d);
    org.jfree.chart.util.Layer var24 = null;
    boolean var25 = var0.removeRangeMarker(20, (org.jfree.chart.plot.Marker)var21, var24);
    org.jfree.chart.event.PlotChangeListener var26 = null;
    var0.addChangeListener(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.LegendItemCollection var5 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var6 = null;
    var0.setRenderer(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryLabelPositionOffset(0);
    var1.setLabelAngle(0.05d);
    var1.setCategoryMargin(3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    java.lang.Object var2 = var1.clone();
    var1.configure();
    boolean var4 = var1.getAutoRangeStickyZero();
    var1.setFixedAutoRange(0.05d);
    org.jfree.data.RangeType var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setRangeType(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    int var20 = var15.indexOf(var19);
    org.jfree.chart.renderer.xy.XYItemRenderer var21 = var15.getRenderer();
    org.jfree.chart.annotations.XYAnnotation var22 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var24 = var15.removeAnnotation(var22, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    int var1 = var0.getWeight();
    boolean var2 = var0.isRangeCrosshairLockedOnData();
    var0.setAnchorValue(0.0d);
    org.jfree.chart.axis.AxisLocation var5 = var0.getDomainAxisLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    java.lang.Object var2 = var1.clone();
    var1.configure();
    boolean var4 = var1.getAutoRangeStickyZero();
    var1.resizeRange(4.0d, 0.0d);
    boolean var8 = var1.isAxisLineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.setRangeCrosshairLockedOnData(false);
    org.jfree.chart.axis.ValueAxis var8 = var0.getRangeAxis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test323() {}
//   public void test323() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     java.awt.Image var8 = var0.getBackgroundImage();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var10 = var0.getRenderer((-668));
//     org.jfree.chart.plot.PlotRenderingInfo var12 = null;
//     org.jfree.data.xy.XYDataset var13 = null;
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     java.awt.Paint var16 = var14.getTickLabelPaint();
//     java.awt.Paint var17 = var14.getTickLabelPaint();
//     var14.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     var20.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var25 = var24.getRange();
//     var20.setRangeWithMargins(var25);
//     org.jfree.chart.renderer.xy.XYItemRenderer var27 = null;
//     org.jfree.chart.plot.XYPlot var28 = new org.jfree.chart.plot.XYPlot(var13, (org.jfree.chart.axis.ValueAxis)var14, (org.jfree.chart.axis.ValueAxis)var20, var27);
//     org.jfree.chart.renderer.xy.XYItemRenderer var30 = null;
//     var28.setRenderer(0, var30);
//     org.jfree.data.xy.XYDataset var32 = null;
//     var28.setDataset(var32);
//     org.jfree.chart.util.Layer var34 = null;
//     java.util.Collection var35 = var28.getRangeMarkers(var34);
//     var28.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.Layer var39 = null;
//     java.util.Collection var40 = var28.getRangeMarkers((-16777116), var39);
//     var28.setDomainCrosshairValue((-1.0d), true);
//     org.jfree.chart.axis.CategoryAxis var45 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var48 = null;
//     org.jfree.chart.util.RectangleEdge var49 = null;
//     double var50 = var45.getCategoryMiddle(0, (-1), var48, var49);
//     org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
//     var51.clearRangeAxes();
//     boolean var53 = var51.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var55 = var51.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var56 = var51.getParent();
//     var45.addChangeListener((org.jfree.chart.event.AxisChangeListener)var51);
//     boolean var58 = var51.isRangeZoomable();
//     var51.setRangeCrosshairValue((-7.0d), false);
//     org.jfree.chart.LegendItemCollection var62 = var51.getLegendItems();
//     var28.setFixedLegendItems(var62);
//     org.jfree.chart.plot.CategoryPlot var64 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var65 = new org.jfree.chart.plot.CategoryPlot();
//     var65.clearRangeAxes();
//     boolean var67 = var65.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var69 = var65.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var70 = var65.getParent();
//     org.jfree.chart.axis.AxisLocation var72 = var65.getDomainAxisLocation((-668));
//     var64.setRangeAxisLocation(var72);
//     org.jfree.chart.axis.AxisSpace var74 = null;
//     var64.setFixedDomainAxisSpace(var74, true);
//     org.jfree.chart.plot.PlotRenderingInfo var78 = null;
//     java.awt.geom.Rectangle2D var79 = null;
//     org.jfree.chart.util.RectangleAnchor var80 = null;
//     java.awt.geom.Point2D var81 = org.jfree.chart.util.RectangleAnchor.coordinates(var79, var80);
//     var64.zoomDomainAxes(9.223372036854776E18d, var78, var81);
//     var28.setQuadrantOrigin(var81);
//     var0.zoomRangeAxes(102.0d, var12, var81, false);
//     
//     // Checks the contract:  equals-hashcode on var0 and var65
//     assertTrue("Contract failed: equals-hashcode on var0 and var65", var0.equals(var65) ? var0.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var0
//     assertTrue("Contract failed: equals-hashcode on var65 and var0", var65.equals(var0) ? var65.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var3 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var0);
    org.jfree.chart.event.ChartChangeEventType var4 = var3.getType();
    org.jfree.chart.event.ChartChangeEventType var5 = var3.getType();
    org.jfree.chart.plot.Plot var6 = var3.getPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.chart.axis.AxisLocation var20 = null;
    var15.setDomainAxisLocation(10, var20);
    var15.setRangeZeroBaselineVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test326() {}
//   public void test326() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.chart.event.PlotChangeEvent var7 = null;
//     var0.notifyListeners(var7);
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     java.text.DateFormat var11 = var9.getDateFormatOverride();
//     var9.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var15 = var9.getLabelFont();
//     org.jfree.data.general.Dataset var16 = null;
//     org.jfree.data.general.DatasetChangeEvent var17 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var9, var16);
//     var0.datasetChanged(var17);
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     java.awt.Shape var21 = var19.getLeftArrow();
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     var22.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     var22.setRangeWithMargins(var27);
//     var19.setRangeWithMargins(var27, true, true);
//     boolean var32 = var0.equals((java.lang.Object)var27);
//     org.jfree.data.xy.XYDataset var33 = null;
//     org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var35 = var34.getRange();
//     java.awt.Paint var36 = var34.getTickLabelPaint();
//     java.awt.Paint var37 = var34.getTickLabelPaint();
//     var34.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     var40.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var45 = var44.getRange();
//     var40.setRangeWithMargins(var45);
//     org.jfree.chart.renderer.xy.XYItemRenderer var47 = null;
//     org.jfree.chart.plot.XYPlot var48 = new org.jfree.chart.plot.XYPlot(var33, (org.jfree.chart.axis.ValueAxis)var34, (org.jfree.chart.axis.ValueAxis)var40, var47);
//     org.jfree.chart.util.RectangleEdge var50 = var48.getDomainAxisEdge(12);
//     var48.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var53 = new org.jfree.chart.plot.CategoryPlot();
//     var53.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var55 = var53.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var57 = null;
//     var53.setRenderer(255, var57);
//     java.awt.Stroke var59 = var53.getOutlineStroke();
//     var48.setRangeZeroBaselineStroke(var59);
//     org.jfree.chart.LegendItemCollection var61 = var48.getLegendItems();
//     var48.setBackgroundImageAlpha(0.0f);
//     java.util.List var64 = var48.getAnnotations();
//     var48.configureRangeAxes();
//     org.jfree.chart.axis.AxisLocation var66 = var48.getRangeAxisLocation();
//     var0.setDomainAxisLocation(var66);
//     
//     // Checks the contract:  equals-hashcode on var0 and var53
//     assertTrue("Contract failed: equals-hashcode on var0 and var53", var0.equals(var53) ? var0.hashCode() == var53.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var53 and var0
//     assertTrue("Contract failed: equals-hashcode on var53 and var0", var53.equals(var0) ? var53.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDomainAxisCount();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    var18.clearRangeAxes();
    boolean var20 = var18.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var24 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var25 = null;
    boolean var26 = var18.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var24, var25);
    org.jfree.chart.plot.IntervalMarker var29 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var29.setStartValue(0.0d);
    double var32 = var29.getStartValue();
    java.awt.Paint var33 = var29.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var34 = var29.getGradientPaintTransformer();
    var29.setEndValue(9.223372036854776E18d);
    java.awt.Color var39 = java.awt.Color.getColor("", 100);
    int var40 = var39.getRed();
    int var41 = var39.getAlpha();
    var29.setPaint((java.awt.Paint)var39);
    var24.setPaint((java.awt.Paint)var39);
    java.awt.Color var44 = java.awt.Color.getColor("XY Plot", var39);
    var15.setDomainCrosshairPaint((java.awt.Paint)var44);
    java.util.List var46 = var15.getAnnotations();
    org.jfree.data.xy.XYDataset var47 = null;
    org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var49 = var48.getRange();
    java.awt.Paint var50 = var48.getTickLabelPaint();
    java.awt.Paint var51 = var48.getTickLabelPaint();
    var48.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var55 = var54.getRange();
    var54.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var58 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var59 = var58.getRange();
    var54.setRangeWithMargins(var59);
    org.jfree.chart.renderer.xy.XYItemRenderer var61 = null;
    org.jfree.chart.plot.XYPlot var62 = new org.jfree.chart.plot.XYPlot(var47, (org.jfree.chart.axis.ValueAxis)var48, (org.jfree.chart.axis.ValueAxis)var54, var61);
    org.jfree.chart.util.RectangleEdge var64 = var62.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var66 = var62.getDataset((-1));
    java.awt.Color var70 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var71 = null;
    java.awt.Rectangle var72 = null;
    java.awt.geom.Rectangle2D var73 = null;
    java.awt.geom.AffineTransform var74 = null;
    java.awt.RenderingHints var75 = null;
    java.awt.PaintContext var76 = var70.createContext(var71, var72, var73, var74, var75);
    var62.setDomainGridlinePaint((java.awt.Paint)var70);
    var15.setDomainCrosshairPaint((java.awt.Paint)var70);
    int var79 = var70.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 255);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.LegendItemCollection var5 = var0.getFixedLegendItems();
    org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    org.jfree.chart.axis.AxisLocation var14 = var7.getDomainAxisLocation((-668));
    var6.setRangeAxisLocation(var14);
    var0.setDomainAxisLocation(var14, false);
    var0.clearAnnotations();
    org.jfree.chart.renderer.category.CategoryItemRenderer var20 = var0.getRenderer(253);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    float var4 = var1.getAlpha();
    org.jfree.chart.util.RectangleInsets var5 = var1.getLabelOffset();
    org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    org.jfree.chart.axis.AxisLocation var14 = var7.getDomainAxisLocation((-668));
    var6.setRangeAxisLocation(var14);
    org.jfree.chart.axis.AxisSpace var16 = null;
    var6.setFixedDomainAxisSpace(var16, true);
    org.jfree.chart.plot.PlotRenderingInfo var20 = null;
    java.awt.geom.Rectangle2D var21 = null;
    org.jfree.chart.util.RectangleAnchor var22 = null;
    java.awt.geom.Point2D var23 = org.jfree.chart.util.RectangleAnchor.coordinates(var21, var22);
    var6.zoomDomainAxes(9.223372036854776E18d, var20, var23);
    java.awt.Color var27 = java.awt.Color.getColor("hi!", (-16646144));
    java.awt.image.ColorModel var28 = null;
    java.awt.Rectangle var29 = null;
    java.awt.geom.Rectangle2D var30 = null;
    java.awt.geom.AffineTransform var31 = null;
    java.awt.RenderingHints var32 = null;
    java.awt.PaintContext var33 = var27.createContext(var28, var29, var30, var31, var32);
    int var34 = var27.getRed();
    var6.setDomainGridlinePaint((java.awt.Paint)var27);
    var1.setLabelPaint((java.awt.Paint)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);

  }

  public void test330() {}
//   public void test330() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }
// 
// 
//     java.awt.Paint[] var0 = null;
//     java.awt.Paint[] var1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var2 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var3 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
//     var4.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var8 = var7.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     org.jfree.chart.util.RectangleInsets var11 = var9.getLabelInsets();
//     double var13 = var11.trimWidth((-1.0d));
//     double var15 = var11.trimHeight((-6.0d));
//     boolean var16 = var8.equals((java.lang.Object)var11);
//     var4.setInsets(var11, true);
//     java.awt.Stroke var19 = var4.getRangeCrosshairStroke();
//     java.awt.Stroke[] var20 = new java.awt.Stroke[] { var19};
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.awt.Paint var23 = var21.getTickLabelPaint();
//     double var24 = var21.getLowerMargin();
//     java.awt.Shape var25 = var21.getLeftArrow();
//     java.awt.Stroke var26 = var21.getTickMarkStroke();
//     java.awt.Stroke[] var27 = new java.awt.Stroke[] { var26};
//     java.awt.Shape[] var28 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var29 = new org.jfree.chart.plot.DefaultDrawingSupplier(var1, var2, var3, var20, var27, var28);
//     java.awt.Paint[] var30 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var31 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var32 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
//     var33.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var37 = var36.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var39 = var38.getRange();
//     org.jfree.chart.util.RectangleInsets var40 = var38.getLabelInsets();
//     double var42 = var40.trimWidth((-1.0d));
//     double var44 = var40.trimHeight((-6.0d));
//     boolean var45 = var37.equals((java.lang.Object)var40);
//     var33.setInsets(var40, true);
//     java.awt.Stroke var48 = var33.getRangeCrosshairStroke();
//     java.awt.Stroke[] var49 = new java.awt.Stroke[] { var48};
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     java.awt.Paint var52 = var50.getTickLabelPaint();
//     double var53 = var50.getLowerMargin();
//     java.awt.Shape var54 = var50.getLeftArrow();
//     java.awt.Stroke var55 = var50.getTickMarkStroke();
//     java.awt.Stroke[] var56 = new java.awt.Stroke[] { var55};
//     java.awt.Shape[] var57 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var58 = new org.jfree.chart.plot.DefaultDrawingSupplier(var30, var31, var32, var49, var56, var57);
//     java.awt.Stroke[] var59 = null;
//     java.awt.Paint[] var60 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var61 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var62 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var63 = new org.jfree.chart.plot.CategoryPlot();
//     var63.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var66 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var67 = var66.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var68 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var69 = var68.getRange();
//     org.jfree.chart.util.RectangleInsets var70 = var68.getLabelInsets();
//     double var72 = var70.trimWidth((-1.0d));
//     double var74 = var70.trimHeight((-6.0d));
//     boolean var75 = var67.equals((java.lang.Object)var70);
//     var63.setInsets(var70, true);
//     java.awt.Stroke var78 = var63.getRangeCrosshairStroke();
//     java.awt.Stroke[] var79 = new java.awt.Stroke[] { var78};
//     org.jfree.chart.axis.DateAxis var80 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var81 = var80.getRange();
//     java.awt.Paint var82 = var80.getTickLabelPaint();
//     double var83 = var80.getLowerMargin();
//     java.awt.Shape var84 = var80.getLeftArrow();
//     java.awt.Stroke var85 = var80.getTickMarkStroke();
//     java.awt.Stroke[] var86 = new java.awt.Stroke[] { var85};
//     java.awt.Shape[] var87 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var88 = new org.jfree.chart.plot.DefaultDrawingSupplier(var60, var61, var62, var79, var86, var87);
//     org.jfree.chart.plot.DefaultDrawingSupplier var89 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var2, var49, var59, var87);
//     
//     // Checks the contract:  equals-hashcode on var4 and var33
//     assertTrue("Contract failed: equals-hashcode on var4 and var33", var4.equals(var33) ? var4.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var63
//     assertTrue("Contract failed: equals-hashcode on var4 and var63", var4.equals(var63) ? var4.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var4
//     assertTrue("Contract failed: equals-hashcode on var33 and var4", var33.equals(var4) ? var33.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var63
//     assertTrue("Contract failed: equals-hashcode on var33 and var63", var33.equals(var63) ? var33.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var4
//     assertTrue("Contract failed: equals-hashcode on var63 and var4", var63.equals(var4) ? var63.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var33
//     assertTrue("Contract failed: equals-hashcode on var63 and var33", var63.equals(var33) ? var63.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var36
//     assertTrue("Contract failed: equals-hashcode on var7 and var36", var7.equals(var36) ? var7.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var66
//     assertTrue("Contract failed: equals-hashcode on var7 and var66", var7.equals(var66) ? var7.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var7
//     assertTrue("Contract failed: equals-hashcode on var36 and var7", var36.equals(var7) ? var36.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var66
//     assertTrue("Contract failed: equals-hashcode on var36 and var66", var36.equals(var66) ? var36.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var7
//     assertTrue("Contract failed: equals-hashcode on var66 and var7", var66.equals(var7) ? var66.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var36
//     assertTrue("Contract failed: equals-hashcode on var66 and var36", var66.equals(var36) ? var66.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var58
//     assertTrue("Contract failed: equals-hashcode on var29 and var58", var29.equals(var58) ? var29.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var88
//     assertTrue("Contract failed: equals-hashcode on var29 and var88", var29.equals(var88) ? var29.hashCode() == var88.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var29
//     assertTrue("Contract failed: equals-hashcode on var58 and var29", var58.equals(var29) ? var58.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var88
//     assertTrue("Contract failed: equals-hashcode on var58 and var88", var58.equals(var88) ? var58.hashCode() == var88.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var88 and var29
//     assertTrue("Contract failed: equals-hashcode on var88 and var29", var88.equals(var29) ? var88.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var88 and var58
//     assertTrue("Contract failed: equals-hashcode on var88 and var58", var88.equals(var58) ? var88.hashCode() == var58.hashCode() : true);
// 
//   }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    boolean var5 = var0.isRangeZoomable();
    var0.setWeight((-1));
    var0.setForegroundAlpha(100.0f);
    var0.clearRangeMarkers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getDomainGridlinePaint();
    org.jfree.chart.util.RectangleInsets var29 = var0.getAxisOffset();
    org.jfree.chart.plot.IntervalMarker var32 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var32.setStartValue(0.0d);
    double var35 = var32.getStartValue();
    java.awt.Paint var36 = var32.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var37 = var32.getGradientPaintTransformer();
    java.awt.Color var40 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var41 = null;
    java.awt.Rectangle var42 = null;
    java.awt.geom.Rectangle2D var43 = null;
    java.awt.geom.AffineTransform var44 = null;
    java.awt.RenderingHints var45 = null;
    java.awt.PaintContext var46 = var40.createContext(var41, var42, var43, var44, var45);
    java.awt.image.ColorModel var47 = null;
    java.awt.Rectangle var48 = null;
    java.awt.geom.Rectangle2D var49 = null;
    java.awt.geom.AffineTransform var50 = null;
    java.awt.RenderingHints var51 = null;
    java.awt.PaintContext var52 = var40.createContext(var47, var48, var49, var50, var51);
    var32.setLabelPaint((java.awt.Paint)var40);
    var0.setDomainZeroBaselinePaint((java.awt.Paint)var40);
    java.awt.image.ColorModel var55 = null;
    java.awt.Rectangle var56 = null;
    java.awt.geom.Rectangle2D var57 = null;
    java.awt.geom.AffineTransform var58 = null;
    java.awt.RenderingHints var59 = null;
    java.awt.PaintContext var60 = var40.createContext(var55, var56, var57, var58, var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test333() {}
//   public void test333() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     int var11 = var0.getMonth();
//     java.lang.String var12 = var0.toString();
//     long var13 = var0.getFirstMillisecond();
//     java.util.Calendar var14 = null;
//     long var15 = var0.getFirstMillisecond(var14);
// 
//   }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setUpperMargin((-7.0d));
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var8.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var10 = var8.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var12 = null;
    var8.setRenderer(255, var12);
    java.awt.Color var18 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var19 = null;
    java.awt.Rectangle var20 = null;
    java.awt.geom.Rectangle2D var21 = null;
    java.awt.geom.AffineTransform var22 = null;
    java.awt.RenderingHints var23 = null;
    java.awt.PaintContext var24 = var18.createContext(var19, var20, var21, var22, var23);
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    org.jfree.chart.axis.TickUnitSource var28 = null;
    var26.setStandardTickUnits(var28);
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    java.awt.Paint var32 = var30.getTickLabelPaint();
    var26.setTickLabelPaint(var32);
    org.jfree.chart.plot.ValueMarker var35 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var36 = var35.getAlpha();
    java.awt.Stroke var37 = var35.getStroke();
    org.jfree.chart.plot.CategoryMarker var38 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var32, var37);
    java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var43 = null;
    java.awt.Rectangle var44 = null;
    java.awt.geom.Rectangle2D var45 = null;
    java.awt.geom.AffineTransform var46 = null;
    java.awt.RenderingHints var47 = null;
    java.awt.PaintContext var48 = var42.createContext(var43, var44, var45, var46, var47);
    org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var50 = var49.getRange();
    java.awt.Paint var51 = var49.getTickLabelPaint();
    double var52 = var49.getLowerMargin();
    java.awt.Shape var53 = var49.getLeftArrow();
    java.awt.Stroke var54 = var49.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var56 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var18, var37, (java.awt.Paint)var42, var54, 0.8f);
    boolean var57 = var8.removeRangeMarker((org.jfree.chart.plot.Marker)var56);
    org.jfree.chart.plot.Marker var58 = null;
    boolean var59 = var8.removeDomainMarker(var58);
    boolean var60 = var1.hasListener((java.util.EventListener)var8);
    var1.setCategoryMargin((-6.0d));
    org.jfree.chart.util.RectangleInsets var63 = var1.getLabelInsets();
    var1.configure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var6 = var0.getLabelFont();
    org.jfree.data.general.Dataset var7 = null;
    org.jfree.data.general.DatasetChangeEvent var8 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var0, var7);
    org.jfree.chart.axis.Timeline var9 = var0.getTimeline();
    boolean var10 = var0.isVerticalTickLabels();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
    var15.setDomainCrosshairValue((-1.0d), true);
    org.jfree.chart.axis.CategoryAxis var32 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.util.RectangleEdge var36 = null;
    double var37 = var32.getCategoryMiddle(0, (-1), var35, var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
    var38.clearRangeAxes();
    boolean var40 = var38.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var42 = var38.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var43 = var38.getParent();
    var32.addChangeListener((org.jfree.chart.event.AxisChangeListener)var38);
    boolean var45 = var38.isRangeZoomable();
    var38.setRangeCrosshairValue((-7.0d), false);
    org.jfree.chart.LegendItemCollection var49 = var38.getLegendItems();
    var15.setFixedLegendItems(var49);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var52 = new org.jfree.chart.plot.CategoryPlot();
    var52.clearRangeAxes();
    boolean var54 = var52.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var56 = var52.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var57 = var52.getParent();
    org.jfree.chart.axis.AxisLocation var59 = var52.getDomainAxisLocation((-668));
    var51.setRangeAxisLocation(var59);
    org.jfree.chart.axis.AxisSpace var61 = null;
    var51.setFixedDomainAxisSpace(var61, true);
    org.jfree.chart.plot.PlotRenderingInfo var65 = null;
    java.awt.geom.Rectangle2D var66 = null;
    org.jfree.chart.util.RectangleAnchor var67 = null;
    java.awt.geom.Point2D var68 = org.jfree.chart.util.RectangleAnchor.coordinates(var66, var67);
    var51.zoomDomainAxes(9.223372036854776E18d, var65, var68);
    var15.setQuadrantOrigin(var68);
    boolean var71 = var15.isRangeGridlinesVisible();
    var15.setForegroundAlpha(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test337() {}
//   public void test337() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Date var11 = var0.getStart();
//     long var12 = var0.getMiddleMillisecond();
//     int var13 = var0.getDayOfMonth();
//     java.util.Calendar var14 = null;
//     long var15 = var0.getMiddleMillisecond(var14);
// 
//   }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    org.jfree.data.xy.XYDataset var30 = null;
    var15.setDataset(var30);
    java.awt.Paint var32 = var15.getRangeCrosshairPaint();
    org.jfree.chart.plot.PlotOrientation var33 = var15.getOrientation();
    org.jfree.chart.plot.Plot var34 = var15.getParent();
    org.jfree.data.xy.XYDataset var35 = null;
    int var36 = var15.indexOf(var35);
    org.jfree.data.xy.XYDataset var37 = var15.getDataset();
    var15.setRangeZeroBaselineVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.plot.Plot var28 = var15.getParent();
//     java.awt.Image var29 = null;
//     var15.setBackgroundImage(var29);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     org.jfree.chart.util.RectangleInsets var33 = var31.getLabelInsets();
//     java.awt.geom.Rectangle2D var35 = null;
//     org.jfree.chart.util.RectangleEdge var36 = null;
//     double var37 = var31.java2DToValue(100.0d, var35, var36);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
//     var38.clearRangeAxes();
//     boolean var40 = var38.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var42 = var38.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var43 = var38.getParent();
//     org.jfree.chart.plot.IntervalMarker var46 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var46.setStartValue(0.0d);
//     double var49 = var46.getStartValue();
//     java.awt.Paint var50 = var46.getPaint();
//     var38.setOutlinePaint(var50);
//     var31.setLabelPaint(var50);
//     var15.setDomainZeroBaselinePaint(var50);
//     
//     // Checks the contract:  equals-hashcode on var20 and var38
//     assertTrue("Contract failed: equals-hashcode on var20 and var38", var20.equals(var38) ? var20.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var20
//     assertTrue("Contract failed: equals-hashcode on var38 and var20", var38.equals(var20) ? var38.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    var0.setRangeWithMargins(var5);
    java.text.DateFormat var7 = var0.getDateFormatOverride();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    var8.setRange(0.0d, 100.0d);
    var8.setLowerBound((-6.0d));
    var8.setLabelURL("hi!");
    java.awt.Shape var17 = var8.getRightArrow();
    var0.setUpArrow(var17);
    java.awt.Shape var19 = var0.getRightArrow();
    java.awt.Paint[] var20 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var21 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var22 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var27 = var26.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var29 = var28.getRange();
    org.jfree.chart.util.RectangleInsets var30 = var28.getLabelInsets();
    double var32 = var30.trimWidth((-1.0d));
    double var34 = var30.trimHeight((-6.0d));
    boolean var35 = var27.equals((java.lang.Object)var30);
    var23.setInsets(var30, true);
    java.awt.Stroke var38 = var23.getRangeCrosshairStroke();
    java.awt.Stroke[] var39 = new java.awt.Stroke[] { var38};
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    java.awt.Stroke[] var46 = new java.awt.Stroke[] { var45};
    java.awt.Shape[] var47 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var48 = new org.jfree.chart.plot.DefaultDrawingSupplier(var20, var21, var22, var39, var46, var47);
    java.awt.Stroke var49 = var48.getNextStroke();
    java.awt.Paint var50 = var48.getNextFillPaint();
    java.awt.Stroke var51 = var48.getNextStroke();
    java.awt.Shape var52 = var48.getNextShape();
    var0.setDownArrow(var52);
    var0.setPositiveArrowVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test341() {}
//   public void test341() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     long var1 = var0.getSerialIndex();
//     long var2 = var0.getSerialIndex();
//     long var3 = var0.getMiddleMillisecond();
//     java.util.Calendar var4 = null;
//     long var5 = var0.getMiddleMillisecond(var4);
// 
//   }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    var0.setRangeCrosshairValue(8.0d, false);
    org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var7 = var6.getAlpha();
    java.awt.Stroke var8 = var6.getStroke();
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    java.text.DateFormat var11 = var9.getDateFormatOverride();
    var9.resizeRange((-1.0d), (-1.0d));
    boolean var15 = var6.equals((java.lang.Object)var9);
    org.jfree.chart.util.RectangleInsets var16 = var6.getLabelOffset();
    java.awt.Paint var17 = var6.getOutlinePaint();
    java.awt.Paint var18 = var6.getPaint();
    org.jfree.chart.plot.IntervalMarker var21 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var21.setStartValue(0.0d);
    double var24 = var21.getStartValue();
    java.awt.Paint var25 = var21.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var26 = var21.getGradientPaintTransformer();
    java.awt.Color var29 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var30 = null;
    java.awt.Rectangle var31 = null;
    java.awt.geom.Rectangle2D var32 = null;
    java.awt.geom.AffineTransform var33 = null;
    java.awt.RenderingHints var34 = null;
    java.awt.PaintContext var35 = var29.createContext(var30, var31, var32, var33, var34);
    java.awt.image.ColorModel var36 = null;
    java.awt.Rectangle var37 = null;
    java.awt.geom.Rectangle2D var38 = null;
    java.awt.geom.AffineTransform var39 = null;
    java.awt.RenderingHints var40 = null;
    java.awt.PaintContext var41 = var29.createContext(var36, var37, var38, var39, var40);
    var21.setLabelPaint((java.awt.Paint)var29);
    boolean var43 = var6.equals((java.lang.Object)var21);
    org.jfree.chart.util.Layer var44 = null;
    boolean var46 = var0.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var21, var44, true);
    java.awt.Paint var47 = var0.getDomainZeroBaselinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test343() {}
//   public void test343() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var0 = new org.jfree.chart.axis.NumberAxis();
//     boolean var1 = var0.getAutoRangeIncludesZero();
//     java.awt.geom.Rectangle2D var3 = null;
//     org.jfree.chart.axis.CategoryAxis var5 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.chart.util.RectangleEdge var9 = null;
//     double var10 = var5.getCategoryMiddle(0, (-1), var8, var9);
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     var11.clearRangeAxes();
//     boolean var13 = var11.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var15 = var11.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var16 = var11.getParent();
//     var5.addChangeListener((org.jfree.chart.event.AxisChangeListener)var11);
//     boolean var18 = var11.isRangeZoomable();
//     int var19 = var11.getDomainAxisCount();
//     org.jfree.chart.util.RectangleEdge var21 = var11.getDomainAxisEdge((-203));
//     double var22 = var0.valueToJava2D((-6.0d), var3, var21);
// 
//   }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
    org.jfree.chart.event.MarkerChangeEvent var33 = null;
    var31.notifyListeners(var33);
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
    var35.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
    double var44 = var42.trimWidth((-1.0d));
    double var46 = var42.trimHeight((-6.0d));
    boolean var47 = var39.equals((java.lang.Object)var42);
    var35.setInsets(var42, true);
    java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
    var31.setOutlineStroke(var50);
    var15.setRangeGridlineStroke(var50);
    org.jfree.chart.util.RectangleEdge var53 = var15.getRangeAxisEdge();
    org.jfree.chart.plot.IntervalMarker var56 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var56.setStartValue(0.0d);
    double var59 = var56.getStartValue();
    org.jfree.chart.util.GradientPaintTransformer var60 = null;
    var56.setGradientPaintTransformer(var60);
    org.jfree.chart.util.Layer var62 = null;
    boolean var63 = var15.removeRangeMarker((org.jfree.chart.plot.Marker)var56, var62);
    java.lang.Object var64 = var56.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
//     org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
//     int var29 = var0.getIndexOf(var28);
//     var0.setDomainGridlinesVisible(true);
//     var0.setBackgroundImageAlignment(10);
//     boolean var34 = var0.isRangeZeroBaselineVisible();
//     org.jfree.chart.axis.AxisSpace var35 = null;
//     var0.setFixedDomainAxisSpace(var35, true);
//     org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Color var43 = java.awt.Color.getColor("", 100);
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var46 = var45.getRange();
//     org.jfree.chart.axis.TickUnitSource var47 = null;
//     var45.setStandardTickUnits(var47);
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     java.awt.Paint var51 = var49.getTickLabelPaint();
//     var45.setTickLabelPaint(var51);
//     org.jfree.chart.plot.ValueMarker var54 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var55 = var54.getAlpha();
//     java.awt.Stroke var56 = var54.getStroke();
//     org.jfree.chart.plot.CategoryMarker var57 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var51, var56);
//     org.jfree.chart.plot.ValueMarker var58 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var43, var56);
//     boolean var59 = var39.removeRangeMarker((org.jfree.chart.plot.Marker)var58);
//     org.jfree.chart.plot.IntervalMarker var62 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var62.setStartValue(0.0d);
//     double var65 = var62.getStartValue();
//     java.awt.Paint var66 = var62.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var67 = var62.getGradientPaintTransformer();
//     java.awt.Color var70 = java.awt.Color.getColor("", 100);
//     java.awt.image.ColorModel var71 = null;
//     java.awt.Rectangle var72 = null;
//     java.awt.geom.Rectangle2D var73 = null;
//     java.awt.geom.AffineTransform var74 = null;
//     java.awt.RenderingHints var75 = null;
//     java.awt.PaintContext var76 = var70.createContext(var71, var72, var73, var74, var75);
//     java.awt.image.ColorModel var77 = null;
//     java.awt.Rectangle var78 = null;
//     java.awt.geom.Rectangle2D var79 = null;
//     java.awt.geom.AffineTransform var80 = null;
//     java.awt.RenderingHints var81 = null;
//     java.awt.PaintContext var82 = var70.createContext(var77, var78, var79, var80, var81);
//     var62.setLabelPaint((java.awt.Paint)var70);
//     java.awt.Color var84 = var70.darker();
//     var58.setPaint((java.awt.Paint)var70);
//     org.jfree.chart.util.Layer var86 = null;
//     var0.addRangeMarker(253, (org.jfree.chart.plot.Marker)var58, var86);
//     
//     // Checks the contract:  equals-hashcode on var22 and var54
//     assertTrue("Contract failed: equals-hashcode on var22 and var54", var22.equals(var54) ? var22.hashCode() == var54.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var22
//     assertTrue("Contract failed: equals-hashcode on var54 and var22", var54.equals(var22) ? var54.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var57
//     assertTrue("Contract failed: equals-hashcode on var25 and var57", var25.equals(var57) ? var25.hashCode() == var57.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var25
//     assertTrue("Contract failed: equals-hashcode on var57 and var25", var57.equals(var25) ? var57.hashCode() == var25.hashCode() : true);
// 
//   }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.configureRangeAxes();
    java.lang.String var24 = var15.getPlotType();
    org.jfree.data.xy.XYDataset var26 = null;
    org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var28 = var27.getRange();
    java.awt.Paint var29 = var27.getTickLabelPaint();
    java.awt.Paint var30 = var27.getTickLabelPaint();
    var27.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var34 = var33.getRange();
    var33.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var38 = var37.getRange();
    var33.setRangeWithMargins(var38);
    org.jfree.chart.renderer.xy.XYItemRenderer var40 = null;
    org.jfree.chart.plot.XYPlot var41 = new org.jfree.chart.plot.XYPlot(var26, (org.jfree.chart.axis.ValueAxis)var27, (org.jfree.chart.axis.ValueAxis)var33, var40);
    int var42 = var41.getDomainAxisCount();
    org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
    var44.clearRangeAxes();
    boolean var46 = var44.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var50 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var51 = null;
    boolean var52 = var44.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var50, var51);
    org.jfree.chart.plot.IntervalMarker var55 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var55.setStartValue(0.0d);
    double var58 = var55.getStartValue();
    java.awt.Paint var59 = var55.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var60 = var55.getGradientPaintTransformer();
    var55.setEndValue(9.223372036854776E18d);
    java.awt.Color var65 = java.awt.Color.getColor("", 100);
    int var66 = var65.getRed();
    int var67 = var65.getAlpha();
    var55.setPaint((java.awt.Paint)var65);
    var50.setPaint((java.awt.Paint)var65);
    java.awt.Color var70 = java.awt.Color.getColor("XY Plot", var65);
    var41.setDomainCrosshairPaint((java.awt.Paint)var70);
    java.util.List var72 = var41.getAnnotations();
    org.jfree.chart.plot.ValueMarker var74 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var75 = var74.getAlpha();
    java.awt.Stroke var76 = var74.getStroke();
    org.jfree.chart.axis.DateAxis var77 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var78 = var77.getRange();
    java.text.DateFormat var79 = var77.getDateFormatOverride();
    var77.resizeRange((-1.0d), (-1.0d));
    boolean var83 = var74.equals((java.lang.Object)var77);
    org.jfree.chart.util.RectangleInsets var84 = var74.getLabelOffset();
    java.awt.Paint var85 = var74.getOutlinePaint();
    org.jfree.chart.util.Layer var86 = null;
    var41.addRangeMarker((org.jfree.chart.plot.Marker)var74, var86);
    double var88 = var74.getValue();
    org.jfree.chart.util.Layer var89 = null;
    var15.addRangeMarker((-668), (org.jfree.chart.plot.Marker)var74, var89, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "XY Plot"+ "'", var24.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 100.0d);

  }

  public void test347() {}
//   public void test347() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setCategoryMargin(9.223372036854776E18d);
//     var1.setLowerMargin(0.0d);
//     var1.configure();
//     var1.setVisible(false);
//     java.awt.Graphics2D var11 = null;
//     org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
//     var12.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var14 = var12.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var16 = null;
//     var12.setRenderer(255, var16);
//     java.awt.Stroke var18 = var12.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var19 = var12.getDataset();
//     java.awt.Paint var20 = var12.getDomainGridlinePaint();
//     org.jfree.chart.plot.IntervalMarker var24 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var24.setStartValue(0.0d);
//     double var27 = var24.getStartValue();
//     java.awt.Paint var28 = var24.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var29 = var24.getGradientPaintTransformer();
//     var24.setEndValue(9.223372036854776E18d);
//     java.lang.Object var32 = var24.clone();
//     org.jfree.chart.util.Layer var33 = null;
//     var12.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var24, var33);
//     org.jfree.chart.util.RectangleEdge var36 = var12.getDomainAxisEdge(0);
//     org.jfree.chart.plot.Marker var38 = null;
//     org.jfree.chart.util.Layer var39 = null;
//     boolean var41 = var12.removeDomainMarker(20, var38, var39, false);
//     org.jfree.chart.util.RectangleInsets var42 = var12.getAxisOffset();
//     org.jfree.data.category.CategoryDataset var44 = null;
//     var12.setDataset(12, var44);
//     org.jfree.chart.axis.CategoryAxis var46 = new org.jfree.chart.axis.CategoryAxis();
//     int var47 = var12.getDomainAxisIndex(var46);
//     java.awt.geom.Rectangle2D var48 = null;
//     org.jfree.chart.plot.CategoryPlot var49 = new org.jfree.chart.plot.CategoryPlot();
//     int var50 = var49.getWeight();
//     org.jfree.chart.util.RectangleEdge var51 = var49.getDomainAxisEdge();
//     org.jfree.chart.axis.AxisSpace var52 = null;
//     org.jfree.chart.axis.AxisSpace var53 = var1.reserveSpace(var11, (org.jfree.chart.plot.Plot)var12, var48, var51, var52);
//     
//     // Checks the contract:  equals-hashcode on var12 and var49
//     assertTrue("Contract failed: equals-hashcode on var12 and var49", var12.equals(var49) ? var12.hashCode() == var49.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var49 and var12
//     assertTrue("Contract failed: equals-hashcode on var49 and var12", var49.equals(var12) ? var49.hashCode() == var12.hashCode() : true);
// 
//   }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var2 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    var3.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var7 = var6.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
    double var12 = var10.trimWidth((-1.0d));
    double var14 = var10.trimHeight((-6.0d));
    boolean var15 = var7.equals((java.lang.Object)var10);
    var3.setInsets(var10, true);
    java.awt.Stroke var18 = var3.getRangeCrosshairStroke();
    java.awt.Stroke[] var19 = new java.awt.Stroke[] { var18};
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.awt.Paint var22 = var20.getTickLabelPaint();
    double var23 = var20.getLowerMargin();
    java.awt.Shape var24 = var20.getLeftArrow();
    java.awt.Stroke var25 = var20.getTickMarkStroke();
    java.awt.Stroke[] var26 = new java.awt.Stroke[] { var25};
    java.awt.Shape[] var27 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var28 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var1, var2, var19, var26, var27);
    java.awt.Paint var29 = var28.getNextOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    double var19 = var7.getRight();
    double var21 = var7.calculateRightOutset((-1.0d));
    org.jfree.chart.util.UnitType var22 = var7.getUnitType();
    double var24 = var7.calculateBottomInset((-10.0d));
    org.jfree.chart.util.UnitType var25 = var7.getUnitType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
    java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var1.setLabelPaint((java.awt.Paint)var6);
    org.jfree.chart.plot.IntervalMarker var10 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    var10.setStartValue(0.0d);
    org.jfree.chart.text.TextAnchor var13 = var10.getLabelTextAnchor();
    java.awt.Color var16 = java.awt.Color.getColor("", 100);
    int var17 = var16.getRed();
    int var18 = var16.getAlpha();
    float[] var22 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var23 = var16.getColorComponents(var22);
    boolean var24 = var13.equals((java.lang.Object)var16);
    java.awt.color.ColorSpace var25 = var16.getColorSpace();
    java.awt.Color var28 = java.awt.Color.getColor("", 100);
    int var29 = var28.getRed();
    int var30 = var28.getAlpha();
    float[] var34 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var35 = var28.getColorComponents(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var36 = var6.getComponents(var25, var34);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var5 = var0.getParent();
    var0.clearDomainAxes();
    boolean var7 = var0.isOutlineVisible();
    var0.clearDomainMarkers((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToRangeAxis((-203), 20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }


    java.lang.Object var0 = null;
    org.jfree.chart.JFreeChart var1 = null;
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    var2.clearRangeAxes();
    boolean var4 = var2.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeEvent var5 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var2);
    org.jfree.chart.event.ChartChangeEventType var6 = var5.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.event.ChartChangeEvent var7 = new org.jfree.chart.event.ChartChangeEvent(var0, var1, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.renderer.category.CategoryItemRenderer var19 = var15.getRenderer();
    org.jfree.chart.axis.AxisSpace var20 = null;
    var15.setFixedDomainAxisSpace(var20, false);
    org.jfree.chart.plot.Plot var23 = var15.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test354() {}
//   public void test354() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     boolean var22 = var20.isDomainGridlinesVisible();
//     org.jfree.data.category.CategoryDataset var23 = var20.getDataset();
//     org.jfree.chart.plot.DatasetRenderingOrder var24 = var20.getDatasetRenderingOrder();
//     var15.setDatasetRenderingOrder(var24);
//     org.jfree.chart.plot.PlotRenderingInfo var28 = null;
//     var15.handleClick(2, 2, var28);
// 
//   }

  public void test355() {}
//   public void test355() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }
// 
// 
//     java.util.Locale var0 = null;
//     org.jfree.chart.axis.TickUnitSource var1 = org.jfree.chart.axis.NumberAxis.createStandardTickUnits(var0);
// 
//   }

  public void test356() {}
//   public void test356() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }
// 
// 
//     org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var2 = var1.getAlpha();
//     org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var4 = var3.getRange();
//     org.jfree.chart.axis.TickUnitSource var5 = null;
//     var3.setStandardTickUnits(var5);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     java.awt.Paint var9 = var7.getTickLabelPaint();
//     var3.setTickLabelPaint(var9);
//     var1.setOutlinePaint(var9);
//     java.lang.Class var12 = null;
//     java.util.EventListener[] var13 = var1.getListeners(var12);
// 
//   }

  public void test357() {}
//   public void test357() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }
// 
// 
//     org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var5 = var3.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var7 = null;
//     var3.setRenderer(255, var7);
//     var3.clearRangeMarkers();
//     var2.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var3);
//     org.jfree.chart.util.RectangleInsets var11 = var3.getInsets();
//     var3.zoom(1.05d);
// 
//   }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setVerticalTickLabels(false);
//     org.jfree.data.Range var4 = var0.getDefaultAutoRange();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     var5.setRange(0.0d, 100.0d);
//     boolean var10 = var5.isInverted();
//     org.jfree.chart.axis.Timeline var11 = var5.getTimeline();
//     var0.setTimeline(var11);
//     java.awt.Graphics2D var13 = null;
//     org.jfree.chart.axis.AxisState var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     var16.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var18 = var16.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var20 = null;
//     var16.setRenderer(255, var20);
//     java.awt.Stroke var22 = var16.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var23 = var16.getDataset();
//     org.jfree.chart.util.RectangleEdge var24 = var16.getDomainAxisEdge();
//     java.util.List var25 = var0.refreshTicks(var13, var14, var15, var24);
// 
//   }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Color var1 = java.awt.Color.decode("XY Plot");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test360() {}
//   public void test360() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     long var1 = var0.getSerialIndex();
//     long var2 = var0.getSerialIndex();
//     java.util.Date var3 = var0.getEnd();
//     int var4 = var0.getYear();
//     long var5 = var0.getFirstMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 41993L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 41993L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 2014);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1419062400000L);
// 
//   }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    java.awt.Stroke var3 = var0.getRangeGridlineStroke();
    org.jfree.chart.plot.ValueMarker var5 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var6 = var5.getAlpha();
    java.awt.Stroke var7 = var5.getStroke();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.text.DateFormat var10 = var8.getDateFormatOverride();
    var8.resizeRange((-1.0d), (-1.0d));
    boolean var14 = var5.equals((java.lang.Object)var8);
    org.jfree.chart.util.RectangleInsets var15 = var5.getLabelOffset();
    java.awt.Paint var16 = var5.getOutlinePaint();
    java.awt.Paint var17 = var5.getPaint();
    java.lang.String var18 = var5.getLabel();
    org.jfree.chart.util.Layer var19 = null;
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var5, var19);
    java.awt.Paint var21 = var5.getLabelPaint();
    float var22 = var5.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.8f);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    org.jfree.chart.axis.AxisLocation var0 = null;
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var4 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var5 = var4.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    org.jfree.chart.util.RectangleInsets var8 = var6.getLabelInsets();
    double var10 = var8.trimWidth((-1.0d));
    double var12 = var8.trimHeight((-6.0d));
    boolean var13 = var5.equals((java.lang.Object)var8);
    var1.setInsets(var8, true);
    org.jfree.chart.LegendItemCollection var16 = var1.getLegendItems();
    boolean var17 = var1.isSubplot();
    org.jfree.chart.plot.PlotOrientation var18 = var1.getOrientation();
    java.lang.String var19 = var18.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.RectangleEdge var20 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var0, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var19.equals("PlotOrientation.VERTICAL"));

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    java.awt.Paint var6 = var2.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var7 = var2.getGradientPaintTransformer();
    java.awt.Color var10 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
    java.awt.image.ColorModel var17 = null;
    java.awt.Rectangle var18 = null;
    java.awt.geom.Rectangle2D var19 = null;
    java.awt.geom.AffineTransform var20 = null;
    java.awt.RenderingHints var21 = null;
    java.awt.PaintContext var22 = var10.createContext(var17, var18, var19, var20, var21);
    var2.setLabelPaint((java.awt.Paint)var10);
    java.awt.Color var24 = var10.darker();
    java.lang.String var25 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "java.awt.Color[r=0,g=0,b=70]"+ "'", var25.equals("java.awt.Color[r=0,g=0,b=70]"));

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    float var30 = var15.getBackgroundImageAlpha();
    var15.setRangeCrosshairLockedOnData(false);
    var15.setRangeCrosshairLockedOnData(true);
    boolean var35 = var15.isOutlineVisible();
    org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Color var41 = java.awt.Color.getColor("", 100);
    org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var44 = var43.getRange();
    org.jfree.chart.axis.TickUnitSource var45 = null;
    var43.setStandardTickUnits(var45);
    org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var48 = var47.getRange();
    java.awt.Paint var49 = var47.getTickLabelPaint();
    var43.setTickLabelPaint(var49);
    org.jfree.chart.plot.ValueMarker var52 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var53 = var52.getAlpha();
    java.awt.Stroke var54 = var52.getStroke();
    org.jfree.chart.plot.CategoryMarker var55 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var49, var54);
    org.jfree.chart.plot.ValueMarker var56 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var41, var54);
    boolean var57 = var37.removeRangeMarker((org.jfree.chart.plot.Marker)var56);
    org.jfree.chart.plot.IntervalMarker var60 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var60.setStartValue(0.0d);
    double var63 = var60.getStartValue();
    java.awt.Paint var64 = var60.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var65 = var60.getGradientPaintTransformer();
    java.awt.Color var68 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var69 = null;
    java.awt.Rectangle var70 = null;
    java.awt.geom.Rectangle2D var71 = null;
    java.awt.geom.AffineTransform var72 = null;
    java.awt.RenderingHints var73 = null;
    java.awt.PaintContext var74 = var68.createContext(var69, var70, var71, var72, var73);
    java.awt.image.ColorModel var75 = null;
    java.awt.Rectangle var76 = null;
    java.awt.geom.Rectangle2D var77 = null;
    java.awt.geom.AffineTransform var78 = null;
    java.awt.RenderingHints var79 = null;
    java.awt.PaintContext var80 = var68.createContext(var75, var76, var77, var78, var79);
    var60.setLabelPaint((java.awt.Paint)var68);
    java.awt.Color var82 = var68.darker();
    var56.setPaint((java.awt.Paint)var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setQuadrantPaint(20, (java.awt.Paint)var68);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Shape var2 = var0.getLeftArrow();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.awt.Paint var5 = var3.getTickLabelPaint();
    java.awt.Paint var6 = var3.getTickLabelPaint();
    java.awt.geom.Rectangle2D var8 = null;
    org.jfree.chart.util.RectangleEdge var9 = null;
    double var10 = var3.java2DToValue((-7.0d), var8, var9);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setRange(0.0d, 100.0d);
    boolean var16 = var11.isInverted();
    org.jfree.chart.axis.Timeline var17 = var11.getTimeline();
    boolean var18 = var11.isVisible();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    java.awt.Shape var21 = var19.getLeftArrow();
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    var22.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    var22.setRangeWithMargins(var27);
    var19.setRangeWithMargins(var27, true, true);
    var11.setRange(var27);
    var3.setRange(var27, false, false);
    org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var37 = var36.getRange();
    java.text.DateFormat var38 = var36.getDateFormatOverride();
    var36.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var42 = var36.getStandardTickUnits();
    var36.setLabelURL("");
    boolean var45 = var36.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var47 = var46.getRange();
    var46.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var51 = var50.getRange();
    var46.setRangeWithMargins(var51);
    var36.setRange(var51);
    var3.setRangeWithMargins(var51, true, false);
    var0.setDefaultAutoRange(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-9.223372036854776E18d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test366() {}
//   public void test366() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.text.DateFormat var2 = var0.getDateFormatOverride();
//     var0.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
//     var0.setLabelURL("");
//     boolean var9 = var0.isNegativeArrowVisible();
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     var10.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     var10.setRangeWithMargins(var15);
//     var0.setRange(var15);
//     boolean var18 = var0.isPositiveArrowVisible();
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     int var20 = var19.getWeight();
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Shape var24 = var22.getLeftArrow();
//     var22.setLabelAngle(0.0d);
//     var19.setRangeAxis(255, (org.jfree.chart.axis.ValueAxis)var22);
//     boolean var28 = var22.isAutoTickUnitSelection();
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     var29.setRange(0.0d, 100.0d);
//     boolean var34 = var29.isInverted();
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     java.text.DateFormat var37 = var35.getDateFormatOverride();
//     var35.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var41 = var35.getStandardTickUnits();
//     var35.setLabelURL("");
//     boolean var44 = var35.isNegativeArrowVisible();
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var46 = var45.getRange();
//     var45.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     var45.setRangeWithMargins(var50);
//     var35.setRange(var50);
//     var29.setRange(var50, true, false);
//     var22.setRange(var50);
//     var0.setRange(var50, false, false);
//     
//     // Checks the contract:  equals-hashcode on var6 and var41
//     assertTrue("Contract failed: equals-hashcode on var6 and var41", var6.equals(var41) ? var6.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var6
//     assertTrue("Contract failed: equals-hashcode on var41 and var6", var41.equals(var6) ? var41.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.axis.MarkerAxisBand var4 = null;
    var1.setMarkerBand(var4);
    var1.setAutoRangeStickyZero(false);
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Paint var10 = var8.getTickLabelPaint();
    java.awt.Paint var11 = var8.getTickLabelPaint();
    var8.setFixedAutoRange(3.0d);
    boolean var14 = var1.equals((java.lang.Object)var8);
    var1.setAutoRangeStickyZero(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    java.lang.Object var13 = var0.clone();
    boolean var14 = var0.isSubplot();
    var0.mapDatasetToRangeAxis(2014, (-668));
    org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var20 = var19.getAlpha();
    java.awt.Stroke var21 = var19.getStroke();
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.text.DateFormat var24 = var22.getDateFormatOverride();
    var22.resizeRange((-1.0d), (-1.0d));
    boolean var28 = var19.equals((java.lang.Object)var22);
    org.jfree.chart.util.Layer var29 = null;
    boolean var30 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var19, var29);
    boolean var31 = var0.getDrawSharedDomainAxis();
    java.awt.Graphics2D var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    var0.drawBackgroundImage(var32, var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Image var8 = var0.getBackgroundImage();
    org.jfree.chart.renderer.category.CategoryItemRenderer var10 = var0.getRenderer((-668));
    org.jfree.chart.util.SortOrder var11 = var0.getRowRenderingOrder();
    java.lang.Object var12 = null;
    boolean var13 = var11.equals(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.plot.ValueMarker var20 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var21 = var20.getLabelOffsetType();
    java.awt.Color var25 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var20.setLabelPaint((java.awt.Paint)var25);
    org.jfree.chart.util.Layer var27 = null;
    var15.addRangeMarker((org.jfree.chart.plot.Marker)var20, var27);
    boolean var29 = var15.isRangeCrosshairLockedOnData();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, 