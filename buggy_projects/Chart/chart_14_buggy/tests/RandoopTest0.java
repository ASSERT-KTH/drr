
import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test1"); }


    java.lang.Class var0 = null;
    java.util.Date var1 = null;
    java.util.TimeZone var2 = null;
    org.jfree.data.time.RegularTimePeriod var3 = org.jfree.data.time.RegularTimePeriod.createInstance(var0, var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test2"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.axis.DateTickUnit var1 = null;
//     java.util.Date var2 = var0.calculateLowestVisibleTickValue(var1);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test3"); }


    org.jfree.chart.axis.AxisLocation var0 = null;
    org.jfree.chart.plot.PlotOrientation var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.RectangleEdge var2 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var0, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test4"); }


    org.jfree.chart.event.ChartChangeEvent var1 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)1);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test5"); }


    org.jfree.chart.axis.TickUnitSource var0 = org.jfree.chart.axis.NumberAxis.createStandardTickUnits();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test6"); }


    java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var5 = null;
    java.awt.Rectangle var6 = null;
    java.awt.geom.Rectangle2D var7 = null;
    java.awt.geom.AffineTransform var8 = null;
    java.awt.RenderingHints var9 = null;
    java.awt.PaintContext var10 = var4.createContext(var5, var6, var7, var8, var9);
    java.awt.Stroke var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)"hi!", (java.awt.Paint)var4, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test7"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.text.DateFormat var2 = var0.getDateFormatOverride();
//     java.util.Date var3 = null;
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var0.dateToJava2D(var3, var4, var5);
// 
//   }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test8"); }


    org.jfree.chart.axis.AxisLocation var0 = null;
    org.jfree.chart.plot.PlotOrientation var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.RectangleEdge var2 = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(var0, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test9"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setAlpha(10.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test10"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var4 = null;
    java.awt.Rectangle var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    java.awt.geom.AffineTransform var7 = null;
    java.awt.RenderingHints var8 = null;
    java.awt.PaintContext var9 = var3.createContext(var4, var5, var6, var7, var8);
    float[] var10 = new float[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var11 = var3.getRGBColorComponents(var10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test11"); }


    int var3 = java.awt.Color.HSBtoRGB(10.0f, 1.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-16646144));

  }

  public void test12() {}
//   public void test12() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test12"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var4 = var3.getRange();
//     org.jfree.chart.axis.TickUnitSource var5 = null;
//     var3.setStandardTickUnits(var5);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     java.awt.Paint var9 = var7.getTickLabelPaint();
//     var3.setTickLabelPaint(var9);
//     org.jfree.chart.plot.ValueMarker var12 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var13 = var12.getAlpha();
//     java.awt.Stroke var14 = var12.getStroke();
//     org.jfree.chart.plot.CategoryMarker var15 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var9, var14);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     org.jfree.chart.axis.TickUnitSource var19 = null;
//     var17.setStandardTickUnits(var19);
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.awt.Paint var23 = var21.getTickLabelPaint();
//     var17.setTickLabelPaint(var23);
//     org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var27 = var26.getAlpha();
//     java.awt.Stroke var28 = var26.getStroke();
//     org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
//     java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.Stroke var34 = null;
//     org.jfree.chart.plot.IntervalMarker var36 = new org.jfree.chart.plot.IntervalMarker((-7.0d), (-7.0d), var9, var28, (java.awt.Paint)var33, var34, 1.0f);
//     
//     // Checks the contract:  equals-hashcode on var12 and var26
//     assertTrue("Contract failed: equals-hashcode on var12 and var26", var12.equals(var26) ? var12.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var12
//     assertTrue("Contract failed: equals-hashcode on var26 and var12", var26.equals(var12) ? var26.hashCode() == var12.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var29
//     assertTrue("Contract failed: equals-hashcode on var15 and var29", var15.equals(var29) ? var15.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var15
//     assertTrue("Contract failed: equals-hashcode on var29 and var15", var29.equals(var15) ? var29.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test13"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Color var1 = java.awt.Color.decode("");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test14() {}
//   public void test14() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test14"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     java.awt.Graphics2D var14 = null;
//     org.jfree.chart.axis.AxisState var15 = null;
//     java.awt.geom.Rectangle2D var16 = null;
//     org.jfree.chart.util.RectangleEdge var17 = null;
//     java.util.List var18 = var1.refreshTicks(var14, var15, var16, var17);
// 
//   }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test15"); }


    org.jfree.data.time.SerialDate var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var1 = new org.jfree.data.time.Day(var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test16"); }


    org.jfree.chart.axis.AxisLocation var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.AxisLocation var1 = org.jfree.chart.axis.AxisLocation.getOpposite(var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test17"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    java.awt.Shape var5 = var0.getLeftArrow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test18() {}
//   public void test18() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test18"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var16 = null;
//     java.awt.geom.Rectangle2D var17 = null;
//     org.jfree.chart.util.RectangleEdge var18 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var19 = null;
//     org.jfree.chart.axis.AxisState var20 = var1.draw(var14, (-7.0d), var16, var17, var18, var19);
// 
//   }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test19"); }


    org.jfree.chart.plot.ValueMarker var2 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var3 = var2.getAlpha();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    org.jfree.chart.axis.TickUnitSource var6 = null;
    var4.setStandardTickUnits(var6);
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Paint var10 = var8.getTickLabelPaint();
    var4.setTickLabelPaint(var10);
    var2.setOutlinePaint(var10);
    java.awt.Stroke var13 = null;
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    org.jfree.chart.axis.TickUnitSource var17 = null;
    var15.setStandardTickUnits(var17);
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    java.awt.Paint var21 = var19.getTickLabelPaint();
    var15.setTickLabelPaint(var21);
    org.jfree.chart.plot.ValueMarker var24 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var25 = var24.getAlpha();
    java.awt.Stroke var26 = var24.getStroke();
    org.jfree.chart.plot.CategoryMarker var27 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var21, var26);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    org.jfree.chart.axis.TickUnitSource var31 = null;
    var29.setStandardTickUnits(var31);
    org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var34 = var33.getRange();
    java.awt.Paint var35 = var33.getTickLabelPaint();
    var29.setTickLabelPaint(var35);
    org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var39 = var38.getAlpha();
    java.awt.Stroke var40 = var38.getStroke();
    org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var35, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.CategoryMarker var43 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(short)(-1), var10, var13, var21, var40, (-1.0f));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test20"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange((-1.0d), (-7.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test21"); }


    java.awt.Color var2 = java.awt.Color.getColor("", 100);
    float[] var4 = new float[] { 0.0f};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var5 = var2.getRGBComponents(var4);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test22"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setTickMarkOutsideLength(100.0f);
//     var1.setLowerMargin(0.0d);
//     java.awt.Graphics2D var8 = null;
//     org.jfree.chart.axis.AxisState var9 = null;
//     java.awt.geom.Rectangle2D var10 = null;
//     org.jfree.chart.util.RectangleEdge var11 = null;
//     java.util.List var12 = var1.refreshTicks(var8, var9, var10, var11);
// 
//   }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test23"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    java.awt.Paint var3 = var0.getTickLabelPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange(100.0d, 10.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test24"); }


    float[] var5 = new float[] { (-1.0f), (-1.0f)};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var6 = java.awt.Color.RGBtoHSB(100, 0, 100, var5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test25"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test26"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    boolean var9 = var0.isNegativeArrowVisible();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange(1.0d, (-1.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test27"); }


    java.awt.Paint var1 = null;
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var4 = var3.getAlpha();
    java.awt.Stroke var5 = var3.getStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(0.0d, var1, var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test28"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day(1, 10, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test29"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth(0.0d);
    double var6 = var2.calculateRightInset(100.0d);
    java.awt.geom.Rectangle2D var7 = null;
    org.jfree.chart.plot.ValueMarker var9 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var10 = var9.getLabelOffsetType();
    org.jfree.chart.plot.ValueMarker var12 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var13 = var12.getLabelOffsetType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var14 = var2.createAdjustedRectangle(var7, var10, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test30"); }
// 
// 
//     org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var2.setStartValue(0.0d);
//     double var5 = var2.getStartValue();
//     org.jfree.chart.plot.IntervalMarker var8 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var8.setStartValue(0.0d);
//     double var11 = var8.getStartValue();
//     org.jfree.chart.plot.ValueMarker var13 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var14 = var13.getAlpha();
//     java.awt.Stroke var15 = var13.getStroke();
//     var8.setOutlineStroke(var15);
//     var2.setOutlineStroke(var15);
//     
//     // Checks the contract:  equals-hashcode on var2 and var8
//     assertTrue("Contract failed: equals-hashcode on var2 and var8", var2.equals(var8) ? var2.hashCode() == var8.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var2
//     assertTrue("Contract failed: equals-hashcode on var8 and var2", var8.equals(var2) ? var8.hashCode() == var2.hashCode() : true);
// 
//   }

  public void test31() {}
//   public void test31() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test31"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     java.awt.Graphics2D var16 = null;
//     org.jfree.chart.plot.Plot var17 = null;
//     java.awt.geom.Rectangle2D var18 = null;
//     org.jfree.chart.util.RectangleEdge var19 = null;
//     org.jfree.chart.axis.AxisSpace var20 = null;
//     org.jfree.chart.axis.AxisSpace var21 = var1.reserveSpace(var16, var17, var18, var19, var20);
// 
//   }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test32"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    org.jfree.chart.util.RectangleInsets var5 = var3.getLabelInsets();
    double var7 = var5.trimWidth((-1.0d));
    double var9 = var5.trimHeight((-6.0d));
    boolean var10 = var2.equals((java.lang.Object)var5);
    java.awt.geom.Rectangle2D var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var14 = var5.createInsetRectangle(var11, true, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test33"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.text.DateFormat var6 = var4.getDateFormatOverride();
    var4.resizeRange((-1.0d), (-1.0d));
    boolean var10 = var1.equals((java.lang.Object)var4);
    java.lang.Object var11 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test34"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.ChartColor var3 = new org.jfree.chart.ChartColor(100, 1, (-16646144));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test35"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.text.DateFormat var6 = var4.getDateFormatOverride();
    var4.resizeRange((-1.0d), (-1.0d));
    boolean var10 = var1.equals((java.lang.Object)var4);
    org.jfree.chart.util.RectangleInsets var11 = var1.getLabelOffset();
    java.awt.geom.Rectangle2D var12 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var15 = var11.createOutsetRectangle(var12, true, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test36"); }


    java.awt.Color var2 = java.awt.Color.getColor("hi!", (-16646144));
    float[] var4 = new float[] { 1.0f};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var5 = var2.getRGBColorComponents(var4);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test37() {}
//   public void test37() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test37"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var3 = null;
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var6 = null;
//     org.jfree.chart.axis.AxisState var7 = var0.draw(var1, (-1.0d), var3, var4, var5, var6);
// 
//   }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test38"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    java.awt.geom.Rectangle2D var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var6 = var2.createInsetRectangle(var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test39"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    java.awt.geom.Rectangle2D var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var10 = var2.createInsetRectangle(var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test40() {}
//   public void test40() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test40"); }
// 
// 
//     java.util.Locale var0 = null;
//     org.jfree.chart.axis.TickUnitSource var1 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits(var0);
// 
//   }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test41"); }


    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    java.awt.Color var8 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var3.setLabelPaint((java.awt.Paint)var8);
    org.jfree.chart.plot.ValueMarker var11 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var12 = var11.getAlpha();
    java.awt.Stroke var13 = var11.getStroke();
    java.awt.Color var16 = java.awt.Color.getColor("", 100);
    int var17 = var16.getRed();
    org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var20 = var19.getAlpha();
    java.awt.Stroke var21 = var19.getStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.IntervalMarker var23 = new org.jfree.chart.plot.IntervalMarker(10.0d, 0.0d, (java.awt.Paint)var8, var13, (java.awt.Paint)var16, var21, (-1.0f));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test42"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    var0.setRangeWithMargins(var5);
    java.util.TimeZone var7 = var0.getTimeZone();
    org.jfree.chart.axis.DateTickMarkPosition var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTickMarkPosition(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test43"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.trimHeight(0.0d);
    java.awt.geom.Rectangle2D var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var12 = var2.createOutsetRectangle(var9, false, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-6.0d));

  }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test44"); }
// 
// 
//     java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.IntervalMarker var3 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var3.setStartValue(0.0d);
//     double var6 = var3.getStartValue();
//     java.awt.Paint var7 = var3.getPaint();
//     java.awt.Paint[] var8 = new java.awt.Paint[] { var7};
//     org.jfree.chart.plot.ValueMarker var10 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var11 = var10.getAlpha();
//     java.awt.Stroke var12 = var10.getStroke();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     java.text.DateFormat var15 = var13.getDateFormatOverride();
//     var13.resizeRange((-1.0d), (-1.0d));
//     boolean var19 = var10.equals((java.lang.Object)var13);
//     org.jfree.chart.util.RectangleInsets var20 = var10.getLabelOffset();
//     java.awt.Paint var21 = var10.getOutlinePaint();
//     java.awt.Paint[] var22 = new java.awt.Paint[] { var21};
//     java.awt.Stroke[] var23 = null;
//     org.jfree.chart.plot.ValueMarker var25 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var26 = var25.getAlpha();
//     java.awt.Stroke var27 = var25.getStroke();
//     java.awt.Stroke[] var28 = new java.awt.Stroke[] { var27};
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     java.awt.Paint var31 = var29.getTickLabelPaint();
//     double var32 = var29.getLowerMargin();
//     java.awt.Shape var33 = var29.getLeftArrow();
//     java.awt.Shape var34 = var29.getLeftArrow();
//     java.awt.Shape[] var35 = new java.awt.Shape[] { var34};
//     org.jfree.chart.plot.DefaultDrawingSupplier var36 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var8, var22, var23, var28, var35);
//     
//     // Checks the contract:  equals-hashcode on var10 and var25
//     assertTrue("Contract failed: equals-hashcode on var10 and var25", var10.equals(var25) ? var10.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var10
//     assertTrue("Contract failed: equals-hashcode on var25 and var10", var25.equals(var10) ? var25.hashCode() == var10.hashCode() : true);
// 
//   }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test45"); }
// 
// 
//     org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     var1.setLabelPaint((java.awt.Paint)var6);
//     java.awt.color.ColorSpace var8 = null;
//     float[] var9 = new float[] { };
//     float[] var10 = var6.getComponents(var8, var9);
// 
//   }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test46"); }


    java.awt.Paint var1 = null;
    java.awt.Color var5 = java.awt.Color.getColor("", 100);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    org.jfree.chart.axis.TickUnitSource var9 = null;
    var7.setStandardTickUnits(var9);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    java.awt.Paint var13 = var11.getTickLabelPaint();
    var7.setTickLabelPaint(var13);
    org.jfree.chart.plot.ValueMarker var16 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var17 = var16.getAlpha();
    java.awt.Stroke var18 = var16.getStroke();
    org.jfree.chart.plot.CategoryMarker var19 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var13, var18);
    org.jfree.chart.plot.ValueMarker var20 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var5, var18);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    java.awt.Paint var24 = var21.getTickLabelPaint();
    org.jfree.chart.plot.IntervalMarker var27 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var27.setStartValue(0.0d);
    double var30 = var27.getStartValue();
    org.jfree.chart.plot.ValueMarker var32 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var33 = var32.getAlpha();
    java.awt.Stroke var34 = var32.getStroke();
    var27.setOutlineStroke(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.ValueMarker var37 = new org.jfree.chart.plot.ValueMarker(1.0d, var1, var18, var24, var34, 10.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test47"); }
// 
// 
//     java.awt.Color var3 = java.awt.Color.getColor("", 100);
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.axis.TickUnitSource var7 = null;
//     var5.setStandardTickUnits(var7);
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     java.awt.Paint var11 = var9.getTickLabelPaint();
//     var5.setTickLabelPaint(var11);
//     org.jfree.chart.plot.ValueMarker var14 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var15 = var14.getAlpha();
//     java.awt.Stroke var16 = var14.getStroke();
//     org.jfree.chart.plot.CategoryMarker var17 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var11, var16);
//     org.jfree.chart.plot.ValueMarker var18 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var3, var16);
//     java.awt.Color var23 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var24 = null;
//     java.awt.Rectangle var25 = null;
//     java.awt.geom.Rectangle2D var26 = null;
//     java.awt.geom.AffineTransform var27 = null;
//     java.awt.RenderingHints var28 = null;
//     java.awt.PaintContext var29 = var23.createContext(var24, var25, var26, var27, var28);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     org.jfree.chart.axis.TickUnitSource var33 = null;
//     var31.setStandardTickUnits(var33);
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     java.awt.Paint var37 = var35.getTickLabelPaint();
//     var31.setTickLabelPaint(var37);
//     org.jfree.chart.plot.ValueMarker var40 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var41 = var40.getAlpha();
//     java.awt.Stroke var42 = var40.getStroke();
//     org.jfree.chart.plot.CategoryMarker var43 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var37, var42);
//     java.awt.Color var47 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var48 = null;
//     java.awt.Rectangle var49 = null;
//     java.awt.geom.Rectangle2D var50 = null;
//     java.awt.geom.AffineTransform var51 = null;
//     java.awt.RenderingHints var52 = null;
//     java.awt.PaintContext var53 = var47.createContext(var48, var49, var50, var51, var52);
//     org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var55 = var54.getRange();
//     java.awt.Paint var56 = var54.getTickLabelPaint();
//     double var57 = var54.getLowerMargin();
//     java.awt.Shape var58 = var54.getLeftArrow();
//     java.awt.Stroke var59 = var54.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var61 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var23, var42, (java.awt.Paint)var47, var59, 0.8f);
//     var18.setStroke(var42);
//     
//     // Checks the contract:  equals-hashcode on var14 and var40
//     assertTrue("Contract failed: equals-hashcode on var14 and var40", var14.equals(var40) ? var14.hashCode() == var40.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var40 and var14
//     assertTrue("Contract failed: equals-hashcode on var40 and var14", var40.equals(var14) ? var40.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var43
//     assertTrue("Contract failed: equals-hashcode on var17 and var43", var17.equals(var43) ? var17.hashCode() == var43.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var43 and var17
//     assertTrue("Contract failed: equals-hashcode on var43 and var17", var43.equals(var17) ? var43.hashCode() == var17.hashCode() : true);
// 
//   }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test48"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.text.DateFormat var6 = var4.getDateFormatOverride();
    var4.resizeRange((-1.0d), (-1.0d));
    boolean var10 = var1.equals((java.lang.Object)var4);
    org.jfree.chart.util.RectangleInsets var11 = var1.getLabelOffset();
    java.awt.Paint var12 = var1.getOutlinePaint();
    org.jfree.chart.text.TextAnchor var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setLabelTextAnchor(var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test49"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    var1.setValue(9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test50"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.annotations.CategoryAnnotation var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.removeAnnotation(var2, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test51"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxisLocation(var1, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test52"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxisLocation(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test53() {}
//   public void test53() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test53"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     org.jfree.chart.axis.TickUnitSource var18 = null;
//     var16.setStandardTickUnits(var18);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     java.awt.Paint var22 = var20.getTickLabelPaint();
//     var16.setTickLabelPaint(var22);
//     org.jfree.chart.plot.ValueMarker var25 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var26 = var25.getAlpha();
//     java.awt.Stroke var27 = var25.getStroke();
//     org.jfree.chart.plot.CategoryMarker var28 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var22, var27);
//     var0.setRangeCrosshairStroke(var27);
//     
//     // Checks the contract:  equals-hashcode on var3 and var25
//     assertTrue("Contract failed: equals-hashcode on var3 and var25", var3.equals(var25) ? var3.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var3
//     assertTrue("Contract failed: equals-hashcode on var25 and var3", var25.equals(var3) ? var25.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test54"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    java.awt.geom.Rectangle2D var5 = null;
    org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var8 = var7.getLabelOffsetType();
    org.jfree.chart.plot.ValueMarker var10 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var11 = var10.getLabelOffsetType();
    java.awt.Color var14 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var15 = null;
    java.awt.Rectangle var16 = null;
    java.awt.geom.Rectangle2D var17 = null;
    java.awt.geom.AffineTransform var18 = null;
    java.awt.RenderingHints var19 = null;
    java.awt.PaintContext var20 = var14.createContext(var15, var16, var17, var18, var19);
    boolean var21 = var11.equals((java.lang.Object)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var22 = var2.createAdjustedRectangle(var5, var8, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test55"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    java.lang.String var3 = var2.toString();
    double var5 = var2.calculateTopOutset(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"+ "'", var3.equals("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3.0d);

  }

  public void test56() {}
//   public void test56() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test56"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Class var1 = org.jfree.data.time.RegularTimePeriod.downsize(var0);
// 
//   }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test57"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    org.jfree.chart.axis.DateTickMarkPosition var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTickMarkPosition(var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test58"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    org.jfree.chart.util.RectangleInsets var5 = var3.getLabelInsets();
    double var7 = var5.trimWidth((-1.0d));
    double var9 = var5.trimHeight((-6.0d));
    boolean var10 = var2.equals((java.lang.Object)var5);
    java.awt.geom.Rectangle2D var11 = null;
    org.jfree.chart.plot.ValueMarker var13 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var14 = var13.getLabelOffsetType();
    org.jfree.chart.plot.ValueMarker var16 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var17 = var16.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    org.jfree.chart.util.RectangleInsets var20 = var18.getLabelInsets();
    double var22 = var20.trimWidth((-1.0d));
    double var24 = var20.trimHeight((-6.0d));
    boolean var25 = var17.equals((java.lang.Object)var20);
    java.lang.String var26 = var17.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var27 = var5.createAdjustedRectangle(var11, var14, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "CONTRACT"+ "'", var26.equals("CONTRACT"));

  }

  public void test59() {}
//   public void test59() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test59"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.PlotRenderingInfo var2 = null;
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     boolean var5 = var3.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var7 = null;
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.chart.util.RectangleAnchor var9 = null;
//     java.awt.geom.Point2D var10 = org.jfree.chart.util.RectangleAnchor.coordinates(var8, var9);
//     var3.zoomRangeAxes(0.05d, var7, var10);
//     var0.zoomDomainAxes(0.05d, var2, var10);
//     
//     // Checks the contract:  equals-hashcode on var0 and var3
//     assertTrue("Contract failed: equals-hashcode on var0 and var3", var0.equals(var3) ? var0.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var0
//     assertTrue("Contract failed: equals-hashcode on var3 and var0", var3.equals(var0) ? var3.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test60"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var5 = var0.getParent();
    org.jfree.chart.plot.IntervalMarker var8 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var8.setStartValue(0.0d);
    double var11 = var8.getStartValue();
    java.awt.Paint var12 = var8.getPaint();
    var0.setOutlinePaint(var12);
    org.jfree.chart.axis.AxisLocation var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxisLocation(var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test61"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    var0.setOutlineVisible(false);
    org.jfree.chart.plot.CategoryMarker var19 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    org.jfree.chart.util.Layer var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(10, var19, var20, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test62() {}
//   public void test62() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test62"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.plot.Marker var3 = null;
//     org.jfree.chart.util.Layer var4 = null;
//     var0.addRangeMarker(var3, var4);
// 
//   }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test63"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getFirstMillisecond(var1);
// 
//   }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test64"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var12 = var7.getParent();
//     var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     boolean var14 = var7.isRangeZoomable();
//     java.awt.Color var19 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var20 = null;
//     java.awt.Rectangle var21 = null;
//     java.awt.geom.Rectangle2D var22 = null;
//     java.awt.geom.AffineTransform var23 = null;
//     java.awt.RenderingHints var24 = null;
//     java.awt.PaintContext var25 = var19.createContext(var20, var21, var22, var23, var24);
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var28 = var27.getRange();
//     org.jfree.chart.axis.TickUnitSource var29 = null;
//     var27.setStandardTickUnits(var29);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     java.awt.Paint var33 = var31.getTickLabelPaint();
//     var27.setTickLabelPaint(var33);
//     org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var37 = var36.getAlpha();
//     java.awt.Stroke var38 = var36.getStroke();
//     org.jfree.chart.plot.CategoryMarker var39 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var33, var38);
//     java.awt.Color var43 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var44 = null;
//     java.awt.Rectangle var45 = null;
//     java.awt.geom.Rectangle2D var46 = null;
//     java.awt.geom.AffineTransform var47 = null;
//     java.awt.RenderingHints var48 = null;
//     java.awt.PaintContext var49 = var43.createContext(var44, var45, var46, var47, var48);
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     java.awt.Paint var52 = var50.getTickLabelPaint();
//     double var53 = var50.getLowerMargin();
//     java.awt.Shape var54 = var50.getLeftArrow();
//     java.awt.Stroke var55 = var50.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var57 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var19, var38, (java.awt.Paint)var43, var55, 0.8f);
//     var7.setDomainGridlineStroke(var55);
//     java.awt.Graphics2D var59 = null;
//     java.awt.geom.Rectangle2D var60 = null;
//     var7.drawOutline(var59, var60);
// 
//   }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test65"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.text.DateFormat var5 = var3.getDateFormatOverride();
    var3.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var9 = var3.getLabelFont();
    var0.setNoDataMessageFont(var9);
    org.jfree.chart.util.SortOrder var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRowRenderingOrder(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test66() {}
//   public void test66() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test66"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var11 = null;
//     java.awt.Rectangle var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     java.awt.geom.AffineTransform var14 = null;
//     java.awt.RenderingHints var15 = null;
//     java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     org.jfree.chart.axis.TickUnitSource var20 = null;
//     var18.setStandardTickUnits(var20);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     var18.setTickLabelPaint(var24);
//     org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var28 = var27.getAlpha();
//     java.awt.Stroke var29 = var27.getStroke();
//     org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
//     java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var35 = null;
//     java.awt.Rectangle var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     java.awt.geom.AffineTransform var38 = null;
//     java.awt.RenderingHints var39 = null;
//     java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.awt.Paint var43 = var41.getTickLabelPaint();
//     double var44 = var41.getLowerMargin();
//     java.awt.Shape var45 = var41.getLeftArrow();
//     java.awt.Stroke var46 = var41.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
//     boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
//     org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var52 = var51.getRange();
//     org.jfree.chart.axis.TickUnitSource var53 = null;
//     var51.setStandardTickUnits(var53);
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var56 = var55.getRange();
//     java.awt.Paint var57 = var55.getTickLabelPaint();
//     var51.setTickLabelPaint(var57);
//     org.jfree.chart.plot.ValueMarker var60 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var61 = var60.getAlpha();
//     java.awt.Stroke var62 = var60.getStroke();
//     org.jfree.chart.plot.CategoryMarker var63 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var57, var62);
//     var0.setRangeGridlineStroke(var62);
//     
//     // Checks the contract:  equals-hashcode on var27 and var60
//     assertTrue("Contract failed: equals-hashcode on var27 and var60", var27.equals(var60) ? var27.hashCode() == var60.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var60 and var27
//     assertTrue("Contract failed: equals-hashcode on var60 and var27", var60.equals(var27) ? var60.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var63
//     assertTrue("Contract failed: equals-hashcode on var30 and var63", var30.equals(var63) ? var30.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var30
//     assertTrue("Contract failed: equals-hashcode on var63 and var30", var63.equals(var30) ? var63.hashCode() == var30.hashCode() : true);
// 
//   }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test67"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var9 = var0.getPlot();
    java.awt.Shape var10 = var0.getDownArrow();
    boolean var11 = var0.isPositiveArrowVisible();
    var0.setLabelAngle(0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange(3.0d, (-12.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test68"); }


    org.jfree.chart.event.ChartChangeEvent var1 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    org.jfree.chart.event.ChartChangeEventType var2 = null;
    var1.setType(var2);
    java.lang.String var4 = var1.toString();
    org.jfree.chart.event.ChartChangeEventType var5 = null;
    var1.setType(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var4.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));

  }

  public void test69() {}
//   public void test69() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test69"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     var1.setCategoryLabelPositionOffset((-668));
//     java.awt.Graphics2D var18 = null;
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     var19.clearRangeAxes();
//     boolean var21 = var19.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var23 = var19.getRangeAxis((-16646144));
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.util.RectangleEdge var25 = null;
//     org.jfree.chart.axis.AxisSpace var26 = null;
//     org.jfree.chart.axis.AxisSpace var27 = var1.reserveSpace(var18, (org.jfree.chart.plot.Plot)var19, var24, var25, var26);
// 
//   }

  public void test70() {}
//   public void test70() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test70"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     java.util.Calendar var1 = null;
//     long var2 = var0.getLastMillisecond(var1);
// 
//   }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test71"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var6 = var0.getLabelFont();
    org.jfree.data.general.Dataset var7 = null;
    org.jfree.data.general.DatasetChangeEvent var8 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var0, var7);
    org.jfree.chart.axis.Timeline var9 = var0.getTimeline();
    boolean var10 = var0.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test72"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.plot.DrawingSupplier var5 = var0.getDrawingSupplier();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.text.DateFormat var9 = var7.getDateFormatOverride();
    var7.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var13 = var7.getStandardTickUnits();
    var7.setLabelURL("");
    boolean var16 = var7.isNegativeArrowVisible();
    float var17 = var7.getTickMarkOutsideLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxis((-16646144), (org.jfree.chart.axis.ValueAxis)var7, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2.0f);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test73"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setCategoryLabelPositionOffset((-16646144));
    org.jfree.chart.util.RectangleInsets var8 = var1.getTickLabelInsets();
    java.awt.geom.Rectangle2D var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var12 = var8.createInsetRectangle(var9, false, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test74() {}
//   public void test74() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test74"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     var0.zoom(100.0d);
// 
//   }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test75"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
//     org.jfree.chart.axis.CategoryAxis var4 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var10 = null;
//     java.awt.Rectangle var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     java.awt.geom.AffineTransform var13 = null;
//     java.awt.RenderingHints var14 = null;
//     java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
//     var4.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var9);
//     var0.setAxisLinePaint((java.awt.Paint)var9);
//     java.awt.color.ColorSpace var18 = null;
//     float[] var20 = new float[] { 0.0f};
//     float[] var21 = var9.getColorComponents(var18, var20);
// 
//   }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test76"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    org.jfree.chart.axis.TickUnitSource var20 = null;
    var18.setStandardTickUnits(var20);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.awt.Paint var24 = var22.getTickLabelPaint();
    var18.setTickLabelPaint(var24);
    org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var28 = var27.getAlpha();
    java.awt.Stroke var29 = var27.getStroke();
    org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
    java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var35 = null;
    java.awt.Rectangle var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    java.awt.geom.AffineTransform var38 = null;
    java.awt.RenderingHints var39 = null;
    java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
    org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var42 = var41.getRange();
    java.awt.Paint var43 = var41.getTickLabelPaint();
    double var44 = var41.getLowerMargin();
    java.awt.Shape var45 = var41.getLeftArrow();
    java.awt.Stroke var46 = var41.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
    boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
    org.jfree.chart.plot.Marker var50 = null;
    boolean var51 = var0.removeDomainMarker(var50);
    org.jfree.chart.axis.AxisLocation var52 = var0.getDomainAxisLocation();
    org.jfree.chart.plot.PlotOrientation var53 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.RectangleEdge var54 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var52, var53);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test77"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.data.category.CategoryDataset var3 = var0.getDataset();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    java.awt.Shape var7 = var5.getLeftArrow();
    var5.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    var10.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var10.setRangeWithMargins(var15);
    java.util.TimeZone var17 = var10.getTimeZone();
    var5.setTimeZone(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxis((-1), (org.jfree.chart.axis.ValueAxis)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test78() {}
//   public void test78() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test78"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     java.awt.Stroke var15 = var0.getRangeCrosshairStroke();
//     java.awt.Graphics2D var16 = null;
//     java.awt.geom.Rectangle2D var17 = null;
//     var0.drawOutline(var16, var17);
// 
//   }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test79"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    double var2 = var0.getUpperMargin();
    java.util.TimeZone var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTimeZone(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.05d);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test80"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Color var1 = java.awt.Color.decode("org.jfree.chart.event.ChartChangeEvent[source=-1]");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test81"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    java.awt.Image var14 = null;
    var7.setBackgroundImage(var14);
    org.jfree.chart.axis.CategoryAnchor var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setDomainGridlinePosition(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test82"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setAutoRangeMinimumSize(9.223372036854776E18d);
    java.awt.Stroke var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTickMarkStroke(var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test83() {}
//   public void test83() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test83"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     org.jfree.chart.axis.AxisSpace var10 = null;
//     var0.setFixedDomainAxisSpace(var10, true);
//     java.lang.Object var13 = var0.clone();
//     java.lang.String var14 = var0.getNoDataMessage();
//     org.jfree.chart.plot.PlotRenderingInfo var16 = null;
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
//     var18.clearRangeAxes();
//     boolean var20 = var18.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var22 = var18.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var23 = var18.getParent();
//     org.jfree.chart.axis.AxisLocation var25 = var18.getDomainAxisLocation((-668));
//     var17.setRangeAxisLocation(var25);
//     org.jfree.chart.axis.AxisSpace var27 = null;
//     var17.setFixedDomainAxisSpace(var27, true);
//     org.jfree.chart.plot.PlotRenderingInfo var31 = null;
//     java.awt.geom.Rectangle2D var32 = null;
//     org.jfree.chart.util.RectangleAnchor var33 = null;
//     java.awt.geom.Point2D var34 = org.jfree.chart.util.RectangleAnchor.coordinates(var32, var33);
//     var17.zoomDomainAxes(9.223372036854776E18d, var31, var34);
//     var0.zoomDomainAxes(3.0d, var16, var34);
//     
//     // Checks the contract:  equals-hashcode on var0 and var17
//     assertTrue("Contract failed: equals-hashcode on var0 and var17", var0.equals(var17) ? var0.hashCode() == var17.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var1 and var18
//     assertTrue("Contract failed: equals-hashcode on var1 and var18", var1.equals(var18) ? var1.hashCode() == var18.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var1
//     assertTrue("Contract failed: equals-hashcode on var18 and var1", var18.equals(var1) ? var18.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test84() {}
//   public void test84() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test84"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var11 = null;
//     java.awt.Rectangle var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     java.awt.geom.AffineTransform var14 = null;
//     java.awt.RenderingHints var15 = null;
//     java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     org.jfree.chart.axis.TickUnitSource var20 = null;
//     var18.setStandardTickUnits(var20);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     var18.setTickLabelPaint(var24);
//     org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var28 = var27.getAlpha();
//     java.awt.Stroke var29 = var27.getStroke();
//     org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
//     java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var35 = null;
//     java.awt.Rectangle var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     java.awt.geom.AffineTransform var38 = null;
//     java.awt.RenderingHints var39 = null;
//     java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.awt.Paint var43 = var41.getTickLabelPaint();
//     double var44 = var41.getLowerMargin();
//     java.awt.Shape var45 = var41.getLeftArrow();
//     java.awt.Stroke var46 = var41.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
//     boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
//     org.jfree.chart.plot.Marker var50 = null;
//     boolean var51 = var0.removeDomainMarker(var50);
//     org.jfree.chart.axis.AxisLocation var52 = var0.getDomainAxisLocation();
//     var0.zoom(0.0d);
// 
//   }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test85"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    org.jfree.chart.plot.IntervalMarker var7 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var7.setStartValue(0.0d);
    double var10 = var7.getStartValue();
    org.jfree.chart.plot.ValueMarker var12 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var13 = var12.getAlpha();
    java.awt.Stroke var14 = var12.getStroke();
    var7.setOutlineStroke(var14);
    java.awt.Color var18 = java.awt.Color.getColor("", 100);
    int var19 = var18.getRed();
    java.awt.Stroke var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(1.0d, var4, var14, (java.awt.Paint)var18, var20, (-1.0f));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test86"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setRange(0.0d, 100.0d);
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.data.xy.XYDataset var7 = null;
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     java.awt.Paint var10 = var8.getTickLabelPaint();
//     java.awt.Paint var11 = var8.getTickLabelPaint();
//     var8.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     var14.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     var14.setRangeWithMargins(var19);
//     org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot(var7, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.axis.ValueAxis)var14, var21);
//     org.jfree.chart.util.RectangleEdge var24 = var22.getDomainAxisEdge(12);
//     double var25 = var0.valueToJava2D(0.0d, var6, var24);
// 
//   }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test87"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    org.jfree.chart.plot.DatasetRenderingOrder var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setDatasetRenderingOrder(var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test88"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setLabelURL("hi!");
    java.awt.Shape var9 = var0.getRightArrow();
    org.jfree.chart.axis.TickUnitSource var10 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits();
    var0.setStandardTickUnits(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test89"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.AxisLocation var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setRangeAxisLocation(var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test90() {}
//   public void test90() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test90"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Date var11 = var0.getStart();
//     java.util.Calendar var12 = null;
//     long var13 = var0.getLastMillisecond(var12);
// 
//   }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test91"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Shape var2 = var0.getLeftArrow();
    var0.setPositiveArrowVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test92"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var12 = var7.getParent();
//     var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     org.jfree.data.category.CategoryDataset var15 = null;
//     var7.setDataset(1, var15);
//     org.jfree.chart.plot.PlotRenderingInfo var19 = null;
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     boolean var22 = var20.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var24 = null;
//     java.awt.geom.Rectangle2D var25 = null;
//     org.jfree.chart.util.RectangleAnchor var26 = null;
//     java.awt.geom.Point2D var27 = org.jfree.chart.util.RectangleAnchor.coordinates(var25, var26);
//     var20.zoomRangeAxes(0.05d, var24, var27);
//     var7.zoomRangeAxes((-6.0d), 9.223372036854776E18d, var19, var27);
//     
//     // Checks the contract:  equals-hashcode on var7 and var20
//     assertTrue("Contract failed: equals-hashcode on var7 and var20", var7.equals(var20) ? var7.hashCode() == var20.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var7
//     assertTrue("Contract failed: equals-hashcode on var20 and var7", var20.equals(var7) ? var20.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test93"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    java.awt.Paint var3 = var0.getTickLabelPaint();
    var0.setFixedAutoRange(3.0d);
    org.jfree.data.Range var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test94"); }


    java.awt.Color var2 = java.awt.Color.getColor("", 100);
    int var3 = var2.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 255);

  }

  public void test95() {}
//   public void test95() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test95"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     java.awt.Graphics2D var3 = null;
//     org.jfree.chart.axis.AxisState var4 = null;
//     java.awt.geom.Rectangle2D var5 = null;
//     org.jfree.data.xy.XYDataset var6 = null;
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     java.awt.Paint var9 = var7.getTickLabelPaint();
//     java.awt.Paint var10 = var7.getTickLabelPaint();
//     var7.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     var13.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     var13.setRangeWithMargins(var18);
//     org.jfree.chart.renderer.xy.XYItemRenderer var20 = null;
//     org.jfree.chart.plot.XYPlot var21 = new org.jfree.chart.plot.XYPlot(var6, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.axis.ValueAxis)var13, var20);
//     org.jfree.chart.util.RectangleEdge var23 = var21.getDomainAxisEdge(12);
//     java.util.List var24 = var1.refreshTicks(var3, var4, var5, var23);
// 
//   }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test96"); }
// 
// 
//     java.awt.Color var2 = java.awt.Color.getColor("", 100);
//     java.awt.color.ColorSpace var3 = null;
//     float[] var10 = new float[] { 100.0f, 1.0f, (-1.0f)};
//     float[] var11 = java.awt.Color.RGBtoHSB((-1), 100, 100, var10);
//     float[] var12 = var2.getComponents(var3, var11);
// 
//   }

  public void test97() {}
//   public void test97() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test97"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.removeCategoryLabelToolTip((java.lang.Comparable)100L);
//     java.lang.String var17 = var1.getCategoryLabelToolTip((java.lang.Comparable)10L);
//     java.awt.Graphics2D var18 = null;
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     var19.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var21 = var19.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var23 = null;
//     var19.setRenderer(255, var23);
//     org.jfree.chart.plot.IntervalMarker var28 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     org.jfree.chart.util.Layer var29 = null;
//     var19.addRangeMarker(10, (org.jfree.chart.plot.Marker)var28, var29, true);
//     java.awt.geom.Rectangle2D var32 = null;
//     org.jfree.data.xy.XYDataset var33 = null;
//     org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var35 = var34.getRange();
//     java.awt.Paint var36 = var34.getTickLabelPaint();
//     java.awt.Paint var37 = var34.getTickLabelPaint();
//     var34.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     var40.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var45 = var44.getRange();
//     var40.setRangeWithMargins(var45);
//     org.jfree.chart.renderer.xy.XYItemRenderer var47 = null;
//     org.jfree.chart.plot.XYPlot var48 = new org.jfree.chart.plot.XYPlot(var33, (org.jfree.chart.axis.ValueAxis)var34, (org.jfree.chart.axis.ValueAxis)var40, var47);
//     org.jfree.chart.util.RectangleEdge var50 = var48.getDomainAxisEdge(12);
//     org.jfree.chart.axis.AxisSpace var51 = null;
//     org.jfree.chart.axis.AxisSpace var52 = var1.reserveSpace(var18, (org.jfree.chart.plot.Plot)var19, var32, var50, var51);
// 
//   }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test98"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.clearRangeAxes();
//     boolean var32 = var30.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var34 = var30.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var35 = var30.getParent();
//     org.jfree.chart.axis.AxisLocation var37 = var30.getDomainAxisLocation((-668));
//     var29.setRangeAxisLocation(var37);
//     var15.setRangeAxisLocation(255, var37);
//     
//     // Checks the contract:  equals-hashcode on var20 and var30
//     assertTrue("Contract failed: equals-hashcode on var20 and var30", var20.equals(var30) ? var20.hashCode() == var30.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var20
//     assertTrue("Contract failed: equals-hashcode on var30 and var20", var30.equals(var20) ? var30.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test99"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    boolean var9 = var0.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    var10.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var10.setRangeWithMargins(var15);
    var0.setRange(var15);
    org.jfree.chart.util.ObjectList var18 = new org.jfree.chart.util.ObjectList();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    var19.setRange(0.0d, 100.0d);
    boolean var24 = var19.isInverted();
    org.jfree.chart.axis.Timeline var25 = var19.getTimeline();
    boolean var26 = var19.isVisible();
    org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var28 = var27.getRange();
    java.awt.Shape var29 = var27.getLeftArrow();
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    var30.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    var30.setRangeWithMargins(var35);
    var27.setRangeWithMargins(var35, true, true);
    var19.setRange(var35);
    boolean var41 = var18.equals((java.lang.Object)var35);
    var0.setRange(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test100"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    java.lang.Object var2 = var1.clone();
    org.jfree.data.Range var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setRange(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test101"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.mapDatasetToRangeAxis((-16646144), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test102"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    org.jfree.chart.axis.NumberTickUnit var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setTickUnit(var2, true, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test103"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.plot.IntervalMarker var14 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    java.lang.String var15 = var14.getLabel();
    org.jfree.chart.util.Layer var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker((org.jfree.chart.plot.Marker)var14, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test104"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBackgroundImageAlpha(2.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test105"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var7 = null;
    java.awt.Rectangle var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    java.awt.geom.AffineTransform var10 = null;
    java.awt.RenderingHints var11 = null;
    java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
    var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
    var1.removeCategoryLabelToolTip((java.lang.Comparable)100L);
    var1.setMaximumCategoryLabelLines(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test106"); }


    java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.Stroke var6 = null;
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    org.jfree.chart.axis.TickUnitSource var10 = null;
    var8.setStandardTickUnits(var10);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    java.awt.Paint var14 = var12.getTickLabelPaint();
    var8.setTickLabelPaint(var14);
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var18 = var17.getAlpha();
    java.awt.Stroke var19 = var17.getStroke();
    org.jfree.chart.plot.CategoryMarker var20 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var14, var19);
    org.jfree.chart.axis.CategoryAxis var22 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.util.RectangleEdge var26 = null;
    double var27 = var22.getCategoryMiddle(0, (-1), var25, var26);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    var28.clearRangeAxes();
    boolean var30 = var28.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var32 = var28.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var33 = var28.getParent();
    var22.addChangeListener((org.jfree.chart.event.AxisChangeListener)var28);
    boolean var35 = var28.isRangeZoomable();
    java.awt.Color var40 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var41 = null;
    java.awt.Rectangle var42 = null;
    java.awt.geom.Rectangle2D var43 = null;
    java.awt.geom.AffineTransform var44 = null;
    java.awt.RenderingHints var45 = null;
    java.awt.PaintContext var46 = var40.createContext(var41, var42, var43, var44, var45);
    org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var49 = var48.getRange();
    org.jfree.chart.axis.TickUnitSource var50 = null;
    var48.setStandardTickUnits(var50);
    org.jfree.chart.axis.DateAxis var52 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var53 = var52.getRange();
    java.awt.Paint var54 = var52.getTickLabelPaint();
    var48.setTickLabelPaint(var54);
    org.jfree.chart.plot.ValueMarker var57 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var58 = var57.getAlpha();
    java.awt.Stroke var59 = var57.getStroke();
    org.jfree.chart.plot.CategoryMarker var60 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var54, var59);
    java.awt.Color var64 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var65 = null;
    java.awt.Rectangle var66 = null;
    java.awt.geom.Rectangle2D var67 = null;
    java.awt.geom.AffineTransform var68 = null;
    java.awt.RenderingHints var69 = null;
    java.awt.PaintContext var70 = var64.createContext(var65, var66, var67, var68, var69);
    org.jfree.chart.axis.DateAxis var71 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var72 = var71.getRange();
    java.awt.Paint var73 = var71.getTickLabelPaint();
    double var74 = var71.getLowerMargin();
    java.awt.Shape var75 = var71.getLeftArrow();
    java.awt.Stroke var76 = var71.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var78 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var40, var59, (java.awt.Paint)var64, var76, 0.8f);
    var28.setDomainGridlineStroke(var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.IntervalMarker var81 = new org.jfree.chart.plot.IntervalMarker(10.0d, (-12.0d), (java.awt.Paint)var5, var6, var14, var76, 1.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test107"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test108() {}
//   public void test108() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test108"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     java.awt.Graphics2D var3 = null;
//     java.awt.geom.Rectangle2D var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.data.xy.XYDataset var7 = null;
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     java.awt.Paint var10 = var8.getTickLabelPaint();
//     java.awt.Paint var11 = var8.getTickLabelPaint();
//     var8.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     var14.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     var14.setRangeWithMargins(var19);
//     org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot(var7, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.axis.ValueAxis)var14, var21);
//     org.jfree.chart.util.RectangleEdge var24 = var22.getDomainAxisEdge(12);
//     org.jfree.chart.plot.PlotRenderingInfo var25 = null;
//     org.jfree.chart.axis.AxisState var26 = var1.draw(var3, 0.0d, var5, var6, var24, var25);
// 
//   }

  public void test109() {}
//   public void test109() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test109"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.awt.Graphics2D var2 = null;
//     org.jfree.chart.axis.AxisState var3 = null;
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.data.xy.XYDataset var5 = null;
//     org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var7 = var6.getRange();
//     java.awt.Paint var8 = var6.getTickLabelPaint();
//     java.awt.Paint var9 = var6.getTickLabelPaint();
//     var6.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var13 = var12.getRange();
//     var12.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     var12.setRangeWithMargins(var17);
//     org.jfree.chart.renderer.xy.XYItemRenderer var19 = null;
//     org.jfree.chart.plot.XYPlot var20 = new org.jfree.chart.plot.XYPlot(var5, (org.jfree.chart.axis.ValueAxis)var6, (org.jfree.chart.axis.ValueAxis)var12, var19);
//     org.jfree.chart.util.RectangleEdge var22 = var20.getDomainAxisEdge(12);
//     java.util.List var23 = var1.refreshTicks(var2, var3, var4, var22);
// 
//   }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test110"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    var15.setRangeGridlinesVisible(true);
    org.jfree.chart.plot.ValueMarker var20 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var21 = var20.getAlpha();
    java.awt.Stroke var22 = var20.getStroke();
    float var23 = var20.getAlpha();
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    org.jfree.chart.axis.TickUnitSource var27 = null;
    var25.setStandardTickUnits(var27);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    java.awt.Paint var31 = var29.getTickLabelPaint();
    var25.setTickLabelPaint(var31);
    org.jfree.chart.plot.ValueMarker var34 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var35 = var34.getAlpha();
    java.awt.Stroke var36 = var34.getStroke();
    org.jfree.chart.plot.CategoryMarker var37 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var31, var36);
    var20.setOutlinePaint(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setQuadrantPaint((-16777116), var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test111"); }


    java.awt.Color var2 = java.awt.Color.getColor("", 100);
    int var3 = var2.getRed();
    int var4 = var2.getAlpha();
    float[] var8 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var9 = var2.getColorComponents(var8);
    int var10 = var2.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 255);

  }

  public void test112() {}
//   public void test112() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test112"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     var0.setRangeGridlinesVisible(false);
//     java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var10 = null;
//     java.awt.Rectangle var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     java.awt.geom.AffineTransform var13 = null;
//     java.awt.RenderingHints var14 = null;
//     java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     org.jfree.chart.axis.TickUnitSource var19 = null;
//     var17.setStandardTickUnits(var19);
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.awt.Paint var23 = var21.getTickLabelPaint();
//     var17.setTickLabelPaint(var23);
//     org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var27 = var26.getAlpha();
//     java.awt.Stroke var28 = var26.getStroke();
//     org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
//     java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var34 = null;
//     java.awt.Rectangle var35 = null;
//     java.awt.geom.Rectangle2D var36 = null;
//     java.awt.geom.AffineTransform var37 = null;
//     java.awt.RenderingHints var38 = null;
//     java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     java.awt.Paint var42 = var40.getTickLabelPaint();
//     double var43 = var40.getLowerMargin();
//     java.awt.Shape var44 = var40.getLeftArrow();
//     java.awt.Stroke var45 = var40.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
//     var0.setDomainGridlinePaint((java.awt.Paint)var33);
//     java.awt.color.ColorSpace var49 = null;
//     java.awt.Color var55 = java.awt.Color.getColor("", 100);
//     int var56 = var55.getRed();
//     int var57 = var55.getAlpha();
//     float[] var61 = new float[] { 100.0f, 100.0f, 0.0f};
//     float[] var62 = var55.getColorComponents(var61);
//     float[] var63 = java.awt.Color.RGBtoHSB(20, 255, 12, var61);
//     float[] var64 = var33.getComponents(var49, var63);
// 
//   }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test113"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    java.awt.Paint var3 = var0.getTickLabelPaint();
    var0.setFixedAutoRange(3.0d);
    boolean var6 = var0.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test114() {}
//   public void test114() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test114"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     org.jfree.chart.plot.Marker var11 = null;
//     org.jfree.chart.util.Layer var12 = null;
//     var0.addRangeMarker(0, var11, var12);
// 
//   }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test115"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    float var19 = var15.getForegroundAlpha();
    org.jfree.chart.plot.ValueMarker var21 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var22 = var21.getAlpha();
    java.awt.Stroke var23 = var21.getStroke();
    org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var25 = var24.getRange();
    java.text.DateFormat var26 = var24.getDateFormatOverride();
    var24.resizeRange((-1.0d), (-1.0d));
    boolean var30 = var21.equals((java.lang.Object)var24);
    org.jfree.chart.util.RectangleInsets var31 = var21.getLabelOffset();
    java.awt.Paint var32 = var21.getOutlinePaint();
    org.jfree.chart.util.Layer var33 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((org.jfree.chart.plot.Marker)var21, var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test116"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.annotations.XYAnnotation var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var19 = var15.removeAnnotation(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test117"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.data.category.CategoryDataset var3 = var0.getDataset();
//     org.jfree.chart.plot.DatasetRenderingOrder var4 = var0.getDatasetRenderingOrder();
//     org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
//     var6.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var8 = var6.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var10 = null;
//     var6.setRenderer(255, var10);
//     java.awt.Color var16 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var17 = null;
//     java.awt.Rectangle var18 = null;
//     java.awt.geom.Rectangle2D var19 = null;
//     java.awt.geom.AffineTransform var20 = null;
//     java.awt.RenderingHints var21 = null;
//     java.awt.PaintContext var22 = var16.createContext(var17, var18, var19, var20, var21);
//     org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var25 = var24.getRange();
//     org.jfree.chart.axis.TickUnitSource var26 = null;
//     var24.setStandardTickUnits(var26);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     java.awt.Paint var30 = var28.getTickLabelPaint();
//     var24.setTickLabelPaint(var30);
//     org.jfree.chart.plot.ValueMarker var33 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var34 = var33.getAlpha();
//     java.awt.Stroke var35 = var33.getStroke();
//     org.jfree.chart.plot.CategoryMarker var36 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var30, var35);
//     java.awt.Color var40 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var41 = null;
//     java.awt.Rectangle var42 = null;
//     java.awt.geom.Rectangle2D var43 = null;
//     java.awt.geom.AffineTransform var44 = null;
//     java.awt.RenderingHints var45 = null;
//     java.awt.PaintContext var46 = var40.createContext(var41, var42, var43, var44, var45);
//     org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var48 = var47.getRange();
//     java.awt.Paint var49 = var47.getTickLabelPaint();
//     double var50 = var47.getLowerMargin();
//     java.awt.Shape var51 = var47.getLeftArrow();
//     java.awt.Stroke var52 = var47.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var54 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var16, var35, (java.awt.Paint)var40, var52, 0.8f);
//     boolean var55 = var6.removeRangeMarker((org.jfree.chart.plot.Marker)var54);
//     org.jfree.chart.plot.Marker var56 = null;
//     boolean var57 = var6.removeDomainMarker(var56);
//     org.jfree.chart.axis.AxisLocation var58 = var6.getDomainAxisLocation();
//     var0.setRangeAxisLocation(10, var58, false);
//     
//     // Checks the contract:  equals-hashcode on var6 and var0
//     assertTrue("Contract failed: equals-hashcode on var6 and var0", var6.equals(var0) ? var6.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var6 and var0.", var6.equals(var0) == var0.equals(var6));
// 
//   }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test118"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.text.DateFormat var5 = var3.getDateFormatOverride();
    var3.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var9 = var3.getLabelFont();
    var0.setNoDataMessageFont(var9);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    java.text.DateFormat var14 = var12.getDateFormatOverride();
    java.awt.Shape var15 = var12.getUpArrow();
    var12.configure();
    boolean var17 = var12.isAutoRange();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxis((-16777116), (org.jfree.chart.axis.ValueAxis)var12, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test119"); }


    org.jfree.chart.util.RectangleInsets var4 = new org.jfree.chart.util.RectangleInsets(4.0d, (-12.0d), 4.0d, 9.223372036854776E18d);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test120"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    float var30 = var15.getBackgroundImageAlpha();
    var15.setRangeCrosshairLockedOnData(false);
    org.jfree.chart.plot.IntervalMarker var35 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var35.setStartValue(0.0d);
    double var38 = var35.getStartValue();
    java.awt.Paint var39 = var35.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var40 = var35.getGradientPaintTransformer();
    java.awt.Color var43 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var44 = null;
    java.awt.Rectangle var45 = null;
    java.awt.geom.Rectangle2D var46 = null;
    java.awt.geom.AffineTransform var47 = null;
    java.awt.RenderingHints var48 = null;
    java.awt.PaintContext var49 = var43.createContext(var44, var45, var46, var47, var48);
    java.awt.image.ColorModel var50 = null;
    java.awt.Rectangle var51 = null;
    java.awt.geom.Rectangle2D var52 = null;
    java.awt.geom.AffineTransform var53 = null;
    java.awt.RenderingHints var54 = null;
    java.awt.PaintContext var55 = var43.createContext(var50, var51, var52, var53, var54);
    var35.setLabelPaint((java.awt.Paint)var43);
    org.jfree.chart.util.Layer var57 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((org.jfree.chart.plot.Marker)var35, var57);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test121"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    org.jfree.chart.plot.Marker var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var15.removeRangeMarker(var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test122"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     var15.clearAnnotations();
//     org.jfree.data.xy.XYDataset var30 = null;
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     java.awt.Paint var33 = var31.getTickLabelPaint();
//     java.awt.Paint var34 = var31.getTickLabelPaint();
//     var31.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var38 = var37.getRange();
//     var37.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     var37.setRangeWithMargins(var42);
//     org.jfree.chart.renderer.xy.XYItemRenderer var44 = null;
//     org.jfree.chart.plot.XYPlot var45 = new org.jfree.chart.plot.XYPlot(var30, (org.jfree.chart.axis.ValueAxis)var31, (org.jfree.chart.axis.ValueAxis)var37, var44);
//     org.jfree.chart.renderer.xy.XYItemRenderer var47 = null;
//     var45.setRenderer(0, var47);
//     org.jfree.data.xy.XYDataset var49 = null;
//     var45.setDataset(var49);
//     org.jfree.chart.plot.ValueMarker var52 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var53 = var52.getAlpha();
//     java.awt.Stroke var54 = var52.getStroke();
//     var45.setDomainZeroBaselineStroke(var54);
//     org.jfree.chart.axis.ValueAxis var57 = var45.getRangeAxisForDataset(0);
//     var15.setDomainAxis(0, var57, false);
//     
//     // Checks the contract:  equals-hashcode on var22 and var52
//     assertTrue("Contract failed: equals-hashcode on var22 and var52", var22.equals(var52) ? var22.hashCode() == var52.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var52 and var22
//     assertTrue("Contract failed: equals-hashcode on var52 and var22", var52.equals(var22) ? var52.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test123"); }
// 
// 
//     org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var5 = var3.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var7 = null;
//     var3.setRenderer(255, var7);
//     var3.clearRangeMarkers();
//     var2.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var3);
//     boolean var11 = var3.isRangeGridlinesVisible();
//     java.awt.Graphics2D var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     var3.drawOutline(var12, var13);
// 
//   }

  public void test124() {}
//   public void test124() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test124"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     var11.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var13 = var11.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var15 = null;
//     var11.setRenderer(255, var15);
//     java.awt.Stroke var17 = var11.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var18 = var11.getDataset();
//     java.awt.Paint var19 = var11.getNoDataMessagePaint();
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
//     var21.clearRangeAxes();
//     boolean var23 = var21.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var25 = var21.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var26 = var21.getParent();
//     org.jfree.chart.axis.AxisLocation var28 = var21.getDomainAxisLocation((-668));
//     var20.setRangeAxisLocation(var28);
//     var11.setDomainAxisLocation(var28, true);
//     var0.setRangeAxisLocation(12, var28, false);
//     
//     // Checks the contract:  equals-hashcode on var1 and var21
//     assertTrue("Contract failed: equals-hashcode on var1 and var21", var1.equals(var21) ? var1.hashCode() == var21.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var0
//     assertTrue("Contract failed: equals-hashcode on var20 and var0", var20.equals(var0) ? var20.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var21 and var1
//     assertTrue("Contract failed: equals-hashcode on var21 and var1", var21.equals(var1) ? var21.hashCode() == var1.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var0.", var20.equals(var0) == var0.equals(var20));
// 
//   }

  public void test125() {}
//   public void test125() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test125"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setRange(0.0d, 100.0d);
//     var0.setLowerBound((-6.0d));
//     var0.setAutoRangeMinimumSize(9.223372036854776E18d);
//     var0.setNegativeArrowVisible(false);
//     java.awt.Graphics2D var11 = null;
//     org.jfree.chart.plot.XYPlot var12 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     java.text.DateFormat var15 = var13.getDateFormatOverride();
//     var13.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var19 = var13.getLabelFont();
//     org.jfree.data.general.Dataset var20 = null;
//     org.jfree.data.general.DatasetChangeEvent var21 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var13, var20);
//     var12.datasetChanged(var21);
//     boolean var23 = var12.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var26 = var25.getRange();
//     org.jfree.chart.axis.TickUnitSource var27 = null;
//     var25.setStandardTickUnits(var27);
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     java.awt.Paint var31 = var29.getTickLabelPaint();
//     var25.setTickLabelPaint(var31);
//     org.jfree.chart.plot.ValueMarker var34 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var35 = var34.getAlpha();
//     java.awt.Stroke var36 = var34.getStroke();
//     org.jfree.chart.plot.CategoryMarker var37 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var31, var36);
//     var12.setDomainTickBandPaint(var31);
//     java.awt.Paint var39 = var12.getRangeZeroBaselinePaint();
//     java.awt.Paint var40 = var12.getRangeZeroBaselinePaint();
//     java.awt.geom.Rectangle2D var41 = null;
//     org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
//     var42.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var44 = var42.getFixedLegendItems();
//     var42.setRangeGridlinesVisible(false);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var47 = null;
//     var42.setRenderer(var47, false);
//     org.jfree.chart.util.RectangleEdge var50 = var42.getRangeAxisEdge();
//     org.jfree.chart.axis.AxisSpace var51 = null;
//     org.jfree.chart.axis.AxisSpace var52 = var0.reserveSpace(var11, (org.jfree.chart.plot.Plot)var12, var41, var50, var51);
// 
//   }

  public void test126() {}
//   public void test126() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test126"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var0 = new org.jfree.chart.axis.NumberAxis();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var3 = null;
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var6 = null;
//     org.jfree.chart.axis.AxisState var7 = var0.draw(var1, 2.0d, var3, var4, var5, var6);
// 
//   }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test127"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var7 = null;
//     var0.setRenderers(var7);
// 
//   }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test128"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     org.jfree.chart.axis.AxisSpace var10 = null;
//     var0.setFixedDomainAxisSpace(var10, true);
//     java.lang.Object var13 = var0.clone();
//     boolean var14 = var0.isSubplot();
//     org.jfree.chart.plot.PlotRenderingInfo var17 = null;
//     org.jfree.data.xy.XYDataset var18 = null;
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     java.awt.Paint var21 = var19.getTickLabelPaint();
//     java.awt.Paint var22 = var19.getTickLabelPaint();
//     var19.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var26 = var25.getRange();
//     var25.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     var25.setRangeWithMargins(var30);
//     org.jfree.chart.renderer.xy.XYItemRenderer var32 = null;
//     org.jfree.chart.plot.XYPlot var33 = new org.jfree.chart.plot.XYPlot(var18, (org.jfree.chart.axis.ValueAxis)var19, (org.jfree.chart.axis.ValueAxis)var25, var32);
//     org.jfree.chart.plot.PlotRenderingInfo var35 = null;
//     org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
//     var37.clearRangeAxes();
//     boolean var39 = var37.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var41 = var37.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var42 = var37.getParent();
//     org.jfree.chart.axis.AxisLocation var44 = var37.getDomainAxisLocation((-668));
//     var36.setRangeAxisLocation(var44);
//     org.jfree.chart.axis.AxisSpace var46 = null;
//     var36.setFixedDomainAxisSpace(var46, true);
//     org.jfree.chart.plot.PlotRenderingInfo var50 = null;
//     java.awt.geom.Rectangle2D var51 = null;
//     org.jfree.chart.util.RectangleAnchor var52 = null;
//     java.awt.geom.Point2D var53 = org.jfree.chart.util.RectangleAnchor.coordinates(var51, var52);
//     var36.zoomDomainAxes(9.223372036854776E18d, var50, var53);
//     var33.zoomRangeAxes((-9.223372036854776E18d), var35, var53);
//     var0.zoomDomainAxes(4.0d, (-1.0d), var17, var53);
//     
//     // Checks the contract:  equals-hashcode on var0 and var36
//     assertTrue("Contract failed: equals-hashcode on var0 and var36", var0.equals(var36) ? var0.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var1 and var37
//     assertTrue("Contract failed: equals-hashcode on var1 and var37", var1.equals(var37) ? var1.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var0
//     assertTrue("Contract failed: equals-hashcode on var36 and var0", var36.equals(var0) ? var36.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var1
//     assertTrue("Contract failed: equals-hashcode on var37 and var1", var37.equals(var1) ? var37.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test129"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.event.PlotChangeEvent var49 = null;
    var0.notifyListeners(var49);
    org.jfree.chart.util.Layer var51 = null;
    java.util.Collection var52 = var0.getRangeMarkers(var51);
    org.jfree.data.xy.XYDataset var53 = null;
    org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var55 = var54.getRange();
    java.awt.Paint var56 = var54.getTickLabelPaint();
    java.awt.Paint var57 = var54.getTickLabelPaint();
    var54.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var60 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var61 = var60.getRange();
    var60.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var64 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var65 = var64.getRange();
    var60.setRangeWithMargins(var65);
    org.jfree.chart.renderer.xy.XYItemRenderer var67 = null;
    org.jfree.chart.plot.XYPlot var68 = new org.jfree.chart.plot.XYPlot(var53, (org.jfree.chart.axis.ValueAxis)var54, (org.jfree.chart.axis.ValueAxis)var60, var67);
    org.jfree.chart.plot.PlotRenderingInfo var70 = null;
    org.jfree.chart.plot.CategoryPlot var71 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var72 = new org.jfree.chart.plot.CategoryPlot();
    var72.clearRangeAxes();
    boolean var74 = var72.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var76 = var72.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var77 = var72.getParent();
    org.jfree.chart.axis.AxisLocation var79 = var72.getDomainAxisLocation((-668));
    var71.setRangeAxisLocation(var79);
    org.jfree.chart.axis.AxisSpace var81 = null;
    var71.setFixedDomainAxisSpace(var81, true);
    org.jfree.chart.plot.PlotRenderingInfo var85 = null;
    java.awt.geom.Rectangle2D var86 = null;
    org.jfree.chart.util.RectangleAnchor var87 = null;
    java.awt.geom.Point2D var88 = org.jfree.chart.util.RectangleAnchor.coordinates(var86, var87);
    var71.zoomDomainAxes(9.223372036854776E18d, var85, var88);
    var68.zoomRangeAxes((-9.223372036854776E18d), var70, var88);
    org.jfree.chart.plot.CategoryMarker var93 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    org.jfree.chart.util.Layer var94 = null;
    boolean var95 = var68.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var93, var94);
    org.jfree.chart.util.Layer var96 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(var93, var96);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test130() {}
//   public void test130() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test130"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.plot.PlotRenderingInfo var17 = null;
//     org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     var19.clearRangeAxes();
//     boolean var21 = var19.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var23 = var19.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var24 = var19.getParent();
//     org.jfree.chart.axis.AxisLocation var26 = var19.getDomainAxisLocation((-668));
//     var18.setRangeAxisLocation(var26);
//     org.jfree.chart.axis.AxisSpace var28 = null;
//     var18.setFixedDomainAxisSpace(var28, true);
//     org.jfree.chart.plot.PlotRenderingInfo var32 = null;
//     java.awt.geom.Rectangle2D var33 = null;
//     org.jfree.chart.util.RectangleAnchor var34 = null;
//     java.awt.geom.Point2D var35 = org.jfree.chart.util.RectangleAnchor.coordinates(var33, var34);
//     var18.zoomDomainAxes(9.223372036854776E18d, var32, var35);
//     var15.zoomRangeAxes((-9.223372036854776E18d), var17, var35);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
//     var38.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var40 = var38.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var42 = null;
//     var38.setRenderer(255, var42);
//     org.jfree.chart.plot.IntervalMarker var47 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     org.jfree.chart.util.Layer var48 = null;
//     var38.addRangeMarker(10, (org.jfree.chart.plot.Marker)var47, var48, true);
//     var15.addRangeMarker((org.jfree.chart.plot.Marker)var47);
//     
//     // Checks the contract:  equals-hashcode on var19 and var38
//     assertTrue("Contract failed: equals-hashcode on var19 and var38", var19.equals(var38) ? var19.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var19
//     assertTrue("Contract failed: equals-hashcode on var38 and var19", var38.equals(var19) ? var38.hashCode() == var19.hashCode() : true);
// 
//   }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test131"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
    java.awt.Shape var28 = var27.getLeftArrow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test132"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setUpperMargin(0.0d);
    float var8 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setMaximumCategoryLabelWidthRatio(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0f);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test133"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    org.jfree.chart.plot.IntervalMarker var9 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    org.jfree.chart.util.Layer var10 = null;
    var0.addRangeMarker(10, (org.jfree.chart.plot.Marker)var9, var10, true);
    var0.mapDatasetToDomainAxis(20, (-668));
    float var16 = var0.getForegroundAlpha();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToRangeAxis((-16777116), 253);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0f);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test134"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryLabelPositionOffset(0);
    var1.setCategoryMargin(1.0d);
    var1.setMaximumCategoryLabelLines(10);
    var1.setUpperMargin(8.0d);
    var1.setUpperMargin(2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test135"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var1 = var0.getRenderer();
    org.jfree.chart.annotations.CategoryAnnotation var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var3 = var0.removeAnnotation(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test136"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     var5.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
//     var5.setRenderer(255, var9);
//     var5.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
//     java.awt.Paint var13 = var5.getDomainGridlinePaint();
//     org.jfree.chart.plot.PlotRenderingInfo var15 = null;
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     var16.clearRangeAxes();
//     boolean var18 = var16.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var20 = null;
//     java.awt.geom.Rectangle2D var21 = null;
//     org.jfree.chart.util.RectangleAnchor var22 = null;
//     java.awt.geom.Point2D var23 = org.jfree.chart.util.RectangleAnchor.coordinates(var21, var22);
//     var16.zoomRangeAxes(0.05d, var20, var23);
//     var5.zoomDomainAxes((-6.0d), var15, var23);
//     var0.zoomRangeAxes(9.223372036854776E18d, 3.0d, var4, var23);
//     
//     // Checks the contract:  equals-hashcode on var0 and var16
//     assertTrue("Contract failed: equals-hashcode on var0 and var16", var0.equals(var16) ? var0.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var0
//     assertTrue("Contract failed: equals-hashcode on var16 and var0", var16.equals(var0) ? var16.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test137() {}
//   public void test137() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test137"); }
// 
// 
//     java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var5 = null;
//     java.awt.Rectangle var6 = null;
//     java.awt.geom.Rectangle2D var7 = null;
//     java.awt.geom.AffineTransform var8 = null;
//     java.awt.RenderingHints var9 = null;
//     java.awt.PaintContext var10 = var4.createContext(var5, var6, var7, var8, var9);
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var13 = var12.getRange();
//     org.jfree.chart.axis.TickUnitSource var14 = null;
//     var12.setStandardTickUnits(var14);
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     java.awt.Paint var18 = var16.getTickLabelPaint();
//     var12.setTickLabelPaint(var18);
//     org.jfree.chart.plot.ValueMarker var21 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var22 = var21.getAlpha();
//     java.awt.Stroke var23 = var21.getStroke();
//     org.jfree.chart.plot.CategoryMarker var24 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var18, var23);
//     java.awt.Color var28 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var29 = null;
//     java.awt.Rectangle var30 = null;
//     java.awt.geom.Rectangle2D var31 = null;
//     java.awt.geom.AffineTransform var32 = null;
//     java.awt.RenderingHints var33 = null;
//     java.awt.PaintContext var34 = var28.createContext(var29, var30, var31, var32, var33);
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     java.awt.Paint var37 = var35.getTickLabelPaint();
//     double var38 = var35.getLowerMargin();
//     java.awt.Shape var39 = var35.getLeftArrow();
//     java.awt.Stroke var40 = var35.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var42 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var4, var23, (java.awt.Paint)var28, var40, 0.8f);
//     java.awt.color.ColorSpace var43 = null;
//     float[] var50 = new float[] { 100.0f, 1.0f, (-1.0f)};
//     float[] var51 = java.awt.Color.RGBtoHSB((-1), 100, 100, var50);
//     float[] var52 = var4.getComponents(var43, var50);
// 
//   }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test138"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var7 = null;
    java.awt.Rectangle var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    java.awt.geom.AffineTransform var10 = null;
    java.awt.RenderingHints var11 = null;
    java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
    var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
    var1.setTickMarkInsideLength(2.0f);
    var1.clearCategoryLabelToolTips();
    org.jfree.chart.axis.CategoryLabelPositions var17 = var1.getCategoryLabelPositions();
    java.lang.Comparable var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addCategoryLabelToolTip(var18, "org.jfree.chart.event.ChartChangeEvent[source=-1]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test139"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    org.jfree.chart.annotations.XYAnnotation var30 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var15.removeAnnotation(var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test140"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    boolean var5 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(255);
    java.awt.Paint var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePaint(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test141"); }


    java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var5 = null;
    java.awt.Rectangle var6 = null;
    java.awt.geom.Rectangle2D var7 = null;
    java.awt.geom.AffineTransform var8 = null;
    java.awt.RenderingHints var9 = null;
    java.awt.PaintContext var10 = var4.createContext(var5, var6, var7, var8, var9);
    int var11 = var4.getRGB();
    java.awt.Color var15 = java.awt.Color.getColor("", 100);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    org.jfree.chart.plot.ValueMarker var30 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var15, var28);
    org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var33 = var32.getRange();
    org.jfree.chart.axis.TickUnitSource var34 = null;
    var32.setStandardTickUnits(var34);
    org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var37 = var36.getRange();
    java.awt.Paint var38 = var36.getTickLabelPaint();
    var32.setTickLabelPaint(var38);
    org.jfree.chart.plot.ValueMarker var41 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var42 = var41.getAlpha();
    java.awt.Stroke var43 = var41.getStroke();
    org.jfree.chart.plot.CategoryMarker var44 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var38, var43);
    java.awt.Color var48 = java.awt.Color.getColor("", 100);
    org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var51 = var50.getRange();
    org.jfree.chart.axis.TickUnitSource var52 = null;
    var50.setStandardTickUnits(var52);
    org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var55 = var54.getRange();
    java.awt.Paint var56 = var54.getTickLabelPaint();
    var50.setTickLabelPaint(var56);
    org.jfree.chart.plot.ValueMarker var59 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var60 = var59.getAlpha();
    java.awt.Stroke var61 = var59.getStroke();
    org.jfree.chart.plot.CategoryMarker var62 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var56, var61);
    org.jfree.chart.plot.ValueMarker var63 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var48, var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.ValueMarker var65 = new org.jfree.chart.plot.ValueMarker(0.05d, (java.awt.Paint)var4, var28, var38, var61, 10.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-668));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test142"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryMargin(9.223372036854776E18d);
    var1.setLowerMargin((-6.0d));
    double var8 = var1.getFixedDimension();
    java.lang.Comparable var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addCategoryLabelToolTip(var9, "hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test143"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var4 = var3.getRange();
//     java.text.DateFormat var5 = var3.getDateFormatOverride();
//     var3.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var9 = var3.getLabelFont();
//     var0.setNoDataMessageFont(var9);
//     java.awt.Graphics2D var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     var0.drawBackground(var11, var12);
// 
//   }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test144"); }


    java.lang.Object var0 = null;
    org.jfree.data.general.Dataset var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.general.DatasetChangeEvent var2 = new org.jfree.data.general.DatasetChangeEvent(var0, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test145"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.text.DateFormat var5 = var3.getDateFormatOverride();
    var3.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var9 = var3.getLabelFont();
    var0.setNoDataMessageFont(var9);
    float var11 = var0.getBackgroundImageAlpha();
    org.jfree.chart.annotations.CategoryAnnotation var12 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test146"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     var0.setRangeGridlinesVisible(false);
//     java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var10 = null;
//     java.awt.Rectangle var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     java.awt.geom.AffineTransform var13 = null;
//     java.awt.RenderingHints var14 = null;
//     java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     org.jfree.chart.axis.TickUnitSource var19 = null;
//     var17.setStandardTickUnits(var19);
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.awt.Paint var23 = var21.getTickLabelPaint();
//     var17.setTickLabelPaint(var23);
//     org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var27 = var26.getAlpha();
//     java.awt.Stroke var28 = var26.getStroke();
//     org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
//     java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var34 = null;
//     java.awt.Rectangle var35 = null;
//     java.awt.geom.Rectangle2D var36 = null;
//     java.awt.geom.AffineTransform var37 = null;
//     java.awt.RenderingHints var38 = null;
//     java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     java.awt.Paint var42 = var40.getTickLabelPaint();
//     double var43 = var40.getLowerMargin();
//     java.awt.Shape var44 = var40.getLeftArrow();
//     java.awt.Stroke var45 = var40.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
//     var0.setDomainGridlinePaint((java.awt.Paint)var33);
//     org.jfree.data.category.CategoryDataset var50 = var0.getDataset((-1));
//     org.jfree.chart.plot.ValueMarker var52 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var53 = var52.getAlpha();
//     java.awt.Stroke var54 = var52.getStroke();
//     float var55 = var52.getAlpha();
//     org.jfree.chart.util.Layer var56 = null;
//     boolean var57 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var52, var56);
//     
//     // Checks the contract:  equals-hashcode on var26 and var52
//     assertTrue("Contract failed: equals-hashcode on var26 and var52", var26.equals(var52) ? var26.hashCode() == var52.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var52 and var26
//     assertTrue("Contract failed: equals-hashcode on var52 and var26", var52.equals(var26) ? var52.hashCode() == var26.hashCode() : true);
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test147"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    boolean var7 = var0.isVisible();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Shape var10 = var8.getLeftArrow();
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    var8.setRangeWithMargins(var16, true, true);
    var0.setRange(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAutoRangeMinimumSize(0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test148"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setRange(0.0d, 100.0d);
//     var0.setLowerBound((-6.0d));
//     var0.setAutoRangeMinimumSize(9.223372036854776E18d);
//     var0.setNegativeArrowVisible(false);
//     java.awt.Graphics2D var11 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     java.awt.geom.Rectangle2D var14 = null;
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var17 = null;
//     var15.setFixedRangeAxisSpace(var17, false);
//     boolean var20 = var15.isRangeZoomable();
//     var15.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var24 = var15.getDomainAxisEdge(0);
//     org.jfree.chart.plot.PlotRenderingInfo var25 = null;
//     org.jfree.chart.axis.AxisState var26 = var0.draw(var11, 4.0d, var13, var14, var24, var25);
// 
//   }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test149"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     int var29 = var15.indexOf(var28);
//     org.jfree.data.xy.XYDataset var30 = null;
//     var15.setDataset(var30);
//     org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
//     var33.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var35 = var33.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var37 = null;
//     var33.setRenderer(255, var37);
//     java.awt.Color var43 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var44 = null;
//     java.awt.Rectangle var45 = null;
//     java.awt.geom.Rectangle2D var46 = null;
//     java.awt.geom.AffineTransform var47 = null;
//     java.awt.RenderingHints var48 = null;
//     java.awt.PaintContext var49 = var43.createContext(var44, var45, var46, var47, var48);
//     org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var52 = var51.getRange();
//     org.jfree.chart.axis.TickUnitSource var53 = null;
//     var51.setStandardTickUnits(var53);
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var56 = var55.getRange();
//     java.awt.Paint var57 = var55.getTickLabelPaint();
//     var51.setTickLabelPaint(var57);
//     org.jfree.chart.plot.ValueMarker var60 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var61 = var60.getAlpha();
//     java.awt.Stroke var62 = var60.getStroke();
//     org.jfree.chart.plot.CategoryMarker var63 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var57, var62);
//     java.awt.Color var67 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var68 = null;
//     java.awt.Rectangle var69 = null;
//     java.awt.geom.Rectangle2D var70 = null;
//     java.awt.geom.AffineTransform var71 = null;
//     java.awt.RenderingHints var72 = null;
//     java.awt.PaintContext var73 = var67.createContext(var68, var69, var70, var71, var72);
//     org.jfree.chart.axis.DateAxis var74 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var75 = var74.getRange();
//     java.awt.Paint var76 = var74.getTickLabelPaint();
//     double var77 = var74.getLowerMargin();
//     java.awt.Shape var78 = var74.getLeftArrow();
//     java.awt.Stroke var79 = var74.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var81 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var43, var62, (java.awt.Paint)var67, var79, 0.8f);
//     boolean var82 = var33.removeRangeMarker((org.jfree.chart.plot.Marker)var81);
//     org.jfree.chart.util.Layer var83 = null;
//     boolean var84 = var15.removeRangeMarker((-16777116), (org.jfree.chart.plot.Marker)var81, var83);
//     
//     // Checks the contract:  equals-hashcode on var20 and var33
//     assertTrue("Contract failed: equals-hashcode on var20 and var33", var20.equals(var33) ? var20.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var20
//     assertTrue("Contract failed: equals-hashcode on var33 and var20", var33.equals(var20) ? var33.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test150"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAutoRangeMinimumSize((-12.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test151"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    org.jfree.chart.util.UnitType var10 = var2.getUnitType();
    java.awt.geom.Rectangle2D var11 = null;
    org.jfree.chart.plot.ValueMarker var13 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var14 = var13.getLabelOffsetType();
    java.awt.Color var17 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var18 = null;
    java.awt.Rectangle var19 = null;
    java.awt.geom.Rectangle2D var20 = null;
    java.awt.geom.AffineTransform var21 = null;
    java.awt.RenderingHints var22 = null;
    java.awt.PaintContext var23 = var17.createContext(var18, var19, var20, var21, var22);
    boolean var24 = var14.equals((java.lang.Object)var22);
    org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var29 = null;
    org.jfree.chart.util.RectangleEdge var30 = null;
    double var31 = var26.getCategoryMiddle(0, (-1), var29, var30);
    var26.configure();
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    java.text.DateFormat var36 = var34.getDateFormatOverride();
    var34.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var40 = var34.getStandardTickUnits();
    var34.setLabelURL("");
    java.awt.Font var43 = var34.getTickLabelFont();
    var26.setTickLabelFont((java.lang.Comparable)(byte)100, var43);
    boolean var45 = var14.equals((java.lang.Object)var43);
    org.jfree.chart.util.LengthAdjustmentType var46 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var47 = var2.createAdjustedRectangle(var11, var14, var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test152() {}
//   public void test152() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test152"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var33 = null;
//     var31.notifyListeners(var33);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     double var44 = var42.trimWidth((-1.0d));
//     double var46 = var42.trimHeight((-6.0d));
//     boolean var47 = var39.equals((java.lang.Object)var42);
//     var35.setInsets(var42, true);
//     java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
//     var31.setOutlineStroke(var50);
//     var15.setRangeGridlineStroke(var50);
//     org.jfree.chart.util.RectangleEdge var53 = var15.getRangeAxisEdge();
//     java.awt.Paint[] var54 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var55 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var56 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var57 = new org.jfree.chart.plot.CategoryPlot();
//     var57.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var60 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var61 = var60.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var62 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var63 = var62.getRange();
//     org.jfree.chart.util.RectangleInsets var64 = var62.getLabelInsets();
//     double var66 = var64.trimWidth((-1.0d));
//     double var68 = var64.trimHeight((-6.0d));
//     boolean var69 = var61.equals((java.lang.Object)var64);
//     var57.setInsets(var64, true);
//     java.awt.Stroke var72 = var57.getRangeCrosshairStroke();
//     java.awt.Stroke[] var73 = new java.awt.Stroke[] { var72};
//     org.jfree.chart.axis.DateAxis var74 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var75 = var74.getRange();
//     java.awt.Paint var76 = var74.getTickLabelPaint();
//     double var77 = var74.getLowerMargin();
//     java.awt.Shape var78 = var74.getLeftArrow();
//     java.awt.Stroke var79 = var74.getTickMarkStroke();
//     java.awt.Stroke[] var80 = new java.awt.Stroke[] { var79};
//     java.awt.Shape[] var81 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var82 = new org.jfree.chart.plot.DefaultDrawingSupplier(var54, var55, var56, var73, var80, var81);
//     java.lang.Object var83 = var82.clone();
//     var15.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var82);
//     
//     // Checks the contract:  equals-hashcode on var35 and var57
//     assertTrue("Contract failed: equals-hashcode on var35 and var57", var35.equals(var57) ? var35.hashCode() == var57.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var35
//     assertTrue("Contract failed: equals-hashcode on var57 and var35", var57.equals(var35) ? var57.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var60
//     assertTrue("Contract failed: equals-hashcode on var38 and var60", var38.equals(var60) ? var38.hashCode() == var60.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var60 and var38
//     assertTrue("Contract failed: equals-hashcode on var60 and var38", var60.equals(var38) ? var60.hashCode() == var38.hashCode() : true);
// 
//   }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test153"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setCategoryLabelPositionOffset((-16646144));
    org.jfree.chart.util.RectangleInsets var8 = var1.getTickLabelInsets();
    double var10 = var8.trimHeight(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-4.0d));

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test154"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    org.jfree.chart.axis.TickUnitSource var20 = null;
    var18.setStandardTickUnits(var20);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.awt.Paint var24 = var22.getTickLabelPaint();
    var18.setTickLabelPaint(var24);
    org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var28 = var27.getAlpha();
    java.awt.Stroke var29 = var27.getStroke();
    org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
    java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var35 = null;
    java.awt.Rectangle var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    java.awt.geom.AffineTransform var38 = null;
    java.awt.RenderingHints var39 = null;
    java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
    org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var42 = var41.getRange();
    java.awt.Paint var43 = var41.getTickLabelPaint();
    double var44 = var41.getLowerMargin();
    java.awt.Shape var45 = var41.getLeftArrow();
    java.awt.Stroke var46 = var41.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
    boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
    org.jfree.chart.plot.Marker var50 = null;
    boolean var51 = var0.removeDomainMarker(var50);
    var0.clearDomainMarkers(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test155() {}
//   public void test155() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test155"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     java.awt.Paint var22 = var20.getTickLabelPaint();
//     java.awt.Paint var23 = var20.getTickLabelPaint();
//     var20.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     var26.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var31 = var30.getRange();
//     var26.setRangeWithMargins(var31);
//     org.jfree.chart.renderer.xy.XYItemRenderer var33 = null;
//     org.jfree.chart.plot.XYPlot var34 = new org.jfree.chart.plot.XYPlot(var19, (org.jfree.chart.axis.ValueAxis)var20, (org.jfree.chart.axis.ValueAxis)var26, var33);
//     org.jfree.chart.util.RectangleEdge var36 = var34.getDomainAxisEdge(12);
//     var34.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot();
//     var39.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var41 = var39.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var43 = null;
//     var39.setRenderer(255, var43);
//     java.awt.Stroke var45 = var39.getOutlineStroke();
//     var34.setRangeZeroBaselineStroke(var45);
//     org.jfree.chart.axis.ValueAxis var47 = null;
//     int var48 = var34.getRangeAxisIndex(var47);
//     org.jfree.chart.plot.ValueMarker var51 = new org.jfree.chart.plot.ValueMarker((-1.0d));
//     org.jfree.chart.util.Layer var52 = null;
//     boolean var53 = var34.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var51, var52);
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var56 = var55.getRange();
//     var55.setRange(0.0d, 100.0d);
//     var55.setLowerBound((-6.0d));
//     var55.setAutoRangeMinimumSize(9.223372036854776E18d);
//     var55.resizeRange((-7.0d), 0.0d);
//     var34.setDomainAxis(0, (org.jfree.chart.axis.ValueAxis)var55, false);
//     var15.setDomainAxis((org.jfree.chart.axis.ValueAxis)var55);
//     
//     // Checks the contract:  equals-hashcode on var15 and var34
//     assertTrue("Contract failed: equals-hashcode on var15 and var34", var15.equals(var34) ? var15.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var15
//     assertTrue("Contract failed: equals-hashcode on var34 and var15", var34.equals(var15) ? var34.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test156"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
    int var29 = var0.getIndexOf(var28);
    java.awt.Stroke var30 = var0.getDomainGridlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test157"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.data.xy.XYDataset var2 = null;
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.awt.Paint var5 = var3.getTickLabelPaint();
    java.awt.Paint var6 = var3.getTickLabelPaint();
    var3.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    var9.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    var9.setRangeWithMargins(var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var16 = null;
    org.jfree.chart.plot.XYPlot var17 = new org.jfree.chart.plot.XYPlot(var2, (org.jfree.chart.axis.ValueAxis)var3, (org.jfree.chart.axis.ValueAxis)var9, var16);
    org.jfree.chart.util.RectangleEdge var19 = var17.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var20 = var17.getDomainAxisLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxisLocation((-16777116), var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test158"); }


    org.jfree.chart.axis.NumberAxis var0 = new org.jfree.chart.axis.NumberAxis();
    boolean var1 = var0.getAutoRangeIncludesZero();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.zoomRange(2.0d, 0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test159() {}
//   public void test159() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test159"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.text.DateFormat var2 = var0.getDateFormatOverride();
//     var0.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
//     var0.setLabelURL("");
//     java.awt.Font var9 = var0.getTickLabelFont();
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     var10.setRange(0.0d, 100.0d);
//     boolean var15 = var10.isInverted();
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     java.text.DateFormat var18 = var16.getDateFormatOverride();
//     var16.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var22 = var16.getStandardTickUnits();
//     var16.setLabelURL("");
//     boolean var25 = var16.isNegativeArrowVisible();
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     var26.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var31 = var30.getRange();
//     var26.setRangeWithMargins(var31);
//     var16.setRange(var31);
//     var10.setRange(var31, true, false);
//     var0.setRange(var31, false, false);
//     
//     // Checks the contract:  equals-hashcode on var6 and var22
//     assertTrue("Contract failed: equals-hashcode on var6 and var22", var6.equals(var22) ? var6.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var6
//     assertTrue("Contract failed: equals-hashcode on var22 and var6", var22.equals(var6) ? var22.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test160"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedRangeAxisSpace(var10, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test161"); }


    int var3 = java.awt.Color.HSBtoRGB(100.0f, 2.0f, 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-203));

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test162"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.LegendItemCollection var5 = var0.getFixedLegendItems();
    org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    org.jfree.chart.axis.AxisLocation var14 = var7.getDomainAxisLocation((-668));
    var6.setRangeAxisLocation(var14);
    var0.setDomainAxisLocation(var14, false);
    org.jfree.chart.util.SortOrder var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setColumnRenderingOrder(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test163"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    org.jfree.chart.axis.TickUnitSource var20 = null;
    var18.setStandardTickUnits(var20);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.awt.Paint var24 = var22.getTickLabelPaint();
    var18.setTickLabelPaint(var24);
    org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var28 = var27.getAlpha();
    java.awt.Stroke var29 = var27.getStroke();
    org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
    java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var35 = null;
    java.awt.Rectangle var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    java.awt.geom.AffineTransform var38 = null;
    java.awt.RenderingHints var39 = null;
    java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
    org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var42 = var41.getRange();
    java.awt.Paint var43 = var41.getTickLabelPaint();
    double var44 = var41.getLowerMargin();
    java.awt.Shape var45 = var41.getLeftArrow();
    java.awt.Stroke var46 = var41.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
    boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
    org.jfree.chart.plot.Marker var50 = null;
    boolean var51 = var0.removeDomainMarker(var50);
    org.jfree.chart.axis.AxisLocation var52 = var0.getDomainAxisLocation();
    org.jfree.chart.plot.PlotOrientation var53 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.RectangleEdge var54 = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(var52, var53);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test164"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    org.jfree.chart.util.RectangleInsets var5 = var3.getLabelInsets();
    double var7 = var5.trimWidth((-1.0d));
    double var9 = var5.trimHeight((-6.0d));
    boolean var10 = var2.equals((java.lang.Object)var5);
    java.lang.String var11 = var2.toString();
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var12.setVerticalTickLabels(false);
    var12.resizeRange((-7.0d));
    org.jfree.chart.axis.Timeline var18 = var12.getTimeline();
    boolean var19 = var12.isVisible();
    boolean var20 = var2.equals((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "CONTRACT"+ "'", var11.equals("CONTRACT"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test165"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDatasetCount();
    var15.clearRangeMarkers(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);

  }

  public void test166() {}
//   public void test166() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test166"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.text.DateFormat var2 = var0.getDateFormatOverride();
//     java.awt.Shape var3 = var0.getUpArrow();
//     var0.setRangeAboutValue(0.0d, 0.0d);
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     var9.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var11 = var9.getFixedLegendItems();
//     var9.setRangeGridlinesVisible(false);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var14 = null;
//     var9.setRenderer(var14, false);
//     org.jfree.chart.util.RectangleEdge var17 = var9.getRangeAxisEdge();
//     double var18 = var0.lengthToJava2D((-7.0d), var8, var17);
// 
//   }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test167"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
//     var15.setRangeCrosshairValue(0.0d, true);
//     java.awt.Graphics2D var34 = null;
//     java.awt.geom.Rectangle2D var35 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var36 = null;
//     var15.drawAnnotations(var34, var35, var36);
//     org.jfree.chart.plot.PlotRenderingInfo var39 = null;
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.chart.util.RectangleAnchor var41 = null;
//     java.awt.geom.Point2D var42 = org.jfree.chart.util.RectangleAnchor.coordinates(var40, var41);
//     var15.zoomRangeAxes((-7.0d), var39, var42, true);
// 
//   }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test168"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    org.jfree.data.xy.XYDataset var30 = null;
    var15.setDataset(var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setBackgroundImageAlpha(2.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test169"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Shape var2 = var0.getLeftArrow();
    var0.setLabelAngle(0.0d);
    var0.setNegativeArrowVisible(false);
    java.lang.String var7 = var0.getLabelURL();
    org.jfree.chart.axis.DateTickUnit var8 = var0.getTickUnit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeWithMargins(3.0d, (-6.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test170"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.util.RectangleInsets var4 = var1.getLabelInsets();
    org.jfree.chart.axis.NumberTickUnit var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setTickUnit(var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test171"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     org.jfree.chart.plot.IntervalMarker var9 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     org.jfree.chart.util.Layer var10 = null;
//     var0.addRangeMarker(10, (org.jfree.chart.plot.Marker)var9, var10, true);
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     var13.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var15 = var13.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var17 = null;
//     var13.setRenderer(255, var17);
//     java.awt.Stroke var19 = var13.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var20 = var13.getDataset();
//     java.awt.Image var21 = var13.getBackgroundImage();
//     boolean var22 = var9.equals((java.lang.Object)var13);
//     
//     // Checks the contract:  equals-hashcode on var0 and var13
//     assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var0
//     assertTrue("Contract failed: equals-hashcode on var13 and var0", var13.equals(var0) ? var13.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test172"); }


    org.jfree.chart.JFreeChart var1 = null;
    org.jfree.chart.event.ChartChangeEventType var2 = null;
    org.jfree.chart.event.ChartChangeEvent var3 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(-1.0d), var1, var2);
    org.jfree.chart.event.ChartChangeEventType var4 = var3.getType();
    org.jfree.chart.event.ChartChangeEventType var5 = var3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test173"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.data.general.DatasetGroup var3 = var0.getDatasetGroup();
    org.jfree.chart.annotations.CategoryAnnotation var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var0.removeAnnotation(var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test174() {}
//   public void test174() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test174"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.data.xy.XYDataset var20 = null;
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.awt.Paint var23 = var21.getTickLabelPaint();
//     java.awt.Paint var24 = var21.getTickLabelPaint();
//     var21.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var28 = var27.getRange();
//     var27.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     var27.setRangeWithMargins(var32);
//     org.jfree.chart.renderer.xy.XYItemRenderer var34 = null;
//     org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot(var20, (org.jfree.chart.axis.ValueAxis)var21, (org.jfree.chart.axis.ValueAxis)var27, var34);
//     var15.setRangeAxis((org.jfree.chart.axis.ValueAxis)var27);
//     
//     // Checks the contract:  equals-hashcode on var15 and var35
//     assertTrue("Contract failed: equals-hashcode on var15 and var35", var15.equals(var35) ? var15.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var15
//     assertTrue("Contract failed: equals-hashcode on var35 and var15", var35.equals(var15) ? var35.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test175"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setTickMarkOutsideLength(100.0f);
//     var1.setUpperMargin((-7.0d));
//     org.jfree.chart.axis.CategoryAnchor var8 = null;
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.chart.util.RectangleEdge var12 = null;
//     double var13 = var1.getCategoryJava2DCoordinate(var8, 100, 100, var11, var12);
//     java.awt.geom.Rectangle2D var16 = null;
//     org.jfree.data.xy.XYDataset var17 = null;
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     java.awt.Paint var20 = var18.getTickLabelPaint();
//     java.awt.Paint var21 = var18.getTickLabelPaint();
//     var18.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var25 = var24.getRange();
//     var24.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var24.setRangeWithMargins(var29);
//     org.jfree.chart.renderer.xy.XYItemRenderer var31 = null;
//     org.jfree.chart.plot.XYPlot var32 = new org.jfree.chart.plot.XYPlot(var17, (org.jfree.chart.axis.ValueAxis)var18, (org.jfree.chart.axis.ValueAxis)var24, var31);
//     org.jfree.chart.util.RectangleEdge var34 = var32.getDomainAxisEdge(12);
//     double var35 = var1.getCategoryStart(255, 0, var16, var34);
// 
//   }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test176"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getRangeZeroBaselinePaint();
    org.jfree.data.xy.XYDataset var29 = null;
    var0.setDataset(var29);
    org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
    var31.clearRangeAxes();
    boolean var33 = var31.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var37 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var38 = null;
    boolean var39 = var31.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var37, var38);
    org.jfree.chart.plot.IntervalMarker var42 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var42.setStartValue(0.0d);
    double var45 = var42.getStartValue();
    java.awt.Paint var46 = var42.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var47 = var42.getGradientPaintTransformer();
    var42.setEndValue(9.223372036854776E18d);
    java.awt.Color var52 = java.awt.Color.getColor("", 100);
    int var53 = var52.getRed();
    int var54 = var52.getAlpha();
    var42.setPaint((java.awt.Paint)var52);
    var37.setPaint((java.awt.Paint)var52);
    var0.setRangeTickBandPaint((java.awt.Paint)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Paint var59 = var0.getQuadrantPaint(255);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 255);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test177"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    double var10 = var2.getLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3.0d);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test178"); }


    java.lang.Class var0 = null;
    java.util.Date var1 = null;
    java.lang.Class var2 = null;
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    org.jfree.chart.util.RectangleInsets var5 = var3.getLabelInsets();
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    org.jfree.chart.axis.TickUnitSource var8 = null;
    var6.setStandardTickUnits(var8);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    java.awt.Paint var12 = var10.getTickLabelPaint();
    var6.setTickLabelPaint(var12);
    var6.resizeRange((-1.0d));
    java.util.Date var16 = var6.getMinimumDate();
    var3.setMinimumDate(var16);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    java.awt.Shape var20 = var18.getLeftArrow();
    var18.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var24 = var23.getRange();
    var23.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var28 = var27.getRange();
    var23.setRangeWithMargins(var28);
    java.util.TimeZone var30 = var23.getTimeZone();
    var18.setTimeZone(var30);
    org.jfree.data.time.RegularTimePeriod var32 = org.jfree.data.time.RegularTimePeriod.createInstance(var2, var16, var30);
    org.jfree.data.time.RegularTimePeriod var33 = org.jfree.data.time.RegularTimePeriod.createInstance(var0, var1, var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test179"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    java.text.DateFormat var11 = var9.getDateFormatOverride();
    boolean var12 = var2.equals((java.lang.Object)var9);
    boolean var13 = var9.isAxisLineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test180"); }


    java.awt.Color var2 = java.awt.Color.getColor("", 100);
    int var3 = var2.getRed();
    int var4 = var2.getAlpha();
    float[] var8 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var9 = var2.getColorComponents(var8);
    java.awt.Color var12 = java.awt.Color.getColor("", 100);
    int var13 = var12.getRed();
    int var14 = var12.getAlpha();
    float[] var18 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var19 = var12.getColorComponents(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var20 = var2.getComponents(var19);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test181"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
//     var15.setRangeCrosshairValue(0.0d, true);
//     java.awt.Graphics2D var34 = null;
//     java.awt.geom.Rectangle2D var35 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var36 = null;
//     var15.drawAnnotations(var34, var35, var36);
//     org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var41.setStartValue(0.0d);
//     double var44 = var41.getStartValue();
//     org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var47 = var46.getAlpha();
//     java.awt.Stroke var48 = var46.getStroke();
//     var41.setOutlineStroke(var48);
//     var41.setStartValue(9.223372036854776E18d);
//     org.jfree.chart.util.Layer var52 = null;
//     boolean var54 = var15.removeDomainMarker(253, (org.jfree.chart.plot.Marker)var41, var52, true);
//     org.jfree.chart.plot.CategoryPlot var55 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.axis.DateAxis var56 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var57 = var56.getRange();
//     org.jfree.chart.util.RectangleInsets var58 = var56.getLabelInsets();
//     org.jfree.chart.axis.CategoryAxis var60 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var65 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var66 = null;
//     java.awt.Rectangle var67 = null;
//     java.awt.geom.Rectangle2D var68 = null;
//     java.awt.geom.AffineTransform var69 = null;
//     java.awt.RenderingHints var70 = null;
//     java.awt.PaintContext var71 = var65.createContext(var66, var67, var68, var69, var70);
//     var60.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var65);
//     var56.setAxisLinePaint((java.awt.Paint)var65);
//     org.jfree.chart.axis.ValueAxis[] var74 = new org.jfree.chart.axis.ValueAxis[] { var56};
//     var55.setRangeAxes(var74);
//     var15.setRangeAxes(var74);
//     
//     // Checks the contract:  equals-hashcode on var20 and var55
//     assertTrue("Contract failed: equals-hashcode on var20 and var55", var20.equals(var55) ? var20.hashCode() == var55.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var55.", var20.equals(var55) == var55.equals(var20));
// 
//   }

  public void test182() {}
//   public void test182() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test182"); }
// 
// 
//     java.awt.Color var2 = java.awt.Color.getColor("", 100);
//     int var3 = var2.getRed();
//     int var4 = var2.getRGB();
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     var5.clearRangeAxes();
//     boolean var7 = var5.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var9 = var5.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var10 = var5.getParent();
//     org.jfree.chart.plot.IntervalMarker var13 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var13.setStartValue(0.0d);
//     double var16 = var13.getStartValue();
//     java.awt.Paint var17 = var13.getPaint();
//     var5.setOutlinePaint(var17);
//     boolean var19 = var2.equals((java.lang.Object)var5);
//     java.awt.color.ColorSpace var20 = null;
//     float[] var27 = new float[] { 100.0f, 1.0f, (-1.0f)};
//     float[] var28 = java.awt.Color.RGBtoHSB((-1), 100, 100, var27);
//     float[] var29 = var2.getComponents(var20, var27);
// 
//   }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test183"); }


    org.jfree.chart.event.ChartChangeEvent var1 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    org.jfree.chart.event.ChartChangeEventType var2 = null;
    var1.setType(var2);
    org.jfree.chart.event.ChartChangeEventType var4 = var1.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test184"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setTickMarkOutsideLength(100.0f);
//     var1.setCategoryLabelPositionOffset((-16646144));
//     double var8 = var1.getUpperMargin();
//     java.awt.Graphics2D var9 = null;
//     org.jfree.chart.axis.AxisState var10 = null;
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.data.xy.XYDataset var12 = null;
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     java.awt.Paint var15 = var13.getTickLabelPaint();
//     java.awt.Paint var16 = var13.getTickLabelPaint();
//     var13.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     var19.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     var19.setRangeWithMargins(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     org.jfree.chart.plot.XYPlot var27 = new org.jfree.chart.plot.XYPlot(var12, (org.jfree.chart.axis.ValueAxis)var13, (org.jfree.chart.axis.ValueAxis)var19, var26);
//     org.jfree.chart.util.RectangleEdge var29 = var27.getDomainAxisEdge(12);
//     var27.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
//     var32.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var34 = var32.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var36 = null;
//     var32.setRenderer(255, var36);
//     java.awt.Stroke var38 = var32.getOutlineStroke();
//     var27.setRangeZeroBaselineStroke(var38);
//     org.jfree.chart.axis.ValueAxis var40 = null;
//     int var41 = var27.getRangeAxisIndex(var40);
//     org.jfree.chart.plot.ValueMarker var43 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var44 = var43.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var45 = null;
//     var43.notifyListeners(var45);
//     org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
//     var47.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var50 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var51 = var50.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var52 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var53 = var52.getRange();
//     org.jfree.chart.util.RectangleInsets var54 = var52.getLabelInsets();
//     double var56 = var54.trimWidth((-1.0d));
//     double var58 = var54.trimHeight((-6.0d));
//     boolean var59 = var51.equals((java.lang.Object)var54);
//     var47.setInsets(var54, true);
//     java.awt.Stroke var62 = var47.getRangeCrosshairStroke();
//     var43.setOutlineStroke(var62);
//     var27.setRangeGridlineStroke(var62);
//     org.jfree.chart.util.RectangleEdge var65 = var27.getRangeAxisEdge();
//     java.util.List var66 = var1.refreshTicks(var9, var10, var11, var65);
// 
//   }

  public void test185() {}
//   public void test185() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test185"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     var15.clearDomainMarkers(1);
//     java.awt.Paint[] var30 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var31 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var32 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
//     var33.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var37 = var36.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var39 = var38.getRange();
//     org.jfree.chart.util.RectangleInsets var40 = var38.getLabelInsets();
//     double var42 = var40.trimWidth((-1.0d));
//     double var44 = var40.trimHeight((-6.0d));
//     boolean var45 = var37.equals((java.lang.Object)var40);
//     var33.setInsets(var40, true);
//     java.awt.Stroke var48 = var33.getRangeCrosshairStroke();
//     java.awt.Stroke[] var49 = new java.awt.Stroke[] { var48};
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     java.awt.Paint var52 = var50.getTickLabelPaint();
//     double var53 = var50.getLowerMargin();
//     java.awt.Shape var54 = var50.getLeftArrow();
//     java.awt.Stroke var55 = var50.getTickMarkStroke();
//     java.awt.Stroke[] var56 = new java.awt.Stroke[] { var55};
//     java.awt.Shape[] var57 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var58 = new org.jfree.chart.plot.DefaultDrawingSupplier(var30, var31, var32, var49, var56, var57);
//     java.awt.Stroke var59 = var58.getNextStroke();
//     var15.setRangeGridlineStroke(var59);
//     
//     // Checks the contract:  equals-hashcode on var22 and var36
//     assertTrue("Contract failed: equals-hashcode on var22 and var36", var22.equals(var36) ? var22.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var22
//     assertTrue("Contract failed: equals-hashcode on var36 and var22", var36.equals(var22) ? var36.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test186"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    java.awt.Paint var6 = var2.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var7 = var2.getGradientPaintTransformer();
    java.awt.Color var10 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
    java.awt.image.ColorModel var17 = null;
    java.awt.Rectangle var18 = null;
    java.awt.geom.Rectangle2D var19 = null;
    java.awt.geom.AffineTransform var20 = null;
    java.awt.RenderingHints var21 = null;
    java.awt.PaintContext var22 = var10.createContext(var17, var18, var19, var20, var21);
    var2.setLabelPaint((java.awt.Paint)var10);
    org.jfree.chart.util.RectangleAnchor var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setLabelAnchor(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test187"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = var3.getRenderer();
    org.jfree.chart.event.PlotChangeListener var5 = null;
    var3.addChangeListener(var5);
    org.jfree.chart.renderer.category.CategoryItemRenderer var7 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var8 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var7};
    var3.setRenderers(var8);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    var10.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var13 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var14 = var13.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    org.jfree.chart.util.RectangleInsets var17 = var15.getLabelInsets();
    double var19 = var17.trimWidth((-1.0d));
    double var21 = var17.trimHeight((-6.0d));
    boolean var22 = var14.equals((java.lang.Object)var17);
    var10.setInsets(var17, true);
    java.awt.Stroke var25 = var10.getRangeCrosshairStroke();
    org.jfree.chart.renderer.category.CategoryItemRenderer var26 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var27 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var26};
    var10.setRenderers(var27);
    var3.setRenderers(var27);
    org.jfree.chart.axis.CategoryAxis var31 = new org.jfree.chart.axis.CategoryAxis("");
    var31.configure();
    float var33 = var31.getMaximumCategoryLabelWidthRatio();
    var31.setCategoryLabelPositionOffset(0);
    var31.setCategoryMargin(1.0d);
    java.util.List var38 = var3.getCategoriesForAxis(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.set((-16646144), (java.lang.Object)var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test188"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    org.jfree.chart.axis.TickUnitSource var3 = null;
    var1.setStandardTickUnits(var3);
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    java.awt.Paint var7 = var5.getTickLabelPaint();
    var1.setTickLabelPaint(var7);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var9.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var12 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var13 = var12.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    org.jfree.chart.util.RectangleInsets var16 = var14.getLabelInsets();
    double var18 = var16.trimWidth((-1.0d));
    double var20 = var16.trimHeight((-6.0d));
    boolean var21 = var13.equals((java.lang.Object)var16);
    var9.setInsets(var16, true);
    java.awt.Stroke var24 = var9.getRangeCrosshairStroke();
    java.awt.Color var28 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var29 = null;
    java.awt.Rectangle var30 = null;
    java.awt.geom.Rectangle2D var31 = null;
    java.awt.geom.AffineTransform var32 = null;
    java.awt.RenderingHints var33 = null;
    java.awt.PaintContext var34 = var28.createContext(var29, var30, var31, var32, var33);
    int var35 = var28.getRed();
    org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var37 = var36.getRange();
    java.awt.Paint var38 = var36.getTickLabelPaint();
    double var39 = var36.getLowerMargin();
    java.awt.Shape var40 = var36.getLeftArrow();
    java.awt.Stroke var41 = var36.getTickMarkStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.CategoryMarker var43 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L, var7, var24, (java.awt.Paint)var28, var41, 2.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test189"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     java.awt.Stroke var15 = var0.getRangeCrosshairStroke();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var16 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var17 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var16};
//     var0.setRenderers(var17);
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var20 = var19.getRenderer();
//     org.jfree.chart.event.PlotChangeListener var21 = null;
//     var19.addChangeListener(var21);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var23 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var24 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var23};
//     var19.setRenderers(var24);
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     var26.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var29 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var30 = var29.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     org.jfree.chart.util.RectangleInsets var33 = var31.getLabelInsets();
//     double var35 = var33.trimWidth((-1.0d));
//     double var37 = var33.trimHeight((-6.0d));
//     boolean var38 = var30.equals((java.lang.Object)var33);
//     var26.setInsets(var33, true);
//     java.awt.Stroke var41 = var26.getRangeCrosshairStroke();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var42 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var43 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var42};
//     var26.setRenderers(var43);
//     var19.setRenderers(var43);
//     var0.setRenderers(var43);
//     
//     // Checks the contract:  equals-hashcode on var0 and var26
//     assertTrue("Contract failed: equals-hashcode on var0 and var26", var0.equals(var26) ? var0.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var0
//     assertTrue("Contract failed: equals-hashcode on var26 and var0", var26.equals(var0) ? var26.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var29
//     assertTrue("Contract failed: equals-hashcode on var3 and var29", var3.equals(var29) ? var3.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var3
//     assertTrue("Contract failed: equals-hashcode on var29 and var3", var29.equals(var3) ? var29.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test190"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
    org.jfree.chart.event.AxisChangeEvent var28 = null;
    var15.axisChanged(var28);
    org.jfree.chart.annotations.XYAnnotation var30 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var15.removeAnnotation(var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test191"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
//     var15.setBackgroundImageAlpha(0.0f);
//     java.util.List var31 = var15.getAnnotations();
//     org.jfree.chart.axis.AxisSpace var32 = null;
//     var15.setFixedDomainAxisSpace(var32, false);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var37 = var35.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var39 = null;
//     var35.setRenderer(255, var39);
//     java.awt.Stroke var41 = var35.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var42 = var35.getDataset();
//     java.awt.Paint var43 = var35.getNoDataMessagePaint();
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot();
//     var45.clearRangeAxes();
//     boolean var47 = var45.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var49 = var45.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var50 = var45.getParent();
//     org.jfree.chart.axis.AxisLocation var52 = var45.getDomainAxisLocation((-668));
//     var44.setRangeAxisLocation(var52);
//     var35.setDomainAxisLocation(var52, true);
//     var15.setRangeAxisLocation(var52);
//     
//     // Checks the contract:  equals-hashcode on var20 and var45
//     assertTrue("Contract failed: equals-hashcode on var20 and var45", var20.equals(var45) ? var20.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var45 and var20
//     assertTrue("Contract failed: equals-hashcode on var45 and var20", var45.equals(var20) ? var45.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test192"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("CONTRACT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test193"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker((-7.0d));

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test194"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    var0.setOutlineVisible(false);
    org.jfree.chart.plot.Plot var17 = var0.getRootPlot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBackgroundImageAlpha(100.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test195"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     var1.configure();
//     org.jfree.data.category.CategoryDataset var10 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     org.jfree.chart.util.RectangleEdge var13 = null;
//     double var14 = var1.getCategorySeriesMiddle((java.lang.Comparable)"RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]", (java.lang.Comparable)0L, var10, 3.0d, var12, var13);
// 
//   }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test196"); }


    org.jfree.chart.axis.NumberAxis var0 = new org.jfree.chart.axis.NumberAxis();
    java.text.NumberFormat var1 = null;
    var0.setNumberFormatOverride(var1);
    java.lang.String var3 = var0.getLabelURL();
    org.jfree.data.Range var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange(var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test197"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.awt.Paint var2 = var0.getTickLabelPaint();
//     org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var4 = var3.getRange();
//     java.awt.Shape var5 = var3.getLeftArrow();
//     var3.setLabelAngle(0.0d);
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     var8.setRange(0.0d, 100.0d);
//     var8.setLowerBound((-6.0d));
//     var8.setAutoRangeMinimumSize(9.223372036854776E18d);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     var17.setRange(0.0d, 100.0d);
//     boolean var22 = var17.isInverted();
//     org.jfree.chart.axis.Timeline var23 = var17.getTimeline();
//     var8.setTimeline(var23);
//     var3.setTimeline(var23);
//     var0.setTimeline(var23);
//     org.jfree.chart.plot.DefaultDrawingSupplier var27 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var28.setRange(0.0d, 100.0d);
//     var28.setLowerBound((-6.0d));
//     var28.setLabelURL("hi!");
//     org.jfree.chart.plot.Plot var37 = var28.getPlot();
//     java.awt.Shape var38 = var28.getDownArrow();
//     boolean var39 = var28.isPositiveArrowVisible();
//     var28.setLabelAngle(0.0d);
//     org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var43 = var42.getRange();
//     java.text.DateFormat var44 = var42.getDateFormatOverride();
//     var42.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var48 = var42.getLabelFont();
//     org.jfree.data.general.Dataset var49 = null;
//     org.jfree.data.general.DatasetChangeEvent var50 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var42, var49);
//     org.jfree.chart.axis.Timeline var51 = var42.getTimeline();
//     var28.setTimeline(var51);
//     boolean var53 = var27.equals((java.lang.Object)var51);
//     var0.setTimeline(var51);
//     java.awt.Graphics2D var55 = null;
//     org.jfree.chart.axis.AxisState var56 = null;
//     java.awt.geom.Rectangle2D var57 = null;
//     org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
//     var58.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var60 = var58.getFixedLegendItems();
//     var58.setRangeGridlinesVisible(false);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var63 = null;
//     var58.setRenderer(var63, false);
//     org.jfree.chart.util.RectangleEdge var66 = var58.getRangeAxisEdge();
//     java.util.List var67 = var0.refreshTicks(var55, var56, var57, var66);
// 
//   }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test198"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    java.lang.String var3 = var2.toString();
    double var5 = var2.trimWidth(10.0d);
    double var7 = var2.calculateBottomOutset((-1.0d));
    java.awt.geom.Rectangle2D var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var9 = var2.createInsetRectangle(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"+ "'", var3.equals("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3.0d);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test199"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Color var1 = java.awt.Color.decode("CONTRACT");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test200"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    float var19 = var15.getForegroundAlpha();
    org.jfree.chart.plot.IntervalMarker var23 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var23.setStartValue(0.0d);
    double var26 = var23.getStartValue();
    java.awt.Paint var27 = var23.getPaint();
    org.jfree.chart.util.Layer var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker(2, (org.jfree.chart.plot.Marker)var23, var28, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test201() {}
//   public void test201() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test201"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     java.awt.Paint var8 = var0.getDomainGridlinePaint();
//     org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var12.setStartValue(0.0d);
//     double var15 = var12.getStartValue();
//     java.awt.Paint var16 = var12.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
//     var12.setEndValue(9.223372036854776E18d);
//     java.lang.Object var20 = var12.clone();
//     org.jfree.chart.util.Layer var21 = null;
//     var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
//     org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
//     var23.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var27 = null;
//     var23.setRenderer(255, var27);
//     java.awt.Stroke var29 = var23.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var30 = var23.getDataset();
//     java.awt.Image var31 = var23.getBackgroundImage();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var33 = var23.getRenderer((-668));
//     var12.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var23);
//     
//     // Checks the contract:  equals-hashcode on var0 and var23
//     assertTrue("Contract failed: equals-hashcode on var0 and var23", var0.equals(var23) ? var0.hashCode() == var23.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var23 and var0
//     assertTrue("Contract failed: equals-hashcode on var23 and var0", var23.equals(var0) ? var23.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test202"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    float var4 = var1.getAlpha();
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    org.jfree.chart.axis.TickUnitSource var8 = null;
    var6.setStandardTickUnits(var8);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    java.awt.Paint var12 = var10.getTickLabelPaint();
    var6.setTickLabelPaint(var12);
    org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var16 = var15.getAlpha();
    java.awt.Stroke var17 = var15.getStroke();
    org.jfree.chart.plot.CategoryMarker var18 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var12, var17);
    var1.setOutlinePaint(var12);
    org.jfree.chart.util.RectangleAnchor var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setLabelAnchor(var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test203"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     int var29 = var15.indexOf(var28);
//     float var30 = var15.getBackgroundImageAlpha();
//     org.jfree.chart.util.Layer var31 = null;
//     java.util.Collection var32 = var15.getDomainMarkers(var31);
//     org.jfree.chart.LegendItemCollection var33 = var15.getLegendItems();
//     org.jfree.chart.plot.PlotRenderingInfo var35 = null;
//     org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
//     var37.clearRangeAxes();
//     boolean var39 = var37.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var41 = var37.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var42 = var37.getParent();
//     org.jfree.chart.axis.AxisLocation var44 = var37.getDomainAxisLocation((-668));
//     var36.setRangeAxisLocation(var44);
//     org.jfree.chart.axis.AxisSpace var46 = null;
//     var36.setFixedDomainAxisSpace(var46, true);
//     org.jfree.chart.plot.PlotRenderingInfo var50 = null;
//     java.awt.geom.Rectangle2D var51 = null;
//     org.jfree.chart.util.RectangleAnchor var52 = null;
//     java.awt.geom.Point2D var53 = org.jfree.chart.util.RectangleAnchor.coordinates(var51, var52);
//     var36.zoomDomainAxes(9.223372036854776E18d, var50, var53);
//     var15.zoomDomainAxes((-7.0d), var35, var53, true);
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test204"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.plot.Plot var28 = var15.getParent();
    java.awt.Stroke var29 = var15.getDomainCrosshairStroke();
    org.jfree.chart.plot.ValueMarker var32 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var33 = var32.getAlpha();
    java.awt.Stroke var34 = var32.getStroke();
    org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var36 = var35.getRange();
    java.text.DateFormat var37 = var35.getDateFormatOverride();
    var35.resizeRange((-1.0d), (-1.0d));
    boolean var41 = var32.equals((java.lang.Object)var35);
    java.awt.Paint var42 = var32.getPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setQuadrantPaint((-16646144), var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test205"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    boolean var9 = var0.isNegativeArrowVisible();
    float var10 = var0.getTickMarkOutsideLength();
    var0.resizeRange((-7.0d));
    boolean var13 = var0.isPositiveArrowVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test206"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    var15.setBackgroundImageAlpha(0.0f);
    java.util.List var31 = var15.getAnnotations();
    org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var33 = var32.getRange();
    java.awt.Paint var34 = var32.getTickLabelPaint();
    java.awt.Paint var35 = var32.getTickLabelPaint();
    java.awt.geom.Rectangle2D var37 = null;
    org.jfree.chart.util.RectangleEdge var38 = null;
    double var39 = var32.java2DToValue((-7.0d), var37, var38);
    int var40 = var15.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var32);
    org.jfree.chart.annotations.XYAnnotation var41 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var15.removeAnnotation(var41, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-9.223372036854776E18d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test207"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    var15.setDomainCrosshairVisible(false);
    org.jfree.chart.plot.ValueMarker var24 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var25 = var24.getLabelOffsetType();
    java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    var24.setLabelPaint((java.awt.Paint)var29);
    org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var32 = var31.getRange();
    org.jfree.chart.util.RectangleInsets var33 = var31.getLabelInsets();
    double var35 = var33.trimWidth(0.0d);
    org.jfree.chart.util.UnitType var36 = var33.getUnitType();
    var24.setLabelOffset(var33);
    org.jfree.chart.util.Layer var38 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((org.jfree.chart.plot.Marker)var24, var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test208"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.plot.PlotRenderingInfo var20 = null;
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.clearRangeAxes();
    boolean var23 = var21.isDomainGridlinesVisible();
    org.jfree.chart.plot.PlotRenderingInfo var25 = null;
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.util.RectangleAnchor var27 = null;
    java.awt.geom.Point2D var28 = org.jfree.chart.util.RectangleAnchor.coordinates(var26, var27);
    var21.zoomRangeAxes(0.05d, var25, var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.zoomDomainAxes(0.05d, 0.0d, var20, var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test209"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Date var11 = var0.getStart();
//     int var12 = var0.getYear();
//     java.util.Calendar var13 = null;
//     long var14 = var0.getMiddleMillisecond(var13);
// 
//   }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test210"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setAutoRangeMinimumSize(9.223372036854776E18d);
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    var9.setRange(0.0d, 100.0d);
    boolean var14 = var9.isInverted();
    org.jfree.chart.axis.Timeline var15 = var9.getTimeline();
    var0.setTimeline(var15);
    double var17 = var0.getAutoRangeMinimumSize();
    var0.setLowerMargin(9.223372036854776E18d);
    java.lang.Class var20 = null;
    java.lang.Class var21 = null;
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    org.jfree.chart.util.RectangleInsets var24 = var22.getLabelInsets();
    org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var26 = var25.getRange();
    org.jfree.chart.axis.TickUnitSource var27 = null;
    var25.setStandardTickUnits(var27);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    java.awt.Paint var31 = var29.getTickLabelPaint();
    var25.setTickLabelPaint(var31);
    var25.resizeRange((-1.0d));
    java.util.Date var35 = var25.getMinimumDate();
    var22.setMinimumDate(var35);
    org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var38 = var37.getRange();
    java.awt.Shape var39 = var37.getLeftArrow();
    var37.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    var42.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var47 = var46.getRange();
    var42.setRangeWithMargins(var47);
    java.util.TimeZone var49 = var42.getTimeZone();
    var37.setTimeZone(var49);
    org.jfree.data.time.RegularTimePeriod var51 = org.jfree.data.time.RegularTimePeriod.createInstance(var21, var35, var49);
    org.jfree.chart.axis.DateAxis var52 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var53 = var52.getRange();
    var52.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var56 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var57 = var56.getRange();
    var52.setRangeWithMargins(var57);
    java.util.TimeZone var59 = var52.getTimeZone();
    org.jfree.data.time.RegularTimePeriod var60 = org.jfree.data.time.RegularTimePeriod.createInstance(var20, var35, var59);
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    org.jfree.chart.axis.TickUnitSource var63 = null;
    var61.setStandardTickUnits(var63);
    boolean var65 = var61.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var66 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var67 = var66.getRange();
    var66.setVerticalTickLabels(false);
    org.jfree.data.Range var70 = var66.getDefaultAutoRange();
    var66.setAutoRangeMinimumSize(4.0d);
    org.jfree.chart.axis.DateTickUnit var73 = var66.getTickUnit();
    java.util.Date var74 = var61.calculateHighestVisibleTickValue(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange(var35, var74);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test211"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var1 = var0.getRenderer();
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     org.jfree.chart.plot.CategoryMarker var6 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     var3.addDomainMarker(var6);
//     var6.setAlpha(0.0f);
//     org.jfree.chart.util.Layer var10 = null;
//     boolean var11 = var0.removeRangeMarker(2014, (org.jfree.chart.plot.Marker)var6, var10);
//     
//     // Checks the contract:  equals-hashcode on var0 and var3
//     assertTrue("Contract failed: equals-hashcode on var0 and var3", var0.equals(var3) ? var0.hashCode() == var3.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var0
//     assertTrue("Contract failed: equals-hashcode on var3 and var0", var3.equals(var0) ? var3.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test212() {}
//   public void test212() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test212"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
//     java.util.Calendar var2 = null;
//     long var3 = var1.getMiddleMillisecond(var2);
// 
//   }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test213"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.plot.Marker var26 = null;
    org.jfree.chart.util.Layer var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker(0, var26, var27, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test214() {}
//   public void test214() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test214"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     int var16 = var15.getDomainAxisCount();
//     org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
//     var18.clearRangeAxes();
//     boolean var20 = var18.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var24 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var25 = null;
//     boolean var26 = var18.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var24, var25);
//     org.jfree.chart.plot.IntervalMarker var29 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var29.setStartValue(0.0d);
//     double var32 = var29.getStartValue();
//     java.awt.Paint var33 = var29.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var34 = var29.getGradientPaintTransformer();
//     var29.setEndValue(9.223372036854776E18d);
//     java.awt.Color var39 = java.awt.Color.getColor("", 100);
//     int var40 = var39.getRed();
//     int var41 = var39.getAlpha();
//     var29.setPaint((java.awt.Paint)var39);
//     var24.setPaint((java.awt.Paint)var39);
//     java.awt.Color var44 = java.awt.Color.getColor("XY Plot", var39);
//     var15.setDomainCrosshairPaint((java.awt.Paint)var44);
//     java.awt.color.ColorSpace var46 = null;
//     float[] var47 = null;
//     float[] var48 = var44.getComponents(var46, var47);
// 
//   }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test215"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    int var16 = var15.getDomainAxisCount();
    org.jfree.chart.plot.PlotRenderingInfo var19 = null;
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var27 = var20.getDataset();
    java.awt.Image var28 = var20.getBackgroundImage();
    org.jfree.data.category.CategoryDataset var30 = var20.getDataset(20);
    org.jfree.chart.plot.PlotRenderingInfo var32 = null;
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    var33.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var35 = var33.getFixedLegendItems();
    var33.setRangeGridlinesVisible(false);
    java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var43 = null;
    java.awt.Rectangle var44 = null;
    java.awt.geom.Rectangle2D var45 = null;
    java.awt.geom.AffineTransform var46 = null;
    java.awt.RenderingHints var47 = null;
    java.awt.PaintContext var48 = var42.createContext(var43, var44, var45, var46, var47);
    org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var51 = var50.getRange();
    org.jfree.chart.axis.TickUnitSource var52 = null;
    var50.setStandardTickUnits(var52);
    org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var55 = var54.getRange();
    java.awt.Paint var56 = var54.getTickLabelPaint();
    var50.setTickLabelPaint(var56);
    org.jfree.chart.plot.ValueMarker var59 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var60 = var59.getAlpha();
    java.awt.Stroke var61 = var59.getStroke();
    org.jfree.chart.plot.CategoryMarker var62 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var56, var61);
    java.awt.Color var66 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var67 = null;
    java.awt.Rectangle var68 = null;
    java.awt.geom.Rectangle2D var69 = null;
    java.awt.geom.AffineTransform var70 = null;
    java.awt.RenderingHints var71 = null;
    java.awt.PaintContext var72 = var66.createContext(var67, var68, var69, var70, var71);
    org.jfree.chart.axis.DateAxis var73 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var74 = var73.getRange();
    java.awt.Paint var75 = var73.getTickLabelPaint();
    double var76 = var73.getLowerMargin();
    java.awt.Shape var77 = var73.getLeftArrow();
    java.awt.Stroke var78 = var73.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var80 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var42, var61, (java.awt.Paint)var66, var78, 0.8f);
    var33.setDomainGridlinePaint((java.awt.Paint)var66);
    org.jfree.chart.plot.PlotRenderingInfo var83 = null;
    java.awt.geom.Rectangle2D var84 = null;
    org.jfree.chart.util.RectangleAnchor var85 = null;
    java.awt.geom.Point2D var86 = org.jfree.chart.util.RectangleAnchor.coordinates(var84, var85);
    var33.zoomDomainAxes(9.223372036854776E18d, var83, var86, false);
    var20.zoomRangeAxes(0.0d, var32, var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.zoomRangeAxes((-6.0d), (-9.223372036854776E18d), var19, var86);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test216() {}
//   public void test216() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test216"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
//     org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
//     int var29 = var0.getIndexOf(var28);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Color var34 = java.awt.Color.getColor("", 100);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     org.jfree.chart.axis.TickUnitSource var38 = null;
//     var36.setStandardTickUnits(var38);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     java.awt.Paint var42 = var40.getTickLabelPaint();
//     var36.setTickLabelPaint(var42);
//     org.jfree.chart.plot.ValueMarker var45 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var46 = var45.getAlpha();
//     java.awt.Stroke var47 = var45.getStroke();
//     org.jfree.chart.plot.CategoryMarker var48 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var42, var47);
//     org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var34, var47);
//     boolean var50 = var30.removeRangeMarker((org.jfree.chart.plot.Marker)var49);
//     var0.addDomainMarker((org.jfree.chart.plot.Marker)var49);
//     
//     // Checks the contract:  equals-hashcode on var22 and var45
//     assertTrue("Contract failed: equals-hashcode on var22 and var45", var22.equals(var45) ? var22.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var45 and var22
//     assertTrue("Contract failed: equals-hashcode on var45 and var22", var45.equals(var22) ? var45.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var48
//     assertTrue("Contract failed: equals-hashcode on var25 and var48", var25.equals(var48) ? var25.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var48 and var25
//     assertTrue("Contract failed: equals-hashcode on var48 and var25", var48.equals(var25) ? var48.hashCode() == var25.hashCode() : true);
// 
//   }

  public void test217() {}
//   public void test217() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test217"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.chart.event.PlotChangeEvent var7 = null;
//     var0.notifyListeners(var7);
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     java.text.DateFormat var11 = var9.getDateFormatOverride();
//     var9.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var15 = var9.getLabelFont();
//     org.jfree.data.general.Dataset var16 = null;
//     org.jfree.data.general.DatasetChangeEvent var17 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var9, var16);
//     var0.datasetChanged(var17);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var20 = var0.getRenderer(255);
//     org.jfree.data.xy.XYDataset var21 = null;
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     java.awt.Paint var25 = var22.getTickLabelPaint();
//     var22.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var28.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var28.setRangeWithMargins(var33);
//     org.jfree.chart.renderer.xy.XYItemRenderer var35 = null;
//     org.jfree.chart.plot.XYPlot var36 = new org.jfree.chart.plot.XYPlot(var21, (org.jfree.chart.axis.ValueAxis)var22, (org.jfree.chart.axis.ValueAxis)var28, var35);
//     org.jfree.chart.util.RectangleEdge var38 = var36.getDomainAxisEdge(12);
//     org.jfree.data.xy.XYDataset var40 = var36.getDataset((-1));
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     var41.clearRangeAxes();
//     boolean var43 = var41.isDomainGridlinesVisible();
//     org.jfree.data.category.CategoryDataset var44 = var41.getDataset();
//     org.jfree.chart.plot.DatasetRenderingOrder var45 = var41.getDatasetRenderingOrder();
//     var36.setDatasetRenderingOrder(var45);
//     var0.setDatasetRenderingOrder(var45);
//     
//     // Checks the contract:  equals-hashcode on var0 and var41
//     assertTrue("Contract failed: equals-hashcode on var0 and var41", var0.equals(var41) ? var0.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var0
//     assertTrue("Contract failed: equals-hashcode on var41 and var0", var41.equals(var0) ? var41.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test218"); }


    java.awt.Color var1 = java.awt.Color.getColor("20-December-2014");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test219"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.xy.XYDataset var7 = null;
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     java.awt.Paint var10 = var8.getTickLabelPaint();
//     java.awt.Paint var11 = var8.getTickLabelPaint();
//     var8.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     var14.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     var14.setRangeWithMargins(var19);
//     org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot(var7, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.axis.ValueAxis)var14, var21);
//     int var23 = var22.getDomainAxisCount();
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     var25.clearRangeAxes();
//     boolean var27 = var25.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var31 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var32 = null;
//     boolean var33 = var25.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var31, var32);
//     org.jfree.chart.plot.IntervalMarker var36 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var36.setStartValue(0.0d);
//     double var39 = var36.getStartValue();
//     java.awt.Paint var40 = var36.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var41 = var36.getGradientPaintTransformer();
//     var36.setEndValue(9.223372036854776E18d);
//     java.awt.Color var46 = java.awt.Color.getColor("", 100);
//     int var47 = var46.getRed();
//     int var48 = var46.getAlpha();
//     var36.setPaint((java.awt.Paint)var46);
//     var31.setPaint((java.awt.Paint)var46);
//     java.awt.Color var51 = java.awt.Color.getColor("XY Plot", var46);
//     var22.setDomainCrosshairPaint((java.awt.Paint)var51);
//     org.jfree.chart.plot.ValueMarker var54 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var55 = var54.getLabelOffsetType();
//     java.awt.Font var56 = var54.getLabelFont();
//     boolean var57 = var51.equals((java.lang.Object)var54);
//     org.jfree.chart.util.Layer var58 = null;
//     boolean var59 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var54, var58);
//     
//     // Checks the contract:  equals-hashcode on var0 and var25
//     assertTrue("Contract failed: equals-hashcode on var0 and var25", var0.equals(var25) ? var0.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var0
//     assertTrue("Contract failed: equals-hashcode on var25 and var0", var25.equals(var0) ? var25.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test220"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.text.DateFormat var6 = var4.getDateFormatOverride();
    var4.resizeRange((-1.0d), (-1.0d));
    boolean var10 = var1.equals((java.lang.Object)var4);
    java.awt.Shape var11 = var4.getUpArrow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test221"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    var15.setBackgroundImageAlpha(0.0f);
    java.util.List var31 = var15.getAnnotations();
    org.jfree.chart.axis.AxisSpace var32 = null;
    var15.setFixedDomainAxisSpace(var32, false);
    java.awt.Stroke var35 = var15.getDomainGridlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test222"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Image var8 = var0.getBackgroundImage();
    org.jfree.chart.renderer.category.CategoryItemRenderer var10 = var0.getRenderer((-668));
    var0.setWeight(100);
    org.jfree.chart.event.ChartChangeEvent var13 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test223"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    java.awt.Stroke var29 = var15.getRangeZeroBaselineStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Paint var31 = var15.getQuadrantPaint(253);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test224() {}
//   public void test224() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test224"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var2 = null;
//     var0.setFixedRangeAxisSpace(var2, false);
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     var5.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
//     var5.setRenderer(255, var9);
//     var5.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var12 = var5.getAxisOffset();
//     var0.setInsets(var12);
//     org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
//     var14.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var18 = var17.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
//     double var23 = var21.trimWidth((-1.0d));
//     double var25 = var21.trimHeight((-6.0d));
//     boolean var26 = var18.equals((java.lang.Object)var21);
//     var14.setInsets(var21, true);
//     org.jfree.chart.LegendItemCollection var29 = var14.getLegendItems();
//     var0.setFixedLegendItems(var29);
//     var0.clearRangeMarkers();
//     org.jfree.chart.plot.ValueMarker var34 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var35 = var34.getAlpha();
//     java.awt.Stroke var36 = var34.getStroke();
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var38 = var37.getRange();
//     java.text.DateFormat var39 = var37.getDateFormatOverride();
//     var37.resizeRange((-1.0d), (-1.0d));
//     boolean var43 = var34.equals((java.lang.Object)var37);
//     org.jfree.chart.util.RectangleInsets var44 = var34.getLabelOffset();
//     org.jfree.chart.util.Layer var45 = null;
//     var0.addRangeMarker(12, (org.jfree.chart.plot.Marker)var34, var45);
//     
//     // Checks the contract:  equals-hashcode on var17 and var34
//     assertTrue("Contract failed: equals-hashcode on var17 and var34", var17.equals(var34) ? var17.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var17
//     assertTrue("Contract failed: equals-hashcode on var34 and var17", var34.equals(var17) ? var34.hashCode() == var17.hashCode() : true);
// 
//   }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test225"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var9 = var0.getPlot();
    java.awt.Shape var10 = var0.getDownArrow();
    boolean var11 = var0.isPositiveArrowVisible();
    var0.setLabelAngle(0.0d);
    org.jfree.chart.axis.CategoryAxis var15 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var18 = null;
    org.jfree.chart.util.RectangleEdge var19 = null;
    double var20 = var15.getCategoryMiddle(0, (-1), var18, var19);
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.clearRangeAxes();
    boolean var23 = var21.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var25 = var21.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var26 = var21.getParent();
    var15.addChangeListener((org.jfree.chart.event.AxisChangeListener)var21);
    boolean var28 = var21.isRangeZoomable();
    org.jfree.chart.axis.CategoryAxis var30 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var35 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var36 = null;
    java.awt.Rectangle var37 = null;
    java.awt.geom.Rectangle2D var38 = null;
    java.awt.geom.AffineTransform var39 = null;
    java.awt.RenderingHints var40 = null;
    java.awt.PaintContext var41 = var35.createContext(var36, var37, var38, var39, var40);
    var30.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var35);
    var30.setTickMarkInsideLength(2.0f);
    var30.clearCategoryLabelToolTips();
    java.awt.geom.Rectangle2D var48 = null;
    org.jfree.chart.util.RectangleEdge var49 = null;
    double var50 = var30.getCategoryEnd((-1), (-668), var48, var49);
    var21.setDomainAxis(var30);
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var21);
    var0.setAutoRange(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.0d);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test226"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    var7.setRangeCrosshairValue((-7.0d), false);
    org.jfree.chart.LegendItemCollection var18 = var7.getLegendItems();
    org.jfree.chart.axis.AxisLocation var19 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setRangeAxisLocation(var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test227"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
//     org.jfree.chart.axis.AxisLocation var6 = var0.getRangeAxisLocation(2014);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var8.clearRangeAxes();
//     boolean var10 = var8.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var12 = var8.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var13 = var8.getParent();
//     org.jfree.chart.axis.AxisLocation var15 = var8.getDomainAxisLocation((-668));
//     var7.setRangeAxisLocation(var15);
//     org.jfree.chart.axis.AxisSpace var17 = null;
//     var7.setFixedDomainAxisSpace(var17, true);
//     var7.configureDomainAxes();
//     org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
//     var21.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var24 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var25 = var24.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     org.jfree.chart.util.RectangleInsets var28 = var26.getLabelInsets();
//     double var30 = var28.trimWidth((-1.0d));
//     double var32 = var28.trimHeight((-6.0d));
//     boolean var33 = var25.equals((java.lang.Object)var28);
//     var21.setInsets(var28, true);
//     org.jfree.chart.LegendItemCollection var36 = var21.getLegendItems();
//     boolean var37 = var21.isSubplot();
//     org.jfree.chart.plot.PlotOrientation var38 = var21.getOrientation();
//     var7.setOrientation(var38);
//     org.jfree.chart.util.RectangleEdge var40 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var6, var38);
//     
//     // Checks the contract:  equals-hashcode on var0 and var8
//     assertTrue("Contract failed: equals-hashcode on var0 and var8", var0.equals(var8) ? var0.hashCode() == var8.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var0
//     assertTrue("Contract failed: equals-hashcode on var8 and var0", var8.equals(var0) ? var8.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test228"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
//     var15.setRangeCrosshairValue(0.0d, true);
//     java.awt.Graphics2D var34 = null;
//     java.awt.geom.Rectangle2D var35 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var36 = null;
//     var15.drawAnnotations(var34, var35, var36);
//     org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var41.setStartValue(0.0d);
//     double var44 = var41.getStartValue();
//     org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var47 = var46.getAlpha();
//     java.awt.Stroke var48 = var46.getStroke();
//     var41.setOutlineStroke(var48);
//     var41.setStartValue(9.223372036854776E18d);
//     org.jfree.chart.util.Layer var52 = null;
//     boolean var54 = var15.removeDomainMarker(253, (org.jfree.chart.plot.Marker)var41, var52, true);
//     org.jfree.data.xy.XYDataset var55 = null;
//     org.jfree.chart.axis.DateAxis var56 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var57 = var56.getRange();
//     java.awt.Paint var58 = var56.getTickLabelPaint();
//     java.awt.Paint var59 = var56.getTickLabelPaint();
//     var56.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var62 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var63 = var62.getRange();
//     var62.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var66 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var67 = var66.getRange();
//     var62.setRangeWithMargins(var67);
//     org.jfree.chart.renderer.xy.XYItemRenderer var69 = null;
//     org.jfree.chart.plot.XYPlot var70 = new org.jfree.chart.plot.XYPlot(var55, (org.jfree.chart.axis.ValueAxis)var56, (org.jfree.chart.axis.ValueAxis)var62, var69);
//     org.jfree.chart.renderer.xy.XYItemRenderer var72 = null;
//     var70.setRenderer(0, var72);
//     org.jfree.data.xy.XYDataset var74 = null;
//     var70.setDataset(var74);
//     org.jfree.chart.plot.ValueMarker var77 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var78 = var77.getAlpha();
//     java.awt.Stroke var79 = var77.getStroke();
//     var70.setDomainZeroBaselineStroke(var79);
//     var41.setStroke(var79);
//     
//     // Checks the contract:  equals-hashcode on var15 and var70
//     assertTrue("Contract failed: equals-hashcode on var15 and var70", var15.equals(var70) ? var15.hashCode() == var70.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var70 and var15
//     assertTrue("Contract failed: equals-hashcode on var70 and var15", var70.equals(var15) ? var70.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var46 and var77
//     assertTrue("Contract failed: equals-hashcode on var46 and var77", var46.equals(var77) ? var46.hashCode() == var77.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var77 and var46
//     assertTrue("Contract failed: equals-hashcode on var77 and var46", var77.equals(var46) ? var77.hashCode() == var46.hashCode() : true);
// 
//   }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test229"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis("");
    var6.configure();
    float var8 = var6.getMaximumCategoryLabelWidthRatio();
    var6.setCategoryLabelPositionOffset(0);
    var6.setMaximumCategoryLabelLines(0);
    int var13 = var0.getDomainAxisIndex(var6);
    org.jfree.chart.axis.CategoryAxis var14 = null;
    java.util.List var15 = var0.getCategoriesForAxis(var14);
    org.jfree.chart.axis.AxisSpace var16 = var0.getFixedRangeAxisSpace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test230"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryLabelPositionOffset(0);
    var1.setCategoryMargin(1.0d);
    var1.setMaximumCategoryLabelLines(10);
    boolean var10 = var1.isTickLabelsVisible();
    var1.setCategoryLabelPositionOffset(253);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test231"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.extendWidth(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 106.0d);

  }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test232"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
//     org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
//     int var29 = var0.getIndexOf(var28);
//     boolean var30 = var0.isDomainCrosshairVisible();
//     org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
//     var31.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var34 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var35 = var34.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     org.jfree.chart.util.RectangleInsets var38 = var36.getLabelInsets();
//     double var40 = var38.trimWidth((-1.0d));
//     double var42 = var38.trimHeight((-6.0d));
//     boolean var43 = var35.equals((java.lang.Object)var38);
//     var31.setInsets(var38, true);
//     java.awt.Stroke var46 = var31.getRangeCrosshairStroke();
//     java.awt.Paint var47 = var31.getRangeGridlinePaint();
//     var0.setDomainGridlinePaint(var47);
//     
//     // Checks the contract:  equals-hashcode on var22 and var34
//     assertTrue("Contract failed: equals-hashcode on var22 and var34", var22.equals(var34) ? var22.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var22
//     assertTrue("Contract failed: equals-hashcode on var34 and var22", var34.equals(var22) ? var34.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test233"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
//     boolean var5 = var0.getDrawSharedDomainAxis();
//     double var6 = var0.getRangeCrosshairValue();
//     org.jfree.data.xy.XYDataset var7 = null;
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     java.awt.Paint var10 = var8.getTickLabelPaint();
//     java.awt.Paint var11 = var8.getTickLabelPaint();
//     var8.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     var14.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     var14.setRangeWithMargins(var19);
//     org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot(var7, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.axis.ValueAxis)var14, var21);
//     org.jfree.chart.util.RectangleEdge var24 = var22.getDomainAxisEdge(12);
//     org.jfree.data.xy.XYDataset var26 = var22.getDataset((-1));
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     var27.clearRangeAxes();
//     boolean var29 = var27.isDomainGridlinesVisible();
//     org.jfree.data.category.CategoryDataset var30 = var27.getDataset();
//     org.jfree.chart.plot.DatasetRenderingOrder var31 = var27.getDatasetRenderingOrder();
//     var22.setDatasetRenderingOrder(var31);
//     var0.setDatasetRenderingOrder(var31);
//     
//     // Checks the contract:  equals-hashcode on var0 and var27
//     assertTrue("Contract failed: equals-hashcode on var0 and var27", var0.equals(var27) ? var0.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var0
//     assertTrue("Contract failed: equals-hashcode on var27 and var0", var27.equals(var0) ? var27.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test234"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     int var29 = var15.indexOf(var28);
//     float var30 = var15.getBackgroundImageAlpha();
//     org.jfree.chart.util.Layer var31 = null;
//     java.util.Collection var32 = var15.getDomainMarkers(var31);
//     org.jfree.chart.LegendItemCollection var33 = var15.getLegendItems();
//     org.jfree.chart.plot.PlotRenderingInfo var35 = null;
//     org.jfree.data.xy.XYDataset var36 = null;
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var38 = var37.getRange();
//     java.awt.Paint var39 = var37.getTickLabelPaint();
//     java.awt.Paint var40 = var37.getTickLabelPaint();
//     var37.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var43.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var48 = var47.getRange();
//     var43.setRangeWithMargins(var48);
//     org.jfree.chart.renderer.xy.XYItemRenderer var50 = null;
//     org.jfree.chart.plot.XYPlot var51 = new org.jfree.chart.plot.XYPlot(var36, (org.jfree.chart.axis.ValueAxis)var37, (org.jfree.chart.axis.ValueAxis)var43, var50);
//     org.jfree.chart.plot.PlotRenderingInfo var53 = null;
//     org.jfree.chart.plot.CategoryPlot var54 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var55 = new org.jfree.chart.plot.CategoryPlot();
//     var55.clearRangeAxes();
//     boolean var57 = var55.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var59 = var55.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var60 = var55.getParent();
//     org.jfree.chart.axis.AxisLocation var62 = var55.getDomainAxisLocation((-668));
//     var54.setRangeAxisLocation(var62);
//     org.jfree.chart.axis.AxisSpace var64 = null;
//     var54.setFixedDomainAxisSpace(var64, true);
//     org.jfree.chart.plot.PlotRenderingInfo var68 = null;
//     java.awt.geom.Rectangle2D var69 = null;
//     org.jfree.chart.util.RectangleAnchor var70 = null;
//     java.awt.geom.Point2D var71 = org.jfree.chart.util.RectangleAnchor.coordinates(var69, var70);
//     var54.zoomDomainAxes(9.223372036854776E18d, var68, var71);
//     var51.zoomRangeAxes((-9.223372036854776E18d), var53, var71);
//     var15.zoomDomainAxes((-6.0d), var35, var71);
//     
//     // Checks the contract:  equals-hashcode on var20 and var55
//     assertTrue("Contract failed: equals-hashcode on var20 and var55", var20.equals(var55) ? var20.hashCode() == var55.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var55 and var20
//     assertTrue("Contract failed: equals-hashcode on var55 and var20", var55.equals(var20) ? var55.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test235"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.ValueAxis var29 = var15.getRangeAxisForDataset(2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test236"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setCategoryLabelPositionOffset((-16646144));
    org.jfree.chart.util.RectangleInsets var8 = var1.getTickLabelInsets();
    org.jfree.chart.axis.CategoryLabelPositions var9 = var1.getCategoryLabelPositions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test237"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     int var27 = var15.getIndexOf(var26);
//     java.lang.String var28 = var15.getPlotType();
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     java.awt.Shape var31 = var29.getLeftArrow();
//     var29.setLabelAngle(0.0d);
//     org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var35 = var34.getRange();
//     var34.setRange(0.0d, 100.0d);
//     var34.setLowerBound((-6.0d));
//     var34.setAutoRangeMinimumSize(9.223372036854776E18d);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var43.setRange(0.0d, 100.0d);
//     boolean var48 = var43.isInverted();
//     org.jfree.chart.axis.Timeline var49 = var43.getTimeline();
//     var34.setTimeline(var49);
//     var29.setTimeline(var49);
//     boolean var53 = var29.isHiddenValue(41993L);
//     var15.setDomainAxis((org.jfree.chart.axis.ValueAxis)var29);
//     org.jfree.chart.plot.CategoryPlot var55 = new org.jfree.chart.plot.CategoryPlot();
//     var55.clearRangeAxes();
//     boolean var57 = var55.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var59 = var55.getRangeAxis((-16646144));
//     org.jfree.chart.axis.AxisLocation var61 = var55.getRangeAxisLocation(2014);
//     var15.setDomainAxisLocation(var61);
//     org.jfree.chart.plot.CategoryPlot var63 = new org.jfree.chart.plot.CategoryPlot();
//     var63.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var66 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var67 = var66.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var68 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var69 = var68.getRange();
//     org.jfree.chart.util.RectangleInsets var70 = var68.getLabelInsets();
//     double var72 = var70.trimWidth((-1.0d));
//     double var74 = var70.trimHeight((-6.0d));
//     boolean var75 = var67.equals((java.lang.Object)var70);
//     var63.setInsets(var70, true);
//     org.jfree.chart.LegendItemCollection var78 = var63.getLegendItems();
//     boolean var79 = var63.isSubplot();
//     org.jfree.chart.plot.PlotOrientation var80 = var63.getOrientation();
//     org.jfree.chart.util.RectangleEdge var81 = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(var61, var80);
//     
//     // Checks the contract:  equals-hashcode on var22 and var66
//     assertTrue("Contract failed: equals-hashcode on var22 and var66", var22.equals(var66) ? var22.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var22
//     assertTrue("Contract failed: equals-hashcode on var66 and var22", var66.equals(var22) ? var66.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test238() {}
//   public void test238() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test238"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
//     org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
//     int var29 = var0.getIndexOf(var28);
//     org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.Layer var32 = null;
//     boolean var33 = var0.removeDomainMarker((org.jfree.chart.plot.Marker)var31, var32);
//     
//     // Checks the contract:  equals-hashcode on var22 and var31
//     assertTrue("Contract failed: equals-hashcode on var22 and var31", var22.equals(var31) ? var22.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var22
//     assertTrue("Contract failed: equals-hashcode on var31 and var22", var31.equals(var22) ? var31.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test239() {}
//   public void test239() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test239"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Calendar var11 = null;
//     long var12 = var0.getFirstMillisecond(var11);
// 
//   }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test240"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.axis.DateTickUnit var1 = var0.getTickUnit();
    var0.setFixedAutoRange(106.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test241() {}
//   public void test241() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test241"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     boolean var17 = var15.isDomainGridlinesVisible();
//     boolean var18 = var7.equals((java.lang.Object)var15);
//     org.jfree.chart.axis.CategoryAxis var21 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.util.RectangleEdge var25 = null;
//     double var26 = var21.getCategoryMiddle(0, (-1), var24, var25);
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     var27.clearRangeAxes();
//     boolean var29 = var27.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var31 = var27.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var32 = var27.getParent();
//     var21.addChangeListener((org.jfree.chart.event.AxisChangeListener)var27);
//     boolean var34 = var27.isRangeZoomable();
//     var27.setRangeCrosshairValue((-7.0d), false);
//     org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var41.setStartValue(0.0d);
//     double var44 = var41.getStartValue();
//     org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var47 = var46.getAlpha();
//     java.awt.Stroke var48 = var46.getStroke();
//     var41.setOutlineStroke(var48);
//     var41.setStartValue(9.223372036854776E18d);
//     org.jfree.chart.util.GradientPaintTransformer var52 = null;
//     var41.setGradientPaintTransformer(var52);
//     org.jfree.chart.util.Layer var54 = null;
//     boolean var56 = var27.removeRangeMarker((-16646144), (org.jfree.chart.plot.Marker)var41, var54, true);
//     org.jfree.chart.util.Layer var57 = null;
//     var15.addRangeMarker(12, (org.jfree.chart.plot.Marker)var41, var57);
//     
//     // Checks the contract:  equals-hashcode on var3 and var46
//     assertTrue("Contract failed: equals-hashcode on var3 and var46", var3.equals(var46) ? var3.hashCode() == var46.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var46 and var3
//     assertTrue("Contract failed: equals-hashcode on var46 and var3", var46.equals(var3) ? var46.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test242"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setCategoryMargin(9.223372036854776E18d);
//     var1.setLowerMargin(0.0d);
//     java.awt.Graphics2D var8 = null;
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     var9.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var12 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var13 = var12.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     org.jfree.chart.util.RectangleInsets var16 = var14.getLabelInsets();
//     double var18 = var16.trimWidth((-1.0d));
//     double var20 = var16.trimHeight((-6.0d));
//     boolean var21 = var13.equals((java.lang.Object)var16);
//     var9.setInsets(var16, true);
//     var9.setOutlineVisible(false);
//     org.jfree.chart.plot.Plot var26 = var9.getRootPlot();
//     java.awt.geom.Rectangle2D var27 = null;
//     org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
//     var28.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var30 = var28.getFixedLegendItems();
//     var28.setRangeGridlinesVisible(false);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var33 = null;
//     var28.setRenderer(var33, false);
//     org.jfree.chart.util.RectangleEdge var36 = var28.getRangeAxisEdge();
//     org.jfree.chart.axis.AxisSpace var37 = null;
//     org.jfree.chart.axis.AxisSpace var38 = var1.reserveSpace(var8, var26, var27, var36, var37);
// 
//   }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test243"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    var7.setRangeCrosshairValue((-7.0d), false);
    double var18 = var7.getAnchorValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test244"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getRangeZeroBaselinePaint();
    org.jfree.chart.plot.IntervalMarker var31 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var31.setStartValue(0.0d);
    var31.setLabel("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]");
    double var36 = var31.getStartValue();
    org.jfree.chart.util.Layer var37 = null;
    boolean var38 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var31, var37);
    org.jfree.chart.annotations.XYAnnotation var39 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var39, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test245"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    java.lang.Object var13 = var0.clone();
    java.lang.String var14 = var0.getNoDataMessage();
    org.jfree.chart.plot.CategoryMarker var15 = null;
    org.jfree.chart.util.Layer var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(var15, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test246"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    org.jfree.chart.util.RectangleInsets var5 = var3.getLabelInsets();
    double var7 = var5.trimWidth((-1.0d));
    double var9 = var5.trimHeight((-6.0d));
    boolean var10 = var2.equals((java.lang.Object)var5);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    org.jfree.chart.axis.TickUnitSource var13 = null;
    var11.setStandardTickUnits(var13);
    boolean var15 = var11.isNegativeArrowVisible();
    java.awt.Font var16 = var11.getTickLabelFont();
    boolean var17 = var2.equals((java.lang.Object)var11);
    java.lang.String var18 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "CONTRACT"+ "'", var18.equals("CONTRACT"));

  }

  public void test247() {}
//   public void test247() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test247"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     var1.setAutoRangeIncludesZero(false);
//     java.awt.geom.Rectangle2D var5 = null;
//     org.jfree.chart.axis.CategoryAxis var7 = new org.jfree.chart.axis.CategoryAxis("");
//     var7.configure();
//     float var9 = var7.getMaximumCategoryLabelWidthRatio();
//     var7.setCategoryLabelPositionOffset(0);
//     var7.setMaximumCategoryLabelLines(0);
//     java.lang.String var14 = var7.getLabelToolTip();
//     java.awt.Paint var16 = var7.getTickLabelPaint((java.lang.Comparable)100.0d);
//     org.jfree.chart.plot.Plot var17 = var7.getPlot();
//     org.jfree.chart.axis.CategoryAnchor var18 = null;
//     java.awt.geom.Rectangle2D var21 = null;
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
//     var22.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var24 = null;
//     var22.setFixedRangeAxisSpace(var24, false);
//     boolean var27 = var22.isRangeZoomable();
//     var22.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var31 = var22.getDomainAxisEdge(0);
//     double var32 = var7.getCategoryJava2DCoordinate(var18, (-203), 10, var21, var31);
//     double var33 = var1.valueToJava2D(3.0d, var5, var31);
// 
//   }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test248"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.axis.CategoryAxis var20 = new org.jfree.chart.axis.CategoryAxis("");
    var20.configure();
    float var22 = var20.getMaximumCategoryLabelWidthRatio();
    var20.setCategoryMargin(9.223372036854776E18d);
    var20.setLowerMargin((-6.0d));
    int var27 = var15.getDomainAxisIndex(var20);
    org.jfree.chart.annotations.CategoryAnnotation var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test249"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth(0.0d);
    org.jfree.chart.util.UnitType var5 = var2.getUnitType();
    org.jfree.chart.util.RectangleInsets var10 = new org.jfree.chart.util.RectangleInsets(var5, 0.0d, 9.223372036854776E18d, 10.0d, 2.0d);
    double var12 = var10.extendHeight(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 110.0d);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test250"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var18 = var17.getAlpha();
    java.awt.Stroke var19 = var17.getStroke();
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.text.DateFormat var22 = var20.getDateFormatOverride();
    var20.resizeRange((-1.0d), (-1.0d));
    boolean var26 = var17.equals((java.lang.Object)var20);
    org.jfree.chart.util.Layer var27 = null;
    boolean var28 = var7.removeRangeMarker(20, (org.jfree.chart.plot.Marker)var17, var27);
    float var29 = var7.getBackgroundImageAlpha();
    org.jfree.chart.plot.XYPlot var31 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var33 = var32.getRange();
    java.text.DateFormat var34 = var32.getDateFormatOverride();
    var32.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var38 = var32.getLabelFont();
    org.jfree.data.general.Dataset var39 = null;
    org.jfree.data.general.DatasetChangeEvent var40 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var32, var39);
    var31.datasetChanged(var40);
    boolean var42 = var31.isRangeCrosshairLockedOnData();
    org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
    var44.clearRangeAxes();
    org.jfree.chart.plot.CategoryMarker var47 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    var44.addDomainMarker(var47);
    var47.setAlpha(0.0f);
    org.jfree.chart.util.Layer var51 = null;
    boolean var52 = var31.removeDomainMarker(255, (org.jfree.chart.plot.Marker)var47, var51);
    org.jfree.chart.util.Layer var53 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addDomainMarker(100, var47, var53, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test251"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    boolean var9 = var0.isNegativeArrowVisible();
    double var10 = var0.getAutoRangeMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0d);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test252"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.LegendItemCollection var5 = var0.getFixedLegendItems();
    org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    org.jfree.chart.axis.AxisLocation var14 = var7.getDomainAxisLocation((-668));
    var6.setRangeAxisLocation(var14);
    var0.setDomainAxisLocation(var14, false);
    org.jfree.chart.axis.CategoryAnchor var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test253"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var9 = var0.getPlot();
    java.awt.Shape var10 = var0.getDownArrow();
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setRange(0.0d, 100.0d);
    var11.setLowerBound((-6.0d));
    var11.setLabelURL("hi!");
    java.awt.Shape var20 = var11.getRightArrow();
    var0.setLeftArrow(var20);
    var0.setTickMarksVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test254() {}
//   public void test254() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test254"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.axis.AxisLocation var13 = var7.getRangeAxisLocation(2014);
//     org.jfree.chart.util.SortOrder var14 = var7.getRowRenderingOrder();
//     org.jfree.chart.event.ChartChangeEvent var16 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     org.jfree.chart.event.ChartChangeEventType var17 = null;
//     var16.setType(var17);
//     org.jfree.chart.util.ObjectList var19 = new org.jfree.chart.util.ObjectList();
//     org.jfree.chart.event.ChartChangeEvent var21 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     java.lang.String var22 = var21.toString();
//     java.lang.String var23 = var21.toString();
//     int var24 = var19.indexOf((java.lang.Object)var21);
//     org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis("");
//     var26.configure();
//     float var28 = var26.getMaximumCategoryLabelWidthRatio();
//     var26.setTickMarkOutsideLength(100.0f);
//     var26.setUpperMargin(0.0d);
//     float var33 = var26.getMaximumCategoryLabelWidthRatio();
//     org.jfree.chart.JFreeChart var34 = null;
//     org.jfree.chart.event.ChartChangeEvent var35 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var33, var34);
//     org.jfree.chart.event.ChartChangeEventType var36 = var35.getType();
//     var21.setType(var36);
//     var16.setType(var36);
//     boolean var39 = var14.equals((java.lang.Object)var16);
//     var0.setRowRenderingOrder(var14);
//     
//     // Checks the contract:  equals-hashcode on var0 and var7
//     assertTrue("Contract failed: equals-hashcode on var0 and var7", var0.equals(var7) ? var0.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var0
//     assertTrue("Contract failed: equals-hashcode on var7 and var0", var7.equals(var0) ? var7.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test255"); }
// 
// 
//     java.awt.Color var2 = java.awt.Color.getColor("20-December-2014", 255);
//     java.awt.color.ColorSpace var3 = null;
//     java.awt.Color var6 = java.awt.Color.getColor("", 100);
//     int var7 = var6.getRed();
//     int var8 = var6.getAlpha();
//     float[] var12 = new float[] { 100.0f, 100.0f, 0.0f};
//     float[] var13 = var6.getColorComponents(var12);
//     float[] var14 = var2.getColorComponents(var3, var12);
// 
//   }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test256"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var7 = null;
    boolean var8 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var6, var7);
    org.jfree.chart.plot.IntervalMarker var11 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var11.setStartValue(0.0d);
    double var14 = var11.getStartValue();
    java.awt.Paint var15 = var11.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var16 = var11.getGradientPaintTransformer();
    var11.setEndValue(9.223372036854776E18d);
    java.awt.Color var21 = java.awt.Color.getColor("", 100);
    int var22 = var21.getRed();
    int var23 = var21.getAlpha();
    var11.setPaint((java.awt.Paint)var21);
    var6.setPaint((java.awt.Paint)var21);
    java.awt.Color var28 = java.awt.Color.getColor("", 100);
    int var29 = var28.getRed();
    int var30 = var28.getAlpha();
    float[] var34 = new float[] { 100.0f, 100.0f, 0.0f};
    float[] var35 = var28.getColorComponents(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var36 = var21.getRGBComponents(var35);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test257() {}
//   public void test257() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test257"); }
// 
// 
//     org.jfree.chart.util.Size2D var0 = null;
//     org.jfree.chart.plot.IntervalMarker var5 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     org.jfree.chart.util.RectangleAnchor var6 = var5.getLabelAnchor();
//     java.awt.geom.Rectangle2D var7 = org.jfree.chart.util.RectangleAnchor.createRectangle(var0, (-9.223372036854776E18d), 8.0d, var6);
// 
//   }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test258"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setRange(0.0d, 100.0d);
//     var0.setLowerBound((-6.0d));
//     var0.setAutoRangeMinimumSize(9.223372036854776E18d);
//     java.awt.Graphics2D var9 = null;
//     org.jfree.chart.axis.AxisState var10 = null;
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
//     var12.clearRangeAxes();
//     boolean var14 = var12.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var16 = var12.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var17 = var12.getParent();
//     org.jfree.chart.plot.IntervalMarker var20 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var20.setStartValue(0.0d);
//     double var23 = var20.getStartValue();
//     java.awt.Paint var24 = var20.getPaint();
//     var12.setOutlinePaint(var24);
//     boolean var26 = var12.isDomainZoomable();
//     org.jfree.chart.util.RectangleEdge var27 = var12.getRangeAxisEdge();
//     java.util.List var28 = var0.refreshTicks(var9, var10, var11, var27);
// 
//   }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test259"); }


    org.jfree.chart.util.UnitType var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.RectangleInsets var5 = new org.jfree.chart.util.RectangleInsets(var0, 4.0d, 0.0d, 110.0d, 2.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test260"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     boolean var17 = var15.isDomainGridlinesVisible();
//     boolean var18 = var7.equals((java.lang.Object)var15);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var19 = var15.getRenderer();
//     org.jfree.chart.axis.AxisSpace var20 = null;
//     var15.setFixedDomainAxisSpace(var20, false);
//     boolean var23 = var15.isDomainGridlinesVisible();
//     org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var29 = null;
//     org.jfree.chart.util.RectangleEdge var30 = null;
//     double var31 = var26.getCategoryMiddle(0, (-1), var29, var30);
//     org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
//     var32.clearRangeAxes();
//     boolean var34 = var32.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var36 = var32.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var37 = var32.getParent();
//     var26.addChangeListener((org.jfree.chart.event.AxisChangeListener)var32);
//     java.awt.Image var39 = null;
//     var32.setBackgroundImage(var39);
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     var41.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var43 = var41.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var45 = null;
//     var41.setRenderer(255, var45);
//     java.awt.Stroke var47 = var41.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var48 = var41.getDataset();
//     java.awt.Paint var49 = var41.getNoDataMessagePaint();
//     org.jfree.chart.util.Layer var51 = null;
//     java.util.Collection var52 = var41.getDomainMarkers(1, var51);
//     org.jfree.chart.axis.AxisLocation var53 = var41.getRangeAxisLocation();
//     var32.setDomainAxisLocation(var53, true);
//     var15.setDomainAxisLocation(1, var53, true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var15
//     assertTrue("Contract failed: equals-hashcode on var41 and var15", var41.equals(var15) ? var41.hashCode() == var15.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var41 and var15.", var41.equals(var15) == var15.equals(var41));
// 
//   }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test261"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var2 = var1.getAlpha();
    java.awt.Stroke var3 = var1.getStroke();
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.text.DateFormat var6 = var4.getDateFormatOverride();
    var4.resizeRange((-1.0d), (-1.0d));
    boolean var10 = var1.equals((java.lang.Object)var4);
    org.jfree.chart.text.TextAnchor var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setLabelTextAnchor(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test262"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis("");
//     var6.configure();
//     float var8 = var6.getMaximumCategoryLabelWidthRatio();
//     var6.setTickMarkOutsideLength(100.0f);
//     org.jfree.chart.axis.CategoryAxis var13 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var16 = null;
//     org.jfree.chart.util.RectangleEdge var17 = null;
//     double var18 = var13.getCategoryMiddle(0, (-1), var16, var17);
//     var13.configure();
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.text.DateFormat var23 = var21.getDateFormatOverride();
//     var21.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var27 = var21.getStandardTickUnits();
//     var21.setLabelURL("");
//     java.awt.Font var30 = var21.getTickLabelFont();
//     var13.setTickLabelFont((java.lang.Comparable)(byte)100, var30);
//     var6.setTickLabelFont((java.lang.Comparable)2.0d, var30);
//     var6.addCategoryLabelToolTip((java.lang.Comparable)(short)100, "");
//     org.jfree.chart.axis.CategoryAnchor var36 = null;
//     java.awt.geom.Rectangle2D var39 = null;
//     org.jfree.data.xy.XYDataset var40 = null;
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.awt.Paint var43 = var41.getTickLabelPaint();
//     java.awt.Paint var44 = var41.getTickLabelPaint();
//     var41.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var48 = var47.getRange();
//     var47.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var52 = var51.getRange();
//     var47.setRangeWithMargins(var52);
//     org.jfree.chart.renderer.xy.XYItemRenderer var54 = null;
//     org.jfree.chart.plot.XYPlot var55 = new org.jfree.chart.plot.XYPlot(var40, (org.jfree.chart.axis.ValueAxis)var41, (org.jfree.chart.axis.ValueAxis)var47, var54);
//     org.jfree.chart.util.RectangleEdge var57 = var55.getDomainAxisEdge(12);
//     double var58 = var6.getCategoryJava2DCoordinate(var36, 10, (-16777116), var39, var57);
//     double var59 = var0.lengthToJava2D((-6.0d), var4, var57);
// 
//   }

  public void test263() {}
//   public void test263() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test263"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     java.lang.Object var28 = var15.clone();
//     org.jfree.data.xy.XYDataset var29 = null;
//     org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var31 = var30.getRange();
//     java.awt.Paint var32 = var30.getTickLabelPaint();
//     java.awt.Paint var33 = var30.getTickLabelPaint();
//     var30.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     var36.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     var36.setRangeWithMargins(var41);
//     org.jfree.chart.renderer.xy.XYItemRenderer var43 = null;
//     org.jfree.chart.plot.XYPlot var44 = new org.jfree.chart.plot.XYPlot(var29, (org.jfree.chart.axis.ValueAxis)var30, (org.jfree.chart.axis.ValueAxis)var36, var43);
//     org.jfree.chart.renderer.xy.XYItemRenderer var46 = null;
//     var44.setRenderer(0, var46);
//     org.jfree.data.xy.XYDataset var48 = null;
//     var44.setDataset(var48);
//     org.jfree.chart.plot.ValueMarker var51 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var52 = var51.getAlpha();
//     java.awt.Stroke var53 = var51.getStroke();
//     var44.setDomainZeroBaselineStroke(var53);
//     java.awt.Stroke var55 = var44.getDomainZeroBaselineStroke();
//     var15.setRangeZeroBaselineStroke(var55);
//     
//     // Checks the contract:  equals-hashcode on var15 and var44
//     assertTrue("Contract failed: equals-hashcode on var15 and var44", var15.equals(var44) ? var15.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var15
//     assertTrue("Contract failed: equals-hashcode on var44 and var15", var44.equals(var15) ? var44.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var51
//     assertTrue("Contract failed: equals-hashcode on var22 and var51", var22.equals(var51) ? var22.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var22
//     assertTrue("Contract failed: equals-hashcode on var51 and var22", var51.equals(var22) ? var51.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test264"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var0.java2DToValue(100.0d, var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    org.jfree.chart.plot.IntervalMarker var15 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var15.setStartValue(0.0d);
    double var18 = var15.getStartValue();
    java.awt.Paint var19 = var15.getPaint();
    var7.setOutlinePaint(var19);
    var0.setLabelPaint(var19);
    var0.setVerticalTickLabels(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9.223372036854776E18d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test265"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    var15.setRangeCrosshairValue(0.0d, true);
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.plot.PlotRenderingInfo var36 = null;
    var15.drawAnnotations(var34, var35, var36);
    org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var41.setStartValue(0.0d);
    double var44 = var41.getStartValue();
    org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var47 = var46.getAlpha();
    java.awt.Stroke var48 = var46.getStroke();
    var41.setOutlineStroke(var48);
    var41.setStartValue(9.223372036854776E18d);
    org.jfree.chart.util.Layer var52 = null;
    boolean var54 = var15.removeDomainMarker(253, (org.jfree.chart.plot.Marker)var41, var52, true);
    org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var57 = null;
    java.awt.geom.Rectangle2D var58 = null;
    var56.drawBackgroundImage(var57, var58);
    org.jfree.chart.plot.ValueMarker var61 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var62 = var61.getAlpha();
    java.awt.Stroke var63 = var61.getStroke();
    org.jfree.chart.axis.DateAxis var64 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var65 = var64.getRange();
    java.text.DateFormat var66 = var64.getDateFormatOverride();
    var64.resizeRange((-1.0d), (-1.0d));
    boolean var70 = var61.equals((java.lang.Object)var64);
    java.awt.Paint var71 = var61.getPaint();
    var56.setNoDataMessagePaint(var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setQuadrantPaint(2014, var71);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test266"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    boolean var7 = var0.isVisible();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Shape var10 = var8.getLeftArrow();
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    var8.setRangeWithMargins(var16, true, true);
    var0.setRange(var16);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    org.jfree.chart.axis.TickUnitSource var24 = null;
    var22.setStandardTickUnits(var24);
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    java.awt.Paint var28 = var26.getTickLabelPaint();
    var22.setTickLabelPaint(var28);
    var22.resizeRange((-1.0d));
    java.util.Date var32 = var22.getMinimumDate();
    var0.setMaximumDate(var32);
    var0.setTickMarkOutsideLength(0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test267"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var8 = var7.getAlpha();
    java.awt.Stroke var9 = var7.getStroke();
    var2.setOutlineStroke(var9);
    var2.setStartValue(9.223372036854776E18d);
    double var13 = var2.getEndValue();
    java.awt.Stroke var14 = var2.getStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test268"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    java.awt.Paint var6 = var2.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var7 = var2.getGradientPaintTransformer();
    var2.setEndValue(9.223372036854776E18d);
    java.awt.Color var12 = java.awt.Color.getColor("", 100);
    int var13 = var12.getRed();
    int var14 = var12.getAlpha();
    var2.setPaint((java.awt.Paint)var12);
    int var16 = var12.getRGB();
    java.lang.String var17 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "java.awt.Color[r=0,g=0,b=100]"+ "'", var17.equals("java.awt.Color[r=0,g=0,b=100]"));

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test269"); }


    int var3 = java.awt.Color.HSBtoRGB(10.0f, (-1.0f), 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-16777216));

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test270"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    double var19 = var7.getRight();
    double var21 = var7.calculateRightOutset((-1.0d));
    org.jfree.chart.util.UnitType var22 = var7.getUnitType();
    double var24 = var7.calculateBottomOutset((-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 3.0d);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test271"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var7 = var0.getAxisOffset();
    double var8 = var7.getRight();
    java.awt.geom.Rectangle2D var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var10 = var7.createInsetRectangle(var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4.0d);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test272"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Color var1 = java.awt.Color.decode("DatasetRenderingOrder.REVERSE");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test273"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth(0.0d);
    org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var7 = var6.getAlpha();
    java.awt.Stroke var8 = var6.getStroke();
    float var9 = var6.getAlpha();
    boolean var10 = var2.equals((java.lang.Object)var6);
    double var12 = var2.calculateLeftInset(9.223372036854776E18d);
    double var14 = var2.trimWidth(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 4.0d);

  }

  public void test274() {}
//   public void test274() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test274"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var3 = var2.getRange();
//     java.awt.Shape var4 = var2.getLeftArrow();
//     var2.setLabelAngle(0.0d);
//     var2.setNegativeArrowVisible(false);
//     java.lang.String var9 = var2.getLabelURL();
//     int var10 = var0.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var2);
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     var11.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var13 = null;
//     var11.setFixedRangeAxisSpace(var13, false);
//     boolean var16 = var11.isRangeZoomable();
//     var11.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var20 = var11.getDomainAxisEdge(0);
//     org.jfree.chart.axis.AxisLocation var21 = var11.getDomainAxisLocation();
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
//     var22.clearRangeAxes();
//     boolean var24 = var22.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var26 = var22.getRangeAxis((-16646144));
//     org.jfree.chart.axis.AxisLocation var28 = var22.getRangeAxisLocation(2014);
//     org.jfree.chart.util.SortOrder var29 = var22.getRowRenderingOrder();
//     org.jfree.chart.event.ChartChangeEvent var31 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     org.jfree.chart.event.ChartChangeEventType var32 = null;
//     var31.setType(var32);
//     org.jfree.chart.util.ObjectList var34 = new org.jfree.chart.util.ObjectList();
//     org.jfree.chart.event.ChartChangeEvent var36 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     java.lang.String var37 = var36.toString();
//     java.lang.String var38 = var36.toString();
//     int var39 = var34.indexOf((java.lang.Object)var36);
//     org.jfree.chart.axis.CategoryAxis var41 = new org.jfree.chart.axis.CategoryAxis("");
//     var41.configure();
//     float var43 = var41.getMaximumCategoryLabelWidthRatio();
//     var41.setTickMarkOutsideLength(100.0f);
//     var41.setUpperMargin(0.0d);
//     float var48 = var41.getMaximumCategoryLabelWidthRatio();
//     org.jfree.chart.JFreeChart var49 = null;
//     org.jfree.chart.event.ChartChangeEvent var50 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var48, var49);
//     org.jfree.chart.event.ChartChangeEventType var51 = var50.getType();
//     var36.setType(var51);
//     var31.setType(var51);
//     boolean var54 = var29.equals((java.lang.Object)var31);
//     var11.setRowRenderingOrder(var29);
//     var0.setRowRenderingOrder(var29);
//     
//     // Checks the contract:  equals-hashcode on var0 and var22
//     assertTrue("Contract failed: equals-hashcode on var0 and var22", var0.equals(var22) ? var0.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var0
//     assertTrue("Contract failed: equals-hashcode on var22 and var0", var22.equals(var0) ? var22.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test275"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    java.awt.Shape var3 = var0.getUpArrow();
    var0.configure();
    java.lang.String var5 = var0.getLabel();
    boolean var6 = var0.isNegativeArrowVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test276() {}
//   public void test276() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test276"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setRange(0.0d, 100.0d);
//     var0.setLowerBound((-6.0d));
//     var0.setLabelURL("hi!");
//     org.jfree.chart.plot.Plot var9 = var0.getPlot();
//     java.awt.Shape var10 = var0.getDownArrow();
//     java.awt.Graphics2D var11 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     java.awt.geom.Rectangle2D var14 = null;
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var17 = null;
//     var15.setFixedRangeAxisSpace(var17, false);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     var20.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var27 = var20.getAxisOffset();
//     var15.setInsets(var27);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var29 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var30 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var29};
//     var15.setRenderers(var30);
//     org.jfree.chart.util.RectangleEdge var32 = var15.getRangeAxisEdge();
//     org.jfree.chart.plot.PlotRenderingInfo var33 = null;
//     org.jfree.chart.axis.AxisState var34 = var0.draw(var11, (-10.0d), var13, var14, var32, var33);
// 
//   }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test277"); }


    org.jfree.chart.util.ObjectList var0 = new org.jfree.chart.util.ObjectList();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    var1.setRange(0.0d, 100.0d);
    boolean var6 = var1.isInverted();
    org.jfree.chart.axis.Timeline var7 = var1.getTimeline();
    boolean var8 = var1.isVisible();
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    java.awt.Shape var11 = var9.getLeftArrow();
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var12.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    var12.setRangeWithMargins(var17);
    var9.setRangeWithMargins(var17, true, true);
    var1.setRange(var17);
    boolean var23 = var0.equals((java.lang.Object)var17);
    org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var25 = var24.getRange();
    java.text.DateFormat var26 = var24.getDateFormatOverride();
    var24.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var30 = var24.getStandardTickUnits();
    var24.setLabelURL("");
    boolean var33 = var24.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    var34.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    var34.setRangeWithMargins(var39);
    var24.setRange(var39);
    boolean var42 = var24.isPositiveArrowVisible();
    java.awt.Stroke var43 = var24.getAxisLineStroke();
    int var44 = var0.indexOf((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));

  }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test278"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     java.awt.Graphics2D var28 = null;
//     java.awt.geom.Rectangle2D var29 = null;
//     java.util.List var30 = null;
//     var15.drawDomainTickBands(var28, var29, var30);
//     org.jfree.chart.plot.IntervalMarker var35 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var35.setStartValue(0.0d);
//     double var38 = var35.getStartValue();
//     java.awt.Paint var39 = var35.getPaint();
//     org.jfree.chart.util.Layer var40 = null;
//     boolean var41 = var15.removeRangeMarker(10, (org.jfree.chart.plot.Marker)var35, var40);
//     org.jfree.chart.plot.IntervalMarker var45 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var45.setStartValue(0.0d);
//     double var48 = var45.getStartValue();
//     org.jfree.chart.plot.ValueMarker var50 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var51 = var50.getAlpha();
//     java.awt.Stroke var52 = var50.getStroke();
//     var45.setOutlineStroke(var52);
//     var45.setStartValue(9.223372036854776E18d);
//     double var56 = var45.getEndValue();
//     org.jfree.chart.util.Layer var57 = null;
//     boolean var59 = var15.removeDomainMarker((-668), (org.jfree.chart.plot.Marker)var45, var57, true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var50
//     assertTrue("Contract failed: equals-hashcode on var22 and var50", var22.equals(var50) ? var22.hashCode() == var50.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var50 and var22
//     assertTrue("Contract failed: equals-hashcode on var50 and var22", var50.equals(var22) ? var50.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test279() {}
//   public void test279() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test279"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.util.Layer var21 = null;
//     java.util.Collection var22 = var15.getRangeMarkers(var21);
//     var15.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.Layer var26 = null;
//     java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
//     java.awt.Graphics2D var28 = null;
//     java.awt.geom.Rectangle2D var29 = null;
//     org.jfree.data.xy.XYDataset var30 = null;
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     java.awt.Paint var33 = var31.getTickLabelPaint();
//     java.awt.Paint var34 = var31.getTickLabelPaint();
//     var31.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var38 = var37.getRange();
//     var37.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     var37.setRangeWithMargins(var42);
//     org.jfree.chart.renderer.xy.XYItemRenderer var44 = null;
//     org.jfree.chart.plot.XYPlot var45 = new org.jfree.chart.plot.XYPlot(var30, (org.jfree.chart.axis.ValueAxis)var31, (org.jfree.chart.axis.ValueAxis)var37, var44);
//     org.jfree.chart.renderer.xy.XYItemRenderer var47 = null;
//     var45.setRenderer(0, var47);
//     org.jfree.data.xy.XYDataset var49 = null;
//     var45.setDataset(var49);
//     org.jfree.chart.plot.ValueMarker var52 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var53 = var52.getAlpha();
//     java.awt.Stroke var54 = var52.getStroke();
//     var45.setDomainZeroBaselineStroke(var54);
//     org.jfree.chart.axis.ValueAxis var57 = var45.getRangeAxisForDataset(0);
//     org.jfree.chart.util.Layer var58 = null;
//     java.util.Collection var59 = var45.getDomainMarkers(var58);
//     org.jfree.chart.plot.PlotRenderingInfo var62 = null;
//     java.awt.geom.Rectangle2D var63 = null;
//     org.jfree.chart.util.RectangleAnchor var64 = null;
//     java.awt.geom.Point2D var65 = org.jfree.chart.util.RectangleAnchor.coordinates(var63, var64);
//     var45.zoomDomainAxes((-12.0d), 0.05d, var62, var65);
//     org.jfree.chart.plot.PlotState var67 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var68 = null;
//     var15.draw(var28, var29, var65, var67, var68);
// 
//   }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test280"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var11 = null;
//     java.awt.Rectangle var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     java.awt.geom.AffineTransform var14 = null;
//     java.awt.RenderingHints var15 = null;
//     java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     org.jfree.chart.axis.TickUnitSource var20 = null;
//     var18.setStandardTickUnits(var20);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     var18.setTickLabelPaint(var24);
//     org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var28 = var27.getAlpha();
//     java.awt.Stroke var29 = var27.getStroke();
//     org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
//     java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var35 = null;
//     java.awt.Rectangle var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     java.awt.geom.AffineTransform var38 = null;
//     java.awt.RenderingHints var39 = null;
//     java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.awt.Paint var43 = var41.getTickLabelPaint();
//     double var44 = var41.getLowerMargin();
//     java.awt.Shape var45 = var41.getLeftArrow();
//     java.awt.Stroke var46 = var41.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
//     boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
//     org.jfree.chart.plot.Marker var50 = null;
//     boolean var51 = var0.removeDomainMarker(var50);
//     org.jfree.chart.axis.AxisLocation var52 = var0.getDomainAxisLocation();
//     int var53 = var0.getDomainAxisCount();
//     org.jfree.chart.plot.CategoryPlot var54 = new org.jfree.chart.plot.CategoryPlot();
//     var54.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var56 = var54.getFixedLegendItems();
//     var54.setRangeGridlinesVisible(false);
//     org.jfree.chart.LegendItemCollection var59 = var54.getFixedLegendItems();
//     org.jfree.chart.plot.CategoryPlot var60 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var61 = new org.jfree.chart.plot.CategoryPlot();
//     var61.clearRangeAxes();
//     boolean var63 = var61.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var65 = var61.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var66 = var61.getParent();
//     org.jfree.chart.axis.AxisLocation var68 = var61.getDomainAxisLocation((-668));
//     var60.setRangeAxisLocation(var68);
//     var54.setDomainAxisLocation(var68, false);
//     var0.setRangeAxisLocation(var68);
//     
//     // Checks the contract:  equals-hashcode on var0 and var60
//     assertTrue("Contract failed: equals-hashcode on var0 and var60", var0.equals(var60) ? var0.hashCode() == var60.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var60 and var0
//     assertTrue("Contract failed: equals-hashcode on var60 and var0", var60.equals(var0) ? var60.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test281"); }


    org.jfree.chart.plot.XYPlot var1 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var3 = var2.getRange();
    java.text.DateFormat var4 = var2.getDateFormatOverride();
    var2.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var8 = var2.getLabelFont();
    org.jfree.data.general.Dataset var9 = null;
    org.jfree.data.general.DatasetChangeEvent var10 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var2, var9);
    var1.datasetChanged(var10);
    boolean var12 = var1.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    org.jfree.chart.axis.TickUnitSource var16 = null;
    var14.setStandardTickUnits(var16);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    java.awt.Paint var20 = var18.getTickLabelPaint();
    var14.setTickLabelPaint(var20);
    org.jfree.chart.plot.ValueMarker var23 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var24 = var23.getAlpha();
    java.awt.Stroke var25 = var23.getStroke();
    org.jfree.chart.plot.CategoryMarker var26 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var20, var25);
    var1.setDomainTickBandPaint(var20);
    java.awt.Paint var28 = var1.getRangeZeroBaselinePaint();
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    java.text.DateFormat var31 = var29.getDateFormatOverride();
    var29.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var35 = var29.getStandardTickUnits();
    var29.setLabelURL("");
    boolean var38 = var29.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    var39.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var44 = var43.getRange();
    var39.setRangeWithMargins(var44);
    var29.setRange(var44);
    boolean var47 = var29.isPositiveArrowVisible();
    java.awt.Stroke var48 = var29.getAxisLineStroke();
    java.awt.Paint var49 = null;
    org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot();
    var50.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var52 = var50.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var54 = null;
    var50.setRenderer(255, var54);
    java.awt.Stroke var56 = var50.getOutlineStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.ValueMarker var58 = new org.jfree.chart.plot.ValueMarker(106.0d, var28, var48, var49, var56, 2.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test282"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
    var15.setDomainCrosshairValue((-1.0d), true);
    org.jfree.chart.axis.ValueAxis var31 = var15.getDomainAxis();
    org.jfree.chart.annotations.XYAnnotation var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var34 = var15.removeAnnotation(var32, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test283() {}
//   public void test283() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test283"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var32 = var31.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var33 = null;
//     var31.notifyListeners(var33);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     double var44 = var42.trimWidth((-1.0d));
//     double var46 = var42.trimHeight((-6.0d));
//     boolean var47 = var39.equals((java.lang.Object)var42);
//     var35.setInsets(var42, true);
//     java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
//     var31.setOutlineStroke(var50);
//     var15.setRangeGridlineStroke(var50);
//     org.jfree.chart.util.RectangleEdge var53 = var15.getRangeAxisEdge();
//     org.jfree.chart.axis.AxisLocation var55 = var15.getDomainAxisLocation(0);
//     org.jfree.chart.util.Layer var57 = null;
//     java.util.Collection var58 = var15.getRangeMarkers((-16777116), var57);
//     org.jfree.chart.plot.CategoryPlot var59 = new org.jfree.chart.plot.CategoryPlot();
//     var59.clearRangeAxes();
//     boolean var61 = var59.isDomainGridlinesVisible();
//     org.jfree.chart.event.PlotChangeEvent var62 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var59);
//     var15.notifyListeners(var62);
//     
//     // Checks the contract:  equals-hashcode on var20 and var59
//     assertTrue("Contract failed: equals-hashcode on var20 and var59", var20.equals(var59) ? var20.hashCode() == var59.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var20
//     assertTrue("Contract failed: equals-hashcode on var59 and var20", var59.equals(var20) ? var59.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test284"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Date var11 = var0.getStart();
//     int var12 = var0.getYear();
//     java.util.Calendar var13 = null;
//     var0.peg(var13);
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test285"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Paint var12 = var0.getQuadrantPaint((-16646144));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test286"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    org.jfree.chart.util.UnitType var10 = var2.getUnitType();
    org.jfree.chart.util.RectangleInsets var15 = new org.jfree.chart.util.RectangleInsets(var10, 1.0d, 2.0d, 8.0d, 9.223372036854776E18d);
    org.jfree.chart.plot.IntervalMarker var18 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var21 = var19.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var23 = null;
    var19.setRenderer(255, var23);
    var19.clearRangeMarkers();
    var18.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var19);
    boolean var27 = var10.equals((java.lang.Object)var19);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var29 = var28.getRenderer();
    org.jfree.chart.event.PlotChangeListener var30 = null;
    var28.addChangeListener(var30);
    org.jfree.chart.renderer.category.CategoryItemRenderer var32 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var33 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var32};
    var28.setRenderers(var33);
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
    var35.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var38 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var39 = var38.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
    double var44 = var42.trimWidth((-1.0d));
    double var46 = var42.trimHeight((-6.0d));
    boolean var47 = var39.equals((java.lang.Object)var42);
    var35.setInsets(var42, true);
    java.awt.Stroke var50 = var35.getRangeCrosshairStroke();
    org.jfree.chart.renderer.category.CategoryItemRenderer var51 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var52 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var51};
    var35.setRenderers(var52);
    var28.setRenderers(var52);
    org.jfree.chart.axis.CategoryAxis var56 = new org.jfree.chart.axis.CategoryAxis("");
    var56.configure();
    float var58 = var56.getMaximumCategoryLabelWidthRatio();
    var56.setCategoryLabelPositionOffset(0);
    var56.setCategoryMargin(1.0d);
    java.util.List var63 = var28.getCategoriesForAxis(var56);
    boolean var64 = var10.equals((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test287"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    var0.setTickMarkInsideLength(10.0f);
    boolean var7 = var0.isNegativeArrowVisible();
    var0.setLabelAngle((-6.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAutoRangeMinimumSize(0.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test288"); }


    java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var6 = null;
    java.awt.Rectangle var7 = null;
    java.awt.geom.Rectangle2D var8 = null;
    java.awt.geom.AffineTransform var9 = null;
    java.awt.RenderingHints var10 = null;
    java.awt.PaintContext var11 = var5.createContext(var6, var7, var8, var9, var10);
    int var12 = var5.getTransparency();
    org.jfree.data.xy.XYDataset var13 = null;
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    java.awt.Paint var16 = var14.getTickLabelPaint();
    java.awt.Paint var17 = var14.getTickLabelPaint();
    var14.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    var20.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var25 = var24.getRange();
    var20.setRangeWithMargins(var25);
    org.jfree.chart.renderer.xy.XYItemRenderer var27 = null;
    org.jfree.chart.plot.XYPlot var28 = new org.jfree.chart.plot.XYPlot(var13, (org.jfree.chart.axis.ValueAxis)var14, (org.jfree.chart.axis.ValueAxis)var20, var27);
    org.jfree.chart.util.RectangleInsets var29 = var28.getAxisOffset();
    org.jfree.chart.plot.DefaultDrawingSupplier var30 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Stroke var31 = var30.getNextOutlineStroke();
    var28.setRangeZeroBaselineStroke(var31);
    java.awt.Color var37 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var38 = null;
    java.awt.Rectangle var39 = null;
    java.awt.geom.Rectangle2D var40 = null;
    java.awt.geom.AffineTransform var41 = null;
    java.awt.RenderingHints var42 = null;
    java.awt.PaintContext var43 = var37.createContext(var38, var39, var40, var41, var42);
    org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var46 = var45.getRange();
    org.jfree.chart.axis.TickUnitSource var47 = null;
    var45.setStandardTickUnits(var47);
    org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var50 = var49.getRange();
    java.awt.Paint var51 = var49.getTickLabelPaint();
    var45.setTickLabelPaint(var51);
    org.jfree.chart.plot.ValueMarker var54 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var55 = var54.getAlpha();
    java.awt.Stroke var56 = var54.getStroke();
    org.jfree.chart.plot.CategoryMarker var57 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var51, var56);
    java.awt.Color var61 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var62 = null;
    java.awt.Rectangle var63 = null;
    java.awt.geom.Rectangle2D var64 = null;
    java.awt.geom.AffineTransform var65 = null;
    java.awt.RenderingHints var66 = null;
    java.awt.PaintContext var67 = var61.createContext(var62, var63, var64, var65, var66);
    org.jfree.chart.axis.DateAxis var68 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var69 = var68.getRange();
    java.awt.Paint var70 = var68.getTickLabelPaint();
    double var71 = var68.getLowerMargin();
    java.awt.Shape var72 = var68.getLeftArrow();
    java.awt.Stroke var73 = var68.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var75 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var37, var56, (java.awt.Paint)var61, var73, 0.8f);
    java.awt.Stroke var76 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.IntervalMarker var78 = new org.jfree.chart.plot.IntervalMarker(8.0d, 0.0d, (java.awt.Paint)var5, var31, (java.awt.Paint)var61, var76, 10.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test289"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.event.PlotChangeEvent var49 = null;
    var0.notifyListeners(var49);
    org.jfree.chart.axis.CategoryAnchor var51 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test290"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var7 = null;
//     boolean var8 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var6, var7);
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     var9.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var11 = var9.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var13 = null;
//     var9.setRenderer(255, var13);
//     java.awt.Color var19 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var20 = null;
//     java.awt.Rectangle var21 = null;
//     java.awt.geom.Rectangle2D var22 = null;
//     java.awt.geom.AffineTransform var23 = null;
//     java.awt.RenderingHints var24 = null;
//     java.awt.PaintContext var25 = var19.createContext(var20, var21, var22, var23, var24);
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var28 = var27.getRange();
//     org.jfree.chart.axis.TickUnitSource var29 = null;
//     var27.setStandardTickUnits(var29);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     java.awt.Paint var33 = var31.getTickLabelPaint();
//     var27.setTickLabelPaint(var33);
//     org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var37 = var36.getAlpha();
//     java.awt.Stroke var38 = var36.getStroke();
//     org.jfree.chart.plot.CategoryMarker var39 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var33, var38);
//     java.awt.Color var43 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var44 = null;
//     java.awt.Rectangle var45 = null;
//     java.awt.geom.Rectangle2D var46 = null;
//     java.awt.geom.AffineTransform var47 = null;
//     java.awt.RenderingHints var48 = null;
//     java.awt.PaintContext var49 = var43.createContext(var44, var45, var46, var47, var48);
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     java.awt.Paint var52 = var50.getTickLabelPaint();
//     double var53 = var50.getLowerMargin();
//     java.awt.Shape var54 = var50.getLeftArrow();
//     java.awt.Stroke var55 = var50.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var57 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var19, var38, (java.awt.Paint)var43, var55, 0.8f);
//     boolean var58 = var9.removeRangeMarker((org.jfree.chart.plot.Marker)var57);
//     org.jfree.chart.plot.Marker var59 = null;
//     boolean var60 = var9.removeDomainMarker(var59);
//     org.jfree.chart.axis.AxisLocation var61 = var9.getDomainAxisLocation();
//     var0.setDomainAxisLocation(var61);
//     
//     // Checks the contract:  equals-hashcode on var0 and var9
//     assertTrue("Contract failed: equals-hashcode on var0 and var9", var0.equals(var9) ? var0.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var9 and var0
//     assertTrue("Contract failed: equals-hashcode on var9 and var0", var9.equals(var0) ? var9.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test291() {}
//   public void test291() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test291"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
//     var15.setBackgroundImageAlpha(0.0f);
//     java.util.List var31 = var15.getAnnotations();
//     org.jfree.chart.axis.AxisSpace var32 = null;
//     var15.setFixedDomainAxisSpace(var32, false);
//     org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var37 = var36.getAlpha();
//     java.awt.Stroke var38 = var36.getStroke();
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     java.text.DateFormat var41 = var39.getDateFormatOverride();
//     var39.resizeRange((-1.0d), (-1.0d));
//     boolean var45 = var36.equals((java.lang.Object)var39);
//     org.jfree.chart.util.RectangleInsets var46 = var36.getLabelOffset();
//     java.awt.Paint var47 = var36.getOutlinePaint();
//     java.awt.Paint var48 = var36.getPaint();
//     var15.setDomainZeroBaselinePaint(var48);
//     org.jfree.chart.plot.SeriesRenderingOrder var50 = var15.getSeriesRenderingOrder();
//     org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
//     var51.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var53 = var51.getFixedLegendItems();
//     var51.setRangeGridlinesVisible(false);
//     org.jfree.chart.LegendItemCollection var56 = var51.getFixedLegendItems();
//     org.jfree.chart.plot.CategoryPlot var57 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
//     var58.clearRangeAxes();
//     boolean var60 = var58.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var62 = var58.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var63 = var58.getParent();
//     org.jfree.chart.axis.AxisLocation var65 = var58.getDomainAxisLocation((-668));
//     var57.setRangeAxisLocation(var65);
//     var51.setDomainAxisLocation(var65, false);
//     var15.setDomainAxisLocation(var65);
//     
//     // Checks the contract:  equals-hashcode on var20 and var58
//     assertTrue("Contract failed: equals-hashcode on var20 and var58", var20.equals(var58) ? var20.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var20
//     assertTrue("Contract failed: equals-hashcode on var58 and var20", var58.equals(var20) ? var58.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test292"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    java.awt.Graphics2D var16 = null;
    java.awt.geom.Rectangle2D var17 = null;
    java.util.List var18 = null;
    var15.drawRangeTickBands(var16, var17, var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.ValueAxis var21 = var15.getDomainAxisForDataset(2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test293"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setLabelURL("hi!");
    java.awt.Shape var9 = var0.getRightArrow();
    org.jfree.data.general.Dataset var10 = null;
    org.jfree.data.general.DatasetChangeEvent var11 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var0, var10);
    org.jfree.data.general.Dataset var12 = var11.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test294() {}
//   public void test294() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test294"); }
// 
// 
//     org.jfree.data.xy.XYDataset var1 = null;
//     org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var3 = var2.getRange();
//     java.awt.Paint var4 = var2.getTickLabelPaint();
//     java.awt.Paint var5 = var2.getTickLabelPaint();
//     var2.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     var8.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var13 = var12.getRange();
//     var8.setRangeWithMargins(var13);
//     org.jfree.chart.renderer.xy.XYItemRenderer var15 = null;
//     org.jfree.chart.plot.XYPlot var16 = new org.jfree.chart.plot.XYPlot(var1, (org.jfree.chart.axis.ValueAxis)var2, (org.jfree.chart.axis.ValueAxis)var8, var15);
//     int var17 = var16.getDomainAxisCount();
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     var19.clearRangeAxes();
//     boolean var21 = var19.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var25 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var26 = null;
//     boolean var27 = var19.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var25, var26);
//     org.jfree.chart.plot.IntervalMarker var30 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var30.setStartValue(0.0d);
//     double var33 = var30.getStartValue();
//     java.awt.Paint var34 = var30.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var35 = var30.getGradientPaintTransformer();
//     var30.setEndValue(9.223372036854776E18d);
//     java.awt.Color var40 = java.awt.Color.getColor("", 100);
//     int var41 = var40.getRed();
//     int var42 = var40.getAlpha();
//     var30.setPaint((java.awt.Paint)var40);
//     var25.setPaint((java.awt.Paint)var40);
//     java.awt.Color var45 = java.awt.Color.getColor("XY Plot", var40);
//     var16.setDomainCrosshairPaint((java.awt.Paint)var45);
//     org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var49 = var48.getLabelOffsetType();
//     java.awt.Font var50 = var48.getLabelFont();
//     boolean var51 = var45.equals((java.lang.Object)var48);
//     java.awt.Color var52 = java.awt.Color.getColor("UnitType.ABSOLUTE", var45);
//     java.awt.color.ColorSpace var53 = null;
//     float[] var60 = new float[] { 100.0f, 1.0f, (-1.0f)};
//     float[] var61 = java.awt.Color.RGBtoHSB((-1), 100, 100, var60);
//     float[] var62 = var52.getComponents(var53, var60);
// 
//   }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test295"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    var0.setAnchorValue(2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test296"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    boolean var31 = var15.isDomainGridlinesVisible();
    org.jfree.chart.plot.CategoryMarker var33 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    java.awt.Paint var34 = var33.getLabelPaint();
    org.jfree.chart.util.Layer var35 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((org.jfree.chart.plot.Marker)var33, var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test297"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     java.awt.Graphics2D var28 = null;
//     java.awt.geom.Rectangle2D var29 = null;
//     java.util.List var30 = null;
//     var15.drawDomainTickBands(var28, var29, var30);
//     org.jfree.data.xy.XYDataset var32 = null;
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     java.awt.Paint var35 = var33.getTickLabelPaint();
//     java.awt.Paint var36 = var33.getTickLabelPaint();
//     var33.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     var39.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var39.setRangeWithMargins(var44);
//     org.jfree.chart.renderer.xy.XYItemRenderer var46 = null;
//     org.jfree.chart.plot.XYPlot var47 = new org.jfree.chart.plot.XYPlot(var32, (org.jfree.chart.axis.ValueAxis)var33, (org.jfree.chart.axis.ValueAxis)var39, var46);
//     org.jfree.chart.util.RectangleEdge var49 = var47.getDomainAxisEdge(12);
//     var47.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var52 = new org.jfree.chart.plot.CategoryPlot();
//     var52.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var54 = var52.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var56 = null;
//     var52.setRenderer(255, var56);
//     java.awt.Stroke var58 = var52.getOutlineStroke();
//     var47.setRangeZeroBaselineStroke(var58);
//     org.jfree.chart.axis.ValueAxis var60 = null;
//     int var61 = var47.getRangeAxisIndex(var60);
//     org.jfree.chart.plot.ValueMarker var63 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var64 = var63.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var65 = null;
//     var63.notifyListeners(var65);
//     org.jfree.chart.plot.CategoryPlot var67 = new org.jfree.chart.plot.CategoryPlot();
//     var67.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var70 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var71 = var70.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var72 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var73 = var72.getRange();
//     org.jfree.chart.util.RectangleInsets var74 = var72.getLabelInsets();
//     double var76 = var74.trimWidth((-1.0d));
//     double var78 = var74.trimHeight((-6.0d));
//     boolean var79 = var71.equals((java.lang.Object)var74);
//     var67.setInsets(var74, true);
//     java.awt.Stroke var82 = var67.getRangeCrosshairStroke();
//     var63.setOutlineStroke(var82);
//     var47.setRangeGridlineStroke(var82);
//     var15.setDomainZeroBaselineStroke(var82);
//     
//     // Checks the contract:  equals-hashcode on var22 and var70
//     assertTrue("Contract failed: equals-hashcode on var22 and var70", var22.equals(var70) ? var22.hashCode() == var70.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var70 and var22
//     assertTrue("Contract failed: equals-hashcode on var70 and var22", var70.equals(var22) ? var70.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test298"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.data.xy.XYDataset var30 = null;
//     int var31 = var15.indexOf(var30);
//     org.jfree.data.xy.XYDataset var32 = null;
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     java.awt.Paint var35 = var33.getTickLabelPaint();
//     java.awt.Paint var36 = var33.getTickLabelPaint();
//     var33.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     var39.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var39.setRangeWithMargins(var44);
//     org.jfree.chart.renderer.xy.XYItemRenderer var46 = null;
//     org.jfree.chart.plot.XYPlot var47 = new org.jfree.chart.plot.XYPlot(var32, (org.jfree.chart.axis.ValueAxis)var33, (org.jfree.chart.axis.ValueAxis)var39, var46);
//     org.jfree.chart.renderer.xy.XYItemRenderer var49 = null;
//     var47.setRenderer(0, var49);
//     org.jfree.data.xy.XYDataset var51 = null;
//     var47.setDataset(var51);
//     org.jfree.chart.plot.ValueMarker var54 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var55 = var54.getAlpha();
//     java.awt.Stroke var56 = var54.getStroke();
//     var47.setDomainZeroBaselineStroke(var56);
//     org.jfree.chart.renderer.xy.XYItemRenderer var58 = null;
//     int var59 = var47.getIndexOf(var58);
//     org.jfree.chart.renderer.xy.XYItemRenderer var61 = null;
//     var47.setRenderer(255, var61);
//     var15.setParent((org.jfree.chart.plot.Plot)var47);
//     
//     // Checks the contract:  equals-hashcode on var15 and var47
//     assertTrue("Contract failed: equals-hashcode on var15 and var47", var15.equals(var47) ? var15.hashCode() == var47.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var15
//     assertTrue("Contract failed: equals-hashcode on var47 and var15", var47.equals(var15) ? var47.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test299"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    java.awt.Stroke var26 = var15.getDomainZeroBaselineStroke();
    org.jfree.chart.LegendItemCollection var27 = var15.getLegendItems();
    var15.clearRangeMarkers(12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Paint var31 = var15.getQuadrantPaint(20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test300"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var22 = null;
    java.awt.Rectangle var23 = null;
    java.awt.geom.Rectangle2D var24 = null;
    java.awt.geom.AffineTransform var25 = null;
    java.awt.RenderingHints var26 = null;
    java.awt.PaintContext var27 = var21.createContext(var22, var23, var24, var25, var26);
    var16.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var21);
    var16.setTickMarkInsideLength(2.0f);
    var16.clearCategoryLabelToolTips();
    java.awt.geom.Rectangle2D var34 = null;
    org.jfree.chart.util.RectangleEdge var35 = null;
    double var36 = var16.getCategoryEnd((-1), (-668), var34, var35);
    var7.setDomainAxis(var16);
    org.jfree.chart.annotations.CategoryAnnotation var38 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addAnnotation(var38, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.0d);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test301"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    java.lang.Object var13 = var0.clone();
    org.jfree.chart.renderer.category.CategoryItemRenderer var14 = null;
    var0.setRenderer(var14);
    org.jfree.chart.annotations.CategoryAnnotation var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test302"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var11 = null;
    java.awt.Rectangle var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    java.awt.geom.AffineTransform var14 = null;
    java.awt.RenderingHints var15 = null;
    java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    org.jfree.chart.axis.TickUnitSource var20 = null;
    var18.setStandardTickUnits(var20);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.awt.Paint var24 = var22.getTickLabelPaint();
    var18.setTickLabelPaint(var24);
    org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var28 = var27.getAlpha();
    java.awt.Stroke var29 = var27.getStroke();
    org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
    java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var35 = null;
    java.awt.Rectangle var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    java.awt.geom.AffineTransform var38 = null;
    java.awt.RenderingHints var39 = null;
    java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
    org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var42 = var41.getRange();
    java.awt.Paint var43 = var41.getTickLabelPaint();
    double var44 = var41.getLowerMargin();
    java.awt.Shape var45 = var41.getLeftArrow();
    java.awt.Stroke var46 = var41.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
    boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
    org.jfree.chart.axis.CategoryAnchor var50 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test303"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.ValueMarker var32 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    org.jfree.chart.util.Layer var33 = null;
    boolean var34 = var15.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var32, var33);
    org.jfree.chart.plot.Marker var36 = null;
    org.jfree.chart.util.Layer var37 = null;
    boolean var38 = var15.removeDomainMarker(1, var36, var37);
    org.jfree.chart.axis.AxisLocation var39 = var15.getDomainAxisLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test304"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var5 = var0.getParent();
    org.jfree.chart.axis.AxisSpace var6 = null;
    var0.setFixedDomainAxisSpace(var6);
    org.jfree.chart.axis.CategoryAnchor var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test305"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    var15.setRangeCrosshairValue(0.0d, true);
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.plot.PlotRenderingInfo var36 = null;
    var15.drawAnnotations(var34, var35, var36);
    org.jfree.chart.plot.IntervalMarker var41 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var41.setStartValue(0.0d);
    double var44 = var41.getStartValue();
    org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var47 = var46.getAlpha();
    java.awt.Stroke var48 = var46.getStroke();
    var41.setOutlineStroke(var48);
    var41.setStartValue(9.223372036854776E18d);
    org.jfree.chart.util.Layer var52 = null;
    boolean var54 = var15.removeDomainMarker(253, (org.jfree.chart.plot.Marker)var41, var52, true);
    org.jfree.chart.event.RendererChangeEvent var55 = null;
    var15.rendererChanged(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test306"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(0.0d);

  }

  public void test307() {}
//   public void test307() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test307"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
//     org.jfree.chart.plot.ValueMarker var33 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var34 = var33.getLabelOffsetType();
//     java.awt.Font var35 = var33.getLabelFont();
//     org.jfree.chart.util.Layer var36 = null;
//     boolean var37 = var15.removeDomainMarker(20, (org.jfree.chart.plot.Marker)var33, var36);
//     java.awt.Graphics2D var38 = null;
//     java.awt.geom.Rectangle2D var39 = null;
//     org.jfree.data.xy.XYDataset var40 = null;
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.awt.Paint var43 = var41.getTickLabelPaint();
//     java.awt.Paint var44 = var41.getTickLabelPaint();
//     var41.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var48 = var47.getRange();
//     var47.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var52 = var51.getRange();
//     var47.setRangeWithMargins(var52);
//     org.jfree.chart.renderer.xy.XYItemRenderer var54 = null;
//     org.jfree.chart.plot.XYPlot var55 = new org.jfree.chart.plot.XYPlot(var40, (org.jfree.chart.axis.ValueAxis)var41, (org.jfree.chart.axis.ValueAxis)var47, var54);
//     int var56 = var55.getDomainAxisCount();
//     org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
//     var58.clearRangeAxes();
//     boolean var60 = var58.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var64 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var65 = null;
//     boolean var66 = var58.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var64, var65);
//     org.jfree.chart.plot.IntervalMarker var69 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var69.setStartValue(0.0d);
//     double var72 = var69.getStartValue();
//     java.awt.Paint var73 = var69.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var74 = var69.getGradientPaintTransformer();
//     var69.setEndValue(9.223372036854776E18d);
//     java.awt.Color var79 = java.awt.Color.getColor("", 100);
//     int var80 = var79.getRed();
//     int var81 = var79.getAlpha();
//     var69.setPaint((java.awt.Paint)var79);
//     var64.setPaint((java.awt.Paint)var79);
//     java.awt.Color var84 = java.awt.Color.getColor("XY Plot", var79);
//     var55.setDomainCrosshairPaint((java.awt.Paint)var84);
//     java.util.List var86 = var55.getAnnotations();
//     var15.drawDomainTickBands(var38, var39, var86);
//     
//     // Checks the contract:  equals-hashcode on var20 and var58
//     assertTrue("Contract failed: equals-hashcode on var20 and var58", var20.equals(var58) ? var20.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var20
//     assertTrue("Contract failed: equals-hashcode on var58 and var20", var58.equals(var20) ? var58.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test308"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.data.category.CategoryDataset var3 = var0.getDataset();
    org.jfree.chart.plot.DatasetRenderingOrder var4 = var0.getDatasetRenderingOrder();
    org.jfree.chart.plot.PlotRenderingInfo var6 = null;
    java.awt.geom.Point2D var7 = null;
    var0.zoomRangeAxes(1.05d, var6, var7);
    org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
    java.awt.Paint var11 = var10.getLabelPaint();
    org.jfree.chart.util.Layer var12 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(var10, var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test309"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var6 = var1.getParent();
    org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
    var0.setRangeAxisLocation(var8);
    org.jfree.chart.axis.AxisSpace var10 = null;
    var0.setFixedDomainAxisSpace(var10, true);
    var0.configureDomainAxes();
    org.jfree.chart.axis.CategoryAnchor var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test310"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeGridlinesVisible();
    int var12 = var0.getWeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);

  }

  public void test311() {}
//   public void test311() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test311"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setTickMarkOutsideLength(100.0f);
//     var1.setUpperMargin((-7.0d));
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var8.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var10 = var8.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var12 = null;
//     var8.setRenderer(255, var12);
//     java.awt.Color var18 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var19 = null;
//     java.awt.Rectangle var20 = null;
//     java.awt.geom.Rectangle2D var21 = null;
//     java.awt.geom.AffineTransform var22 = null;
//     java.awt.RenderingHints var23 = null;
//     java.awt.PaintContext var24 = var18.createContext(var19, var20, var21, var22, var23);
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     org.jfree.chart.axis.TickUnitSource var28 = null;
//     var26.setStandardTickUnits(var28);
//     org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var31 = var30.getRange();
//     java.awt.Paint var32 = var30.getTickLabelPaint();
//     var26.setTickLabelPaint(var32);
//     org.jfree.chart.plot.ValueMarker var35 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var36 = var35.getAlpha();
//     java.awt.Stroke var37 = var35.getStroke();
//     org.jfree.chart.plot.CategoryMarker var38 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var32, var37);
//     java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var43 = null;
//     java.awt.Rectangle var44 = null;
//     java.awt.geom.Rectangle2D var45 = null;
//     java.awt.geom.AffineTransform var46 = null;
//     java.awt.RenderingHints var47 = null;
//     java.awt.PaintContext var48 = var42.createContext(var43, var44, var45, var46, var47);
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     java.awt.Paint var51 = var49.getTickLabelPaint();
//     double var52 = var49.getLowerMargin();
//     java.awt.Shape var53 = var49.getLeftArrow();
//     java.awt.Stroke var54 = var49.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var56 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var18, var37, (java.awt.Paint)var42, var54, 0.8f);
//     boolean var57 = var8.removeRangeMarker((org.jfree.chart.plot.Marker)var56);
//     org.jfree.chart.plot.Marker var58 = null;
//     boolean var59 = var8.removeDomainMarker(var58);
//     boolean var60 = var1.hasListener((java.util.EventListener)var8);
//     org.jfree.chart.plot.CategoryPlot var61 = new org.jfree.chart.plot.CategoryPlot();
//     var61.clearRangeAxes();
//     boolean var63 = var61.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var65 = var61.getRangeAxis((-16646144));
//     org.jfree.chart.axis.AxisLocation var67 = var61.getRangeAxisLocation(2014);
//     org.jfree.chart.util.SortOrder var68 = var61.getRowRenderingOrder();
//     org.jfree.chart.event.ChartChangeEvent var70 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     org.jfree.chart.event.ChartChangeEventType var71 = null;
//     var70.setType(var71);
//     org.jfree.chart.util.ObjectList var73 = new org.jfree.chart.util.ObjectList();
//     org.jfree.chart.event.ChartChangeEvent var75 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
//     java.lang.String var76 = var75.toString();
//     java.lang.String var77 = var75.toString();
//     int var78 = var73.indexOf((java.lang.Object)var75);
//     org.jfree.chart.axis.CategoryAxis var80 = new org.jfree.chart.axis.CategoryAxis("");
//     var80.configure();
//     float var82 = var80.getMaximumCategoryLabelWidthRatio();
//     var80.setTickMarkOutsideLength(100.0f);
//     var80.setUpperMargin(0.0d);
//     float var87 = var80.getMaximumCategoryLabelWidthRatio();
//     org.jfree.chart.JFreeChart var88 = null;
//     org.jfree.chart.event.ChartChangeEvent var89 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var87, var88);
//     org.jfree.chart.event.ChartChangeEventType var90 = var89.getType();
//     var75.setType(var90);
//     var70.setType(var90);
//     boolean var93 = var68.equals((java.lang.Object)var70);
//     var8.setRowRenderingOrder(var68);
//     
//     // Checks the contract:  equals-hashcode on var8 and var61
//     assertTrue("Contract failed: equals-hashcode on var8 and var61", var8.equals(var61) ? var8.hashCode() == var61.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var61 and var8
//     assertTrue("Contract failed: equals-hashcode on var61 and var8", var61.equals(var8) ? var61.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test312"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
    org.jfree.chart.event.AxisChangeEvent var28 = null;
    var15.axisChanged(var28);
    org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
    var31.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var33 = null;
    var31.setFixedRangeAxisSpace(var33, false);
    boolean var36 = var31.isRangeZoomable();
    var31.setWeight((-1));
    java.awt.Paint var39 = var31.getNoDataMessagePaint();
    org.jfree.chart.axis.AxisLocation var40 = var31.getDomainAxisLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setDomainAxisLocation((-16777116), var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test313"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    var0.drawBackgroundImage(var1, var2);
    org.jfree.data.xy.XYDataset var4 = null;
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    java.awt.Paint var7 = var5.getTickLabelPaint();
    java.awt.Paint var8 = var5.getTickLabelPaint();
    var5.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    org.jfree.chart.renderer.xy.XYItemRenderer var18 = null;
    org.jfree.chart.plot.XYPlot var19 = new org.jfree.chart.plot.XYPlot(var4, (org.jfree.chart.axis.ValueAxis)var5, (org.jfree.chart.axis.ValueAxis)var11, var18);
    org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
    var19.setRenderer(0, var21);
    org.jfree.data.xy.XYDataset var23 = null;
    var19.setDataset(var23);
    org.jfree.chart.util.Layer var25 = null;
    java.util.Collection var26 = var19.getRangeMarkers(var25);
    var19.configureRangeAxes();
    org.jfree.chart.plot.ValueMarker var29 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var30 = var29.getAlpha();
    java.awt.Stroke var31 = var29.getStroke();
    var19.setOutlineStroke(var31);
    var0.setRangeCrosshairStroke(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test314"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    double var16 = var7.calculateBottomInset(3.0d);
    double var17 = var7.getBottom();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 3.0d);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test315"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    org.jfree.chart.event.PlotChangeListener var6 = null;
    var0.addChangeListener(var6);
    org.jfree.chart.axis.CategoryAnchor var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test316"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.LegendItemCollection var15 = var0.getLegendItems();
    java.awt.Paint var16 = var0.getDomainGridlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test317"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    var3.setVerticalTickLabels(false);
    org.jfree.data.Range var7 = var3.getDefaultAutoRange();
    var1.setRange(var7);
    var0.setRange(var7, true, false);
    java.util.Date var12 = var0.getMaximumDate();
    var0.setTickMarkInsideLength(0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test318"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     double var16 = var7.calculateBottomInset(3.0d);
//     java.awt.Color var20 = java.awt.Color.getColor("", 100);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     org.jfree.chart.axis.TickUnitSource var24 = null;
//     var22.setStandardTickUnits(var24);
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     java.awt.Paint var28 = var26.getTickLabelPaint();
//     var22.setTickLabelPaint(var28);
//     org.jfree.chart.plot.ValueMarker var31 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var32 = var31.getAlpha();
//     java.awt.Stroke var33 = var31.getStroke();
//     org.jfree.chart.plot.CategoryMarker var34 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var28, var33);
//     org.jfree.chart.plot.ValueMarker var35 = new org.jfree.chart.plot.ValueMarker(3.0d, (java.awt.Paint)var20, var33);
//     org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot();
//     var36.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var38 = var36.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var40 = null;
//     var36.setRenderer(255, var40);
//     org.jfree.chart.plot.IntervalMarker var45 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     org.jfree.chart.util.Layer var46 = null;
//     var36.addRangeMarker(10, (org.jfree.chart.plot.Marker)var45, var46, true);
//     java.awt.Stroke var49 = var36.getRangeGridlineStroke();
//     var35.setOutlineStroke(var49);
//     boolean var51 = var7.equals((java.lang.Object)var49);
//     
//     // Checks the contract:  equals-hashcode on var3 and var31
//     assertTrue("Contract failed: equals-hashcode on var3 and var31", var3.equals(var31) ? var3.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var3
//     assertTrue("Contract failed: equals-hashcode on var31 and var3", var31.equals(var3) ? var31.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test319() {}
//   public void test319() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test319"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     boolean var17 = var15.isDomainGridlinesVisible();
//     boolean var18 = var7.equals((java.lang.Object)var15);
//     double var19 = var7.getRight();
//     double var21 = var7.calculateRightOutset((-1.0d));
//     org.jfree.chart.util.UnitType var22 = var7.getUnitType();
//     org.jfree.chart.util.UnitType var23 = var7.getUnitType();
//     org.jfree.data.xy.XYDataset var24 = null;
//     org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var26 = var25.getRange();
//     java.awt.Paint var27 = var25.getTickLabelPaint();
//     java.awt.Paint var28 = var25.getTickLabelPaint();
//     var25.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     var31.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     var31.setRangeWithMargins(var36);
//     org.jfree.chart.renderer.xy.XYItemRenderer var38 = null;
//     org.jfree.chart.plot.XYPlot var39 = new org.jfree.chart.plot.XYPlot(var24, (org.jfree.chart.axis.ValueAxis)var25, (org.jfree.chart.axis.ValueAxis)var31, var38);
//     org.jfree.chart.util.RectangleEdge var41 = var39.getDomainAxisEdge(12);
//     var39.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     var44.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var46 = var44.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var48 = null;
//     var44.setRenderer(255, var48);
//     java.awt.Stroke var50 = var44.getOutlineStroke();
//     var39.setRangeZeroBaselineStroke(var50);
//     org.jfree.chart.plot.Plot var52 = var39.getParent();
//     boolean var53 = var39.isRangeCrosshairLockedOnData();
//     boolean var54 = var23.equals((java.lang.Object)var53);
//     
//     // Checks the contract:  equals-hashcode on var15 and var44
//     assertTrue("Contract failed: equals-hashcode on var15 and var44", var15.equals(var44) ? var15.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var15
//     assertTrue("Contract failed: equals-hashcode on var44 and var15", var44.equals(var15) ? var44.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test320() {}
//   public void test320() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test320"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var2 = null;
//     var0.setFixedRangeAxisSpace(var2, false);
//     boolean var5 = var0.isRangeZoomable();
//     var0.setWeight((-1));
//     org.jfree.chart.plot.PlotRenderingInfo var10 = null;
//     var0.handleClick(100, 2014, var10);
// 
//   }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test321"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var1 = var0.getRenderer();
    org.jfree.chart.event.PlotChangeListener var2 = null;
    var0.addChangeListener(var2);
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var5 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var4};
    var0.setRenderers(var5);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setRange(0.0d, 100.0d);
    var7.setLowerBound((-6.0d));
    var7.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var16 = var7.getPlot();
    java.awt.Shape var17 = var7.getDownArrow();
    boolean var18 = var7.isPositiveArrowVisible();
    var7.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.text.DateFormat var23 = var21.getDateFormatOverride();
    var21.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var27 = var21.getLabelFont();
    org.jfree.data.general.Dataset var28 = null;
    org.jfree.data.general.DatasetChangeEvent var29 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var21, var28);
    org.jfree.chart.axis.Timeline var30 = var21.getTimeline();
    var7.setTimeline(var30);
    var7.setFixedDimension((-9.223372036854776E18d));
    var0.setRangeAxis((org.jfree.chart.axis.ValueAxis)var7);
    org.jfree.data.Range var35 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setDefaultAutoRange(var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test322"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    java.lang.String var7 = var0.getLabelURL();
    float var8 = var0.getTickMarkInsideLength();
    double var9 = var0.getUpperMargin();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeWithMargins(7.0d, 3.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.05d);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test323"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    java.awt.Image var14 = null;
    var7.setBackgroundImage(var14);
    var7.clearAnnotations();
    org.jfree.chart.axis.ValueAxis var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var18 = var7.getRangeAxisIndex(var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test324"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    org.jfree.chart.util.Layer var22 = null;
    java.util.Collection var23 = var15.getDomainMarkers(0, var22);
    org.jfree.chart.annotations.XYAnnotation var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test325"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    var0.setLowerBound((-6.0d));
    var0.setFixedDimension(0.0d);
    double var9 = var0.getFixedAutoRange();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test326"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.plot.PlotRenderingInfo var50 = null;
    java.awt.geom.Rectangle2D var51 = null;
    org.jfree.chart.util.RectangleAnchor var52 = null;
    java.awt.geom.Point2D var53 = org.jfree.chart.util.RectangleAnchor.coordinates(var51, var52);
    var0.zoomDomainAxes(9.223372036854776E18d, var50, var53, false);
    org.jfree.data.category.CategoryDataset var56 = var0.getDataset();
    org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
    int var59 = var58.getWeight();
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    java.awt.Shape var63 = var61.getLeftArrow();
    var61.setLabelAngle(0.0d);
    var58.setRangeAxis(255, (org.jfree.chart.axis.ValueAxis)var61);
    org.jfree.chart.axis.AxisLocation var67 = var58.getDomainAxisLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxisLocation((-1), var67);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test327"); }


    org.jfree.chart.util.RectangleInsets var0 = new org.jfree.chart.util.RectangleInsets();

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test328"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    var0.setRangeWithMargins(var5);
    java.awt.Paint var7 = var0.getTickMarkPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.zoomRange(2.0d, (-10.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test329"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getDomainGridlinePaint();
    org.jfree.data.general.DatasetChangeEvent var29 = null;
    var0.datasetChanged(var29);
    java.awt.Stroke var31 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeCrosshairStroke(var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test330"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
    java.awt.Color var5 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var6 = null;
    java.awt.Rectangle var7 = null;
    java.awt.geom.Rectangle2D var8 = null;
    java.awt.geom.AffineTransform var9 = null;
    java.awt.RenderingHints var10 = null;
    java.awt.PaintContext var11 = var5.createContext(var6, var7, var8, var9, var10);
    boolean var12 = var2.equals((java.lang.Object)var10);
    org.jfree.chart.axis.CategoryAxis var14 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var17 = null;
    org.jfree.chart.util.RectangleEdge var18 = null;
    double var19 = var14.getCategoryMiddle(0, (-1), var17, var18);
    var14.configure();
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.text.DateFormat var24 = var22.getDateFormatOverride();
    var22.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var28 = var22.getStandardTickUnits();
    var22.setLabelURL("");
    java.awt.Font var31 = var22.getTickLabelFont();
    var14.setTickLabelFont((java.lang.Comparable)(byte)100, var31);
    boolean var33 = var2.equals((java.lang.Object)var31);
    org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot();
    var36.clearRangeAxes();
    boolean var38 = var36.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var42 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var43 = null;
    boolean var44 = var36.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var42, var43);
    org.jfree.chart.plot.IntervalMarker var47 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var47.setStartValue(0.0d);
    double var50 = var47.getStartValue();
    java.awt.Paint var51 = var47.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var52 = var47.getGradientPaintTransformer();
    var47.setEndValue(9.223372036854776E18d);
    java.awt.Color var57 = java.awt.Color.getColor("", 100);
    int var58 = var57.getRed();
    int var59 = var57.getAlpha();
    var47.setPaint((java.awt.Paint)var57);
    var42.setPaint((java.awt.Paint)var57);
    java.awt.Color var62 = java.awt.Color.getColor("XY Plot", var57);
    int var63 = var62.getTransparency();
    java.awt.Color var64 = java.awt.Color.getColor("", var62);
    boolean var65 = var2.equals((java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test331() {}
//   public void test331() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test331"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     var0.setRangeGridlinesVisible(false);
//     java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var10 = null;
//     java.awt.Rectangle var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     java.awt.geom.AffineTransform var13 = null;
//     java.awt.RenderingHints var14 = null;
//     java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     org.jfree.chart.axis.TickUnitSource var19 = null;
//     var17.setStandardTickUnits(var19);
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     java.awt.Paint var23 = var21.getTickLabelPaint();
//     var17.setTickLabelPaint(var23);
//     org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var27 = var26.getAlpha();
//     java.awt.Stroke var28 = var26.getStroke();
//     org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
//     java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var34 = null;
//     java.awt.Rectangle var35 = null;
//     java.awt.geom.Rectangle2D var36 = null;
//     java.awt.geom.AffineTransform var37 = null;
//     java.awt.RenderingHints var38 = null;
//     java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     java.awt.Paint var42 = var40.getTickLabelPaint();
//     double var43 = var40.getLowerMargin();
//     java.awt.Shape var44 = var40.getLeftArrow();
//     java.awt.Stroke var45 = var40.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
//     var0.setDomainGridlinePaint((java.awt.Paint)var33);
//     org.jfree.chart.plot.PlotRenderingInfo var50 = null;
//     java.awt.geom.Rectangle2D var51 = null;
//     org.jfree.chart.util.RectangleAnchor var52 = null;
//     java.awt.geom.Point2D var53 = org.jfree.chart.util.RectangleAnchor.coordinates(var51, var52);
//     var0.zoomDomainAxes(9.223372036854776E18d, var50, var53, false);
//     java.awt.Paint[] var56 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var57 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var58 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var59 = new org.jfree.chart.plot.CategoryPlot();
//     var59.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var62 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var63 = var62.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var64 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var65 = var64.getRange();
//     org.jfree.chart.util.RectangleInsets var66 = var64.getLabelInsets();
//     double var68 = var66.trimWidth((-1.0d));
//     double var70 = var66.trimHeight((-6.0d));
//     boolean var71 = var63.equals((java.lang.Object)var66);
//     var59.setInsets(var66, true);
//     java.awt.Stroke var74 = var59.getRangeCrosshairStroke();
//     java.awt.Stroke[] var75 = new java.awt.Stroke[] { var74};
//     org.jfree.chart.axis.DateAxis var76 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var77 = var76.getRange();
//     java.awt.Paint var78 = var76.getTickLabelPaint();
//     double var79 = var76.getLowerMargin();
//     java.awt.Shape var80 = var76.getLeftArrow();
//     java.awt.Stroke var81 = var76.getTickMarkStroke();
//     java.awt.Stroke[] var82 = new java.awt.Stroke[] { var81};
//     java.awt.Shape[] var83 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var84 = new org.jfree.chart.plot.DefaultDrawingSupplier(var56, var57, var58, var75, var82, var83);
//     java.awt.Stroke var85 = var84.getNextStroke();
//     var0.setDomainGridlineStroke(var85);
//     
//     // Checks the contract:  equals-hashcode on var26 and var62
//     assertTrue("Contract failed: equals-hashcode on var26 and var62", var26.equals(var62) ? var26.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var62 and var26
//     assertTrue("Contract failed: equals-hashcode on var62 and var26", var62.equals(var26) ? var62.hashCode() == var26.hashCode() : true);
// 
//   }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test332"); }
// 
// 
//     java.awt.geom.Rectangle2D var0 = null;
//     org.jfree.chart.plot.IntervalMarker var3 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
//     org.jfree.chart.util.RectangleAnchor var4 = var3.getLabelAnchor();
//     java.lang.String var5 = var4.toString();
//     java.awt.geom.Point2D var6 = org.jfree.chart.util.RectangleAnchor.coordinates(var0, var4);
// 
//   }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test333"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    org.jfree.chart.util.GradientPaintTransformer var6 = null;
    var2.setGradientPaintTransformer(var6);
    java.awt.Font var8 = var2.getLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test334() {}
//   public void test334() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test334"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     var1.clearCategoryLabelToolTips();
//     org.jfree.chart.axis.CategoryLabelPositions var17 = var1.getCategoryLabelPositions();
//     java.awt.Paint var18 = var1.getTickLabelPaint();
//     var1.setUpperMargin(10.0d);
//     java.awt.geom.Rectangle2D var23 = null;
//     org.jfree.data.xy.XYDataset var24 = null;
//     org.jfree.chart.axis.DateAxis var25 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var26 = var25.getRange();
//     java.awt.Paint var27 = var25.getTickLabelPaint();
//     java.awt.Paint var28 = var25.getTickLabelPaint();
//     var25.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     var31.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     var31.setRangeWithMargins(var36);
//     org.jfree.chart.renderer.xy.XYItemRenderer var38 = null;
//     org.jfree.chart.plot.XYPlot var39 = new org.jfree.chart.plot.XYPlot(var24, (org.jfree.chart.axis.ValueAxis)var25, (org.jfree.chart.axis.ValueAxis)var31, var38);
//     org.jfree.chart.util.RectangleEdge var41 = var39.getDomainAxisEdge(12);
//     double var42 = var1.getCategoryStart((-16646144), (-16777116), var23, var41);
// 
//   }

  public void test335() {}
//   public void test335() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test335"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     var0.setRangeGridlinesVisible(false);
//     org.jfree.chart.LegendItemCollection var5 = var0.getFixedLegendItems();
//     org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var12 = var7.getParent();
//     org.jfree.chart.axis.AxisLocation var14 = var7.getDomainAxisLocation((-668));
//     var6.setRangeAxisLocation(var14);
//     var0.setDomainAxisLocation(var14, false);
//     org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var22 = null;
//     org.jfree.chart.util.RectangleEdge var23 = null;
//     double var24 = var19.getCategoryMiddle(0, (-1), var22, var23);
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     var25.clearRangeAxes();
//     boolean var27 = var25.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var29 = var25.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var30 = var25.getParent();
//     var19.addChangeListener((org.jfree.chart.event.AxisChangeListener)var25);
//     java.awt.Image var32 = null;
//     var25.setBackgroundImage(var32);
//     org.jfree.chart.axis.AxisLocation var35 = var25.getDomainAxisLocation((-668));
//     org.jfree.chart.axis.AxisLocation var37 = var25.getDomainAxisLocation(255);
//     var0.setDomainAxisLocation(var37);
//     
//     // Checks the contract:  equals-hashcode on var7 and var25
//     assertTrue("Contract failed: equals-hashcode on var7 and var25", var7.equals(var25) ? var7.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var7
//     assertTrue("Contract failed: equals-hashcode on var25 and var7", var25.equals(var7) ? var25.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test336() {}
//   public void test336() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test336"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     long var1 = var0.getSerialIndex();
//     long var2 = var0.getLastMillisecond();
//     java.util.Calendar var3 = null;
//     long var4 = var0.getLastMillisecond(var3);
// 
//   }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test337"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var7 = var5.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var9 = null;
    var5.setRenderer(255, var9);
    java.awt.Stroke var11 = var5.getOutlineStroke();
    var0.setAxisLineStroke(var11);
    org.jfree.chart.plot.DefaultDrawingSupplier var13 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Stroke var14 = var13.getNextStroke();
    java.awt.Stroke var15 = var13.getNextStroke();
    var0.setTickMarkStroke(var15);
    java.awt.Paint var17 = var0.getTickMarkPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test338"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    var15.setBackgroundImageAlpha(0.0f);
    java.util.List var31 = var15.getAnnotations();
    org.jfree.chart.axis.AxisSpace var32 = null;
    var15.setFixedDomainAxisSpace(var32, false);
    org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var37 = var36.getAlpha();
    java.awt.Stroke var38 = var36.getStroke();
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    java.text.DateFormat var41 = var39.getDateFormatOverride();
    var39.resizeRange((-1.0d), (-1.0d));
    boolean var45 = var36.equals((java.lang.Object)var39);
    org.jfree.chart.util.RectangleInsets var46 = var36.getLabelOffset();
    java.awt.Paint var47 = var36.getOutlinePaint();
    java.awt.Paint var48 = var36.getPaint();
    var15.setDomainZeroBaselinePaint(var48);
    org.jfree.chart.plot.SeriesRenderingOrder var50 = var15.getSeriesRenderingOrder();
    java.lang.String var51 = var50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "SeriesRenderingOrder.REVERSE"+ "'", var51.equals("SeriesRenderingOrder.REVERSE"));

  }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test339"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
//     var15.setBackgroundImageAlpha(0.0f);
//     java.util.List var31 = var15.getAnnotations();
//     org.jfree.chart.axis.AxisSpace var32 = null;
//     var15.setFixedDomainAxisSpace(var32, false);
//     org.jfree.chart.util.RectangleEdge var36 = var15.getRangeAxisEdge(20);
//     org.jfree.data.xy.XYDataset var37 = null;
//     org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var39 = var38.getRange();
//     java.awt.Paint var40 = var38.getTickLabelPaint();
//     java.awt.Paint var41 = var38.getTickLabelPaint();
//     var38.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var45 = var44.getRange();
//     var44.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var49 = var48.getRange();
//     var44.setRangeWithMargins(var49);
//     org.jfree.chart.renderer.xy.XYItemRenderer var51 = null;
//     org.jfree.chart.plot.XYPlot var52 = new org.jfree.chart.plot.XYPlot(var37, (org.jfree.chart.axis.ValueAxis)var38, (org.jfree.chart.axis.ValueAxis)var44, var51);
//     org.jfree.chart.util.RectangleEdge var54 = var52.getDomainAxisEdge(12);
//     org.jfree.data.xy.XYDataset var56 = var52.getDataset((-1));
//     org.jfree.chart.plot.CategoryPlot var57 = new org.jfree.chart.plot.CategoryPlot();
//     var57.clearRangeAxes();
//     boolean var59 = var57.isDomainGridlinesVisible();
//     org.jfree.data.category.CategoryDataset var60 = var57.getDataset();
//     org.jfree.chart.plot.DatasetRenderingOrder var61 = var57.getDatasetRenderingOrder();
//     var52.setDatasetRenderingOrder(var61);
//     var15.setDatasetRenderingOrder(var61);
//     
//     // Checks the contract:  equals-hashcode on var20 and var57
//     assertTrue("Contract failed: equals-hashcode on var20 and var57", var20.equals(var57) ? var20.hashCode() == var57.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var20
//     assertTrue("Contract failed: equals-hashcode on var57 and var20", var57.equals(var20) ? var57.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test340() {}
//   public void test340() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test340"); }
// 
// 
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var6 = null;
//     java.awt.Rectangle var7 = null;
//     java.awt.geom.Rectangle2D var8 = null;
//     java.awt.geom.AffineTransform var9 = null;
//     java.awt.RenderingHints var10 = null;
//     java.awt.PaintContext var11 = var5.createContext(var6, var7, var8, var9, var10);
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var30 = null;
//     java.awt.Rectangle var31 = null;
//     java.awt.geom.Rectangle2D var32 = null;
//     java.awt.geom.AffineTransform var33 = null;
//     java.awt.RenderingHints var34 = null;
//     java.awt.PaintContext var35 = var29.createContext(var30, var31, var32, var33, var34);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     java.awt.Paint var38 = var36.getTickLabelPaint();
//     double var39 = var36.getLowerMargin();
//     java.awt.Shape var40 = var36.getLeftArrow();
//     java.awt.Stroke var41 = var36.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var43 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var5, var24, (java.awt.Paint)var29, var41, 0.8f);
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var46 = var45.getRange();
//     org.jfree.chart.axis.TickUnitSource var47 = null;
//     var45.setStandardTickUnits(var47);
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     java.awt.Paint var51 = var49.getTickLabelPaint();
//     var45.setTickLabelPaint(var51);
//     org.jfree.chart.plot.ValueMarker var54 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var55 = var54.getAlpha();
//     java.awt.Stroke var56 = var54.getStroke();
//     org.jfree.chart.plot.CategoryMarker var57 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var51, var56);
//     org.jfree.chart.plot.CategoryMarker var58 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-16777116), (java.awt.Paint)var29, var56);
//     
//     // Checks the contract:  equals-hashcode on var22 and var54
//     assertTrue("Contract failed: equals-hashcode on var22 and var54", var22.equals(var54) ? var22.hashCode() == var54.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var22
//     assertTrue("Contract failed: equals-hashcode on var54 and var22", var54.equals(var22) ? var54.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var57
//     assertTrue("Contract failed: equals-hashcode on var25 and var57", var25.equals(var57) ? var25.hashCode() == var57.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var25
//     assertTrue("Contract failed: equals-hashcode on var57 and var25", var57.equals(var25) ? var57.hashCode() == var25.hashCode() : true);
// 
//   }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test341"); }


    java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var2 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    var3.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var7 = var6.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
    double var12 = var10.trimWidth((-1.0d));
    double var14 = var10.trimHeight((-6.0d));
    boolean var15 = var7.equals((java.lang.Object)var10);
    var3.setInsets(var10, true);
    java.awt.Stroke var18 = var3.getRangeCrosshairStroke();
    java.awt.Stroke[] var19 = new java.awt.Stroke[] { var18};
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    java.awt.Paint var22 = var20.getTickLabelPaint();
    double var23 = var20.getLowerMargin();
    java.awt.Shape var24 = var20.getLeftArrow();
    java.awt.Stroke var25 = var20.getTickMarkStroke();
    java.awt.Stroke[] var26 = new java.awt.Stroke[] { var25};
    java.awt.Shape[] var27 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var28 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var1, var2, var19, var26, var27);
    java.awt.Stroke var29 = var28.getNextStroke();
    java.awt.Paint var30 = var28.getNextOutlinePaint();
    java.awt.Paint var31 = var28.getNextFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test342"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var18 = var15.getRangeAxisLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test343() {}
//   public void test343() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test343"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
//     var15.setRangeCrosshairVisible(false);
//     org.jfree.chart.plot.PlotRenderingInfo var23 = null;
//     org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var25 = var24.getRenderer();
//     org.jfree.chart.event.PlotChangeListener var26 = null;
//     var24.addChangeListener(var26);
//     org.jfree.data.category.CategoryDataset var29 = var24.getDataset(253);
//     org.jfree.chart.plot.PlotRenderingInfo var31 = null;
//     org.jfree.data.xy.XYDataset var32 = null;
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     java.awt.Paint var35 = var33.getTickLabelPaint();
//     java.awt.Paint var36 = var33.getTickLabelPaint();
//     var33.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     var39.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var39.setRangeWithMargins(var44);
//     org.jfree.chart.renderer.xy.XYItemRenderer var46 = null;
//     org.jfree.chart.plot.XYPlot var47 = new org.jfree.chart.plot.XYPlot(var32, (org.jfree.chart.axis.ValueAxis)var33, (org.jfree.chart.axis.ValueAxis)var39, var46);
//     org.jfree.chart.renderer.xy.XYItemRenderer var49 = null;
//     var47.setRenderer(0, var49);
//     org.jfree.data.xy.XYDataset var51 = null;
//     var47.setDataset(var51);
//     org.jfree.chart.plot.ValueMarker var54 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var55 = var54.getAlpha();
//     java.awt.Stroke var56 = var54.getStroke();
//     var47.setDomainZeroBaselineStroke(var56);
//     org.jfree.chart.axis.ValueAxis var59 = var47.getRangeAxisForDataset(0);
//     org.jfree.chart.util.Layer var60 = null;
//     java.util.Collection var61 = var47.getDomainMarkers(var60);
//     org.jfree.chart.plot.PlotRenderingInfo var64 = null;
//     java.awt.geom.Rectangle2D var65 = null;
//     org.jfree.chart.util.RectangleAnchor var66 = null;
//     java.awt.geom.Point2D var67 = org.jfree.chart.util.RectangleAnchor.coordinates(var65, var66);
//     var47.zoomDomainAxes((-12.0d), 0.05d, var64, var67);
//     var24.zoomRangeAxes(100.0d, var31, var67, true);
//     var15.zoomDomainAxes((-12.0d), var23, var67, true);
// 
//   }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test344"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Paint var8 = var0.getDomainGridlinePaint();
    org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var12.setStartValue(0.0d);
    double var15 = var12.getStartValue();
    java.awt.Paint var16 = var12.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
    var12.setEndValue(9.223372036854776E18d);
    java.lang.Object var20 = var12.clone();
    org.jfree.chart.util.Layer var21 = null;
    var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
    double var23 = var12.getStartValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);

  }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test345"); }
// 
// 
//     org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
//     var1.clear();
//     org.jfree.data.xy.XYDataset var3 = null;
//     org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var5 = var4.getRange();
//     java.awt.Paint var6 = var4.getTickLabelPaint();
//     java.awt.Paint var7 = var4.getTickLabelPaint();
//     var4.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     var10.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     var10.setRangeWithMargins(var15);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     org.jfree.chart.plot.XYPlot var18 = new org.jfree.chart.plot.XYPlot(var3, (org.jfree.chart.axis.ValueAxis)var4, (org.jfree.chart.axis.ValueAxis)var10, var17);
//     org.jfree.chart.util.RectangleEdge var20 = var18.getDomainAxisEdge(12);
//     var18.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
//     var23.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var27 = null;
//     var23.setRenderer(255, var27);
//     java.awt.Stroke var29 = var23.getOutlineStroke();
//     var18.setRangeZeroBaselineStroke(var29);
//     org.jfree.chart.LegendItemCollection var31 = var18.getLegendItems();
//     var18.setBackgroundImageAlpha(0.0f);
//     java.util.List var34 = var18.getAnnotations();
//     var18.configureRangeAxes();
//     int var36 = var1.indexOf((java.lang.Object)var18);
//     java.lang.Object var38 = var1.get((-668));
//     org.jfree.data.xy.XYDataset var39 = null;
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     java.awt.Paint var42 = var40.getTickLabelPaint();
//     java.awt.Paint var43 = var40.getTickLabelPaint();
//     var40.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var47 = var46.getRange();
//     var46.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var51 = var50.getRange();
//     var46.setRangeWithMargins(var51);
//     org.jfree.chart.renderer.xy.XYItemRenderer var53 = null;
//     org.jfree.chart.plot.XYPlot var54 = new org.jfree.chart.plot.XYPlot(var39, (org.jfree.chart.axis.ValueAxis)var40, (org.jfree.chart.axis.ValueAxis)var46, var53);
//     org.jfree.chart.plot.PlotRenderingInfo var56 = null;
//     org.jfree.chart.plot.CategoryPlot var57 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
//     var58.clearRangeAxes();
//     boolean var60 = var58.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var62 = var58.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var63 = var58.getParent();
//     org.jfree.chart.axis.AxisLocation var65 = var58.getDomainAxisLocation((-668));
//     var57.setRangeAxisLocation(var65);
//     org.jfree.chart.axis.AxisSpace var67 = null;
//     var57.setFixedDomainAxisSpace(var67, true);
//     org.jfree.chart.plot.PlotRenderingInfo var71 = null;
//     java.awt.geom.Rectangle2D var72 = null;
//     org.jfree.chart.util.RectangleAnchor var73 = null;
//     java.awt.geom.Point2D var74 = org.jfree.chart.util.RectangleAnchor.coordinates(var72, var73);
//     var57.zoomDomainAxes(9.223372036854776E18d, var71, var74);
//     var54.zoomRangeAxes((-9.223372036854776E18d), var56, var74);
//     org.jfree.chart.plot.CategoryMarker var79 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     org.jfree.chart.util.Layer var80 = null;
//     boolean var81 = var54.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var79, var80);
//     float var82 = var54.getBackgroundAlpha();
//     java.awt.Font var83 = var54.getNoDataMessageFont();
//     int var84 = var1.indexOf((java.lang.Object)var54);
//     
//     // Checks the contract:  equals-hashcode on var23 and var58
//     assertTrue("Contract failed: equals-hashcode on var23 and var58", var23.equals(var58) ? var23.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var23
//     assertTrue("Contract failed: equals-hashcode on var58 and var23", var58.equals(var23) ? var58.hashCode() == var23.hashCode() : true);
// 
//   }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test346"); }


    org.jfree.chart.event.ChartChangeEvent var1 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    org.jfree.chart.event.ChartChangeEventType var2 = null;
    var1.setType(var2);
    java.lang.String var4 = var1.toString();
    org.jfree.chart.JFreeChart var5 = null;
    var1.setChart(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var4.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test347"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    org.jfree.chart.axis.AxisLocation var6 = var0.getRangeAxisLocation(2014);
    org.jfree.chart.util.SortOrder var7 = var0.getRowRenderingOrder();
    org.jfree.chart.event.ChartChangeEvent var9 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    org.jfree.chart.event.ChartChangeEventType var10 = null;
    var9.setType(var10);
    org.jfree.chart.util.ObjectList var12 = new org.jfree.chart.util.ObjectList();
    org.jfree.chart.event.ChartChangeEvent var14 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    java.lang.String var15 = var14.toString();
    java.lang.String var16 = var14.toString();
    int var17 = var12.indexOf((java.lang.Object)var14);
    org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis("");
    var19.configure();
    float var21 = var19.getMaximumCategoryLabelWidthRatio();
    var19.setTickMarkOutsideLength(100.0f);
    var19.setUpperMargin(0.0d);
    float var26 = var19.getMaximumCategoryLabelWidthRatio();
    org.jfree.chart.JFreeChart var27 = null;
    org.jfree.chart.event.ChartChangeEvent var28 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var26, var27);
    org.jfree.chart.event.ChartChangeEventType var29 = var28.getType();
    var14.setType(var29);
    var9.setType(var29);
    boolean var32 = var7.equals((java.lang.Object)var9);
    java.lang.Object var33 = var9.getSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var15.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var16.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + (short)(-1)+ "'", var33.equals((short)(-1)));

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test348"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Paint var8 = var0.getDomainGridlinePaint();
    org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var12.setStartValue(0.0d);
    double var15 = var12.getStartValue();
    java.awt.Paint var16 = var12.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
    var12.setEndValue(9.223372036854776E18d);
    java.lang.Object var20 = var12.clone();
    org.jfree.chart.util.Layer var21 = null;
    var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
    var0.setRangeCrosshairValue((-10.0d), true);
    org.jfree.chart.axis.CategoryAnchor var26 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test349() {}
//   public void test349() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test349"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     java.text.NumberFormat var3 = var1.getNumberFormatOverride();
//     java.awt.geom.Rectangle2D var5 = null;
//     org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
//     var6.clearRangeAxes();
//     boolean var8 = var6.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var10 = var6.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var11 = var6.getParent();
//     org.jfree.chart.plot.IntervalMarker var14 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var14.setStartValue(0.0d);
//     double var17 = var14.getStartValue();
//     java.awt.Paint var18 = var14.getPaint();
//     var6.setOutlinePaint(var18);
//     boolean var20 = var6.isDomainZoomable();
//     org.jfree.chart.util.RectangleEdge var21 = var6.getRangeAxisEdge();
//     double var22 = var1.valueToJava2D(8.0d, var5, var21);
// 
//   }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test350"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    var15.setBackgroundImageAlpha(0.0f);
    java.util.List var31 = var15.getAnnotations();
    org.jfree.chart.axis.AxisSpace var32 = null;
    var15.setFixedDomainAxisSpace(var32, false);
    org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var37 = var36.getAlpha();
    java.awt.Stroke var38 = var36.getStroke();
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var40 = var39.getRange();
    java.text.DateFormat var41 = var39.getDateFormatOverride();
    var39.resizeRange((-1.0d), (-1.0d));
    boolean var45 = var36.equals((java.lang.Object)var39);
    org.jfree.chart.util.RectangleInsets var46 = var36.getLabelOffset();
    java.awt.Paint var47 = var36.getOutlinePaint();
    java.awt.Paint var48 = var36.getPaint();
    var15.setDomainZeroBaselinePaint(var48);
    org.jfree.data.xy.XYDataset var50 = null;
    org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var52 = var51.getRange();
    java.awt.Paint var53 = var51.getTickLabelPaint();
    java.awt.Paint var54 = var51.getTickLabelPaint();
    var51.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var57 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var58 = var57.getRange();
    var57.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    var57.setRangeWithMargins(var62);
    org.jfree.chart.renderer.xy.XYItemRenderer var64 = null;
    org.jfree.chart.plot.XYPlot var65 = new org.jfree.chart.plot.XYPlot(var50, (org.jfree.chart.axis.ValueAxis)var51, (org.jfree.chart.axis.ValueAxis)var57, var64);
    org.jfree.chart.util.RectangleEdge var67 = var65.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var68 = var65.getDomainAxisLocation();
    var15.setDomainAxisLocation(var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Paint var71 = var15.getQuadrantPaint((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test351"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var18 = var15.getDomainAxisLocation();
    org.jfree.chart.plot.ValueMarker var20 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var21 = var20.getAlpha();
    java.awt.Stroke var22 = var20.getStroke();
    var15.setRangeCrosshairStroke(var22);
    java.awt.Paint var24 = var15.getDomainZeroBaselinePaint();
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    boolean var27 = var26.isVisible();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setDomainAxis((-16646144), (org.jfree.chart.axis.ValueAxis)var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test352"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
//     var15.setRangeCrosshairVisible(false);
//     org.jfree.data.xy.XYDataset var22 = null;
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     java.awt.Paint var25 = var23.getTickLabelPaint();
//     java.awt.Paint var26 = var23.getTickLabelPaint();
//     var23.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     var29.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     var29.setRangeWithMargins(var34);
//     org.jfree.chart.renderer.xy.XYItemRenderer var36 = null;
//     org.jfree.chart.plot.XYPlot var37 = new org.jfree.chart.plot.XYPlot(var22, (org.jfree.chart.axis.ValueAxis)var23, (org.jfree.chart.axis.ValueAxis)var29, var36);
//     org.jfree.chart.renderer.xy.XYItemRenderer var39 = null;
//     var37.setRenderer(0, var39);
//     org.jfree.data.xy.XYDataset var41 = null;
//     var37.setDataset(var41);
//     org.jfree.chart.plot.ValueMarker var44 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var45 = var44.getAlpha();
//     java.awt.Stroke var46 = var44.getStroke();
//     var37.setDomainZeroBaselineStroke(var46);
//     org.jfree.chart.axis.ValueAxis var49 = var37.getRangeAxisForDataset(0);
//     var37.clearAnnotations();
//     java.awt.Graphics2D var51 = null;
//     java.awt.geom.Rectangle2D var52 = null;
//     org.jfree.data.xy.XYDataset var53 = null;
//     org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var55 = var54.getRange();
//     java.awt.Paint var56 = var54.getTickLabelPaint();
//     java.awt.Paint var57 = var54.getTickLabelPaint();
//     var54.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var60 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var61 = var60.getRange();
//     var60.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var64 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var65 = var64.getRange();
//     var60.setRangeWithMargins(var65);
//     org.jfree.chart.renderer.xy.XYItemRenderer var67 = null;
//     org.jfree.chart.plot.XYPlot var68 = new org.jfree.chart.plot.XYPlot(var53, (org.jfree.chart.axis.ValueAxis)var54, (org.jfree.chart.axis.ValueAxis)var60, var67);
//     org.jfree.chart.util.RectangleEdge var70 = var68.getDomainAxisEdge(12);
//     var68.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var73 = new org.jfree.chart.plot.CategoryPlot();
//     var73.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var75 = var73.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var77 = null;
//     var73.setRenderer(255, var77);
//     java.awt.Stroke var79 = var73.getOutlineStroke();
//     var68.setRangeZeroBaselineStroke(var79);
//     org.jfree.chart.LegendItemCollection var81 = var68.getLegendItems();
//     var68.setBackgroundImageAlpha(0.0f);
//     java.util.List var84 = var68.getAnnotations();
//     var37.drawRangeTickBands(var51, var52, var84);
//     org.jfree.chart.axis.DateAxis var86 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var87 = var86.getRange();
//     var86.setRange(0.0d, 100.0d);
//     boolean var91 = var86.isInverted();
//     var86.setAutoTickUnitSelection(false);
//     org.jfree.chart.axis.ValueAxis[] var94 = new org.jfree.chart.axis.ValueAxis[] { var86};
//     var37.setRangeAxes(var94);
//     var15.setRangeAxes(var94);
//     
//     // Checks the contract:  equals-hashcode on var15 and var37
//     assertTrue("Contract failed: equals-hashcode on var15 and var37", var15.equals(var37) ? var15.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var15
//     assertTrue("Contract failed: equals-hashcode on var37 and var15", var37.equals(var15) ? var37.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test353"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.extendWidth((-6.0d));
    double var9 = var2.getLeft();
    org.jfree.chart.util.UnitType var10 = var2.getUnitType();
    java.lang.String var11 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "UnitType.ABSOLUTE"+ "'", var11.equals("UnitType.ABSOLUTE"));

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test354"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var4 = null;
    java.awt.Rectangle var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    java.awt.geom.AffineTransform var7 = null;
    java.awt.RenderingHints var8 = null;
    java.awt.PaintContext var9 = var3.createContext(var4, var5, var6, var7, var8);
    int var10 = var3.getRGB();
    float[] var17 = new float[] { 100.0f, 1.0f, (-1.0f)};
    float[] var18 = java.awt.Color.RGBtoHSB((-1), 100, 100, var17);
    float[] var19 = var3.getRGBColorComponents(var18);
    java.lang.String var20 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-668));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "java.awt.Color[r=255,g=253,b=100]"+ "'", var20.equals("java.awt.Color[r=255,g=253,b=100]"));

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test355"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.plot.XYPlot var49 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.LegendItemCollection var50 = var49.getLegendItems();
    var0.setFixedLegendItems(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test356() {}
//   public void test356() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test356"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
//     java.awt.Paint var28 = var0.getRangeZeroBaselinePaint();
//     org.jfree.data.xy.XYDataset var29 = null;
//     var0.setDataset(var29);
//     org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
//     var31.clearRangeAxes();
//     boolean var33 = var31.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var37 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var38 = null;
//     boolean var39 = var31.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var37, var38);
//     org.jfree.chart.plot.IntervalMarker var42 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var42.setStartValue(0.0d);
//     double var45 = var42.getStartValue();
//     java.awt.Paint var46 = var42.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var47 = var42.getGradientPaintTransformer();
//     var42.setEndValue(9.223372036854776E18d);
//     java.awt.Color var52 = java.awt.Color.getColor("", 100);
//     int var53 = var52.getRed();
//     int var54 = var52.getAlpha();
//     var42.setPaint((java.awt.Paint)var52);
//     var37.setPaint((java.awt.Paint)var52);
//     var0.setRangeTickBandPaint((java.awt.Paint)var52);
//     org.jfree.chart.plot.IntervalMarker var60 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var60.setStartValue(0.0d);
//     double var63 = var60.getStartValue();
//     org.jfree.chart.plot.ValueMarker var65 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var66 = var65.getAlpha();
//     java.awt.Stroke var67 = var65.getStroke();
//     var60.setOutlineStroke(var67);
//     var60.setStartValue(9.223372036854776E18d);
//     double var71 = var60.getEndValue();
//     double var72 = var60.getStartValue();
//     java.awt.Paint var73 = var60.getOutlinePaint();
//     var0.setDomainZeroBaselinePaint(var73);
//     
//     // Checks the contract:  equals-hashcode on var22 and var65
//     assertTrue("Contract failed: equals-hashcode on var22 and var65", var22.equals(var65) ? var22.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var22
//     assertTrue("Contract failed: equals-hashcode on var65 and var22", var65.equals(var22) ? var65.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test357"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.trimHeight(0.0d);
    java.lang.String var9 = var2.toString();
    java.lang.String var10 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"+ "'", var9.equals("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"+ "'", var10.equals("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]"));

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test358"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
    int var27 = var15.getIndexOf(var26);
    org.jfree.chart.renderer.xy.XYItemRenderer var29 = null;
    var15.setRenderer(255, var29);
    org.jfree.chart.plot.PlotRenderingInfo var33 = null;
    java.awt.geom.Rectangle2D var34 = null;
    org.jfree.chart.util.RectangleAnchor var35 = null;
    java.awt.geom.Point2D var36 = org.jfree.chart.util.RectangleAnchor.coordinates(var34, var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.zoomRangeAxes((-4.0d), (-12.0d), var33, var36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test359() {}
//   public void test359() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test359"); }
// 
// 
//     org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
//     var1.clear();
//     org.jfree.data.xy.XYDataset var3 = null;
//     org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var5 = var4.getRange();
//     java.awt.Paint var6 = var4.getTickLabelPaint();
//     java.awt.Paint var7 = var4.getTickLabelPaint();
//     var4.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     var10.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     var10.setRangeWithMargins(var15);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     org.jfree.chart.plot.XYPlot var18 = new org.jfree.chart.plot.XYPlot(var3, (org.jfree.chart.axis.ValueAxis)var4, (org.jfree.chart.axis.ValueAxis)var10, var17);
//     org.jfree.chart.util.RectangleEdge var20 = var18.getDomainAxisEdge(12);
//     var18.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
//     var23.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var27 = null;
//     var23.setRenderer(255, var27);
//     java.awt.Stroke var29 = var23.getOutlineStroke();
//     var18.setRangeZeroBaselineStroke(var29);
//     org.jfree.chart.LegendItemCollection var31 = var18.getLegendItems();
//     var18.setBackgroundImageAlpha(0.0f);
//     java.util.List var34 = var18.getAnnotations();
//     var18.configureRangeAxes();
//     int var36 = var1.indexOf((java.lang.Object)var18);
//     org.jfree.chart.axis.CategoryAxis var38 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var41 = null;
//     org.jfree.chart.util.RectangleEdge var42 = null;
//     double var43 = var38.getCategoryMiddle(0, (-1), var41, var42);
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     var44.clearRangeAxes();
//     boolean var46 = var44.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var48 = var44.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var49 = var44.getParent();
//     var38.addChangeListener((org.jfree.chart.event.AxisChangeListener)var44);
//     java.awt.Image var51 = null;
//     var44.setBackgroundImage(var51);
//     org.jfree.chart.axis.AxisLocation var54 = var44.getDomainAxisLocation((-668));
//     var18.setRangeAxisLocation(var54);
//     
//     // Checks the contract:  equals-hashcode on var23 and var44
//     assertTrue("Contract failed: equals-hashcode on var23 and var44", var23.equals(var44) ? var23.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var23
//     assertTrue("Contract failed: equals-hashcode on var44 and var23", var44.equals(var23) ? var44.hashCode() == var23.hashCode() : true);
// 
//   }

  public void test360() {}
//   public void test360() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test360"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     java.awt.Graphics2D var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     var0.drawOutline(var12, var13);
// 
//   }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test361"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    var0.setTickMarkInsideLength(10.0f);
    org.jfree.chart.util.ObjectList var7 = new org.jfree.chart.util.ObjectList();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    var8.setRange(0.0d, 100.0d);
    boolean var13 = var8.isInverted();
    org.jfree.chart.axis.Timeline var14 = var8.getTimeline();
    boolean var15 = var8.isVisible();
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    java.awt.Shape var18 = var16.getLeftArrow();
    org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var20 = var19.getRange();
    var19.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var24 = var23.getRange();
    var19.setRangeWithMargins(var24);
    var16.setRangeWithMargins(var24, true, true);
    var8.setRange(var24);
    boolean var30 = var7.equals((java.lang.Object)var24);
    var0.setRangeWithMargins(var24);
    var0.setAutoRange(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test362"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.plot.Plot var28 = var15.getParent();
    org.jfree.chart.plot.Plot var29 = var15.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test363() {}
//   public void test363() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test363"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.awt.Paint var2 = var0.getTickLabelPaint();
//     double var3 = var0.getLowerMargin();
//     java.awt.Shape var4 = var0.getLeftArrow();
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.util.RectangleEdge var7 = null;
//     double var8 = var0.lengthToJava2D(0.0d, var6, var7);
//     java.awt.Paint var9 = var0.getTickLabelPaint();
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.data.xy.XYDataset var12 = null;
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     java.awt.Paint var15 = var13.getTickLabelPaint();
//     java.awt.Paint var16 = var13.getTickLabelPaint();
//     var13.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     var19.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     var19.setRangeWithMargins(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     org.jfree.chart.plot.XYPlot var27 = new org.jfree.chart.plot.XYPlot(var12, (org.jfree.chart.axis.ValueAxis)var13, (org.jfree.chart.axis.ValueAxis)var19, var26);
//     org.jfree.chart.renderer.xy.XYItemRenderer var29 = null;
//     var27.setRenderer(0, var29);
//     org.jfree.data.xy.XYDataset var31 = null;
//     var27.setDataset(var31);
//     org.jfree.chart.util.Layer var33 = null;
//     java.util.Collection var34 = var27.getRangeMarkers(var33);
//     var27.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.Layer var38 = null;
//     java.util.Collection var39 = var27.getRangeMarkers((-16777116), var38);
//     var27.setDomainCrosshairValue((-1.0d), true);
//     org.jfree.chart.axis.ValueAxis var43 = var27.getDomainAxis();
//     float var44 = var27.getBackgroundAlpha();
//     org.jfree.chart.util.RectangleEdge var45 = var27.getDomainAxisEdge();
//     double var46 = var0.valueToJava2D(0.0d, var11, var45);
// 
//   }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test364"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    boolean var7 = var0.isVisible();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Shape var10 = var8.getLeftArrow();
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var11.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    var11.setRangeWithMargins(var16);
    var8.setRangeWithMargins(var16, true, true);
    var0.setRange(var16);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.text.DateFormat var24 = var22.getDateFormatOverride();
    java.awt.Shape var25 = var22.getUpArrow();
    var22.setRange((-7.0d), 100.0d);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    var29.setVerticalTickLabels(false);
    org.jfree.data.Range var33 = var29.getDefaultAutoRange();
    var29.setAutoRangeMinimumSize(4.0d);
    org.jfree.chart.axis.DateTickUnit var36 = var29.getTickUnit();
    var22.setTickUnit(var36);
    java.util.Date var38 = var0.calculateLowestVisibleTickValue(var36);
    java.awt.Paint var39 = var0.getTickLabelPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test365"); }


    java.awt.Color var3 = java.awt.Color.getColor("", 100);
    int var4 = var3.getRed();
    int var5 = var3.getRGB();
    org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
    var6.clearRangeAxes();
    boolean var8 = var6.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var10 = var6.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var11 = var6.getParent();
    org.jfree.chart.plot.IntervalMarker var14 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var14.setStartValue(0.0d);
    double var17 = var14.getStartValue();
    java.awt.Paint var18 = var14.getPaint();
    var6.setOutlinePaint(var18);
    boolean var20 = var3.equals((java.lang.Object)var6);
    int var21 = var3.getAlpha();
    java.awt.Color var22 = java.awt.Color.getColor("Category Plot", var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test366"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var1 = var0.getRenderer();
    boolean var2 = var0.isDomainGridlinesVisible();
    var0.setRangeCrosshairLockedOnData(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test367"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Stroke var6 = var0.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
//     java.awt.Image var8 = var0.getBackgroundImage();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var10 = var0.getRenderer((-668));
//     var0.setWeight(100);
//     java.awt.Graphics2D var13 = null;
//     java.awt.geom.Rectangle2D var14 = null;
//     var0.drawBackground(var13, var14);
// 
//   }

  public void test368() {}
//   public void test368() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test368"); }
// 
// 
//     org.jfree.data.time.Day var0 = new org.jfree.data.time.Day();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     int var10 = var0.compareTo((java.lang.Object)var1);
//     java.util.Date var11 = var0.getStart();
//     int var12 = var0.getMonth();
//     long var13 = var0.getLastMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 1419148799999L);
// 
//   }

  public void test369() {}
//   public void test369() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test369"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.text.DateFormat var2 = var0.getDateFormatOverride();
//     var0.resizeRange((-1.0d), (-1.0d));
//     java.awt.Graphics2D var6 = null;
//     java.awt.geom.Rectangle2D var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     org.jfree.chart.util.RectangleEdge var10 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var11 = null;
//     org.jfree.chart.axis.AxisState var12 = var0.draw(var6, 0.0d, var8, var9, var10, var11);
// 
//   }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test370"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
    int var29 = var0.getIndexOf(var28);
    org.jfree.chart.plot.IntervalMarker var33 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.util.RectangleAnchor var34 = var33.getLabelAnchor();
    org.jfree.chart.util.Layer var35 = null;
    boolean var36 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var33, var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBackgroundImageAlpha(2.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test371() {}
//   public void test371() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test371"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
//     var28.clearRangeAxes();
//     boolean var30 = var28.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var32 = var28.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var33 = var28.getParent();
//     org.jfree.chart.axis.AxisLocation var35 = var28.getDomainAxisLocation((-668));
//     var27.setRangeAxisLocation(var35);
//     org.jfree.chart.axis.AxisSpace var37 = null;
//     var27.setFixedDomainAxisSpace(var37, true);
//     var27.configureDomainAxes();
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     var41.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var44 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var45 = var44.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var47 = var46.getRange();
//     org.jfree.chart.util.RectangleInsets var48 = var46.getLabelInsets();
//     double var50 = var48.trimWidth((-1.0d));
//     double var52 = var48.trimHeight((-6.0d));
//     boolean var53 = var45.equals((java.lang.Object)var48);
//     var41.setInsets(var48, true);
//     org.jfree.chart.LegendItemCollection var56 = var41.getLegendItems();
//     boolean var57 = var41.isSubplot();
//     org.jfree.chart.plot.PlotOrientation var58 = var41.getOrientation();
//     var27.setOrientation(var58);
//     java.lang.String var60 = var58.toString();
//     var0.setOrientation(var58);
//     
//     // Checks the contract:  equals-hashcode on var22 and var44
//     assertTrue("Contract failed: equals-hashcode on var22 and var44", var22.equals(var44) ? var22.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var22
//     assertTrue("Contract failed: equals-hashcode on var44 and var22", var44.equals(var22) ? var44.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test372() {}
//   public void test372() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test372"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     org.jfree.chart.axis.TickUnitSource var33 = null;
//     var31.setStandardTickUnits(var33);
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     java.awt.Paint var37 = var35.getTickLabelPaint();
//     var31.setTickLabelPaint(var37);
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.chart.util.RectangleEdge var41 = null;
//     double var42 = var31.lengthToJava2D((-7.0d), var40, var41);
//     var15.setRangeAxis(0, (org.jfree.chart.axis.ValueAxis)var31, true);
//     org.jfree.chart.plot.CategoryPlot var46 = new org.jfree.chart.plot.CategoryPlot();
//     var46.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var48 = var46.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var50 = null;
//     var46.setRenderer(255, var50);
//     java.awt.Stroke var52 = var46.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var53 = var46.getDataset();
//     java.awt.Paint var54 = var46.getNoDataMessagePaint();
//     org.jfree.chart.plot.CategoryPlot var55 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
//     var56.clearRangeAxes();
//     boolean var58 = var56.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var60 = var56.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var61 = var56.getParent();
//     org.jfree.chart.axis.AxisLocation var63 = var56.getDomainAxisLocation((-668));
//     var55.setRangeAxisLocation(var63);
//     var46.setDomainAxisLocation(var63, true);
//     var15.setRangeAxisLocation(2014, var63, false);
//     
//     // Checks the contract:  equals-hashcode on var20 and var56
//     assertTrue("Contract failed: equals-hashcode on var20 and var56", var20.equals(var56) ? var20.hashCode() == var56.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var56 and var20
//     assertTrue("Contract failed: equals-hashcode on var56 and var20", var56.equals(var20) ? var56.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test373"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setCategoryLabelPositionOffset(0);
    var1.setCategoryMargin(1.0d);
    java.lang.String var8 = var1.getLabelURL();
    java.awt.Font var10 = var1.getTickLabelFont((java.lang.Comparable)"CONTRACT");
    boolean var11 = var1.isTickLabelsVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test374"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("java.awt.Color[r=0,g=0,b=100]");

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test375"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var7 = var0.getAxisOffset();
    var0.setAnchorValue(100.0d, false);
    org.jfree.chart.axis.ValueAxis var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = var0.getRangeAxisIndex(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test376() {}
//   public void test376() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test376"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     int var27 = var15.getIndexOf(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     java.awt.Paint var31 = var29.getTickLabelPaint();
//     java.awt.Paint var32 = var29.getTickLabelPaint();
//     var29.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var35 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var36 = var35.getRange();
//     var35.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     var35.setRangeWithMargins(var40);
//     org.jfree.chart.renderer.xy.XYItemRenderer var42 = null;
//     org.jfree.chart.plot.XYPlot var43 = new org.jfree.chart.plot.XYPlot(var28, (org.jfree.chart.axis.ValueAxis)var29, (org.jfree.chart.axis.ValueAxis)var35, var42);
//     org.jfree.chart.util.RectangleEdge var45 = var43.getDomainAxisEdge(12);
//     var43.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
//     var48.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var50 = var48.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var52 = null;
//     var48.setRenderer(255, var52);
//     java.awt.Stroke var54 = var48.getOutlineStroke();
//     var43.setRangeZeroBaselineStroke(var54);
//     org.jfree.chart.axis.ValueAxis var56 = null;
//     int var57 = var43.getRangeAxisIndex(var56);
//     var43.clearDomainAxes();
//     org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var60 = var59.getRange();
//     var59.setRange(0.0d, 100.0d);
//     var59.setLowerBound((-6.0d));
//     var59.setLabelURL("hi!");
//     java.awt.Shape var68 = var59.getRightArrow();
//     org.jfree.data.general.Dataset var69 = null;
//     org.jfree.data.general.DatasetChangeEvent var70 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var59, var69);
//     var43.datasetChanged(var70);
//     var15.datasetChanged(var70);
//     
//     // Checks the contract:  equals-hashcode on var43 and var15
//     assertTrue("Contract failed: equals-hashcode on var43 and var15", var43.equals(var15) ? var43.hashCode() == var15.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var43 and var15.", var43.equals(var15) == var15.equals(var43));
// 
//   }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test377"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var2.setStartValue(0.0d);
    double var5 = var2.getStartValue();
    org.jfree.chart.plot.ValueMarker var7 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var8 = var7.getAlpha();
    java.awt.Stroke var9 = var7.getStroke();
    var2.setOutlineStroke(var9);
    java.lang.String var11 = var2.getLabel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test378"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    var0.setOutlineVisible(false);
    org.jfree.chart.plot.Plot var17 = var0.getRootPlot();
    java.awt.Graphics2D var18 = null;
    java.awt.geom.Rectangle2D var19 = null;
    var17.drawBackgroundImage(var18, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test379"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var7 = null;
    java.awt.Rectangle var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    java.awt.geom.AffineTransform var10 = null;
    java.awt.RenderingHints var11 = null;
    java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
    var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
    var1.removeCategoryLabelToolTip((java.lang.Comparable)100L);
    java.lang.String var17 = var1.getCategoryLabelToolTip((java.lang.Comparable)10L);
    java.awt.Paint var19 = var1.getTickLabelPaint((java.lang.Comparable)100);
    java.lang.String var21 = var1.getCategoryLabelToolTip((java.lang.Comparable)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test380"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    var0.resizeRange((-7.0d));
    org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
    java.lang.Class var7 = null;
    org.jfree.data.time.Day var8 = new org.jfree.data.time.Day();
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    java.text.DateFormat var11 = var9.getDateFormatOverride();
    var9.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var15 = var9.getLabelFont();
    org.jfree.data.general.Dataset var16 = null;
    org.jfree.data.general.DatasetChangeEvent var17 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var9, var16);
    int var18 = var8.compareTo((java.lang.Object)var9);
    java.util.Date var19 = var8.getStart();
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    var20.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var25 = var24.getRange();
    var20.setRangeWithMargins(var25);
    java.util.TimeZone var27 = var20.getTimeZone();
    org.jfree.data.time.RegularTimePeriod var28 = org.jfree.data.time.RegularTimePeriod.createInstance(var7, var19, var27);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    org.jfree.chart.axis.TickUnitSource var31 = null;
    var29.setStandardTickUnits(var31);
    boolean var33 = var29.isNegativeArrowVisible();
    org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var35 = var34.getRange();
    var34.setVerticalTickLabels(false);
    org.jfree.data.Range var38 = var34.getDefaultAutoRange();
    var34.setAutoRangeMinimumSize(4.0d);
    org.jfree.chart.axis.DateTickUnit var41 = var34.getTickUnit();
    java.util.Date var42 = var29.calculateHighestVisibleTickValue(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRange(var19, var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test381"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleInsets var16 = var15.getAxisOffset();
    double var18 = var16.calculateBottomInset(4.0d);
    double var20 = var16.calculateRightOutset(0.0d);
    double var22 = var16.calculateTopOutset(110.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 4.0d);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test382"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Shape var2 = var0.getLeftArrow();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    var3.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var3.setRangeWithMargins(var8);
    var0.setRangeWithMargins(var8, true, true);
    java.util.Date var13 = var0.getMinimumDate();
    var0.setAutoRangeMinimumSize(1.05d, false);
    var0.setInverted(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test383"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    double var19 = var7.getRight();
    double var21 = var7.calculateRightOutset((-1.0d));
    org.jfree.chart.util.UnitType var22 = var7.getUnitType();
    org.jfree.chart.util.UnitType var23 = var7.getUnitType();
    org.jfree.chart.util.RectangleInsets var28 = new org.jfree.chart.util.RectangleInsets(var23, 8.0d, (-12.0d), 3.0d, (-6.0d));
    java.lang.String var29 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "UnitType.ABSOLUTE"+ "'", var29.equals("UnitType.ABSOLUTE"));

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test384"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    boolean var5 = var0.getDrawSharedDomainAxis();
    double var6 = var0.getRangeCrosshairValue();
    org.jfree.data.xy.XYDataset var7 = null;
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    java.awt.Paint var10 = var8.getTickLabelPaint();
    java.awt.Paint var11 = var8.getTickLabelPaint();
    var8.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var14.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    var14.setRangeWithMargins(var19);
    org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
    org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot(var7, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.axis.ValueAxis)var14, var21);
    java.awt.Paint var23 = var22.getDomainZeroBaselinePaint();
    var0.setDomainGridlinePaint(var23);
    org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
    var26.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var28 = null;
    var26.setFixedRangeAxisSpace(var28, false);
    boolean var31 = var26.isRangeZoomable();
    var26.setWeight((-1));
    java.awt.Paint var34 = var26.getNoDataMessagePaint();
    org.jfree.chart.axis.AxisLocation var35 = var26.getDomainAxisLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxisLocation((-1), var35, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test385"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    int var1 = var0.getWeight();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    java.awt.Shape var5 = var3.getLeftArrow();
    var3.setLabelAngle(0.0d);
    var0.setRangeAxis(255, (org.jfree.chart.axis.ValueAxis)var3);
    java.awt.Paint[] var9 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var10 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var11 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    var12.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var16 = var15.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.util.RectangleInsets var19 = var17.getLabelInsets();
    double var21 = var19.trimWidth((-1.0d));
    double var23 = var19.trimHeight((-6.0d));
    boolean var24 = var16.equals((java.lang.Object)var19);
    var12.setInsets(var19, true);
    java.awt.Stroke var27 = var12.getRangeCrosshairStroke();
    java.awt.Stroke[] var28 = new java.awt.Stroke[] { var27};
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    java.awt.Paint var31 = var29.getTickLabelPaint();
    double var32 = var29.getLowerMargin();
    java.awt.Shape var33 = var29.getLeftArrow();
    java.awt.Stroke var34 = var29.getTickMarkStroke();
    java.awt.Stroke[] var35 = new java.awt.Stroke[] { var34};
    java.awt.Shape[] var36 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var37 = new org.jfree.chart.plot.DefaultDrawingSupplier(var9, var10, var11, var28, var35, var36);
    java.awt.Stroke var38 = var37.getNextStroke();
    java.awt.Paint var39 = var37.getNextFillPaint();
    java.awt.Stroke var40 = var37.getNextStroke();
    var0.setDomainGridlineStroke(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test386() {}
//   public void test386() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test386"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     var1.configure();
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     java.text.DateFormat var11 = var9.getDateFormatOverride();
//     var9.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var15 = var9.getStandardTickUnits();
//     var9.setLabelURL("");
//     java.awt.Font var18 = var9.getTickLabelFont();
//     var1.setTickLabelFont((java.lang.Comparable)(byte)100, var18);
//     org.jfree.data.time.Day var21 = new org.jfree.data.time.Day();
//     long var22 = var21.getSerialIndex();
//     long var23 = var21.getSerialIndex();
//     java.util.Date var24 = var21.getEnd();
//     org.jfree.data.xy.XYDataset var25 = null;
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     java.awt.Paint var28 = var26.getTickLabelPaint();
//     java.awt.Paint var29 = var26.getTickLabelPaint();
//     var26.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var32.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     var32.setRangeWithMargins(var37);
//     org.jfree.chart.renderer.xy.XYItemRenderer var39 = null;
//     org.jfree.chart.plot.XYPlot var40 = new org.jfree.chart.plot.XYPlot(var25, (org.jfree.chart.axis.ValueAxis)var26, (org.jfree.chart.axis.ValueAxis)var32, var39);
//     org.jfree.chart.plot.PlotRenderingInfo var42 = null;
//     org.jfree.chart.plot.CategoryPlot var43 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     var44.clearRangeAxes();
//     boolean var46 = var44.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var48 = var44.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var49 = var44.getParent();
//     org.jfree.chart.axis.AxisLocation var51 = var44.getDomainAxisLocation((-668));
//     var43.setRangeAxisLocation(var51);
//     org.jfree.chart.axis.AxisSpace var53 = null;
//     var43.setFixedDomainAxisSpace(var53, true);
//     org.jfree.chart.plot.PlotRenderingInfo var57 = null;
//     java.awt.geom.Rectangle2D var58 = null;
//     org.jfree.chart.util.RectangleAnchor var59 = null;
//     java.awt.geom.Point2D var60 = org.jfree.chart.util.RectangleAnchor.coordinates(var58, var59);
//     var43.zoomDomainAxes(9.223372036854776E18d, var57, var60);
//     var40.zoomRangeAxes((-9.223372036854776E18d), var42, var60);
//     int var63 = var21.compareTo((java.lang.Object)var42);
//     org.jfree.data.category.CategoryDataset var64 = null;
//     java.awt.geom.Rectangle2D var66 = null;
//     org.jfree.data.xy.XYDataset var67 = null;
//     org.jfree.chart.axis.DateAxis var68 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var69 = var68.getRange();
//     java.awt.Paint var70 = var68.getTickLabelPaint();
//     java.awt.Paint var71 = var68.getTickLabelPaint();
//     var68.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var74 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var75 = var74.getRange();
//     var74.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var78 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var79 = var78.getRange();
//     var74.setRangeWithMargins(var79);
//     org.jfree.chart.renderer.xy.XYItemRenderer var81 = null;
//     org.jfree.chart.plot.XYPlot var82 = new org.jfree.chart.plot.XYPlot(var67, (org.jfree.chart.axis.ValueAxis)var68, (org.jfree.chart.axis.ValueAxis)var74, var81);
//     org.jfree.chart.renderer.xy.XYItemRenderer var84 = null;
//     var82.setRenderer(0, var84);
//     float var86 = var82.getForegroundAlpha();
//     org.jfree.chart.util.RectangleEdge var87 = var82.getRangeAxisEdge();
//     double var88 = var1.getCategorySeriesMiddle((java.lang.Comparable)(byte)10, (java.lang.Comparable)var21, var64, 0.0d, var66, var87);
// 
//   }

  public void test387() {}
//   public void test387() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test387"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     boolean var17 = var15.isDomainGridlinesVisible();
//     boolean var18 = var7.equals((java.lang.Object)var15);
//     org.jfree.chart.axis.CategoryAxis var20 = new org.jfree.chart.axis.CategoryAxis("");
//     var20.configure();
//     float var22 = var20.getMaximumCategoryLabelWidthRatio();
//     var20.setCategoryMargin(9.223372036854776E18d);
//     var20.setLowerMargin((-6.0d));
//     int var27 = var15.getDomainAxisIndex(var20);
//     java.awt.Paint[] var28 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var29 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var30 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
//     var31.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var34 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var35 = var34.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     org.jfree.chart.util.RectangleInsets var38 = var36.getLabelInsets();
//     double var40 = var38.trimWidth((-1.0d));
//     double var42 = var38.trimHeight((-6.0d));
//     boolean var43 = var35.equals((java.lang.Object)var38);
//     var31.setInsets(var38, true);
//     java.awt.Stroke var46 = var31.getRangeCrosshairStroke();
//     java.awt.Stroke[] var47 = new java.awt.Stroke[] { var46};
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var49 = var48.getRange();
//     java.awt.Paint var50 = var48.getTickLabelPaint();
//     double var51 = var48.getLowerMargin();
//     java.awt.Shape var52 = var48.getLeftArrow();
//     java.awt.Stroke var53 = var48.getTickMarkStroke();
//     java.awt.Stroke[] var54 = new java.awt.Stroke[] { var53};
//     java.awt.Shape[] var55 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var56 = new org.jfree.chart.plot.DefaultDrawingSupplier(var28, var29, var30, var47, var54, var55);
//     java.awt.Stroke var57 = var56.getNextStroke();
//     var15.setRangeGridlineStroke(var57);
//     
//     // Checks the contract:  equals-hashcode on var0 and var31
//     assertTrue("Contract failed: equals-hashcode on var0 and var31", var0.equals(var31) ? var0.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var0
//     assertTrue("Contract failed: equals-hashcode on var31 and var0", var31.equals(var0) ? var31.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var34
//     assertTrue("Contract failed: equals-hashcode on var3 and var34", var3.equals(var34) ? var3.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var3
//     assertTrue("Contract failed: equals-hashcode on var34 and var3", var34.equals(var3) ? var34.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test388() {}
//   public void test388() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test388"); }
// 
// 
//     java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Color var3 = java.awt.Color.getColor("", 100);
//     int var4 = var3.getRed();
//     int var5 = var3.getAlpha();
//     float[] var9 = new float[] { 100.0f, 100.0f, 0.0f};
//     float[] var10 = var3.getColorComponents(var9);
//     java.awt.Paint[] var11 = new java.awt.Paint[] { var3};
//     java.awt.Paint[] var12 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var13 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var14 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var18 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var19 = var18.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
//     double var24 = var22.trimWidth((-1.0d));
//     double var26 = var22.trimHeight((-6.0d));
//     boolean var27 = var19.equals((java.lang.Object)var22);
//     var15.setInsets(var22, true);
//     java.awt.Stroke var30 = var15.getRangeCrosshairStroke();
//     java.awt.Stroke[] var31 = new java.awt.Stroke[] { var30};
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     java.awt.Paint var34 = var32.getTickLabelPaint();
//     double var35 = var32.getLowerMargin();
//     java.awt.Shape var36 = var32.getLeftArrow();
//     java.awt.Stroke var37 = var32.getTickMarkStroke();
//     java.awt.Stroke[] var38 = new java.awt.Stroke[] { var37};
//     java.awt.Shape[] var39 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var40 = new org.jfree.chart.plot.DefaultDrawingSupplier(var12, var13, var14, var31, var38, var39);
//     java.awt.Paint[] var41 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var42 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     java.awt.Paint[] var43 = org.jfree.chart.ChartColor.createDefaultPaintArray();
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     var44.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var48 = var47.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var50 = var49.getRange();
//     org.jfree.chart.util.RectangleInsets var51 = var49.getLabelInsets();
//     double var53 = var51.trimWidth((-1.0d));
//     double var55 = var51.trimHeight((-6.0d));
//     boolean var56 = var48.equals((java.lang.Object)var51);
//     var44.setInsets(var51, true);
//     java.awt.Stroke var59 = var44.getRangeCrosshairStroke();
//     java.awt.Stroke[] var60 = new java.awt.Stroke[] { var59};
//     org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var62 = var61.getRange();
//     java.awt.Paint var63 = var61.getTickLabelPaint();
//     double var64 = var61.getLowerMargin();
//     java.awt.Shape var65 = var61.getLeftArrow();
//     java.awt.Stroke var66 = var61.getTickMarkStroke();
//     java.awt.Stroke[] var67 = new java.awt.Stroke[] { var66};
//     java.awt.Shape[] var68 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var69 = new org.jfree.chart.plot.DefaultDrawingSupplier(var41, var42, var43, var60, var67, var68);
//     java.awt.Shape[] var70 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
//     org.jfree.chart.plot.DefaultDrawingSupplier var71 = new org.jfree.chart.plot.DefaultDrawingSupplier(var0, var11, var38, var67, var70);
//     
//     // Checks the contract:  equals-hashcode on var15 and var44
//     assertTrue("Contract failed: equals-hashcode on var15 and var44", var15.equals(var44) ? var15.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var15
//     assertTrue("Contract failed: equals-hashcode on var44 and var15", var44.equals(var15) ? var44.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var47
//     assertTrue("Contract failed: equals-hashcode on var18 and var47", var18.equals(var47) ? var18.hashCode() == var47.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var18
//     assertTrue("Contract failed: equals-hashcode on var47 and var18", var47.equals(var18) ? var47.hashCode() == var18.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var40 and var69
//     assertTrue("Contract failed: equals-hashcode on var40 and var69", var40.equals(var69) ? var40.hashCode() == var69.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var69 and var40
//     assertTrue("Contract failed: equals-hashcode on var69 and var40", var69.equals(var40) ? var69.hashCode() == var40.hashCode() : true);
// 
//   }

  public void test389() {}
//   public void test389() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test389"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     var0.setRangeGridlinesVisible(false);
//     org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis("");
//     var6.configure();
//     float var8 = var6.getMaximumCategoryLabelWidthRatio();
//     var6.setCategoryLabelPositionOffset(0);
//     var6.setMaximumCategoryLabelLines(0);
//     int var13 = var0.getDomainAxisIndex(var6);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var15 = null;
//     var0.setRenderer(2, var15);
//     org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.Layer var20 = null;
//     boolean var22 = var0.removeDomainMarker((-203), (org.jfree.chart.plot.Marker)var19, var20, false);
//     org.jfree.chart.plot.ValueMarker var24 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var25 = var24.getLabelOffsetType();
//     var0.addRangeMarker((org.jfree.chart.plot.Marker)var24);
//     
//     // Checks the contract:  equals-hashcode on var19 and var24
//     assertTrue("Contract failed: equals-hashcode on var19 and var24", var19.equals(var24) ? var19.hashCode() == var24.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var24 and var19
//     assertTrue("Contract failed: equals-hashcode on var24 and var19", var24.equals(var19) ? var24.hashCode() == var19.hashCode() : true);
// 
//   }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test390"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var18 = var15.getDomainAxisLocation();
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Color var30 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var31 = null;
    java.awt.Rectangle var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    java.awt.geom.AffineTransform var34 = null;
    java.awt.RenderingHints var35 = null;
    java.awt.PaintContext var36 = var30.createContext(var31, var32, var33, var34, var35);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    org.jfree.chart.axis.TickUnitSource var40 = null;
    var38.setStandardTickUnits(var40);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    java.awt.Paint var44 = var42.getTickLabelPaint();
    var38.setTickLabelPaint(var44);
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var48 = var47.getAlpha();
    java.awt.Stroke var49 = var47.getStroke();
    org.jfree.chart.plot.CategoryMarker var50 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var44, var49);
    java.awt.Color var54 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var55 = null;
    java.awt.Rectangle var56 = null;
    java.awt.geom.Rectangle2D var57 = null;
    java.awt.geom.AffineTransform var58 = null;
    java.awt.RenderingHints var59 = null;
    java.awt.PaintContext var60 = var54.createContext(var55, var56, var57, var58, var59);
    org.jfree.chart.axis.DateAxis var61 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var62 = var61.getRange();
    java.awt.Paint var63 = var61.getTickLabelPaint();
    double var64 = var61.getLowerMargin();
    java.awt.Shape var65 = var61.getLeftArrow();
    java.awt.Stroke var66 = var61.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var68 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var30, var49, (java.awt.Paint)var54, var66, 0.8f);
    boolean var69 = var20.removeRangeMarker((org.jfree.chart.plot.Marker)var68);
    org.jfree.chart.plot.Marker var70 = null;
    boolean var71 = var20.removeDomainMarker(var70);
    org.jfree.chart.axis.AxisLocation var72 = var20.getDomainAxisLocation();
    var15.setDomainAxisLocation(0, var72, false);
    org.jfree.chart.axis.ValueAxis var76 = var15.getDomainAxis(12);
    org.jfree.chart.axis.ValueAxis var78 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setRangeAxis((-16777116), var78);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test391() {}
//   public void test391() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test391"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
//     org.jfree.chart.axis.ValueAxis var30 = var15.getRangeAxis(2014);
//     int var31 = var15.getWeight();
//     org.jfree.data.xy.XYDataset var32 = null;
//     org.jfree.chart.axis.DateAxis var33 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var34 = var33.getRange();
//     java.awt.Paint var35 = var33.getTickLabelPaint();
//     java.awt.Paint var36 = var33.getTickLabelPaint();
//     var33.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var40 = var39.getRange();
//     var39.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var39.setRangeWithMargins(var44);
//     org.jfree.chart.renderer.xy.XYItemRenderer var46 = null;
//     org.jfree.chart.plot.XYPlot var47 = new org.jfree.chart.plot.XYPlot(var32, (org.jfree.chart.axis.ValueAxis)var33, (org.jfree.chart.axis.ValueAxis)var39, var46);
//     org.jfree.chart.util.RectangleEdge var49 = var47.getDomainAxisEdge(12);
//     var47.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var52 = new org.jfree.chart.plot.CategoryPlot();
//     var52.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var54 = var52.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var56 = null;
//     var52.setRenderer(255, var56);
//     java.awt.Stroke var58 = var52.getOutlineStroke();
//     var47.setRangeZeroBaselineStroke(var58);
//     org.jfree.chart.axis.ValueAxis var60 = null;
//     int var61 = var47.getRangeAxisIndex(var60);
//     org.jfree.chart.plot.ValueMarker var63 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var64 = var63.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var65 = null;
//     var63.notifyListeners(var65);
//     org.jfree.chart.plot.CategoryPlot var67 = new org.jfree.chart.plot.CategoryPlot();
//     var67.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var70 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var71 = var70.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var72 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var73 = var72.getRange();
//     org.jfree.chart.util.RectangleInsets var74 = var72.getLabelInsets();
//     double var76 = var74.trimWidth((-1.0d));
//     double var78 = var74.trimHeight((-6.0d));
//     boolean var79 = var71.equals((java.lang.Object)var74);
//     var67.setInsets(var74, true);
//     java.awt.Stroke var82 = var67.getRangeCrosshairStroke();
//     var63.setOutlineStroke(var82);
//     var47.setRangeGridlineStroke(var82);
//     org.jfree.chart.util.RectangleEdge var85 = var47.getRangeAxisEdge();
//     boolean var86 = var15.equals((java.lang.Object)var85);
//     
//     // Checks the contract:  equals-hashcode on var15 and var47
//     assertTrue("Contract failed: equals-hashcode on var15 and var47", var15.equals(var47) ? var15.hashCode() == var47.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var15
//     assertTrue("Contract failed: equals-hashcode on var47 and var15", var47.equals(var15) ? var47.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var52
//     assertTrue("Contract failed: equals-hashcode on var20 and var52", var20.equals(var52) ? var20.hashCode() == var52.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var52 and var20
//     assertTrue("Contract failed: equals-hashcode on var52 and var20", var52.equals(var20) ? var52.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test392"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    var15.setBackgroundImageAlpha(0.0f);
    java.util.List var31 = var15.getAnnotations();
    org.jfree.chart.axis.AxisSpace var32 = null;
    var15.setFixedDomainAxisSpace(var32, false);
    var15.clearRangeMarkers(100);
    org.jfree.data.xy.XYDataset var37 = null;
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    java.awt.Paint var40 = var38.getTickLabelPaint();
    java.awt.Paint var41 = var38.getTickLabelPaint();
    var38.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var44 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var45 = var44.getRange();
    var44.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var49 = var48.getRange();
    var44.setRangeWithMargins(var49);
    org.jfree.chart.renderer.xy.XYItemRenderer var51 = null;
    org.jfree.chart.plot.XYPlot var52 = new org.jfree.chart.plot.XYPlot(var37, (org.jfree.chart.axis.ValueAxis)var38, (org.jfree.chart.axis.ValueAxis)var44, var51);
    org.jfree.chart.util.RectangleEdge var54 = var52.getDomainAxisEdge(12);
    org.jfree.chart.axis.AxisLocation var55 = var52.getDomainAxisLocation();
    org.jfree.chart.plot.ValueMarker var57 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var58 = var57.getAlpha();
    java.awt.Stroke var59 = var57.getStroke();
    var52.setRangeCrosshairStroke(var59);
    var15.setRangeGridlineStroke(var59);
    var15.setDomainCrosshairValue(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test393() {}
//   public void test393() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test393"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     var0.setOutlineVisible(false);
//     org.jfree.chart.plot.Plot var17 = var0.getRootPlot();
//     var0.mapDatasetToRangeAxis(1, 100);
//     org.jfree.data.xy.XYDataset var21 = null;
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     java.awt.Paint var25 = var22.getTickLabelPaint();
//     var22.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var28.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var28.setRangeWithMargins(var33);
//     org.jfree.chart.renderer.xy.XYItemRenderer var35 = null;
//     org.jfree.chart.plot.XYPlot var36 = new org.jfree.chart.plot.XYPlot(var21, (org.jfree.chart.axis.ValueAxis)var22, (org.jfree.chart.axis.ValueAxis)var28, var35);
//     org.jfree.chart.util.RectangleEdge var38 = var36.getDomainAxisEdge(12);
//     org.jfree.chart.axis.AxisLocation var39 = var36.getDomainAxisLocation();
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     var41.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var43 = var41.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var45 = null;
//     var41.setRenderer(255, var45);
//     java.awt.Color var51 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var52 = null;
//     java.awt.Rectangle var53 = null;
//     java.awt.geom.Rectangle2D var54 = null;
//     java.awt.geom.AffineTransform var55 = null;
//     java.awt.RenderingHints var56 = null;
//     java.awt.PaintContext var57 = var51.createContext(var52, var53, var54, var55, var56);
//     org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var60 = var59.getRange();
//     org.jfree.chart.axis.TickUnitSource var61 = null;
//     var59.setStandardTickUnits(var61);
//     org.jfree.chart.axis.DateAxis var63 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var64 = var63.getRange();
//     java.awt.Paint var65 = var63.getTickLabelPaint();
//     var59.setTickLabelPaint(var65);
//     org.jfree.chart.plot.ValueMarker var68 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var69 = var68.getAlpha();
//     java.awt.Stroke var70 = var68.getStroke();
//     org.jfree.chart.plot.CategoryMarker var71 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var65, var70);
//     java.awt.Color var75 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var76 = null;
//     java.awt.Rectangle var77 = null;
//     java.awt.geom.Rectangle2D var78 = null;
//     java.awt.geom.AffineTransform var79 = null;
//     java.awt.RenderingHints var80 = null;
//     java.awt.PaintContext var81 = var75.createContext(var76, var77, var78, var79, var80);
//     org.jfree.chart.axis.DateAxis var82 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var83 = var82.getRange();
//     java.awt.Paint var84 = var82.getTickLabelPaint();
//     double var85 = var82.getLowerMargin();
//     java.awt.Shape var86 = var82.getLeftArrow();
//     java.awt.Stroke var87 = var82.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var89 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var51, var70, (java.awt.Paint)var75, var87, 0.8f);
//     boolean var90 = var41.removeRangeMarker((org.jfree.chart.plot.Marker)var89);
//     org.jfree.chart.plot.Marker var91 = null;
//     boolean var92 = var41.removeDomainMarker(var91);
//     org.jfree.chart.axis.AxisLocation var93 = var41.getDomainAxisLocation();
//     var36.setDomainAxisLocation(0, var93, false);
//     java.lang.String var96 = var93.toString();
//     var0.setDomainAxisLocation(var93);
//     
//     // Checks the contract:  equals-hashcode on var3 and var68
//     assertTrue("Contract failed: equals-hashcode on var3 and var68", var3.equals(var68) ? var3.hashCode() == var68.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var68 and var3
//     assertTrue("Contract failed: equals-hashcode on var68 and var3", var68.equals(var3) ? var68.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test394"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Day var3 = new org.jfree.data.time.Day(0, (-1), 253);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test395() {}
//   public void test395() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test395"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     java.text.DateFormat var2 = var0.getDateFormatOverride();
//     var0.resizeRange((-1.0d), (-1.0d));
//     org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
//     var0.setLabelURL("");
//     boolean var9 = var0.isNegativeArrowVisible();
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
//     var12.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var14 = null;
//     var12.setFixedRangeAxisSpace(var14, false);
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     var17.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var19 = var17.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var21 = null;
//     var17.setRenderer(255, var21);
//     var17.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var24 = var17.getAxisOffset();
//     var12.setInsets(var24);
//     org.jfree.chart.renderer.category.CategoryItemRenderer var26 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer[] var27 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var26};
//     var12.setRenderers(var27);
//     org.jfree.chart.util.RectangleEdge var29 = var12.getRangeAxisEdge();
//     double var30 = var0.java2DToValue(0.0d, var11, var29);
// 
//   }

  public void test396() {}
//   public void test396() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test396"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var7 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var8 = null;
//     java.awt.Rectangle var9 = null;
//     java.awt.geom.Rectangle2D var10 = null;
//     java.awt.geom.AffineTransform var11 = null;
//     java.awt.RenderingHints var12 = null;
//     java.awt.PaintContext var13 = var7.createContext(var8, var9, var10, var11, var12);
//     var2.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var7);
//     var2.setTickMarkInsideLength(2.0f);
//     org.jfree.chart.axis.ValueAxis var17 = null;
//     org.jfree.chart.renderer.category.CategoryItemRenderer var18 = null;
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot(var0, var2, var17, var18);
//     double var20 = var19.getAnchorValue();
//     java.awt.Graphics2D var21 = null;
//     java.awt.geom.Rectangle2D var22 = null;
//     var19.drawBackground(var21, var22);
// 
//   }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test397"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.data.xy.XYDataset var28 = null;
    int var29 = var15.indexOf(var28);
    float var30 = var15.getBackgroundImageAlpha();
    org.jfree.chart.util.Layer var31 = null;
    java.util.Collection var32 = var15.getDomainMarkers(var31);
    var15.clearRangeMarkers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test398"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("");
    var2.configure();
    float var4 = var2.getMaximumCategoryLabelWidthRatio();
    var2.setTickMarkOutsideLength(100.0f);
    org.jfree.chart.axis.CategoryAxis var9 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var12 = null;
    org.jfree.chart.util.RectangleEdge var13 = null;
    double var14 = var9.getCategoryMiddle(0, (-1), var12, var13);
    var9.configure();
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.text.DateFormat var19 = var17.getDateFormatOverride();
    var17.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var23 = var17.getStandardTickUnits();
    var17.setLabelURL("");
    java.awt.Font var26 = var17.getTickLabelFont();
    var9.setTickLabelFont((java.lang.Comparable)(byte)100, var26);
    var2.setTickLabelFont((java.lang.Comparable)2.0d, var26);
    var2.addCategoryLabelToolTip((java.lang.Comparable)(short)100, "");
    org.jfree.chart.axis.CategoryAnchor var32 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.data.xy.XYDataset var36 = null;
    org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var38 = var37.getRange();
    java.awt.Paint var39 = var37.getTickLabelPaint();
    java.awt.Paint var40 = var37.getTickLabelPaint();
    var37.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var44 = var43.getRange();
    var43.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var48 = var47.getRange();
    var43.setRangeWithMargins(var48);
    org.jfree.chart.renderer.xy.XYItemRenderer var50 = null;
    org.jfree.chart.plot.XYPlot var51 = new org.jfree.chart.plot.XYPlot(var36, (org.jfree.chart.axis.ValueAxis)var37, (org.jfree.chart.axis.ValueAxis)var43, var50);
    org.jfree.chart.util.RectangleEdge var53 = var51.getDomainAxisEdge(12);
    double var54 = var2.getCategoryJava2DCoordinate(var32, 10, (-16777116), var35, var53);
    org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var56 = var55.getRange();
    var55.setRange(0.0d, 100.0d);
    var55.setLowerBound((-6.0d));
    var55.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var64 = var55.getPlot();
    java.awt.Shape var65 = var55.getDownArrow();
    boolean var66 = var55.isPositiveArrowVisible();
    var55.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var69 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var70 = var69.getRange();
    java.text.DateFormat var71 = var69.getDateFormatOverride();
    var69.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var75 = var69.getLabelFont();
    org.jfree.data.general.Dataset var76 = null;
    org.jfree.data.general.DatasetChangeEvent var77 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var69, var76);
    org.jfree.chart.axis.Timeline var78 = var69.getTimeline();
    var55.setTimeline(var78);
    var55.setFixedDimension((-9.223372036854776E18d));
    org.jfree.chart.renderer.category.CategoryItemRenderer var82 = null;
    org.jfree.chart.plot.CategoryPlot var83 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var55, var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test399() {}
//   public void test399() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test399"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setCategoryLabelPositionOffset(0);
//     var1.setCategoryMargin(1.0d);
//     java.lang.String var8 = var1.getLabelURL();
//     boolean var9 = var1.isTickLabelsVisible();
//     java.awt.geom.Rectangle2D var12 = null;
//     org.jfree.data.xy.XYDataset var13 = null;
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var15 = var14.getRange();
//     java.awt.Paint var16 = var14.getTickLabelPaint();
//     java.awt.Paint var17 = var14.getTickLabelPaint();
//     var14.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     var20.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var25 = var24.getRange();
//     var20.setRangeWithMargins(var25);
//     org.jfree.chart.renderer.xy.XYItemRenderer var27 = null;
//     org.jfree.chart.plot.XYPlot var28 = new org.jfree.chart.plot.XYPlot(var13, (org.jfree.chart.axis.ValueAxis)var14, (org.jfree.chart.axis.ValueAxis)var20, var27);
//     org.jfree.chart.util.RectangleEdge var30 = var28.getDomainAxisEdge(12);
//     double var31 = var1.getCategoryEnd((-203), (-16777216), var12, var30);
// 
//   }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test400"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
    java.lang.Object var2 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test401"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    double var19 = var7.getRight();
    double var21 = var7.calculateRightOutset((-1.0d));
    org.jfree.chart.util.UnitType var22 = var7.getUnitType();
    org.jfree.chart.util.RectangleInsets var27 = new org.jfree.chart.util.RectangleInsets(var22, (-10.0d), (-12.0d), (-10.0d), 9.223372036854776E18d);
    double var29 = var27.calculateRightInset(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 9.223372036854776E18d);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test402"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
    var15.setRangeAxis((org.jfree.chart.axis.ValueAxis)var20);
    org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
    var25.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var27 = var25.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var29 = null;
    var25.setRenderer(255, var29);
    java.awt.Stroke var31 = var25.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var32 = var25.getDataset();
    java.awt.Paint var33 = var25.getNoDataMessagePaint();
    org.jfree.chart.util.Layer var35 = null;
    java.util.Collection var36 = var25.getDomainMarkers(1, var35);
    org.jfree.chart.axis.AxisLocation var37 = var25.getRangeAxisLocation();
    var15.setRangeAxisLocation(10, var37);
    org.jfree.chart.plot.IntervalMarker var42 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.util.GradientPaintTransformer var43 = var42.getGradientPaintTransformer();
    org.jfree.chart.util.Layer var44 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addDomainMarker((-668), (org.jfree.chart.plot.Marker)var42, var44, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test403() {}
//   public void test403() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test403"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     var1.clearCategoryLabelToolTips();
//     org.jfree.chart.axis.CategoryLabelPositions var17 = var1.getCategoryLabelPositions();
//     java.awt.Paint var18 = var1.getTickLabelPaint();
//     var1.setUpperMargin(10.0d);
//     var1.configure();
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.data.xy.XYDataset var25 = null;
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     java.awt.Paint var28 = var26.getTickLabelPaint();
//     java.awt.Paint var29 = var26.getTickLabelPaint();
//     var26.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     var32.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     var32.setRangeWithMargins(var37);
//     org.jfree.chart.renderer.xy.XYItemRenderer var39 = null;
//     org.jfree.chart.plot.XYPlot var40 = new org.jfree.chart.plot.XYPlot(var25, (org.jfree.chart.axis.ValueAxis)var26, (org.jfree.chart.axis.ValueAxis)var32, var39);
//     org.jfree.chart.renderer.xy.XYItemRenderer var42 = null;
//     var40.setRenderer(0, var42);
//     org.jfree.data.xy.XYDataset var44 = null;
//     var40.setDataset(var44);
//     org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var48 = var47.getAlpha();
//     java.awt.Stroke var49 = var47.getStroke();
//     var40.setDomainZeroBaselineStroke(var49);
//     org.jfree.chart.axis.ValueAxis var52 = var40.getRangeAxisForDataset(0);
//     org.jfree.chart.util.Layer var53 = null;
//     java.util.Collection var54 = var40.getDomainMarkers(var53);
//     org.jfree.chart.util.RectangleEdge var55 = var40.getDomainAxisEdge();
//     double var56 = var1.getCategoryMiddle((-1), 2, var24, var55);
// 
//   }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test404"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.chart.event.PlotChangeEvent var7 = null;
    var0.notifyListeners(var7);
    org.jfree.chart.axis.CategoryAxis var9 = var0.getDomainAxis();
    float var10 = var0.getForegroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0f);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test405"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    java.awt.Stroke var21 = var15.getDomainGridlineStroke();
    org.jfree.chart.axis.AxisSpace var22 = null;
    var15.setFixedRangeAxisSpace(var22, false);
    java.awt.Paint var25 = var15.getDomainGridlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test406"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 2.0f, 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test407() {}
//   public void test407() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test407"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     java.text.NumberFormat var3 = null;
//     var1.setNumberFormatOverride(var3);
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var9 = var7.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var11 = null;
//     var7.setRenderer(255, var11);
//     var7.clearRangeMarkers();
//     org.jfree.chart.util.RectangleEdge var14 = var7.getDomainAxisEdge();
//     double var15 = var1.java2DToValue(0.0d, var6, var14);
// 
//   }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test408"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.util.RectangleInsets var4 = var1.getLabelInsets();
    boolean var5 = var1.getAutoRangeStickyZero();
    boolean var6 = var1.getAutoRangeStickyZero();
    org.jfree.data.RangeType var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setRangeType(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test409"); }


    org.jfree.data.time.Day var1 = org.jfree.data.time.Day.parseDay("20-December-2014");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test410"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     var0.setRangeGridlinesVisible(false);
//     org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var11 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var12 = null;
//     java.awt.Rectangle var13 = null;
//     java.awt.geom.Rectangle2D var14 = null;
//     java.awt.geom.AffineTransform var15 = null;
//     java.awt.RenderingHints var16 = null;
//     java.awt.PaintContext var17 = var11.createContext(var12, var13, var14, var15, var16);
//     var6.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var11);
//     var6.removeCategoryLabelToolTip((java.lang.Comparable)100L);
//     java.lang.String var22 = var6.getCategoryLabelToolTip((java.lang.Comparable)10L);
//     org.jfree.chart.axis.CategoryAxis[] var23 = new org.jfree.chart.axis.CategoryAxis[] { var6};
//     var0.setDomainAxes(var23);
//     org.jfree.chart.plot.PlotRenderingInfo var27 = null;
//     var0.handleClick(0, 1, var27);
// 
//   }

  public void test411() {}
//   public void test411() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test411"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setRange(0.0d, 100.0d);
//     var0.setLowerBound((-6.0d));
//     var0.setLabelURL("hi!");
//     org.jfree.chart.plot.Plot var9 = var0.getPlot();
//     java.awt.Shape var10 = var0.getDownArrow();
//     boolean var11 = var0.isPositiveArrowVisible();
//     var0.setLabelAngle(0.0d);
//     var0.setRangeWithMargins((-12.0d), (-6.0d));
//     java.awt.Graphics2D var17 = null;
//     org.jfree.chart.axis.AxisState var18 = null;
//     java.awt.geom.Rectangle2D var19 = null;
//     org.jfree.chart.axis.CategoryAxis var21 = new org.jfree.chart.axis.CategoryAxis("");
//     var21.configure();
//     float var23 = var21.getMaximumCategoryLabelWidthRatio();
//     var21.setCategoryLabelPositionOffset(0);
//     var21.setMaximumCategoryLabelLines(0);
//     java.lang.String var28 = var21.getLabelToolTip();
//     java.awt.Paint var30 = var21.getTickLabelPaint((java.lang.Comparable)100.0d);
//     org.jfree.chart.plot.Plot var31 = var21.getPlot();
//     org.jfree.chart.axis.CategoryAnchor var32 = null;
//     java.awt.geom.Rectangle2D var35 = null;
//     org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot();
//     var36.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var38 = null;
//     var36.setFixedRangeAxisSpace(var38, false);
//     boolean var41 = var36.isRangeZoomable();
//     var36.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var45 = var36.getDomainAxisEdge(0);
//     double var46 = var21.getCategoryJava2DCoordinate(var32, (-203), 10, var35, var45);
//     java.util.List var47 = var0.refreshTicks(var17, var18, var19, var45);
// 
//   }

  public void test412() {}
//   public void test412() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test412"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     java.awt.Graphics2D var28 = null;
//     java.awt.geom.Rectangle2D var29 = null;
//     java.util.List var30 = null;
//     var15.drawDomainTickBands(var28, var29, var30);
//     org.jfree.chart.plot.PlotRenderingInfo var34 = null;
//     var15.handleClick((-1), 253, var34);
// 
//   }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test413"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
    var15.clearAnnotations();
    java.awt.Graphics2D var29 = null;
    java.awt.geom.Rectangle2D var30 = null;
    org.jfree.data.xy.XYDataset var31 = null;
    org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var33 = var32.getRange();
    java.awt.Paint var34 = var32.getTickLabelPaint();
    java.awt.Paint var35 = var32.getTickLabelPaint();
    var32.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    var38.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var43 = var42.getRange();
    var38.setRangeWithMargins(var43);
    org.jfree.chart.renderer.xy.XYItemRenderer var45 = null;
    org.jfree.chart.plot.XYPlot var46 = new org.jfree.chart.plot.XYPlot(var31, (org.jfree.chart.axis.ValueAxis)var32, (org.jfree.chart.axis.ValueAxis)var38, var45);
    org.jfree.chart.util.RectangleEdge var48 = var46.getDomainAxisEdge(12);
    var46.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    var51.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var53 = var51.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var55 = null;
    var51.setRenderer(255, var55);
    java.awt.Stroke var57 = var51.getOutlineStroke();
    var46.setRangeZeroBaselineStroke(var57);
    org.jfree.chart.LegendItemCollection var59 = var46.getLegendItems();
    var46.setBackgroundImageAlpha(0.0f);
    java.util.List var62 = var46.getAnnotations();
    var15.drawRangeTickBands(var29, var30, var62);
    var15.setBackgroundAlpha((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test414"); }


    java.util.TimeZone var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis("", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test415"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getDomainGridlinePaint();
    org.jfree.chart.util.RectangleInsets var29 = var0.getAxisOffset();
    org.jfree.chart.plot.IntervalMarker var32 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var32.setStartValue(0.0d);
    double var35 = var32.getStartValue();
    java.awt.Paint var36 = var32.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var37 = var32.getGradientPaintTransformer();
    java.awt.Color var40 = java.awt.Color.getColor("", 100);
    java.awt.image.ColorModel var41 = null;
    java.awt.Rectangle var42 = null;
    java.awt.geom.Rectangle2D var43 = null;
    java.awt.geom.AffineTransform var44 = null;
    java.awt.RenderingHints var45 = null;
    java.awt.PaintContext var46 = var40.createContext(var41, var42, var43, var44, var45);
    java.awt.image.ColorModel var47 = null;
    java.awt.Rectangle var48 = null;
    java.awt.geom.Rectangle2D var49 = null;
    java.awt.geom.AffineTransform var50 = null;
    java.awt.RenderingHints var51 = null;
    java.awt.PaintContext var52 = var40.createContext(var47, var48, var49, var50, var51);
    var32.setLabelPaint((java.awt.Paint)var40);
    var0.setDomainZeroBaselinePaint((java.awt.Paint)var40);
    org.jfree.chart.axis.AxisLocation var55 = var0.getRangeAxisLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test416"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.axis.DateAxis var3 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var4 = var3.getRange();
    org.jfree.chart.axis.TickUnitSource var5 = null;
    var3.setStandardTickUnits(var5);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    java.awt.Paint var9 = var7.getTickLabelPaint();
    var3.setTickLabelPaint(var9);
    var0.setDomainGridlinePaint(var9);
    org.jfree.chart.axis.AxisLocation var13 = var0.getRangeAxisLocation((-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test417"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.plot.PlotRenderingInfo var17 = null;
//     org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     var19.clearRangeAxes();
//     boolean var21 = var19.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var23 = var19.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var24 = var19.getParent();
//     org.jfree.chart.axis.AxisLocation var26 = var19.getDomainAxisLocation((-668));
//     var18.setRangeAxisLocation(var26);
//     org.jfree.chart.axis.AxisSpace var28 = null;
//     var18.setFixedDomainAxisSpace(var28, true);
//     org.jfree.chart.plot.PlotRenderingInfo var32 = null;
//     java.awt.geom.Rectangle2D var33 = null;
//     org.jfree.chart.util.RectangleAnchor var34 = null;
//     java.awt.geom.Point2D var35 = org.jfree.chart.util.RectangleAnchor.coordinates(var33, var34);
//     var18.zoomDomainAxes(9.223372036854776E18d, var32, var35);
//     var15.zoomRangeAxes((-9.223372036854776E18d), var17, var35);
//     org.jfree.chart.plot.CategoryMarker var40 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     org.jfree.chart.util.Layer var41 = null;
//     boolean var42 = var15.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var40, var41);
//     float var43 = var15.getBackgroundAlpha();
//     var15.clearRangeMarkers();
//     org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot();
//     var45.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var47 = var45.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var49 = null;
//     var45.setRenderer(255, var49);
//     java.awt.Color var55 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var56 = null;
//     java.awt.Rectangle var57 = null;
//     java.awt.geom.Rectangle2D var58 = null;
//     java.awt.geom.AffineTransform var59 = null;
//     java.awt.RenderingHints var60 = null;
//     java.awt.PaintContext var61 = var55.createContext(var56, var57, var58, var59, var60);
//     org.jfree.chart.axis.DateAxis var63 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var64 = var63.getRange();
//     org.jfree.chart.axis.TickUnitSource var65 = null;
//     var63.setStandardTickUnits(var65);
//     org.jfree.chart.axis.DateAxis var67 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var68 = var67.getRange();
//     java.awt.Paint var69 = var67.getTickLabelPaint();
//     var63.setTickLabelPaint(var69);
//     org.jfree.chart.plot.ValueMarker var72 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var73 = var72.getAlpha();
//     java.awt.Stroke var74 = var72.getStroke();
//     org.jfree.chart.plot.CategoryMarker var75 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var69, var74);
//     java.awt.Color var79 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var80 = null;
//     java.awt.Rectangle var81 = null;
//     java.awt.geom.Rectangle2D var82 = null;
//     java.awt.geom.AffineTransform var83 = null;
//     java.awt.RenderingHints var84 = null;
//     java.awt.PaintContext var85 = var79.createContext(var80, var81, var82, var83, var84);
//     org.jfree.chart.axis.DateAxis var86 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var87 = var86.getRange();
//     java.awt.Paint var88 = var86.getTickLabelPaint();
//     double var89 = var86.getLowerMargin();
//     java.awt.Shape var90 = var86.getLeftArrow();
//     java.awt.Stroke var91 = var86.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var93 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var55, var74, (java.awt.Paint)var79, var91, 0.8f);
//     boolean var94 = var45.removeRangeMarker((org.jfree.chart.plot.Marker)var93);
//     org.jfree.chart.util.RectangleInsets var95 = var93.getLabelOffset();
//     var15.setInsets(var95, false);
//     
//     // Checks the contract:  equals-hashcode on var19 and var45
//     assertTrue("Contract failed: equals-hashcode on var19 and var45", var19.equals(var45) ? var19.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var45 and var19
//     assertTrue("Contract failed: equals-hashcode on var45 and var19", var45.equals(var19) ? var45.hashCode() == var19.hashCode() : true);
// 
//   }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test418"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    java.awt.Image var14 = null;
    var7.setBackgroundImage(var14);
    org.jfree.chart.axis.AxisLocation var17 = var7.getDomainAxisLocation((-668));
    org.jfree.chart.axis.AxisLocation var19 = var7.getDomainAxisLocation(255);
    var7.setDomainGridlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test419() {}
//   public void test419() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test419"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var0 = new org.jfree.chart.axis.NumberAxis();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var3 = null;
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     var5.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var7 = null;
//     var5.setFixedRangeAxisSpace(var7, false);
//     boolean var10 = var5.isRangeZoomable();
//     var5.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var14 = var5.getDomainAxisEdge(0);
//     org.jfree.chart.plot.PlotRenderingInfo var15 = null;
//     org.jfree.chart.axis.AxisState var16 = var0.draw(var1, 100.0d, var3, var4, var14, var15);
// 
//   }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test420"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
//     org.jfree.chart.util.Layer var7 = null;
//     boolean var8 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var6, var7);
//     org.jfree.chart.plot.IntervalMarker var11 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var11.setStartValue(0.0d);
//     double var14 = var11.getStartValue();
//     java.awt.Paint var15 = var11.getPaint();
//     org.jfree.chart.util.GradientPaintTransformer var16 = var11.getGradientPaintTransformer();
//     var11.setEndValue(9.223372036854776E18d);
//     java.awt.Color var21 = java.awt.Color.getColor("", 100);
//     int var22 = var21.getRed();
//     int var23 = var21.getAlpha();
//     var11.setPaint((java.awt.Paint)var21);
//     var6.setPaint((java.awt.Paint)var21);
//     org.jfree.chart.util.GradientPaintTransformer var26 = var6.getGradientPaintTransformer();
//     org.jfree.chart.util.ObjectList var28 = new org.jfree.chart.util.ObjectList(1);
//     var28.clear();
//     org.jfree.data.xy.XYDataset var30 = null;
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var32 = var31.getRange();
//     java.awt.Paint var33 = var31.getTickLabelPaint();
//     java.awt.Paint var34 = var31.getTickLabelPaint();
//     var31.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var38 = var37.getRange();
//     var37.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     var37.setRangeWithMargins(var42);
//     org.jfree.chart.renderer.xy.XYItemRenderer var44 = null;
//     org.jfree.chart.plot.XYPlot var45 = new org.jfree.chart.plot.XYPlot(var30, (org.jfree.chart.axis.ValueAxis)var31, (org.jfree.chart.axis.ValueAxis)var37, var44);
//     org.jfree.chart.util.RectangleEdge var47 = var45.getDomainAxisEdge(12);
//     var45.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot();
//     var50.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var52 = var50.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var54 = null;
//     var50.setRenderer(255, var54);
//     java.awt.Stroke var56 = var50.getOutlineStroke();
//     var45.setRangeZeroBaselineStroke(var56);
//     org.jfree.chart.LegendItemCollection var58 = var45.getLegendItems();
//     var45.setBackgroundImageAlpha(0.0f);
//     java.util.List var61 = var45.getAnnotations();
//     var45.configureRangeAxes();
//     int var63 = var28.indexOf((java.lang.Object)var45);
//     java.lang.Object var65 = var28.get((-668));
//     boolean var66 = var6.equals((java.lang.Object)(-668));
//     
//     // Checks the contract:  equals-hashcode on var0 and var50
//     assertTrue("Contract failed: equals-hashcode on var0 and var50", var0.equals(var50) ? var0.hashCode() == var50.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var50 and var0
//     assertTrue("Contract failed: equals-hashcode on var50 and var0", var50.equals(var0) ? var50.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test421"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var2 = null;
    var0.setFixedRangeAxisSpace(var2, false);
    boolean var5 = var0.isRangeZoomable();
    var0.setWeight((-1));
    org.jfree.chart.util.RectangleEdge var9 = var0.getDomainAxisEdge(0);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    var10.clearRangeAxes();
    boolean var12 = var10.isDomainGridlinesVisible();
    java.awt.Stroke var13 = var10.getRangeGridlineStroke();
    org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var16 = var15.getAlpha();
    java.awt.Stroke var17 = var15.getStroke();
    org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var19 = var18.getRange();
    java.text.DateFormat var20 = var18.getDateFormatOverride();
    var18.resizeRange((-1.0d), (-1.0d));
    boolean var24 = var15.equals((java.lang.Object)var18);
    org.jfree.chart.util.RectangleInsets var25 = var15.getLabelOffset();
    java.awt.Paint var26 = var15.getOutlinePaint();
    java.awt.Paint var27 = var15.getPaint();
    java.lang.String var28 = var15.getLabel();
    org.jfree.chart.util.Layer var29 = null;
    var10.addRangeMarker((org.jfree.chart.plot.Marker)var15, var29);
    org.jfree.chart.util.Layer var31 = null;
    boolean var32 = var0.removeDomainMarker((org.jfree.chart.plot.Marker)var15, var31);
    java.awt.Stroke var33 = var0.getDomainGridlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test422"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var12 = var7.getParent();
//     var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     boolean var14 = var7.isRangeZoomable();
//     org.jfree.data.xy.XYDataset var15 = null;
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     java.awt.Paint var18 = var16.getTickLabelPaint();
//     java.awt.Paint var19 = var16.getTickLabelPaint();
//     var16.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     var22.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var27 = var26.getRange();
//     var22.setRangeWithMargins(var27);
//     org.jfree.chart.renderer.xy.XYItemRenderer var29 = null;
//     org.jfree.chart.plot.XYPlot var30 = new org.jfree.chart.plot.XYPlot(var15, (org.jfree.chart.axis.ValueAxis)var16, (org.jfree.chart.axis.ValueAxis)var22, var29);
//     org.jfree.chart.util.RectangleEdge var32 = var30.getDomainAxisEdge(12);
//     org.jfree.chart.axis.AxisLocation var33 = var30.getDomainAxisLocation();
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var37 = var35.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var39 = null;
//     var35.setRenderer(255, var39);
//     java.awt.Color var45 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var46 = null;
//     java.awt.Rectangle var47 = null;
//     java.awt.geom.Rectangle2D var48 = null;
//     java.awt.geom.AffineTransform var49 = null;
//     java.awt.RenderingHints var50 = null;
//     java.awt.PaintContext var51 = var45.createContext(var46, var47, var48, var49, var50);
//     org.jfree.chart.axis.DateAxis var53 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var54 = var53.getRange();
//     org.jfree.chart.axis.TickUnitSource var55 = null;
//     var53.setStandardTickUnits(var55);
//     org.jfree.chart.axis.DateAxis var57 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var58 = var57.getRange();
//     java.awt.Paint var59 = var57.getTickLabelPaint();
//     var53.setTickLabelPaint(var59);
//     org.jfree.chart.plot.ValueMarker var62 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var63 = var62.getAlpha();
//     java.awt.Stroke var64 = var62.getStroke();
//     org.jfree.chart.plot.CategoryMarker var65 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var59, var64);
//     java.awt.Color var69 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var70 = null;
//     java.awt.Rectangle var71 = null;
//     java.awt.geom.Rectangle2D var72 = null;
//     java.awt.geom.AffineTransform var73 = null;
//     java.awt.RenderingHints var74 = null;
//     java.awt.PaintContext var75 = var69.createContext(var70, var71, var72, var73, var74);
//     org.jfree.chart.axis.DateAxis var76 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var77 = var76.getRange();
//     java.awt.Paint var78 = var76.getTickLabelPaint();
//     double var79 = var76.getLowerMargin();
//     java.awt.Shape var80 = var76.getLeftArrow();
//     java.awt.Stroke var81 = var76.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var83 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var45, var64, (java.awt.Paint)var69, var81, 0.8f);
//     boolean var84 = var35.removeRangeMarker((org.jfree.chart.plot.Marker)var83);
//     org.jfree.chart.plot.Marker var85 = null;
//     boolean var86 = var35.removeDomainMarker(var85);
//     org.jfree.chart.axis.AxisLocation var87 = var35.getDomainAxisLocation();
//     var30.setDomainAxisLocation(0, var87, false);
//     var7.setDomainAxisLocation(var87);
//     
//     // Checks the contract:  equals-hashcode on var7 and var35
//     assertTrue("Contract failed: equals-hashcode on var7 and var35", var7.equals(var35) ? var7.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var7
//     assertTrue("Contract failed: equals-hashcode on var35 and var7", var35.equals(var7) ? var35.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test423"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.axis.CategoryAxis var20 = new org.jfree.chart.axis.CategoryAxis("");
    var20.configure();
    float var22 = var20.getMaximumCategoryLabelWidthRatio();
    var20.setCategoryMargin(9.223372036854776E18d);
    var20.setLowerMargin((-6.0d));
    int var27 = var15.getDomainAxisIndex(var20);
    var15.setRangeCrosshairLockedOnData(true);
    org.jfree.chart.event.AxisChangeEvent var30 = null;
    var15.axisChanged(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));

  }

  public void test424() {}
//   public void test424() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test424"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setTickMarkOutsideLength(100.0f);
//     var1.setUpperMargin((-7.0d));
//     java.lang.String var8 = var1.getLabelToolTip();
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.data.xy.XYDataset var12 = null;
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     java.awt.Paint var15 = var13.getTickLabelPaint();
//     java.awt.Paint var16 = var13.getTickLabelPaint();
//     var13.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     var19.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     var19.setRangeWithMargins(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     org.jfree.chart.plot.XYPlot var27 = new org.jfree.chart.plot.XYPlot(var12, (org.jfree.chart.axis.ValueAxis)var13, (org.jfree.chart.axis.ValueAxis)var19, var26);
//     org.jfree.chart.util.RectangleEdge var29 = var27.getDomainAxisEdge(12);
//     double var30 = var1.getCategoryEnd((-16646144), (-16646144), var11, var29);
// 
//   }

  public void test425() {}
//   public void test425() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test425"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     var1.clearRangeAxes();
//     boolean var3 = var1.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var5 = var1.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var6 = var1.getParent();
//     org.jfree.chart.axis.AxisLocation var8 = var1.getDomainAxisLocation((-668));
//     var0.setRangeAxisLocation(var8);
//     org.jfree.chart.axis.AxisSpace var10 = null;
//     var0.setFixedDomainAxisSpace(var10, true);
//     org.jfree.chart.plot.PlotRenderingInfo var14 = null;
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     var15.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var17 = var15.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var19 = null;
//     var15.setRenderer(255, var19);
//     var15.clearRangeMarkers();
//     org.jfree.chart.util.RectangleInsets var22 = var15.getAxisOffset();
//     java.awt.Paint var23 = var15.getDomainGridlinePaint();
//     org.jfree.chart.plot.PlotRenderingInfo var25 = null;
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     var26.clearRangeAxes();
//     boolean var28 = var26.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var30 = null;
//     java.awt.geom.Rectangle2D var31 = null;
//     org.jfree.chart.util.RectangleAnchor var32 = null;
//     java.awt.geom.Point2D var33 = org.jfree.chart.util.RectangleAnchor.coordinates(var31, var32);
//     var26.zoomRangeAxes(0.05d, var30, var33);
//     var15.zoomDomainAxes((-6.0d), var25, var33);
//     var0.zoomDomainAxes((-10.0d), var14, var33, false);
//     
//     // Checks the contract:  equals-hashcode on var1 and var26
//     assertTrue("Contract failed: equals-hashcode on var1 and var26", var1.equals(var26) ? var1.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var1
//     assertTrue("Contract failed: equals-hashcode on var26 and var1", var26.equals(var1) ? var26.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test426() {}
//   public void test426() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test426"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
//     var15.setBackgroundImageAlpha(0.0f);
//     java.util.List var31 = var15.getAnnotations();
//     org.jfree.chart.axis.DateAxis var32 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var33 = var32.getRange();
//     java.awt.Paint var34 = var32.getTickLabelPaint();
//     java.awt.Paint var35 = var32.getTickLabelPaint();
//     java.awt.geom.Rectangle2D var37 = null;
//     org.jfree.chart.util.RectangleEdge var38 = null;
//     double var39 = var32.java2DToValue((-7.0d), var37, var38);
//     int var40 = var15.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var32);
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     var41.clearRangeAxes();
//     boolean var43 = var41.isDomainGridlinesVisible();
//     org.jfree.data.category.CategoryDataset var44 = var41.getDataset();
//     org.jfree.chart.plot.DatasetRenderingOrder var45 = var41.getDatasetRenderingOrder();
//     var15.setDatasetRenderingOrder(var45);
//     
//     // Checks the contract:  equals-hashcode on var20 and var41
//     assertTrue("Contract failed: equals-hashcode on var20 and var41", var20.equals(var41) ? var20.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var20
//     assertTrue("Contract failed: equals-hashcode on var41 and var20", var41.equals(var20) ? var41.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test427"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    var0.setTickMarkInsideLength(10.0f);
    boolean var7 = var0.isNegativeArrowVisible();
    boolean var9 = var0.isHiddenValue(1419148799999L);
    org.jfree.chart.axis.DateTickUnit var10 = var0.getTickUnit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test428"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Paint var8 = var0.getNoDataMessagePaint();
    org.jfree.chart.plot.ValueMarker var11 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var12 = var11.getAlpha();
    java.awt.Stroke var13 = var11.getStroke();
    org.jfree.chart.util.Layer var14 = null;
    var0.addRangeMarker((-668), (org.jfree.chart.plot.Marker)var11, var14);
    org.jfree.chart.JFreeChart var16 = null;
    org.jfree.chart.event.ChartChangeEvent var18 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    org.jfree.chart.event.ChartChangeEventType var19 = null;
    var18.setType(var19);
    org.jfree.chart.util.ObjectList var21 = new org.jfree.chart.util.ObjectList();
    org.jfree.chart.event.ChartChangeEvent var23 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(short)(-1));
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    int var26 = var21.indexOf((java.lang.Object)var23);
    org.jfree.chart.axis.CategoryAxis var28 = new org.jfree.chart.axis.CategoryAxis("");
    var28.configure();
    float var30 = var28.getMaximumCategoryLabelWidthRatio();
    var28.setTickMarkOutsideLength(100.0f);
    var28.setUpperMargin(0.0d);
    float var35 = var28.getMaximumCategoryLabelWidthRatio();
    org.jfree.chart.JFreeChart var36 = null;
    org.jfree.chart.event.ChartChangeEvent var37 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var35, var36);
    org.jfree.chart.event.ChartChangeEventType var38 = var37.getType();
    var23.setType(var38);
    var18.setType(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.event.ChartChangeEvent var41 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var14, var16, var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var24.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-1]"+ "'", var25.equals("org.jfree.chart.event.ChartChangeEvent[source=-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test429"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.axis.ValueAxis var28 = null;
    int var29 = var15.getRangeAxisIndex(var28);
    org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
    boolean var31 = var15.isDomainGridlinesVisible();
    boolean var32 = var15.isDomainZoomable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setBackgroundImageAlpha(10.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test430() {}
//   public void test430() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test430"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var0.java2DToValue(100.0d, var4, var5);
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.data.xy.XYDataset var9 = null;
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var11 = var10.getRange();
//     java.awt.Paint var12 = var10.getTickLabelPaint();
//     java.awt.Paint var13 = var10.getTickLabelPaint();
//     var10.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var17 = var16.getRange();
//     var16.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     var16.setRangeWithMargins(var21);
//     org.jfree.chart.renderer.xy.XYItemRenderer var23 = null;
//     org.jfree.chart.plot.XYPlot var24 = new org.jfree.chart.plot.XYPlot(var9, (org.jfree.chart.axis.ValueAxis)var10, (org.jfree.chart.axis.ValueAxis)var16, var23);
//     org.jfree.chart.util.RectangleEdge var26 = var24.getDomainAxisEdge(12);
//     double var27 = var0.java2DToValue(112.0d, var8, var26);
// 
//   }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test431"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    var0.setRangeGridlinesVisible(false);
    java.awt.Color var9 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var10 = null;
    java.awt.Rectangle var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    java.awt.geom.AffineTransform var13 = null;
    java.awt.RenderingHints var14 = null;
    java.awt.PaintContext var15 = var9.createContext(var10, var11, var12, var13, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.axis.TickUnitSource var19 = null;
    var17.setStandardTickUnits(var19);
    org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var22 = var21.getRange();
    java.awt.Paint var23 = var21.getTickLabelPaint();
    var17.setTickLabelPaint(var23);
    org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var27 = var26.getAlpha();
    java.awt.Stroke var28 = var26.getStroke();
    org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var23, var28);
    java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var34 = null;
    java.awt.Rectangle var35 = null;
    java.awt.geom.Rectangle2D var36 = null;
    java.awt.geom.AffineTransform var37 = null;
    java.awt.RenderingHints var38 = null;
    java.awt.PaintContext var39 = var33.createContext(var34, var35, var36, var37, var38);
    org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var41 = var40.getRange();
    java.awt.Paint var42 = var40.getTickLabelPaint();
    double var43 = var40.getLowerMargin();
    java.awt.Shape var44 = var40.getLeftArrow();
    java.awt.Stroke var45 = var40.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var47 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var9, var28, (java.awt.Paint)var33, var45, 0.8f);
    var0.setDomainGridlinePaint((java.awt.Paint)var33);
    org.jfree.chart.plot.PlotRenderingInfo var50 = null;
    java.awt.geom.Rectangle2D var51 = null;
    org.jfree.chart.util.RectangleAnchor var52 = null;
    java.awt.geom.Point2D var53 = org.jfree.chart.util.RectangleAnchor.coordinates(var51, var52);
    var0.zoomDomainAxes(9.223372036854776E18d, var50, var53, false);
    boolean var56 = var0.isRangeZoomable();
    org.jfree.chart.LegendItemCollection var57 = var0.getFixedLegendItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test432() {}
//   public void test432() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test432"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var12 = var7.getParent();
//     var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     boolean var14 = var7.isRangeZoomable();
//     org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var22 = null;
//     java.awt.Rectangle var23 = null;
//     java.awt.geom.Rectangle2D var24 = null;
//     java.awt.geom.AffineTransform var25 = null;
//     java.awt.RenderingHints var26 = null;
//     java.awt.PaintContext var27 = var21.createContext(var22, var23, var24, var25, var26);
//     var16.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var21);
//     var16.setTickMarkInsideLength(2.0f);
//     var16.clearCategoryLabelToolTips();
//     java.awt.geom.Rectangle2D var34 = null;
//     org.jfree.chart.util.RectangleEdge var35 = null;
//     double var36 = var16.getCategoryEnd((-1), (-668), var34, var35);
//     var7.setDomainAxis(var16);
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.data.xy.XYDataset var41 = null;
//     org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var43 = var42.getRange();
//     java.awt.Paint var44 = var42.getTickLabelPaint();
//     java.awt.Paint var45 = var42.getTickLabelPaint();
//     var42.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var49 = var48.getRange();
//     var48.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var52 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var53 = var52.getRange();
//     var48.setRangeWithMargins(var53);
//     org.jfree.chart.renderer.xy.XYItemRenderer var55 = null;
//     org.jfree.chart.plot.XYPlot var56 = new org.jfree.chart.plot.XYPlot(var41, (org.jfree.chart.axis.ValueAxis)var42, (org.jfree.chart.axis.ValueAxis)var48, var55);
//     org.jfree.chart.renderer.xy.XYItemRenderer var58 = null;
//     var56.setRenderer(0, var58);
//     org.jfree.data.xy.XYDataset var60 = null;
//     var56.setDataset(var60);
//     org.jfree.chart.util.Layer var62 = null;
//     java.util.Collection var63 = var56.getRangeMarkers(var62);
//     var56.setDomainCrosshairValue((-7.0d));
//     org.jfree.chart.util.RectangleEdge var67 = var56.getRangeAxisEdge(20);
//     double var68 = var16.getCategoryMiddle((-16777116), (-203), var40, var67);
// 
//   }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test433"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(0.0d, 2.0d);
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    var3.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var5 = var3.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var7 = null;
    var3.setRenderer(255, var7);
    var3.clearRangeMarkers();
    var2.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var3);
    org.jfree.chart.util.RectangleInsets var11 = var3.getInsets();
    double var12 = var11.getLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 8.0d);

  }

  public void test434() {}
//   public void test434() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test434"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.geom.Rectangle2D var4 = null;
//     org.jfree.chart.util.RectangleEdge var5 = null;
//     double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     boolean var9 = var7.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var12 = var7.getParent();
//     var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     java.awt.Image var14 = null;
//     var7.setBackgroundImage(var14);
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     var16.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var18 = var16.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var20 = null;
//     var16.setRenderer(255, var20);
//     java.awt.Stroke var22 = var16.getOutlineStroke();
//     org.jfree.data.category.CategoryDataset var23 = var16.getDataset();
//     java.awt.Paint var24 = var16.getNoDataMessagePaint();
//     org.jfree.chart.util.Layer var26 = null;
//     java.util.Collection var27 = var16.getDomainMarkers(1, var26);
//     org.jfree.chart.axis.AxisLocation var28 = var16.getRangeAxisLocation();
//     var7.setDomainAxisLocation(var28, true);
//     org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
//     var31.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var33 = var31.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var35 = null;
//     var31.setRenderer(255, var35);
//     org.jfree.chart.plot.IntervalMarker var40 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     org.jfree.chart.util.Layer var41 = null;
//     var31.addRangeMarker(10, (org.jfree.chart.plot.Marker)var40, var41, true);
//     java.awt.Stroke var44 = var31.getRangeGridlineStroke();
//     var7.setDomainGridlineStroke(var44);
//     
//     // Checks the contract:  equals-hashcode on var16 and var31
//     assertTrue("Contract failed: equals-hashcode on var16 and var31", var16.equals(var31) ? var16.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var16
//     assertTrue("Contract failed: equals-hashcode on var31 and var16", var31.equals(var16) ? var31.hashCode() == var16.hashCode() : true);
// 
//   }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test435"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    org.jfree.data.category.CategoryDataset var15 = null;
    var7.setDataset(1, var15);
    org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis("");
    var19.configure();
    float var21 = var19.getMaximumCategoryLabelWidthRatio();
    var19.setCategoryMargin(9.223372036854776E18d);
    var19.setLowerMargin(0.0d);
    var19.configure();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setDomainAxis((-16646144), var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.0f);

  }

  public void test436() {}
//   public void test436() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test436"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
//     boolean var3 = var0.isAutoRange();
//     var0.setAutoTickUnitSelection(true);
//     java.awt.geom.Rectangle2D var7 = null;
//     org.jfree.data.xy.XYDataset var8 = null;
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var10 = var9.getRange();
//     java.awt.Paint var11 = var9.getTickLabelPaint();
//     java.awt.Paint var12 = var9.getTickLabelPaint();
//     var9.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var16 = var15.getRange();
//     var15.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     var15.setRangeWithMargins(var20);
//     org.jfree.chart.renderer.xy.XYItemRenderer var22 = null;
//     org.jfree.chart.plot.XYPlot var23 = new org.jfree.chart.plot.XYPlot(var8, (org.jfree.chart.axis.ValueAxis)var9, (org.jfree.chart.axis.ValueAxis)var15, var22);
//     org.jfree.chart.util.RectangleEdge var25 = var23.getDomainAxisEdge(12);
//     var23.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
//     var28.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var30 = var28.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var32 = null;
//     var28.setRenderer(255, var32);
//     java.awt.Stroke var34 = var28.getOutlineStroke();
//     var23.setRangeZeroBaselineStroke(var34);
//     org.jfree.chart.axis.ValueAxis var36 = null;
//     int var37 = var23.getRangeAxisIndex(var36);
//     org.jfree.chart.plot.ValueMarker var39 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var40 = var39.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var41 = null;
//     var39.notifyListeners(var41);
//     org.jfree.chart.plot.CategoryPlot var43 = new org.jfree.chart.plot.CategoryPlot();
//     var43.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var47 = var46.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var49 = var48.getRange();
//     org.jfree.chart.util.RectangleInsets var50 = var48.getLabelInsets();
//     double var52 = var50.trimWidth((-1.0d));
//     double var54 = var50.trimHeight((-6.0d));
//     boolean var55 = var47.equals((java.lang.Object)var50);
//     var43.setInsets(var50, true);
//     java.awt.Stroke var58 = var43.getRangeCrosshairStroke();
//     var39.setOutlineStroke(var58);
//     var23.setRangeGridlineStroke(var58);
//     org.jfree.chart.util.RectangleEdge var61 = var23.getRangeAxisEdge();
//     double var62 = var0.valueToJava2D(10.0d, var7, var61);
// 
//   }

  public void test437() {}
//   public void test437() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test437"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var11 = null;
//     java.awt.Rectangle var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     java.awt.geom.AffineTransform var14 = null;
//     java.awt.RenderingHints var15 = null;
//     java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     org.jfree.chart.axis.TickUnitSource var20 = null;
//     var18.setStandardTickUnits(var20);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     var18.setTickLabelPaint(var24);
//     org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var28 = var27.getAlpha();
//     java.awt.Stroke var29 = var27.getStroke();
//     org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
//     java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var35 = null;
//     java.awt.Rectangle var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     java.awt.geom.AffineTransform var38 = null;
//     java.awt.RenderingHints var39 = null;
//     java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.awt.Paint var43 = var41.getTickLabelPaint();
//     double var44 = var41.getLowerMargin();
//     java.awt.Shape var45 = var41.getLeftArrow();
//     java.awt.Stroke var46 = var41.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
//     boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
//     org.jfree.chart.plot.Marker var50 = null;
//     boolean var51 = var0.removeDomainMarker(var50);
//     org.jfree.chart.axis.AxisLocation var52 = var0.getDomainAxisLocation();
//     var0.setWeight(100);
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var56 = var55.getRange();
//     var55.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var60 = var59.getRange();
//     var55.setRangeWithMargins(var60);
//     java.util.TimeZone var62 = var55.getTimeZone();
//     org.jfree.chart.plot.XYPlot var63 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var64 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var65 = var64.getRange();
//     java.text.DateFormat var66 = var64.getDateFormatOverride();
//     var64.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var70 = var64.getLabelFont();
//     org.jfree.data.general.Dataset var71 = null;
//     org.jfree.data.general.DatasetChangeEvent var72 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var64, var71);
//     var63.datasetChanged(var72);
//     boolean var74 = var63.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var76 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var77 = var76.getRange();
//     org.jfree.chart.axis.TickUnitSource var78 = null;
//     var76.setStandardTickUnits(var78);
//     org.jfree.chart.axis.DateAxis var80 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var81 = var80.getRange();
//     java.awt.Paint var82 = var80.getTickLabelPaint();
//     var76.setTickLabelPaint(var82);
//     org.jfree.chart.plot.ValueMarker var85 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var86 = var85.getAlpha();
//     java.awt.Stroke var87 = var85.getStroke();
//     org.jfree.chart.plot.CategoryMarker var88 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var82, var87);
//     var63.setDomainTickBandPaint(var82);
//     java.awt.Paint var90 = var63.getRangeZeroBaselinePaint();
//     java.awt.Paint var91 = var63.getDomainGridlinePaint();
//     org.jfree.chart.util.RectangleInsets var92 = var63.getAxisOffset();
//     var55.setTickLabelInsets(var92);
//     org.jfree.data.Range var94 = var0.getDataRange((org.jfree.chart.axis.ValueAxis)var55);
//     
//     // Checks the contract:  equals-hashcode on var27 and var85
//     assertTrue("Contract failed: equals-hashcode on var27 and var85", var27.equals(var85) ? var27.hashCode() == var85.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var85 and var27
//     assertTrue("Contract failed: equals-hashcode on var85 and var27", var85.equals(var27) ? var85.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var88
//     assertTrue("Contract failed: equals-hashcode on var30 and var88", var30.equals(var88) ? var30.hashCode() == var88.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var88 and var30
//     assertTrue("Contract failed: equals-hashcode on var88 and var30", var88.equals(var30) ? var88.hashCode() == var30.hashCode() : true);
// 
//   }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test438"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.util.RectangleEdge var5 = null;
    double var6 = var1.getCategoryMiddle(0, (-1), var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    boolean var9 = var7.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var11 = var7.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var12 = var7.getParent();
    var1.addChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    boolean var14 = var7.isRangeZoomable();
    java.awt.Color var19 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var20 = null;
    java.awt.Rectangle var21 = null;
    java.awt.geom.Rectangle2D var22 = null;
    java.awt.geom.AffineTransform var23 = null;
    java.awt.RenderingHints var24 = null;
    java.awt.PaintContext var25 = var19.createContext(var20, var21, var22, var23, var24);
    org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var28 = var27.getRange();
    org.jfree.chart.axis.TickUnitSource var29 = null;
    var27.setStandardTickUnits(var29);
    org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var32 = var31.getRange();
    java.awt.Paint var33 = var31.getTickLabelPaint();
    var27.setTickLabelPaint(var33);
    org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var37 = var36.getAlpha();
    java.awt.Stroke var38 = var36.getStroke();
    org.jfree.chart.plot.CategoryMarker var39 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var33, var38);
    java.awt.Color var43 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var44 = null;
    java.awt.Rectangle var45 = null;
    java.awt.geom.Rectangle2D var46 = null;
    java.awt.geom.AffineTransform var47 = null;
    java.awt.RenderingHints var48 = null;
    java.awt.PaintContext var49 = var43.createContext(var44, var45, var46, var47, var48);
    org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var51 = var50.getRange();
    java.awt.Paint var52 = var50.getTickLabelPaint();
    double var53 = var50.getLowerMargin();
    java.awt.Shape var54 = var50.getLeftArrow();
    java.awt.Stroke var55 = var50.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var57 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var19, var38, (java.awt.Paint)var43, var55, 0.8f);
    var7.setDomainGridlineStroke(var55);
    java.awt.Graphics2D var59 = null;
    java.awt.geom.Rectangle2D var60 = null;
    var7.drawBackgroundImage(var59, var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test439"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Paint var8 = var0.getDomainGridlinePaint();
    org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var12.setStartValue(0.0d);
    double var15 = var12.getStartValue();
    java.awt.Paint var16 = var12.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
    var12.setEndValue(9.223372036854776E18d);
    java.lang.Object var20 = var12.clone();
    org.jfree.chart.util.Layer var21 = null;
    var0.addRangeMarker(2014, (org.jfree.chart.plot.Marker)var12, var21);
    float var23 = var12.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test440"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    org.jfree.chart.util.Layer var22 = null;
    java.util.Collection var23 = var15.getDomainMarkers(0, var22);
    org.jfree.chart.axis.ValueAxis var25 = var15.getRangeAxis(0);
    var15.clearRangeAxes();
    org.jfree.chart.renderer.xy.XYItemRenderer var28 = var15.getRenderer(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test441"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.axis.MarkerAxisBand var4 = null;
    var1.setMarkerBand(var4);
    org.jfree.data.Range var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setRangeWithMargins(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test442"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.ChartColor var3 = new org.jfree.chart.ChartColor((-16777216), (-16777216), (-16777116));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test443"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    var0.resizeRange((-1.0d), (-1.0d));
    org.jfree.chart.axis.TickUnitSource var6 = var0.getStandardTickUnits();
    var0.setLabelURL("");
    boolean var9 = var0.isNegativeArrowVisible();
    boolean var10 = var0.isAutoTickUnitSelection();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test444"); }


    java.awt.Color var1 = java.awt.Color.getColor("RectangleAnchor.TOP_LEFT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test445"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    var0.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var7 = var0.getAxisOffset();
    double var9 = var7.calculateLeftInset(110.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4.0d);

  }

  public void test446() {}
//   public void test446() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test446"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.util.Layer var21 = null;
//     java.util.Collection var22 = var15.getRangeMarkers(var21);
//     var15.setDomainCrosshairValue((-7.0d));
//     java.awt.Graphics2D var25 = null;
//     java.awt.geom.Rectangle2D var26 = null;
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var28 = var27.getRenderer();
//     org.jfree.chart.event.PlotChangeListener var29 = null;
//     var27.addChangeListener(var29);
//     org.jfree.data.category.CategoryDataset var32 = var27.getDataset(253);
//     org.jfree.chart.plot.PlotRenderingInfo var34 = null;
//     org.jfree.data.xy.XYDataset var35 = null;
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     java.awt.Paint var38 = var36.getTickLabelPaint();
//     java.awt.Paint var39 = var36.getTickLabelPaint();
//     var36.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var43 = var42.getRange();
//     var42.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var46 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var47 = var46.getRange();
//     var42.setRangeWithMargins(var47);
//     org.jfree.chart.renderer.xy.XYItemRenderer var49 = null;
//     org.jfree.chart.plot.XYPlot var50 = new org.jfree.chart.plot.XYPlot(var35, (org.jfree.chart.axis.ValueAxis)var36, (org.jfree.chart.axis.ValueAxis)var42, var49);
//     org.jfree.chart.renderer.xy.XYItemRenderer var52 = null;
//     var50.setRenderer(0, var52);
//     org.jfree.data.xy.XYDataset var54 = null;
//     var50.setDataset(var54);
//     org.jfree.chart.plot.ValueMarker var57 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var58 = var57.getAlpha();
//     java.awt.Stroke var59 = var57.getStroke();
//     var50.setDomainZeroBaselineStroke(var59);
//     org.jfree.chart.axis.ValueAxis var62 = var50.getRangeAxisForDataset(0);
//     org.jfree.chart.util.Layer var63 = null;
//     java.util.Collection var64 = var50.getDomainMarkers(var63);
//     org.jfree.chart.plot.PlotRenderingInfo var67 = null;
//     java.awt.geom.Rectangle2D var68 = null;
//     org.jfree.chart.util.RectangleAnchor var69 = null;
//     java.awt.geom.Point2D var70 = org.jfree.chart.util.RectangleAnchor.coordinates(var68, var69);
//     var50.zoomDomainAxes((-12.0d), 0.05d, var67, var70);
//     var27.zoomRangeAxes(100.0d, var34, var70, true);
//     org.jfree.chart.plot.PlotState var74 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var75 = null;
//     var15.draw(var25, var26, var70, var74, var75);
// 
//   }

  public void test447() {}
//   public void test447() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test447"); }
// 
// 
//     org.jfree.chart.ChartColor var3 = new org.jfree.chart.ChartColor(2, 0, 12);
//     java.awt.color.ColorSpace var4 = null;
//     java.awt.Color var10 = java.awt.Color.getColor("", 100);
//     int var11 = var10.getRed();
//     int var12 = var10.getAlpha();
//     float[] var16 = new float[] { 100.0f, 100.0f, 0.0f};
//     float[] var17 = var10.getColorComponents(var16);
//     float[] var18 = java.awt.Color.RGBtoHSB(20, 255, 12, var16);
//     float[] var19 = var3.getComponents(var4, var18);
// 
//   }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test448"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.data.category.CategoryDataset var7 = var0.getDataset();
    java.awt.Image var8 = var0.getBackgroundImage();
    java.lang.String var9 = var0.getPlotType();
    int var10 = var0.getDatasetCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Category Plot"+ "'", var9.equals("Category Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test449"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
    int var29 = var0.getIndexOf(var28);
    java.awt.Paint var30 = var0.getRangeTickBandPaint();
    org.jfree.chart.annotations.XYAnnotation var31 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test450() {}
//   public void test450() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test450"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.text.DateFormat var3 = var1.getDateFormatOverride();
//     var1.resizeRange((-1.0d), (-1.0d));
//     java.awt.Font var7 = var1.getLabelFont();
//     org.jfree.data.general.Dataset var8 = null;
//     org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
//     var0.datasetChanged(var9);
//     boolean var11 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     org.jfree.chart.axis.TickUnitSource var15 = null;
//     var13.setStandardTickUnits(var15);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     java.awt.Paint var19 = var17.getTickLabelPaint();
//     var13.setTickLabelPaint(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
//     var0.setDomainTickBandPaint(var19);
//     java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
//     org.jfree.chart.renderer.xy.XYItemRenderer var28 = null;
//     int var29 = var0.getIndexOf(var28);
//     var0.setDomainGridlinesVisible(true);
//     var0.setBackgroundImageAlignment(10);
//     org.jfree.chart.plot.ValueMarker var36 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var37 = var36.getLabelOffsetType();
//     java.awt.Font var38 = var36.getLabelFont();
//     org.jfree.chart.util.Layer var39 = null;
//     var0.addRangeMarker(12, (org.jfree.chart.plot.Marker)var36, var39);
//     
//     // Checks the contract:  equals-hashcode on var22 and var36
//     assertTrue("Contract failed: equals-hashcode on var22 and var36", var22.equals(var36) ? var22.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var22
//     assertTrue("Contract failed: equals-hashcode on var36 and var22", var36.equals(var22) ? var36.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test451() {}
//   public void test451() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test451"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.axis.ValueAxis var27 = var15.getRangeAxisForDataset(0);
//     java.awt.Graphics2D var28 = null;
//     java.awt.geom.Rectangle2D var29 = null;
//     java.util.List var30 = null;
//     var15.drawDomainTickBands(var28, var29, var30);
//     double var32 = var15.getDomainCrosshairValue();
//     org.jfree.chart.plot.PlotRenderingInfo var34 = null;
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     var35.clearRangeAxes();
//     boolean var37 = var35.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var39 = null;
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.chart.util.RectangleAnchor var41 = null;
//     java.awt.geom.Point2D var42 = org.jfree.chart.util.RectangleAnchor.coordinates(var40, var41);
//     var35.zoomRangeAxes(0.05d, var39, var42);
//     var15.zoomRangeAxes(10.0d, var34, var42, true);
// 
//   }

  public void test452() {}
//   public void test452() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test452"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.plot.PlotRenderingInfo var17 = null;
//     org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     var19.clearRangeAxes();
//     boolean var21 = var19.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var23 = var19.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var24 = var19.getParent();
//     org.jfree.chart.axis.AxisLocation var26 = var19.getDomainAxisLocation((-668));
//     var18.setRangeAxisLocation(var26);
//     org.jfree.chart.axis.AxisSpace var28 = null;
//     var18.setFixedDomainAxisSpace(var28, true);
//     org.jfree.chart.plot.PlotRenderingInfo var32 = null;
//     java.awt.geom.Rectangle2D var33 = null;
//     org.jfree.chart.util.RectangleAnchor var34 = null;
//     java.awt.geom.Point2D var35 = org.jfree.chart.util.RectangleAnchor.coordinates(var33, var34);
//     var18.zoomDomainAxes(9.223372036854776E18d, var32, var35);
//     var15.zoomRangeAxes((-9.223372036854776E18d), var17, var35);
//     org.jfree.chart.plot.CategoryMarker var40 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     org.jfree.chart.util.Layer var41 = null;
//     boolean var42 = var15.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var40, var41);
//     float var43 = var15.getBackgroundAlpha();
//     org.jfree.data.xy.XYDataset var44 = null;
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var46 = var45.getRange();
//     java.awt.Paint var47 = var45.getTickLabelPaint();
//     java.awt.Paint var48 = var45.getTickLabelPaint();
//     var45.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var52 = var51.getRange();
//     var51.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var56 = var55.getRange();
//     var51.setRangeWithMargins(var56);
//     org.jfree.chart.renderer.xy.XYItemRenderer var58 = null;
//     org.jfree.chart.plot.XYPlot var59 = new org.jfree.chart.plot.XYPlot(var44, (org.jfree.chart.axis.ValueAxis)var45, (org.jfree.chart.axis.ValueAxis)var51, var58);
//     org.jfree.chart.plot.PlotRenderingInfo var61 = null;
//     org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var63 = new org.jfree.chart.plot.CategoryPlot();
//     var63.clearRangeAxes();
//     boolean var65 = var63.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var67 = var63.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var68 = var63.getParent();
//     org.jfree.chart.axis.AxisLocation var70 = var63.getDomainAxisLocation((-668));
//     var62.setRangeAxisLocation(var70);
//     org.jfree.chart.axis.AxisSpace var72 = null;
//     var62.setFixedDomainAxisSpace(var72, true);
//     org.jfree.chart.plot.PlotRenderingInfo var76 = null;
//     java.awt.geom.Rectangle2D var77 = null;
//     org.jfree.chart.util.RectangleAnchor var78 = null;
//     java.awt.geom.Point2D var79 = org.jfree.chart.util.RectangleAnchor.coordinates(var77, var78);
//     var62.zoomDomainAxes(9.223372036854776E18d, var76, var79);
//     var59.zoomRangeAxes((-9.223372036854776E18d), var61, var79);
//     org.jfree.chart.plot.CategoryMarker var84 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     org.jfree.chart.util.Layer var85 = null;
//     boolean var86 = var59.removeDomainMarker(10, (org.jfree.chart.plot.Marker)var84, var85);
//     java.lang.Object var87 = null;
//     boolean var88 = var84.equals(var87);
//     java.awt.Paint var89 = var84.getLabelPaint();
//     org.jfree.chart.util.Layer var90 = null;
//     boolean var91 = var15.removeRangeMarker((org.jfree.chart.plot.Marker)var84, var90);
//     
//     // Checks the contract:  equals-hashcode on var15 and var59
//     assertTrue("Contract failed: equals-hashcode on var15 and var59", var15.equals(var59) ? var15.hashCode() == var59.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var15
//     assertTrue("Contract failed: equals-hashcode on var59 and var15", var59.equals(var15) ? var59.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var62
//     assertTrue("Contract failed: equals-hashcode on var18 and var62", var18.equals(var62) ? var18.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var19 and var63
//     assertTrue("Contract failed: equals-hashcode on var19 and var63", var19.equals(var63) ? var19.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var62 and var18
//     assertTrue("Contract failed: equals-hashcode on var62 and var18", var62.equals(var18) ? var62.hashCode() == var18.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var19
//     assertTrue("Contract failed: equals-hashcode on var63 and var19", var63.equals(var19) ? var63.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var40 and var84
//     assertTrue("Contract failed: equals-hashcode on var40 and var84", var40.equals(var84) ? var40.hashCode() == var84.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var84 and var40
//     assertTrue("Contract failed: equals-hashcode on var84 and var40", var84.equals(var40) ? var84.hashCode() == var40.hashCode() : true);
// 
//   }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test453"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
    org.jfree.chart.axis.AxisLocation var6 = var0.getRangeAxisLocation(2014);
    org.jfree.chart.util.SortOrder var7 = var0.getRowRenderingOrder();
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var8.clearRangeAxes();
    org.jfree.chart.axis.AxisSpace var10 = null;
    var8.setFixedRangeAxisSpace(var10, false);
    org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
    var13.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var15 = var13.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var17 = null;
    var13.setRenderer(255, var17);
    var13.clearRangeMarkers();
    org.jfree.chart.util.RectangleInsets var20 = var13.getAxisOffset();
    var8.setInsets(var20);
    org.jfree.chart.renderer.category.CategoryItemRenderer var22 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var23 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var22};
    var8.setRenderers(var23);
    boolean var25 = var7.equals((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test454"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
    var1.configure();
    float var3 = var1.getMaximumCategoryLabelWidthRatio();
    var1.setTickMarkOutsideLength(100.0f);
    var1.setUpperMargin((-7.0d));
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var8.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var10 = var8.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var12 = null;
    var8.setRenderer(255, var12);
    java.awt.Color var18 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var19 = null;
    java.awt.Rectangle var20 = null;
    java.awt.geom.Rectangle2D var21 = null;
    java.awt.geom.AffineTransform var22 = null;
    java.awt.RenderingHints var23 = null;
    java.awt.PaintContext var24 = var18.createContext(var19, var20, var21, var22, var23);
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var27 = var26.getRange();
    org.jfree.chart.axis.TickUnitSource var28 = null;
    var26.setStandardTickUnits(var28);
    org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var31 = var30.getRange();
    java.awt.Paint var32 = var30.getTickLabelPaint();
    var26.setTickLabelPaint(var32);
    org.jfree.chart.plot.ValueMarker var35 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var36 = var35.getAlpha();
    java.awt.Stroke var37 = var35.getStroke();
    org.jfree.chart.plot.CategoryMarker var38 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var32, var37);
    java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var43 = null;
    java.awt.Rectangle var44 = null;
    java.awt.geom.Rectangle2D var45 = null;
    java.awt.geom.AffineTransform var46 = null;
    java.awt.RenderingHints var47 = null;
    java.awt.PaintContext var48 = var42.createContext(var43, var44, var45, var46, var47);
    org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var50 = var49.getRange();
    java.awt.Paint var51 = var49.getTickLabelPaint();
    double var52 = var49.getLowerMargin();
    java.awt.Shape var53 = var49.getLeftArrow();
    java.awt.Stroke var54 = var49.getTickMarkStroke();
    org.jfree.chart.plot.ValueMarker var56 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var18, var37, (java.awt.Paint)var42, var54, 0.8f);
    boolean var57 = var8.removeRangeMarker((org.jfree.chart.plot.Marker)var56);
    org.jfree.chart.plot.Marker var58 = null;
    boolean var59 = var8.removeDomainMarker(var58);
    boolean var60 = var1.hasListener((java.util.EventListener)var8);
    org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot();
    var62.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var64 = var62.getFixedLegendItems();
    var62.setRangeGridlinesVisible(false);
    org.jfree.chart.LegendItemCollection var67 = var62.getFixedLegendItems();
    org.jfree.chart.plot.CategoryPlot var68 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryPlot var69 = new org.jfree.chart.plot.CategoryPlot();
    var69.clearRangeAxes();
    boolean var71 = var69.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var73 = var69.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var74 = var69.getParent();
    org.jfree.chart.axis.AxisLocation var76 = var69.getDomainAxisLocation((-668));
    var68.setRangeAxisLocation(var76);
    var62.setDomainAxisLocation(var76, false);
    var8.setDomainAxisLocation(0, var76, false);
    java.awt.Paint var82 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setRangeGridlinePaint(var82);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test455() {}
//   public void test455() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test455"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
//     java.lang.Object var2 = var1.clone();
//     java.text.NumberFormat var3 = var1.getNumberFormatOverride();
//     java.awt.Graphics2D var4 = null;
//     org.jfree.chart.axis.AxisState var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.clearRangeAxes();
//     org.jfree.chart.axis.AxisSpace var9 = null;
//     var7.setFixedRangeAxisSpace(var9, false);
//     boolean var12 = var7.isRangeZoomable();
//     var7.setWeight((-1));
//     org.jfree.chart.util.RectangleEdge var16 = var7.getDomainAxisEdge(0);
//     java.util.List var17 = var1.refreshTicks(var4, var5, var6, var16);
// 
//   }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test456"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setRange(0.0d, 100.0d);
    boolean var5 = var0.isInverted();
    var0.setAutoTickUnitSelection(false);
    var0.setLabel("UnitType.ABSOLUTE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test457"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    java.awt.Stroke var3 = var0.getRangeGridlineStroke();
    var0.clearAnnotations();
    org.jfree.data.xy.XYDataset var5 = null;
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    java.awt.Paint var8 = var6.getTickLabelPaint();
    java.awt.Paint var9 = var6.getTickLabelPaint();
    var6.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var12.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var17 = var16.getRange();
    var12.setRangeWithMargins(var17);
    org.jfree.chart.renderer.xy.XYItemRenderer var19 = null;
    org.jfree.chart.plot.XYPlot var20 = new org.jfree.chart.plot.XYPlot(var5, (org.jfree.chart.axis.ValueAxis)var6, (org.jfree.chart.axis.ValueAxis)var12, var19);
    org.jfree.chart.util.RectangleEdge var22 = var20.getDomainAxisEdge(12);
    var20.setDomainCrosshairLockedOnData(true);
    java.lang.String var25 = var20.getPlotType();
    var20.clearRangeMarkers(12);
    java.awt.Stroke var28 = var20.getDomainCrosshairStroke();
    var0.setRangeCrosshairStroke(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "XY Plot"+ "'", var25.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test458() {}
//   public void test458() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test458"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var6 = var5.getRange();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     double var9 = var7.trimWidth((-1.0d));
//     double var11 = var7.trimHeight((-6.0d));
//     boolean var12 = var4.equals((java.lang.Object)var7);
//     var0.setInsets(var7, true);
//     var0.setOutlineVisible(false);
//     org.jfree.data.xy.XYDataset var17 = null;
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     java.awt.Paint var20 = var18.getTickLabelPaint();
//     java.awt.Paint var21 = var18.getTickLabelPaint();
//     var18.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var24 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var25 = var24.getRange();
//     var24.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var29 = var28.getRange();
//     var24.setRangeWithMargins(var29);
//     org.jfree.chart.renderer.xy.XYItemRenderer var31 = null;
//     org.jfree.chart.plot.XYPlot var32 = new org.jfree.chart.plot.XYPlot(var17, (org.jfree.chart.axis.ValueAxis)var18, (org.jfree.chart.axis.ValueAxis)var24, var31);
//     org.jfree.chart.renderer.xy.XYItemRenderer var34 = null;
//     var32.setRenderer(0, var34);
//     org.jfree.data.xy.XYDataset var36 = null;
//     var32.setDataset(var36);
//     org.jfree.chart.plot.ValueMarker var39 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var40 = var39.getAlpha();
//     java.awt.Stroke var41 = var39.getStroke();
//     var32.setDomainZeroBaselineStroke(var41);
//     java.awt.Stroke var43 = var32.getDomainZeroBaselineStroke();
//     org.jfree.chart.axis.AxisLocation var45 = var32.getDomainAxisLocation((-203));
//     var0.setRangeAxisLocation(var45, false);
//     
//     // Checks the contract:  equals-hashcode on var3 and var39
//     assertTrue("Contract failed: equals-hashcode on var3 and var39", var3.equals(var39) ? var3.hashCode() == var39.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var39 and var3
//     assertTrue("Contract failed: equals-hashcode on var39 and var3", var39.equals(var3) ? var39.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test459"); }


    org.jfree.chart.util.RectangleInsets var4 = new org.jfree.chart.util.RectangleInsets(9.223372036854776E18d, 7.0d, (-4.0d), (-10.0d));

  }

  public void test460() {}
//   public void test460() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test460"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     var1.configure();
//     float var3 = var1.getMaximumCategoryLabelWidthRatio();
//     var1.setCategoryLabelPositionOffset(0);
//     var1.setLabelAngle(0.05d);
//     org.jfree.data.time.Day var8 = new org.jfree.data.time.Day();
//     java.lang.String var9 = var8.toString();
//     org.jfree.data.time.RegularTimePeriod var10 = var8.previous();
//     java.awt.Paint var11 = var1.getTickLabelPaint((java.lang.Comparable)var8);
//     java.lang.Object var12 = var1.clone();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 0.0f);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "20-December-2014"+ "'", var9.equals("20-December-2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
// 
//   }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test461"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.util.RectangleInsets var19 = var17.getLabelInsets();
    double var21 = var19.trimWidth(0.0d);
    org.jfree.chart.plot.ValueMarker var23 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var24 = var23.getAlpha();
    java.awt.Stroke var25 = var23.getStroke();
    float var26 = var23.getAlpha();
    boolean var27 = var19.equals((java.lang.Object)var23);
    java.awt.Paint var28 = var23.getPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setQuadrantPaint(10, var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test462"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    java.awt.Stroke var3 = var0.getRangeGridlineStroke();
    java.awt.Stroke var4 = var0.getDomainGridlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test463() {}
//   public void test463() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test463"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     int var1 = var0.getWeight();
//     boolean var2 = var0.isRangeCrosshairLockedOnData();
//     org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
//     var3.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var6 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var7 = var6.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var9 = var8.getRange();
//     org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
//     double var12 = var10.trimWidth((-1.0d));
//     double var14 = var10.trimHeight((-6.0d));
//     boolean var15 = var7.equals((java.lang.Object)var10);
//     var3.setInsets(var10, true);
//     org.jfree.chart.LegendItemCollection var18 = var3.getLegendItems();
//     var0.setFixedLegendItems(var18);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var21 = var20.getRange();
//     org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
//     double var24 = var22.trimWidth(0.0d);
//     org.jfree.chart.plot.ValueMarker var26 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var27 = var26.getAlpha();
//     java.awt.Stroke var28 = var26.getStroke();
//     float var29 = var26.getAlpha();
//     boolean var30 = var22.equals((java.lang.Object)var26);
//     java.awt.Paint var31 = var26.getPaint();
//     org.jfree.chart.util.Layer var32 = null;
//     var0.addRangeMarker((org.jfree.chart.plot.Marker)var26, var32);
//     
//     // Checks the contract:  equals-hashcode on var6 and var26
//     assertTrue("Contract failed: equals-hashcode on var6 and var26", var6.equals(var26) ? var6.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var6
//     assertTrue("Contract failed: equals-hashcode on var26 and var6", var26.equals(var6) ? var26.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test464() {}
//   public void test464() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test464"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     org.jfree.chart.util.Layer var6 = null;
//     java.util.Collection var7 = var0.getRangeMarkers(var6);
//     org.jfree.chart.axis.ValueAxis var8 = var0.getRangeAxis();
//     org.jfree.data.xy.XYDataset var10 = null;
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     java.awt.Paint var13 = var11.getTickLabelPaint();
//     java.awt.Paint var14 = var11.getTickLabelPaint();
//     var11.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var18 = var17.getRange();
//     var17.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var22 = var21.getRange();
//     var17.setRangeWithMargins(var22);
//     org.jfree.chart.renderer.xy.XYItemRenderer var24 = null;
//     org.jfree.chart.plot.XYPlot var25 = new org.jfree.chart.plot.XYPlot(var10, (org.jfree.chart.axis.ValueAxis)var11, (org.jfree.chart.axis.ValueAxis)var17, var24);
//     org.jfree.chart.util.RectangleEdge var27 = var25.getDomainAxisEdge(12);
//     org.jfree.chart.axis.AxisLocation var28 = var25.getDomainAxisLocation();
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var32 = var30.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var34 = null;
//     var30.setRenderer(255, var34);
//     java.awt.Color var40 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var41 = null;
//     java.awt.Rectangle var42 = null;
//     java.awt.geom.Rectangle2D var43 = null;
//     java.awt.geom.AffineTransform var44 = null;
//     java.awt.RenderingHints var45 = null;
//     java.awt.PaintContext var46 = var40.createContext(var41, var42, var43, var44, var45);
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var49 = var48.getRange();
//     org.jfree.chart.axis.TickUnitSource var50 = null;
//     var48.setStandardTickUnits(var50);
//     org.jfree.chart.axis.DateAxis var52 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var53 = var52.getRange();
//     java.awt.Paint var54 = var52.getTickLabelPaint();
//     var48.setTickLabelPaint(var54);
//     org.jfree.chart.plot.ValueMarker var57 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var58 = var57.getAlpha();
//     java.awt.Stroke var59 = var57.getStroke();
//     org.jfree.chart.plot.CategoryMarker var60 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var54, var59);
//     java.awt.Color var64 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var65 = null;
//     java.awt.Rectangle var66 = null;
//     java.awt.geom.Rectangle2D var67 = null;
//     java.awt.geom.AffineTransform var68 = null;
//     java.awt.RenderingHints var69 = null;
//     java.awt.PaintContext var70 = var64.createContext(var65, var66, var67, var68, var69);
//     org.jfree.chart.axis.DateAxis var71 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var72 = var71.getRange();
//     java.awt.Paint var73 = var71.getTickLabelPaint();
//     double var74 = var71.getLowerMargin();
//     java.awt.Shape var75 = var71.getLeftArrow();
//     java.awt.Stroke var76 = var71.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var78 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var40, var59, (java.awt.Paint)var64, var76, 0.8f);
//     boolean var79 = var30.removeRangeMarker((org.jfree.chart.plot.Marker)var78);
//     org.jfree.chart.plot.Marker var80 = null;
//     boolean var81 = var30.removeDomainMarker(var80);
//     org.jfree.chart.axis.AxisLocation var82 = var30.getDomainAxisLocation();
//     var25.setDomainAxisLocation(0, var82, false);
//     var0.setRangeAxisLocation(10, var82);
//     
//     // Checks the contract:  equals-hashcode on var30 and var0
//     assertTrue("Contract failed: equals-hashcode on var30 and var0", var30.equals(var0) ? var30.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var30 and var0.", var30.equals(var0) == var0.equals(var30));
// 
//   }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test465"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var4 = null;
    java.awt.Rectangle var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    java.awt.geom.AffineTransform var7 = null;
    java.awt.RenderingHints var8 = null;
    java.awt.PaintContext var9 = var3.createContext(var4, var5, var6, var7, var8);
    int var10 = var3.getTransparency();
    int var11 = var3.getBlue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100);

  }

  public void test466() {}
//   public void test466() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test466"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
//     var0.setRenderer(255, var4);
//     java.awt.Color var10 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var11 = null;
//     java.awt.Rectangle var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     java.awt.geom.AffineTransform var14 = null;
//     java.awt.RenderingHints var15 = null;
//     java.awt.PaintContext var16 = var10.createContext(var11, var12, var13, var14, var15);
//     org.jfree.chart.axis.DateAxis var18 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var19 = var18.getRange();
//     org.jfree.chart.axis.TickUnitSource var20 = null;
//     var18.setStandardTickUnits(var20);
//     org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var23 = var22.getRange();
//     java.awt.Paint var24 = var22.getTickLabelPaint();
//     var18.setTickLabelPaint(var24);
//     org.jfree.chart.plot.ValueMarker var27 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var28 = var27.getAlpha();
//     java.awt.Stroke var29 = var27.getStroke();
//     org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var24, var29);
//     java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var35 = null;
//     java.awt.Rectangle var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     java.awt.geom.AffineTransform var38 = null;
//     java.awt.RenderingHints var39 = null;
//     java.awt.PaintContext var40 = var34.createContext(var35, var36, var37, var38, var39);
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var42 = var41.getRange();
//     java.awt.Paint var43 = var41.getTickLabelPaint();
//     double var44 = var41.getLowerMargin();
//     java.awt.Shape var45 = var41.getLeftArrow();
//     java.awt.Stroke var46 = var41.getTickMarkStroke();
//     org.jfree.chart.plot.ValueMarker var48 = new org.jfree.chart.plot.ValueMarker(1.0d, (java.awt.Paint)var10, var29, (java.awt.Paint)var34, var46, 0.8f);
//     boolean var49 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var48);
//     java.awt.Graphics2D var50 = null;
//     java.awt.geom.Rectangle2D var51 = null;
//     var0.drawBackground(var50, var51);
// 
//   }

  public void test467() {}
//   public void test467() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test467"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("");
//     java.awt.Color var6 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
//     java.awt.image.ColorModel var7 = null;
//     java.awt.Rectangle var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.AffineTransform var10 = null;
//     java.awt.RenderingHints var11 = null;
//     java.awt.PaintContext var12 = var6.createContext(var7, var8, var9, var10, var11);
//     var1.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var6);
//     var1.setTickMarkInsideLength(2.0f);
//     var1.clearCategoryLabelToolTips();
//     java.awt.geom.Rectangle2D var19 = null;
//     org.jfree.chart.util.RectangleEdge var20 = null;
//     double var21 = var1.getCategoryEnd((-1), (-668), var19, var20);
//     double var22 = var1.getUpperMargin();
//     java.awt.geom.Rectangle2D var25 = null;
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     var26.clearRangeAxes();
//     boolean var28 = var26.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var30 = var26.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var31 = var26.getParent();
//     org.jfree.chart.plot.IntervalMarker var34 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var34.setStartValue(0.0d);
//     double var37 = var34.getStartValue();
//     java.awt.Paint var38 = var34.getPaint();
//     var26.setOutlinePaint(var38);
//     boolean var40 = var26.isDomainZoomable();
//     org.jfree.chart.util.RectangleEdge var41 = var26.getRangeAxisEdge();
//     double var42 = var1.getCategoryEnd(1, 20, var25, var41);
// 
//   }

  public void test468() {}
//   public void test468() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test468"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     float var23 = var22.getAlpha();
//     java.awt.Stroke var24 = var22.getStroke();
//     var15.setDomainZeroBaselineStroke(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     int var27 = var15.getIndexOf(var26);
//     java.lang.String var28 = var15.getPlotType();
//     org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var30 = var29.getRange();
//     java.awt.Shape var31 = var29.getLeftArrow();
//     var29.setLabelAngle(0.0d);
//     org.jfree.chart.axis.DateAxis var34 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var35 = var34.getRange();
//     var34.setRange(0.0d, 100.0d);
//     var34.setLowerBound((-6.0d));
//     var34.setAutoRangeMinimumSize(9.223372036854776E18d);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var43.setRange(0.0d, 100.0d);
//     boolean var48 = var43.isInverted();
//     org.jfree.chart.axis.Timeline var49 = var43.getTimeline();
//     var34.setTimeline(var49);
//     var29.setTimeline(var49);
//     boolean var53 = var29.isHiddenValue(41993L);
//     var15.setDomainAxis((org.jfree.chart.axis.ValueAxis)var29);
//     org.jfree.chart.plot.CategoryPlot var55 = new org.jfree.chart.plot.CategoryPlot();
//     var55.clearRangeAxes();
//     boolean var57 = var55.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var59 = var55.getRangeAxis((-16646144));
//     org.jfree.chart.axis.AxisLocation var61 = var55.getRangeAxisLocation(2014);
//     var15.setDomainAxisLocation(var61);
//     org.jfree.chart.plot.PlotRenderingInfo var64 = null;
//     org.jfree.chart.plot.CategoryPlot var65 = new org.jfree.chart.plot.CategoryPlot();
//     var65.clearRangeAxes();
//     boolean var67 = var65.isDomainGridlinesVisible();
//     org.jfree.chart.plot.PlotRenderingInfo var69 = null;
//     java.awt.geom.Rectangle2D var70 = null;
//     org.jfree.chart.util.RectangleAnchor var71 = null;
//     java.awt.geom.Point2D var72 = org.jfree.chart.util.RectangleAnchor.coordinates(var70, var71);
//     var65.zoomRangeAxes(0.05d, var69, var72);
//     var15.zoomRangeAxes((-7.0d), var64, var72);
//     
//     // Checks the contract:  equals-hashcode on var55 and var65
//     assertTrue("Contract failed: equals-hashcode on var55 and var65", var55.equals(var65) ? var55.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var55
//     assertTrue("Contract failed: equals-hashcode on var65 and var55", var65.equals(var55) ? var65.hashCode() == var55.hashCode() : true);
// 
//   }

  public void test469() {}
//   public void test469() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test469"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.data.xy.XYDataset var28 = null;
//     int var29 = var15.indexOf(var28);
//     float var30 = var15.getBackgroundImageAlpha();
//     var15.setRangeCrosshairLockedOnData(false);
//     var15.setRangeCrosshairLockedOnData(true);
//     int var35 = var15.getDomainAxisCount();
//     org.jfree.data.xy.XYDataset var36 = null;
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var38 = var37.getRange();
//     java.awt.Paint var39 = var37.getTickLabelPaint();
//     java.awt.Paint var40 = var37.getTickLabelPaint();
//     var37.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var44 = var43.getRange();
//     var43.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var47 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var48 = var47.getRange();
//     var43.setRangeWithMargins(var48);
//     org.jfree.chart.renderer.xy.XYItemRenderer var50 = null;
//     org.jfree.chart.plot.XYPlot var51 = new org.jfree.chart.plot.XYPlot(var36, (org.jfree.chart.axis.ValueAxis)var37, (org.jfree.chart.axis.ValueAxis)var43, var50);
//     org.jfree.chart.util.RectangleEdge var53 = var51.getDomainAxisEdge(12);
//     var51.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
//     var56.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var58 = var56.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var60 = null;
//     var56.setRenderer(255, var60);
//     java.awt.Stroke var62 = var56.getOutlineStroke();
//     var51.setRangeZeroBaselineStroke(var62);
//     org.jfree.chart.axis.ValueAxis var64 = null;
//     int var65 = var51.getRangeAxisIndex(var64);
//     org.jfree.chart.plot.ValueMarker var67 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var68 = var67.getLabelOffsetType();
//     org.jfree.chart.event.MarkerChangeEvent var69 = null;
//     var67.notifyListeners(var69);
//     org.jfree.chart.plot.CategoryPlot var71 = new org.jfree.chart.plot.CategoryPlot();
//     var71.clearRangeAxes();
//     org.jfree.chart.plot.ValueMarker var74 = new org.jfree.chart.plot.ValueMarker(100.0d);
//     org.jfree.chart.util.LengthAdjustmentType var75 = var74.getLabelOffsetType();
//     org.jfree.chart.axis.DateAxis var76 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var77 = var76.getRange();
//     org.jfree.chart.util.RectangleInsets var78 = var76.getLabelInsets();
//     double var80 = var78.trimWidth((-1.0d));
//     double var82 = var78.trimHeight((-6.0d));
//     boolean var83 = var75.equals((java.lang.Object)var78);
//     var71.setInsets(var78, true);
//     java.awt.Stroke var86 = var71.getRangeCrosshairStroke();
//     var67.setOutlineStroke(var86);
//     var51.setRangeGridlineStroke(var86);
//     java.awt.Paint var89 = var51.getRangeCrosshairPaint();
//     boolean var90 = var15.equals((java.lang.Object)var89);
//     
//     // Checks the contract:  equals-hashcode on var15 and var51
//     assertTrue("Contract failed: equals-hashcode on var15 and var51", var15.equals(var51) ? var15.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var15
//     assertTrue("Contract failed: equals-hashcode on var51 and var15", var51.equals(var15) ? var51.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var56
//     assertTrue("Contract failed: equals-hashcode on var20 and var56", var20.equals(var56) ? var20.hashCode() == var56.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var56 and var20
//     assertTrue("Contract failed: equals-hashcode on var56 and var20", var56.equals(var20) ? var56.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test470"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getDomainGridlinePaint();
    org.jfree.chart.axis.AxisSpace var29 = null;
    var0.setFixedDomainAxisSpace(var29);
    org.jfree.chart.axis.AxisLocation var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxisLocation((-1), var32, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test471() {}
//   public void test471() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test471"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
//     var15.setDomainCrosshairLockedOnData(true);
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.clearRangeAxes();
//     org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
//     org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
//     var20.setRenderer(255, var24);
//     java.awt.Stroke var26 = var20.getOutlineStroke();
//     var15.setRangeZeroBaselineStroke(var26);
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     int var29 = var15.getRangeAxisIndex(var28);
//     org.jfree.chart.plot.SeriesRenderingOrder var30 = var15.getSeriesRenderingOrder();
//     var15.setRangeCrosshairValue(0.0d, true);
//     org.jfree.chart.axis.AxisSpace var34 = var15.getFixedRangeAxisSpace();
//     java.awt.Graphics2D var35 = null;
//     java.awt.geom.Rectangle2D var36 = null;
//     var15.drawBackground(var35, var36);
// 
//   }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test472"); }


    java.awt.Color var2 = java.awt.Color.getColor("", 100);
    int var3 = var2.getRed();
    int var4 = var2.getRGB();
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    var5.clearRangeAxes();
    boolean var7 = var5.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var9 = var5.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var10 = var5.getParent();
    org.jfree.chart.plot.IntervalMarker var13 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var13.setStartValue(0.0d);
    double var16 = var13.getStartValue();
    java.awt.Paint var17 = var13.getPaint();
    var5.setOutlinePaint(var17);
    boolean var19 = var2.equals((java.lang.Object)var5);
    java.lang.String var20 = var5.getNoDataMessage();
    java.util.List var21 = var5.getCategories();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-16777116));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test473"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    double var1 = var0.getUpperMargin();
    var0.setFixedDimension(3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.05d);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test474"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    var15.setDomainZeroBaselineStroke(var24);
    java.awt.Stroke var26 = var15.getDomainZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var28 = var15.getDomainAxisLocation((-203));
    java.lang.String var29 = var28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "AxisLocation.TOP_OR_RIGHT"+ "'", var29.equals("AxisLocation.TOP_OR_RIGHT"));

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test475"); }


    org.jfree.data.xy.XYDataset var1 = null;
    org.jfree.chart.axis.DateAxis var2 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var3 = var2.getRange();
    java.awt.Paint var4 = var2.getTickLabelPaint();
    java.awt.Paint var5 = var2.getTickLabelPaint();
    var2.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var9 = var8.getRange();
    var8.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    var8.setRangeWithMargins(var13);
    org.jfree.chart.renderer.xy.XYItemRenderer var15 = null;
    org.jfree.chart.plot.XYPlot var16 = new org.jfree.chart.plot.XYPlot(var1, (org.jfree.chart.axis.ValueAxis)var2, (org.jfree.chart.axis.ValueAxis)var8, var15);
    org.jfree.chart.util.RectangleEdge var18 = var16.getDomainAxisEdge(12);
    var16.setDomainCrosshairLockedOnData(true);
    java.lang.String var21 = var16.getPlotType();
    org.jfree.chart.util.Layer var23 = null;
    java.util.Collection var24 = var16.getDomainMarkers(0, var23);
    boolean var25 = var16.isDomainCrosshairVisible();
    java.awt.Paint var26 = var16.getDomainCrosshairPaint();
    java.awt.Stroke var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.CategoryMarker var28 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)"AxisLocation.BOTTOM_OR_LEFT", var26, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "XY Plot"+ "'", var21.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test476"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    double var2 = var0.getUpperMargin();
    double var3 = var0.getAutoRangeMinimumSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeWithMargins(100.0d, (-12.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2.0d);

  }

  public void test477() {}
//   public void test477() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test477"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     org.jfree.chart.plot.CategoryMarker var3 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     var0.addDomainMarker(var3);
//     var3.setAlpha(0.0f);
//     org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)0L);
//     java.awt.Paint var9 = var8.getLabelPaint();
//     org.jfree.chart.text.TextAnchor var10 = var8.getLabelTextAnchor();
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.util.RectangleInsets var12 = var11.getAxisOffset();
//     var11.setRangeCrosshairValue(1.05d);
//     boolean var15 = var10.equals((java.lang.Object)var11);
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     var17.clearRangeAxes();
//     boolean var19 = var17.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var21 = var17.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var22 = var17.getParent();
//     org.jfree.chart.axis.AxisLocation var24 = var17.getDomainAxisLocation((-668));
//     var16.setRangeAxisLocation(var24);
//     org.jfree.chart.axis.AxisSpace var26 = null;
//     var16.setFixedDomainAxisSpace(var26, true);
//     org.jfree.chart.plot.PlotRenderingInfo var30 = null;
//     java.awt.geom.Rectangle2D var31 = null;
//     org.jfree.chart.util.RectangleAnchor var32 = null;
//     java.awt.geom.Point2D var33 = org.jfree.chart.util.RectangleAnchor.coordinates(var31, var32);
//     var16.zoomDomainAxes(9.223372036854776E18d, var30, var33);
//     boolean var35 = var10.equals((java.lang.Object)9.223372036854776E18d);
//     var3.setLabelTextAnchor(var10);
//     
//     // Checks the contract:  equals-hashcode on var0 and var17
//     assertTrue("Contract failed: equals-hashcode on var0 and var17", var0.equals(var17) ? var0.hashCode() == var17.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test478"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    double var4 = var2.trimWidth((-1.0d));
    double var6 = var2.trimHeight((-6.0d));
    double var8 = var2.trimHeight(0.0d);
    double var10 = var2.trimHeight((-9.223372036854776E18d));
    double var12 = var2.calculateBottomOutset(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-9.223372036854776E18d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3.0d);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test479"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    var15.setRenderer(0, var17);
    org.jfree.data.xy.XYDataset var19 = null;
    var15.setDataset(var19);
    org.jfree.chart.util.Layer var21 = null;
    java.util.Collection var22 = var15.getRangeMarkers(var21);
    var15.setDomainCrosshairValue((-7.0d));
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var15.getRangeMarkers((-16777116), var26);
    var15.setDomainCrosshairValue((-1.0d), true);
    org.jfree.chart.axis.ValueAxis var31 = var15.getDomainAxis();
    org.jfree.chart.annotations.XYAnnotation var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addAnnotation(var32, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test480"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    var20.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var22 = var20.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var24 = null;
    var20.setRenderer(255, var24);
    java.awt.Stroke var26 = var20.getOutlineStroke();
    var15.setRangeZeroBaselineStroke(var26);
    org.jfree.chart.LegendItemCollection var28 = var15.getLegendItems();
    org.jfree.chart.axis.ValueAxis var30 = var15.getRangeAxis(2014);
    int var31 = var15.getWeight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.ValueAxis var33 = var15.getRangeAxisForDataset(20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test481"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.data.category.CategoryDataset var3 = var0.getDataset();
    org.jfree.chart.annotations.CategoryAnnotation var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test482"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.renderer.category.CategoryItemRenderer var1 = var0.getRenderer();
    org.jfree.chart.event.PlotChangeListener var2 = null;
    var0.addChangeListener(var2);
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var5 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var4};
    var0.setRenderers(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var10 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var11 = var10.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    org.jfree.chart.util.RectangleInsets var14 = var12.getLabelInsets();
    double var16 = var14.trimWidth((-1.0d));
    double var18 = var14.trimHeight((-6.0d));
    boolean var19 = var11.equals((java.lang.Object)var14);
    var7.setInsets(var14, true);
    java.awt.Stroke var22 = var7.getRangeCrosshairStroke();
    org.jfree.chart.renderer.category.CategoryItemRenderer var23 = null;
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var24 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var23};
    var7.setRenderers(var24);
    var0.setRenderers(var24);
    org.jfree.chart.util.RectangleEdge var28 = var0.getRangeAxisEdge(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test483"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    var15.setDomainCrosshairLockedOnData(true);
    java.lang.String var20 = var15.getPlotType();
    org.jfree.chart.util.Layer var22 = null;
    java.util.Collection var23 = var15.getDomainMarkers(0, var22);
    org.jfree.chart.axis.ValueAxis var25 = var15.getRangeAxis(0);
    var15.clearRangeAxes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Paint var28 = var15.getQuadrantPaint(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "XY Plot"+ "'", var20.equals("XY Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test484"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var3 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var4 = var3.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    double var9 = var7.trimWidth((-1.0d));
    double var11 = var7.trimHeight((-6.0d));
    boolean var12 = var4.equals((java.lang.Object)var7);
    var0.setInsets(var7, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var15.clearRangeAxes();
    boolean var17 = var15.isDomainGridlinesVisible();
    boolean var18 = var7.equals((java.lang.Object)var15);
    org.jfree.chart.renderer.category.CategoryItemRenderer var19 = var15.getRenderer();
    org.jfree.chart.axis.AxisSpace var20 = null;
    var15.setFixedDomainAxisSpace(var20, false);
    boolean var23 = var15.isDomainGridlinesVisible();
    org.jfree.chart.event.PlotChangeListener var24 = null;
    var15.addChangeListener(var24);
    org.jfree.chart.axis.NumberAxis var27 = new org.jfree.chart.axis.NumberAxis();
    java.text.NumberFormat var28 = null;
    var27.setNumberFormatOverride(var28);
    java.lang.String var30 = var27.getLabelURL();
    java.text.NumberFormat var31 = var27.getNumberFormatOverride();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setRangeAxis((-16777216), (org.jfree.chart.axis.ValueAxis)var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test485() {}
//   public void test485() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test485"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var2 = var1.getRange();
//     java.awt.Paint var3 = var1.getTickLabelPaint();
//     java.awt.Paint var4 = var1.getTickLabelPaint();
//     var1.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var8 = var7.getRange();
//     var7.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var12 = var11.getRange();
//     var7.setRangeWithMargins(var12);
//     org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
//     org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
//     org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
//     var15.setRenderer(0, var17);
//     org.jfree.data.xy.XYDataset var19 = null;
//     var15.setDataset(var19);
//     java.awt.Stroke var21 = var15.getDomainGridlineStroke();
//     org.jfree.chart.axis.AxisSpace var22 = null;
//     var15.setFixedRangeAxisSpace(var22, false);
//     org.jfree.data.xy.XYDataset var25 = null;
//     int var26 = var15.indexOf(var25);
//     org.jfree.chart.plot.PlotRenderingInfo var28 = null;
//     org.jfree.data.xy.XYDataset var29 = null;
//     org.jfree.chart.axis.DateAxis var30 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var31 = var30.getRange();
//     java.awt.Paint var32 = var30.getTickLabelPaint();
//     java.awt.Paint var33 = var30.getTickLabelPaint();
//     var30.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var37 = var36.getRange();
//     var36.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var40 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var41 = var40.getRange();
//     var36.setRangeWithMargins(var41);
//     org.jfree.chart.renderer.xy.XYItemRenderer var43 = null;
//     org.jfree.chart.plot.XYPlot var44 = new org.jfree.chart.plot.XYPlot(var29, (org.jfree.chart.axis.ValueAxis)var30, (org.jfree.chart.axis.ValueAxis)var36, var43);
//     org.jfree.chart.plot.PlotRenderingInfo var46 = null;
//     org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
//     var48.clearRangeAxes();
//     boolean var50 = var48.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var52 = var48.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var53 = var48.getParent();
//     org.jfree.chart.axis.AxisLocation var55 = var48.getDomainAxisLocation((-668));
//     var47.setRangeAxisLocation(var55);
//     org.jfree.chart.axis.AxisSpace var57 = null;
//     var47.setFixedDomainAxisSpace(var57, true);
//     org.jfree.chart.plot.PlotRenderingInfo var61 = null;
//     java.awt.geom.Rectangle2D var62 = null;
//     org.jfree.chart.util.RectangleAnchor var63 = null;
//     java.awt.geom.Point2D var64 = org.jfree.chart.util.RectangleAnchor.coordinates(var62, var63);
//     var47.zoomDomainAxes(9.223372036854776E18d, var61, var64);
//     var44.zoomRangeAxes((-9.223372036854776E18d), var46, var64);
//     var15.zoomRangeAxes(7.0d, var28, var64, true);
// 
//   }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test486"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    var1.setAutoRangeIncludesZero(false);
    org.jfree.chart.util.RectangleInsets var4 = var1.getLabelInsets();
    org.jfree.chart.plot.IntervalMarker var7 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var7.setStartValue(0.0d);
    double var10 = var7.getStartValue();
    java.awt.Paint var11 = var7.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var12 = var7.getGradientPaintTransformer();
    var7.setEndValue(9.223372036854776E18d);
    java.awt.Color var17 = java.awt.Color.getColor("", 100);
    int var18 = var17.getRed();
    int var19 = var17.getAlpha();
    var7.setPaint((java.awt.Paint)var17);
    var1.setLabelPaint((java.awt.Paint)var17);
    org.jfree.chart.axis.DateAxis var22 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var23 = var22.getRange();
    java.awt.Shape var24 = var22.getLeftArrow();
    var22.setLabelAngle(0.0d);
    org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var28 = var27.getRange();
    var27.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var32 = var31.getRange();
    var27.setRangeWithMargins(var32);
    java.util.TimeZone var34 = var27.getTimeZone();
    var22.setTimeZone(var34);
    var22.setFixedDimension(3.0d);
    org.jfree.chart.axis.DateAxis var38 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var39 = var38.getRange();
    java.text.DateFormat var40 = var38.getDateFormatOverride();
    java.awt.Shape var41 = var38.getUpArrow();
    var38.setRange((-7.0d), 100.0d);
    org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var46 = var45.getRange();
    java.awt.Shape var47 = var45.getLeftArrow();
    var38.setRightArrow(var47);
    java.lang.Object var49 = var38.clone();
    org.jfree.chart.axis.DateAxis var50 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var51 = var50.getRange();
    var38.setRange(var51);
    var22.setRangeWithMargins(var51, false, true);
    var1.setRange(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test487"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    org.jfree.chart.util.RectangleInsets var2 = var0.getLabelInsets();
    var0.setRange(0.0d, 7.0d);
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var7 = var6.getRange();
    var6.setRange(0.0d, 100.0d);
    var6.setLowerBound((-6.0d));
    var6.setLabelURL("hi!");
    org.jfree.chart.plot.Plot var15 = var6.getPlot();
    java.awt.Shape var16 = var6.getDownArrow();
    boolean var17 = var6.isPositiveArrowVisible();
    var6.setLabelAngle(0.0d);
    org.jfree.chart.axis.CategoryAxis var21 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.geom.Rectangle2D var24 = null;
    org.jfree.chart.util.RectangleEdge var25 = null;
    double var26 = var21.getCategoryMiddle(0, (-1), var24, var25);
    org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
    var27.clearRangeAxes();
    boolean var29 = var27.isDomainGridlinesVisible();
    org.jfree.chart.axis.ValueAxis var31 = var27.getRangeAxis((-16646144));
    org.jfree.chart.plot.Plot var32 = var27.getParent();
    var21.addChangeListener((org.jfree.chart.event.AxisChangeListener)var27);
    boolean var34 = var27.isRangeZoomable();
    org.jfree.chart.axis.CategoryAxis var36 = new org.jfree.chart.axis.CategoryAxis("");
    java.awt.Color var41 = java.awt.Color.getHSBColor(10.0f, 100.0f, 1.0f);
    java.awt.image.ColorModel var42 = null;
    java.awt.Rectangle var43 = null;
    java.awt.geom.Rectangle2D var44 = null;
    java.awt.geom.AffineTransform var45 = null;
    java.awt.RenderingHints var46 = null;
    java.awt.PaintContext var47 = var41.createContext(var42, var43, var44, var45, var46);
    var36.setTickLabelPaint((java.lang.Comparable)'4', (java.awt.Paint)var41);
    var36.setTickMarkInsideLength(2.0f);
    var36.clearCategoryLabelToolTips();
    java.awt.geom.Rectangle2D var54 = null;
    org.jfree.chart.util.RectangleEdge var55 = null;
    double var56 = var36.getCategoryEnd((-1), (-668), var54, var55);
    var27.setDomainAxis(var36);
    var6.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var27);
    org.jfree.chart.axis.DateAxis var59 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var60 = var59.getRange();
    var59.setVerticalTickLabels(false);
    org.jfree.data.Range var63 = var59.getDefaultAutoRange();
    var6.setRangeWithMargins(var63, false, true);
    var0.setRange(var63, false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test488"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.text.DateFormat var2 = var0.getDateFormatOverride();
    java.awt.Shape var3 = var0.getUpArrow();
    boolean var4 = var0.isAutoRange();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var6 = var5.getRange();
    var5.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var10 = var9.getRange();
    var5.setRangeWithMargins(var10);
    java.util.TimeZone var12 = var5.getTimeZone();
    var0.setTimeZone(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAboutValue(0.05d, (-6.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test489"); }


    org.jfree.chart.axis.NumberAxis var1 = new org.jfree.chart.axis.NumberAxis("CONTRACT");
    java.lang.Object var2 = var1.clone();
    var1.configure();
    boolean var4 = var1.getAutoRangeStickyZero();
    var1.resizeRange(4.0d, 0.0d);
    boolean var8 = var1.getAutoRangeStickyZero();
    java.awt.Paint[] var9 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var10 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    java.awt.Paint[] var11 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    var12.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var15 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var16 = var15.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    org.jfree.chart.util.RectangleInsets var19 = var17.getLabelInsets();
    double var21 = var19.trimWidth((-1.0d));
    double var23 = var19.trimHeight((-6.0d));
    boolean var24 = var16.equals((java.lang.Object)var19);
    var12.setInsets(var19, true);
    java.awt.Stroke var27 = var12.getRangeCrosshairStroke();
    java.awt.Stroke[] var28 = new java.awt.Stroke[] { var27};
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var30 = var29.getRange();
    java.awt.Paint var31 = var29.getTickLabelPaint();
    double var32 = var29.getLowerMargin();
    java.awt.Shape var33 = var29.getLeftArrow();
    java.awt.Stroke var34 = var29.getTickMarkStroke();
    java.awt.Stroke[] var35 = new java.awt.Stroke[] { var34};
    java.awt.Shape[] var36 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    org.jfree.chart.plot.DefaultDrawingSupplier var37 = new org.jfree.chart.plot.DefaultDrawingSupplier(var9, var10, var11, var28, var35, var36);
    java.awt.Stroke var38 = var37.getNextStroke();
    var1.setTickMarkStroke(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test490"); }


    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    var1.clearRangeAxes();
    boolean var3 = var1.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var7 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var8 = null;
    boolean var9 = var1.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var7, var8);
    org.jfree.chart.plot.IntervalMarker var12 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var12.setStartValue(0.0d);
    double var15 = var12.getStartValue();
    java.awt.Paint var16 = var12.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var17 = var12.getGradientPaintTransformer();
    var12.setEndValue(9.223372036854776E18d);
    java.awt.Color var22 = java.awt.Color.getColor("", 100);
    int var23 = var22.getRed();
    int var24 = var22.getAlpha();
    var12.setPaint((java.awt.Paint)var22);
    var7.setPaint((java.awt.Paint)var22);
    java.awt.Color var27 = java.awt.Color.getColor("XY Plot", var22);
    int var28 = var27.getBlue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 100);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test491"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var2 = var0.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var4 = null;
    var0.setRenderer(255, var4);
    java.awt.Stroke var6 = var0.getOutlineStroke();
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var10 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var11 = var10.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var13 = var12.getRange();
    org.jfree.chart.util.RectangleInsets var14 = var12.getLabelInsets();
    double var16 = var14.trimWidth((-1.0d));
    double var18 = var14.trimHeight((-6.0d));
    boolean var19 = var11.equals((java.lang.Object)var14);
    var7.setInsets(var14, true);
    org.jfree.chart.LegendItemCollection var22 = var7.getLegendItems();
    var0.setFixedLegendItems(var22);
    org.jfree.chart.annotations.CategoryAnnotation var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test492() {}
//   public void test492() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test492"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var1 = var0.getRange();
//     var0.setRange(0.0d, 100.0d);
//     boolean var5 = var0.isInverted();
//     org.jfree.chart.axis.Timeline var6 = var0.getTimeline();
//     boolean var7 = var0.isVisible();
//     java.awt.Graphics2D var8 = null;
//     java.awt.geom.Rectangle2D var10 = null;
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.data.xy.XYDataset var12 = null;
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var14 = var13.getRange();
//     java.awt.Paint var15 = var13.getTickLabelPaint();
//     java.awt.Paint var16 = var13.getTickLabelPaint();
//     var13.setFixedAutoRange(3.0d);
//     org.jfree.chart.axis.DateAxis var19 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var20 = var19.getRange();
//     var19.setVerticalTickLabels(false);
//     org.jfree.chart.axis.DateAxis var23 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.data.Range var24 = var23.getRange();
//     var19.setRangeWithMargins(var24);
//     org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
//     org.jfree.chart.plot.XYPlot var27 = new org.jfree.chart.plot.XYPlot(var12, (org.jfree.chart.axis.ValueAxis)var13, (org.jfree.chart.axis.ValueAxis)var19, var26);
//     org.jfree.chart.util.RectangleEdge var29 = var27.getDomainAxisEdge(12);
//     org.jfree.chart.plot.PlotRenderingInfo var30 = null;
//     org.jfree.chart.axis.AxisState var31 = var0.draw(var8, 100.0d, var10, var11, var29, var30);
// 
//   }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test493"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.ChartColor var3 = new org.jfree.chart.ChartColor((-203), 2014, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test494"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.clearRangeAxes();
    boolean var2 = var0.isDomainGridlinesVisible();
    org.jfree.chart.plot.IntervalMarker var6 = new org.jfree.chart.plot.IntervalMarker(0.0d, 0.0d);
    org.jfree.chart.util.Layer var7 = null;
    boolean var8 = var0.removeDomainMarker((-16646144), (org.jfree.chart.plot.Marker)var6, var7);
    org.jfree.chart.plot.IntervalMarker var11 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
    var11.setStartValue(0.0d);
    double var14 = var11.getStartValue();
    java.awt.Paint var15 = var11.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var16 = var11.getGradientPaintTransformer();
    var11.setEndValue(9.223372036854776E18d);
    java.awt.Color var21 = java.awt.Color.getColor("", 100);
    int var22 = var21.getRed();
    int var23 = var21.getAlpha();
    var11.setPaint((java.awt.Paint)var21);
    var6.setPaint((java.awt.Paint)var21);
    org.jfree.chart.util.GradientPaintTransformer var26 = var6.getGradientPaintTransformer();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setAlpha(100.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test495"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(1);
    var1.clear();
    org.jfree.data.xy.XYDataset var3 = null;
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var5 = var4.getRange();
    java.awt.Paint var6 = var4.getTickLabelPaint();
    java.awt.Paint var7 = var4.getTickLabelPaint();
    var4.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var11 = var10.getRange();
    var10.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var15 = var14.getRange();
    var10.setRangeWithMargins(var15);
    org.jfree.chart.renderer.xy.XYItemRenderer var17 = null;
    org.jfree.chart.plot.XYPlot var18 = new org.jfree.chart.plot.XYPlot(var3, (org.jfree.chart.axis.ValueAxis)var4, (org.jfree.chart.axis.ValueAxis)var10, var17);
    org.jfree.chart.util.RectangleEdge var20 = var18.getDomainAxisEdge(12);
    var18.setDomainCrosshairLockedOnData(true);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.clearRangeAxes();
    org.jfree.chart.LegendItemCollection var25 = var23.getFixedLegendItems();
    org.jfree.chart.renderer.category.CategoryItemRenderer var27 = null;
    var23.setRenderer(255, var27);
    java.awt.Stroke var29 = var23.getOutlineStroke();
    var18.setRangeZeroBaselineStroke(var29);
    org.jfree.chart.LegendItemCollection var31 = var18.getLegendItems();
    var18.setBackgroundImageAlpha(0.0f);
    java.util.List var34 = var18.getAnnotations();
    var18.configureRangeAxes();
    int var36 = var1.indexOf((java.lang.Object)var18);
    java.lang.Object var37 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test496"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    java.awt.Paint var2 = var0.getTickLabelPaint();
    double var3 = var0.getLowerMargin();
    java.awt.Shape var4 = var0.getLeftArrow();
    var0.setTickMarkInsideLength(10.0f);
    boolean var7 = var0.isNegativeArrowVisible();
    boolean var9 = var0.isHiddenValue(1419148799999L);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    var10.clearRangeAxes();
    org.jfree.chart.plot.ValueMarker var13 = new org.jfree.chart.plot.ValueMarker(100.0d);
    org.jfree.chart.util.LengthAdjustmentType var14 = var13.getLabelOffsetType();
    org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var16 = var15.getRange();
    org.jfree.chart.util.RectangleInsets var17 = var15.getLabelInsets();
    double var19 = var17.trimWidth((-1.0d));
    double var21 = var17.trimHeight((-6.0d));
    boolean var22 = var14.equals((java.lang.Object)var17);
    var10.setInsets(var17, true);
    org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
    var25.clearRangeAxes();
    boolean var27 = var25.isDomainGridlinesVisible();
    boolean var28 = var17.equals((java.lang.Object)var25);
    org.jfree.chart.renderer.category.CategoryItemRenderer var29 = var25.getRenderer();
    org.jfree.chart.axis.AxisSpace var30 = null;
    var25.setFixedDomainAxisSpace(var30, false);
    boolean var33 = var25.isDomainGridlinesVisible();
    boolean var34 = var0.equals((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-12.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test497"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var1 = var0.getRange();
    var0.setVerticalTickLabels(false);
    org.jfree.data.Range var4 = var0.getDefaultAutoRange();
    boolean var5 = var0.isInverted();
    var0.setAutoRangeMinimumSize(4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test498() {}
//   public void test498() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test498"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.clearRangeAxes();
//     boolean var2 = var0.isDomainGridlinesVisible();
//     org.jfree.chart.axis.ValueAxis var4 = var0.getRangeAxis((-16646144));
//     org.jfree.chart.plot.Plot var5 = var0.getParent();
//     org.jfree.chart.plot.IntervalMarker var8 = new org.jfree.chart.plot.IntervalMarker(0.0d, (-1.0d));
//     var8.setStartValue(0.0d);
//     double var11 = var8.getStartValue();
//     java.awt.Paint var12 = var8.getPaint();
//     var0.setOutlinePaint(var12);
//     org.jfree.chart.axis.CategoryAxis var14 = var0.getDomainAxis();
//     java.awt.Stroke var15 = var0.getDomainGridlineStroke();
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     var16.clearRangeAxes();
//     boolean var18 = var16.isDomainGridlinesVisible();
//     org.jfree.chart.event.PlotChangeEvent var19 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var16);
//     org.jfree.chart.event.ChartChangeEventType var20 = var19.getType();
//     var0.notifyListeners(var19);
//     
//     // Checks the contract:  equals-hashcode on var0 and var16
//     assertTrue("Contract failed: equals-hashcode on var0 and var16", var0.equals(var16) ? var0.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var0
//     assertTrue("Contract failed: equals-hashcode on var16 and var0", var16.equals(var0) ? var16.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test499"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.awt.Paint var3 = var1.getTickLabelPaint();
    java.awt.Paint var4 = var1.getTickLabelPaint();
    var1.setFixedAutoRange(3.0d);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var8 = var7.getRange();
    var7.setVerticalTickLabels(false);
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var12 = var11.getRange();
    var7.setRangeWithMargins(var12);
    org.jfree.chart.renderer.xy.XYItemRenderer var14 = null;
    org.jfree.chart.plot.XYPlot var15 = new org.jfree.chart.plot.XYPlot(var0, (org.jfree.chart.axis.ValueAxis)var1, (org.jfree.chart.axis.ValueAxis)var7, var14);
    org.jfree.chart.util.RectangleEdge var17 = var15.getDomainAxisEdge(12);
    org.jfree.data.xy.XYDataset var19 = var15.getDataset((-1));
    org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var21 = var20.getRange();
    org.jfree.chart.util.RectangleInsets var22 = var20.getLabelInsets();
    var15.setRangeAxis((org.jfree.chart.axis.ValueAxis)var20);
    double var24 = var20.getLowerBound();
    java.util.Date var25 = var20.getMinimumDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test500"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var2 = var1.getRange();
    java.text.DateFormat var3 = var1.getDateFormatOverride();
    var1.resizeRange((-1.0d), (-1.0d));
    java.awt.Font var7 = var1.getLabelFont();
    org.jfree.data.general.Dataset var8 = null;
    org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var1, var8);
    var0.datasetChanged(var9);
    boolean var11 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var14 = var13.getRange();
    org.jfree.chart.axis.TickUnitSource var15 = null;
    var13.setStandardTickUnits(var15);
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.data.Range var18 = var17.getRange();
    java.awt.Paint var19 = var17.getTickLabelPaint();
    var13.setTickLabelPaint(var19);
    org.jfree.chart.plot.ValueMarker var22 = new org.jfree.chart.plot.ValueMarker(100.0d);
    float var23 = var22.getAlpha();
    java.awt.Stroke var24 = var22.getStroke();
    org.jfree.chart.plot.CategoryMarker var25 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)(-1L), var19, var24);
    var0.setDomainTickBandPaint(var19);
    java.awt.Paint var27 = var0.getRangeZeroBaselinePaint();
    java.awt.Paint var28 = var0.getDomainGridlinePaint();
    org.jfree.chart.util.RectangleInsets var29 = var0.getAxisOffset();
    java.lang.Object var30 = var0.clone();
    org.jfree.chart.annotations.XYAnnotation var31 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var33 = var0.removeAnnotation(var31, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.8f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

}
