
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    java.util.List var20 = var0.getKeys();
    java.util.List var21 = var0.getKeys();
    org.jfree.chart.renderer.RenderAttributes var23 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Shape var26 = var23.getItemShape(0, 0);
    java.awt.Paint var29 = var23.getItemOutlinePaint(2, 0);
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
    var30.setRangeCrosshairValue((-1.0d));
    var30.setNoDataMessage("");
    java.awt.Color var38 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var30.setRangeZeroBaselinePaint((java.awt.Paint)var38);
    var23.setDefaultFillPaint((java.awt.Paint)var38);
    java.awt.Stroke var42 = var23.getSeriesStroke(3);
    var0.addObject((java.lang.Comparable)(short)100, (java.lang.Object)var23);
    org.jfree.chart.util.ObjectList var46 = new org.jfree.chart.util.ObjectList();
    java.lang.Object var48 = var46.get(1);
    org.jfree.chart.renderer.RenderAttributes var49 = new org.jfree.chart.renderer.RenderAttributes();
    boolean var50 = var46.equals((java.lang.Object)var49);
    org.jfree.chart.plot.DefaultDrawingSupplier var51 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.lang.Object var52 = var51.clone();
    java.awt.Stroke var53 = var51.getNextOutlineStroke();
    var49.setDefaultStroke(var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertValue(10, (java.lang.Comparable)'a', (java.lang.Object)var53);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     double var4 = var0.getItemLabelAnchorOffset();
//     java.lang.Boolean var6 = var0.getSeriesVisibleInLegend(2);
//     java.awt.Graphics2D var7 = null;
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var8.setWeight(10);
//     org.jfree.chart.plot.DefaultDrawingSupplier var11 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var12 = null;
//     org.jfree.chart.event.ChartChangeEvent var13 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var11, var12);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var16 = null;
//     var14.setSeriesOutlineStroke(100, var16);
//     java.awt.Paint var19 = null;
//     var14.setSeriesOutlinePaint(0, var19, true);
//     java.awt.Shape var23 = var14.lookupSeriesShape(10);
//     java.awt.Paint var25 = null;
//     var14.setSeriesFillPaint(0, var25, false);
//     boolean var28 = var14.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var30 = var14.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var31 = var14.getBaseItemLabelFont();
//     boolean var32 = var11.equals((java.lang.Object)var14);
//     var8.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var11);
//     org.jfree.chart.util.Layer var34 = null;
//     java.util.Collection var35 = var8.getDomainMarkers(var34);
//     org.jfree.chart.event.PlotChangeListener var36 = null;
//     var8.addChangeListener(var36);
//     org.jfree.chart.event.PlotChangeListener var38 = null;
//     var8.removeChangeListener(var38);
//     java.awt.geom.Rectangle2D var40 = null;
//     var0.drawOutline(var7, var8, var40);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    org.jfree.chart.util.DefaultShadowGenerator var0 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var1 = var0.calculateOffsetX();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var4 = null;
    var2.setSeriesOutlineStroke(100, var4);
    var2.removeAnnotations();
    org.jfree.chart.labels.CategoryToolTipGenerator var7 = var2.getBaseToolTipGenerator();
    java.awt.Paint var8 = var2.getBaseItemLabelPaint();
    boolean var9 = var0.equals((java.lang.Object)var8);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    org.jfree.chart.plot.CategoryCrosshairState var15 = null;
    boolean var16 = var10.render(var11, var12, 100, var14, var15);
    org.jfree.chart.event.MarkerChangeEvent var17 = null;
    var10.markerChanged(var17);
    var10.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var21 = var10.getInsets();
    boolean var22 = var0.equals((java.lang.Object)var10);
    int var23 = var0.getShadowSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 5);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    org.jfree.chart.axis.AxisLocation var15 = var0.getDomainAxisLocation(0);
    org.jfree.chart.axis.ValueAxis var16 = null;
    org.jfree.data.Range var17 = var0.getDataRange(var16);
    var0.setAnchorValue((-6.0d), false);
    org.jfree.chart.plot.PlotRenderingInfo var22 = null;
    java.awt.geom.Point2D var23 = null;
    var0.zoomDomainAxes(100.0d, var22, var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getRowCount();
    var0.validateObject();
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    java.awt.Font var8 = var4.getBaseItemLabelFont();
    var3.setLabelFont(var8);
    java.awt.Paint var10 = var3.getTickMarkPaint();
    float var11 = var3.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var12 = null;
    org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
    var13.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var3, var12, (org.jfree.chart.renderer.category.CategoryItemRenderer)var13);
    var0.clear();
    java.lang.Object var18 = var0.clone();
    java.lang.Comparable var19 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow(var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.data.category.CategoryDataset var4 = null;
    org.jfree.chart.axis.CategoryAxis var5 = null;
    org.jfree.chart.axis.ValueAxis var6 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var9 = null;
    var7.setSeriesOutlineStroke(100, var9);
    java.awt.Paint var12 = null;
    var7.setSeriesOutlinePaint(0, var12, true);
    java.awt.Shape var16 = var7.lookupSeriesShape(10);
    java.awt.Paint var18 = null;
    var7.setSeriesFillPaint(0, var18, false);
    boolean var21 = var7.getBaseShapesVisible();
    java.awt.Paint var22 = var7.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var23 = var7.getBaseNegativeItemLabelPosition();
    var7.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot(var4, var5, var6, (org.jfree.chart.renderer.category.CategoryItemRenderer)var7);
    boolean var27 = var0.hasListener((java.util.EventListener)var26);
    int var28 = var26.getWeight();
    boolean var29 = var26.isOutlineVisible();
    java.awt.Stroke var30 = var26.getOutlineStroke();
    org.jfree.chart.util.Layer var31 = null;
    java.util.Collection var32 = var26.getDomainMarkers(var31);
    org.jfree.chart.plot.CategoryMarker var33 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.addDomainMarker(var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    java.util.List var3 = var0.getAnnotations();
    java.lang.Comparable var4 = var0.getDomainCrosshairColumnKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    double var7 = var3.getItemLabelAnchorOffset();
    var3.setBaseShapesVisible(false);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow((java.lang.Comparable)'a');
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);

  }

  public void test9() {}
//   public void test9() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var3 = var0.getItemShape(0, 0);
//     java.awt.Paint var6 = var0.getItemOutlinePaint(15, (-2));
//     java.awt.Font var8 = var0.getSeriesLabelFont(255);
// 
//   }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.isSubplot();
    org.jfree.chart.annotations.CategoryAnnotation var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test11() {}
//   public void test11() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var3 = var0.getItemShape(0, 0);
//     java.awt.Paint var4 = var0.getDefaultLabelPaint();
//     java.lang.Boolean var5 = var0.getDefaultLabelVisible();
//     java.awt.Stroke var8 = var0.getItemStroke(0, 0);
//     java.awt.Paint var11 = var0.getItemFillPaint(100, 0);
//     boolean var12 = var0.getAllowNull();
//     java.awt.Shape var13 = var0.getDefaultShape();
//     java.lang.Boolean var16 = var0.getCreateEntity(0, 15);
// 
//   }

  public void test12() {}
//   public void test12() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.plot.Plot var7 = var0.getParent();
//     org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
//     org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
//     org.jfree.chart.util.RectangleInsets var14 = new org.jfree.chart.util.RectangleInsets(0.0d, 0.0d, 0.0d, 0.0d);
//     var0.setAxisOffset(var14);
//     boolean var16 = var0.isNotify();
//     org.jfree.chart.plot.Marker var18 = null;
//     org.jfree.chart.util.Layer var19 = null;
//     var0.addRangeMarker(15, var18, var19, false);
// 
//   }

  public void test13() {}
//   public void test13() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     org.jfree.chart.labels.ItemLabelPosition var5 = null;
//     var0.setSeriesNegativeItemLabelPosition(0, var5, true);
//     java.awt.Stroke var9 = var0.lookupSeriesStroke(0);
//     var0.setBaseShapesFilled(false);
//     org.jfree.chart.labels.ItemLabelPosition var13 = var0.getSeriesNegativeItemLabelPosition(3);
//     org.jfree.chart.labels.ItemLabelAnchor var14 = var13.getItemLabelAnchor();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var17 = null;
//     var15.setSeriesURLGenerator(10, var17);
//     org.jfree.chart.labels.ItemLabelPosition var20 = var15.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.text.TextAnchor var21 = var20.getRotationAnchor();
//     org.jfree.data.category.DefaultCategoryDataset var22 = new org.jfree.data.category.DefaultCategoryDataset();
//     java.lang.Object var23 = var22.clone();
//     boolean var24 = var21.equals(var23);
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var26 = null;
//     java.awt.geom.Rectangle2D var27 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var29 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var30 = null;
//     boolean var31 = var25.render(var26, var27, 100, var29, var30);
//     org.jfree.chart.event.MarkerChangeEvent var32 = null;
//     var25.markerChanged(var32);
//     var25.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var36 = var25.getInsets();
//     double var38 = var36.calculateRightOutset(0.0d);
//     org.jfree.chart.util.UnitType var39 = var36.getUnitType();
//     double var41 = var36.trimWidth(2.0d);
//     double var42 = var36.getRight();
//     boolean var43 = var21.equals((java.lang.Object)var36);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var44 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var46 = null;
//     var44.setSeriesURLGenerator(10, var46);
//     org.jfree.chart.labels.ItemLabelPosition var49 = var44.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.text.TextAnchor var50 = var49.getRotationAnchor();
//     java.lang.String var51 = var50.toString();
//     org.jfree.chart.labels.ItemLabelPosition var53 = new org.jfree.chart.labels.ItemLabelPosition(var14, var21, var50, (-0.7853981633974483d));
//     
//     // Checks the contract:  equals-hashcode on var20 and var49
//     assertTrue("Contract failed: equals-hashcode on var20 and var49", var20.equals(var49) ? var20.hashCode() == var49.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var49 and var20
//     assertTrue("Contract failed: equals-hashcode on var49 and var20", var49.equals(var20) ? var49.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    int var15 = var0.getDefaultEntityRadius();
    java.lang.Object var16 = var0.clone();
    var0.setBaseSeriesVisibleInLegend(false, false);
    var0.setBaseSeriesVisible(false);
    var0.setSeriesLinesVisible(0, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test15() {}
//   public void test15() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     boolean var7 = var0.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setPlot(var8);
//     org.jfree.chart.axis.ValueAxis var10 = var8.getRangeAxis();
//     var8.clearAnnotations();
//     org.jfree.chart.axis.CategoryAxis var13 = var8.getDomainAxis(0);
//     org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var15 = null;
//     java.awt.geom.Rectangle2D var16 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var18 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var19 = null;
//     boolean var20 = var14.render(var15, var16, 100, var18, var19);
//     org.jfree.chart.event.MarkerChangeEvent var21 = null;
//     var14.markerChanged(var21);
//     var14.setDrawSharedDomainAxis(true);
//     int var25 = var14.getBackgroundImageAlignment();
//     org.jfree.chart.axis.AxisSpace var26 = null;
//     var14.setFixedRangeAxisSpace(var26);
//     double var28 = var14.getRangeCrosshairValue();
//     var14.setAnchorValue((-0.7853981633974483d));
//     var8.setParent((org.jfree.chart.plot.Plot)var14);
//     org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var33 = null;
//     java.awt.geom.Rectangle2D var34 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var36 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var37 = null;
//     boolean var38 = var32.render(var33, var34, 100, var36, var37);
//     org.jfree.chart.event.MarkerChangeEvent var39 = null;
//     var32.markerChanged(var39);
//     java.awt.Stroke var41 = var32.getRangeGridlineStroke();
//     var14.setRangeMinorGridlineStroke(var41);
//     
//     // Checks the contract:  equals-hashcode on var8 and var32
//     assertTrue("Contract failed: equals-hashcode on var8 and var32", var8.equals(var32) ? var8.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var8
//     assertTrue("Contract failed: equals-hashcode on var32 and var8", var32.equals(var8) ? var32.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var14 = null;
    var12.setSeriesOutlineStroke(100, var14);
    java.awt.Paint var17 = null;
    var12.setSeriesOutlinePaint(0, var17, true);
    java.awt.Shape var21 = var12.lookupSeriesShape(10);
    java.awt.Paint var23 = null;
    var12.setSeriesFillPaint(0, var23, false);
    boolean var26 = var12.getBaseShapesVisible();
    java.awt.Paint var27 = var12.getBaseOutlinePaint();
    int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
    int var29 = var0.getWeight();
    org.jfree.chart.axis.AxisSpace var30 = null;
    var0.setFixedRangeAxisSpace(var30, false);
    boolean var33 = var0.isOutlineVisible();
    float var34 = var0.getForegroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0f);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = null;
    var0.setBasePaint(var15);
    var0.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.urls.CategoryURLGenerator var20 = null;
    var0.setSeriesURLGenerator(2, var20, true);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.plot.PlotRenderingInfo var27 = null;
    org.jfree.chart.plot.CategoryCrosshairState var28 = null;
    boolean var29 = var23.render(var24, var25, 100, var27, var28);
    org.jfree.chart.event.MarkerChangeEvent var30 = null;
    var23.markerChanged(var30);
    var23.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var34 = var23.getDrawingSupplier();
    java.awt.Paint var35 = var23.getRangeGridlinePaint();
    var0.setBaseItemLabelPaint(var35, false);
    java.awt.Shape var39 = var0.lookupSeriesShape(2);
    org.jfree.chart.entity.ChartEntity var41 = new org.jfree.chart.entity.ChartEntity(var39, "hi!");
    java.lang.String var42 = var41.getShapeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "rect"+ "'", var42.equals("rect"));

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var22 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var23 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var22);
    var0.setBasePaint((java.awt.Paint)var22, false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var26 = null;
    var0.setBaseItemLabelGenerator(var26);
    boolean var30 = var0.getItemLineVisible(2, (-2));
    int var31 = var0.getDefaultEntityRadius();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 3);

  }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }
// 
// 
//     java.util.Locale var1 = null;
//     java.util.ResourceBundle var2 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("ItemLabelAnchor.OUTSIDE6", var1);
// 
//   }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    var0.mapDatasetToDomainAxis(1, 10);
    var0.clearDomainAxes();
    org.jfree.chart.plot.Marker var19 = null;
    org.jfree.chart.util.Layer var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var0.removeRangeMarker(10, var19, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test21() {}
//   public void test21() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     java.awt.Paint var11 = null;
//     var0.setSeriesFillPaint(0, var11, false);
//     boolean var14 = var0.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var18 = var0.getPositiveItemLabelPosition(1, 10, true);
//     java.awt.Paint var19 = var0.getBasePaint();
//     boolean var20 = var0.getBaseItemLabelsVisible();
//     org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
//     var21.setRangeCrosshairValue((-1.0d));
//     var21.setNoDataMessage("");
//     java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var21.setRangeZeroBaselinePaint((java.awt.Paint)var29);
//     org.jfree.chart.util.Layer var31 = null;
//     java.util.Collection var32 = var21.getDomainMarkers(var31);
//     boolean var33 = var0.hasListener((java.util.EventListener)var21);
//     java.awt.Paint var34 = var21.getOutlinePaint();
//     org.jfree.chart.renderer.RenderAttributes var35 = new org.jfree.chart.renderer.RenderAttributes();
//     org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var37 = null;
//     java.awt.geom.Rectangle2D var38 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var40 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var41 = null;
//     boolean var42 = var36.render(var37, var38, 100, var40, var41);
//     org.jfree.chart.plot.Plot var43 = var36.getParent();
//     org.jfree.data.general.DatasetGroup var44 = var36.getDatasetGroup();
//     java.awt.Paint var45 = var36.getDomainGridlinePaint();
//     var35.setDefaultPaint(var45);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Paint var50 = var48.getSeriesFillPaint(0);
//     java.awt.Paint var54 = var48.getItemPaint(0, 0, true);
//     var35.setSeriesFillPaint(10, var54);
//     java.awt.Paint var58 = var35.getItemFillPaint(10, 0);
//     var21.setDomainCrosshairPaint(var58);
//     
//     // Checks the contract:  equals-hashcode on var0 and var48
//     assertTrue("Contract failed: equals-hashcode on var0 and var48", var0.equals(var48) ? var0.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var48 and var0
//     assertTrue("Contract failed: equals-hashcode on var48 and var0", var48.equals(var0) ? var48.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
//     java.lang.Boolean var7 = var0.getDefaultCreateEntity();
//     java.awt.Stroke var9 = var0.getSeriesStroke(4);
//     var0.setDefaultLabelVisible((java.lang.Boolean)true);
//     java.lang.Boolean var13 = null;
//     var0.setSeriesLabelVisible(0, var13);
// 
//   }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.plot.Plot var7 = var0.getParent();
//     org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
//     org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
//     int var10 = var0.getBackgroundImageAlignment();
//     boolean var11 = var0.isDomainZoomable();
//     org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis();
//     var12.setLabel("ChartEntity: tooltip = null");
//     var0.setDomainAxis(var12);
//     var12.addCategoryLabelToolTip((java.lang.Comparable)(byte)10, "DatasetRenderingOrder.REVERSE");
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     var25.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var28 = var25.getDomainGridlineStroke();
//     org.jfree.chart.util.RectangleEdge var30 = var25.getDomainAxisEdge(15);
//     double var31 = var12.getCategorySeriesMiddle(0, (-2), 1, 15, (-8.0d), var24, var30);
// 
//   }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    double var4 = var0.getItemLabelAnchorOffset();
    var0.setBaseShapesVisible(false);
    double var7 = var0.getItemLabelAnchorOffset();
    var0.setSeriesVisibleInLegend(10, (java.lang.Boolean)false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    var0.setDrawBarOutline(false);
    double var3 = var0.getShadowYOffset();
    double var4 = var0.getItemMargin();
    var0.setItemMargin(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.2d);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var14 = null;
    var12.setSeriesOutlineStroke(100, var14);
    java.awt.Paint var17 = null;
    var12.setSeriesOutlinePaint(0, var17, true);
    java.awt.Shape var21 = var12.lookupSeriesShape(10);
    java.awt.Paint var23 = null;
    var12.setSeriesFillPaint(0, var23, false);
    boolean var26 = var12.getBaseShapesVisible();
    java.awt.Paint var27 = var12.getBaseOutlinePaint();
    int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
    org.jfree.chart.util.Layer var30 = null;
    java.util.Collection var31 = var0.getRangeMarkers(3, var30);
    java.util.List var32 = var0.getCategories();
    org.jfree.chart.plot.Marker var33 = null;
    boolean var34 = var0.removeDomainMarker(var33);
    var0.setNoDataMessage("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.labels.ItemLabelPosition var4 = var0.getPositiveItemLabelPosition(0, 5, true);
    org.jfree.chart.labels.CategoryItemLabelGenerator var6 = var0.getSeriesItemLabelGenerator(255);
    var0.setSeriesItemLabelsVisible(0, (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Font var10 = var0.getBaseItemLabelFont();
    boolean var11 = var0.getBaseShapesVisible();
    var0.setUseOutlinePaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test29() {}
//   public void test29() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
//     var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     org.jfree.chart.renderer.RenderAttributes var12 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var17 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var12.setSeriesOutlinePaint(0, (java.awt.Paint)var17);
//     var7.setRangeCrosshairPaint((java.awt.Paint)var17);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var22 = null;
//     var20.setSeriesOutlineStroke(100, var22);
//     java.awt.Paint var25 = null;
//     var20.setSeriesOutlinePaint(0, var25, true);
//     var20.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     var7.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var20, false);
//     
//     // Checks the contract:  equals-hashcode on var1 and var20
//     assertTrue("Contract failed: equals-hashcode on var1 and var20", var1.equals(var20) ? var1.hashCode() == var20.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var1 and var20.", var1.equals(var20) == var20.equals(var1));
// 
//   }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }
// 
// 
//     org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
//     java.util.List var1 = var0.getRowKeys();
//     int var2 = var0.getColumnCount();
//     java.lang.Object var3 = null;
//     boolean var4 = var0.equals(var3);
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var6 = null;
//     java.awt.geom.Rectangle2D var7 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var9 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var10 = null;
//     boolean var11 = var5.render(var6, var7, 100, var9, var10);
//     org.jfree.chart.event.MarkerChangeEvent var12 = null;
//     var5.markerChanged(var12);
//     var5.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var16 = var5.getInsets();
//     java.awt.Stroke var17 = var5.getRangeZeroBaselineStroke();
//     var0.addObject((java.lang.Object)var5, (java.lang.Comparable)100, (java.lang.Comparable)'4');
//     boolean var21 = var5.isDomainZoomable();
//     java.awt.Image var22 = null;
//     var5.setBackgroundImage(var22);
//     org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
//     var24.setWeight(10);
//     org.jfree.chart.plot.DefaultDrawingSupplier var27 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var28 = null;
//     org.jfree.chart.event.ChartChangeEvent var29 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var27, var28);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var32 = null;
//     var30.setSeriesOutlineStroke(100, var32);
//     java.awt.Paint var35 = null;
//     var30.setSeriesOutlinePaint(0, var35, true);
//     java.awt.Shape var39 = var30.lookupSeriesShape(10);
//     java.awt.Paint var41 = null;
//     var30.setSeriesFillPaint(0, var41, false);
//     boolean var44 = var30.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var46 = var30.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var47 = var30.getBaseItemLabelFont();
//     boolean var48 = var27.equals((java.lang.Object)var30);
//     var24.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var27);
//     var5.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var27);
//     org.jfree.chart.event.PlotChangeEvent var51 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var5);
//     org.jfree.chart.plot.DefaultDrawingSupplier var52 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var53 = null;
//     org.jfree.chart.event.ChartChangeEvent var54 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var52, var53);
//     org.jfree.chart.event.ChartChangeEventType var55 = var54.getType();
//     var51.setType(var55);
//     
//     // Checks the contract:  equals-hashcode on var27 and var52
//     assertTrue("Contract failed: equals-hashcode on var27 and var52", var27.equals(var52) ? var27.hashCode() == var52.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var52 and var27
//     assertTrue("Contract failed: equals-hashcode on var52 and var27", var52.equals(var27) ? var52.hashCode() == var27.hashCode() : true);
// 
//   }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var0 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
    org.jfree.data.category.DefaultCategoryDataset var1 = new org.jfree.data.category.DefaultCategoryDataset();
    var1.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    java.util.List var6 = var1.getColumnKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var8 = var0.generateLabel((org.jfree.data.category.CategoryDataset)var1, 3);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var4 = null;
    var2.setSeriesURLGenerator(10, var4);
    java.awt.Font var6 = var2.getBaseItemLabelFont();
    var1.setLabelFont(var6);
    java.lang.Object var8 = var1.clone();
    org.jfree.chart.axis.ValueAxis var9 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var12 = null;
    var10.setSeriesURLGenerator(10, var12);
    org.jfree.chart.labels.ItemLabelPosition var15 = var10.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.plot.CategoryPlot var16 = var10.getPlot();
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var1, var9, (org.jfree.chart.renderer.category.CategoryItemRenderer)var10);
    org.jfree.chart.annotations.CategoryAnnotation var18 = null;
    org.jfree.chart.util.Layer var19 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.addAnnotation(var18, var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    java.text.AttributedString var0 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    java.awt.Shape var13 = var4.lookupSeriesShape(10);
    org.jfree.chart.entity.ChartEntity var14 = new org.jfree.chart.entity.ChartEntity(var13);
    java.lang.String var15 = var14.toString();
    java.awt.Shape var16 = var14.getArea();
    java.awt.Paint var17 = null;
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var20 = var18.getRangeAxisLocation(10);
    java.awt.Stroke var21 = var18.getRangeCrosshairStroke();
    org.jfree.chart.renderer.RenderAttributes var23 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var28 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var23.setSeriesOutlinePaint(0, (java.awt.Paint)var28);
    java.awt.image.ColorModel var30 = null;
    java.awt.Rectangle var31 = null;
    java.awt.geom.Rectangle2D var32 = null;
    java.awt.geom.AffineTransform var33 = null;
    java.awt.RenderingHints var34 = null;
    java.awt.PaintContext var35 = var28.createContext(var30, var31, var32, var33, var34);
    java.awt.Color var36 = java.awt.Color.getColor("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var37 = new org.jfree.chart.LegendItem(var0, "hi!", "NOID", "DatasetRenderingOrder.REVERSE", var16, var17, var21, (java.awt.Paint)var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ChartEntity: tooltip = null"+ "'", var15.equals("ChartEntity: tooltip = null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.util.List var1 = var0.getAnnotations();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.Plot var3 = var0.getRootPlot();
    java.awt.Font var4 = var0.getNoDataMessageFont();
    java.awt.Font var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setNoDataMessageFont(var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Category Plot"+ "'", var2.equals("Category Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    org.jfree.chart.util.RectangleInsets var14 = new org.jfree.chart.util.RectangleInsets(0.0d, 0.0d, 0.0d, 0.0d);
    var0.setAxisOffset(var14);
    java.lang.Comparable var16 = var0.getDomainCrosshairRowKey();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var19 = null;
    var17.setSeriesOutlineStroke(100, var19);
    java.awt.Paint var22 = null;
    var17.setSeriesOutlinePaint(0, var22, true);
    java.awt.Shape var26 = var17.lookupSeriesShape(10);
    java.awt.Paint var28 = null;
    var17.setSeriesFillPaint(0, var28, false);
    boolean var31 = var17.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var33 = var17.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var34 = var17.getBaseItemLabelFont();
    java.lang.Object var35 = var17.clone();
    java.awt.Stroke var37 = var17.getSeriesOutlineStroke(3);
    boolean var40 = var17.getItemShapeFilled(15, 3);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var42 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var44 = null;
    var42.setSeriesOutlineStroke(100, var44);
    java.awt.Paint var47 = null;
    var42.setSeriesOutlinePaint(0, var47, true);
    java.awt.Shape var51 = var42.lookupSeriesShape(10);
    java.awt.Paint var53 = null;
    var42.setSeriesFillPaint(0, var53, false);
    boolean var56 = var42.getBaseShapesVisible();
    java.awt.Paint var57 = null;
    var42.setBasePaint(var57);
    java.awt.Font var60 = var42.getLegendTextFont((-16777216));
    java.awt.Stroke var62 = var42.lookupSeriesOutlineStroke(10);
    var17.setSeriesStroke(0, var62);
    var0.setRangeZeroBaselineStroke(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    org.jfree.chart.event.PlotChangeEvent var12 = null;
    var8.notifyListeners(var12);
    var8.setRangeMinorGridlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test37() {}
//   public void test37() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     double var4 = var0.getItemLabelAnchorOffset();
//     var0.setBaseShapesVisible(false);
//     double var7 = var0.getItemLabelAnchorOffset();
//     boolean var9 = var0.isSeriesItemLabelsVisible(0);
//     java.awt.Graphics2D var10 = null;
//     org.jfree.chart.plot.CategoryPlot var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var16 = null;
//     java.awt.geom.Rectangle2D var17 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var19 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var20 = null;
//     boolean var21 = var15.render(var16, var17, 100, var19, var20);
//     org.jfree.chart.event.MarkerChangeEvent var22 = null;
//     var15.markerChanged(var22);
//     var15.setDrawSharedDomainAxis(true);
//     int var26 = var15.getBackgroundImageAlignment();
//     boolean var27 = var15.canSelectByRegion();
//     org.jfree.data.category.CategoryDataset var29 = var15.getDataset(15);
//     org.jfree.chart.renderer.RenderAttributes var31 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var36 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var31.setSeriesOutlinePaint(0, (java.awt.Paint)var36);
//     java.awt.image.ColorModel var38 = null;
//     java.awt.Rectangle var39 = null;
//     java.awt.geom.Rectangle2D var40 = null;
//     java.awt.geom.AffineTransform var41 = null;
//     java.awt.RenderingHints var42 = null;
//     java.awt.PaintContext var43 = var36.createContext(var38, var39, var40, var41, var42);
//     java.awt.Color var44 = java.awt.Color.getColor("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", var36);
//     var15.setDomainGridlinePaint((java.awt.Paint)var36);
//     org.jfree.chart.LegendItem var46 = new org.jfree.chart.LegendItem("DatasetRenderingOrder.REVERSE", (java.awt.Paint)var36);
//     org.jfree.chart.renderer.category.BarRenderer var47 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var48 = var47.isDrawBarOutline();
//     boolean var49 = var47.isDrawBarOutline();
//     java.awt.Paint var50 = var47.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var52 = null;
//     java.awt.geom.Rectangle2D var53 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var55 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var56 = null;
//     boolean var57 = var51.render(var52, var53, 100, var55, var56);
//     boolean var58 = var51.isOutlineVisible();
//     var51.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var61 = var51.getDomainGridlinePosition();
//     java.awt.Paint var62 = var51.getBackgroundPaint();
//     var47.addChangeListener((org.jfree.chart.event.RendererChangeListener)var51);
//     org.jfree.chart.plot.CategoryPlot var65 = new org.jfree.chart.plot.CategoryPlot();
//     var65.setRangeCrosshairValue((-1.0d));
//     var65.setNoDataMessage("");
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var70 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var72 = null;
//     var70.setSeriesURLGenerator(10, var72);
//     org.jfree.chart.labels.ItemLabelPosition var75 = null;
//     var70.setSeriesNegativeItemLabelPosition(0, var75, true);
//     java.awt.Stroke var79 = var70.lookupSeriesStroke(0);
//     var65.setDomainCrosshairStroke(var79);
//     var47.setSeriesStroke(10, var79);
//     var0.drawDomainLine(var10, var11, var12, 0.0d, (java.awt.Paint)var36, var79);
// 
//   }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    var4.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var16 = var4.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var17 = new org.jfree.chart.entity.ChartEntity(var16);
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var22 = var21.getRed();
    org.jfree.chart.LegendItem var23 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var16, (java.awt.Paint)var21);
    java.awt.Color var27 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var23.setFillPaint((java.awt.Paint)var27);
    var23.setLineVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ResourceBundle var1 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("DatasetRenderingOrder.REVERSE");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    var0.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    org.jfree.data.general.DatasetGroup var5 = var0.getGroup();
    java.lang.Comparable var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.incrementValue(0.0d, (java.lang.Comparable)"RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]", var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     int var11 = var0.getBackgroundImageAlignment();
//     boolean var12 = var0.canSelectByRegion();
//     java.awt.Graphics2D var13 = null;
//     java.awt.geom.Rectangle2D var14 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var16 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var17 = null;
//     boolean var18 = var0.render(var13, var14, 15, var16, var17);
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var20 = null;
//     java.awt.geom.Rectangle2D var21 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var23 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var24 = null;
//     boolean var25 = var19.render(var20, var21, 100, var23, var24);
//     org.jfree.chart.event.MarkerChangeEvent var26 = null;
//     var19.markerChanged(var26);
//     var19.setDrawSharedDomainAxis(true);
//     int var30 = var19.getBackgroundImageAlignment();
//     boolean var31 = var19.canSelectByRegion();
//     int var32 = var19.getDatasetCount();
//     java.lang.String var33 = var19.getNoDataMessage();
//     org.jfree.chart.plot.DatasetRenderingOrder var34 = var19.getDatasetRenderingOrder();
//     org.jfree.chart.plot.DefaultDrawingSupplier var35 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.data.category.CategoryDataset var36 = null;
//     org.jfree.chart.axis.CategoryAxis var37 = null;
//     org.jfree.chart.axis.ValueAxis var38 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var41 = null;
//     var39.setSeriesOutlineStroke(100, var41);
//     java.awt.Paint var44 = null;
//     var39.setSeriesOutlinePaint(0, var44, true);
//     java.awt.Shape var48 = var39.lookupSeriesShape(10);
//     java.awt.Paint var50 = null;
//     var39.setSeriesFillPaint(0, var50, false);
//     boolean var53 = var39.getBaseShapesVisible();
//     java.awt.Paint var54 = var39.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var55 = var39.getBaseNegativeItemLabelPosition();
//     var39.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot(var36, var37, var38, (org.jfree.chart.renderer.category.CategoryItemRenderer)var39);
//     org.jfree.chart.axis.AxisSpace var59 = null;
//     var58.setFixedRangeAxisSpace(var59);
//     org.jfree.chart.util.RectangleEdge var62 = var58.getDomainAxisEdge(15);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var63 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var65 = null;
//     var63.setSeriesOutlineStroke(100, var65);
//     java.awt.Paint var68 = null;
//     var63.setSeriesOutlinePaint(0, var68, true);
//     boolean var71 = var63.getUseFillPaint();
//     boolean var72 = var58.equals((java.lang.Object)var63);
//     boolean var73 = var35.equals((java.lang.Object)var58);
//     boolean var74 = var34.equals((java.lang.Object)var35);
//     var0.setDatasetRenderingOrder(var34);
//     
//     // Checks the contract:  equals-hashcode on var0 and var19
//     assertTrue("Contract failed: equals-hashcode on var0 and var19", var0.equals(var19) ? var0.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var19 and var0
//     assertTrue("Contract failed: equals-hashcode on var19 and var0", var19.equals(var0) ? var19.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var2 = null;
    java.awt.geom.Rectangle2D var3 = null;
    org.jfree.chart.plot.PlotRenderingInfo var5 = null;
    org.jfree.chart.plot.CategoryCrosshairState var6 = null;
    boolean var7 = var1.render(var2, var3, 100, var5, var6);
    org.jfree.chart.util.Layer var8 = null;
    java.util.Collection var9 = var1.getDomainMarkers(var8);
    org.jfree.chart.axis.AxisSpace var10 = var1.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var13 = null;
    var11.setSeriesURLGenerator(10, var13);
    org.jfree.chart.labels.ItemLabelPosition var16 = null;
    var11.setSeriesNegativeItemLabelPosition(0, var16, true);
    java.awt.Stroke var20 = var11.lookupSeriesStroke(0);
    var1.setRangeGridlineStroke(var20);
    java.awt.Paint var22 = var1.getOutlinePaint();
    var0.setDefaultPaint(var22);
    java.awt.Paint var26 = var0.getItemPaint(3, 0);
    java.awt.Stroke var28 = var0.getSeriesStroke((-16777216));
    var0.setDefaultCreateEntity((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = null;
    var0.setBasePaint(var15);
    var0.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.urls.CategoryURLGenerator var20 = null;
    var0.setSeriesURLGenerator(2, var20, true);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.plot.PlotRenderingInfo var27 = null;
    org.jfree.chart.plot.CategoryCrosshairState var28 = null;
    boolean var29 = var23.render(var24, var25, 100, var27, var28);
    org.jfree.chart.event.MarkerChangeEvent var30 = null;
    var23.markerChanged(var30);
    var23.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var34 = var23.getDrawingSupplier();
    java.awt.Paint var35 = var23.getRangeGridlinePaint();
    var0.setBaseItemLabelPaint(var35, false);
    java.awt.Shape var39 = var0.lookupSeriesShape(2);
    java.awt.Paint var40 = var0.getBaseFillPaint();
    org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
    var42.setRangeCrosshairValue((-1.0d));
    var42.setRangePannable(true);
    org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var49 = var47.getRangeAxisLocation(10);
    java.awt.Stroke var50 = var47.getRangeCrosshairStroke();
    org.jfree.chart.util.RectangleInsets var51 = var47.getInsets();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var52 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var54 = null;
    var52.setSeriesOutlineStroke(100, var54);
    java.awt.Paint var57 = null;
    var52.setSeriesOutlinePaint(0, var57, true);
    java.awt.Shape var61 = var52.lookupSeriesShape(10);
    java.awt.Paint var63 = null;
    var52.setSeriesFillPaint(0, var63, false);
    boolean var66 = var52.getBaseShapesVisible();
    java.awt.Paint var67 = var52.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var68 = var52.getBaseNegativeItemLabelPosition();
    var52.setBaseSeriesVisible(false);
    double var71 = var52.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer var73 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var74 = var73.isDrawBarOutline();
    boolean var75 = var73.isDrawBarOutline();
    java.awt.Paint var76 = var73.getShadowPaint();
    org.jfree.chart.LegendItem var77 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var76);
    var52.setBaseLegendTextPaint(var76);
    var47.setRangeCrosshairPaint(var76);
    var42.setRangeCrosshairPaint(var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesOutlinePaint((-1), var76);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }


    int var3 = java.awt.Color.HSBtoRGB(0.5f, 1.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-254));

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    var0.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var5 = var0.getRowKeys();
    int var7 = var0.getColumnIndex((java.lang.Comparable)100L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSelected(2, 0, false, false);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.event.RendererChangeEvent var11 = null;
    var0.rendererChanged(var11);
    java.awt.Image var13 = var0.getBackgroundImage();
    org.jfree.chart.event.PlotChangeListener var14 = null;
    var0.addChangeListener(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setTickMarkOutsideLength(100.0f);
    java.awt.Stroke var19 = var0.getTickMarkStroke();
    org.jfree.chart.plot.Plot var20 = var0.getPlot();
    var0.configure();
    java.lang.String var22 = var0.getLabel();
    var0.addCategoryLabelToolTip((java.lang.Comparable)1.0d, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    java.awt.Stroke var12 = var0.getRangeZeroBaselineStroke();
    var0.setBackgroundImageAlignment(15);
    org.jfree.chart.plot.DefaultDrawingSupplier var15 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Paint var16 = var15.getNextPaint();
    var0.setRangeZeroBaselinePaint(var16);
    org.jfree.chart.annotations.CategoryAnnotation var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var18, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }


    java.awt.Color var1 = java.awt.Color.getColor("ItemLabelAnchor.OUTSIDE6");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = null;
    var3.setBasePaint(var18);
    var3.setAutoPopulateSeriesOutlineStroke(false);
    boolean var25 = var3.getItemCreateEntity(1, 0, false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var28 = null;
    var26.setSeriesURLGenerator(10, var28);
    org.jfree.chart.labels.ItemLabelPosition var31 = var26.getSeriesPositiveItemLabelPosition(1);
    var26.setItemLabelAnchorOffset(1.0d);
    java.awt.Color var38 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var39 = var38.getRed();
    java.awt.Color var40 = java.awt.Color.getColor("", var38);
    var26.setBasePaint((java.awt.Paint)var38);
    var3.setBaseLegendTextPaint((java.awt.Paint)var38);
    java.awt.Shape var44 = var3.lookupSeriesShape(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-1), var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setWeight(10);
    org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var4 = null;
    org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    java.awt.Shape var15 = var6.lookupSeriesShape(10);
    java.awt.Paint var17 = null;
    var6.setSeriesFillPaint(0, var17, false);
    boolean var20 = var6.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var23 = var6.getBaseItemLabelFont();
    boolean var24 = var3.equals((java.lang.Object)var6);
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var0.getDomainMarkers(var26);
    org.jfree.chart.event.PlotChangeListener var28 = null;
    var0.addChangeListener(var28);
    java.awt.Paint var30 = null;
    var0.setOutlinePaint(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    java.util.List var20 = var0.getKeys();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var25 = null;
    var23.setSeriesURLGenerator(10, var25);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var29 = null;
    var27.setSeriesURLGenerator(10, var29);
    org.jfree.chart.labels.ItemLabelPosition var32 = null;
    var27.setSeriesNegativeItemLabelPosition(0, var32, true);
    java.awt.Stroke var36 = var27.lookupSeriesStroke(0);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var37 = var27.getLegendItemURLGenerator();
    var27.setSeriesItemLabelsVisible(0, true);
    java.awt.Font var44 = var27.getItemLabelFont(0, (-16777216), true);
    var23.setBaseLegendTextFont(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertValue(3, (java.lang.Comparable)'#', (java.lang.Object)var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getRowCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var4 = var0.getColumnKey((-254));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    var0.setSeriesLinesVisible(100, (java.lang.Boolean)true);
    java.awt.Paint var12 = var0.lookupSeriesFillPaint(0);
    java.awt.Shape var14 = var0.lookupLegendShape(1);
    java.awt.Font var16 = var0.lookupLegendTextFont((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    double var1 = var0.getBase();
    org.jfree.chart.renderer.category.BarPainter var2 = org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter();
    var0.setBarPainter(var2);
    org.jfree.chart.labels.ItemLabelPosition var4 = var0.getNegativeItemLabelPositionFallback();
    org.jfree.chart.labels.CategoryItemLabelGenerator var6 = null;
    var0.setSeriesItemLabelGenerator(10, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var23 = var11.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var24 = new org.jfree.chart.entity.ChartEntity(var23);
    var0.setBaseShape(var23, false);
    org.jfree.data.category.DefaultCategoryDataset var29 = new org.jfree.data.category.DefaultCategoryDataset();
    var29.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var34 = var29.getRowKeys();
    org.jfree.chart.entity.CategoryItemEntity var37 = new org.jfree.chart.entity.CategoryItemEntity(var23, "ChartEntity: tooltip = null", "-3,-3,3,3", (org.jfree.data.category.CategoryDataset)var29, (java.lang.Comparable)"TextAnchor.CENTER", (java.lang.Comparable)(-1L));
    var37.setColumnKey((java.lang.Comparable)(byte)0);
    org.jfree.data.category.CategoryDataset var40 = var37.getDataset();
    org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
    var41.setRangeCrosshairValue((-1.0d));
    var41.setNoDataMessage("");
    java.awt.Color var49 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var41.setRangeZeroBaselinePaint((java.awt.Paint)var49);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var52 = null;
    java.awt.geom.Rectangle2D var53 = null;
    org.jfree.chart.plot.PlotRenderingInfo var55 = null;
    org.jfree.chart.plot.CategoryCrosshairState var56 = null;
    boolean var57 = var51.render(var52, var53, 100, var55, var56);
    boolean var58 = var51.isOutlineVisible();
    var51.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var61 = var51.getDomainGridlinePosition();
    var41.setDomainGridlinePosition(var61);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var63 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var63.setBaseSeriesVisibleInLegend(false, true);
    java.awt.Graphics2D var67 = null;
    java.awt.geom.Rectangle2D var68 = null;
    org.jfree.chart.plot.CategoryPlot var69 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var70 = null;
    java.awt.geom.Rectangle2D var71 = null;
    org.jfree.chart.plot.PlotRenderingInfo var73 = null;
    org.jfree.chart.plot.CategoryCrosshairState var74 = null;
    boolean var75 = var69.render(var70, var71, 100, var73, var74);
    org.jfree.chart.event.MarkerChangeEvent var76 = null;
    var69.markerChanged(var76);
    var69.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var80 = var69.getDrawingSupplier();
    java.awt.Paint var81 = var69.getRangeGridlinePaint();
    var69.setForegroundAlpha((-1.0f));
    org.jfree.data.category.DefaultCategoryDataset var84 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.plot.PlotRenderingInfo var85 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var86 = var63.initialise(var67, var68, var69, (org.jfree.data.category.CategoryDataset)var84, var85);
    int var87 = var41.indexOf((org.jfree.data.category.CategoryDataset)var84);
    var37.setDataset((org.jfree.data.category.CategoryDataset)var84);
    java.lang.Object var89 = null;
    boolean var90 = var37.equals(var89);
    var37.setRowKey((java.lang.Comparable)"DatasetRenderingOrder.REVERSE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.data.KeyedObject var2 = new org.jfree.data.KeyedObject((java.lang.Comparable)2.0d, (java.lang.Object)var1);
    org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var4 = null;
    org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
    boolean var6 = var2.equals((java.lang.Object)var5);
    java.lang.Object var7 = var2.clone();
    org.jfree.chart.util.ObjectList var8 = new org.jfree.chart.util.ObjectList();
    java.lang.Object var10 = var8.get(1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var13 = null;
    var11.setSeriesURLGenerator(10, var13);
    org.jfree.chart.labels.ItemLabelPosition var16 = var11.getSeriesPositiveItemLabelPosition(1);
    var11.setItemLabelAnchorOffset(1.0d);
    java.awt.Color var23 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var24 = var23.getRed();
    java.awt.Color var25 = java.awt.Color.getColor("", var23);
    var11.setBasePaint((java.awt.Paint)var23);
    boolean var27 = var8.equals((java.lang.Object)var23);
    var2.setObject((java.lang.Object)var8);
    var8.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var15 = null;
    var13.setSeriesURLGenerator(10, var15);
    org.jfree.chart.labels.ItemLabelPosition var18 = null;
    var13.setSeriesNegativeItemLabelPosition(0, var18, true);
    java.awt.Stroke var22 = var13.lookupSeriesStroke(0);
    var13.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    var0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var13, false);
    boolean var28 = var0.isDomainZoomable();
    int var29 = var0.getBackgroundImageAlignment();
    org.jfree.chart.annotations.CategoryAnnotation var30 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var30, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 15);

  }

  public void test59() {}
//   public void test59() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var3 = var0.getDomainGridlineStroke();
//     org.jfree.chart.util.RectangleEdge var5 = var0.getDomainAxisEdge(15);
//     java.awt.Graphics2D var6 = null;
//     java.awt.geom.Rectangle2D var7 = null;
//     var0.drawBackground(var6, var7);
// 
//   }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    int var10 = var0.getBackgroundImageAlignment();
    boolean var11 = var0.isDomainZoomable();
    org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis();
    var12.setLabel("ChartEntity: tooltip = null");
    var0.setDomainAxis(var12);
    org.jfree.chart.axis.AxisSpace var16 = null;
    var0.setFixedRangeAxisSpace(var16, false);
    org.jfree.chart.event.PlotChangeListener var19 = null;
    var0.addChangeListener(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }


    org.jfree.chart.util.DefaultShadowGenerator var0 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var1 = var0.calculateOffsetX();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var4 = null;
    var2.setSeriesOutlineStroke(100, var4);
    var2.removeAnnotations();
    org.jfree.chart.labels.CategoryToolTipGenerator var7 = var2.getBaseToolTipGenerator();
    java.awt.Paint var8 = var2.getBaseItemLabelPaint();
    boolean var9 = var0.equals((java.lang.Object)var8);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    org.jfree.chart.plot.CategoryCrosshairState var15 = null;
    boolean var16 = var10.render(var11, var12, 100, var14, var15);
    org.jfree.chart.event.MarkerChangeEvent var17 = null;
    var10.markerChanged(var17);
    var10.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var21 = var10.getInsets();
    boolean var22 = var0.equals((java.lang.Object)var10);
    boolean var23 = var10.canSelectByRegion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test62() {}
//   public void test62() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     org.jfree.chart.labels.ItemLabelPosition var5 = null;
//     var0.setSeriesNegativeItemLabelPosition(0, var5, true);
//     org.jfree.chart.labels.ItemLabelPosition var11 = var0.getPositiveItemLabelPosition(0, 1, false);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var14 = null;
//     var12.setSeriesURLGenerator(10, var14);
//     org.jfree.chart.labels.ItemLabelPosition var17 = var12.getSeriesPositiveItemLabelPosition(1);
//     java.awt.Shape var19 = var12.lookupLegendShape(0);
//     java.awt.Font var21 = var12.getLegendTextFont(100);
//     org.jfree.chart.labels.ItemLabelPosition var22 = var12.getBasePositiveItemLabelPosition();
//     org.jfree.chart.labels.CategorySeriesLabelGenerator var23 = var12.getLegendItemLabelGenerator();
//     var0.setLegendItemURLGenerator(var23);
//     
//     // Checks the contract:  equals-hashcode on var11 and var17
//     assertTrue("Contract failed: equals-hashcode on var11 and var17", var11.equals(var17) ? var11.hashCode() == var17.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var22
//     assertTrue("Contract failed: equals-hashcode on var11 and var22", var11.equals(var22) ? var11.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var11
//     assertTrue("Contract failed: equals-hashcode on var17 and var11", var17.equals(var11) ? var17.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var11
//     assertTrue("Contract failed: equals-hashcode on var22 and var11", var22.equals(var11) ? var22.hashCode() == var11.hashCode() : true);
// 
//   }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateLeftInset(8.0d);
    double var15 = var11.calculateRightInset(8.0d);
    java.awt.geom.Rectangle2D var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var19 = var11.createInsetRectangle(var16, false, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 8.0d);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    org.jfree.chart.LegendItemCollection var12 = var0.getLegendItems();
    int var13 = var12.getItemCount();
    java.util.Iterator var14 = var12.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var16 = var12.get((-2));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }
// 
// 
//     org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     boolean var8 = var1.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     var1.setPlot(var9);
//     org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
//     org.jfree.chart.plot.PlotRenderingInfo var14 = null;
//     java.awt.geom.Point2D var15 = null;
//     var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
//     org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
//     boolean var19 = var0.equals((java.lang.Object)var9);
//     java.util.List var20 = var0.getKeys();
//     java.util.List var21 = var0.getKeys();
//     org.jfree.chart.renderer.RenderAttributes var23 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var26 = var23.getItemShape(0, 0);
//     java.awt.Paint var29 = var23.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.setRangeCrosshairValue((-1.0d));
//     var30.setNoDataMessage("");
//     java.awt.Color var38 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var30.setRangeZeroBaselinePaint((java.awt.Paint)var38);
//     var23.setDefaultFillPaint((java.awt.Paint)var38);
//     java.awt.Stroke var42 = var23.getSeriesStroke(3);
//     var0.addObject((java.lang.Comparable)(short)100, (java.lang.Object)var23);
//     org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var46 = null;
//     java.awt.geom.Rectangle2D var47 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var49 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var50 = null;
//     boolean var51 = var45.render(var46, var47, 100, var49, var50);
//     org.jfree.chart.event.MarkerChangeEvent var52 = null;
//     var45.markerChanged(var52);
//     org.jfree.chart.plot.Marker var55 = null;
//     org.jfree.chart.util.Layer var56 = null;
//     boolean var58 = var45.removeDomainMarker(10, var55, var56, true);
//     boolean var59 = var45.isRangePannable();
//     var0.setObject((java.lang.Comparable)(short)0, (java.lang.Object)var59);
//     
//     // Checks the contract:  equals-hashcode on var9 and var45
//     assertTrue("Contract failed: equals-hashcode on var9 and var45", var9.equals(var45) ? var9.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var45 and var9
//     assertTrue("Contract failed: equals-hashcode on var45 and var9", var45.equals(var9) ? var45.hashCode() == var9.hashCode() : true);
// 
//   }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    var0.setBaseSeriesVisibleInLegend(true);
    java.awt.Font var17 = var0.getBaseLegendTextFont();
    java.awt.Shape var19 = var0.getSeriesShape(15);
    java.awt.Shape var21 = var0.lookupSeriesShape(4);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.plot.PlotRenderingInfo var27 = null;
    org.jfree.chart.plot.CategoryCrosshairState var28 = null;
    boolean var29 = var23.render(var24, var25, 100, var27, var28);
    org.jfree.chart.event.MarkerChangeEvent var30 = null;
    var23.markerChanged(var30);
    var23.setDrawSharedDomainAxis(true);
    int var34 = var23.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var35 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var37 = null;
    var35.setSeriesOutlineStroke(100, var37);
    java.awt.Paint var40 = null;
    var35.setSeriesOutlinePaint(0, var40, true);
    java.awt.Shape var44 = var35.lookupSeriesShape(10);
    java.awt.Paint var46 = null;
    var35.setSeriesFillPaint(0, var46, false);
    boolean var49 = var35.getBaseShapesVisible();
    java.awt.Paint var50 = var35.getBaseOutlinePaint();
    int var51 = var23.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var35);
    int var52 = var23.getWeight();
    org.jfree.chart.axis.AxisSpace var53 = null;
    var23.setFixedRangeAxisSpace(var53, false);
    java.awt.Stroke var56 = var23.getOutlineStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesOutlineStroke((-1), var56, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    int var1 = var0.getRowCount();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var4 = null;
    var2.setSeriesURLGenerator(10, var4);
    org.jfree.data.category.CategoryDataset var6 = null;
    org.jfree.chart.axis.CategoryAxis var7 = null;
    org.jfree.chart.axis.ValueAxis var8 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var11 = null;
    var9.setSeriesOutlineStroke(100, var11);
    java.awt.Paint var14 = null;
    var9.setSeriesOutlinePaint(0, var14, true);
    java.awt.Shape var18 = var9.lookupSeriesShape(10);
    java.awt.Paint var20 = null;
    var9.setSeriesFillPaint(0, var20, false);
    boolean var23 = var9.getBaseShapesVisible();
    java.awt.Paint var24 = var9.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var25 = var9.getBaseNegativeItemLabelPosition();
    var9.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot(var6, var7, var8, (org.jfree.chart.renderer.category.CategoryItemRenderer)var9);
    boolean var29 = var2.hasListener((java.util.EventListener)var28);
    java.awt.Stroke var33 = var2.getItemOutlineStroke((-1), 100, false);
    boolean var34 = var0.equals((java.lang.Object)false);
    org.jfree.data.KeyedObjects2D var35 = new org.jfree.data.KeyedObjects2D();
    java.util.List var36 = var35.getRowKeys();
    int var37 = var35.getColumnCount();
    java.lang.Object var38 = null;
    boolean var39 = var35.equals(var38);
    var0.addObject((java.lang.Object)var35, (java.lang.Comparable)1L, (java.lang.Comparable)(short)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.removeColumn((java.lang.Comparable)(-8.0d));
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var4 = null;
    var2.setSeriesURLGenerator(10, var4);
    java.awt.Font var6 = var2.getBaseItemLabelFont();
    var1.setLabelFont(var6);
    java.lang.Object var8 = var1.clone();
    org.jfree.chart.axis.ValueAxis var9 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var12 = null;
    var10.setSeriesURLGenerator(10, var12);
    org.jfree.chart.labels.ItemLabelPosition var15 = var10.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.plot.CategoryPlot var16 = var10.getPlot();
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var1, var9, (org.jfree.chart.renderer.category.CategoryItemRenderer)var10);
    var0.fireSelectionEvent();
    org.jfree.data.event.DatasetChangeListener var19 = null;
    var0.addChangeListener(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.incrementValue(8.0d, (java.lang.Comparable)(-2), (java.lang.Comparable)(byte)10);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateRightOutset(0.0d);
    double var15 = var11.calculateTopInset(100.0d);
    java.awt.geom.Rectangle2D var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var17 = var11.createInsetRectangle(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 4.0d);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var10 = null;
    var8.setSeriesOutlineStroke(100, var10);
    java.awt.Paint var13 = null;
    var8.setSeriesOutlinePaint(0, var13, true);
    var8.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var20 = var8.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var21 = new org.jfree.chart.entity.ChartEntity(var20);
    java.awt.Color var25 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var26 = var25.getRed();
    org.jfree.chart.LegendItem var27 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var20, (java.awt.Paint)var25);
    org.jfree.chart.entity.ChartEntity var28 = new org.jfree.chart.entity.ChartEntity(var20);
    java.awt.Paint var29 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var30 = new org.jfree.chart.LegendItem("RectangleInsets[t=0.0,l=-6.0,b=10.0,r=8.0]", "SortOrder.ASCENDING", "", "RectangleInsets[t=0.0,l=-6.0,b=10.0,r=8.0]", var20, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.util.List var1 = var0.getAnnotations();
//     java.lang.String var2 = var0.getPlotType();
//     org.jfree.chart.plot.Plot var3 = var0.getRootPlot();
//     org.jfree.data.category.CategoryDataset var5 = null;
//     org.jfree.chart.axis.CategoryAxis var6 = null;
//     org.jfree.chart.axis.ValueAxis var7 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var10 = null;
//     var8.setSeriesOutlineStroke(100, var10);
//     java.awt.Paint var13 = null;
//     var8.setSeriesOutlinePaint(0, var13, true);
//     java.awt.Shape var17 = var8.lookupSeriesShape(10);
//     java.awt.Paint var19 = null;
//     var8.setSeriesFillPaint(0, var19, false);
//     boolean var22 = var8.getBaseShapesVisible();
//     java.awt.Paint var23 = var8.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var24 = var8.getBaseNegativeItemLabelPosition();
//     var8.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot(var5, var6, var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var8);
//     org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var29 = null;
//     java.awt.geom.Rectangle2D var30 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var32 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var33 = null;
//     boolean var34 = var28.render(var29, var30, 100, var32, var33);
//     org.jfree.chart.event.MarkerChangeEvent var35 = null;
//     var28.markerChanged(var35);
//     org.jfree.chart.plot.Marker var38 = null;
//     org.jfree.chart.util.Layer var39 = null;
//     boolean var41 = var28.removeDomainMarker(10, var38, var39, true);
//     org.jfree.chart.axis.AxisLocation var43 = var28.getDomainAxisLocation(0);
//     org.jfree.chart.axis.AxisLocation var44 = org.jfree.chart.axis.AxisLocation.getOpposite(var43);
//     var27.setDomainAxisLocation(var44, false);
//     org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var48 = null;
//     java.awt.geom.Rectangle2D var49 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var51 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var52 = null;
//     boolean var53 = var47.render(var48, var49, 100, var51, var52);
//     org.jfree.chart.event.MarkerChangeEvent var54 = null;
//     var47.markerChanged(var54);
//     var47.setDrawSharedDomainAxis(true);
//     int var58 = var47.getBackgroundImageAlignment();
//     org.jfree.chart.axis.AxisSpace var59 = null;
//     var47.setFixedRangeAxisSpace(var59);
//     double var61 = var47.getRangeCrosshairValue();
//     org.jfree.chart.plot.PlotOrientation var62 = var47.getOrientation();
//     org.jfree.chart.util.RectangleEdge var63 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var44, var62);
//     org.jfree.chart.axis.AxisLocation var64 = var44.getOpposite();
//     var0.setDomainAxisLocation(100, var44);
//     
//     // Checks the contract:  equals-hashcode on var28 and var0
//     assertTrue("Contract failed: equals-hashcode on var28 and var0", var28.equals(var0) ? var28.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var0.", var28.equals(var0) == var0.equals(var28));
// 
//   }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var21 = var0.getObject((-2));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test73() {}
//   public void test73() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
//     java.awt.Paint var8 = var0.getSeriesFillPaint(0);
//     boolean var9 = var0.getAllowNull();
//     java.awt.Font var11 = var0.getSeriesLabelFont(0);
// 
//   }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    org.jfree.chart.labels.ItemLabelPosition var17 = new org.jfree.chart.labels.ItemLabelPosition();
    var0.setPositiveItemLabelPositionFallback(var17);
    org.jfree.chart.renderer.RenderAttributes var19 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var24 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var19.setSeriesOutlinePaint(0, (java.awt.Paint)var24);
    java.lang.Boolean var26 = var19.getDefaultCreateEntity();
    org.jfree.chart.renderer.category.BarRenderer var28 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var29 = var28.isDrawBarOutline();
    boolean var30 = var28.isDrawBarOutline();
    java.awt.Paint var31 = var28.getShadowPaint();
    org.jfree.chart.LegendItem var32 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var31);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var33 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var35 = null;
    var33.setSeriesOutlineStroke(100, var35);
    java.awt.Paint var38 = null;
    var33.setSeriesOutlinePaint(0, var38, true);
    java.awt.Shape var42 = var33.lookupSeriesShape(10);
    java.awt.Paint var44 = null;
    var33.setSeriesFillPaint(0, var44, false);
    boolean var47 = var33.getBaseShapesVisible();
    java.awt.Paint var48 = null;
    var33.setBasePaint(var48);
    var33.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.urls.CategoryURLGenerator var53 = null;
    var33.setSeriesURLGenerator(2, var53, true);
    org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var57 = null;
    java.awt.geom.Rectangle2D var58 = null;
    org.jfree.chart.plot.PlotRenderingInfo var60 = null;
    org.jfree.chart.plot.CategoryCrosshairState var61 = null;
    boolean var62 = var56.render(var57, var58, 100, var60, var61);
    org.jfree.chart.event.MarkerChangeEvent var63 = null;
    var56.markerChanged(var63);
    var56.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var67 = var56.getDrawingSupplier();
    java.awt.Paint var68 = var56.getRangeGridlinePaint();
    var33.setBaseItemLabelPaint(var68, false);
    var32.setOutlinePaint(var68);
    var19.setDefaultFillPaint(var68);
    java.awt.Color var76 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    java.lang.String var77 = var76.toString();
    var19.setDefaultOutlinePaint((java.awt.Paint)var76);
    var0.setBaseItemLabelPaint((java.awt.Paint)var76, true);
    org.jfree.chart.plot.CategoryPlot var81 = new org.jfree.chart.plot.CategoryPlot();
    var81.setRangeCrosshairValue((-1.0d));
    var81.setNoDataMessage("");
    java.awt.Color var89 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var81.setRangeZeroBaselinePaint((java.awt.Paint)var89);
    float[] var94 = new float[] { 100.0f, 1.0f, 100.0f};
    float[] var95 = var89.getRGBColorComponents(var94);
    float[] var96 = var76.getRGBColorComponents(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "java.awt.Color[r=0,g=0,b=0]"+ "'", var77.equals("java.awt.Color[r=0,g=0,b=0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     java.awt.Paint var11 = null;
//     var0.setSeriesFillPaint(0, var11, false);
//     boolean var14 = var0.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var18 = var0.getPositiveItemLabelPosition(1, 10, true);
//     java.awt.Paint var19 = var0.getBasePaint();
//     boolean var20 = var0.getBaseItemLabelsVisible();
//     org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
//     var21.setRangeCrosshairValue((-1.0d));
//     var21.setNoDataMessage("");
//     java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var21.setRangeZeroBaselinePaint((java.awt.Paint)var29);
//     org.jfree.chart.util.Layer var31 = null;
//     java.util.Collection var32 = var21.getDomainMarkers(var31);
//     boolean var33 = var0.hasListener((java.util.EventListener)var21);
//     java.awt.Paint var34 = var21.getOutlinePaint();
//     org.jfree.chart.plot.PlotOrientation var35 = var21.getOrientation();
//     int var36 = var21.getDomainAxisCount();
//     org.jfree.chart.util.DefaultShadowGenerator var37 = new org.jfree.chart.util.DefaultShadowGenerator();
//     int var38 = var37.calculateOffsetX();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var41 = null;
//     var39.setSeriesOutlineStroke(100, var41);
//     var39.removeAnnotations();
//     org.jfree.chart.labels.CategoryToolTipGenerator var44 = var39.getBaseToolTipGenerator();
//     java.awt.Paint var45 = var39.getBaseItemLabelPaint();
//     boolean var46 = var37.equals((java.lang.Object)var45);
//     int var47 = var37.calculateOffsetY();
//     var21.setShadowGenerator((org.jfree.chart.util.ShadowGenerator)var37);
//     
//     // Checks the contract:  equals-hashcode on var0 and var39
//     assertTrue("Contract failed: equals-hashcode on var0 and var39", var0.equals(var39) ? var0.hashCode() == var39.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var39 and var0
//     assertTrue("Contract failed: equals-hashcode on var39 and var0", var39.equals(var0) ? var39.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    java.util.List var2 = var0.getColumnKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var4 = var0.getColumnKey(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }


    org.jfree.data.SelectableValue var1 = new org.jfree.data.SelectableValue((java.lang.Number)(-8.0d));

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    java.awt.Paint var13 = var0.getDomainCrosshairPaint();
    org.jfree.chart.axis.CategoryAxis var14 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var17 = null;
    var15.setSeriesURLGenerator(10, var17);
    java.awt.Font var19 = var15.getBaseItemLabelFont();
    var14.setLabelFont(var19);
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var24 = var21.getDomainAxis();
    var14.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var21);
    var14.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var14.setCategoryMargin(1.0d);
    var14.setTickMarkOutsideLength(100.0f);
    java.awt.Stroke var33 = var14.getTickMarkStroke();
    var14.clearCategoryLabelToolTips();
    java.lang.String var36 = var14.getCategoryLabelToolTip((java.lang.Comparable)(short)0);
    int var37 = var0.getDomainAxisIndex(var14);
    java.awt.geom.Rectangle2D var40 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var41 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var43 = null;
    var41.setSeriesOutlineStroke(100, var43);
    java.awt.Paint var46 = null;
    var41.setSeriesOutlinePaint(0, var46, true);
    java.awt.Shape var50 = var41.lookupSeriesShape(10);
    java.awt.Paint var52 = null;
    var41.setSeriesFillPaint(0, var52, false);
    boolean var55 = var41.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var59 = var41.getPositiveItemLabelPosition(1, 10, true);
    java.awt.Paint var60 = var41.getBasePaint();
    boolean var61 = var41.getBaseItemLabelsVisible();
    org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot();
    var62.setRangeCrosshairValue((-1.0d));
    var62.setNoDataMessage("");
    java.awt.Color var70 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var62.setRangeZeroBaselinePaint((java.awt.Paint)var70);
    org.jfree.chart.util.Layer var72 = null;
    java.util.Collection var73 = var62.getDomainMarkers(var72);
    boolean var74 = var41.hasListener((java.util.EventListener)var62);
    org.jfree.chart.util.RectangleEdge var75 = var62.getRangeAxisEdge();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var76 = var14.getCategoryMiddle(0, (-16777216), var40, var75);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }


    org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var0 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.data.category.DefaultCategoryDataset var2 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    java.awt.Font var8 = var4.getBaseItemLabelFont();
    var3.setLabelFont(var8);
    java.lang.Object var10 = var3.clone();
    org.jfree.chart.axis.ValueAxis var11 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var14 = null;
    var12.setSeriesURLGenerator(10, var14);
    org.jfree.chart.labels.ItemLabelPosition var17 = var12.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.plot.CategoryPlot var18 = var12.getPlot();
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var2, var3, var11, (org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
    org.jfree.data.Range var20 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var22 = var0.generateLabel((org.jfree.data.category.CategoryDataset)var2, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }


    org.jfree.chart.plot.DefaultDrawingSupplier var0 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var1 = null;
    org.jfree.chart.event.ChartChangeEvent var2 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var0, var1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var20 = var3.getBaseItemLabelFont();
    boolean var21 = var0.equals((java.lang.Object)var3);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var22 = var3.getLegendItemURLGenerator();
    org.jfree.chart.labels.CategorySeriesLabelGenerator var23 = var3.getLegendItemURLGenerator();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var27 = null;
    java.awt.geom.Rectangle2D var28 = null;
    org.jfree.chart.plot.PlotRenderingInfo var30 = null;
    org.jfree.chart.plot.CategoryCrosshairState var31 = null;
    boolean var32 = var26.render(var27, var28, 100, var30, var31);
    org.jfree.chart.plot.Plot var33 = var26.getParent();
    org.jfree.chart.axis.CategoryAxis var34 = null;
    org.jfree.chart.axis.CategoryAxis[] var35 = new org.jfree.chart.axis.CategoryAxis[] { var34};
    var26.setDomainAxes(var35);
    java.awt.Stroke var37 = var26.getDomainGridlineStroke();
    java.awt.Graphics2D var38 = null;
    java.awt.geom.Rectangle2D var39 = null;
    org.jfree.chart.plot.PlotRenderingInfo var41 = null;
    org.jfree.chart.plot.CategoryCrosshairState var42 = null;
    boolean var43 = var26.render(var38, var39, 2, var41, var42);
    org.jfree.chart.util.Layer var45 = null;
    java.util.Collection var46 = var26.getDomainMarkers((-16777216), var45);
    var26.clearSelection();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var48.setBaseSeriesVisibleInLegend(false, true);
    java.awt.Graphics2D var52 = null;
    java.awt.geom.Rectangle2D var53 = null;
    org.jfree.chart.plot.CategoryPlot var54 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var55 = null;
    java.awt.geom.Rectangle2D var56 = null;
    org.jfree.chart.plot.PlotRenderingInfo var58 = null;
    org.jfree.chart.plot.CategoryCrosshairState var59 = null;
    boolean var60 = var54.render(var55, var56, 100, var58, var59);
    org.jfree.chart.event.MarkerChangeEvent var61 = null;
    var54.markerChanged(var61);
    var54.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var65 = var54.getDrawingSupplier();
    java.awt.Paint var66 = var54.getRangeGridlinePaint();
    var54.setForegroundAlpha((-1.0f));
    org.jfree.data.category.DefaultCategoryDataset var69 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.plot.PlotRenderingInfo var70 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var71 = var48.initialise(var52, var53, var54, (org.jfree.data.category.CategoryDataset)var69, var70);
    org.jfree.chart.plot.PlotRenderingInfo var72 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var73 = var3.initialise(var24, var25, var26, (org.jfree.data.category.CategoryDataset)var69, var72);
    org.jfree.chart.util.Layer var74 = null;
    java.util.Collection var75 = var26.getDomainMarkers(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    java.lang.Comparable var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Font var9 = var0.getTickLabelFont(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setFixedDimension(2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.setRangeCrosshairValue((-1.0d));
    var0.setPlot((org.jfree.chart.plot.Plot)var19);
    var19.configureRangeAxes();
    boolean var24 = var19.isDomainGridlinesVisible();
    var19.clearSelection();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var4);
    java.awt.Shape var6 = var5.getShape();
    java.awt.Font var7 = var5.getLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    java.awt.Color var2 = java.awt.Color.getColor("RectangleInsets[t=0.0,l=-6.0,b=10.0,r=8.0]", 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    java.awt.Paint var13 = var0.getItemFillPaint(1, 0, false);
    boolean var14 = var0.getBaseSeriesVisibleInLegend();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.axis.AxisLocation var2 = var0.getRangeAxisLocation(10);
//     boolean var3 = var0.canSelectByRegion();
//     org.jfree.data.category.DefaultCategoryDataset var5 = new org.jfree.data.category.DefaultCategoryDataset();
//     var5.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
//     var0.setDataset(3, (org.jfree.data.category.CategoryDataset)var5);
//     java.awt.Graphics2D var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     var0.drawOutline(var11, var12);
// 
//   }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var4 = null;
    var2.setSeriesURLGenerator(10, var4);
    java.awt.Font var6 = var2.getBaseItemLabelFont();
    var1.setLabelFont(var6);
    java.lang.Object var8 = var1.clone();
    org.jfree.chart.axis.ValueAxis var9 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var12 = null;
    var10.setSeriesURLGenerator(10, var12);
    org.jfree.chart.labels.ItemLabelPosition var15 = var10.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.plot.CategoryPlot var16 = var10.getPlot();
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var1, var9, (org.jfree.chart.renderer.category.CategoryItemRenderer)var10);
    boolean var18 = var17.isDomainPannable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    org.jfree.chart.util.RectangleInsets var0 = new org.jfree.chart.util.RectangleInsets();
    java.awt.geom.Rectangle2D var1 = null;
    org.jfree.chart.util.LengthAdjustmentType var2 = null;
    org.jfree.chart.util.LengthAdjustmentType var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var4 = var0.createAdjustedRectangle(var1, var2, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test89() {}
//   public void test89() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var3 = var0.getDomainGridlineStroke();
//     org.jfree.chart.util.RectangleEdge var5 = var0.getDomainAxisEdge(15);
//     org.jfree.chart.axis.ValueAxis var7 = null;
//     var0.setRangeAxis(15, var7);
//     org.jfree.chart.plot.Marker var10 = null;
//     org.jfree.chart.util.Layer var11 = null;
//     var0.addRangeMarker(0, var10, var11);
// 
//   }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    int var10 = var0.getBackgroundImageAlignment();
    boolean var11 = var0.isDomainZoomable();
    org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis();
    var12.setLabel("ChartEntity: tooltip = null");
    var0.setDomainAxis(var12);
    org.jfree.chart.axis.AxisSpace var16 = null;
    var0.setFixedRangeAxisSpace(var16, false);
    org.jfree.chart.annotations.CategoryAnnotation var19 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var0.removeAnnotation(var19, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var1 = var0.isDrawBarOutline();
//     boolean var2 = var0.isDrawBarOutline();
//     java.awt.Paint var3 = var0.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var8 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var9 = null;
//     boolean var10 = var4.render(var5, var6, 100, var8, var9);
//     boolean var11 = var4.isOutlineVisible();
//     var4.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
//     java.awt.Paint var15 = var4.getBackgroundPaint();
//     var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
//     org.jfree.chart.labels.ItemLabelPosition var17 = new org.jfree.chart.labels.ItemLabelPosition();
//     var0.setPositiveItemLabelPositionFallback(var17);
//     var0.setBaseSeriesVisible(false);
//     org.jfree.chart.labels.ItemLabelPosition var24 = var0.getNegativeItemLabelPosition((-2), 5, false);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var27 = null;
//     var25.setSeriesOutlineStroke(100, var27);
//     java.awt.Paint var30 = null;
//     var25.setSeriesOutlinePaint(0, var30, true);
//     org.jfree.chart.labels.ItemLabelPosition var33 = new org.jfree.chart.labels.ItemLabelPosition();
//     var25.setBaseNegativeItemLabelPosition(var33, true);
//     org.jfree.chart.JFreeChart var36 = null;
//     org.jfree.chart.event.ChartChangeEvent var37 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var25, var36);
//     org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var39 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator("");
//     var25.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var39);
//     var0.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var39);
//     
//     // Checks the contract:  equals-hashcode on var17 and var33
//     assertTrue("Contract failed: equals-hashcode on var17 and var33", var17.equals(var33) ? var17.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var17
//     assertTrue("Contract failed: equals-hashcode on var33 and var17", var33.equals(var17) ? var33.hashCode() == var17.hashCode() : true);
// 
//   }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     boolean var7 = var0.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setPlot(var8);
//     var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
//     java.awt.Paint var12 = var8.getRangeCrosshairPaint();
//     org.jfree.chart.axis.ValueAxis var13 = null;
//     org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
//     var8.setRangeAxes(var14);
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var17 = null;
//     java.awt.geom.Rectangle2D var18 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var20 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var21 = null;
//     boolean var22 = var16.render(var17, var18, 100, var20, var21);
//     org.jfree.chart.event.MarkerChangeEvent var23 = null;
//     var16.markerChanged(var23);
//     var16.setDrawSharedDomainAxis(true);
//     int var27 = var16.getBackgroundImageAlignment();
//     boolean var28 = var16.canSelectByRegion();
//     int var29 = var16.getDatasetCount();
//     java.lang.String var30 = var16.getNoDataMessage();
//     org.jfree.chart.plot.DatasetRenderingOrder var31 = var16.getDatasetRenderingOrder();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var34 = null;
//     var32.setSeriesOutlineStroke(100, var34);
//     java.awt.Paint var37 = null;
//     var32.setSeriesOutlinePaint(0, var37, true);
//     java.awt.Shape var41 = var32.lookupSeriesShape(10);
//     java.awt.Paint var43 = null;
//     var32.setSeriesFillPaint(0, var43, false);
//     boolean var46 = var32.getBaseShapesVisible();
//     java.awt.Paint var47 = var32.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var48 = var32.getBaseNegativeItemLabelPosition();
//     var32.setBaseSeriesVisible(false);
//     boolean var51 = var31.equals((java.lang.Object)var32);
//     var8.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var32, true);
//     java.awt.Color var58 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
//     org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var58);
//     java.awt.Shape var60 = var59.getShape();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var61 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var63 = null;
//     var61.setSeriesURLGenerator(10, var63);
//     org.jfree.chart.labels.ItemLabelPosition var66 = null;
//     var61.setSeriesNegativeItemLabelPosition(0, var66, true);
//     java.awt.Stroke var70 = var61.lookupSeriesStroke(10);
//     var59.setOutlineStroke(var70);
//     var32.setBaseOutlineStroke(var70);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var73 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var75 = null;
//     var73.setSeriesURLGenerator(10, var75);
//     org.jfree.chart.labels.ItemLabelPosition var78 = null;
//     var73.setSeriesNegativeItemLabelPosition(0, var78, true);
//     java.awt.Stroke var82 = var73.lookupSeriesStroke(0);
//     var73.setBaseShapesFilled(false);
//     org.jfree.chart.labels.ItemLabelPosition var86 = var73.getSeriesNegativeItemLabelPosition(3);
//     org.jfree.chart.axis.CategoryAxis var87 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var88 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var90 = null;
//     var88.setSeriesURLGenerator(10, var90);
//     java.awt.Font var92 = var88.getBaseItemLabelFont();
//     var87.setLabelFont(var92);
//     boolean var94 = var86.equals((java.lang.Object)var92);
//     var32.setBasePositiveItemLabelPosition(var86, true);
//     
//     // Checks the contract:  equals-hashcode on var48 and var86
//     assertTrue("Contract failed: equals-hashcode on var48 and var86", var48.equals(var86) ? var48.hashCode() == var86.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var86 and var48
//     assertTrue("Contract failed: equals-hashcode on var86 and var48", var86.equals(var48) ? var86.hashCode() == var48.hashCode() : true);
// 
//   }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    var0.setBase(0.0d);
    boolean var19 = var0.getAutoPopulateSeriesStroke();
    var0.setBaseCreateEntities(false, false);
    org.jfree.chart.labels.ItemLabelPosition var23 = var0.getPositiveItemLabelPositionFallback();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    var8.setRangeCrosshairLockedOnData(false);
    boolean var18 = var8.isRangeMinorGridlinesVisible();
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var21 = null;
    java.awt.geom.Rectangle2D var22 = null;
    org.jfree.chart.plot.PlotRenderingInfo var24 = null;
    org.jfree.chart.plot.CategoryCrosshairState var25 = null;
    boolean var26 = var20.render(var21, var22, 100, var24, var25);
    org.jfree.chart.event.MarkerChangeEvent var27 = null;
    var20.markerChanged(var27);
    var20.setDrawSharedDomainAxis(true);
    int var31 = var20.getBackgroundImageAlignment();
    boolean var32 = var20.canSelectByRegion();
    int var33 = var20.getDatasetCount();
    org.jfree.chart.JFreeChart var34 = null;
    org.jfree.chart.event.ChartChangeEventType var35 = null;
    org.jfree.chart.event.ChartChangeEvent var36 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var20, var34, var35);
    org.jfree.data.category.DefaultCategoryDataset var37 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var38 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var41 = null;
    var39.setSeriesURLGenerator(10, var41);
    java.awt.Font var43 = var39.getBaseItemLabelFont();
    var38.setLabelFont(var43);
    java.lang.Object var45 = var38.clone();
    org.jfree.chart.axis.ValueAxis var46 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var47 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var49 = null;
    var47.setSeriesURLGenerator(10, var49);
    org.jfree.chart.labels.ItemLabelPosition var52 = var47.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.plot.CategoryPlot var53 = var47.getPlot();
    org.jfree.chart.plot.CategoryPlot var54 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var37, var38, var46, (org.jfree.chart.renderer.category.CategoryItemRenderer)var47);
    boolean var55 = var38.isTickLabelsVisible();
    java.util.List var56 = var20.getCategoriesForAxis(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.mapDatasetToDomainAxes(2, var56);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var12 = null;
    var10.setSeriesOutlineStroke(100, var12);
    java.awt.Paint var15 = null;
    var10.setSeriesOutlinePaint(0, var15, true);
    java.awt.Shape var19 = var10.lookupSeriesShape(10);
    java.awt.Paint var21 = null;
    var10.setSeriesFillPaint(0, var21, false);
    boolean var24 = var10.getBaseShapesVisible();
    java.awt.Paint var25 = var10.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var26 = var10.getBaseNegativeItemLabelPosition();
    var10.setBaseSeriesVisible(false);
    double var29 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var32 = var31.isDrawBarOutline();
    boolean var33 = var31.isDrawBarOutline();
    java.awt.Paint var34 = var31.getShadowPaint();
    org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
    var10.setBaseLegendTextPaint(var34);
    var8.setRangeMinorGridlinePaint(var34);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var39 = null;
    java.awt.geom.Rectangle2D var40 = null;
    org.jfree.chart.plot.PlotRenderingInfo var42 = null;
    org.jfree.chart.plot.CategoryCrosshairState var43 = null;
    boolean var44 = var38.render(var39, var40, 100, var42, var43);
    org.jfree.chart.event.MarkerChangeEvent var45 = null;
    var38.markerChanged(var45);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var49 = var38.getInsets();
    java.awt.Stroke var50 = var38.getRangeZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var52 = var38.getDomainAxisLocation(100);
    boolean var53 = var8.equals((java.lang.Object)var38);
    org.jfree.chart.plot.CategoryMarker var54 = null;
    org.jfree.chart.util.Layer var55 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.addDomainMarker(var54, var55);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }


    org.jfree.chart.plot.DefaultDrawingSupplier var0 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var1 = null;
    org.jfree.chart.event.ChartChangeEvent var2 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var0, var1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var20 = var3.getBaseItemLabelFont();
    boolean var21 = var0.equals((java.lang.Object)var3);
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.renderer.RenderAttributes var24 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Shape var27 = var24.getItemShape(0, 0);
    java.awt.Paint var28 = var24.getDefaultLabelPaint();
    java.lang.Boolean var29 = var24.getDefaultLabelVisible();
    java.awt.Shape var30 = var24.getDefaultShape();
    org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var33 = null;
    java.awt.geom.Rectangle2D var34 = null;
    org.jfree.chart.plot.PlotRenderingInfo var36 = null;
    org.jfree.chart.plot.CategoryCrosshairState var37 = null;
    boolean var38 = var32.render(var33, var34, 100, var36, var37);
    org.jfree.chart.event.MarkerChangeEvent var39 = null;
    var32.markerChanged(var39);
    var32.setDrawSharedDomainAxis(true);
    int var43 = var32.getBackgroundImageAlignment();
    boolean var44 = var32.canSelectByRegion();
    org.jfree.data.category.CategoryDataset var46 = var32.getDataset(15);
    org.jfree.chart.renderer.RenderAttributes var48 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var53 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var48.setSeriesOutlinePaint(0, (java.awt.Paint)var53);
    java.awt.image.ColorModel var55 = null;
    java.awt.Rectangle var56 = null;
    java.awt.geom.Rectangle2D var57 = null;
    java.awt.geom.AffineTransform var58 = null;
    java.awt.RenderingHints var59 = null;
    java.awt.PaintContext var60 = var53.createContext(var55, var56, var57, var58, var59);
    java.awt.Color var61 = java.awt.Color.getColor("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", var53);
    var32.setDomainGridlinePaint((java.awt.Paint)var53);
    var24.setSeriesOutlinePaint(1, (java.awt.Paint)var53);
    var3.setBaseFillPaint((java.awt.Paint)var53, false);
    var3.setSeriesShapesVisible(1, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    var0.setBaseSeriesVisibleInLegend(true);
    java.awt.Font var17 = var0.getBaseLegendTextFont();
    org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var22 = null;
    var20.setSeriesURLGenerator(10, var22);
    java.awt.Font var24 = var20.getBaseItemLabelFont();
    var19.setLabelFont(var24);
    org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
    var26.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var29 = var26.getDomainAxis();
    var19.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var26);
    var19.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var19.setCategoryMargin(1.0d);
    var19.addCategoryLabelToolTip((java.lang.Comparable)(byte)100, "TextAnchor.CENTER");
    org.jfree.chart.renderer.RenderAttributes var40 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var45 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var40.setSeriesOutlinePaint(0, (java.awt.Paint)var45);
    java.awt.image.ColorModel var47 = null;
    java.awt.Rectangle var48 = null;
    java.awt.geom.Rectangle2D var49 = null;
    java.awt.geom.AffineTransform var50 = null;
    java.awt.RenderingHints var51 = null;
    java.awt.PaintContext var52 = var45.createContext(var47, var48, var49, var50, var51);
    java.awt.Color var53 = java.awt.Color.getColor("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", var45);
    var19.setAxisLinePaint((java.awt.Paint)var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesItemLabelPaint((-16777216), (java.awt.Paint)var45, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.util.List var1 = var0.getAnnotations();
//     org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
//     var0.setShadowGenerator((org.jfree.chart.util.ShadowGenerator)var2);
//     org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var8 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var9 = null;
//     boolean var10 = var4.render(var5, var6, 100, var8, var9);
//     org.jfree.chart.util.Layer var11 = null;
//     java.util.Collection var12 = var4.getDomainMarkers(var11);
//     org.jfree.chart.axis.AxisSpace var13 = var4.getFixedRangeAxisSpace();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var16 = null;
//     var14.setSeriesURLGenerator(10, var16);
//     org.jfree.chart.labels.ItemLabelPosition var19 = null;
//     var14.setSeriesNegativeItemLabelPosition(0, var19, true);
//     java.awt.Stroke var23 = var14.lookupSeriesStroke(0);
//     var4.setRangeGridlineStroke(var23);
//     java.awt.Paint var25 = var4.getOutlinePaint();
//     var0.setParent((org.jfree.chart.plot.Plot)var4);
//     org.jfree.chart.event.PlotChangeListener var27 = null;
//     var0.removeChangeListener(var27);
//     org.jfree.chart.plot.Marker var30 = null;
//     org.jfree.chart.util.Layer var31 = null;
//     var0.addRangeMarker(0, var30, var31);
// 
//   }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.util.List var1 = var0.getAnnotations();
    org.jfree.chart.axis.AxisLocation var2 = var0.getDomainAxisLocation();
    boolean var3 = var0.isRangeMinorGridlinesVisible();
    org.jfree.chart.axis.CategoryAxis var4 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var5 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var7 = null;
    var5.setSeriesURLGenerator(10, var7);
    java.awt.Font var9 = var5.getBaseItemLabelFont();
    var4.setLabelFont(var9);
    org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
    var11.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var14 = var11.getDomainAxis();
    var4.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var11);
    var4.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var4.setCategoryMargin(1.0d);
    var4.setMinorTickMarksVisible(false);
    var0.setDomainAxis(var4);
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var29 = null;
    var27.setSeriesOutlineStroke(100, var29);
    java.awt.Paint var32 = null;
    var27.setSeriesOutlinePaint(0, var32, true);
    java.awt.Shape var36 = var27.lookupSeriesShape(10);
    java.awt.Paint var38 = null;
    var27.setSeriesFillPaint(0, var38, false);
    boolean var41 = var27.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var45 = var27.getPositiveItemLabelPosition(1, 10, true);
    java.awt.Paint var46 = var27.getBasePaint();
    boolean var47 = var27.getBaseItemLabelsVisible();
    org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
    var48.setRangeCrosshairValue((-1.0d));
    var48.setNoDataMessage("");
    java.awt.Color var56 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var48.setRangeZeroBaselinePaint((java.awt.Paint)var56);
    org.jfree.chart.util.Layer var58 = null;
    java.util.Collection var59 = var48.getDomainMarkers(var58);
    boolean var60 = var27.hasListener((java.util.EventListener)var48);
    org.jfree.chart.util.RectangleEdge var61 = var48.getRangeAxisEdge();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var62 = var4.getCategoryMiddle(4, 0, var26, var61);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     boolean var7 = var0.getItemCreateEntity(1, 10, true);
//     var0.setSeriesLinesVisible(100, (java.lang.Boolean)true);
//     java.awt.Stroke var12 = var0.lookupSeriesOutlineStroke(4);
//     org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
//     org.jfree.chart.labels.ItemLabelPosition var14 = var13.getNegativeItemLabelPositionFallback();
//     double var15 = var13.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var13.getNegativeItemLabelPositionFallback();
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var18 = null;
//     java.awt.geom.Rectangle2D var19 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var21 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var22 = null;
//     boolean var23 = var17.render(var18, var19, 100, var21, var22);
//     org.jfree.chart.event.MarkerChangeEvent var24 = null;
//     var17.markerChanged(var24);
//     java.awt.Stroke var26 = var17.getRangeGridlineStroke();
//     var13.setBaseOutlineStroke(var26, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var31 = null;
//     var29.setSeriesOutlineStroke(100, var31);
//     java.awt.Paint var34 = null;
//     var29.setSeriesOutlinePaint(0, var34, true);
//     java.awt.Shape var38 = var29.lookupSeriesShape(10);
//     java.awt.Paint var40 = null;
//     var29.setSeriesFillPaint(0, var40, false);
//     boolean var43 = var29.getBaseShapesVisible();
//     java.awt.Paint var44 = var29.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var45 = var29.getBaseNegativeItemLabelPosition();
//     org.jfree.chart.text.TextAnchor var46 = var45.getRotationAnchor();
//     var13.setNegativeItemLabelPositionFallback(var45);
//     var0.setBaseNegativeItemLabelPosition(var45, false);
//     
//     // Checks the contract:  equals-hashcode on var29 and var0
//     assertTrue("Contract failed: equals-hashcode on var29 and var0", var29.equals(var0) ? var29.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var29 and var0.", var29.equals(var0) == var0.equals(var29));
// 
//   }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }


    org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var1 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator("");
    org.jfree.data.category.DefaultCategoryDataset var2 = new org.jfree.data.category.DefaultCategoryDataset();
    var2.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var7 = var2.getRowKeys();
    int var9 = var2.getColumnIndex((java.lang.Comparable)100L);
    java.lang.Object var10 = var2.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = var1.generateLabel((org.jfree.data.category.CategoryDataset)var2, 3);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    org.jfree.chart.util.StrokeList var0 = new org.jfree.chart.util.StrokeList();
    java.awt.Stroke var2 = null;
    var0.setStroke(2, var2);
    java.awt.Stroke var5 = var0.getStroke(0);
    org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var7 = null;
    java.awt.geom.Rectangle2D var8 = null;
    org.jfree.chart.plot.PlotRenderingInfo var10 = null;
    org.jfree.chart.plot.CategoryCrosshairState var11 = null;
    boolean var12 = var6.render(var7, var8, 100, var10, var11);
    org.jfree.chart.event.MarkerChangeEvent var13 = null;
    var6.markerChanged(var13);
    var6.setDrawSharedDomainAxis(true);
    int var17 = var6.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var20 = null;
    var18.setSeriesOutlineStroke(100, var20);
    java.awt.Paint var23 = null;
    var18.setSeriesOutlinePaint(0, var23, true);
    java.awt.Shape var27 = var18.lookupSeriesShape(10);
    java.awt.Paint var29 = null;
    var18.setSeriesFillPaint(0, var29, false);
    boolean var32 = var18.getBaseShapesVisible();
    java.awt.Paint var33 = var18.getBaseOutlinePaint();
    int var34 = var6.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var18);
    int var35 = var6.getWeight();
    org.jfree.chart.axis.AxisSpace var36 = null;
    var6.setFixedRangeAxisSpace(var36, false);
    boolean var39 = var0.equals((java.lang.Object)var36);
    java.awt.Stroke var41 = var0.getStroke(5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = null;
    var0.setSeriesNegativeItemLabelPosition(0, var5, true);
    java.awt.Stroke var9 = var0.lookupSeriesStroke(0);
    var0.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    java.awt.Paint var16 = var0.getItemFillPaint(2, 100, true);
    var0.setAutoPopulateSeriesOutlinePaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var2 = null;
    java.awt.geom.Rectangle2D var3 = null;
    org.jfree.chart.plot.PlotRenderingInfo var5 = null;
    org.jfree.chart.plot.CategoryCrosshairState var6 = null;
    boolean var7 = var1.render(var2, var3, 100, var5, var6);
    org.jfree.chart.event.MarkerChangeEvent var8 = null;
    var1.markerChanged(var8);
    var1.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var12 = var1.getInsets();
    java.awt.Stroke var13 = var1.getRangeZeroBaselineStroke();
    var1.setBackgroundImageAlignment(15);
    org.jfree.chart.util.SortOrder var16 = var1.getColumnRenderingOrder();
    var0.sortByKeys(var16);
    org.jfree.chart.util.SortOrder var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.sortByKeys(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test105() {}
//   public void test105() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var1 = var0.isDrawBarOutline();
//     boolean var2 = var0.isDrawBarOutline();
//     java.awt.Paint var3 = var0.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var8 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var9 = null;
//     boolean var10 = var4.render(var5, var6, 100, var8, var9);
//     boolean var11 = var4.isOutlineVisible();
//     var4.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
//     java.awt.Paint var15 = var4.getBackgroundPaint();
//     var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
//     double var17 = var0.getMinimumBarLength();
//     var0.setMinimumBarLength(0.0d);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var23 = null;
//     var21.setSeriesOutlineStroke(100, var23);
//     java.awt.Paint var26 = null;
//     var21.setSeriesOutlinePaint(0, var26, true);
//     java.awt.Shape var30 = var21.lookupSeriesShape(10);
//     java.awt.Paint var32 = null;
//     var21.setSeriesFillPaint(0, var32, false);
//     boolean var35 = var21.getBaseShapesVisible();
//     var21.setBaseSeriesVisibleInLegend(true);
//     java.awt.Font var38 = var21.getBaseLegendTextFont();
//     java.awt.Shape var40 = var21.getSeriesShape(15);
//     org.jfree.chart.renderer.category.BarRenderer var41 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var42 = var41.isDrawBarOutline();
//     boolean var43 = var41.isDrawBarOutline();
//     java.awt.Paint var44 = var41.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var46 = null;
//     java.awt.geom.Rectangle2D var47 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var49 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var50 = null;
//     boolean var51 = var45.render(var46, var47, 100, var49, var50);
//     boolean var52 = var45.isOutlineVisible();
//     var45.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var55 = var45.getDomainGridlinePosition();
//     java.awt.Paint var56 = var45.getBackgroundPaint();
//     var41.addChangeListener((org.jfree.chart.event.RendererChangeListener)var45);
//     org.jfree.chart.labels.ItemLabelPosition var58 = new org.jfree.chart.labels.ItemLabelPosition();
//     var41.setPositiveItemLabelPositionFallback(var58);
//     var21.setBaseNegativeItemLabelPosition(var58);
//     var0.setSeriesNegativeItemLabelPosition(4, var58, true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var45
//     assertTrue("Contract failed: equals-hashcode on var4 and var45", var4.equals(var45) ? var4.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var45 and var4
//     assertTrue("Contract failed: equals-hashcode on var45 and var4", var45.equals(var4) ? var45.hashCode() == var4.hashCode() : true);
// 
//   }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.axis.AxisSpace var23 = null;
    var22.setFixedRangeAxisSpace(var23);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var28 = null;
    var26.setSeriesOutlineStroke(100, var28);
    java.awt.Paint var31 = null;
    var26.setSeriesOutlinePaint(0, var31, true);
    var26.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var38 = var26.lookupSeriesShape((-1));
    java.awt.Paint var40 = null;
    var26.setLegendTextPaint(0, var40);
    boolean var42 = var26.getAutoPopulateSeriesOutlineStroke();
    var26.setDataBoundsIncludesVisibleSeriesOnly(false);
    var22.setRenderer(1, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
    var22.setRangeCrosshairValue((-14.0d));
    org.jfree.chart.event.MarkerChangeEvent var48 = null;
    var22.markerChanged(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    var0.setSeriesLinesVisible(100, (java.lang.Boolean)true);
    java.awt.Stroke var12 = var0.lookupSeriesOutlineStroke(4);
    var0.setDataBoundsIncludesVisibleSeriesOnly(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    var4.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var16 = var4.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var17 = new org.jfree.chart.entity.ChartEntity(var16);
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var22 = var21.getRed();
    org.jfree.chart.LegendItem var23 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var16, (java.awt.Paint)var21);
    java.lang.String var24 = var23.getLabel();
    org.jfree.data.category.DefaultCategoryDataset var25 = new org.jfree.data.category.DefaultCategoryDataset();
    var25.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    int var30 = var25.getColumnCount();
    var25.setValue((java.lang.Number)0.0d, (java.lang.Comparable)true, (java.lang.Comparable)(short)0);
    var23.setDataset((org.jfree.data.general.Dataset)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var37 = var25.getRowKey(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var12 = null;
    var10.setSeriesOutlineStroke(100, var12);
    java.awt.Paint var15 = null;
    var10.setSeriesOutlinePaint(0, var15, true);
    java.awt.Shape var19 = var10.lookupSeriesShape(10);
    java.awt.Paint var21 = null;
    var10.setSeriesFillPaint(0, var21, false);
    boolean var24 = var10.getBaseShapesVisible();
    java.awt.Paint var25 = var10.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var26 = var10.getBaseNegativeItemLabelPosition();
    var10.setBaseSeriesVisible(false);
    double var29 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var32 = var31.isDrawBarOutline();
    boolean var33 = var31.isDrawBarOutline();
    java.awt.Paint var34 = var31.getShadowPaint();
    org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
    var10.setBaseLegendTextPaint(var34);
    var8.setRangeMinorGridlinePaint(var34);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var39 = null;
    java.awt.geom.Rectangle2D var40 = null;
    org.jfree.chart.plot.PlotRenderingInfo var42 = null;
    org.jfree.chart.plot.CategoryCrosshairState var43 = null;
    boolean var44 = var38.render(var39, var40, 100, var42, var43);
    org.jfree.chart.event.MarkerChangeEvent var45 = null;
    var38.markerChanged(var45);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var49 = var38.getInsets();
    java.awt.Stroke var50 = var38.getRangeZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var52 = var38.getDomainAxisLocation(100);
    boolean var53 = var8.equals((java.lang.Object)var38);
    org.jfree.chart.renderer.category.CategoryItemRenderer var55 = var38.getRenderer(3);
    org.jfree.chart.axis.ValueAxis var56 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var57 = var38.getRangeAxisIndex(var56);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }
// 
// 
//     org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     boolean var8 = var1.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     var1.setPlot(var9);
//     org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
//     org.jfree.chart.plot.PlotRenderingInfo var14 = null;
//     java.awt.geom.Point2D var15 = null;
//     var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
//     org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
//     boolean var19 = var0.equals((java.lang.Object)var9);
//     java.util.List var20 = var0.getKeys();
//     java.util.List var21 = var0.getKeys();
//     org.jfree.chart.renderer.RenderAttributes var23 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var26 = var23.getItemShape(0, 0);
//     java.awt.Paint var29 = var23.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.setRangeCrosshairValue((-1.0d));
//     var30.setNoDataMessage("");
//     java.awt.Color var38 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var30.setRangeZeroBaselinePaint((java.awt.Paint)var38);
//     var23.setDefaultFillPaint((java.awt.Paint)var38);
//     java.awt.Stroke var42 = var23.getSeriesStroke(3);
//     var0.addObject((java.lang.Comparable)(short)100, (java.lang.Object)var23);
//     java.lang.Boolean var46 = var23.isLabelVisible((-16777216), 1);
// 
//   }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.util.Layer var7 = null;
    java.util.Collection var8 = var0.getDomainMarkers(var7);
    java.awt.Paint var9 = var0.getOutlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var13 = null;
    var11.setSeriesURLGenerator(10, var13);
    org.jfree.chart.labels.ItemLabelPosition var16 = null;
    var11.setSeriesNegativeItemLabelPosition(0, var16, true);
    org.jfree.chart.labels.ItemLabelPosition var22 = var11.getPositiveItemLabelPosition(0, 1, false);
    var0.setRenderer(0, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11, true);
    org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var28 = var26.getRangeAxisLocation(10);
    var0.setDomainAxisLocation(0, var28);
    org.jfree.chart.plot.DatasetRenderingOrder var30 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDatasetRenderingOrder(var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }


    java.text.AttributedString var0 = null;
    java.awt.Shape var4 = null;
    org.jfree.chart.axis.CategoryAxis var5 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var8 = null;
    var6.setSeriesURLGenerator(10, var8);
    java.awt.Font var10 = var6.getBaseItemLabelFont();
    var5.setLabelFont(var10);
    java.lang.Object var12 = var5.clone();
    var5.setVisible(true);
    boolean var15 = var5.isAxisLineVisible();
    var5.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    var5.setAxisLineVisible(true);
    org.jfree.chart.util.RectangleInsets var20 = var5.getLabelInsets();
    java.awt.Stroke var21 = var5.getAxisLineStroke();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var24 = null;
    var22.setSeriesOutlineStroke(100, var24);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var29 = null;
    var27.setSeriesURLGenerator(10, var29);
    org.jfree.chart.labels.ItemLabelPosition var32 = null;
    var27.setSeriesNegativeItemLabelPosition(0, var32, true);
    java.awt.Stroke var36 = var27.lookupSeriesStroke(0);
    var27.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    java.awt.Paint var43 = var27.getItemFillPaint(2, 100, true);
    var22.setSeriesPaint(3, var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem(var0, "NOID", "", "NOID", var4, var21, var43);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    boolean var7 = var0.isOutlineVisible();
    var0.setDomainGridlinesVisible(true);
    boolean var10 = var0.isSubplot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setFixedDimension(2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.setRangeCrosshairValue((-1.0d));
    var0.setPlot((org.jfree.chart.plot.Plot)var19);
    var19.setCrosshairDatasetIndex(4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var27 = null;
    var25.setSeriesOutlineStroke(100, var27);
    java.awt.Paint var30 = null;
    var25.setSeriesOutlinePaint(0, var30, true);
    java.awt.Shape var34 = var25.lookupSeriesShape(10);
    java.awt.Paint var36 = null;
    var25.setSeriesFillPaint(0, var36, false);
    boolean var39 = var25.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var43 = var25.getPositiveItemLabelPosition(1, 10, true);
    java.awt.Paint var44 = var25.getBasePaint();
    boolean var45 = var25.getBaseItemLabelsVisible();
    org.jfree.chart.plot.CategoryPlot var46 = new org.jfree.chart.plot.CategoryPlot();
    var46.setRangeCrosshairValue((-1.0d));
    var46.setNoDataMessage("");
    java.awt.Color var54 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var46.setRangeZeroBaselinePaint((java.awt.Paint)var54);
    org.jfree.chart.util.Layer var56 = null;
    java.util.Collection var57 = var46.getDomainMarkers(var56);
    boolean var58 = var25.hasListener((java.util.EventListener)var46);
    var25.setBaseCreateEntities(false, true);
    int var62 = var19.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var25);
    boolean var66 = var25.getItemCreateEntity(2, (-254), true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var23 = var11.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var24 = new org.jfree.chart.entity.ChartEntity(var23);
    var0.setBaseShape(var23, false);
    org.jfree.data.category.DefaultCategoryDataset var29 = new org.jfree.data.category.DefaultCategoryDataset();
    var29.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var34 = var29.getRowKeys();
    org.jfree.chart.entity.CategoryItemEntity var37 = new org.jfree.chart.entity.CategoryItemEntity(var23, "ChartEntity: tooltip = null", "-3,-3,3,3", (org.jfree.data.category.CategoryDataset)var29, (java.lang.Comparable)"TextAnchor.CENTER", (java.lang.Comparable)(-1L));
    var37.setColumnKey((java.lang.Comparable)(byte)0);
    org.jfree.data.category.CategoryDataset var40 = var37.getDataset();
    org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
    var41.setRangeCrosshairValue((-1.0d));
    var41.setNoDataMessage("");
    java.awt.Color var49 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var41.setRangeZeroBaselinePaint((java.awt.Paint)var49);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var52 = null;
    java.awt.geom.Rectangle2D var53 = null;
    org.jfree.chart.plot.PlotRenderingInfo var55 = null;
    org.jfree.chart.plot.CategoryCrosshairState var56 = null;
    boolean var57 = var51.render(var52, var53, 100, var55, var56);
    boolean var58 = var51.isOutlineVisible();
    var51.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var61 = var51.getDomainGridlinePosition();
    var41.setDomainGridlinePosition(var61);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var63 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var63.setBaseSeriesVisibleInLegend(false, true);
    java.awt.Graphics2D var67 = null;
    java.awt.geom.Rectangle2D var68 = null;
    org.jfree.chart.plot.CategoryPlot var69 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var70 = null;
    java.awt.geom.Rectangle2D var71 = null;
    org.jfree.chart.plot.PlotRenderingInfo var73 = null;
    org.jfree.chart.plot.CategoryCrosshairState var74 = null;
    boolean var75 = var69.render(var70, var71, 100, var73, var74);
    org.jfree.chart.event.MarkerChangeEvent var76 = null;
    var69.markerChanged(var76);
    var69.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var80 = var69.getDrawingSupplier();
    java.awt.Paint var81 = var69.getRangeGridlinePaint();
    var69.setForegroundAlpha((-1.0f));
    org.jfree.data.category.DefaultCategoryDataset var84 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.plot.PlotRenderingInfo var85 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var86 = var63.initialise(var67, var68, var69, (org.jfree.data.category.CategoryDataset)var84, var85);
    int var87 = var41.indexOf((org.jfree.data.category.CategoryDataset)var84);
    var37.setDataset((org.jfree.data.category.CategoryDataset)var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var91 = var84.getValue((java.lang.Comparable)(-1.8d), (java.lang.Comparable)(-0.7853981633974483d));
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    org.jfree.chart.axis.AxisLocation var15 = var0.getDomainAxisLocation(0);
    org.jfree.chart.plot.PlotRenderingInfo var17 = null;
    java.awt.geom.Point2D var18 = null;
    var0.zoomRangeAxes(4.0d, var17, var18);
    java.awt.Graphics2D var20 = null;
    java.awt.geom.Rectangle2D var21 = null;
    org.jfree.chart.plot.PlotRenderingInfo var23 = null;
    org.jfree.chart.plot.CategoryCrosshairState var24 = null;
    boolean var25 = var0.render(var20, var21, 1, var23, var24);
    org.jfree.chart.event.AxisChangeEvent var26 = null;
    var0.axisChanged(var26);
    boolean var28 = var0.getDrawSharedDomainAxis();
    org.jfree.chart.axis.CategoryAxis var30 = var0.getDomainAxis(5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }


    org.jfree.chart.util.StandardGradientPaintTransformer var0 = new org.jfree.chart.util.StandardGradientPaintTransformer();
    boolean var2 = var0.equals((java.lang.Object)(short)100);
    org.jfree.chart.util.GradientPaintTransformType var3 = var0.getType();
    org.jfree.chart.util.StandardGradientPaintTransformer var4 = new org.jfree.chart.util.StandardGradientPaintTransformer(var3);
    org.jfree.chart.util.GradientPaintTransformType var5 = var4.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    var0.setAxisLineVisible(true);
    org.jfree.chart.util.RectangleInsets var15 = var0.getLabelInsets();
    java.awt.Stroke var16 = var0.getAxisLineStroke();
    var0.setCategoryMargin(0.2d);
    java.lang.Comparable var19 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeCategoryLabelToolTip(var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.data.KeyedObject var2 = new org.jfree.data.KeyedObject((java.lang.Comparable)2.0d, (java.lang.Object)var1);
//     org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var4 = null;
//     org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
//     boolean var6 = var2.equals((java.lang.Object)var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     java.util.List var8 = var7.getAnnotations();
//     org.jfree.chart.axis.AxisLocation var9 = var7.getDomainAxisLocation();
//     boolean var10 = var7.isRangeMinorGridlinesVisible();
//     org.jfree.chart.JFreeChart var11 = null;
//     org.jfree.chart.renderer.RenderAttributes var12 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var15 = var12.getItemShape(0, 0);
//     java.awt.Paint var16 = var12.getDefaultLabelPaint();
//     java.lang.Boolean var17 = var12.getDefaultLabelVisible();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var20 = null;
//     var18.setSeriesOutlineStroke(100, var20);
//     java.awt.Paint var23 = null;
//     var18.setSeriesOutlinePaint(0, var23, true);
//     java.awt.Shape var27 = var18.lookupSeriesShape(10);
//     java.awt.Paint var29 = null;
//     var18.setSeriesFillPaint(0, var29, false);
//     boolean var32 = var18.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var34 = var18.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var35 = var18.getBaseItemLabelFont();
//     var12.setDefaultLabelFont(var35);
//     org.jfree.chart.JFreeChart var37 = null;
//     org.jfree.chart.plot.DefaultDrawingSupplier var38 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var39 = null;
//     org.jfree.chart.event.ChartChangeEvent var40 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var38, var39);
//     org.jfree.chart.event.ChartChangeEventType var41 = var40.getType();
//     org.jfree.chart.event.ChartChangeEvent var42 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var12, var37, var41);
//     org.jfree.chart.event.ChartChangeEvent var43 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var10, var11, var41);
//     var5.setType(var41);
//     
//     // Checks the contract:  equals-hashcode on var1 and var18
//     assertTrue("Contract failed: equals-hashcode on var1 and var18", var1.equals(var18) ? var1.hashCode() == var18.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var1
//     assertTrue("Contract failed: equals-hashcode on var18 and var1", var18.equals(var1) ? var18.hashCode() == var1.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var38
//     assertTrue("Contract failed: equals-hashcode on var3 and var38", var3.equals(var38) ? var3.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var3
//     assertTrue("Contract failed: equals-hashcode on var38 and var3", var38.equals(var3) ? var38.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    var8.setRangeCrosshairLockedOnData(false);
    boolean var18 = var8.isRangeMinorGridlinesVisible();
    org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis();
    var19.setLabel("ChartEntity: tooltip = null");
    org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var24 = null;
    var22.setSeriesURLGenerator(10, var24);
    java.awt.Font var26 = var22.getBaseItemLabelFont();
    var19.setTickLabelFont(var26);
    var8.setNoDataMessageFont(var26);
    org.jfree.chart.axis.ValueAxis var30 = null;
    var8.setRangeAxis(2, var30, false);
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.plot.PlotRenderingInfo var37 = null;
    org.jfree.chart.plot.CategoryCrosshairState var38 = null;
    boolean var39 = var33.render(var34, var35, 100, var37, var38);
    org.jfree.chart.util.Layer var40 = null;
    java.util.Collection var41 = var33.getDomainMarkers(var40);
    java.awt.Paint var42 = var33.getOutlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var44 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var46 = null;
    var44.setSeriesURLGenerator(10, var46);
    org.jfree.chart.labels.ItemLabelPosition var49 = null;
    var44.setSeriesNegativeItemLabelPosition(0, var49, true);
    org.jfree.chart.labels.ItemLabelPosition var55 = var44.getPositiveItemLabelPosition(0, 1, false);
    var33.setRenderer(0, (org.jfree.chart.renderer.category.CategoryItemRenderer)var44, true);
    var8.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var44);
    var8.setBackgroundImageAlpha(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }
// 
// 
//     org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
//     java.util.List var1 = var0.getRowKeys();
//     int var2 = var0.getColumnCount();
//     java.lang.Object var3 = null;
//     boolean var4 = var0.equals(var3);
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var6 = null;
//     java.awt.geom.Rectangle2D var7 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var9 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var10 = null;
//     boolean var11 = var5.render(var6, var7, 100, var9, var10);
//     org.jfree.chart.event.MarkerChangeEvent var12 = null;
//     var5.markerChanged(var12);
//     var5.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var16 = var5.getInsets();
//     java.awt.Stroke var17 = var5.getRangeZeroBaselineStroke();
//     var0.addObject((java.lang.Object)var5, (java.lang.Comparable)100, (java.lang.Comparable)'4');
//     boolean var21 = var5.isDomainZoomable();
//     java.awt.Image var22 = null;
//     var5.setBackgroundImage(var22);
//     org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
//     var24.setWeight(10);
//     org.jfree.chart.plot.DefaultDrawingSupplier var27 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var28 = null;
//     org.jfree.chart.event.ChartChangeEvent var29 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var27, var28);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var32 = null;
//     var30.setSeriesOutlineStroke(100, var32);
//     java.awt.Paint var35 = null;
//     var30.setSeriesOutlinePaint(0, var35, true);
//     java.awt.Shape var39 = var30.lookupSeriesShape(10);
//     java.awt.Paint var41 = null;
//     var30.setSeriesFillPaint(0, var41, false);
//     boolean var44 = var30.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var46 = var30.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var47 = var30.getBaseItemLabelFont();
//     boolean var48 = var27.equals((java.lang.Object)var30);
//     var24.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var27);
//     var5.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var27);
//     org.jfree.chart.event.PlotChangeEvent var51 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var5);
//     org.jfree.data.category.DefaultCategoryDataset var52 = new org.jfree.data.category.DefaultCategoryDataset();
//     org.jfree.chart.axis.CategoryAxis var53 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var56 = null;
//     var54.setSeriesURLGenerator(10, var56);
//     java.awt.Font var58 = var54.getBaseItemLabelFont();
//     var53.setLabelFont(var58);
//     java.lang.Object var60 = var53.clone();
//     org.jfree.chart.axis.ValueAxis var61 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var62 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var64 = null;
//     var62.setSeriesURLGenerator(10, var64);
//     org.jfree.chart.labels.ItemLabelPosition var67 = var62.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.plot.CategoryPlot var68 = var62.getPlot();
//     org.jfree.chart.plot.CategoryPlot var69 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var52, var53, var61, (org.jfree.chart.renderer.category.CategoryItemRenderer)var62);
//     var52.fireSelectionEvent();
//     var5.setDataset((org.jfree.data.category.CategoryDataset)var52);
//     
//     // Checks the contract:  equals-hashcode on var30 and var54
//     assertTrue("Contract failed: equals-hashcode on var30 and var54", var30.equals(var54) ? var30.hashCode() == var54.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var62
//     assertTrue("Contract failed: equals-hashcode on var30 and var62", var30.equals(var62) ? var30.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var30
//     assertTrue("Contract failed: equals-hashcode on var54 and var30", var54.equals(var30) ? var54.hashCode() == var30.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var62 and var30
//     assertTrue("Contract failed: equals-hashcode on var62 and var30", var62.equals(var30) ? var62.hashCode() == var30.hashCode() : true);
// 
//   }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     org.jfree.chart.labels.ItemLabelPosition var5 = var0.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.text.TextAnchor var6 = var5.getRotationAnchor();
//     java.lang.String var7 = var6.toString();
//     org.jfree.chart.JFreeChart var8 = null;
//     org.jfree.chart.renderer.RenderAttributes var9 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var12 = var9.getItemShape(0, 0);
//     java.awt.Paint var13 = var9.getDefaultLabelPaint();
//     java.lang.Boolean var14 = var9.getDefaultLabelVisible();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var17 = null;
//     var15.setSeriesOutlineStroke(100, var17);
//     java.awt.Paint var20 = null;
//     var15.setSeriesOutlinePaint(0, var20, true);
//     java.awt.Shape var24 = var15.lookupSeriesShape(10);
//     java.awt.Paint var26 = null;
//     var15.setSeriesFillPaint(0, var26, false);
//     boolean var29 = var15.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var31 = var15.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var32 = var15.getBaseItemLabelFont();
//     var9.setDefaultLabelFont(var32);
//     org.jfree.chart.JFreeChart var34 = null;
//     org.jfree.chart.plot.DefaultDrawingSupplier var35 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var36 = null;
//     org.jfree.chart.event.ChartChangeEvent var37 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var35, var36);
//     org.jfree.chart.event.ChartChangeEventType var38 = var37.getType();
//     org.jfree.chart.event.ChartChangeEvent var39 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var9, var34, var38);
//     org.jfree.chart.event.ChartChangeEvent var40 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var6, var8, var38);
//     
//     // Checks the contract:  equals-hashcode on var0 and var15
//     assertTrue("Contract failed: equals-hashcode on var0 and var15", var0.equals(var15) ? var0.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var0
//     assertTrue("Contract failed: equals-hashcode on var15 and var0", var15.equals(var0) ? var15.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     java.lang.Object var7 = var0.clone();
//     var0.setVisible(true);
//     boolean var10 = var0.isAxisLineVisible();
//     var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     java.lang.String var13 = var0.getLabelURL();
//     java.lang.String var15 = var0.getCategoryLabelToolTip((java.lang.Comparable)4.0d);
//     var0.setMinorTickMarkOutsideLength((-1.0f));
//     java.awt.geom.Rectangle2D var20 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var23 = null;
//     var21.setSeriesOutlineStroke(100, var23);
//     java.awt.Paint var26 = null;
//     var21.setSeriesOutlinePaint(0, var26, true);
//     java.awt.Shape var30 = var21.lookupSeriesShape(10);
//     java.awt.Paint var32 = null;
//     var21.setSeriesFillPaint(0, var32, false);
//     boolean var35 = var21.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var39 = var21.getPositiveItemLabelPosition(1, 10, true);
//     java.awt.Paint var40 = var21.getBasePaint();
//     boolean var41 = var21.getBaseItemLabelsVisible();
//     org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
//     var42.setRangeCrosshairValue((-1.0d));
//     var42.setNoDataMessage("");
//     java.awt.Color var50 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var42.setRangeZeroBaselinePaint((java.awt.Paint)var50);
//     org.jfree.chart.util.Layer var52 = null;
//     java.util.Collection var53 = var42.getDomainMarkers(var52);
//     boolean var54 = var21.hasListener((java.util.EventListener)var42);
//     org.jfree.chart.util.RectangleEdge var55 = var42.getRangeAxisEdge();
//     double var56 = var0.getCategoryEnd((-16777216), 15, var20, var55);
// 
//   }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    org.jfree.chart.util.DefaultShadowGenerator var0 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var1 = var0.calculateOffsetX();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var3 = null;
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.plot.PlotRenderingInfo var6 = null;
    org.jfree.chart.plot.CategoryCrosshairState var7 = null;
    boolean var8 = var2.render(var3, var4, 100, var6, var7);
    boolean var9 = var2.isOutlineVisible();
    var2.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var12 = var2.getDomainGridlinePosition();
    boolean var13 = var0.equals((java.lang.Object)var2);
    int var14 = var0.getDistance();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 5);

  }

  public void test125() {}
//   public void test125() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var1 = null;
//     org.jfree.chart.axis.ValueAxis var2 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var5 = null;
//     var3.setSeriesOutlineStroke(100, var5);
//     java.awt.Paint var8 = null;
//     var3.setSeriesOutlinePaint(0, var8, true);
//     java.awt.Shape var12 = var3.lookupSeriesShape(10);
//     java.awt.Paint var14 = null;
//     var3.setSeriesFillPaint(0, var14, false);
//     boolean var17 = var3.getBaseShapesVisible();
//     java.awt.Paint var18 = var3.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
//     var3.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
//     org.jfree.chart.axis.AxisSpace var23 = null;
//     var22.setFixedRangeAxisSpace(var23);
//     org.jfree.chart.util.RectangleEdge var26 = var22.getDomainAxisEdge(15);
//     int var27 = var22.getRangeAxisCount();
//     java.awt.Graphics2D var28 = null;
//     java.awt.geom.Rectangle2D var29 = null;
//     var22.drawBackground(var28, var29);
// 
//   }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    org.jfree.chart.util.RectangleInsets var14 = new org.jfree.chart.util.RectangleInsets(0.0d, 0.0d, 0.0d, 0.0d);
    var0.setAxisOffset(var14);
    boolean var16 = var0.isNotify();
    org.jfree.chart.axis.ValueAxis var18 = var0.getRangeAxisForDataset(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     var0.setBase((-1.0d));
//     boolean var3 = var0.getAutoPopulateSeriesOutlinePaint();
//     org.jfree.chart.util.GradientPaintTransformer var4 = var0.getGradientPaintTransformer();
//     double var5 = var0.getMaximumBarWidth();
//     java.awt.Graphics2D var6 = null;
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var11 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var12 = null;
//     boolean var13 = var7.render(var8, var9, 100, var11, var12);
//     org.jfree.chart.event.MarkerChangeEvent var14 = null;
//     var7.markerChanged(var14);
//     var7.setDrawSharedDomainAxis(true);
//     int var18 = var7.getBackgroundImageAlignment();
//     boolean var19 = var7.canSelectByRegion();
//     int var20 = var7.getDatasetCount();
//     java.awt.geom.Rectangle2D var21 = null;
//     var0.drawOutline(var6, var7, var21);
// 
//   }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setTickMarkOutsideLength(100.0f);
    java.awt.Stroke var19 = var0.getTickMarkStroke();
    var0.clearCategoryLabelToolTips();
    java.lang.String var22 = var0.getCategoryLabelToolTip((java.lang.Comparable)(short)0);
    double var23 = var0.getLowerMargin();
    var0.setTickMarkInsideLength(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.05d);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.util.Layer var7 = null;
    java.util.Collection var8 = var0.getDomainMarkers(var7);
    org.jfree.chart.axis.AxisSpace var9 = var0.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.CategoryItemRenderer var11 = var0.getRenderer(1);
    var0.setRangeCrosshairVisible(false);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)' ');
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    java.awt.Shape var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.entity.ChartEntity var3 = new org.jfree.chart.entity.ChartEntity(var0, "Category Plot", "org.jfree.data.UnknownKeyException: ChartEntity: tooltip = null");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    var8.setRangeCrosshairLockedOnData(false);
    boolean var18 = var8.isRangeMinorGridlinesVisible();
    org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis();
    var19.setLabel("ChartEntity: tooltip = null");
    org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var24 = null;
    var22.setSeriesURLGenerator(10, var24);
    java.awt.Font var26 = var22.getBaseItemLabelFont();
    var19.setTickLabelFont(var26);
    var8.setNoDataMessageFont(var26);
    org.jfree.chart.axis.ValueAxis var30 = null;
    var8.setRangeAxis(2, var30, false);
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.plot.PlotRenderingInfo var37 = null;
    org.jfree.chart.plot.CategoryCrosshairState var38 = null;
    boolean var39 = var33.render(var34, var35, 100, var37, var38);
    org.jfree.chart.util.Layer var40 = null;
    java.util.Collection var41 = var33.getDomainMarkers(var40);
    java.awt.Paint var42 = var33.getOutlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var44 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var46 = null;
    var44.setSeriesURLGenerator(10, var46);
    org.jfree.chart.labels.ItemLabelPosition var49 = null;
    var44.setSeriesNegativeItemLabelPosition(0, var49, true);
    org.jfree.chart.labels.ItemLabelPosition var55 = var44.getPositiveItemLabelPosition(0, 1, false);
    var33.setRenderer(0, (org.jfree.chart.renderer.category.CategoryItemRenderer)var44, true);
    var8.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var44);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var62 = null;
    var60.setSeriesOutlineStroke(100, var62);
    java.awt.Paint var65 = null;
    var60.setSeriesOutlinePaint(0, var65, true);
    var60.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var71 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var73 = null;
    var71.setSeriesOutlineStroke(100, var73);
    java.awt.Paint var76 = null;
    var71.setSeriesOutlinePaint(0, var76, true);
    var71.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var83 = var71.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var84 = new org.jfree.chart.entity.ChartEntity(var83);
    var60.setBaseShape(var83, false);
    org.jfree.data.category.DefaultCategoryDataset var89 = new org.jfree.data.category.DefaultCategoryDataset();
    var89.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var94 = var89.getRowKeys();
    org.jfree.chart.entity.CategoryItemEntity var97 = new org.jfree.chart.entity.CategoryItemEntity(var83, "ChartEntity: tooltip = null", "-3,-3,3,3", (org.jfree.data.category.CategoryDataset)var89, (java.lang.Comparable)"TextAnchor.CENTER", (java.lang.Comparable)(-1L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setDataset((-2), (org.jfree.data.category.CategoryDataset)var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    java.awt.Font var4 = var0.getBaseItemLabelFont();
    org.jfree.chart.labels.CategorySeriesLabelGenerator var5 = null;
    var0.setLegendItemToolTipGenerator(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    org.jfree.chart.plot.PlotRenderingInfo var11 = null;
    org.jfree.chart.plot.CategoryCrosshairState var12 = null;
    boolean var13 = var7.render(var8, var9, 100, var11, var12);
    org.jfree.chart.event.MarkerChangeEvent var14 = null;
    var7.markerChanged(var14);
    var7.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var18 = var7.getInsets();
    java.awt.Stroke var19 = var7.getRangeZeroBaselineStroke();
    var0.setBaseOutlineStroke(var19, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.util.Layer var7 = null;
    java.util.Collection var8 = var0.getDomainMarkers(var7);
    java.awt.Paint var9 = var0.getOutlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var13 = null;
    var11.setSeriesURLGenerator(10, var13);
    org.jfree.chart.labels.ItemLabelPosition var16 = null;
    var11.setSeriesNegativeItemLabelPosition(0, var16, true);
    org.jfree.chart.labels.ItemLabelPosition var22 = var11.getPositiveItemLabelPosition(0, 1, false);
    var0.setRenderer(0, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11, true);
    var0.setAnchorValue(100.0d, false);
    java.lang.Comparable var28 = null;
    var0.setDomainCrosshairColumnKey(var28);
    org.jfree.chart.axis.AxisSpace var30 = var0.getFixedRangeAxisSpace();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }


    org.jfree.chart.util.StrokeList var0 = new org.jfree.chart.util.StrokeList();
    java.awt.Stroke var2 = null;
    var0.setStroke(2, var2);
    java.lang.Object var4 = var0.clone();
    java.lang.Object var5 = null;
    boolean var6 = var0.equals(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test135() {}
//   public void test135() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     double var1 = var0.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var2 = var0.getNegativeItemLabelPositionFallback();
//     var0.removeAnnotations();
//     org.jfree.chart.renderer.category.BarRenderer var6 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var7 = var6.isDrawBarOutline();
//     boolean var8 = var6.isDrawBarOutline();
//     java.awt.Paint var9 = var6.getShadowPaint();
//     org.jfree.chart.LegendItem var10 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var9);
//     java.awt.Stroke var11 = var10.getLineStroke();
//     java.awt.Stroke var12 = var10.getOutlineStroke();
//     java.awt.Paint var13 = var10.getOutlinePaint();
//     var0.setSeriesFillPaint(10, var13);
//     
//     // Checks the contract:  equals-hashcode on var6 and var0
//     assertTrue("Contract failed: equals-hashcode on var6 and var0", var6.equals(var0) ? var6.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var6 and var0.", var6.equals(var0) == var0.equals(var6));
// 
//   }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }
// 
// 
//     java.util.Locale var1 = null;
//     java.lang.ClassLoader var2 = null;
//     java.util.ResourceBundle var3 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("DatasetRenderingOrder.REVERSE", var1, var2);
// 
//   }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var12 = var10.getRangeAxisLocation(10);
    java.awt.Stroke var13 = var10.getRangeCrosshairStroke();
    org.jfree.chart.util.RectangleInsets var14 = var10.getInsets();
    var0.setTickLabelInsets(var14);
    java.awt.geom.Rectangle2D var16 = null;
    org.jfree.chart.util.LengthAdjustmentType var17 = null;
    org.jfree.chart.util.LengthAdjustmentType var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var19 = var14.createAdjustedRectangle(var16, var17, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    int var10 = var0.getBackgroundImageAlignment();
    boolean var11 = var0.isDomainZoomable();
    org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis();
    var12.setLabel("ChartEntity: tooltip = null");
    var0.setDomainAxis(var12);
    org.jfree.chart.util.RectangleInsets var16 = var12.getTickLabelInsets();
    java.awt.geom.Rectangle2D var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var18 = var16.createInsetRectangle(var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var1 = var0.getNegativeItemLabelPositionFallback();
    org.jfree.chart.labels.ItemLabelPosition var5 = var0.getNegativeItemLabelPosition((-1), 0, true);
    java.awt.Paint var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBaseItemLabelPaint(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test140() {}
//   public void test140() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     java.awt.Paint var11 = null;
//     var0.setSeriesFillPaint(0, var11, false);
//     boolean var14 = var0.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var0.getSeriesNegativeItemLabelPosition(2);
//     org.jfree.chart.urls.CategoryURLGenerator var17 = null;
//     var0.setBaseURLGenerator(var17, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var22 = null;
//     var20.setSeriesURLGenerator(10, var22);
//     org.jfree.chart.labels.ItemLabelPosition var25 = var20.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.text.TextAnchor var26 = var25.getRotationAnchor();
//     var0.setBaseNegativeItemLabelPosition(var25, true);
//     java.awt.Shape var30 = var0.lookupSeriesShape(100);
//     org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var32 = null;
//     java.awt.geom.Rectangle2D var33 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var35 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var36 = null;
//     boolean var37 = var31.render(var32, var33, 100, var35, var36);
//     org.jfree.chart.event.MarkerChangeEvent var38 = null;
//     var31.markerChanged(var38);
//     var31.setDrawSharedDomainAxis(true);
//     int var42 = var31.getBackgroundImageAlignment();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var43 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var45 = null;
//     var43.setSeriesOutlineStroke(100, var45);
//     java.awt.Paint var48 = null;
//     var43.setSeriesOutlinePaint(0, var48, true);
//     java.awt.Shape var52 = var43.lookupSeriesShape(10);
//     java.awt.Paint var54 = null;
//     var43.setSeriesFillPaint(0, var54, false);
//     boolean var57 = var43.getBaseShapesVisible();
//     java.awt.Paint var58 = var43.getBaseOutlinePaint();
//     int var59 = var31.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var43);
//     int var60 = var31.getWeight();
//     int var61 = var31.getCrosshairDatasetIndex();
//     var31.setDomainCrosshairVisible(true);
//     org.jfree.chart.entity.PlotEntity var66 = new org.jfree.chart.entity.PlotEntity(var30, (org.jfree.chart.plot.Plot)var31, "ChartChangeEventType.GENERAL", "RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]");
//     
//     // Checks the contract:  equals-hashcode on var20 and var43
//     assertTrue("Contract failed: equals-hashcode on var20 and var43", var20.equals(var43) ? var20.hashCode() == var43.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var43 and var20
//     assertTrue("Contract failed: equals-hashcode on var43 and var20", var43.equals(var20) ? var43.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var0.removeRangeMarker(var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var23 = var11.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var24 = new org.jfree.chart.entity.ChartEntity(var23);
    var0.setBaseShape(var23, false);
    org.jfree.data.category.DefaultCategoryDataset var29 = new org.jfree.data.category.DefaultCategoryDataset();
    var29.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var34 = var29.getRowKeys();
    org.jfree.chart.entity.CategoryItemEntity var37 = new org.jfree.chart.entity.CategoryItemEntity(var23, "ChartEntity: tooltip = null", "-3,-3,3,3", (org.jfree.data.category.CategoryDataset)var29, (java.lang.Comparable)"TextAnchor.CENTER", (java.lang.Comparable)(-1L));
    var37.setColumnKey((java.lang.Comparable)(byte)0);
    org.jfree.data.category.CategoryDataset var40 = var37.getDataset();
    org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
    var41.setRangeCrosshairValue((-1.0d));
    var41.setNoDataMessage("");
    java.awt.Color var49 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var41.setRangeZeroBaselinePaint((java.awt.Paint)var49);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var52 = null;
    java.awt.geom.Rectangle2D var53 = null;
    org.jfree.chart.plot.PlotRenderingInfo var55 = null;
    org.jfree.chart.plot.CategoryCrosshairState var56 = null;
    boolean var57 = var51.render(var52, var53, 100, var55, var56);
    boolean var58 = var51.isOutlineVisible();
    var51.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var61 = var51.getDomainGridlinePosition();
    var41.setDomainGridlinePosition(var61);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var63 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var63.setBaseSeriesVisibleInLegend(false, true);
    java.awt.Graphics2D var67 = null;
    java.awt.geom.Rectangle2D var68 = null;
    org.jfree.chart.plot.CategoryPlot var69 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var70 = null;
    java.awt.geom.Rectangle2D var71 = null;
    org.jfree.chart.plot.PlotRenderingInfo var73 = null;
    org.jfree.chart.plot.CategoryCrosshairState var74 = null;
    boolean var75 = var69.render(var70, var71, 100, var73, var74);
    org.jfree.chart.event.MarkerChangeEvent var76 = null;
    var69.markerChanged(var76);
    var69.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var80 = var69.getDrawingSupplier();
    java.awt.Paint var81 = var69.getRangeGridlinePaint();
    var69.setForegroundAlpha((-1.0f));
    org.jfree.data.category.DefaultCategoryDataset var84 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.plot.PlotRenderingInfo var85 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var86 = var63.initialise(var67, var68, var69, (org.jfree.data.category.CategoryDataset)var84, var85);
    int var87 = var41.indexOf((org.jfree.data.category.CategoryDataset)var84);
    var37.setDataset((org.jfree.data.category.CategoryDataset)var84);
    java.lang.String var89 = var37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }


    org.jfree.chart.util.StandardGradientPaintTransformer var0 = new org.jfree.chart.util.StandardGradientPaintTransformer();
    boolean var2 = var0.equals((java.lang.Object)(short)100);
    org.jfree.chart.util.GradientPaintTransformType var3 = var0.getType();
    org.jfree.chart.renderer.category.BarRenderer var4 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var5 = var4.getNegativeItemLabelPositionFallback();
    double var6 = var4.getBase();
    org.jfree.chart.renderer.RenderAttributes var7 = var4.getSelectedItemAttributes();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var10 = null;
    var8.setSeriesURLGenerator(10, var10);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var14 = null;
    var12.setSeriesURLGenerator(10, var14);
    org.jfree.chart.labels.ItemLabelPosition var17 = null;
    var12.setSeriesNegativeItemLabelPosition(0, var17, true);
    java.awt.Stroke var21 = var12.lookupSeriesStroke(0);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var22 = var12.getLegendItemURLGenerator();
    var12.setSeriesItemLabelsVisible(0, true);
    java.awt.Font var29 = var12.getItemLabelFont(0, (-16777216), true);
    var8.setBaseLegendTextFont(var29);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var33 = null;
    var31.setSeriesOutlineStroke(100, var33);
    java.awt.Paint var36 = null;
    var31.setSeriesOutlinePaint(0, var36, true);
    var31.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var43 = var31.lookupSeriesShape((-1));
    java.awt.Paint var45 = null;
    var31.setLegendTextPaint(0, var45);
    java.awt.Font var47 = var31.getBaseItemLabelFont();
    var8.setBaseItemLabelFont(var47);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var52 = null;
    var50.setSeriesOutlineStroke(100, var52);
    java.awt.Paint var55 = null;
    var50.setSeriesOutlinePaint(0, var55, true);
    var50.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var61 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var63 = null;
    var61.setSeriesOutlineStroke(100, var63);
    java.awt.Paint var66 = null;
    var61.setSeriesOutlinePaint(0, var66, true);
    var61.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var73 = var61.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var74 = new org.jfree.chart.entity.ChartEntity(var73);
    var50.setBaseShape(var73, false);
    var8.setSeriesShape(15, var73, false);
    org.jfree.chart.entity.ChartEntity var79 = new org.jfree.chart.entity.ChartEntity(var73);
    var4.setBaseLegendShape(var73);
    boolean var81 = var0.equals((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    org.jfree.chart.renderer.category.BarRenderer var1 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var2 = var1.isDrawBarOutline();
    boolean var3 = var1.isDrawBarOutline();
    java.awt.Paint var4 = var1.getShadowPaint();
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var4);
    java.awt.Color var9 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    var5.setLabelPaint((java.awt.Paint)var9);
    java.awt.Paint var11 = var5.getOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    var0.setNoDataMessage("");
    org.jfree.data.category.CategoryDataset var5 = null;
    var0.setDataset(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToRangeAxis((-2), (-2));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }


    java.text.AttributedString var0 = null;
    org.jfree.chart.renderer.RenderAttributes var4 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var9 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    var4.setSeriesPaint(0, (java.awt.Paint)var9);
    org.jfree.chart.plot.DefaultDrawingSupplier var12 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Paint var13 = var12.getNextPaint();
    java.awt.Shape var14 = var12.getNextShape();
    var4.setSeriesShape(5, var14);
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var19 = null;
    var17.setSeriesURLGenerator(10, var19);
    java.awt.Font var21 = var17.getBaseItemLabelFont();
    var16.setLabelFont(var21);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var26 = var23.getDomainAxis();
    var16.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var23);
    var16.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var16.setCategoryMargin(1.0d);
    var16.addCategoryLabelToolTip((java.lang.Comparable)(byte)100, "TextAnchor.CENTER");
    var16.setFixedDimension((-6.0d));
    java.awt.Paint var38 = var16.getLabelPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var39 = new org.jfree.chart.LegendItem(var0, "java.awt.Color[r=0,g=0,b=0]", "SortOrder.ASCENDING", "Category Plot", var14, var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test147() {}
//   public void test147() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var2 = null;
//     java.awt.geom.Rectangle2D var3 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var5 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var6 = null;
//     boolean var7 = var1.render(var2, var3, 100, var5, var6);
//     org.jfree.chart.plot.Plot var8 = var1.getParent();
//     org.jfree.data.general.DatasetGroup var9 = var1.getDatasetGroup();
//     java.awt.Paint var10 = var1.getDomainGridlinePaint();
//     var0.setDefaultPaint(var10);
//     var0.setDefaultCreateEntity((java.lang.Boolean)true);
//     var0.setDefaultLabelVisible((java.lang.Boolean)false);
//     java.lang.Boolean var17 = var0.getSeriesLabelVisible((-16777216));
// 
//   }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }
// 
// 
//     org.jfree.chart.util.StandardGradientPaintTransformer var0 = new org.jfree.chart.util.StandardGradientPaintTransformer();
//     boolean var2 = var0.equals((java.lang.Object)(short)100);
//     org.jfree.chart.util.GradientPaintTransformType var3 = var0.getType();
//     java.lang.Object var4 = null;
//     boolean var5 = var0.equals(var4);
//     java.awt.GradientPaint var6 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var9 = null;
//     var7.setSeriesOutlineStroke(100, var9);
//     java.awt.Paint var12 = null;
//     var7.setSeriesOutlinePaint(0, var12, true);
//     org.jfree.chart.labels.ItemLabelPosition var15 = var7.getBaseNegativeItemLabelPosition();
//     boolean var16 = var7.getBaseSeriesVisible();
//     java.awt.Shape var17 = var7.getBaseShape();
//     java.awt.GradientPaint var18 = var0.transform(var6, var17);
// 
//   }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesItemLabelPaint((-254), var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.axis.AxisSpace var23 = null;
    var22.setFixedRangeAxisSpace(var23);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var28 = null;
    var26.setSeriesOutlineStroke(100, var28);
    java.awt.Paint var31 = null;
    var26.setSeriesOutlinePaint(0, var31, true);
    var26.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var38 = var26.lookupSeriesShape((-1));
    java.awt.Paint var40 = null;
    var26.setLegendTextPaint(0, var40);
    boolean var42 = var26.getAutoPopulateSeriesOutlineStroke();
    var26.setDataBoundsIncludesVisibleSeriesOnly(false);
    var22.setRenderer(1, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
    org.jfree.chart.plot.Marker var46 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var22.removeRangeMarker(var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.setMaximumCategoryLabelLines(0);
    var0.setAxisLineVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    int var10 = var0.getBackgroundImageAlignment();
    boolean var11 = var0.isDomainZoomable();
    org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis();
    var12.setLabel("ChartEntity: tooltip = null");
    var0.setDomainAxis(var12);
    var12.setLabel("RectangleInsets[t=3.0,l=3.0,b=3.0,r=3.0]");
    boolean var18 = var12.isTickMarksVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    var0.clear();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    var2.setRangeCrosshairValue((-1.0d));
    java.util.List var5 = var2.getAnnotations();
    org.jfree.chart.util.SortOrder var6 = var2.getColumnRenderingOrder();
    var0.sortByKeys(var6);
    boolean var9 = var6.equals((java.lang.Object)(-0.7853981633974483d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setAutoPopulateSeriesStroke(true);
    java.lang.Object var19 = var0.clone();
    org.jfree.chart.axis.CategoryAxis var21 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var24 = null;
    var22.setSeriesURLGenerator(10, var24);
    java.awt.Font var26 = var22.getBaseItemLabelFont();
    var21.setLabelFont(var26);
    java.lang.Object var28 = var21.clone();
    var21.setVisible(true);
    boolean var31 = var21.isAxisLineVisible();
    var21.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    java.lang.String var34 = var21.getLabelURL();
    java.awt.Font var35 = var21.getLabelFont();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesItemLabelFont((-2), var35, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    org.jfree.chart.axis.ValueAxis var11 = var8.getRangeAxis(15);
    boolean var12 = var8.isRangeCrosshairLockedOnData();
    org.jfree.data.category.DefaultCategoryDataset var13 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var14 = null;
    org.jfree.chart.axis.ValueAxis var15 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var18 = null;
    var16.setSeriesOutlineStroke(100, var18);
    double var20 = var16.getItemLabelAnchorOffset();
    var16.setBaseShapesVisible(false);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var13, var14, var15, (org.jfree.chart.renderer.category.CategoryItemRenderer)var16);
    int var24 = var8.indexOf((org.jfree.data.category.CategoryDataset)var13);
    org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var29 = null;
    var27.setSeriesURLGenerator(10, var29);
    java.awt.Font var31 = var27.getBaseItemLabelFont();
    var26.setLabelFont(var31);
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    var33.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var36 = var33.getDomainAxis();
    var26.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var33);
    var26.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var26.setCategoryMargin(1.0d);
    org.jfree.chart.axis.CategoryLabelPositions var43 = var26.getCategoryLabelPositions();
    float var44 = var26.getMaximumCategoryLabelWidthRatio();
    var26.setTickMarkInsideLength(0.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setDomainAxis((-16777216), var26, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0f);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    double var4 = var0.getItemLabelAnchorOffset();
    var0.setBaseShapesVisible(false);
    double var7 = var0.getItemLabelAnchorOffset();
    boolean var11 = var0.isItemLabelVisible(10, (-2), false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    var0.clear();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    var3.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var15 = var3.lookupSeriesShape((-1));
    java.awt.Paint var17 = null;
    var3.setLegendTextPaint(0, var17);
    var0.setObject((java.lang.Comparable)10.0f, (java.lang.Object)0);
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var22 = null;
    java.awt.geom.Rectangle2D var23 = null;
    org.jfree.chart.plot.PlotRenderingInfo var25 = null;
    org.jfree.chart.plot.CategoryCrosshairState var26 = null;
    boolean var27 = var21.render(var22, var23, 100, var25, var26);
    boolean var28 = var21.isOutlineVisible();
    var21.setDomainGridlinesVisible(true);
    var21.setRangeCrosshairVisible(true);
    var21.setWeight((-16777216));
    var0.setObject((java.lang.Comparable)"rect", (java.lang.Object)(-16777216));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    java.awt.Shape var15 = var6.lookupSeriesShape(10);
    org.jfree.chart.entity.ChartEntity var16 = new org.jfree.chart.entity.ChartEntity(var15);
    var5.setShape(var15);
    java.awt.Stroke var18 = var5.getLineStroke();
    java.lang.String var19 = var5.getURLText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test159() {}
//   public void test159() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setRangeCrosshairValue((-1.0d));
//     var0.setRangePannable(true);
//     org.jfree.data.category.CategoryDataset var5 = null;
//     org.jfree.chart.axis.CategoryAxis var6 = null;
//     org.jfree.chart.axis.ValueAxis var7 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var10 = null;
//     var8.setSeriesOutlineStroke(100, var10);
//     java.awt.Paint var13 = null;
//     var8.setSeriesOutlinePaint(0, var13, true);
//     java.awt.Shape var17 = var8.lookupSeriesShape(10);
//     java.awt.Paint var19 = null;
//     var8.setSeriesFillPaint(0, var19, false);
//     boolean var22 = var8.getBaseShapesVisible();
//     java.awt.Paint var23 = var8.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var24 = var8.getBaseNegativeItemLabelPosition();
//     var8.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot(var5, var6, var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var8);
//     org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var29 = null;
//     java.awt.geom.Rectangle2D var30 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var32 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var33 = null;
//     boolean var34 = var28.render(var29, var30, 100, var32, var33);
//     org.jfree.chart.event.MarkerChangeEvent var35 = null;
//     var28.markerChanged(var35);
//     org.jfree.chart.plot.Marker var38 = null;
//     org.jfree.chart.util.Layer var39 = null;
//     boolean var41 = var28.removeDomainMarker(10, var38, var39, true);
//     org.jfree.chart.axis.AxisLocation var43 = var28.getDomainAxisLocation(0);
//     org.jfree.chart.axis.AxisLocation var44 = org.jfree.chart.axis.AxisLocation.getOpposite(var43);
//     var27.setDomainAxisLocation(var44, false);
//     var0.setDomainAxisLocation(var44, false);
//     org.jfree.chart.axis.AxisLocation var49 = var44.getOpposite();
//     org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var51 = null;
//     java.awt.geom.Rectangle2D var52 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var54 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var55 = null;
//     boolean var56 = var50.render(var51, var52, 100, var54, var55);
//     org.jfree.chart.event.MarkerChangeEvent var57 = null;
//     var50.markerChanged(var57);
//     org.jfree.chart.plot.Marker var60 = null;
//     org.jfree.chart.util.Layer var61 = null;
//     boolean var63 = var50.removeDomainMarker(10, var60, var61, true);
//     org.jfree.chart.axis.AxisLocation var65 = var50.getDomainAxisLocation(0);
//     org.jfree.chart.plot.PlotRenderingInfo var67 = null;
//     java.awt.geom.Point2D var68 = null;
//     var50.zoomRangeAxes(4.0d, var67, var68);
//     java.awt.Graphics2D var70 = null;
//     java.awt.geom.Rectangle2D var71 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var73 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var74 = null;
//     boolean var75 = var50.render(var70, var71, 1, var73, var74);
//     var50.configureDomainAxes();
//     org.jfree.chart.plot.PlotOrientation var77 = var50.getOrientation();
//     java.lang.Object var78 = null;
//     boolean var79 = var77.equals(var78);
//     org.jfree.chart.util.RectangleEdge var80 = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(var44, var77);
//     
//     // Checks the contract:  equals-hashcode on var28 and var50
//     assertTrue("Contract failed: equals-hashcode on var28 and var50", var28.equals(var50) ? var28.hashCode() == var50.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var50 and var28
//     assertTrue("Contract failed: equals-hashcode on var50 and var28", var50.equals(var28) ? var50.hashCode() == var28.hashCode() : true);
// 
//   }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
//     double var13 = var11.calculateLeftInset(8.0d);
//     org.jfree.chart.renderer.RenderAttributes var14 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var17 = var14.getItemShape(0, 0);
//     java.awt.Paint var20 = var14.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
//     var21.setRangeCrosshairValue((-1.0d));
//     var21.setNoDataMessage("");
//     java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var21.setRangeZeroBaselinePaint((java.awt.Paint)var29);
//     var14.setDefaultFillPaint((java.awt.Paint)var29);
//     java.awt.Shape var32 = var14.getDefaultShape();
//     boolean var33 = var11.equals((java.lang.Object)var14);
//     java.awt.Stroke var35 = var14.getSeriesOutlineStroke(3);
// 
//   }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     java.lang.Object var7 = var0.clone();
//     var0.setVisible(true);
//     boolean var10 = var0.isAxisLineVisible();
//     var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     var0.setAxisLineVisible(true);
//     org.jfree.chart.util.RectangleInsets var15 = var0.getLabelInsets();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var18 = null;
//     var16.setSeriesOutlineStroke(100, var18);
//     java.awt.Paint var21 = null;
//     var16.setSeriesOutlinePaint(0, var21, true);
//     var16.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Paint var30 = var16.getItemFillPaint(3, 100, true);
//     boolean var31 = var15.equals((java.lang.Object)var16);
//     
//     // Checks the contract:  equals-hashcode on var1 and var16
//     assertTrue("Contract failed: equals-hashcode on var1 and var16", var1.equals(var16) ? var1.hashCode() == var16.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var1 and var16.", var1.equals(var16) == var16.equals(var1));
// 
//   }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setTickMarkOutsideLength(100.0f);
    java.awt.Stroke var19 = var0.getTickMarkStroke();
    org.jfree.chart.plot.Plot var20 = var0.getPlot();
    var0.setCategoryMargin(100.0d);
    boolean var24 = var0.equals((java.lang.Object)3);
    java.awt.Font var25 = var0.getLabelFont();
    var0.setTickMarksVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test163() {}
//   public void test163() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.util.List var1 = var0.getAnnotations();
//     java.lang.String var2 = var0.getPlotType();
//     org.jfree.chart.plot.Plot var3 = var0.getRootPlot();
//     java.awt.Font var4 = var0.getNoDataMessageFont();
//     org.jfree.chart.plot.Marker var5 = null;
//     var0.addRangeMarker(var5);
// 
//   }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    org.jfree.data.category.CategoryDataset var14 = var0.getDataset(15);
    boolean var15 = var0.isSubplot();
    org.jfree.chart.util.RectangleEdge var16 = var0.getRangeAxisEdge();
    org.jfree.chart.axis.ValueAxis var18 = var0.getRangeAxis((-16777216));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var21 = null;
    var19.setSeriesOutlineStroke(100, var21);
    java.awt.Paint var24 = null;
    var19.setSeriesOutlinePaint(0, var24, true);
    var19.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var31 = var19.lookupSeriesShape((-1));
    java.awt.Paint var33 = null;
    var19.setLegendTextPaint(0, var33);
    boolean var35 = var19.getAutoPopulateSeriesOutlineStroke();
    var19.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var41 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var42 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var41);
    var19.setBasePaint((java.awt.Paint)var41, false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var45 = null;
    var19.setBaseItemLabelGenerator(var45);
    boolean var49 = var19.getItemLineVisible(2, (-2));
    java.lang.Boolean var51 = var19.getSeriesCreateEntities(0);
    var19.setBaseShapesFilled(false);
    int var54 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     java.awt.Paint var11 = null;
//     var0.setSeriesFillPaint(0, var11, false);
//     boolean var14 = var0.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var0.getSeriesNegativeItemLabelPosition(2);
//     var0.setUseOutlinePaint(true);
//     var0.clearSeriesStrokes(false);
//     var0.setBaseLinesVisible(true);
//     org.jfree.chart.labels.CategoryToolTipGenerator var26 = var0.getToolTipGenerator(0, (-2), false);
//     org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var28 = null;
//     java.awt.geom.Rectangle2D var29 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var31 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var32 = null;
//     boolean var33 = var27.render(var28, var29, 100, var31, var32);
//     org.jfree.chart.plot.Plot var34 = var27.getParent();
//     org.jfree.data.general.DatasetGroup var35 = var27.getDatasetGroup();
//     org.jfree.chart.axis.ValueAxis var36 = var27.getRangeAxis();
//     int var37 = var27.getBackgroundImageAlignment();
//     boolean var38 = var27.isDomainZoomable();
//     java.awt.Paint var39 = var27.getOutlinePaint();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var40 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var42 = null;
//     var40.setSeriesURLGenerator(10, var42);
//     org.jfree.data.category.CategoryDataset var44 = null;
//     org.jfree.chart.axis.CategoryAxis var45 = null;
//     org.jfree.chart.axis.ValueAxis var46 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var47 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var49 = null;
//     var47.setSeriesOutlineStroke(100, var49);
//     java.awt.Paint var52 = null;
//     var47.setSeriesOutlinePaint(0, var52, true);
//     java.awt.Shape var56 = var47.lookupSeriesShape(10);
//     java.awt.Paint var58 = null;
//     var47.setSeriesFillPaint(0, var58, false);
//     boolean var61 = var47.getBaseShapesVisible();
//     java.awt.Paint var62 = var47.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var63 = var47.getBaseNegativeItemLabelPosition();
//     var47.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var66 = new org.jfree.chart.plot.CategoryPlot(var44, var45, var46, (org.jfree.chart.renderer.category.CategoryItemRenderer)var47);
//     boolean var67 = var40.hasListener((java.util.EventListener)var66);
//     int var68 = var66.getWeight();
//     boolean var69 = var66.isOutlineVisible();
//     java.awt.Stroke var70 = var66.getOutlineStroke();
//     var27.setDomainCrosshairStroke(var70);
//     var0.setPlot(var27);
//     
//     // Checks the contract:  equals-hashcode on var16 and var63
//     assertTrue("Contract failed: equals-hashcode on var16 and var63", var16.equals(var63) ? var16.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var16
//     assertTrue("Contract failed: equals-hashcode on var63 and var16", var63.equals(var16) ? var63.hashCode() == var16.hashCode() : true);
// 
//   }

  public void test166() {}
//   public void test166() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var3 = var0.getItemShape(0, 0);
//     java.awt.Paint var4 = var0.getDefaultLabelPaint();
//     java.awt.Paint var6 = var0.getSeriesFillPaint(1);
//     java.awt.Paint var7 = var0.getDefaultFillPaint();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var11 = null;
//     var9.setSeriesURLGenerator(10, var11);
//     org.jfree.chart.labels.ItemLabelPosition var14 = null;
//     var9.setSeriesNegativeItemLabelPosition(0, var14, true);
//     java.awt.Stroke var18 = var9.lookupSeriesStroke(0);
//     var9.setBaseShapesFilled(false);
//     org.jfree.chart.labels.ItemLabelPosition var22 = var9.getSeriesNegativeItemLabelPosition(3);
//     org.jfree.chart.axis.CategoryAxis var23 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var26 = null;
//     var24.setSeriesURLGenerator(10, var26);
//     java.awt.Font var28 = var24.getBaseItemLabelFont();
//     var23.setLabelFont(var28);
//     boolean var30 = var22.equals((java.lang.Object)var28);
//     var0.setSeriesLabelFont(4, var28);
// 
//   }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    java.lang.Object var5 = var0.clone();
    java.lang.Object var6 = var0.clone();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var9 = null;
    var7.setSeriesURLGenerator(10, var9);
    boolean var14 = var7.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    var7.setPlot(var15);
    java.awt.Paint var20 = var7.getItemFillPaint(1, 0, false);
    var0.addObject((java.lang.Object)var20, (java.lang.Comparable)(-1L), (java.lang.Comparable)4.0d);
    org.jfree.chart.util.StandardGradientPaintTransformer var24 = new org.jfree.chart.util.StandardGradientPaintTransformer();
    java.lang.Comparable var25 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addObject((java.lang.Object)var24, var25, (java.lang.Comparable)"Category Plot");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test168() {}
//   public void test168() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.plot.Plot var7 = var0.getParent();
//     org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
//     org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
//     int var10 = var0.getBackgroundImageAlignment();
//     boolean var11 = var0.isDomainZoomable();
//     org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis();
//     var12.setLabel("ChartEntity: tooltip = null");
//     var0.setDomainAxis(var12);
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var17 = null;
//     java.awt.geom.Rectangle2D var18 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var20 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var21 = null;
//     boolean var22 = var16.render(var17, var18, 100, var20, var21);
//     org.jfree.chart.event.MarkerChangeEvent var23 = null;
//     var16.markerChanged(var23);
//     var16.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var27 = var16.getDrawingSupplier();
//     java.awt.Paint var28 = var16.getRangeGridlinePaint();
//     org.jfree.chart.axis.ValueAxis var30 = null;
//     var16.setRangeAxis(15, var30);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var34 = null;
//     var32.setSeriesOutlineStroke(100, var34);
//     java.awt.Paint var37 = null;
//     var32.setSeriesOutlinePaint(0, var37, true);
//     java.awt.Shape var41 = var32.lookupSeriesShape(10);
//     java.awt.Paint var43 = null;
//     var32.setSeriesFillPaint(0, var43, false);
//     boolean var46 = var32.getBaseShapesVisible();
//     java.awt.Paint var47 = var32.getBaseOutlinePaint();
//     java.awt.Stroke var48 = var32.getBaseStroke();
//     var16.setRangeCrosshairStroke(var48);
//     var12.addChangeListener((org.jfree.chart.event.AxisChangeListener)var16);
//     java.awt.Graphics2D var51 = null;
//     org.jfree.chart.axis.AxisState var52 = null;
//     java.awt.geom.Rectangle2D var53 = null;
//     org.jfree.chart.plot.CategoryPlot var54 = new org.jfree.chart.plot.CategoryPlot();
//     var54.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var57 = var54.getDomainGridlineStroke();
//     org.jfree.chart.util.RectangleEdge var59 = var54.getDomainAxisEdge(15);
//     java.util.List var60 = var12.refreshTicks(var51, var52, var53, var59);
// 
//   }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var6 = null;
    java.awt.geom.Rectangle2D var7 = null;
    org.jfree.chart.plot.PlotRenderingInfo var9 = null;
    org.jfree.chart.plot.CategoryCrosshairState var10 = null;
    boolean var11 = var5.render(var6, var7, 100, var9, var10);
    org.jfree.chart.event.MarkerChangeEvent var12 = null;
    var5.markerChanged(var12);
    var5.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var16 = var5.getInsets();
    java.awt.Stroke var17 = var5.getRangeZeroBaselineStroke();
    var0.addObject((java.lang.Object)var5, (java.lang.Comparable)100, (java.lang.Comparable)'4');
    boolean var21 = var5.isDomainZoomable();
    org.jfree.chart.axis.AxisSpace var22 = null;
    var5.setFixedRangeAxisSpace(var22, false);
    org.jfree.data.category.DefaultCategoryDataset var25 = new org.jfree.data.category.DefaultCategoryDataset();
    var25.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var30 = var25.getRowKeys();
    org.jfree.chart.renderer.category.CategoryItemRenderer var31 = var5.getRendererForDataset((org.jfree.data.category.CategoryDataset)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var34 = var25.getValue((java.lang.Comparable)(byte)100, (java.lang.Comparable)(byte)10);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    boolean var14 = var0.isRangeZeroBaselineVisible();
    org.jfree.chart.util.RectangleInsets var15 = var0.getAxisOffset();
    double var17 = var15.calculateRightOutset((-14.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4.0d);

  }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var4 = null;
//     var2.setSeriesURLGenerator(10, var4);
//     java.awt.Font var6 = var2.getBaseItemLabelFont();
//     var1.setLabelFont(var6);
//     java.awt.Paint var8 = var1.getTickMarkPaint();
//     float var9 = var1.getTickMarkInsideLength();
//     org.jfree.chart.axis.ValueAxis var10 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var13 = null;
//     var11.setSeriesURLGenerator(10, var13);
//     java.awt.Font var15 = var11.getBaseItemLabelFont();
//     java.lang.Boolean var17 = var11.getSeriesVisibleInLegend(10);
//     org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var10, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11);
//     java.awt.Paint var22 = var11.getItemOutlinePaint(10, 4, true);
//     org.jfree.data.KeyedObjects2D var24 = new org.jfree.data.KeyedObjects2D();
//     java.util.List var25 = var24.getRowKeys();
//     int var26 = var24.getColumnCount();
//     java.lang.Object var27 = null;
//     boolean var28 = var24.equals(var27);
//     org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var30 = null;
//     java.awt.geom.Rectangle2D var31 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var33 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var34 = null;
//     boolean var35 = var29.render(var30, var31, 100, var33, var34);
//     org.jfree.chart.event.MarkerChangeEvent var36 = null;
//     var29.markerChanged(var36);
//     var29.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var40 = var29.getInsets();
//     java.awt.Stroke var41 = var29.getRangeZeroBaselineStroke();
//     var24.addObject((java.lang.Object)var29, (java.lang.Comparable)100, (java.lang.Comparable)'4');
//     org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var46 = null;
//     java.awt.geom.Rectangle2D var47 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var49 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var50 = null;
//     boolean var51 = var45.render(var46, var47, 100, var49, var50);
//     org.jfree.chart.util.Layer var52 = null;
//     java.util.Collection var53 = var45.getDomainMarkers(var52);
//     java.awt.Paint var54 = var45.getOutlinePaint();
//     var29.setOutlinePaint(var54);
//     var11.setSeriesFillPaint(4, var54, false);
//     
//     // Checks the contract:  equals-hashcode on var2 and var11
//     assertTrue("Contract failed: equals-hashcode on var2 and var11", var2.equals(var11) ? var2.hashCode() == var11.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var2 and var11.", var2.equals(var11) == var11.equals(var2));
// 
//   }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var6 = null;
    java.awt.geom.Rectangle2D var7 = null;
    org.jfree.chart.plot.PlotRenderingInfo var9 = null;
    org.jfree.chart.plot.CategoryCrosshairState var10 = null;
    boolean var11 = var5.render(var6, var7, 100, var9, var10);
    org.jfree.chart.event.MarkerChangeEvent var12 = null;
    var5.markerChanged(var12);
    var5.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var16 = var5.getInsets();
    java.awt.Stroke var17 = var5.getRangeZeroBaselineStroke();
    var0.addObject((java.lang.Object)var5, (java.lang.Comparable)100, (java.lang.Comparable)'4');
    boolean var21 = var5.isDomainZoomable();
    org.jfree.chart.renderer.category.BarRenderer var22 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var23 = var22.isDrawBarOutline();
    boolean var24 = var22.isDrawBarOutline();
    java.awt.Paint var25 = var22.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var27 = null;
    java.awt.geom.Rectangle2D var28 = null;
    org.jfree.chart.plot.PlotRenderingInfo var30 = null;
    org.jfree.chart.plot.CategoryCrosshairState var31 = null;
    boolean var32 = var26.render(var27, var28, 100, var30, var31);
    boolean var33 = var26.isOutlineVisible();
    var26.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var36 = var26.getDomainGridlinePosition();
    java.awt.Paint var37 = var26.getBackgroundPaint();
    var22.addChangeListener((org.jfree.chart.event.RendererChangeListener)var26);
    org.jfree.chart.labels.ItemLabelPosition var39 = new org.jfree.chart.labels.ItemLabelPosition();
    var22.setPositiveItemLabelPositionFallback(var39);
    org.jfree.data.category.DefaultCategoryDataset var41 = new org.jfree.data.category.DefaultCategoryDataset();
    var41.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    java.util.List var46 = var41.getColumnKeys();
    var41.removeColumn(0);
    org.jfree.data.Range var50 = var22.findRangeBounds((org.jfree.data.category.CategoryDataset)var41, true);
    org.jfree.chart.axis.CategoryAxis var51 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var52 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var54 = null;
    var52.setSeriesURLGenerator(10, var54);
    java.awt.Font var56 = var52.getBaseItemLabelFont();
    var51.setLabelFont(var56);
    java.awt.Paint var58 = var51.getTickMarkPaint();
    java.awt.Font var59 = var51.getTickLabelFont();
    boolean var60 = var41.equals((java.lang.Object)var59);
    var5.setNoDataMessageFont(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    var0.removeAnnotations();
    org.jfree.data.category.CategoryDataset var5 = null;
    org.jfree.data.Range var6 = var0.findRangeBounds(var5);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var9 = null;
    var7.setSeriesURLGenerator(10, var9);
    java.awt.Shape var12 = null;
    var7.setLegendShape(0, var12);
    org.jfree.chart.renderer.RenderAttributes var15 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var20 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var15.setSeriesOutlinePaint(0, (java.awt.Paint)var20);
    java.lang.Boolean var22 = var15.getDefaultCreateEntity();
    org.jfree.chart.renderer.category.BarRenderer var24 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var25 = var24.isDrawBarOutline();
    boolean var26 = var24.isDrawBarOutline();
    java.awt.Paint var27 = var24.getShadowPaint();
    org.jfree.chart.LegendItem var28 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var27);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var31 = null;
    var29.setSeriesOutlineStroke(100, var31);
    java.awt.Paint var34 = null;
    var29.setSeriesOutlinePaint(0, var34, true);
    java.awt.Shape var38 = var29.lookupSeriesShape(10);
    java.awt.Paint var40 = null;
    var29.setSeriesFillPaint(0, var40, false);
    boolean var43 = var29.getBaseShapesVisible();
    java.awt.Paint var44 = null;
    var29.setBasePaint(var44);
    var29.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.urls.CategoryURLGenerator var49 = null;
    var29.setSeriesURLGenerator(2, var49, true);
    org.jfree.chart.plot.CategoryPlot var52 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var53 = null;
    java.awt.geom.Rectangle2D var54 = null;
    org.jfree.chart.plot.PlotRenderingInfo var56 = null;
    org.jfree.chart.plot.CategoryCrosshairState var57 = null;
    boolean var58 = var52.render(var53, var54, 100, var56, var57);
    org.jfree.chart.event.MarkerChangeEvent var59 = null;
    var52.markerChanged(var59);
    var52.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var63 = var52.getDrawingSupplier();
    java.awt.Paint var64 = var52.getRangeGridlinePaint();
    var29.setBaseItemLabelPaint(var64, false);
    var28.setOutlinePaint(var64);
    var15.setDefaultFillPaint(var64);
    var7.setSeriesPaint(3, var64);
    var0.setBasePaint(var64, true);
    org.jfree.chart.labels.ItemLabelPosition var72 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBaseNegativeItemLabelPosition(var72);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(5);

  }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     int var11 = var0.getBackgroundImageAlignment();
//     boolean var12 = var0.canSelectByRegion();
//     int var13 = var0.getDatasetCount();
//     java.lang.String var14 = var0.getNoDataMessage();
//     org.jfree.chart.plot.DatasetRenderingOrder var15 = var0.getDatasetRenderingOrder();
//     org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var19 = null;
//     var17.setSeriesURLGenerator(10, var19);
//     java.awt.Font var21 = var17.getBaseItemLabelFont();
//     var16.setLabelFont(var21);
//     org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
//     var23.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var26 = var23.getDomainAxis();
//     var16.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var23);
//     var16.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var0.setDomainAxis(var16);
//     java.awt.Stroke var32 = var16.getAxisLineStroke();
//     float var33 = var16.getMinorTickMarkInsideLength();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var36 = null;
//     var34.setSeriesOutlineStroke(100, var36);
//     java.awt.Paint var39 = null;
//     var34.setSeriesOutlinePaint(0, var39, true);
//     var34.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var46 = var34.lookupSeriesShape((-1));
//     java.awt.Paint var48 = null;
//     var34.setLegendTextPaint(0, var48);
//     boolean var50 = var34.getAutoPopulateSeriesOutlineStroke();
//     java.awt.Color var54 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var34.setBasePaint((java.awt.Paint)var54);
//     java.awt.Font var59 = var34.getItemLabelFont((-16777216), (-2), true);
//     var16.setTickLabelFont(var59);
//     java.awt.Graphics2D var61 = null;
//     org.jfree.chart.axis.AxisState var62 = null;
//     java.awt.geom.Rectangle2D var63 = null;
//     org.jfree.chart.util.RectangleEdge var64 = null;
//     java.util.List var65 = var16.refreshTicks(var61, var62, var63, var64);
// 
//   }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var18 = var0.getPositiveItemLabelPosition(1, 10, true);
    java.awt.Paint var19 = var0.getBasePaint();
    boolean var20 = var0.getBaseItemLabelsVisible();
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.setRangeCrosshairValue((-1.0d));
    var21.setNoDataMessage("");
    java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var21.setRangeZeroBaselinePaint((java.awt.Paint)var29);
    org.jfree.chart.util.Layer var31 = null;
    java.util.Collection var32 = var21.getDomainMarkers(var31);
    boolean var33 = var0.hasListener((java.util.EventListener)var21);
    java.awt.Paint var34 = var21.getOutlinePaint();
    var21.setCrosshairDatasetIndex(2, true);
    java.awt.Stroke var38 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.setDomainGridlineStroke(var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.DefaultShadowGenerator var21 = new org.jfree.chart.util.DefaultShadowGenerator();
    float var22 = var21.getShadowOpacity();
    int var23 = var21.calculateOffsetY();
    org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var25 = null;
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.plot.PlotRenderingInfo var28 = null;
    org.jfree.chart.plot.CategoryCrosshairState var29 = null;
    boolean var30 = var24.render(var25, var26, 100, var28, var29);
    org.jfree.chart.event.MarkerChangeEvent var31 = null;
    var24.markerChanged(var31);
    var24.setDrawSharedDomainAxis(true);
    int var35 = var24.getBackgroundImageAlignment();
    boolean var36 = var24.canSelectByRegion();
    int var37 = var24.getDatasetCount();
    java.lang.String var38 = var24.getNoDataMessage();
    org.jfree.chart.plot.DatasetRenderingOrder var39 = var24.getDatasetRenderingOrder();
    java.lang.String var40 = var39.toString();
    boolean var41 = var21.equals((java.lang.Object)var39);
    var0.addObject((java.lang.Comparable)0.5f, (java.lang.Object)var39);
    org.jfree.chart.renderer.category.BarRenderer var43 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var44 = var43.getNegativeItemLabelPositionFallback();
    org.jfree.chart.util.GradientPaintTransformer var45 = var43.getGradientPaintTransformer();
    boolean var46 = var0.equals((java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "DatasetRenderingOrder.REVERSE"+ "'", var40.equals("DatasetRenderingOrder.REVERSE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test178() {}
//   public void test178() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.data.category.DefaultCategoryDataset var1 = new org.jfree.data.category.DefaultCategoryDataset();
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var5 = null;
//     var3.setSeriesURLGenerator(10, var5);
//     java.awt.Font var7 = var3.getBaseItemLabelFont();
//     var2.setLabelFont(var7);
//     java.lang.Object var9 = var2.clone();
//     org.jfree.chart.axis.ValueAxis var10 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var13 = null;
//     var11.setSeriesURLGenerator(10, var13);
//     org.jfree.chart.labels.ItemLabelPosition var16 = var11.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.plot.CategoryPlot var17 = var11.getPlot();
//     org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var1, var2, var10, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11);
//     org.jfree.data.Range var19 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var1);
//     boolean var22 = var0.getItemShapeVisible(2, 100);
//     var0.setSeriesShapesVisible(5, (java.lang.Boolean)true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var3 and var0.", var3.equals(var0) == var0.equals(var3));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var11 and var0.", var11.equals(var0) == var0.equals(var11));
// 
//   }

  public void test179() {}
//   public void test179() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var3 = var0.getItemShape(0, 0);
//     java.awt.Paint var6 = var0.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.setRangeCrosshairValue((-1.0d));
//     var7.setNoDataMessage("");
//     java.awt.Color var15 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var7.setRangeZeroBaselinePaint((java.awt.Paint)var15);
//     var0.setDefaultFillPaint((java.awt.Paint)var15);
//     java.awt.Shape var18 = var0.getDefaultShape();
//     var0.setDefaultCreateEntity((java.lang.Boolean)true);
//     java.awt.Paint var23 = var0.getItemPaint(0, (-2));
//     java.lang.Boolean var26 = var0.isLabelVisible(100, (-1));
// 
//   }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = var0.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.urls.CategoryURLGenerator var7 = null;
    var0.setSeriesURLGenerator(1, var7, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesLinesVisible((-16777216), (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    boolean var14 = var0.isRangePannable();
    org.jfree.chart.plot.DrawingSupplier var15 = var0.getDrawingSupplier();
    boolean var16 = var0.canSelectByRegion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    boolean var10 = var0.getBaseCreateEntities();
    var0.removeAnnotations();
    java.lang.Boolean var13 = var0.getSeriesItemLabelsVisible(255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }


    org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
    java.lang.Boolean var7 = var0.getDefaultCreateEntity();
    java.awt.Stroke var9 = var0.getSeriesStroke(4);
    var0.setDefaultLabelVisible((java.lang.Boolean)true);
    org.jfree.data.category.CategoryDataset var12 = null;
    org.jfree.chart.axis.CategoryAxis var13 = null;
    org.jfree.chart.axis.ValueAxis var14 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var17 = null;
    var15.setSeriesOutlineStroke(100, var17);
    java.awt.Paint var20 = null;
    var15.setSeriesOutlinePaint(0, var20, true);
    java.awt.Shape var24 = var15.lookupSeriesShape(10);
    java.awt.Paint var26 = null;
    var15.setSeriesFillPaint(0, var26, false);
    boolean var29 = var15.getBaseShapesVisible();
    java.awt.Paint var30 = var15.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var31 = var15.getBaseNegativeItemLabelPosition();
    var15.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var34 = new org.jfree.chart.plot.CategoryPlot(var12, var13, var14, (org.jfree.chart.renderer.category.CategoryItemRenderer)var15);
    org.jfree.chart.plot.PlotRenderingInfo var37 = null;
    java.awt.geom.Point2D var38 = null;
    var34.zoomDomainAxes(0.0d, 0.0d, var37, var38);
    org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var41 = null;
    java.awt.geom.Rectangle2D var42 = null;
    org.jfree.chart.plot.PlotRenderingInfo var44 = null;
    org.jfree.chart.plot.CategoryCrosshairState var45 = null;
    boolean var46 = var40.render(var41, var42, 100, var44, var45);
    org.jfree.chart.plot.Plot var47 = var40.getParent();
    org.jfree.chart.axis.CategoryAxis var48 = null;
    org.jfree.chart.axis.CategoryAxis[] var49 = new org.jfree.chart.axis.CategoryAxis[] { var48};
    var40.setDomainAxes(var49);
    var34.setDomainAxes(var49);
    float var52 = var34.getForegroundAlpha();
    java.awt.Stroke var53 = var34.getRangeZeroBaselineStroke();
    var0.setDefaultStroke(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
//     org.jfree.chart.LegendItemCollection var12 = var0.getLegendItems();
//     int var13 = var12.getItemCount();
//     org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
//     var14.setRangeCrosshairValue((-1.0d));
//     var14.setNoDataMessage("");
//     java.awt.Color var22 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var14.setRangeZeroBaselinePaint((java.awt.Paint)var22);
//     org.jfree.chart.LegendItemCollection var24 = var14.getLegendItems();
//     var12.addAll(var24);
//     
//     // Checks the contract:  equals-hashcode on var12 and var24
//     assertTrue("Contract failed: equals-hashcode on var12 and var24", var12.equals(var24) ? var12.hashCode() == var24.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var24 and var12
//     assertTrue("Contract failed: equals-hashcode on var24 and var12", var24.equals(var12) ? var24.hashCode() == var12.hashCode() : true);
// 
//   }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }


    org.jfree.data.SelectableValue var1 = new org.jfree.data.SelectableValue((java.lang.Number)1);
    java.lang.Number var2 = var1.getValue();
    boolean var3 = var1.isSelected();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + 1+ "'", var2.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    org.jfree.chart.labels.ItemLabelPosition var17 = new org.jfree.chart.labels.ItemLabelPosition();
    var0.setPositiveItemLabelPositionFallback(var17);
    org.jfree.data.category.DefaultCategoryDataset var19 = new org.jfree.data.category.DefaultCategoryDataset();
    var19.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    java.util.List var24 = var19.getColumnKeys();
    var19.removeColumn(0);
    org.jfree.data.Range var28 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var19, true);
    org.jfree.chart.axis.CategoryAxis var29 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var32 = null;
    var30.setSeriesURLGenerator(10, var32);
    java.awt.Font var34 = var30.getBaseItemLabelFont();
    var29.setLabelFont(var34);
    java.awt.Paint var36 = var29.getTickMarkPaint();
    java.awt.Font var37 = var29.getTickLabelFont();
    boolean var38 = var19.equals((java.lang.Object)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.setSelected(4, 2, false);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)(-1.0f));
    org.jfree.data.category.CategoryDataset var12 = var0.getDataset();
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.Layer var16 = null;
    java.util.Collection var17 = var0.getRangeMarkers(4, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }


    java.awt.Color var2 = java.awt.Color.getColor("-3,-3,3,3", 0);
    int var3 = var2.getGreen();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.data.KeyedObject var2 = new org.jfree.data.KeyedObject((java.lang.Comparable)2.0d, (java.lang.Object)var1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var5 = null;
    var3.setSeriesURLGenerator(10, var5);
    java.awt.Font var7 = var3.getBaseItemLabelFont();
    java.lang.Boolean var9 = var3.getSeriesVisibleInLegend(10);
    boolean var10 = var2.equals((java.lang.Object)var3);
    java.lang.Object var11 = var2.clone();
    java.lang.Comparable var12 = var2.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 2.0d+ "'", var12.equals(2.0d));

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    java.awt.Color var1 = java.awt.Color.getColor("-3,-3,3,3");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }
// 
// 
//     org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
//     int var1 = var0.getRowCount();
//     var0.validateObject();
//     org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var6 = null;
//     var4.setSeriesURLGenerator(10, var6);
//     java.awt.Font var8 = var4.getBaseItemLabelFont();
//     var3.setLabelFont(var8);
//     java.awt.Paint var10 = var3.getTickMarkPaint();
//     float var11 = var3.getTickMarkInsideLength();
//     org.jfree.chart.axis.ValueAxis var12 = null;
//     org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
//     var13.setBase((-1.0d));
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var3, var12, (org.jfree.chart.renderer.category.CategoryItemRenderer)var13);
//     var0.clear();
//     java.lang.Object var18 = var0.clone();
//     org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var22 = null;
//     var20.setSeriesURLGenerator(10, var22);
//     java.awt.Font var24 = var20.getBaseItemLabelFont();
//     var19.setLabelFont(var24);
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     var26.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var29 = var26.getDomainAxis();
//     var19.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var26);
//     var19.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var19.setCategoryMargin(1.0d);
//     var19.setTickMarkOutsideLength(100.0f);
//     java.awt.Stroke var38 = var19.getTickMarkStroke();
//     var19.clearCategoryLabelToolTips();
//     org.jfree.chart.axis.ValueAxis var40 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var41 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var43 = null;
//     var41.setSeriesURLGenerator(10, var43);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var45 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var47 = null;
//     var45.setSeriesURLGenerator(10, var47);
//     org.jfree.chart.labels.ItemLabelPosition var50 = null;
//     var45.setSeriesNegativeItemLabelPosition(0, var50, true);
//     java.awt.Stroke var54 = var45.lookupSeriesStroke(0);
//     org.jfree.chart.labels.CategorySeriesLabelGenerator var55 = var45.getLegendItemURLGenerator();
//     var45.setSeriesItemLabelsVisible(0, true);
//     java.awt.Font var62 = var45.getItemLabelFont(0, (-16777216), true);
//     var41.setBaseLegendTextFont(var62);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var64 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var66 = null;
//     var64.setSeriesOutlineStroke(100, var66);
//     java.awt.Paint var69 = null;
//     var64.setSeriesOutlinePaint(0, var69, true);
//     var64.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var76 = var64.lookupSeriesShape((-1));
//     java.awt.Paint var78 = null;
//     var64.setLegendTextPaint(0, var78);
//     java.awt.Font var80 = var64.getBaseItemLabelFont();
//     var41.setBaseItemLabelFont(var80);
//     org.jfree.chart.plot.CategoryPlot var82 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var19, var40, (org.jfree.chart.renderer.category.CategoryItemRenderer)var41);
//     
//     // Checks the contract:  equals-hashcode on var4 and var45
//     assertTrue("Contract failed: equals-hashcode on var4 and var45", var4.equals(var45) ? var4.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var64
//     assertTrue("Contract failed: equals-hashcode on var4 and var64", var4.equals(var64) ? var4.hashCode() == var64.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var45
//     assertTrue("Contract failed: equals-hashcode on var20 and var45", var20.equals(var45) ? var20.hashCode() == var45.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var64
//     assertTrue("Contract failed: equals-hashcode on var20 and var64", var20.equals(var64) ? var20.hashCode() == var64.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var4 and var45.", var4.equals(var45) == var45.equals(var4));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var4 and var64.", var4.equals(var64) == var64.equals(var4));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var45.", var20.equals(var45) == var45.equals(var20));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var64.", var20.equals(var64) == var64.equals(var20));
// 
//   }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setBaseSeriesVisibleInLegend(false, true);
    java.awt.Graphics2D var4 = null;
    java.awt.geom.Rectangle2D var5 = null;
    org.jfree.chart.plot.CategoryPlot var6 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var7 = null;
    java.awt.geom.Rectangle2D var8 = null;
    org.jfree.chart.plot.PlotRenderingInfo var10 = null;
    org.jfree.chart.plot.CategoryCrosshairState var11 = null;
    boolean var12 = var6.render(var7, var8, 100, var10, var11);
    org.jfree.chart.event.MarkerChangeEvent var13 = null;
    var6.markerChanged(var13);
    var6.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var17 = var6.getDrawingSupplier();
    java.awt.Paint var18 = var6.getRangeGridlinePaint();
    var6.setForegroundAlpha((-1.0f));
    org.jfree.data.category.DefaultCategoryDataset var21 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.plot.PlotRenderingInfo var22 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var23 = var0.initialise(var4, var5, var6, (org.jfree.data.category.CategoryDataset)var21, var22);
    int var24 = var21.getRowCount();
    java.lang.Comparable var25 = null;
    java.lang.Comparable var26 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var27 = var21.getValue(var25, var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var7.setCrosshairDatasetIndex(0);
    java.util.List var14 = var7.getCategories();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    org.jfree.chart.axis.AxisLocation var15 = var0.getDomainAxisLocation(0);
    org.jfree.chart.axis.ValueAxis var16 = null;
    org.jfree.data.Range var17 = var0.getDataRange(var16);
    var0.setAnchorValue((-6.0d), false);
    org.jfree.chart.plot.DefaultDrawingSupplier var21 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var22 = null;
    org.jfree.chart.event.ChartChangeEvent var23 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var21, var22);
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var21);
    java.lang.Object var25 = var21.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }


    org.jfree.data.SelectableValue var2 = new org.jfree.data.SelectableValue((java.lang.Number)(short)100, true);

  }

  public void test196() {}
//   public void test196() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var13 = null;
//     var11.setSeriesOutlineStroke(100, var13);
//     java.awt.Paint var16 = null;
//     var11.setSeriesOutlinePaint(0, var16, true);
//     var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var23 = var11.lookupSeriesShape((-1));
//     org.jfree.chart.entity.ChartEntity var24 = new org.jfree.chart.entity.ChartEntity(var23);
//     var0.setBaseShape(var23, false);
//     org.jfree.data.category.DefaultCategoryDataset var29 = new org.jfree.data.category.DefaultCategoryDataset();
//     var29.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
//     java.util.List var34 = var29.getRowKeys();
//     org.jfree.chart.entity.CategoryItemEntity var37 = new org.jfree.chart.entity.CategoryItemEntity(var23, "ChartEntity: tooltip = null", "-3,-3,3,3", (org.jfree.data.category.CategoryDataset)var29, (java.lang.Comparable)"TextAnchor.CENTER", (java.lang.Comparable)(-1L));
//     java.lang.Comparable var38 = var37.getColumnKey();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var43 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var45 = null;
//     var43.setSeriesOutlineStroke(100, var45);
//     java.awt.Paint var48 = null;
//     var43.setSeriesOutlinePaint(0, var48, true);
//     var43.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var55 = var43.lookupSeriesShape((-1));
//     org.jfree.chart.entity.ChartEntity var56 = new org.jfree.chart.entity.ChartEntity(var55);
//     java.awt.Color var60 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     int var61 = var60.getRed();
//     org.jfree.chart.LegendItem var62 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var55, (java.awt.Paint)var60);
//     java.lang.String var63 = var62.getLabel();
//     org.jfree.data.category.DefaultCategoryDataset var64 = new org.jfree.data.category.DefaultCategoryDataset();
//     var64.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
//     int var69 = var64.getColumnCount();
//     var64.setValue((java.lang.Number)0.0d, (java.lang.Comparable)true, (java.lang.Comparable)(short)0);
//     var62.setDataset((org.jfree.data.general.Dataset)var64);
//     var37.setDataset((org.jfree.data.category.CategoryDataset)var64);
//     var64.clearSelection();
// 
//   }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
//     java.awt.Paint var12 = var0.getRangeGridlinePaint();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var15 = null;
//     var13.setSeriesURLGenerator(10, var15);
//     org.jfree.chart.labels.ItemLabelPosition var18 = null;
//     var13.setSeriesNegativeItemLabelPosition(0, var18, true);
//     java.awt.Stroke var22 = var13.lookupSeriesStroke(0);
//     var13.setSeriesShapesVisible(15, (java.lang.Boolean)true);
//     var0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var13, false);
//     java.awt.Graphics2D var28 = null;
//     org.jfree.data.KeyedObjects2D var29 = new org.jfree.data.KeyedObjects2D();
//     java.util.List var30 = var29.getRowKeys();
//     int var31 = var29.getColumnCount();
//     java.lang.Object var32 = null;
//     boolean var33 = var29.equals(var32);
//     org.jfree.chart.plot.CategoryPlot var34 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var35 = null;
//     java.awt.geom.Rectangle2D var36 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var38 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var39 = null;
//     boolean var40 = var34.render(var35, var36, 100, var38, var39);
//     org.jfree.chart.event.MarkerChangeEvent var41 = null;
//     var34.markerChanged(var41);
//     var34.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var45 = var34.getInsets();
//     java.awt.Stroke var46 = var34.getRangeZeroBaselineStroke();
//     var29.addObject((java.lang.Object)var34, (java.lang.Comparable)100, (java.lang.Comparable)'4');
//     boolean var50 = var34.isDomainZoomable();
//     org.jfree.chart.axis.AxisSpace var51 = null;
//     var34.setFixedRangeAxisSpace(var51, false);
//     boolean var54 = var34.isRangeCrosshairLockedOnData();
//     org.jfree.chart.LegendItemCollection var55 = var34.getLegendItems();
//     java.awt.Paint var56 = var34.getRangeMinorGridlinePaint();
//     java.awt.geom.Rectangle2D var57 = null;
//     var13.drawBackground(var28, var34, var57);
// 
//   }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    org.jfree.chart.labels.ItemLabelPosition var8 = new org.jfree.chart.labels.ItemLabelPosition();
    var0.setBaseNegativeItemLabelPosition(var8, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesVisibleInLegend((-2), (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    org.jfree.chart.util.PaintList var0 = new org.jfree.chart.util.PaintList();
    org.jfree.chart.renderer.category.BarRenderer var1 = new org.jfree.chart.renderer.category.BarRenderer();
    double var2 = var1.getBase();
    var1.setItemMargin(0.0d);
    boolean var5 = var0.equals((java.lang.Object)var1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var8 = null;
    var6.setSeriesURLGenerator(10, var8);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var12 = null;
    var10.setSeriesURLGenerator(10, var12);
    org.jfree.chart.labels.ItemLabelPosition var15 = null;
    var10.setSeriesNegativeItemLabelPosition(0, var15, true);
    java.awt.Stroke var19 = var10.lookupSeriesStroke(0);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var20 = var10.getLegendItemURLGenerator();
    var10.setSeriesItemLabelsVisible(0, true);
    java.awt.Font var27 = var10.getItemLabelFont(0, (-16777216), true);
    var6.setBaseLegendTextFont(var27);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var31 = null;
    var29.setSeriesOutlineStroke(100, var31);
    java.awt.Paint var34 = null;
    var29.setSeriesOutlinePaint(0, var34, true);
    var29.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var41 = var29.lookupSeriesShape((-1));
    java.awt.Paint var43 = null;
    var29.setLegendTextPaint(0, var43);
    java.awt.Font var45 = var29.getBaseItemLabelFont();
    var6.setBaseItemLabelFont(var45);
    boolean var47 = var0.equals((java.lang.Object)var6);
    org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var49 = null;
    java.awt.geom.Rectangle2D var50 = null;
    org.jfree.chart.plot.PlotRenderingInfo var52 = null;
    org.jfree.chart.plot.CategoryCrosshairState var53 = null;
    boolean var54 = var48.render(var49, var50, 100, var52, var53);
    org.jfree.chart.event.MarkerChangeEvent var55 = null;
    var48.markerChanged(var55);
    var48.setDrawSharedDomainAxis(true);
    java.awt.Stroke var59 = var48.getRangeCrosshairStroke();
    boolean var60 = var0.equals((java.lang.Object)var48);
    java.awt.Paint var62 = var0.getPaint(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    int var13 = var0.getDatasetCount();
    java.lang.String var14 = var0.getNoDataMessage();
    org.jfree.chart.plot.DatasetRenderingOrder var15 = var0.getDatasetRenderingOrder();
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var19 = null;
    var17.setSeriesURLGenerator(10, var19);
    java.awt.Font var21 = var17.getBaseItemLabelFont();
    var16.setLabelFont(var21);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var26 = var23.getDomainAxis();
    var16.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var23);
    var16.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setDomainAxis(var16);
    java.awt.Stroke var32 = var16.getAxisLineStroke();
    float var33 = var16.getMinorTickMarkInsideLength();
    var16.setAxisLineVisible(false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var38 = null;
    var36.setSeriesURLGenerator(10, var38);
    org.jfree.chart.labels.ItemLabelPosition var41 = null;
    var36.setSeriesNegativeItemLabelPosition(0, var41, true);
    java.awt.Stroke var45 = var36.lookupSeriesStroke(0);
    var36.setBaseShapesFilled(false);
    org.jfree.chart.labels.ItemLabelPosition var49 = var36.getSeriesNegativeItemLabelPosition(3);
    org.jfree.chart.axis.CategoryAxis var50 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var51 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var53 = null;
    var51.setSeriesURLGenerator(10, var53);
    java.awt.Font var55 = var51.getBaseItemLabelFont();
    var50.setLabelFont(var55);
    boolean var57 = var49.equals((java.lang.Object)var55);
    var16.setTickLabelFont(var55);
    double var59 = var16.getFixedDimension();
    java.awt.geom.Rectangle2D var62 = null;
    org.jfree.chart.util.RectangleEdge var63 = null;
    double var64 = var16.getCategoryStart(255, 2, var62, var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.0d);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var12 = var10.getRangeAxisLocation(10);
    java.awt.Stroke var13 = var10.getRangeCrosshairStroke();
    org.jfree.chart.util.RectangleInsets var14 = var10.getInsets();
    var0.setTickLabelInsets(var14);
    double var17 = var14.calculateRightOutset((-6.0d));
    java.awt.geom.Rectangle2D var18 = null;
    org.jfree.chart.util.LengthAdjustmentType var19 = null;
    org.jfree.chart.util.LengthAdjustmentType var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var21 = var14.createAdjustedRectangle(var18, var19, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 8.0d);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    java.text.AttributedString var0 = null;
    java.awt.Shape var4 = null;
    org.jfree.data.category.CategoryDataset var5 = null;
    org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var9 = null;
    var7.setSeriesURLGenerator(10, var9);
    java.awt.Font var11 = var7.getBaseItemLabelFont();
    var6.setLabelFont(var11);
    java.awt.Paint var13 = var6.getTickMarkPaint();
    float var14 = var6.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var15 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var18 = null;
    var16.setSeriesURLGenerator(10, var18);
    java.awt.Font var20 = var16.getBaseItemLabelFont();
    java.lang.Boolean var22 = var16.getSeriesVisibleInLegend(10);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot(var5, var6, var15, (org.jfree.chart.renderer.category.CategoryItemRenderer)var16);
    java.awt.Paint var27 = var16.getItemOutlinePaint(10, 4, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var28 = new org.jfree.chart.LegendItem(var0, "ItemLabelAnchor.OUTSIDE6", "Category Plot", "", var4, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = null;
    var0.setSeriesNegativeItemLabelPosition(0, var5, true);
    org.jfree.chart.labels.ItemLabelPosition var11 = var0.getPositiveItemLabelPosition(0, 1, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesLinesVisible((-16777216), (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    java.lang.String var13 = var0.getLabelURL();
    java.lang.String var15 = var0.getCategoryLabelToolTip((java.lang.Comparable)4.0d);
    var0.setMaximumCategoryLabelLines((-1));
    var0.setUpperMargin((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    var0.setBase((-1.0d));
    java.awt.Font var4 = var0.lookupLegendTextFont(10);
    org.jfree.chart.labels.CategoryToolTipGenerator var6 = null;
    var0.setSeriesToolTipGenerator(10, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    int var13 = var0.getDatasetCount();
    org.jfree.data.category.CategoryDataset var14 = null;
    org.jfree.chart.axis.CategoryAxis var15 = null;
    org.jfree.chart.axis.ValueAxis var16 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var19 = null;
    var17.setSeriesOutlineStroke(100, var19);
    java.awt.Paint var22 = null;
    var17.setSeriesOutlinePaint(0, var22, true);
    java.awt.Shape var26 = var17.lookupSeriesShape(10);
    java.awt.Paint var28 = null;
    var17.setSeriesFillPaint(0, var28, false);
    boolean var31 = var17.getBaseShapesVisible();
    java.awt.Paint var32 = var17.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var33 = var17.getBaseNegativeItemLabelPosition();
    var17.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot(var14, var15, var16, (org.jfree.chart.renderer.category.CategoryItemRenderer)var17);
    org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var38 = null;
    java.awt.geom.Rectangle2D var39 = null;
    org.jfree.chart.plot.PlotRenderingInfo var41 = null;
    org.jfree.chart.plot.CategoryCrosshairState var42 = null;
    boolean var43 = var37.render(var38, var39, 100, var41, var42);
    org.jfree.chart.event.MarkerChangeEvent var44 = null;
    var37.markerChanged(var44);
    org.jfree.chart.plot.Marker var47 = null;
    org.jfree.chart.util.Layer var48 = null;
    boolean var50 = var37.removeDomainMarker(10, var47, var48, true);
    org.jfree.chart.axis.AxisLocation var52 = var37.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var53 = org.jfree.chart.axis.AxisLocation.getOpposite(var52);
    var36.setDomainAxisLocation(var53, false);
    org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var57 = null;
    java.awt.geom.Rectangle2D var58 = null;
    org.jfree.chart.plot.PlotRenderingInfo var60 = null;
    org.jfree.chart.plot.CategoryCrosshairState var61 = null;
    boolean var62 = var56.render(var57, var58, 100, var60, var61);
    org.jfree.chart.event.MarkerChangeEvent var63 = null;
    var56.markerChanged(var63);
    var56.setDrawSharedDomainAxis(true);
    int var67 = var56.getBackgroundImageAlignment();
    org.jfree.chart.axis.AxisSpace var68 = null;
    var56.setFixedRangeAxisSpace(var68);
    double var70 = var56.getRangeCrosshairValue();
    org.jfree.chart.plot.PlotOrientation var71 = var56.getOrientation();
    org.jfree.chart.util.RectangleEdge var72 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var53, var71);
    org.jfree.chart.axis.AxisLocation var73 = var53.getOpposite();
    var0.setRangeAxisLocation(var73);
    org.jfree.data.category.DefaultCategoryDataset var75 = new org.jfree.data.category.DefaultCategoryDataset();
    int var76 = var75.getRowCount();
    var75.validateObject();
    org.jfree.chart.axis.CategoryAxis var78 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var79 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var81 = null;
    var79.setSeriesURLGenerator(10, var81);
    java.awt.Font var83 = var79.getBaseItemLabelFont();
    var78.setLabelFont(var83);
    java.awt.Paint var85 = var78.getTickMarkPaint();
    float var86 = var78.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var87 = null;
    org.jfree.chart.renderer.category.BarRenderer var88 = new org.jfree.chart.renderer.category.BarRenderer();
    var88.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var91 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var75, var78, var87, (org.jfree.chart.renderer.category.CategoryItemRenderer)var88);
    boolean var92 = var78.isTickMarksVisible();
    org.jfree.chart.util.RectangleInsets var93 = var78.getLabelInsets();
    int var94 = var78.getMaximumCategoryLabelLines();
    java.awt.Font var95 = var78.getLabelFont();
    var0.setNoDataMessageFont(var95);
    var0.clearDomainAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var15 = null;
    var13.setSeriesURLGenerator(10, var15);
    org.jfree.chart.labels.ItemLabelPosition var18 = null;
    var13.setSeriesNegativeItemLabelPosition(0, var18, true);
    java.awt.Stroke var22 = var13.lookupSeriesStroke(0);
    var13.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    var0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var13, false);
    org.jfree.data.category.CategoryDataset var28 = null;
    org.jfree.chart.axis.CategoryAxis var29 = null;
    org.jfree.chart.axis.ValueAxis var30 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var33 = null;
    var31.setSeriesOutlineStroke(100, var33);
    java.awt.Paint var36 = null;
    var31.setSeriesOutlinePaint(0, var36, true);
    java.awt.Shape var40 = var31.lookupSeriesShape(10);
    java.awt.Paint var42 = null;
    var31.setSeriesFillPaint(0, var42, false);
    boolean var45 = var31.getBaseShapesVisible();
    java.awt.Paint var46 = var31.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var47 = var31.getBaseNegativeItemLabelPosition();
    var31.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot(var28, var29, var30, (org.jfree.chart.renderer.category.CategoryItemRenderer)var31);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var52 = null;
    java.awt.geom.Rectangle2D var53 = null;
    org.jfree.chart.plot.PlotRenderingInfo var55 = null;
    org.jfree.chart.plot.CategoryCrosshairState var56 = null;
    boolean var57 = var51.render(var52, var53, 100, var55, var56);
    org.jfree.chart.event.MarkerChangeEvent var58 = null;
    var51.markerChanged(var58);
    org.jfree.chart.plot.Marker var61 = null;
    org.jfree.chart.util.Layer var62 = null;
    boolean var64 = var51.removeDomainMarker(10, var61, var62, true);
    org.jfree.chart.axis.AxisLocation var66 = var51.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var67 = org.jfree.chart.axis.AxisLocation.getOpposite(var66);
    var50.setDomainAxisLocation(var67, false);
    var0.setRangeAxisLocation(var67, false);
    org.jfree.chart.axis.ValueAxis var72 = var0.getRangeAxis();
    java.lang.Comparable var73 = null;
    var0.setDomainCrosshairColumnKey(var73, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    int var13 = var0.getDatasetCount();
    org.jfree.data.category.CategoryDataset var14 = null;
    org.jfree.chart.axis.CategoryAxis var15 = null;
    org.jfree.chart.axis.ValueAxis var16 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var19 = null;
    var17.setSeriesOutlineStroke(100, var19);
    java.awt.Paint var22 = null;
    var17.setSeriesOutlinePaint(0, var22, true);
    java.awt.Shape var26 = var17.lookupSeriesShape(10);
    java.awt.Paint var28 = null;
    var17.setSeriesFillPaint(0, var28, false);
    boolean var31 = var17.getBaseShapesVisible();
    java.awt.Paint var32 = var17.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var33 = var17.getBaseNegativeItemLabelPosition();
    var17.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot(var14, var15, var16, (org.jfree.chart.renderer.category.CategoryItemRenderer)var17);
    org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var38 = null;
    java.awt.geom.Rectangle2D var39 = null;
    org.jfree.chart.plot.PlotRenderingInfo var41 = null;
    org.jfree.chart.plot.CategoryCrosshairState var42 = null;
    boolean var43 = var37.render(var38, var39, 100, var41, var42);
    org.jfree.chart.event.MarkerChangeEvent var44 = null;
    var37.markerChanged(var44);
    org.jfree.chart.plot.Marker var47 = null;
    org.jfree.chart.util.Layer var48 = null;
    boolean var50 = var37.removeDomainMarker(10, var47, var48, true);
    org.jfree.chart.axis.AxisLocation var52 = var37.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var53 = org.jfree.chart.axis.AxisLocation.getOpposite(var52);
    var36.setDomainAxisLocation(var53, false);
    org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var57 = null;
    java.awt.geom.Rectangle2D var58 = null;
    org.jfree.chart.plot.PlotRenderingInfo var60 = null;
    org.jfree.chart.plot.CategoryCrosshairState var61 = null;
    boolean var62 = var56.render(var57, var58, 100, var60, var61);
    org.jfree.chart.event.MarkerChangeEvent var63 = null;
    var56.markerChanged(var63);
    var56.setDrawSharedDomainAxis(true);
    int var67 = var56.getBackgroundImageAlignment();
    org.jfree.chart.axis.AxisSpace var68 = null;
    var56.setFixedRangeAxisSpace(var68);
    double var70 = var56.getRangeCrosshairValue();
    org.jfree.chart.plot.PlotOrientation var71 = var56.getOrientation();
    org.jfree.chart.util.RectangleEdge var72 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var53, var71);
    org.jfree.chart.axis.AxisLocation var73 = var53.getOpposite();
    var0.setRangeAxisLocation(var73);
    org.jfree.chart.plot.PlotRenderingInfo var76 = null;
    java.awt.geom.Point2D var77 = null;
    var0.zoomRangeAxes((-6.0d), var76, var77);
    org.jfree.chart.axis.ValueAxis var80 = var0.getRangeAxis(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     java.lang.Object var7 = var0.clone();
//     var0.setVisible(true);
//     boolean var10 = var0.isAxisLineVisible();
//     var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var17 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var18 = null;
//     boolean var19 = var13.render(var14, var15, 100, var17, var18);
//     org.jfree.chart.event.MarkerChangeEvent var20 = null;
//     var13.markerChanged(var20);
//     var13.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var24 = var13.getDrawingSupplier();
//     org.jfree.chart.LegendItemCollection var25 = var13.getLegendItems();
//     var0.addChangeListener((org.jfree.chart.event.AxisChangeListener)var13);
//     double var27 = var0.getLabelAngle();
//     var0.setVisible(true);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var31 = null;
//     java.awt.geom.Rectangle2D var32 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var34 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var35 = null;
//     boolean var36 = var30.render(var31, var32, 100, var34, var35);
//     org.jfree.chart.event.MarkerChangeEvent var37 = null;
//     var30.markerChanged(var37);
//     var30.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var41 = var30.getInsets();
//     double var43 = var41.calculateRightOutset(0.0d);
//     double var45 = var41.calculateTopInset(100.0d);
//     double var47 = var41.calculateLeftInset(100.0d);
//     double var48 = var41.getTop();
//     var0.setTickLabelInsets(var41);
//     
//     // Checks the contract:  equals-hashcode on var13 and var30
//     assertTrue("Contract failed: equals-hashcode on var13 and var30", var13.equals(var30) ? var13.hashCode() == var30.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var13
//     assertTrue("Contract failed: equals-hashcode on var30 and var13", var30.equals(var13) ? var30.hashCode() == var13.hashCode() : true);
// 
//   }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }


    org.jfree.chart.util.StrokeList var0 = new org.jfree.chart.util.StrokeList();
    java.awt.Stroke var2 = null;
    var0.setStroke(2, var2);
    java.awt.Stroke var5 = var0.getStroke(10);
    java.lang.Object var6 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     var0.removeAnnotations();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var5 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var7 = null;
//     var5.setSeriesURLGenerator(10, var7);
//     boolean var12 = var5.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     var5.setPlot(var13);
//     var13.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
//     java.awt.Paint var17 = var13.getRangeCrosshairPaint();
//     org.jfree.chart.axis.ValueAxis var18 = null;
//     org.jfree.chart.axis.ValueAxis[] var19 = new org.jfree.chart.axis.ValueAxis[] { var18};
//     var13.setRangeAxes(var19);
//     var13.setRangeCrosshairLockedOnData(false);
//     var13.setForegroundAlpha((-1.0f));
//     boolean var25 = var0.hasListener((java.util.EventListener)var13);
//     
//     // Checks the contract:  equals-hashcode on var0 and var5
//     assertTrue("Contract failed: equals-hashcode on var0 and var5", var0.equals(var5) ? var0.hashCode() == var5.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var5 and var0
//     assertTrue("Contract failed: equals-hashcode on var5 and var0", var5.equals(var0) ? var5.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateRightOutset(0.0d);
    double var15 = var11.calculateTopInset(100.0d);
    double var17 = var11.calculateLeftInset(100.0d);
    double var18 = var11.getTop();
    double var20 = var11.trimWidth(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-16.0d));

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    java.util.List var3 = var0.getAnnotations();
    org.jfree.chart.util.SortOrder var4 = var0.getColumnRenderingOrder();
    org.jfree.chart.plot.Marker var5 = null;
    org.jfree.chart.util.Layer var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = var0.removeRangeMarker(var5, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }


    java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var4);
    boolean var6 = var5.isLineVisible();
    org.jfree.chart.util.ObjectList var7 = new org.jfree.chart.util.ObjectList();
    java.lang.Object var9 = var7.get(1);
    org.jfree.chart.renderer.RenderAttributes var10 = new org.jfree.chart.renderer.RenderAttributes();
    boolean var11 = var7.equals((java.lang.Object)var10);
    org.jfree.chart.plot.DefaultDrawingSupplier var12 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.lang.Object var13 = var12.clone();
    java.awt.Stroke var14 = var12.getNextOutlineStroke();
    var10.setDefaultStroke(var14);
    var5.setOutlineStroke(var14);
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
    java.util.List var18 = var17.getAnnotations();
    java.lang.String var19 = var17.getPlotType();
    org.jfree.chart.plot.Plot var20 = var17.getRootPlot();
    java.awt.Font var21 = var17.getNoDataMessageFont();
    var5.setLabelFont(var21);
    java.lang.Comparable var23 = var5.getSeriesKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Category Plot"+ "'", var19.equals("Category Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var15 = null;
    var13.setSeriesURLGenerator(10, var15);
    org.jfree.chart.labels.ItemLabelPosition var18 = null;
    var13.setSeriesNegativeItemLabelPosition(0, var18, true);
    java.awt.Stroke var22 = var13.lookupSeriesStroke(0);
    var13.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    var0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var13, false);
    boolean var28 = var0.isDomainZoomable();
    boolean var29 = var0.isRangeCrosshairLockedOnData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test216() {}
//   public void test216() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
//     var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var0.setCategoryMargin(1.0d);
//     var0.setTickMarkOutsideLength(100.0f);
//     java.awt.Stroke var19 = var0.getTickMarkStroke();
//     var0.clearCategoryLabelToolTips();
//     org.jfree.chart.axis.CategoryAxis var21 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var24 = null;
//     var22.setSeriesURLGenerator(10, var24);
//     java.awt.Font var26 = var22.getBaseItemLabelFont();
//     var21.setLabelFont(var26);
//     org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
//     var28.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var31 = var28.getDomainAxis();
//     var21.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var28);
//     var21.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var21.setCategoryMargin(1.0d);
//     org.jfree.chart.axis.CategoryLabelPositions var38 = var21.getCategoryLabelPositions();
//     var0.setCategoryLabelPositions(var38);
//     
//     // Checks the contract:  equals-hashcode on var7 and var28
//     assertTrue("Contract failed: equals-hashcode on var7 and var28", var7.equals(var28) ? var7.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var7
//     assertTrue("Contract failed: equals-hashcode on var28 and var7", var28.equals(var7) ? var28.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateRightOutset(0.0d);
    double var15 = var11.calculateRightOutset(8.0d);
    java.awt.geom.Rectangle2D var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var19 = var11.createOutsetRectangle(var16, false, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 8.0d);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, false);
    int var3 = var2.getPassCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }


    org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
    java.lang.Boolean var7 = var0.getDefaultCreateEntity();
    boolean var8 = var0.getAllowNull();
    java.awt.Paint var10 = var0.getSeriesFillPaint(10);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var18 = null;
    var16.setSeriesOutlineStroke(100, var18);
    java.awt.Paint var21 = null;
    var16.setSeriesOutlinePaint(0, var21, true);
    var16.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var28 = var16.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var29 = new org.jfree.chart.entity.ChartEntity(var28);
    java.lang.String var30 = var29.toString();
    var29.setToolTipText("TextAnchor.CENTER");
    java.awt.Shape var33 = var29.getArea();
    org.jfree.chart.renderer.category.BarRenderer var34 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var35 = var34.getNegativeItemLabelPositionFallback();
    double var36 = var34.getItemMargin();
    var34.setItemLabelAnchorOffset((-1.0d));
    java.awt.Paint var40 = var34.lookupSeriesOutlinePaint(0);
    org.jfree.chart.LegendItem var41 = new org.jfree.chart.LegendItem("hi!", "", "rect", "Category Plot", var33, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesPaint((-16777216), var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ChartEntity: tooltip = null"+ "'", var30.equals("ChartEntity: tooltip = null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    boolean var7 = var0.isOutlineVisible();
    var0.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var10 = var0.getDomainGridlinePosition();
    java.awt.Paint var11 = var0.getBackgroundPaint();
    org.jfree.chart.LegendItemCollection var12 = var0.getLegendItems();
    org.jfree.chart.axis.CategoryAxis var14 = var0.getDomainAxis(4);
    boolean var15 = var0.isRangeZoomable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setTickMarkOutsideLength(100.0f);
    java.awt.Stroke var19 = var0.getTickMarkStroke();
    org.jfree.chart.plot.Plot var20 = var0.getPlot();
    var0.setCategoryMargin(100.0d);
    boolean var23 = var0.isTickMarksVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }
// 
// 
//     org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var4 = null;
//     var2.setSeriesURLGenerator(10, var4);
//     java.awt.Font var6 = var2.getBaseItemLabelFont();
//     var1.setLabelFont(var6);
//     java.lang.Object var8 = var1.clone();
//     org.jfree.chart.axis.ValueAxis var9 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var12 = null;
//     var10.setSeriesURLGenerator(10, var12);
//     org.jfree.chart.labels.ItemLabelPosition var15 = var10.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.plot.CategoryPlot var16 = var10.getPlot();
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var1, var9, (org.jfree.chart.renderer.category.CategoryItemRenderer)var10);
//     var0.fireSelectionEvent();
//     org.jfree.data.category.DefaultCategoryDataset var19 = new org.jfree.data.category.DefaultCategoryDataset();
//     int var20 = var19.getRowCount();
//     var19.validateObject();
//     org.jfree.chart.axis.CategoryAxis var22 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var25 = null;
//     var23.setSeriesURLGenerator(10, var25);
//     java.awt.Font var27 = var23.getBaseItemLabelFont();
//     var22.setLabelFont(var27);
//     java.awt.Paint var29 = var22.getTickMarkPaint();
//     float var30 = var22.getTickMarkInsideLength();
//     org.jfree.chart.axis.ValueAxis var31 = null;
//     org.jfree.chart.renderer.category.BarRenderer var32 = new org.jfree.chart.renderer.category.BarRenderer();
//     var32.setBase((-1.0d));
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var19, var22, var31, (org.jfree.chart.renderer.category.CategoryItemRenderer)var32);
//     java.lang.Object var36 = var19.clone();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var37 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var39 = null;
//     var37.setSeriesOutlineStroke(100, var39);
//     java.awt.Paint var42 = null;
//     var37.setSeriesOutlinePaint(0, var42, true);
//     java.awt.Shape var46 = var37.lookupSeriesShape(10);
//     java.awt.Paint var48 = null;
//     var37.setSeriesFillPaint(0, var48, false);
//     boolean var51 = var37.getBaseShapesVisible();
//     java.awt.Paint var52 = null;
//     var37.setBasePaint(var52);
//     var37.setAutoPopulateSeriesOutlineStroke(false);
//     boolean var59 = var37.getItemCreateEntity(1, 0, false);
//     org.jfree.chart.labels.ItemLabelPosition var63 = var37.getPositiveItemLabelPosition(1, 0, true);
//     org.jfree.data.general.Dataset var64 = null;
//     org.jfree.chart.event.DatasetChangeInfo var65 = new org.jfree.chart.event.DatasetChangeInfo();
//     org.jfree.data.event.DatasetChangeEvent var66 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object)1, var64, var65);
//     org.jfree.data.event.DatasetChangeEvent var67 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object)var0, (org.jfree.data.general.Dataset)var19, var65);
//     
//     // Checks the contract:  equals-hashcode on var15 and var63
//     assertTrue("Contract failed: equals-hashcode on var15 and var63", var15.equals(var63) ? var15.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var15
//     assertTrue("Contract failed: equals-hashcode on var63 and var15", var63.equals(var15) ? var63.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    var0.clear();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    var3.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var15 = var3.lookupSeriesShape((-1));
    java.awt.Paint var17 = null;
    var3.setLegendTextPaint(0, var17);
    var0.setObject((java.lang.Comparable)10.0f, (java.lang.Object)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeValue(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    java.awt.Paint var17 = var0.getBaseOutlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var20 = null;
    var18.setSeriesOutlineStroke(100, var20);
    java.awt.Paint var23 = null;
    var18.setSeriesOutlinePaint(0, var23, true);
    java.awt.Shape var27 = var18.lookupSeriesShape(10);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var30 = null;
    var28.setSeriesOutlineStroke(100, var30);
    java.awt.Paint var33 = null;
    var28.setSeriesOutlinePaint(0, var33, true);
    org.jfree.chart.labels.ItemLabelPosition var36 = var28.getBaseNegativeItemLabelPosition();
    var18.setBaseNegativeItemLabelPosition(var36);
    org.jfree.chart.labels.ItemLabelAnchor var38 = var36.getItemLabelAnchor();
    var0.setNegativeItemLabelPositionFallback(var36);
    java.lang.Boolean var41 = var0.getSeriesVisible(255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateLeftInset(8.0d);
    org.jfree.chart.renderer.RenderAttributes var14 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Shape var17 = var14.getItemShape(0, 0);
    java.awt.Paint var20 = var14.getItemOutlinePaint(2, 0);
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.setRangeCrosshairValue((-1.0d));
    var21.setNoDataMessage("");
    java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var21.setRangeZeroBaselinePaint((java.awt.Paint)var29);
    var14.setDefaultFillPaint((java.awt.Paint)var29);
    java.awt.Shape var32 = var14.getDefaultShape();
    boolean var33 = var11.equals((java.lang.Object)var14);
    java.awt.Color var37 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var38 = var37.getRGB();
    java.awt.Color var39 = var37.darker();
    var14.setDefaultPaint((java.awt.Paint)var39);
    java.awt.Paint var43 = var14.getItemFillPaint(1, 255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-16777216));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    org.jfree.chart.LegendItemCollection var0 = new org.jfree.chart.LegendItemCollection();
    int var1 = var0.getItemCount();
    java.lang.Object var2 = var0.clone();
    org.jfree.data.SelectableValue var4 = new org.jfree.data.SelectableValue((java.lang.Number)1);
    boolean var5 = var0.equals((java.lang.Object)var4);
    boolean var6 = var4.isSelected();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    double var17 = var0.getMinimumBarLength();
    var0.setMinimumBarLength(0.0d);
    java.awt.Color var22 = java.awt.Color.getColor("ChartEntity: tooltip = null", 15);
    var0.setShadowPaint((java.awt.Paint)var22);
    org.jfree.chart.LegendItem var26 = var0.getLegendItem((-16777216), (-254));
    java.lang.Boolean var28 = null;
    var0.setSeriesVisible(10, var28);
    var0.setMaximumBarWidth((-0.7853981633974483d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    org.jfree.data.category.CategoryDataset var14 = var0.getDataset(15);
    org.jfree.chart.renderer.RenderAttributes var16 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var16.setSeriesOutlinePaint(0, (java.awt.Paint)var21);
    java.awt.image.ColorModel var23 = null;
    java.awt.Rectangle var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    java.awt.geom.AffineTransform var26 = null;
    java.awt.RenderingHints var27 = null;
    java.awt.PaintContext var28 = var21.createContext(var23, var24, var25, var26, var27);
    java.awt.Color var29 = java.awt.Color.getColor("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", var21);
    var0.setDomainGridlinePaint((java.awt.Paint)var21);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var33 = null;
    var31.setSeriesURLGenerator(10, var33);
    org.jfree.chart.labels.ItemLabelPosition var36 = var31.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.text.TextAnchor var37 = var36.getRotationAnchor();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var41 = null;
    var39.setSeriesOutlineStroke(100, var41);
    java.awt.Paint var44 = null;
    var39.setSeriesOutlinePaint(0, var44, true);
    var39.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var51 = var39.lookupSeriesShape((-1));
    java.awt.Paint var53 = null;
    var39.setLegendTextPaint(0, var53);
    boolean var55 = var39.getAutoPopulateSeriesOutlineStroke();
    var39.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var61 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var62 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var61);
    var39.setBasePaint((java.awt.Paint)var61, false);
    java.awt.image.ColorModel var65 = null;
    java.awt.Rectangle var66 = null;
    java.awt.geom.Rectangle2D var67 = null;
    java.awt.geom.AffineTransform var68 = null;
    java.awt.RenderingHints var69 = null;
    java.awt.PaintContext var70 = var61.createContext(var65, var66, var67, var68, var69);
    java.awt.Color var71 = java.awt.Color.getColor("", var61);
    java.awt.color.ColorSpace var72 = var71.getColorSpace();
    boolean var73 = var37.equals((java.lang.Object)var72);
    org.jfree.chart.plot.CategoryPlot var74 = new org.jfree.chart.plot.CategoryPlot();
    var74.setRangeCrosshairValue((-1.0d));
    var74.setNoDataMessage("");
    java.awt.Color var82 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var74.setRangeZeroBaselinePaint((java.awt.Paint)var82);
    float[] var87 = new float[] { 100.0f, 1.0f, 100.0f};
    float[] var88 = var82.getRGBColorComponents(var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var89 = var21.getComponents(var72, var87);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = var0.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getBaseNegativeItemLabelPosition();
    java.awt.Shape var18 = var0.lookupSeriesShape(2);
    org.jfree.chart.entity.ChartEntity var21 = new org.jfree.chart.entity.ChartEntity(var18, "ItemLabelAnchor.OUTSIDE6", "-3,-3,3,3");
    java.lang.String var22 = var21.getShapeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "rect"+ "'", var22.equals("rect"));

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    int var13 = var0.getDatasetCount();
    java.lang.String var14 = var0.getNoDataMessage();
    org.jfree.chart.plot.DatasetRenderingOrder var15 = var0.getDatasetRenderingOrder();
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var19 = null;
    var17.setSeriesURLGenerator(10, var19);
    java.awt.Font var21 = var17.getBaseItemLabelFont();
    var16.setLabelFont(var21);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    var23.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var26 = var23.getDomainAxis();
    var16.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var23);
    var16.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setDomainAxis(var16);
    org.jfree.chart.event.AnnotationChangeEvent var32 = null;
    var0.annotationChanged(var32);
    boolean var34 = var0.isRangeZoomable();
    org.jfree.chart.plot.PlotRenderingInfo var36 = null;
    java.awt.geom.Point2D var37 = null;
    var0.zoomDomainAxes(8.0d, var36, var37, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setUseOutlinePaint(false);
    var0.setBaseSeriesVisible(false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var21.setBaseSeriesVisibleInLegend(false, true);
    java.awt.Graphics2D var25 = null;
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var28 = null;
    java.awt.geom.Rectangle2D var29 = null;
    org.jfree.chart.plot.PlotRenderingInfo var31 = null;
    org.jfree.chart.plot.CategoryCrosshairState var32 = null;
    boolean var33 = var27.render(var28, var29, 100, var31, var32);
    org.jfree.chart.event.MarkerChangeEvent var34 = null;
    var27.markerChanged(var34);
    var27.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var38 = var27.getDrawingSupplier();
    java.awt.Paint var39 = var27.getRangeGridlinePaint();
    var27.setForegroundAlpha((-1.0f));
    org.jfree.data.category.DefaultCategoryDataset var42 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.plot.PlotRenderingInfo var43 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var44 = var21.initialise(var25, var26, var27, (org.jfree.data.category.CategoryDataset)var42, var43);
    int var45 = var42.getRowCount();
    org.jfree.data.Range var46 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var42);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var50 = null;
    var48.setSeriesOutlineStroke(100, var50);
    java.awt.Paint var53 = null;
    var48.setSeriesOutlinePaint(0, var53, true);
    var48.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var60 = var48.lookupSeriesShape((-1));
    java.awt.Paint var62 = null;
    var48.setLegendTextPaint(0, var62);
    java.awt.Font var64 = var48.getBaseItemLabelFont();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesItemLabelFont((-2), var64);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
//     java.awt.Stroke var8 = null;
//     var0.setSeriesOutlineStroke(255, var8);
// 
//   }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    int var3 = var0.getRowCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var5 = var0.getColumnKey(5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }


    org.jfree.chart.plot.DefaultDrawingSupplier var0 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.lang.Object var1 = var0.clone();
    java.awt.Stroke var2 = var0.getNextOutlineStroke();
    java.awt.Stroke var3 = var0.getNextStroke();
    java.awt.Paint var4 = var0.getNextOutlinePaint();
    java.lang.Object var5 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test235() {}
//   public void test235() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     java.awt.geom.GeneralPath var7 = null;
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.chart.RenderingSource var9 = null;
//     var0.select(var7, var8, var9);
//     org.jfree.chart.plot.PlotRenderingInfo var12 = null;
//     java.awt.geom.Point2D var13 = null;
//     var0.zoomDomainAxes(100.0d, var12, var13, true);
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var17 = null;
//     java.awt.geom.Rectangle2D var18 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var20 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var21 = null;
//     boolean var22 = var16.render(var17, var18, 100, var20, var21);
//     org.jfree.chart.plot.Plot var23 = var16.getParent();
//     org.jfree.chart.axis.CategoryAxis var24 = null;
//     org.jfree.chart.axis.CategoryAxis[] var25 = new org.jfree.chart.axis.CategoryAxis[] { var24};
//     var16.setDomainAxes(var25);
//     var0.setDomainAxes(var25);
//     
//     // Checks the contract:  equals-hashcode on var0 and var16
//     assertTrue("Contract failed: equals-hashcode on var0 and var16", var0.equals(var16) ? var0.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var0
//     assertTrue("Contract failed: equals-hashcode on var16 and var0", var16.equals(var0) ? var16.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setWeight(10);
    org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var4 = null;
    org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    java.awt.Shape var15 = var6.lookupSeriesShape(10);
    java.awt.Paint var17 = null;
    var6.setSeriesFillPaint(0, var17, false);
    boolean var20 = var6.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var23 = var6.getBaseItemLabelFont();
    boolean var24 = var3.equals((java.lang.Object)var6);
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
    org.jfree.chart.plot.Marker var26 = null;
    org.jfree.chart.util.Layer var27 = null;
    boolean var28 = var0.removeDomainMarker(var26, var27);
    org.jfree.chart.util.RectangleInsets var29 = var0.getInsets();
    double var31 = var29.trimWidth(8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-8.0d));

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var16 = null;
    java.awt.geom.Rectangle2D var17 = null;
    org.jfree.chart.plot.PlotRenderingInfo var19 = null;
    org.jfree.chart.plot.CategoryCrosshairState var20 = null;
    boolean var21 = var15.render(var16, var17, 100, var19, var20);
    org.jfree.chart.event.MarkerChangeEvent var22 = null;
    var15.markerChanged(var22);
    var15.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var26 = var15.getInsets();
    double var28 = var26.calculateRightOutset(0.0d);
    org.jfree.chart.util.UnitType var29 = var26.getUnitType();
    var0.setLabelInsets(var26);
    var0.clearCategoryLabelToolTips();
    boolean var32 = var0.isTickLabelsVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    var0.setBaseSeriesVisibleInLegend(true);
    java.awt.Font var17 = var0.getBaseLegendTextFont();
    java.awt.Shape var19 = var0.getSeriesShape(15);
    org.jfree.chart.renderer.category.BarRenderer var20 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var21 = var20.isDrawBarOutline();
    boolean var22 = var20.isDrawBarOutline();
    java.awt.Paint var23 = var20.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var25 = null;
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.plot.PlotRenderingInfo var28 = null;
    org.jfree.chart.plot.CategoryCrosshairState var29 = null;
    boolean var30 = var24.render(var25, var26, 100, var28, var29);
    boolean var31 = var24.isOutlineVisible();
    var24.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var34 = var24.getDomainGridlinePosition();
    java.awt.Paint var35 = var24.getBackgroundPaint();
    var20.addChangeListener((org.jfree.chart.event.RendererChangeListener)var24);
    org.jfree.chart.labels.ItemLabelPosition var37 = new org.jfree.chart.labels.ItemLabelPosition();
    var20.setPositiveItemLabelPositionFallback(var37);
    var0.setBaseNegativeItemLabelPosition(var37);
    double var40 = var0.getItemMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.0d);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var15 = null;
    var13.setSeriesURLGenerator(10, var15);
    org.jfree.chart.labels.ItemLabelPosition var18 = null;
    var13.setSeriesNegativeItemLabelPosition(0, var18, true);
    java.awt.Stroke var22 = var13.lookupSeriesStroke(0);
    var13.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    var0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var13, false);
    org.jfree.data.category.CategoryDataset var28 = null;
    org.jfree.chart.axis.CategoryAxis var29 = null;
    org.jfree.chart.axis.ValueAxis var30 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var33 = null;
    var31.setSeriesOutlineStroke(100, var33);
    java.awt.Paint var36 = null;
    var31.setSeriesOutlinePaint(0, var36, true);
    java.awt.Shape var40 = var31.lookupSeriesShape(10);
    java.awt.Paint var42 = null;
    var31.setSeriesFillPaint(0, var42, false);
    boolean var45 = var31.getBaseShapesVisible();
    java.awt.Paint var46 = var31.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var47 = var31.getBaseNegativeItemLabelPosition();
    var31.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot(var28, var29, var30, (org.jfree.chart.renderer.category.CategoryItemRenderer)var31);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var52 = null;
    java.awt.geom.Rectangle2D var53 = null;
    org.jfree.chart.plot.PlotRenderingInfo var55 = null;
    org.jfree.chart.plot.CategoryCrosshairState var56 = null;
    boolean var57 = var51.render(var52, var53, 100, var55, var56);
    org.jfree.chart.event.MarkerChangeEvent var58 = null;
    var51.markerChanged(var58);
    org.jfree.chart.plot.Marker var61 = null;
    org.jfree.chart.util.Layer var62 = null;
    boolean var64 = var51.removeDomainMarker(10, var61, var62, true);
    org.jfree.chart.axis.AxisLocation var66 = var51.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var67 = org.jfree.chart.axis.AxisLocation.getOpposite(var66);
    var50.setDomainAxisLocation(var67, false);
    var0.setRangeAxisLocation(var67, false);
    org.jfree.chart.axis.CategoryAxis var73 = var0.getDomainAxisForDataset(2);
    var0.setDomainCrosshairRowKey((java.lang.Comparable)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     var0.setAutoPopulateSeriesOutlinePaint(true);
//     var0.setAutoPopulateSeriesPaint(false);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var18 = null;
//     var16.setSeriesURLGenerator(10, var18);
//     boolean var23 = var16.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
//     var16.setPlot(var24);
//     var24.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
//     java.awt.Paint var28 = var24.getRangeCrosshairPaint();
//     org.jfree.chart.axis.ValueAxis var29 = null;
//     org.jfree.chart.axis.ValueAxis[] var30 = new org.jfree.chart.axis.ValueAxis[] { var29};
//     var24.setRangeAxes(var30);
//     org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var33 = null;
//     java.awt.geom.Rectangle2D var34 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var36 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var37 = null;
//     boolean var38 = var32.render(var33, var34, 100, var36, var37);
//     org.jfree.chart.event.MarkerChangeEvent var39 = null;
//     var32.markerChanged(var39);
//     var32.setDrawSharedDomainAxis(true);
//     int var43 = var32.getBackgroundImageAlignment();
//     boolean var44 = var32.canSelectByRegion();
//     int var45 = var32.getDatasetCount();
//     java.lang.String var46 = var32.getNoDataMessage();
//     org.jfree.chart.plot.DatasetRenderingOrder var47 = var32.getDatasetRenderingOrder();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var50 = null;
//     var48.setSeriesOutlineStroke(100, var50);
//     java.awt.Paint var53 = null;
//     var48.setSeriesOutlinePaint(0, var53, true);
//     java.awt.Shape var57 = var48.lookupSeriesShape(10);
//     java.awt.Paint var59 = null;
//     var48.setSeriesFillPaint(0, var59, false);
//     boolean var62 = var48.getBaseShapesVisible();
//     java.awt.Paint var63 = var48.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var64 = var48.getBaseNegativeItemLabelPosition();
//     var48.setBaseSeriesVisible(false);
//     boolean var67 = var47.equals((java.lang.Object)var48);
//     var24.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var48, true);
//     java.awt.Color var74 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
//     org.jfree.chart.LegendItem var75 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var74);
//     java.awt.Shape var76 = var75.getShape();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var77 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var79 = null;
//     var77.setSeriesURLGenerator(10, var79);
//     org.jfree.chart.labels.ItemLabelPosition var82 = null;
//     var77.setSeriesNegativeItemLabelPosition(0, var82, true);
//     java.awt.Stroke var86 = var77.lookupSeriesStroke(10);
//     var75.setOutlineStroke(var86);
//     var48.setBaseOutlineStroke(var86);
//     var0.setSeriesStroke(0, var86, false);
//     
//     // Checks the contract:  equals-hashcode on var16 and var0
//     assertTrue("Contract failed: equals-hashcode on var16 and var0", var16.equals(var0) ? var16.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var77 and var0
//     assertTrue("Contract failed: equals-hashcode on var77 and var0", var77.equals(var0) ? var77.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var16 and var0.", var16.equals(var0) == var0.equals(var16));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var77 and var0.", var77.equals(var0) == var0.equals(var77));
// 
//   }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    var8.setRangeCrosshairLockedOnData(false);
    org.jfree.chart.LegendItemCollection var18 = var8.getFixedLegendItems();
    org.jfree.chart.event.MarkerChangeEvent var19 = null;
    var8.markerChanged(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.util.List var1 = var0.getAnnotations();
//     org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
//     var0.setShadowGenerator((org.jfree.chart.util.ShadowGenerator)var2);
//     org.jfree.chart.axis.CategoryAxis var4 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var5 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var7 = null;
//     var5.setSeriesURLGenerator(10, var7);
//     java.awt.Font var9 = var5.getBaseItemLabelFont();
//     var4.setLabelFont(var9);
//     java.lang.Object var11 = var4.clone();
//     var4.setVisible(true);
//     boolean var14 = var4.isAxisLineVisible();
//     var4.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var18 = null;
//     java.awt.geom.Rectangle2D var19 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var21 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var22 = null;
//     boolean var23 = var17.render(var18, var19, 100, var21, var22);
//     org.jfree.chart.event.MarkerChangeEvent var24 = null;
//     var17.markerChanged(var24);
//     var17.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var28 = var17.getDrawingSupplier();
//     org.jfree.chart.LegendItemCollection var29 = var17.getLegendItems();
//     var4.addChangeListener((org.jfree.chart.event.AxisChangeListener)var17);
//     double var31 = var4.getLabelAngle();
//     var4.setVisible(true);
//     var4.setUpperMargin((-6.0d));
//     var0.setDomainAxis(var4);
//     java.awt.Graphics2D var37 = null;
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var39 = null;
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var42 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var43 = null;
//     boolean var44 = var38.render(var39, var40, 100, var42, var43);
//     org.jfree.chart.plot.Plot var45 = var38.getParent();
//     org.jfree.chart.axis.CategoryAxis var46 = null;
//     org.jfree.chart.axis.CategoryAxis[] var47 = new org.jfree.chart.axis.CategoryAxis[] { var46};
//     var38.setDomainAxes(var47);
//     java.awt.Stroke var49 = var38.getDomainGridlineStroke();
//     java.awt.Graphics2D var50 = null;
//     java.awt.geom.Rectangle2D var51 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var53 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var54 = null;
//     boolean var55 = var38.render(var50, var51, 2, var53, var54);
//     org.jfree.chart.util.Layer var57 = null;
//     java.util.Collection var58 = var38.getDomainMarkers((-16777216), var57);
//     java.awt.geom.Rectangle2D var59 = null;
//     org.jfree.chart.axis.CategoryAxis var60 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var61 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var63 = null;
//     var61.setSeriesURLGenerator(10, var63);
//     java.awt.Font var65 = var61.getBaseItemLabelFont();
//     var60.setLabelFont(var65);
//     java.lang.Object var67 = var60.clone();
//     var60.setVisible(true);
//     boolean var70 = var60.isAxisLineVisible();
//     var60.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     java.lang.String var73 = var60.getLabelURL();
//     var60.setCategoryLabelPositionOffset(5);
//     java.awt.Graphics2D var76 = null;
//     java.awt.geom.Rectangle2D var78 = null;
//     org.jfree.chart.plot.CategoryPlot var79 = new org.jfree.chart.plot.CategoryPlot();
//     var79.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var82 = var79.getDomainGridlineStroke();
//     org.jfree.chart.util.RectangleEdge var84 = var79.getDomainAxisEdge(15);
//     org.jfree.chart.axis.AxisState var85 = null;
//     var60.drawTickMarks(var76, 8.0d, var78, var84, var85);
//     org.jfree.chart.axis.AxisSpace var87 = null;
//     org.jfree.chart.axis.AxisSpace var88 = var4.reserveSpace(var37, (org.jfree.chart.plot.Plot)var38, var59, var84, var87);
// 
//   }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }


    org.jfree.data.general.DatasetGroup var0 = new org.jfree.data.general.DatasetGroup();
    java.lang.String var1 = var0.getID();
    java.lang.String var2 = var0.getID();
    org.jfree.chart.LegendItemCollection var3 = new org.jfree.chart.LegendItemCollection();
    java.awt.Color var8 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    org.jfree.chart.LegendItem var9 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var8);
    java.awt.Shape var10 = var9.getShape();
    boolean var11 = var3.equals((java.lang.Object)var9);
    boolean var12 = var0.equals((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "NOID"+ "'", var1.equals("NOID"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "NOID"+ "'", var2.equals("NOID"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.util.Layer var7 = null;
    java.util.Collection var8 = var0.getDomainMarkers(var7);
    org.jfree.chart.axis.AxisSpace var9 = var0.getFixedRangeAxisSpace();
    boolean var10 = var0.isRangeZoomable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test245() {}
//   public void test245() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
//     java.lang.Boolean var7 = var0.getDefaultCreateEntity();
//     java.awt.Stroke var9 = var0.getSeriesStroke(4);
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var15 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var16 = null;
//     boolean var17 = var11.render(var12, var13, 100, var15, var16);
//     org.jfree.chart.event.MarkerChangeEvent var18 = null;
//     var11.markerChanged(var18);
//     var11.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var22 = var11.getDrawingSupplier();
//     java.awt.Paint var23 = var11.getRangeGridlinePaint();
//     var0.setSeriesPaint(3, var23);
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var27 = null;
//     java.awt.geom.Rectangle2D var28 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var30 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var31 = null;
//     boolean var32 = var26.render(var27, var28, 100, var30, var31);
//     org.jfree.chart.event.MarkerChangeEvent var33 = null;
//     var26.markerChanged(var33);
//     var26.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var37 = var26.getInsets();
//     double var39 = var37.calculateLeftInset(8.0d);
//     org.jfree.chart.renderer.RenderAttributes var40 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var43 = var40.getItemShape(0, 0);
//     java.awt.Paint var46 = var40.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
//     var47.setRangeCrosshairValue((-1.0d));
//     var47.setNoDataMessage("");
//     java.awt.Color var55 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var47.setRangeZeroBaselinePaint((java.awt.Paint)var55);
//     var40.setDefaultFillPaint((java.awt.Paint)var55);
//     java.awt.Shape var58 = var40.getDefaultShape();
//     boolean var59 = var37.equals((java.lang.Object)var40);
//     java.awt.Stroke var61 = var40.getSeriesStroke(15);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var62 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Paint var64 = var62.getSeriesFillPaint(0);
//     java.awt.Paint var68 = var62.getItemPaint(0, 0, true);
//     org.jfree.chart.urls.CategoryURLGenerator var72 = var62.getURLGenerator(0, 4, false);
//     java.awt.Paint var76 = var62.getItemFillPaint(0, 0, true);
//     var40.setDefaultPaint(var76);
//     var0.setSeriesFillPaint(100, var76);
//     
//     // Checks the contract:  equals-hashcode on var11 and var26
//     assertTrue("Contract failed: equals-hashcode on var11 and var26", var11.equals(var26) ? var11.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var11
//     assertTrue("Contract failed: equals-hashcode on var26 and var11", var26.equals(var11) ? var26.hashCode() == var11.hashCode() : true);
// 
//   }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    java.awt.Stroke var3 = var0.getDomainGridlineStroke();
    org.jfree.chart.util.RectangleEdge var5 = var0.getDomainAxisEdge(15);
    var0.setRangeCrosshairLockedOnData(true);
    org.jfree.data.category.CategoryDataset var8 = null;
    org.jfree.chart.axis.CategoryAxis var9 = null;
    org.jfree.chart.axis.ValueAxis var10 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    java.awt.Shape var20 = var11.lookupSeriesShape(10);
    java.awt.Paint var22 = null;
    var11.setSeriesFillPaint(0, var22, false);
    boolean var25 = var11.getBaseShapesVisible();
    java.awt.Paint var26 = var11.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var27 = var11.getBaseNegativeItemLabelPosition();
    var11.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot(var8, var9, var10, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11);
    org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    org.jfree.chart.plot.PlotRenderingInfo var35 = null;
    org.jfree.chart.plot.CategoryCrosshairState var36 = null;
    boolean var37 = var31.render(var32, var33, 100, var35, var36);
    org.jfree.chart.event.MarkerChangeEvent var38 = null;
    var31.markerChanged(var38);
    org.jfree.chart.plot.Marker var41 = null;
    org.jfree.chart.util.Layer var42 = null;
    boolean var44 = var31.removeDomainMarker(10, var41, var42, true);
    org.jfree.chart.axis.AxisLocation var46 = var31.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var47 = org.jfree.chart.axis.AxisLocation.getOpposite(var46);
    var30.setDomainAxisLocation(var47, false);
    var0.setRangeAxisLocation(var47, false);
    org.jfree.chart.axis.ValueAxis var52 = null;
    org.jfree.data.Range var53 = var0.getDataRange(var52);
    var0.clearRangeMarkers((-16777216));
    org.jfree.chart.plot.PlotRenderingInfo var57 = null;
    java.awt.geom.Point2D var58 = null;
    var0.panRangeAxes(0.2d, var57, var58);
    var0.setWeight(2);
    org.jfree.data.category.CategoryDataset var63 = var0.getDataset(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    java.lang.Boolean var15 = null;
    var0.setSeriesCreateEntities(2, var15, false);
    java.awt.Paint var19 = var0.getSeriesItemLabelPaint((-16777216));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var23 = null;
    var21.setSeriesURLGenerator(10, var23);
    org.jfree.chart.labels.ItemLabelPosition var26 = null;
    var21.setSeriesNegativeItemLabelPosition(0, var26, true);
    java.awt.Stroke var30 = var21.lookupSeriesStroke(0);
    var21.setBaseShapesFilled(false);
    org.jfree.chart.labels.ItemLabelPosition var34 = var21.getSeriesNegativeItemLabelPosition(3);
    org.jfree.chart.axis.CategoryAxis var35 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var38 = null;
    var36.setSeriesURLGenerator(10, var38);
    java.awt.Font var40 = var36.getBaseItemLabelFont();
    var35.setLabelFont(var40);
    boolean var42 = var34.equals((java.lang.Object)var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setLegendTextFont((-1), var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test248() {}
//   public void test248() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     int var11 = var0.getBackgroundImageAlignment();
//     org.jfree.chart.plot.Marker var12 = null;
//     org.jfree.chart.util.Layer var13 = null;
//     boolean var14 = var0.removeDomainMarker(var12, var13);
//     var0.clearRangeMarkers((-1));
//     var0.zoom(8.0d);
// 
//   }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    var0.setNoDataMessage("");
    org.jfree.data.category.CategoryDataset var5 = null;
    var0.setDataset(var5);
    org.jfree.chart.event.PlotChangeListener var7 = null;
    var0.addChangeListener(var7);
    boolean var9 = var0.isRangeCrosshairLockedOnData();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test250() {}
//   public void test250() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var3 = null;
//     var1.setSeriesOutlineStroke(100, var3);
//     java.awt.Paint var6 = null;
//     var1.setSeriesOutlinePaint(0, var6, true);
//     java.awt.Shape var10 = var1.lookupSeriesShape(10);
//     java.awt.Paint var12 = null;
//     var1.setSeriesFillPaint(0, var12, false);
//     boolean var15 = var1.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var17 = var1.getSeriesNegativeItemLabelPosition(2);
//     var0.setPositiveItemLabelPositionFallback(var17);
//     var0.setSeriesItemLabelsVisible(4, (java.lang.Boolean)true);
//     org.jfree.chart.urls.CategoryURLGenerator var25 = var0.getURLGenerator(1, 100, true);
//     java.awt.Graphics2D var26 = null;
//     org.jfree.chart.plot.CategoryPlot var27 = null;
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     org.jfree.chart.plot.Marker var29 = null;
//     java.awt.geom.Rectangle2D var30 = null;
//     var0.drawRangeMarker(var26, var27, var28, var29, var30);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var34 = null;
//     var32.setSeriesURLGenerator(10, var34);
//     var32.setUseSeriesOffset(true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var41 = null;
//     var39.setSeriesURLGenerator(10, var41);
//     org.jfree.chart.labels.ItemLabelPosition var44 = var39.getSeriesPositiveItemLabelPosition(1);
//     var32.setSeriesPositiveItemLabelPosition(2, var44, true);
//     var0.setBasePositiveItemLabelPosition(var44, true);
//     
//     // Checks the contract:  equals-hashcode on var1 and var39
//     assertTrue("Contract failed: equals-hashcode on var1 and var39", var1.equals(var39) ? var1.hashCode() == var39.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var39 and var1
//     assertTrue("Contract failed: equals-hashcode on var39 and var1", var39.equals(var1) ? var39.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var6 = null;
    java.awt.geom.Rectangle2D var7 = null;
    org.jfree.chart.plot.PlotRenderingInfo var9 = null;
    org.jfree.chart.plot.CategoryCrosshairState var10 = null;
    boolean var11 = var5.render(var6, var7, 100, var9, var10);
    org.jfree.chart.event.MarkerChangeEvent var12 = null;
    var5.markerChanged(var12);
    var5.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var16 = var5.getInsets();
    java.awt.Stroke var17 = var5.getRangeZeroBaselineStroke();
    var0.addObject((java.lang.Object)var5, (java.lang.Comparable)100, (java.lang.Comparable)'4');
    int var22 = var0.getColumnIndex((java.lang.Comparable)"ChartEntity: tooltip = ChartEntity: tooltip = null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeColumn(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var2 = var0.getRangeAxisLocation(10);
    java.awt.Stroke var3 = var0.getRangeCrosshairStroke();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    java.awt.Shape var13 = var4.lookupSeriesShape(10);
    java.awt.Paint var15 = null;
    var4.setSeriesFillPaint(0, var15, false);
    boolean var18 = var4.getBaseShapesVisible();
    java.awt.Paint var19 = null;
    var4.setBasePaint(var19);
    org.jfree.chart.plot.CategoryPlot var21 = var4.getPlot();
    boolean var22 = var4.getAutoPopulateSeriesShape();
    java.lang.Boolean var24 = var4.getSeriesCreateEntities(4);
    int var25 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var4);
    org.jfree.chart.plot.CategoryMarker var27 = null;
    org.jfree.chart.util.Layer var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(1, var27, var28, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    var0.setBase((-1.0d));
    org.jfree.chart.renderer.category.BarPainter var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBarPainter(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getRowCount();
    var0.validateObject();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var4 = var0.getColumnKey((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }
// 
// 
//     org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     boolean var8 = var1.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     var1.setPlot(var9);
//     org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
//     org.jfree.chart.plot.PlotRenderingInfo var14 = null;
//     java.awt.geom.Point2D var15 = null;
//     var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
//     org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
//     boolean var19 = var0.equals((java.lang.Object)var9);
//     java.util.List var20 = var0.getKeys();
//     java.util.List var21 = var0.getKeys();
//     org.jfree.chart.renderer.RenderAttributes var23 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var26 = var23.getItemShape(0, 0);
//     java.awt.Paint var29 = var23.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.setRangeCrosshairValue((-1.0d));
//     var30.setNoDataMessage("");
//     java.awt.Color var38 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var30.setRangeZeroBaselinePaint((java.awt.Paint)var38);
//     var23.setDefaultFillPaint((java.awt.Paint)var38);
//     java.awt.Stroke var42 = var23.getSeriesStroke(3);
//     var0.addObject((java.lang.Comparable)(short)100, (java.lang.Object)var23);
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var45 = null;
//     java.awt.geom.Rectangle2D var46 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var48 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var49 = null;
//     boolean var50 = var44.render(var45, var46, 100, var48, var49);
//     boolean var51 = var44.isOutlineVisible();
//     org.jfree.chart.util.SortOrder var52 = var44.getRowRenderingOrder();
//     java.lang.String var53 = var52.toString();
//     var0.sortByObjects(var52);
//     
//     // Checks the contract:  equals-hashcode on var9 and var44
//     assertTrue("Contract failed: equals-hashcode on var9 and var44", var9.equals(var44) ? var9.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var9
//     assertTrue("Contract failed: equals-hashcode on var44 and var9", var44.equals(var9) ? var44.hashCode() == var9.hashCode() : true);
// 
//   }

  public void test256() {}
//   public void test256() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     boolean var7 = var0.isOutlineVisible();
//     org.jfree.chart.util.SortOrder var8 = var0.getRowRenderingOrder();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var11 = null;
//     var9.setSeriesOutlineStroke(100, var11);
//     java.awt.Paint var14 = null;
//     var9.setSeriesOutlinePaint(0, var14, true);
//     boolean var17 = var9.getBaseSeriesVisibleInLegend();
//     java.awt.Font var19 = var9.getSeriesItemLabelFont(1);
//     int var20 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var9);
//     org.jfree.chart.renderer.RenderAttributes var21 = new org.jfree.chart.renderer.RenderAttributes();
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var23 = null;
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var26 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var27 = null;
//     boolean var28 = var22.render(var23, var24, 100, var26, var27);
//     org.jfree.chart.plot.Plot var29 = var22.getParent();
//     org.jfree.data.general.DatasetGroup var30 = var22.getDatasetGroup();
//     java.awt.Paint var31 = var22.getDomainGridlinePaint();
//     var21.setDefaultPaint(var31);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Paint var36 = var34.getSeriesFillPaint(0);
//     java.awt.Paint var40 = var34.getItemPaint(0, 0, true);
//     var21.setSeriesFillPaint(10, var40);
//     java.awt.Paint var44 = var21.getItemFillPaint(10, 0);
//     var0.setNoDataMessagePaint(var44);
//     
//     // Checks the contract:  equals-hashcode on var9 and var34
//     assertTrue("Contract failed: equals-hashcode on var9 and var34", var9.equals(var34) ? var9.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var9
//     assertTrue("Contract failed: equals-hashcode on var34 and var9", var34.equals(var9) ? var34.hashCode() == var9.hashCode() : true);
// 
//   }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    var8.setBackgroundImageAlpha(0.0f);
    org.jfree.chart.plot.Marker var19 = null;
    org.jfree.chart.util.Layer var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var8.removeRangeMarker(4, var19, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    org.jfree.chart.labels.ItemLabelPosition var17 = new org.jfree.chart.labels.ItemLabelPosition();
    var0.setPositiveItemLabelPositionFallback(var17);
    var0.setBaseSeriesVisible(false);
    org.jfree.chart.labels.ItemLabelPosition var24 = var0.getNegativeItemLabelPosition((-2), 5, false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var29 = null;
    var27.setSeriesOutlineStroke(100, var29);
    java.awt.Paint var32 = null;
    var27.setSeriesOutlinePaint(0, var32, true);
    var27.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var39 = var27.lookupSeriesShape((-1));
    java.awt.Paint var41 = null;
    var27.setLegendTextPaint(0, var41);
    boolean var43 = var27.getAutoPopulateSeriesOutlineStroke();
    var27.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var49 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var50 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var49);
    var27.setBasePaint((java.awt.Paint)var49, false);
    java.awt.image.ColorModel var53 = null;
    java.awt.Rectangle var54 = null;
    java.awt.geom.Rectangle2D var55 = null;
    java.awt.geom.AffineTransform var56 = null;
    java.awt.RenderingHints var57 = null;
    java.awt.PaintContext var58 = var49.createContext(var53, var54, var55, var56, var57);
    java.awt.Color var59 = java.awt.Color.getColor("", var49);
    float[] var63 = new float[] { 100.0f, (-1.0f), 10.0f};
    float[] var64 = var59.getRGBColorComponents(var63);
    var0.setSeriesItemLabelPaint(3, (java.awt.Paint)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = null;
    var0.setBasePaint(var15);
    var0.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.urls.CategoryURLGenerator var20 = null;
    var0.setSeriesURLGenerator(2, var20, true);
    java.awt.Font var23 = var0.getBaseLegendTextFont();
    boolean var27 = var0.isItemLabelVisible(0, 1, false);
    org.jfree.chart.labels.CategoryToolTipGenerator var28 = null;
    var0.setBaseToolTipGenerator(var28, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateLeftInset(8.0d);
    double var15 = var11.calculateRightInset(8.0d);
    org.jfree.chart.util.UnitType var16 = var11.getUnitType();
    java.lang.String var17 = var11.toString();
    java.awt.geom.Rectangle2D var18 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var19 = var11.createOutsetRectangle(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]"+ "'", var17.equals("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]"));

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    org.jfree.chart.util.RectangleInsets var14 = new org.jfree.chart.util.RectangleInsets(0.0d, 0.0d, 0.0d, 0.0d);
    var0.setAxisOffset(var14);
    java.lang.Comparable var16 = var0.getDomainCrosshairRowKey();
    org.jfree.data.category.DefaultCategoryDataset var17 = new org.jfree.data.category.DefaultCategoryDataset();
    int var18 = var17.getRowCount();
    var17.validateObject();
    org.jfree.chart.axis.CategoryAxis var20 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var23 = null;
    var21.setSeriesURLGenerator(10, var23);
    java.awt.Font var25 = var21.getBaseItemLabelFont();
    var20.setLabelFont(var25);
    java.awt.Paint var27 = var20.getTickMarkPaint();
    float var28 = var20.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var29 = null;
    org.jfree.chart.renderer.category.BarRenderer var30 = new org.jfree.chart.renderer.category.BarRenderer();
    var30.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var17, var20, var29, (org.jfree.chart.renderer.category.CategoryItemRenderer)var30);
    java.lang.Object var34 = var17.clone();
    int var35 = var0.indexOf((org.jfree.data.category.CategoryDataset)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var37 = var17.getColumnKey(0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     java.awt.Paint var11 = null;
//     var0.setSeriesFillPaint(0, var11, false);
//     boolean var14 = var0.getBaseShapesVisible();
//     java.awt.Paint var15 = var0.getBaseOutlinePaint();
//     java.awt.Stroke var16 = var0.getBaseStroke();
//     var0.setAutoPopulateSeriesStroke(false);
//     int var19 = var0.getRowCount();
//     org.jfree.chart.renderer.category.BarRenderer var21 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var22 = var21.isDrawBarOutline();
//     boolean var23 = var21.isDrawBarOutline();
//     java.awt.Paint var24 = var21.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var25 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var26 = null;
//     java.awt.geom.Rectangle2D var27 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var29 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var30 = null;
//     boolean var31 = var25.render(var26, var27, 100, var29, var30);
//     boolean var32 = var25.isOutlineVisible();
//     var25.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var35 = var25.getDomainGridlinePosition();
//     java.awt.Paint var36 = var25.getBackgroundPaint();
//     var21.addChangeListener((org.jfree.chart.event.RendererChangeListener)var25);
//     org.jfree.chart.labels.ItemLabelPosition var38 = new org.jfree.chart.labels.ItemLabelPosition();
//     var21.setPositiveItemLabelPositionFallback(var38);
//     org.jfree.data.category.DefaultCategoryDataset var40 = new org.jfree.data.category.DefaultCategoryDataset();
//     var40.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
//     java.util.List var45 = var40.getColumnKeys();
//     var40.removeColumn(0);
//     org.jfree.data.Range var49 = var21.findRangeBounds((org.jfree.data.category.CategoryDataset)var40, true);
//     org.jfree.chart.axis.CategoryAxis var50 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var51 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var53 = null;
//     var51.setSeriesURLGenerator(10, var53);
//     java.awt.Font var55 = var51.getBaseItemLabelFont();
//     var50.setLabelFont(var55);
//     java.awt.Paint var57 = var50.getTickMarkPaint();
//     java.awt.Font var58 = var50.getTickLabelFont();
//     boolean var59 = var40.equals((java.lang.Object)var58);
//     var0.setSeriesItemLabelFont(1, var58, false);
//     
//     // Checks the contract:  equals-hashcode on var51 and var0
//     assertTrue("Contract failed: equals-hashcode on var51 and var0", var51.equals(var0) ? var51.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var51 and var0.", var51.equals(var0) == var0.equals(var51));
// 
//   }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    var0.setBase(0.0d);
    double var19 = var0.getShadowXOffset();
    double var20 = var0.getShadowXOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4.0d);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setDataBoundsIncludesVisibleSeriesOnly(false);
    org.jfree.chart.urls.CategoryURLGenerator var20 = null;
    var0.setSeriesURLGenerator(100, var20, true);
    boolean var23 = var0.getDataBoundsIncludesVisibleSeriesOnly();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesCreateEntities((-254), (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getRowCount();
    var0.validateObject();
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    java.awt.Font var8 = var4.getBaseItemLabelFont();
    var3.setLabelFont(var8);
    java.awt.Paint var10 = var3.getTickMarkPaint();
    float var11 = var3.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var12 = null;
    org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
    var13.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var3, var12, (org.jfree.chart.renderer.category.CategoryItemRenderer)var13);
    var0.clear();
    java.lang.Object var18 = var0.clone();
    var0.addValue(2.0d, (java.lang.Comparable)' ', (java.lang.Comparable)"ChartEntity: tooltip = ChartEntity: tooltip = null");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.incrementValue(0.0d, (java.lang.Comparable)(-1), (java.lang.Comparable)10);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.data.category.DefaultCategoryDataset var1 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var5 = null;
    var3.setSeriesURLGenerator(10, var5);
    java.awt.Font var7 = var3.getBaseItemLabelFont();
    var2.setLabelFont(var7);
    java.lang.Object var9 = var2.clone();
    org.jfree.chart.axis.ValueAxis var10 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var13 = null;
    var11.setSeriesURLGenerator(10, var13);
    org.jfree.chart.labels.ItemLabelPosition var16 = var11.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.plot.CategoryPlot var17 = var11.getPlot();
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var1, var2, var10, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11);
    org.jfree.data.Range var19 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var21 = var1.getRowKey((-16777216));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }
// 
// 
//     org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
//     java.util.List var1 = var0.getRowKeys();
//     int var2 = var0.getColumnCount();
//     java.lang.Object var3 = null;
//     boolean var4 = var0.equals(var3);
//     org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var6 = null;
//     java.awt.geom.Rectangle2D var7 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var9 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var10 = null;
//     boolean var11 = var5.render(var6, var7, 100, var9, var10);
//     org.jfree.chart.event.MarkerChangeEvent var12 = null;
//     var5.markerChanged(var12);
//     var5.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var16 = var5.getInsets();
//     java.awt.Stroke var17 = var5.getRangeZeroBaselineStroke();
//     var0.addObject((java.lang.Object)var5, (java.lang.Comparable)100, (java.lang.Comparable)'4');
//     boolean var21 = var5.isDomainZoomable();
//     org.jfree.chart.axis.AxisSpace var22 = null;
//     var5.setFixedRangeAxisSpace(var22, false);
//     boolean var25 = var5.isRangeCrosshairLockedOnData();
//     org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var27 = null;
//     java.awt.geom.Rectangle2D var28 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var30 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var31 = null;
//     boolean var32 = var26.render(var27, var28, 100, var30, var31);
//     org.jfree.chart.event.MarkerChangeEvent var33 = null;
//     var26.markerChanged(var33);
//     var26.setDrawSharedDomainAxis(true);
//     int var37 = var26.getBackgroundImageAlignment();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var38 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var40 = null;
//     var38.setSeriesOutlineStroke(100, var40);
//     java.awt.Paint var43 = null;
//     var38.setSeriesOutlinePaint(0, var43, true);
//     java.awt.Shape var47 = var38.lookupSeriesShape(10);
//     java.awt.Paint var49 = null;
//     var38.setSeriesFillPaint(0, var49, false);
//     boolean var52 = var38.getBaseShapesVisible();
//     java.awt.Paint var53 = var38.getBaseOutlinePaint();
//     int var54 = var26.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var38);
//     org.jfree.chart.LegendItemCollection var55 = var26.getFixedLegendItems();
//     org.jfree.chart.axis.AxisLocation var56 = var26.getDomainAxisLocation();
//     var5.setDomainAxisLocation(var56, false);
//     
//     // Checks the contract:  equals-hashcode on var5 and var26
//     assertTrue("Contract failed: equals-hashcode on var5 and var26", var5.equals(var26) ? var5.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var5
//     assertTrue("Contract failed: equals-hashcode on var26 and var5", var26.equals(var5) ? var26.hashCode() == var5.hashCode() : true);
// 
//   }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    var0.setNoDataMessage("");
    java.lang.Comparable var5 = var0.getDomainCrosshairColumnKey();
    org.jfree.chart.axis.AxisSpace var6 = null;
    var0.setFixedDomainAxisSpace(var6, false);
    org.jfree.chart.axis.CategoryAxis var10 = null;
    var0.setDomainAxis(4, var10, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    org.jfree.chart.util.BooleanList var0 = new org.jfree.chart.util.BooleanList();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var2 = null;
    java.awt.geom.Rectangle2D var3 = null;
    org.jfree.chart.plot.PlotRenderingInfo var5 = null;
    org.jfree.chart.plot.CategoryCrosshairState var6 = null;
    boolean var7 = var1.render(var2, var3, 100, var5, var6);
    org.jfree.chart.event.MarkerChangeEvent var8 = null;
    var1.markerChanged(var8);
    org.jfree.chart.plot.Marker var11 = null;
    org.jfree.chart.util.Layer var12 = null;
    boolean var14 = var1.removeDomainMarker(10, var11, var12, true);
    boolean var15 = var1.isRangePannable();
    org.jfree.chart.plot.DrawingSupplier var16 = var1.getDrawingSupplier();
    boolean var17 = var0.equals((java.lang.Object)var1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var20 = null;
    var18.setSeriesOutlineStroke(100, var20);
    java.awt.Paint var23 = null;
    var18.setSeriesOutlinePaint(0, var23, true);
    java.awt.Shape var27 = var18.lookupSeriesShape(10);
    java.awt.Paint var29 = null;
    var18.setSeriesFillPaint(0, var29, false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var35 = var18.getItemLabelGenerator(15, 1, false);
    boolean var36 = var0.equals((java.lang.Object)var18);
    java.awt.Stroke var38 = var18.lookupSeriesStroke(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = var0.getBaseOutlinePaint();
    java.lang.Boolean var17 = var0.getSeriesShapesVisible(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }


    org.jfree.chart.util.StandardGradientPaintTransformer var0 = new org.jfree.chart.util.StandardGradientPaintTransformer();
    boolean var2 = var0.equals((java.lang.Object)(short)100);
    org.jfree.chart.util.GradientPaintTransformType var3 = var0.getType();
    java.lang.Object var4 = null;
    boolean var5 = var3.equals(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test272() {}
//   public void test272() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
//     var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var0.setCategoryMargin(1.0d);
//     var0.setTickMarkOutsideLength(100.0f);
//     java.awt.Stroke var19 = var0.getTickMarkStroke();
//     org.jfree.chart.plot.Plot var20 = var0.getPlot();
//     var0.configure();
//     java.lang.String var22 = var0.getLabel();
//     org.jfree.chart.util.RectangleInsets var23 = var0.getLabelInsets();
//     java.awt.geom.Rectangle2D var26 = null;
//     org.jfree.chart.axis.CategoryAxis var27 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var30 = null;
//     var28.setSeriesURLGenerator(10, var30);
//     java.awt.Font var32 = var28.getBaseItemLabelFont();
//     var27.setLabelFont(var32);
//     java.lang.Object var34 = var27.clone();
//     var27.setVisible(true);
//     boolean var37 = var27.isAxisLineVisible();
//     var27.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     java.lang.String var40 = var27.getLabelURL();
//     var27.setCategoryLabelPositionOffset(5);
//     java.awt.Graphics2D var43 = null;
//     java.awt.geom.Rectangle2D var45 = null;
//     org.jfree.chart.plot.CategoryPlot var46 = new org.jfree.chart.plot.CategoryPlot();
//     var46.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var49 = var46.getDomainGridlineStroke();
//     org.jfree.chart.util.RectangleEdge var51 = var46.getDomainAxisEdge(15);
//     org.jfree.chart.axis.AxisState var52 = null;
//     var27.drawTickMarks(var43, 8.0d, var45, var51, var52);
//     double var54 = var0.getCategoryStart(0, 0, var26, var51);
// 
//   }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var2 = var0.getRangeAxisLocation(10);
    java.awt.Stroke var3 = var0.getRangeCrosshairStroke();
    org.jfree.chart.util.RectangleInsets var4 = var0.getInsets();
    java.awt.geom.Rectangle2D var5 = null;
    org.jfree.chart.util.LengthAdjustmentType var6 = null;
    org.jfree.chart.util.LengthAdjustmentType var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var8 = var4.createAdjustedRectangle(var5, var6, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test274() {}
//   public void test274() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     org.jfree.chart.labels.CategoryItemLabelGenerator var5 = var0.getSeriesItemLabelGenerator(3);
//     var0.clearSeriesStrokes(false);
//     boolean var8 = var0.getBaseSeriesVisibleInLegend();
//     org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var14 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var15 = null;
//     boolean var16 = var10.render(var11, var12, 100, var14, var15);
//     org.jfree.chart.util.Layer var17 = null;
//     java.util.Collection var18 = var10.getDomainMarkers(var17);
//     org.jfree.chart.axis.AxisSpace var19 = var10.getFixedRangeAxisSpace();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var22 = null;
//     var20.setSeriesURLGenerator(10, var22);
//     org.jfree.chart.labels.ItemLabelPosition var25 = null;
//     var20.setSeriesNegativeItemLabelPosition(0, var25, true);
//     java.awt.Stroke var29 = var20.lookupSeriesStroke(0);
//     var10.setRangeGridlineStroke(var29);
//     var0.setSeriesOutlineStroke(3, var29);
//     
//     // Checks the contract:  equals-hashcode on var20 and var0
//     assertTrue("Contract failed: equals-hashcode on var20 and var0", var20.equals(var0) ? var20.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var0.", var20.equals(var0) == var0.equals(var20));
// 
//   }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getRowCount();
    var0.validateObject();
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    java.awt.Font var8 = var4.getBaseItemLabelFont();
    var3.setLabelFont(var8);
    java.awt.Paint var10 = var3.getTickMarkPaint();
    float var11 = var3.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var12 = null;
    org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
    var13.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var3, var12, (org.jfree.chart.renderer.category.CategoryItemRenderer)var13);
    java.lang.Object var17 = var0.clone();
    var0.validateObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var23 = var11.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var24 = new org.jfree.chart.entity.ChartEntity(var23);
    var0.setBaseShape(var23, false);
    java.awt.Color var30 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    var0.setBasePaint((java.awt.Paint)var30, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesCreateEntities((-2), (java.lang.Boolean)false, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    org.jfree.chart.util.PaintList var0 = new org.jfree.chart.util.PaintList();
    org.jfree.chart.renderer.category.BarRenderer var1 = new org.jfree.chart.renderer.category.BarRenderer();
    double var2 = var1.getBase();
    var1.setItemMargin(0.0d);
    boolean var5 = var0.equals((java.lang.Object)var1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    var6.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var18 = var6.lookupSeriesShape((-1));
    var1.setBaseShape(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.labels.ItemLabelPosition var4 = var0.getPositiveItemLabelPosition(0, 5, true);
//     java.lang.Boolean var6 = var0.getSeriesItemLabelsVisible((-1));
//     java.awt.Paint var7 = var0.getBasePaint();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var10 = null;
//     var8.setSeriesOutlineStroke(100, var10);
//     var8.removeAnnotations();
//     org.jfree.chart.labels.CategoryToolTipGenerator var13 = var8.getBaseToolTipGenerator();
//     java.awt.Color var17 = java.awt.Color.getHSBColor(10.0f, 10.0f, 10.0f);
//     var8.setBaseOutlinePaint((java.awt.Paint)var17, true);
//     java.awt.color.ColorSpace var20 = var17.getColorSpace();
//     var0.setBaseOutlinePaint((java.awt.Paint)var17, true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var8
//     assertTrue("Contract failed: equals-hashcode on var0 and var8", var0.equals(var8) ? var0.hashCode() == var8.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var0
//     assertTrue("Contract failed: equals-hashcode on var8 and var0", var8.equals(var0) ? var8.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var4 = null;
    var2.setSeriesURLGenerator(10, var4);
    java.awt.Font var6 = var2.getBaseItemLabelFont();
    var1.setLabelFont(var6);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var8.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var11 = var8.getDomainAxis();
    var1.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var8);
    var1.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var1.setCategoryMargin(1.0d);
    var1.setTickMarkOutsideLength(100.0f);
    java.awt.Stroke var20 = var1.getTickMarkStroke();
    var1.clearCategoryLabelToolTips();
    java.lang.String var23 = var1.getCategoryLabelToolTip((java.lang.Comparable)(short)0);
    boolean var24 = var0.equals((java.lang.Object)(short)0);
    int var25 = var0.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }
// 
// 
//     java.util.Locale var1 = null;
//     java.util.ResourceBundle var2 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("TextAnchor.CENTER", var1);
// 
//   }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    java.awt.Stroke var12 = var0.getRangeZeroBaselineStroke();
    var0.setBackgroundImageAlignment(15);
    org.jfree.chart.plot.DefaultDrawingSupplier var15 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Paint var16 = var15.getNextPaint();
    var0.setRangeZeroBaselinePaint(var16);
    java.lang.String var18 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var20 = null;
    org.jfree.chart.util.Layer var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(0, var20, var21, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Category Plot"+ "'", var18.equals("Category Plot"));

  }

  public void test282() {}
//   public void test282() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var2 = null;
//     java.awt.geom.Rectangle2D var3 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var5 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var6 = null;
//     boolean var7 = var1.render(var2, var3, 100, var5, var6);
//     org.jfree.chart.util.Layer var8 = null;
//     java.util.Collection var9 = var1.getDomainMarkers(var8);
//     org.jfree.chart.axis.AxisSpace var10 = var1.getFixedRangeAxisSpace();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var13 = null;
//     var11.setSeriesURLGenerator(10, var13);
//     org.jfree.chart.labels.ItemLabelPosition var16 = null;
//     var11.setSeriesNegativeItemLabelPosition(0, var16, true);
//     java.awt.Stroke var20 = var11.lookupSeriesStroke(0);
//     var1.setRangeGridlineStroke(var20);
//     java.awt.Paint var22 = var1.getOutlinePaint();
//     var0.setDefaultPaint(var22);
//     java.awt.Paint var24 = var0.getDefaultOutlinePaint();
//     java.awt.Stroke var26 = var0.getSeriesStroke(255);
//     java.awt.Font var29 = var0.getItemLabelFont(3, (-2));
// 
//   }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getSeriesNegativeItemLabelPosition(2);
    var0.setUseOutlinePaint(true);
    var0.clearSeriesStrokes(false);
    boolean var24 = var0.isItemLabelVisible(0, 10, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    var0.setBase((-1.0d));
    boolean var3 = var0.getAutoPopulateSeriesOutlinePaint();
    org.jfree.chart.util.GradientPaintTransformer var4 = var0.getGradientPaintTransformer();
    double var5 = var0.getMaximumBarWidth();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var8 = null;
    var6.setSeriesURLGenerator(10, var8);
    org.jfree.chart.labels.ItemLabelPosition var11 = var6.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.labels.ItemLabelAnchor var12 = var11.getItemLabelAnchor();
    var0.setBasePositiveItemLabelPosition(var11);
    double var14 = var0.getBase();
    var0.setShadowXOffset((-1.8d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1.0d));

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    var0.mapDatasetToDomainAxis(1, 10);
    var0.clearDomainAxes();
    org.jfree.data.KeyedObjects2D var19 = new org.jfree.data.KeyedObjects2D();
    java.util.List var20 = var19.getRowKeys();
    int var21 = var19.getRowCount();
    var19.addObject((java.lang.Object)(byte)10, (java.lang.Comparable)(short)1, (java.lang.Comparable)10);
    java.util.List var26 = var19.getRowKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToRangeAxes(0, var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setWeight(10);
//     org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var4 = null;
//     org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var8 = null;
//     var6.setSeriesOutlineStroke(100, var8);
//     java.awt.Paint var11 = null;
//     var6.setSeriesOutlinePaint(0, var11, true);
//     java.awt.Shape var15 = var6.lookupSeriesShape(10);
//     java.awt.Paint var17 = null;
//     var6.setSeriesFillPaint(0, var17, false);
//     boolean var20 = var6.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var23 = var6.getBaseItemLabelFont();
//     boolean var24 = var3.equals((java.lang.Object)var6);
//     var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
//     org.jfree.chart.util.Layer var26 = null;
//     java.util.Collection var27 = var0.getDomainMarkers(var26);
//     org.jfree.chart.event.PlotChangeListener var28 = null;
//     var0.addChangeListener(var28);
//     java.awt.Paint var30 = var0.getOutlinePaint();
//     boolean var31 = var0.isRangeCrosshairVisible();
//     org.jfree.data.category.CategoryDataset var33 = null;
//     org.jfree.chart.axis.CategoryAxis var34 = null;
//     org.jfree.chart.axis.ValueAxis var35 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var38 = null;
//     var36.setSeriesOutlineStroke(100, var38);
//     java.awt.Paint var41 = null;
//     var36.setSeriesOutlinePaint(0, var41, true);
//     java.awt.Shape var45 = var36.lookupSeriesShape(10);
//     java.awt.Paint var47 = null;
//     var36.setSeriesFillPaint(0, var47, false);
//     boolean var50 = var36.getBaseShapesVisible();
//     java.awt.Paint var51 = var36.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var52 = var36.getBaseNegativeItemLabelPosition();
//     var36.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var55 = new org.jfree.chart.plot.CategoryPlot(var33, var34, var35, (org.jfree.chart.renderer.category.CategoryItemRenderer)var36);
//     org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var57 = null;
//     java.awt.geom.Rectangle2D var58 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var60 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var61 = null;
//     boolean var62 = var56.render(var57, var58, 100, var60, var61);
//     org.jfree.chart.event.MarkerChangeEvent var63 = null;
//     var56.markerChanged(var63);
//     org.jfree.chart.plot.Marker var66 = null;
//     org.jfree.chart.util.Layer var67 = null;
//     boolean var69 = var56.removeDomainMarker(10, var66, var67, true);
//     org.jfree.chart.axis.AxisLocation var71 = var56.getDomainAxisLocation(0);
//     org.jfree.chart.axis.AxisLocation var72 = org.jfree.chart.axis.AxisLocation.getOpposite(var71);
//     var55.setDomainAxisLocation(var72, false);
//     org.jfree.chart.plot.PlotRenderingInfo var77 = null;
//     java.awt.geom.Point2D var78 = null;
//     var55.zoomRangeAxes((-6.0d), 4.0d, var77, var78);
//     org.jfree.chart.axis.AxisLocation var80 = var55.getDomainAxisLocation();
//     var0.setDomainAxisLocation(255, var80);
//     
//     // Checks the contract:  equals-hashcode on var22 and var52
//     assertTrue("Contract failed: equals-hashcode on var22 and var52", var22.equals(var52) ? var22.hashCode() == var52.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var52 and var22
//     assertTrue("Contract failed: equals-hashcode on var52 and var22", var52.equals(var22) ? var52.hashCode() == var22.hashCode() : true);
// 
//   }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    int var10 = var0.getBackgroundImageAlignment();
    boolean var11 = var0.isDomainZoomable();
    org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis();
    var12.setLabel("ChartEntity: tooltip = null");
    var0.setDomainAxis(var12);
    java.awt.Paint var17 = null;
    var12.setTickLabelPaint((java.lang.Comparable)255, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test288() {}
//   public void test288() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     org.jfree.chart.labels.ItemLabelPosition var1 = var0.getNegativeItemLabelPositionFallback();
//     var0.setBase(2.0d);
//     boolean var4 = var0.getShadowsVisible();
//     var0.setBase(100.0d);
//     org.jfree.chart.labels.CategoryToolTipGenerator var7 = var0.getBaseToolTipGenerator();
//     java.awt.Graphics2D var8 = null;
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var10 = null;
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var13 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var14 = null;
//     boolean var15 = var9.render(var10, var11, 100, var13, var14);
//     org.jfree.chart.event.MarkerChangeEvent var16 = null;
//     var9.markerChanged(var16);
//     var9.setDrawSharedDomainAxis(true);
//     int var20 = var9.getBackgroundImageAlignment();
//     boolean var21 = var9.canSelectByRegion();
//     org.jfree.data.category.CategoryDataset var23 = var9.getDataset(15);
//     boolean var24 = var9.isSubplot();
//     org.jfree.chart.axis.ValueAxis var26 = var9.getRangeAxisForDataset(0);
//     org.jfree.chart.axis.CategoryAnchor var27 = var9.getDomainGridlinePosition();
//     java.awt.geom.Rectangle2D var28 = null;
//     org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var32 = var31.isDrawBarOutline();
//     boolean var33 = var31.isDrawBarOutline();
//     java.awt.Paint var34 = var31.getShadowPaint();
//     org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
//     java.awt.Color var39 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
//     var35.setLabelPaint((java.awt.Paint)var39);
//     java.awt.Stroke var41 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.drawDomainLine(var8, var9, var28, (-16.0d), (java.awt.Paint)var39, var41);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
// 
//   }

  public void test289() {}
//   public void test289() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var1 = var0.isDrawBarOutline();
//     boolean var2 = var0.isDrawBarOutline();
//     java.awt.Paint var3 = var0.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var8 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var9 = null;
//     boolean var10 = var4.render(var5, var6, 100, var8, var9);
//     boolean var11 = var4.isOutlineVisible();
//     var4.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
//     java.awt.Paint var15 = var4.getBackgroundPaint();
//     var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
//     org.jfree.chart.labels.ItemLabelPosition var17 = new org.jfree.chart.labels.ItemLabelPosition();
//     var0.setPositiveItemLabelPositionFallback(var17);
//     org.jfree.data.category.DefaultCategoryDataset var19 = new org.jfree.data.category.DefaultCategoryDataset();
//     var19.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
//     java.util.List var24 = var19.getColumnKeys();
//     var19.removeColumn(0);
//     org.jfree.data.Range var28 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var19, true);
//     org.jfree.chart.axis.CategoryAxis var29 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var32 = null;
//     var30.setSeriesURLGenerator(10, var32);
//     java.awt.Font var34 = var30.getBaseItemLabelFont();
//     var29.setLabelFont(var34);
//     java.awt.Paint var36 = var29.getTickMarkPaint();
//     java.awt.Font var37 = var29.getTickLabelFont();
//     boolean var38 = var19.equals((java.lang.Object)var37);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var41 = null;
//     var39.setSeriesURLGenerator(10, var41);
//     boolean var46 = var39.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
//     var39.setPlot(var47);
//     var47.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
//     java.awt.Paint var51 = var47.getRangeCrosshairPaint();
//     org.jfree.chart.axis.ValueAxis var52 = null;
//     org.jfree.chart.axis.ValueAxis[] var53 = new org.jfree.chart.axis.ValueAxis[] { var52};
//     var47.setRangeAxes(var53);
//     var47.setRangeCrosshairLockedOnData(false);
//     boolean var57 = var47.isRangeMinorGridlinesVisible();
//     org.jfree.chart.axis.CategoryAxis var58 = new org.jfree.chart.axis.CategoryAxis();
//     var58.setLabel("ChartEntity: tooltip = null");
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var61 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var63 = null;
//     var61.setSeriesURLGenerator(10, var63);
//     java.awt.Font var65 = var61.getBaseItemLabelFont();
//     var58.setTickLabelFont(var65);
//     var47.setNoDataMessageFont(var65);
//     org.jfree.chart.axis.ValueAxis var69 = null;
//     var47.setRangeAxis(2, var69, false);
//     org.jfree.chart.plot.CategoryPlot var72 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var73 = null;
//     java.awt.geom.Rectangle2D var74 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var76 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var77 = null;
//     boolean var78 = var72.render(var73, var74, 100, var76, var77);
//     org.jfree.chart.util.Layer var79 = null;
//     java.util.Collection var80 = var72.getDomainMarkers(var79);
//     java.awt.Paint var81 = var72.getOutlinePaint();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var83 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var85 = null;
//     var83.setSeriesURLGenerator(10, var85);
//     org.jfree.chart.labels.ItemLabelPosition var88 = null;
//     var83.setSeriesNegativeItemLabelPosition(0, var88, true);
//     org.jfree.chart.labels.ItemLabelPosition var94 = var83.getPositiveItemLabelPosition(0, 1, false);
//     var72.setRenderer(0, (org.jfree.chart.renderer.category.CategoryItemRenderer)var83, true);
//     var47.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var83);
//     var19.removeChangeListener((org.jfree.data.event.DatasetChangeListener)var47);
//     
//     // Checks the contract:  equals-hashcode on var17 and var94
//     assertTrue("Contract failed: equals-hashcode on var17 and var94", var17.equals(var94) ? var17.hashCode() == var94.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var94 and var17
//     assertTrue("Contract failed: equals-hashcode on var94 and var17", var94.equals(var17) ? var94.hashCode() == var17.hashCode() : true);
// 
//   }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }


    org.jfree.chart.renderer.category.BarRenderer var1 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var2 = var1.isDrawBarOutline();
    boolean var3 = var1.isDrawBarOutline();
    java.awt.Paint var4 = var1.getShadowPaint();
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var4);
    var5.setToolTipText("");
    java.awt.Stroke var8 = var5.getLineStroke();
    java.lang.Object var9 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    java.awt.Color var20 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var0.setBasePaint((java.awt.Paint)var20);
    java.awt.Font var25 = var0.getItemLabelFont((-16777216), (-2), true);
    var0.setAutoPopulateSeriesStroke(false);
    boolean var28 = var0.getDrawOutlines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.RenderAttributes var2 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Shape var5 = var2.getItemShape(0, 0);
    java.awt.Paint var6 = var2.getDefaultLabelPaint();
    java.lang.Boolean var7 = var2.getDefaultLabelVisible();
    java.awt.Stroke var10 = var2.getItemStroke(0, 0);
    java.awt.Stroke var11 = var2.getDefaultStroke();
    java.awt.Stroke var13 = var2.getSeriesStroke(0);
    var0.addObject((java.lang.Comparable)0.0f, (java.lang.Object)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = null;
    var0.setSeriesNegativeItemLabelPosition(0, var5, true);
    java.awt.Stroke var9 = var0.lookupSeriesStroke(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var23 = var11.lookupSeriesShape((-1));
    var0.setSeriesShape(0, var23);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var25 = null;
    var0.setLegendItemToolTipGenerator(var25);
    org.jfree.chart.labels.CategoryToolTipGenerator var28 = null;
    var0.setSeriesToolTipGenerator(1, var28, true);
    var0.setSeriesShapesVisible(0, (java.lang.Boolean)true);
    var0.setUseOutlinePaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var1 = var0.getNegativeItemLabelPositionFallback();
    java.awt.Paint var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBaseItemLabelPaint(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    java.awt.Stroke var3 = var0.getDomainGridlineStroke();
    org.jfree.chart.util.RectangleEdge var5 = var0.getDomainAxisEdge(15);
    var0.setRangeCrosshairLockedOnData(true);
    org.jfree.data.category.CategoryDataset var8 = null;
    org.jfree.chart.axis.CategoryAxis var9 = null;
    org.jfree.chart.axis.ValueAxis var10 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    java.awt.Shape var20 = var11.lookupSeriesShape(10);
    java.awt.Paint var22 = null;
    var11.setSeriesFillPaint(0, var22, false);
    boolean var25 = var11.getBaseShapesVisible();
    java.awt.Paint var26 = var11.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var27 = var11.getBaseNegativeItemLabelPosition();
    var11.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot(var8, var9, var10, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11);
    org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var32 = null;
    java.awt.geom.Rectangle2D var33 = null;
    org.jfree.chart.plot.PlotRenderingInfo var35 = null;
    org.jfree.chart.plot.CategoryCrosshairState var36 = null;
    boolean var37 = var31.render(var32, var33, 100, var35, var36);
    org.jfree.chart.event.MarkerChangeEvent var38 = null;
    var31.markerChanged(var38);
    org.jfree.chart.plot.Marker var41 = null;
    org.jfree.chart.util.Layer var42 = null;
    boolean var44 = var31.removeDomainMarker(10, var41, var42, true);
    org.jfree.chart.axis.AxisLocation var46 = var31.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var47 = org.jfree.chart.axis.AxisLocation.getOpposite(var46);
    var30.setDomainAxisLocation(var47, false);
    var0.setRangeAxisLocation(var47, false);
    org.jfree.chart.axis.ValueAxis var52 = null;
    org.jfree.data.Range var53 = var0.getDataRange(var52);
    var0.clearRangeMarkers((-16777216));
    org.jfree.chart.plot.PlotRenderingInfo var57 = null;
    java.awt.geom.Point2D var58 = null;
    var0.panRangeAxes(0.2d, var57, var58);
    java.lang.Comparable var60 = null;
    var0.setDomainCrosshairColumnKey(var60);
    org.jfree.chart.plot.PlotRenderingInfo var63 = null;
    java.awt.geom.Point2D var64 = null;
    var0.zoomDomainAxes((-8.0d), var63, var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var14 = null;
    var12.setSeriesOutlineStroke(100, var14);
    java.awt.Paint var17 = null;
    var12.setSeriesOutlinePaint(0, var17, true);
    java.awt.Shape var21 = var12.lookupSeriesShape(10);
    java.awt.Paint var23 = null;
    var12.setSeriesFillPaint(0, var23, false);
    boolean var26 = var12.getBaseShapesVisible();
    java.awt.Paint var27 = var12.getBaseOutlinePaint();
    int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
    int var29 = var0.getWeight();
    int var30 = var0.getCrosshairDatasetIndex();
    org.jfree.chart.plot.PlotRenderingInfo var32 = null;
    java.awt.geom.Point2D var33 = null;
    var0.panRangeAxes((-1.0d), var32, var33);
    int var35 = var0.getDomainAxisCount();
    org.jfree.chart.axis.AxisLocation var36 = var0.getDomainAxisLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }


    java.awt.Paint[] var0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }
// 
// 
//     org.jfree.chart.LegendItemCollection var0 = new org.jfree.chart.LegendItemCollection();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
//     org.jfree.chart.LegendItem var6 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var5);
//     java.awt.Shape var7 = var6.getShape();
//     boolean var8 = var0.equals((java.lang.Object)var6);
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var10 = null;
//     java.awt.geom.Rectangle2D var11 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var13 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var14 = null;
//     boolean var15 = var9.render(var10, var11, 100, var13, var14);
//     org.jfree.chart.util.Layer var16 = null;
//     java.util.Collection var17 = var9.getDomainMarkers(var16);
//     org.jfree.chart.axis.AxisSpace var18 = var9.getFixedRangeAxisSpace();
//     int var19 = var9.getBackgroundImageAlignment();
//     org.jfree.chart.LegendItemCollection var20 = var9.getLegendItems();
//     var0.addAll(var20);
//     
//     // Checks the contract:  equals-hashcode on var0 and var20
//     assertTrue("Contract failed: equals-hashcode on var0 and var20", var0.equals(var20) ? var0.hashCode() == var20.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var0
//     assertTrue("Contract failed: equals-hashcode on var20 and var0", var20.equals(var0) ? var20.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }


    org.jfree.chart.util.ShapeList var0 = new org.jfree.chart.util.ShapeList();
    java.lang.Object var1 = var0.clone();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var5 = null;
    var3.setSeriesURLGenerator(10, var5);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var9 = null;
    var7.setSeriesURLGenerator(10, var9);
    org.jfree.chart.labels.ItemLabelPosition var12 = null;
    var7.setSeriesNegativeItemLabelPosition(0, var12, true);
    java.awt.Stroke var16 = var7.lookupSeriesStroke(0);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var17 = var7.getLegendItemURLGenerator();
    var7.setSeriesItemLabelsVisible(0, true);
    java.awt.Font var24 = var7.getItemLabelFont(0, (-16777216), true);
    var3.setBaseLegendTextFont(var24);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var28 = null;
    var26.setSeriesOutlineStroke(100, var28);
    java.awt.Paint var31 = null;
    var26.setSeriesOutlinePaint(0, var31, true);
    var26.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var38 = var26.lookupSeriesShape((-1));
    java.awt.Paint var40 = null;
    var26.setLegendTextPaint(0, var40);
    java.awt.Font var42 = var26.getBaseItemLabelFont();
    var3.setBaseItemLabelFont(var42);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var45 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var47 = null;
    var45.setSeriesOutlineStroke(100, var47);
    java.awt.Paint var50 = null;
    var45.setSeriesOutlinePaint(0, var50, true);
    var45.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var58 = null;
    var56.setSeriesOutlineStroke(100, var58);
    java.awt.Paint var61 = null;
    var56.setSeriesOutlinePaint(0, var61, true);
    var56.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var68 = var56.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var69 = new org.jfree.chart.entity.ChartEntity(var68);
    var45.setBaseShape(var68, false);
    var3.setSeriesShape(15, var68, false);
    org.jfree.chart.entity.ChartEntity var74 = new org.jfree.chart.entity.ChartEntity(var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((-2), var68);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setFixedDimension(2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.setRangeCrosshairValue((-1.0d));
    var0.setPlot((org.jfree.chart.plot.Plot)var19);
    org.jfree.data.category.DefaultCategoryDataset var23 = new org.jfree.data.category.DefaultCategoryDataset();
    var23.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var28 = var23.getRowKeys();
    int var30 = var23.getColumnIndex((java.lang.Comparable)100L);
    java.lang.Object var31 = var23.clone();
    int var32 = var23.getColumnCount();
    var19.setDataset((org.jfree.data.category.CategoryDataset)var23);
    var23.addValue((java.lang.Number)(short)(-1), (java.lang.Comparable)"RectangleInsets[t=0.0,l=-6.0,b=10.0,r=8.0]", (java.lang.Comparable)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }


    org.jfree.chart.axis.AxisLocation var0 = null;
    org.jfree.data.category.CategoryDataset var1 = null;
    org.jfree.chart.axis.CategoryAxis var2 = null;
    org.jfree.chart.axis.ValueAxis var3 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    java.awt.Shape var13 = var4.lookupSeriesShape(10);
    java.awt.Paint var15 = null;
    var4.setSeriesFillPaint(0, var15, false);
    boolean var18 = var4.getBaseShapesVisible();
    java.awt.Paint var19 = var4.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var20 = var4.getBaseNegativeItemLabelPosition();
    var4.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot(var1, var2, var3, (org.jfree.chart.renderer.category.CategoryItemRenderer)var4);
    org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var25 = null;
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.plot.PlotRenderingInfo var28 = null;
    org.jfree.chart.plot.CategoryCrosshairState var29 = null;
    boolean var30 = var24.render(var25, var26, 100, var28, var29);
    org.jfree.chart.event.MarkerChangeEvent var31 = null;
    var24.markerChanged(var31);
    org.jfree.chart.plot.Marker var34 = null;
    org.jfree.chart.util.Layer var35 = null;
    boolean var37 = var24.removeDomainMarker(10, var34, var35, true);
    org.jfree.chart.axis.AxisLocation var39 = var24.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var40 = org.jfree.chart.axis.AxisLocation.getOpposite(var39);
    var23.setDomainAxisLocation(var40, false);
    org.jfree.chart.plot.CategoryPlot var43 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var44 = null;
    java.awt.geom.Rectangle2D var45 = null;
    org.jfree.chart.plot.PlotRenderingInfo var47 = null;
    org.jfree.chart.plot.CategoryCrosshairState var48 = null;
    boolean var49 = var43.render(var44, var45, 100, var47, var48);
    org.jfree.chart.event.MarkerChangeEvent var50 = null;
    var43.markerChanged(var50);
    var43.setDrawSharedDomainAxis(true);
    int var54 = var43.getBackgroundImageAlignment();
    org.jfree.chart.axis.AxisSpace var55 = null;
    var43.setFixedRangeAxisSpace(var55);
    double var57 = var43.getRangeCrosshairValue();
    org.jfree.chart.plot.PlotOrientation var58 = var43.getOrientation();
    org.jfree.chart.util.RectangleEdge var59 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var40, var58);
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.RectangleEdge var62 = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(var0, var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var60.equals("PlotOrientation.VERTICAL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var61.equals("PlotOrientation.VERTICAL"));

  }

  public void test302() {}
//   public void test302() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     boolean var7 = var0.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setPlot(var8);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var12 = null;
//     var10.setSeriesOutlineStroke(100, var12);
//     java.awt.Paint var15 = null;
//     var10.setSeriesOutlinePaint(0, var15, true);
//     java.awt.Shape var19 = var10.lookupSeriesShape(10);
//     java.awt.Paint var21 = null;
//     var10.setSeriesFillPaint(0, var21, false);
//     boolean var24 = var10.getBaseShapesVisible();
//     java.awt.Paint var25 = var10.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var26 = var10.getBaseNegativeItemLabelPosition();
//     var10.setBaseSeriesVisible(false);
//     double var29 = var10.getItemLabelAnchorOffset();
//     org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var32 = var31.isDrawBarOutline();
//     boolean var33 = var31.isDrawBarOutline();
//     java.awt.Paint var34 = var31.getShadowPaint();
//     org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
//     var10.setBaseLegendTextPaint(var34);
//     var8.setRangeMinorGridlinePaint(var34);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var39 = null;
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var42 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var43 = null;
//     boolean var44 = var38.render(var39, var40, 100, var42, var43);
//     org.jfree.chart.event.MarkerChangeEvent var45 = null;
//     var38.markerChanged(var45);
//     var38.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var49 = var38.getInsets();
//     java.awt.Stroke var50 = var38.getRangeZeroBaselineStroke();
//     org.jfree.chart.axis.AxisLocation var52 = var38.getDomainAxisLocation(100);
//     boolean var53 = var8.equals((java.lang.Object)var38);
//     org.jfree.chart.axis.AxisSpace var54 = null;
//     var8.setFixedDomainAxisSpace(var54, true);
//     org.jfree.chart.plot.PlotRenderingInfo var59 = null;
//     var8.handleClick((-1), 100, var59);
// 
//   }

  public void test303() {}
//   public void test303() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var12 = var0.lookupSeriesShape((-1));
//     org.jfree.chart.entity.ChartEntity var13 = new org.jfree.chart.entity.ChartEntity(var12);
//     java.lang.String var14 = var13.toString();
//     var13.setToolTipText("DatasetRenderingOrder.REVERSE");
//     java.lang.Object var17 = var13.clone();
//     org.jfree.chart.imagemap.ToolTipTagFragmentGenerator var18 = null;
//     org.jfree.chart.imagemap.URLTagFragmentGenerator var19 = null;
//     java.lang.String var20 = var13.getImageMapAreaTag(var18, var19);
// 
//   }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    var8.setRangeCrosshairLockedOnData(false);
    float var18 = var8.getForegroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1.0f);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    var4.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var16 = var4.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var17 = new org.jfree.chart.entity.ChartEntity(var16);
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var22 = var21.getRed();
    org.jfree.chart.LegendItem var23 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var16, (java.awt.Paint)var21);
    java.awt.Color var27 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var23.setFillPaint((java.awt.Paint)var27);
    java.awt.Font var29 = var23.getLabelFont();
    org.jfree.chart.renderer.RenderAttributes var30 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var35 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    var30.setSeriesPaint(0, (java.awt.Paint)var35);
    var23.setFillPaint((java.awt.Paint)var35);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var41 = null;
    var39.setSeriesOutlineStroke(100, var41);
    java.awt.Paint var44 = null;
    var39.setSeriesOutlinePaint(0, var44, true);
    var39.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var51 = var39.lookupSeriesShape((-1));
    java.awt.Paint var53 = null;
    var39.setLegendTextPaint(0, var53);
    boolean var55 = var39.getAutoPopulateSeriesOutlineStroke();
    var39.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var61 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var62 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var61);
    var39.setBasePaint((java.awt.Paint)var61, false);
    java.awt.image.ColorModel var65 = null;
    java.awt.Rectangle var66 = null;
    java.awt.geom.Rectangle2D var67 = null;
    java.awt.geom.AffineTransform var68 = null;
    java.awt.RenderingHints var69 = null;
    java.awt.PaintContext var70 = var61.createContext(var65, var66, var67, var68, var69);
    java.awt.Color var71 = java.awt.Color.getColor("", var61);
    float[] var75 = new float[] { 100.0f, (-1.0f), 10.0f};
    float[] var76 = var71.getRGBColorComponents(var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var77 = var35.getRGBComponents(var75);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }


    java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var4 = var3.getRGB();
    java.awt.Color var5 = var3.darker();
    java.awt.image.ColorModel var6 = null;
    java.awt.Rectangle var7 = null;
    java.awt.geom.Rectangle2D var8 = null;
    java.awt.geom.AffineTransform var9 = null;
    java.awt.RenderingHints var10 = null;
    java.awt.PaintContext var11 = var3.createContext(var6, var7, var8, var9, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-16777216));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.util.List var1 = var0.getAnnotations();
    org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
    var0.setShadowGenerator((org.jfree.chart.util.ShadowGenerator)var2);
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    org.jfree.chart.util.Layer var11 = null;
    java.util.Collection var12 = var4.getDomainMarkers(var11);
    org.jfree.chart.axis.AxisSpace var13 = var4.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var16 = null;
    var14.setSeriesURLGenerator(10, var16);
    org.jfree.chart.labels.ItemLabelPosition var19 = null;
    var14.setSeriesNegativeItemLabelPosition(0, var19, true);
    java.awt.Stroke var23 = var14.lookupSeriesStroke(0);
    var4.setRangeGridlineStroke(var23);
    java.awt.Paint var25 = var4.getOutlinePaint();
    var0.setParent((org.jfree.chart.plot.Plot)var4);
    java.awt.Graphics2D var27 = null;
    java.awt.geom.Rectangle2D var28 = null;
    var4.drawBackgroundImage(var27, var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList((-16777216));
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var23 = var11.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var24 = new org.jfree.chart.entity.ChartEntity(var23);
    var0.setBaseShape(var23, false);
    java.awt.Stroke var28 = var0.getSeriesOutlineStroke((-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    boolean var7 = var0.isOutlineVisible();
    var0.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var10 = var0.getDomainGridlinePosition();
    var0.setAnchorValue(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test311() {}
//   public void test311() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     java.lang.Object var7 = var0.clone();
//     var0.setVisible(true);
//     boolean var10 = var0.isAxisLineVisible();
//     var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var17 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var18 = null;
//     boolean var19 = var13.render(var14, var15, 100, var17, var18);
//     org.jfree.chart.event.MarkerChangeEvent var20 = null;
//     var13.markerChanged(var20);
//     var13.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var24 = var13.getDrawingSupplier();
//     org.jfree.chart.LegendItemCollection var25 = var13.getLegendItems();
//     var0.addChangeListener((org.jfree.chart.event.AxisChangeListener)var13);
//     double var27 = var0.getLabelAngle();
//     var0.setVisible(true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var32 = null;
//     var30.setSeriesOutlineStroke(100, var32);
//     java.awt.Paint var35 = null;
//     var30.setSeriesOutlinePaint(0, var35, true);
//     java.awt.Shape var39 = var30.lookupSeriesShape(10);
//     java.awt.Paint var41 = null;
//     var30.setSeriesFillPaint(0, var41, false);
//     boolean var44 = var30.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var46 = var30.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var47 = var30.getBaseItemLabelFont();
//     java.lang.Object var48 = var30.clone();
//     java.awt.Stroke var50 = var30.getSeriesOutlineStroke(3);
//     boolean var53 = var30.getItemShapeFilled(15, 3);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var57 = null;
//     var55.setSeriesOutlineStroke(100, var57);
//     java.awt.Paint var60 = null;
//     var55.setSeriesOutlinePaint(0, var60, true);
//     java.awt.Shape var64 = var55.lookupSeriesShape(10);
//     java.awt.Paint var66 = null;
//     var55.setSeriesFillPaint(0, var66, false);
//     boolean var69 = var55.getBaseShapesVisible();
//     java.awt.Paint var70 = null;
//     var55.setBasePaint(var70);
//     java.awt.Font var73 = var55.getLegendTextFont((-16777216));
//     java.awt.Stroke var75 = var55.lookupSeriesOutlineStroke(10);
//     var30.setSeriesStroke(0, var75);
//     var0.setAxisLineStroke(var75);
//     
//     // Checks the contract:  equals-hashcode on var1 and var30
//     assertTrue("Contract failed: equals-hashcode on var1 and var30", var1.equals(var30) ? var1.hashCode() == var30.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var1 and var30.", var1.equals(var30) == var30.equals(var1));
// 
//   }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    org.jfree.chart.renderer.category.BarRenderer var1 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var2 = var1.isDrawBarOutline();
    boolean var3 = var1.isDrawBarOutline();
    java.awt.Paint var4 = var1.getShadowPaint();
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var4);
    java.lang.String var6 = var5.getDescription();
    org.jfree.chart.util.RectangleInsets var11 = new org.jfree.chart.util.RectangleInsets(0.0d, 0.0d, 0.0d, 0.0d);
    boolean var12 = var5.equals((java.lang.Object)var11);
    java.awt.Paint var13 = var5.getFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    java.lang.String var13 = var0.getLabelURL();
    java.awt.Font var14 = var0.getLabelFont();
    var0.configure();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    var0.setBase((-1.0d));
    java.awt.Font var4 = var0.lookupLegendTextFont(10);
    java.awt.Font var5 = var0.getBaseLegendTextFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test315() {}
//   public void test315() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     int var11 = var0.getBackgroundImageAlignment();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var14 = null;
//     var12.setSeriesOutlineStroke(100, var14);
//     java.awt.Paint var17 = null;
//     var12.setSeriesOutlinePaint(0, var17, true);
//     java.awt.Shape var21 = var12.lookupSeriesShape(10);
//     java.awt.Paint var23 = null;
//     var12.setSeriesFillPaint(0, var23, false);
//     boolean var26 = var12.getBaseShapesVisible();
//     java.awt.Paint var27 = var12.getBaseOutlinePaint();
//     int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
//     java.awt.Color var33 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
//     org.jfree.chart.LegendItem var34 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var33);
//     boolean var35 = var34.isLineVisible();
//     org.jfree.chart.util.ObjectList var36 = new org.jfree.chart.util.ObjectList();
//     java.lang.Object var38 = var36.get(1);
//     org.jfree.chart.renderer.RenderAttributes var39 = new org.jfree.chart.renderer.RenderAttributes();
//     boolean var40 = var36.equals((java.lang.Object)var39);
//     org.jfree.chart.plot.DefaultDrawingSupplier var41 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     java.lang.Object var42 = var41.clone();
//     java.awt.Stroke var43 = var41.getNextOutlineStroke();
//     var39.setDefaultStroke(var43);
//     var34.setOutlineStroke(var43);
//     org.jfree.chart.axis.CategoryAxis var46 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var47 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var49 = null;
//     var47.setSeriesURLGenerator(10, var49);
//     java.awt.Font var51 = var47.getBaseItemLabelFont();
//     var46.setLabelFont(var51);
//     java.lang.Object var53 = var46.clone();
//     var46.setVisible(true);
//     boolean var56 = var46.isAxisLineVisible();
//     var46.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
//     var46.setAxisLineVisible(true);
//     org.jfree.chart.util.RectangleInsets var61 = var46.getLabelInsets();
//     java.awt.Paint var63 = var46.getTickLabelPaint((java.lang.Comparable)10.0f);
//     var34.setLabelPaint(var63);
//     var0.setDomainCrosshairPaint(var63);
//     
//     // Checks the contract:  equals-hashcode on var12 and var47
//     assertTrue("Contract failed: equals-hashcode on var12 and var47", var12.equals(var47) ? var12.hashCode() == var47.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var12
//     assertTrue("Contract failed: equals-hashcode on var47 and var12", var47.equals(var12) ? var47.hashCode() == var12.hashCode() : true);
// 
//   }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    org.jfree.chart.util.DefaultShadowGenerator var0 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var1 = var0.calculateOffsetX();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var4 = null;
    var2.setSeriesOutlineStroke(100, var4);
    var2.removeAnnotations();
    org.jfree.chart.labels.CategoryToolTipGenerator var7 = var2.getBaseToolTipGenerator();
    java.awt.Paint var8 = var2.getBaseItemLabelPaint();
    boolean var9 = var0.equals((java.lang.Object)var8);
    int var10 = var0.calculateOffsetX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-2));

  }

  public void test317() {}
//   public void test317() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var3 = null;
//     var1.setSeriesOutlineStroke(100, var3);
//     java.awt.Paint var6 = null;
//     var1.setSeriesOutlinePaint(0, var6, true);
//     java.awt.Shape var10 = var1.lookupSeriesShape(10);
//     java.awt.Paint var12 = null;
//     var1.setSeriesFillPaint(0, var12, false);
//     boolean var15 = var1.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var17 = var1.getSeriesNegativeItemLabelPosition(2);
//     var0.setPositiveItemLabelPositionFallback(var17);
//     var0.setSeriesItemLabelsVisible(4, (java.lang.Boolean)true);
//     org.jfree.chart.urls.CategoryURLGenerator var25 = var0.getURLGenerator(1, 100, true);
//     var0.setShadowYOffset(0.0d);
//     org.jfree.data.category.DefaultCategoryDataset var28 = new org.jfree.data.category.DefaultCategoryDataset();
//     var28.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
//     java.util.List var33 = var28.getRowKeys();
//     int var35 = var28.getColumnIndex((java.lang.Comparable)100L);
//     org.jfree.data.Range var37 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var28, false);
//     boolean var38 = var0.getBaseCreateEntities();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var40 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var42 = null;
//     var40.setSeriesURLGenerator(10, var42);
//     boolean var47 = var40.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
//     var40.setPlot(var48);
//     org.jfree.chart.axis.ValueAxis var51 = var48.getRangeAxis(15);
//     org.jfree.data.general.DatasetGroup var52 = var48.getDatasetGroup();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.data.KeyedObject var55 = new org.jfree.data.KeyedObject((java.lang.Comparable)2.0d, (java.lang.Object)var54);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var58 = null;
//     var56.setSeriesURLGenerator(10, var58);
//     java.awt.Font var60 = var56.getBaseItemLabelFont();
//     java.lang.Boolean var62 = var56.getSeriesVisibleInLegend(10);
//     boolean var63 = var55.equals((java.lang.Object)var56);
//     org.jfree.chart.axis.CategoryAxis var64 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var65 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var67 = null;
//     var65.setSeriesURLGenerator(10, var67);
//     java.awt.Font var69 = var65.getBaseItemLabelFont();
//     var64.setLabelFont(var69);
//     org.jfree.chart.plot.CategoryPlot var71 = new org.jfree.chart.plot.CategoryPlot();
//     var71.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var74 = var71.getDomainAxis();
//     var64.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var71);
//     org.jfree.chart.renderer.RenderAttributes var76 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var81 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var76.setSeriesOutlinePaint(0, (java.awt.Paint)var81);
//     var71.setRangeCrosshairPaint((java.awt.Paint)var81);
//     var55.setObject((java.lang.Object)var81);
//     var48.setDomainGridlinePaint((java.awt.Paint)var81);
//     var0.setSeriesItemLabelPaint(0, (java.awt.Paint)var81, true);
//     
//     // Checks the contract:  equals-hashcode on var1 and var40
//     assertTrue("Contract failed: equals-hashcode on var1 and var40", var1.equals(var40) ? var1.hashCode() == var40.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var1 and var54
//     assertTrue("Contract failed: equals-hashcode on var1 and var54", var1.equals(var54) ? var1.hashCode() == var54.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var1 and var56
//     assertTrue("Contract failed: equals-hashcode on var1 and var56", var1.equals(var56) ? var1.hashCode() == var56.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var1 and var65
//     assertTrue("Contract failed: equals-hashcode on var1 and var65", var1.equals(var65) ? var1.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var40 and var1
//     assertTrue("Contract failed: equals-hashcode on var40 and var1", var40.equals(var1) ? var40.hashCode() == var1.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var1
//     assertTrue("Contract failed: equals-hashcode on var54 and var1", var54.equals(var1) ? var54.hashCode() == var1.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var56 and var1
//     assertTrue("Contract failed: equals-hashcode on var56 and var1", var56.equals(var1) ? var56.hashCode() == var1.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var1
//     assertTrue("Contract failed: equals-hashcode on var65 and var1", var65.equals(var1) ? var65.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.plot.Plot var7 = var0.getParent();
//     org.jfree.chart.axis.CategoryAxis var8 = null;
//     org.jfree.chart.axis.CategoryAxis[] var9 = new org.jfree.chart.axis.CategoryAxis[] { var8};
//     var0.setDomainAxes(var9);
//     org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var15 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var16 = null;
//     boolean var17 = var11.render(var12, var13, 100, var15, var16);
//     org.jfree.chart.plot.Plot var18 = var11.getParent();
//     org.jfree.data.general.DatasetGroup var19 = var11.getDatasetGroup();
//     org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
//     var20.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var23 = var20.getDomainGridlineStroke();
//     org.jfree.chart.util.RectangleEdge var25 = var20.getDomainAxisEdge(15);
//     var20.setRangeCrosshairLockedOnData(true);
//     org.jfree.data.category.CategoryDataset var28 = null;
//     org.jfree.chart.axis.CategoryAxis var29 = null;
//     org.jfree.chart.axis.ValueAxis var30 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var33 = null;
//     var31.setSeriesOutlineStroke(100, var33);
//     java.awt.Paint var36 = null;
//     var31.setSeriesOutlinePaint(0, var36, true);
//     java.awt.Shape var40 = var31.lookupSeriesShape(10);
//     java.awt.Paint var42 = null;
//     var31.setSeriesFillPaint(0, var42, false);
//     boolean var45 = var31.getBaseShapesVisible();
//     java.awt.Paint var46 = var31.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var47 = var31.getBaseNegativeItemLabelPosition();
//     var31.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot(var28, var29, var30, (org.jfree.chart.renderer.category.CategoryItemRenderer)var31);
//     org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var52 = null;
//     java.awt.geom.Rectangle2D var53 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var55 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var56 = null;
//     boolean var57 = var51.render(var52, var53, 100, var55, var56);
//     org.jfree.chart.event.MarkerChangeEvent var58 = null;
//     var51.markerChanged(var58);
//     org.jfree.chart.plot.Marker var61 = null;
//     org.jfree.chart.util.Layer var62 = null;
//     boolean var64 = var51.removeDomainMarker(10, var61, var62, true);
//     org.jfree.chart.axis.AxisLocation var66 = var51.getDomainAxisLocation(0);
//     org.jfree.chart.axis.AxisLocation var67 = org.jfree.chart.axis.AxisLocation.getOpposite(var66);
//     var50.setDomainAxisLocation(var67, false);
//     var20.setRangeAxisLocation(var67, false);
//     var11.setDomainAxisLocation(var67, true);
//     java.lang.Object var74 = null;
//     boolean var75 = var67.equals(var74);
//     java.lang.String var76 = var67.toString();
//     var0.setDomainAxisLocation(var67);
//     
//     // Checks the contract:  equals-hashcode on var0 and var11
//     assertTrue("Contract failed: equals-hashcode on var0 and var11", var0.equals(var11) ? var0.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var0
//     assertTrue("Contract failed: equals-hashcode on var11 and var0", var11.equals(var0) ? var11.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = var0.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getBaseNegativeItemLabelPosition();
    var0.setBaseCreateEntities(true, true);
    java.lang.Boolean var21 = var0.getSeriesItemLabelsVisible(0);
    var0.setBaseShapesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }


    org.jfree.chart.util.StandardGradientPaintTransformer var0 = new org.jfree.chart.util.StandardGradientPaintTransformer();
    boolean var2 = var0.equals((java.lang.Object)(short)100);
    org.jfree.chart.util.GradientPaintTransformType var3 = var0.getType();
    org.jfree.chart.util.StandardGradientPaintTransformer var4 = new org.jfree.chart.util.StandardGradientPaintTransformer(var3);
    java.lang.Object var5 = null;
    boolean var6 = var3.equals(var5);
    org.jfree.chart.renderer.category.BarRenderer var8 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var9 = var8.isDrawBarOutline();
    boolean var10 = var8.isDrawBarOutline();
    java.awt.Paint var11 = var8.getShadowPaint();
    org.jfree.chart.LegendItem var12 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var11);
    boolean var13 = var3.equals((java.lang.Object)"ChartEntity: tooltip = null");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test321() {}
//   public void test321() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var6 = null;
//     var4.setSeriesOutlineStroke(100, var6);
//     java.awt.Paint var9 = null;
//     var4.setSeriesOutlinePaint(0, var9, true);
//     var4.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var16 = var4.lookupSeriesShape((-1));
//     org.jfree.chart.entity.ChartEntity var17 = new org.jfree.chart.entity.ChartEntity(var16);
//     java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     int var22 = var21.getRed();
//     org.jfree.chart.LegendItem var23 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var16, (java.awt.Paint)var21);
//     java.awt.Paint var24 = var23.getFillPaint();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.data.category.DefaultCategoryDataset var26 = new org.jfree.data.category.DefaultCategoryDataset();
//     org.jfree.chart.axis.CategoryAxis var27 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var30 = null;
//     var28.setSeriesURLGenerator(10, var30);
//     java.awt.Font var32 = var28.getBaseItemLabelFont();
//     var27.setLabelFont(var32);
//     java.lang.Object var34 = var27.clone();
//     org.jfree.chart.axis.ValueAxis var35 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var38 = null;
//     var36.setSeriesURLGenerator(10, var38);
//     org.jfree.chart.labels.ItemLabelPosition var41 = var36.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.plot.CategoryPlot var42 = var36.getPlot();
//     org.jfree.chart.plot.CategoryPlot var43 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var26, var27, var35, (org.jfree.chart.renderer.category.CategoryItemRenderer)var36);
//     org.jfree.data.Range var44 = var25.findRangeBounds((org.jfree.data.category.CategoryDataset)var26);
//     java.awt.Shape var49 = null;
//     org.jfree.chart.plot.CategoryPlot var50 = new org.jfree.chart.plot.CategoryPlot();
//     var50.setRangeCrosshairValue((-1.0d));
//     java.awt.Stroke var53 = var50.getDomainGridlineStroke();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var56 = null;
//     var54.setSeriesURLGenerator(10, var56);
//     boolean var61 = var54.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot();
//     var54.setPlot(var62);
//     var62.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
//     java.awt.Paint var66 = var62.getRangeCrosshairPaint();
//     org.jfree.chart.LegendItem var67 = new org.jfree.chart.LegendItem("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", "hi!", "-3,-3,3,3", "hi!", var49, var53, var66);
//     var25.setBaseOutlineStroke(var53, false);
//     var23.setOutlineStroke(var53);
//     
//     // Checks the contract:  equals-hashcode on var28 and var4
//     assertTrue("Contract failed: equals-hashcode on var28 and var4", var28.equals(var4) ? var28.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var4
//     assertTrue("Contract failed: equals-hashcode on var36 and var4", var36.equals(var4) ? var36.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var4
//     assertTrue("Contract failed: equals-hashcode on var54 and var4", var54.equals(var4) ? var54.hashCode() == var4.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var28 and var4.", var28.equals(var4) == var4.equals(var28));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var36 and var4.", var36.equals(var4) == var4.equals(var36));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var54 and var4.", var54.equals(var4) == var4.equals(var54));
// 
//   }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    java.util.List var20 = var0.getKeys();
    java.util.List var21 = var0.getKeys();
    java.util.List var22 = var0.getKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.axis.AxisSpace var23 = null;
    var22.setFixedRangeAxisSpace(var23);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var28 = null;
    var26.setSeriesOutlineStroke(100, var28);
    java.awt.Paint var31 = null;
    var26.setSeriesOutlinePaint(0, var31, true);
    var26.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var38 = var26.lookupSeriesShape((-1));
    java.awt.Paint var40 = null;
    var26.setLegendTextPaint(0, var40);
    boolean var42 = var26.getAutoPopulateSeriesOutlineStroke();
    var26.setDataBoundsIncludesVisibleSeriesOnly(false);
    var22.setRenderer(1, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
    var22.setRangeCrosshairValue((-14.0d));
    float var48 = var22.getBackgroundImageAlpha();
    org.jfree.chart.util.SortOrder var49 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setRowRenderingOrder(var49);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = var0.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getBaseNegativeItemLabelPosition();
    var0.setBaseSeriesVisible(false);
    double var19 = var0.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer var21 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var22 = var21.isDrawBarOutline();
    boolean var23 = var21.isDrawBarOutline();
    java.awt.Paint var24 = var21.getShadowPaint();
    org.jfree.chart.LegendItem var25 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var24);
    var0.setBaseLegendTextPaint(var24);
    var0.setAutoPopulateSeriesOutlinePaint(false);
    var0.setBaseSeriesVisibleInLegend(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test325() {}
//   public void test325() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     int var11 = var0.getBackgroundImageAlignment();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var14 = null;
//     var12.setSeriesOutlineStroke(100, var14);
//     java.awt.Paint var17 = null;
//     var12.setSeriesOutlinePaint(0, var17, true);
//     java.awt.Shape var21 = var12.lookupSeriesShape(10);
//     java.awt.Paint var23 = null;
//     var12.setSeriesFillPaint(0, var23, false);
//     boolean var26 = var12.getBaseShapesVisible();
//     java.awt.Paint var27 = var12.getBaseOutlinePaint();
//     int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
//     org.jfree.chart.util.Layer var30 = null;
//     java.util.Collection var31 = var0.getRangeMarkers(3, var30);
//     java.util.List var32 = var0.getCategories();
//     org.jfree.chart.axis.AxisLocation var34 = var0.getRangeAxisLocation(100);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var39 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var40 = null;
//     boolean var41 = var35.render(var36, var37, 100, var39, var40);
//     org.jfree.chart.event.MarkerChangeEvent var42 = null;
//     var35.markerChanged(var42);
//     var35.setDrawSharedDomainAxis(true);
//     int var46 = var35.getBackgroundImageAlignment();
//     org.jfree.chart.axis.AxisSpace var47 = null;
//     var35.setFixedRangeAxisSpace(var47);
//     double var49 = var35.getRangeCrosshairValue();
//     org.jfree.chart.plot.PlotOrientation var50 = var35.getOrientation();
//     org.jfree.chart.util.RectangleEdge var51 = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(var34, var50);
//     
//     // Checks the contract:  equals-hashcode on var0 and var35
//     assertTrue("Contract failed: equals-hashcode on var0 and var35", var0.equals(var35) ? var0.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var0
//     assertTrue("Contract failed: equals-hashcode on var35 and var0", var35.equals(var0) ? var35.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }


    org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var5 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    var0.setSeriesPaint(0, (java.awt.Paint)var5);
    org.jfree.chart.plot.DefaultDrawingSupplier var8 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Paint var9 = var8.getNextPaint();
    java.awt.Shape var10 = var8.getNextShape();
    var0.setSeriesShape(5, var10);
    java.awt.Paint var14 = var0.getItemOutlinePaint(0, (-16777216));
    java.awt.Paint var17 = var0.getItemFillPaint((-16777216), (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var10 = null;
//     var8.setSeriesOutlineStroke(100, var10);
//     java.awt.Paint var13 = null;
//     var8.setSeriesOutlinePaint(0, var13, true);
//     var8.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var20 = var8.lookupSeriesShape((-1));
//     org.jfree.chart.entity.ChartEntity var21 = new org.jfree.chart.entity.ChartEntity(var20);
//     java.awt.Color var25 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     int var26 = var25.getRed();
//     org.jfree.chart.LegendItem var27 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var20, (java.awt.Paint)var25);
//     org.jfree.chart.entity.ChartEntity var28 = new org.jfree.chart.entity.ChartEntity(var20);
//     org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var30 = null;
//     java.awt.geom.Rectangle2D var31 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var33 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var34 = null;
//     boolean var35 = var29.render(var30, var31, 100, var33, var34);
//     org.jfree.chart.event.MarkerChangeEvent var36 = null;
//     var29.markerChanged(var36);
//     var29.setDrawSharedDomainAxis(true);
//     java.awt.Stroke var40 = var29.getRangeCrosshairStroke();
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var42 = null;
//     java.awt.geom.Rectangle2D var43 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var45 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var46 = null;
//     boolean var47 = var41.render(var42, var43, 100, var45, var46);
//     org.jfree.chart.event.MarkerChangeEvent var48 = null;
//     var41.markerChanged(var48);
//     var41.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var52 = var41.getInsets();
//     double var54 = var52.calculateLeftInset(8.0d);
//     org.jfree.chart.renderer.RenderAttributes var55 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var58 = var55.getItemShape(0, 0);
//     java.awt.Paint var61 = var55.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot();
//     var62.setRangeCrosshairValue((-1.0d));
//     var62.setNoDataMessage("");
//     java.awt.Color var70 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var62.setRangeZeroBaselinePaint((java.awt.Paint)var70);
//     var55.setDefaultFillPaint((java.awt.Paint)var70);
//     java.awt.Shape var73 = var55.getDefaultShape();
//     boolean var74 = var52.equals((java.lang.Object)var55);
//     java.awt.Color var78 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     int var79 = var78.getRGB();
//     java.awt.Color var80 = var78.darker();
//     var55.setDefaultPaint((java.awt.Paint)var80);
//     org.jfree.chart.LegendItem var82 = new org.jfree.chart.LegendItem("NOID", "PlotOrientation.VERTICAL", "SortOrder.ASCENDING", "-3,-3,3,3", var20, var40, (java.awt.Paint)var80);
//     
//     // Checks the contract:  equals-hashcode on var29 and var41
//     assertTrue("Contract failed: equals-hashcode on var29 and var41", var29.equals(var41) ? var29.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var29
//     assertTrue("Contract failed: equals-hashcode on var41 and var29", var41.equals(var29) ? var41.hashCode() == var29.hashCode() : true);
// 
//   }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = var0.getBaseOutlinePaint();
    java.awt.Stroke var16 = var0.getBaseStroke();
    var0.setSeriesShapesFilled(3, true);
    var0.setDrawOutlines(true);
    org.jfree.chart.labels.ItemLabelPosition var22 = var0.getBaseNegativeItemLabelPosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.util.Layer var7 = null;
    java.util.Collection var8 = var0.getDomainMarkers(var7);
    org.jfree.chart.axis.AxisSpace var9 = var0.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.CategoryItemRenderer var11 = var0.getRenderer(1);
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var0.zoomDomainAxes(0.0d, 100.0d, var14, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateRightOutset(0.0d);
    org.jfree.chart.util.UnitType var14 = var11.getUnitType();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var17 = null;
    var15.setSeriesOutlineStroke(100, var17);
    java.awt.Paint var20 = null;
    var15.setSeriesOutlinePaint(0, var20, true);
    java.awt.Shape var24 = var15.lookupSeriesShape(10);
    java.awt.Paint var26 = null;
    var15.setSeriesFillPaint(0, var26, false);
    boolean var29 = var15.getBaseShapesVisible();
    java.awt.Paint var30 = null;
    var15.setBasePaint(var30);
    var15.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.urls.CategoryURLGenerator var35 = null;
    var15.setSeriesURLGenerator(2, var35, true);
    java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    org.jfree.chart.LegendItem var43 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var42);
    java.awt.Shape var44 = var43.getShape();
    var15.setBaseLegendShape(var44);
    boolean var46 = var14.equals((java.lang.Object)var15);
    var15.setAutoPopulateSeriesPaint(false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var52 = null;
    var50.setSeriesURLGenerator(10, var52);
    org.jfree.chart.labels.ItemLabelPosition var55 = null;
    var50.setSeriesNegativeItemLabelPosition(0, var55, true);
    java.awt.Stroke var59 = var50.lookupSeriesStroke(0);
    var50.setBaseShapesFilled(false);
    org.jfree.chart.labels.ItemLabelPosition var63 = var50.getSeriesNegativeItemLabelPosition(3);
    org.jfree.chart.axis.CategoryAxis var64 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var65 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var67 = null;
    var65.setSeriesURLGenerator(10, var67);
    java.awt.Font var69 = var65.getBaseItemLabelFont();
    var64.setLabelFont(var69);
    boolean var71 = var63.equals((java.lang.Object)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setLegendTextFont((-16777216), var69);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setFixedDimension(2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.setRangeCrosshairValue((-1.0d));
    var0.setPlot((org.jfree.chart.plot.Plot)var19);
    double var23 = var0.getCategoryMargin();
    float var24 = var0.getTickMarkOutsideLength();
    double var25 = var0.getLabelAngle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.0d);

  }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }
// 
// 
//     java.util.Locale var1 = null;
//     java.util.ResourceBundle var2 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("ChartChangeEventType.GENERAL", var1);
// 
//   }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.util.Layer var7 = null;
    java.util.Collection var8 = var0.getDomainMarkers(var7);
    org.jfree.chart.util.RectangleInsets var9 = var0.getAxisOffset();
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)0.05d, false);
    boolean var13 = var0.isDomainGridlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var4 = null;
    java.awt.geom.Rectangle2D var5 = null;
    org.jfree.chart.plot.PlotRenderingInfo var7 = null;
    org.jfree.chart.plot.CategoryCrosshairState var8 = null;
    boolean var9 = var3.render(var4, var5, 100, var7, var8);
    org.jfree.chart.util.Layer var10 = null;
    java.util.Collection var11 = var3.getDomainMarkers(var10);
    org.jfree.chart.axis.AxisSpace var12 = var3.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.CategoryItemRenderer var14 = var3.getRenderer(1);
    var3.setRangeCrosshairVisible(false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var20 = null;
    var18.setSeriesURLGenerator(10, var20);
    org.jfree.chart.labels.ItemLabelPosition var23 = null;
    var18.setSeriesNegativeItemLabelPosition(0, var23, true);
    java.awt.Stroke var27 = var18.lookupSeriesStroke(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var31 = null;
    var29.setSeriesOutlineStroke(100, var31);
    java.awt.Paint var34 = null;
    var29.setSeriesOutlinePaint(0, var34, true);
    var29.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var41 = var29.lookupSeriesShape((-1));
    var18.setSeriesShape(0, var41);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var43 = null;
    var18.setLegendItemToolTipGenerator(var43);
    org.jfree.chart.labels.CategoryToolTipGenerator var46 = null;
    var18.setSeriesToolTipGenerator(1, var46, true);
    var3.setRenderer(100, (org.jfree.chart.renderer.category.CategoryItemRenderer)var18, false);
    boolean var51 = var0.hasListener((java.util.EventListener)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    java.lang.Object var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.event.ChartChangeEvent var1 = new org.jfree.chart.event.ChartChangeEvent(var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test336() {}
//   public void test336() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }
// 
// 
//     org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     boolean var8 = var1.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
//     var1.setPlot(var9);
//     org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
//     org.jfree.chart.plot.PlotRenderingInfo var14 = null;
//     java.awt.geom.Point2D var15 = null;
//     var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
//     org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
//     boolean var19 = var0.equals((java.lang.Object)var9);
//     java.util.List var20 = var0.getKeys();
//     java.util.List var21 = var0.getKeys();
//     org.jfree.chart.renderer.RenderAttributes var23 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var26 = var23.getItemShape(0, 0);
//     java.awt.Paint var29 = var23.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     var30.setRangeCrosshairValue((-1.0d));
//     var30.setNoDataMessage("");
//     java.awt.Color var38 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var30.setRangeZeroBaselinePaint((java.awt.Paint)var38);
//     var23.setDefaultFillPaint((java.awt.Paint)var38);
//     java.awt.Stroke var42 = var23.getSeriesStroke(3);
//     var0.addObject((java.lang.Comparable)(short)100, (java.lang.Object)var23);
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var45 = null;
//     java.awt.geom.Rectangle2D var46 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var48 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var49 = null;
//     boolean var50 = var44.render(var45, var46, 100, var48, var49);
//     boolean var51 = var44.isOutlineVisible();
//     org.jfree.chart.util.SortOrder var52 = var44.getRowRenderingOrder();
//     java.lang.String var53 = var52.toString();
//     var0.sortByKeys(var52);
//     
//     // Checks the contract:  equals-hashcode on var9 and var44
//     assertTrue("Contract failed: equals-hashcode on var9 and var44", var9.equals(var44) ? var9.hashCode() == var44.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var9
//     assertTrue("Contract failed: equals-hashcode on var44 and var9", var44.equals(var9) ? var44.hashCode() == var9.hashCode() : true);
// 
//   }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var14 = null;
    var12.setSeriesOutlineStroke(100, var14);
    java.awt.Paint var17 = null;
    var12.setSeriesOutlinePaint(0, var17, true);
    java.awt.Shape var21 = var12.lookupSeriesShape(10);
    java.awt.Paint var23 = null;
    var12.setSeriesFillPaint(0, var23, false);
    boolean var26 = var12.getBaseShapesVisible();
    java.awt.Paint var27 = var12.getBaseOutlinePaint();
    int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
    org.jfree.chart.util.Layer var30 = null;
    java.util.Collection var31 = var0.getRangeMarkers(3, var30);
    java.util.List var32 = var0.getCategories();
    org.jfree.chart.axis.AxisLocation var34 = var0.getRangeAxisLocation(100);
    org.jfree.chart.axis.AxisSpace var35 = null;
    var0.setFixedRangeAxisSpace(var35);
    org.jfree.data.category.CategoryDataset var37 = null;
    org.jfree.chart.axis.CategoryAxis var38 = null;
    org.jfree.chart.axis.ValueAxis var39 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var40 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var42 = null;
    var40.setSeriesOutlineStroke(100, var42);
    java.awt.Paint var45 = null;
    var40.setSeriesOutlinePaint(0, var45, true);
    java.awt.Shape var49 = var40.lookupSeriesShape(10);
    java.awt.Paint var51 = null;
    var40.setSeriesFillPaint(0, var51, false);
    boolean var54 = var40.getBaseShapesVisible();
    java.awt.Paint var55 = var40.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var56 = var40.getBaseNegativeItemLabelPosition();
    var40.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var59 = new org.jfree.chart.plot.CategoryPlot(var37, var38, var39, (org.jfree.chart.renderer.category.CategoryItemRenderer)var40);
    org.jfree.chart.plot.CategoryPlot var60 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var61 = null;
    java.awt.geom.Rectangle2D var62 = null;
    org.jfree.chart.plot.PlotRenderingInfo var64 = null;
    org.jfree.chart.plot.CategoryCrosshairState var65 = null;
    boolean var66 = var60.render(var61, var62, 100, var64, var65);
    org.jfree.chart.event.MarkerChangeEvent var67 = null;
    var60.markerChanged(var67);
    org.jfree.chart.plot.Marker var70 = null;
    org.jfree.chart.util.Layer var71 = null;
    boolean var73 = var60.removeDomainMarker(10, var70, var71, true);
    org.jfree.chart.axis.AxisLocation var75 = var60.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var76 = org.jfree.chart.axis.AxisLocation.getOpposite(var75);
    var59.setDomainAxisLocation(var76, false);
    org.jfree.chart.plot.CategoryPlot var79 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var80 = null;
    java.awt.geom.Rectangle2D var81 = null;
    org.jfree.chart.plot.PlotRenderingInfo var83 = null;
    org.jfree.chart.plot.CategoryCrosshairState var84 = null;
    boolean var85 = var79.render(var80, var81, 100, var83, var84);
    org.jfree.chart.event.MarkerChangeEvent var86 = null;
    var79.markerChanged(var86);
    var79.setDrawSharedDomainAxis(true);
    int var90 = var79.getBackgroundImageAlignment();
    org.jfree.chart.axis.AxisSpace var91 = null;
    var79.setFixedRangeAxisSpace(var91);
    double var93 = var79.getRangeCrosshairValue();
    org.jfree.chart.plot.PlotOrientation var94 = var79.getOrientation();
    org.jfree.chart.util.RectangleEdge var95 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var76, var94);
    var0.setRangeAxisLocation(var76);
    org.jfree.chart.annotations.CategoryAnnotation var97 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var97);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setWeight(10);
    org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var4 = null;
    org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    java.awt.Shape var15 = var6.lookupSeriesShape(10);
    java.awt.Paint var17 = null;
    var6.setSeriesFillPaint(0, var17, false);
    boolean var20 = var6.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var23 = var6.getBaseItemLabelFont();
    boolean var24 = var3.equals((java.lang.Object)var6);
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var0.getDomainMarkers(var26);
    org.jfree.chart.event.PlotChangeListener var28 = null;
    var0.addChangeListener(var28);
    java.awt.Paint var30 = var0.getOutlinePaint();
    boolean var31 = var0.isRangeCrosshairVisible();
    org.jfree.chart.axis.CategoryAnchor var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainGridlinePosition(var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     boolean var7 = var0.getItemCreateEntity(1, 10, true);
//     org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setPlot(var8);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var12 = null;
//     var10.setSeriesOutlineStroke(100, var12);
//     java.awt.Paint var15 = null;
//     var10.setSeriesOutlinePaint(0, var15, true);
//     java.awt.Shape var19 = var10.lookupSeriesShape(10);
//     java.awt.Paint var21 = null;
//     var10.setSeriesFillPaint(0, var21, false);
//     boolean var24 = var10.getBaseShapesVisible();
//     java.awt.Paint var25 = var10.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var26 = var10.getBaseNegativeItemLabelPosition();
//     var10.setBaseSeriesVisible(false);
//     double var29 = var10.getItemLabelAnchorOffset();
//     org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var32 = var31.isDrawBarOutline();
//     boolean var33 = var31.isDrawBarOutline();
//     java.awt.Paint var34 = var31.getShadowPaint();
//     org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
//     var10.setBaseLegendTextPaint(var34);
//     var8.setRangeMinorGridlinePaint(var34);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var39 = null;
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var42 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var43 = null;
//     boolean var44 = var38.render(var39, var40, 100, var42, var43);
//     org.jfree.chart.event.MarkerChangeEvent var45 = null;
//     var38.markerChanged(var45);
//     var38.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var49 = var38.getInsets();
//     java.awt.Stroke var50 = var38.getRangeZeroBaselineStroke();
//     org.jfree.chart.axis.AxisLocation var52 = var38.getDomainAxisLocation(100);
//     boolean var53 = var8.equals((java.lang.Object)var38);
//     org.jfree.chart.plot.PlotRenderingInfo var55 = null;
//     java.awt.geom.Point2D var56 = null;
//     var8.zoomRangeAxes((-1.8d), var55, var56, true);
//     org.jfree.chart.plot.CategoryPlot var59 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var60 = null;
//     java.awt.geom.Rectangle2D var61 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var63 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var64 = null;
//     boolean var65 = var59.render(var60, var61, 100, var63, var64);
//     org.jfree.chart.event.MarkerChangeEvent var66 = null;
//     var59.markerChanged(var66);
//     var59.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var70 = var59.getInsets();
//     java.awt.Stroke var71 = var59.getRangeZeroBaselineStroke();
//     var59.setBackgroundImageAlignment(15);
//     org.jfree.chart.util.SortOrder var74 = var59.getColumnRenderingOrder();
//     var8.setRowRenderingOrder(var74);
//     
//     // Checks the contract:  equals-hashcode on var38 and var59
//     assertTrue("Contract failed: equals-hashcode on var38 and var59", var38.equals(var59) ? var38.hashCode() == var59.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var38
//     assertTrue("Contract failed: equals-hashcode on var59 and var38", var59.equals(var38) ? var59.hashCode() == var38.hashCode() : true);
// 
//   }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var14 = null;
    var12.setSeriesURLGenerator(10, var14);
    org.jfree.chart.labels.ItemLabelPosition var17 = null;
    var12.setSeriesNegativeItemLabelPosition(0, var17, true);
    java.awt.Stroke var21 = var12.lookupSeriesStroke(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesStroke((-254), var21, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    java.awt.Font var4 = var0.getBaseItemLabelFont();
    org.jfree.chart.labels.CategorySeriesLabelGenerator var5 = null;
    var0.setLegendItemToolTipGenerator(var5);
    boolean var7 = var0.getDrawOutlines();
    java.lang.Object var8 = var0.clone();
    org.jfree.chart.annotations.CategoryAnnotation var9 = null;
    org.jfree.chart.util.Layer var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var9, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    org.jfree.chart.annotations.CategoryAnnotation var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getRowCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var0.getObject(100, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = var0.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.ChartColor var9 = new org.jfree.chart.ChartColor(10, 2, 0);
    var0.setBaseOutlinePaint((java.awt.Paint)var9);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var14 = null;
    var12.setSeriesOutlineStroke(100, var14);
    java.awt.Paint var17 = null;
    var12.setSeriesOutlinePaint(0, var17, true);
    var12.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var24 = var12.lookupSeriesShape((-1));
    java.awt.Paint var26 = null;
    var12.setLegendTextPaint(0, var26);
    boolean var28 = var12.getAutoPopulateSeriesOutlineStroke();
    java.awt.Color var32 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var12.setBasePaint((java.awt.Paint)var32);
    java.awt.Font var37 = var12.getItemLabelFont((-16777216), (-2), true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setLegendTextFont((-254), var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    java.awt.Image var13 = null;
    var0.setBackgroundImage(var13);
    var0.clearDomainAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    boolean var7 = var0.isOutlineVisible();
    org.jfree.chart.util.SortOrder var8 = var0.getRowRenderingOrder();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var11 = null;
    var9.setSeriesOutlineStroke(100, var11);
    java.awt.Paint var14 = null;
    var9.setSeriesOutlinePaint(0, var14, true);
    boolean var17 = var9.getBaseSeriesVisibleInLegend();
    java.awt.Font var19 = var9.getSeriesItemLabelFont(1);
    int var20 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var9);
    org.jfree.chart.annotations.CategoryAnnotation var21 = null;
    boolean var22 = var9.removeAnnotation(var21);
    var9.setSeriesShapesVisible(15, true);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var26 = var9.getLegendItemLabelGenerator();
    boolean var29 = var9.getItemVisible(10, 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setWeight(10);
    org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var4 = null;
    org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    java.awt.Shape var15 = var6.lookupSeriesShape(10);
    java.awt.Paint var17 = null;
    var6.setSeriesFillPaint(0, var17, false);
    boolean var20 = var6.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var23 = var6.getBaseItemLabelFont();
    boolean var24 = var3.equals((java.lang.Object)var6);
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
    org.jfree.chart.plot.Marker var26 = null;
    org.jfree.chart.util.Layer var27 = null;
    boolean var28 = var0.removeDomainMarker(var26, var27);
    org.jfree.chart.util.RectangleInsets var29 = var0.getInsets();
    double var31 = var29.calculateTopInset((-1.0d));
    double var33 = var29.calculateLeftOutset((-16.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 8.0d);

  }

  public void test348() {}
//   public void test348() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }
// 
// 
//     org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
//     int var1 = var0.getRowCount();
//     var0.validateObject();
//     org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var6 = null;
//     var4.setSeriesURLGenerator(10, var6);
//     java.awt.Font var8 = var4.getBaseItemLabelFont();
//     var3.setLabelFont(var8);
//     java.awt.Paint var10 = var3.getTickMarkPaint();
//     float var11 = var3.getTickMarkInsideLength();
//     org.jfree.chart.axis.ValueAxis var12 = null;
//     org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
//     var13.setBase((-1.0d));
//     org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var3, var12, (org.jfree.chart.renderer.category.CategoryItemRenderer)var13);
//     java.awt.Paint var17 = var13.getBaseItemLabelPaint();
//     org.jfree.chart.renderer.category.BarRenderer var18 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var19 = var18.isDrawBarOutline();
//     boolean var20 = var18.isDrawBarOutline();
//     java.awt.Paint var21 = var18.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var23 = null;
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var26 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var27 = null;
//     boolean var28 = var22.render(var23, var24, 100, var26, var27);
//     boolean var29 = var22.isOutlineVisible();
//     var22.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var32 = var22.getDomainGridlinePosition();
//     java.awt.Paint var33 = var22.getBackgroundPaint();
//     var18.addChangeListener((org.jfree.chart.event.RendererChangeListener)var22);
//     java.awt.Paint var35 = var18.getBaseOutlinePaint();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var38 = null;
//     var36.setSeriesOutlineStroke(100, var38);
//     java.awt.Paint var41 = null;
//     var36.setSeriesOutlinePaint(0, var41, true);
//     java.awt.Shape var45 = var36.lookupSeriesShape(10);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var46 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var48 = null;
//     var46.setSeriesOutlineStroke(100, var48);
//     java.awt.Paint var51 = null;
//     var46.setSeriesOutlinePaint(0, var51, true);
//     org.jfree.chart.labels.ItemLabelPosition var54 = var46.getBaseNegativeItemLabelPosition();
//     var36.setBaseNegativeItemLabelPosition(var54);
//     org.jfree.chart.labels.ItemLabelAnchor var56 = var54.getItemLabelAnchor();
//     var18.setNegativeItemLabelPositionFallback(var54);
//     var13.setBaseNegativeItemLabelPosition(var54, false);
//     
//     // Checks the contract:  equals-hashcode on var4 and var36
//     assertTrue("Contract failed: equals-hashcode on var4 and var36", var4.equals(var36) ? var4.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var46
//     assertTrue("Contract failed: equals-hashcode on var4 and var46", var4.equals(var46) ? var4.hashCode() == var46.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var4
//     assertTrue("Contract failed: equals-hashcode on var36 and var4", var36.equals(var4) ? var36.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var46 and var4
//     assertTrue("Contract failed: equals-hashcode on var46 and var4", var46.equals(var4) ? var46.hashCode() == var4.hashCode() : true);
// 
//   }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    org.jfree.chart.plot.PlotRenderingInfo var11 = null;
    org.jfree.chart.plot.CategoryCrosshairState var12 = null;
    boolean var13 = var7.render(var8, var9, 100, var11, var12);
    org.jfree.chart.event.MarkerChangeEvent var14 = null;
    var7.markerChanged(var14);
    var7.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var18 = var7.getInsets();
    double var20 = var18.calculateLeftInset(8.0d);
    double var22 = var18.calculateRightInset(8.0d);
    double var24 = var18.calculateTopInset(0.0d);
    double var25 = var18.getRight();
    var0.setInsets(var18);
    org.jfree.chart.util.Layer var27 = null;
    java.util.Collection var28 = var0.getDomainMarkers(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    org.jfree.chart.plot.DrawingSupplier var17 = var4.getDrawingSupplier();
    org.jfree.chart.axis.AxisLocation var18 = var4.getDomainAxisLocation();
    float var19 = var4.getBackgroundImageAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var18 = var0.getPositiveItemLabelPosition(1, 10, true);
    java.awt.Paint var19 = var0.getBasePaint();
    boolean var20 = var0.getBaseItemLabelsVisible();
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.setRangeCrosshairValue((-1.0d));
    var21.setNoDataMessage("");
    java.awt.Color var29 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var21.setRangeZeroBaselinePaint((java.awt.Paint)var29);
    org.jfree.chart.util.Layer var31 = null;
    java.util.Collection var32 = var21.getDomainMarkers(var31);
    boolean var33 = var0.hasListener((java.util.EventListener)var21);
    var0.setBaseCreateEntities(false, true);
    boolean var37 = var0.getBaseShapesVisible();
    var0.setSeriesShapesVisible(0, true);
    var0.setSeriesVisible(0, (java.lang.Boolean)false);
    double var44 = var0.getItemLabelAnchorOffset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setItemMargin(8.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2.0d);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    boolean var7 = var0.isOutlineVisible();
    var0.setDomainGridlinesVisible(true);
    var0.setRangeCrosshairVisible(true);
    var0.setWeight((-16777216));
    java.lang.Comparable var14 = var0.getDomainCrosshairColumnKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var15 = null;
    var13.setSeriesURLGenerator(10, var15);
    org.jfree.chart.labels.ItemLabelPosition var18 = null;
    var13.setSeriesNegativeItemLabelPosition(0, var18, true);
    java.awt.Stroke var22 = var13.lookupSeriesStroke(0);
    var13.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    var0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var13, false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var31 = null;
    var29.setSeriesURLGenerator(10, var31);
    org.jfree.chart.labels.ItemLabelPosition var34 = null;
    var29.setSeriesNegativeItemLabelPosition(0, var34, true);
    java.awt.Stroke var38 = var29.lookupSeriesStroke(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var40 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var42 = null;
    var40.setSeriesOutlineStroke(100, var42);
    java.awt.Paint var45 = null;
    var40.setSeriesOutlinePaint(0, var45, true);
    var40.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var52 = var40.lookupSeriesShape((-1));
    var29.setSeriesShape(0, var52);
    var13.setLegendShape(0, var52);
    org.jfree.chart.labels.CategoryToolTipGenerator var56 = null;
    var13.setSeriesToolTipGenerator(3, var56, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test354() {}
//   public void test354() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }
// 
// 
//     java.awt.Color var4 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
//     org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var4);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var8 = null;
//     var6.setSeriesOutlineStroke(100, var8);
//     java.awt.Paint var11 = null;
//     var6.setSeriesOutlinePaint(0, var11, true);
//     java.awt.Shape var15 = var6.lookupSeriesShape(10);
//     org.jfree.chart.entity.ChartEntity var16 = new org.jfree.chart.entity.ChartEntity(var15);
//     var5.setShape(var15);
//     java.awt.Shape var18 = var5.getLine();
//     var5.setSeriesIndex(15);
//     java.awt.Paint var21 = null;
//     var5.setLabelPaint(var21);
//     int var23 = var5.getDatasetIndex();
//     org.jfree.chart.axis.CategoryAxis var24 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var27 = null;
//     var25.setSeriesURLGenerator(10, var27);
//     java.awt.Font var29 = var25.getBaseItemLabelFont();
//     var24.setLabelFont(var29);
//     org.jfree.chart.plot.CategoryPlot var31 = new org.jfree.chart.plot.CategoryPlot();
//     var31.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var34 = var31.getDomainAxis();
//     var24.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var31);
//     var24.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var24.setCategoryMargin(1.0d);
//     var24.setFixedDimension(2.0d);
//     org.jfree.chart.plot.CategoryPlot var43 = new org.jfree.chart.plot.CategoryPlot();
//     var43.setRangeCrosshairValue((-1.0d));
//     var24.setPlot((org.jfree.chart.plot.Plot)var43);
//     org.jfree.data.category.DefaultCategoryDataset var47 = new org.jfree.data.category.DefaultCategoryDataset();
//     var47.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
//     java.util.List var52 = var47.getRowKeys();
//     int var54 = var47.getColumnIndex((java.lang.Comparable)100L);
//     java.lang.Object var55 = var47.clone();
//     int var56 = var47.getColumnCount();
//     var43.setDataset((org.jfree.data.category.CategoryDataset)var47);
//     var5.setDataset((org.jfree.data.general.Dataset)var47);
//     
//     // Checks the contract:  equals-hashcode on var6 and var25
//     assertTrue("Contract failed: equals-hashcode on var6 and var25", var6.equals(var25) ? var6.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var6
//     assertTrue("Contract failed: equals-hashcode on var25 and var6", var25.equals(var6) ? var25.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getRowCount();
    var0.validateObject();
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    java.awt.Font var8 = var4.getBaseItemLabelFont();
    var3.setLabelFont(var8);
    java.awt.Paint var10 = var3.getTickMarkPaint();
    float var11 = var3.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var12 = null;
    org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
    var13.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var3, var12, (org.jfree.chart.renderer.category.CategoryItemRenderer)var13);
    org.jfree.chart.annotations.CategoryAnnotation var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var18 = var16.removeAnnotation(var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0f);

  }

  public void test356() {}
//   public void test356() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var12 = var0.lookupSeriesShape((-1));
//     java.awt.Paint var14 = null;
//     var0.setLegendTextPaint(0, var14);
//     boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
//     var0.setAutoPopulateSeriesOutlineStroke(false);
//     var0.setBaseSeriesVisibleInLegend(true, true);
//     org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.axis.AxisLocation var25 = var23.getRangeAxisLocation(10);
//     boolean var26 = var23.canSelectByRegion();
//     org.jfree.data.category.DefaultCategoryDataset var28 = new org.jfree.data.category.DefaultCategoryDataset();
//     var28.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
//     var23.setDataset(3, (org.jfree.data.category.CategoryDataset)var28);
//     org.jfree.chart.event.PlotChangeListener var34 = null;
//     var23.addChangeListener(var34);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var38 = null;
//     var36.setSeriesURLGenerator(10, var38);
//     org.jfree.data.category.CategoryDataset var40 = null;
//     org.jfree.chart.axis.CategoryAxis var41 = null;
//     org.jfree.chart.axis.ValueAxis var42 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var43 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var45 = null;
//     var43.setSeriesOutlineStroke(100, var45);
//     java.awt.Paint var48 = null;
//     var43.setSeriesOutlinePaint(0, var48, true);
//     java.awt.Shape var52 = var43.lookupSeriesShape(10);
//     java.awt.Paint var54 = null;
//     var43.setSeriesFillPaint(0, var54, false);
//     boolean var57 = var43.getBaseShapesVisible();
//     java.awt.Paint var58 = var43.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var59 = var43.getBaseNegativeItemLabelPosition();
//     var43.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot(var40, var41, var42, (org.jfree.chart.renderer.category.CategoryItemRenderer)var43);
//     boolean var63 = var36.hasListener((java.util.EventListener)var62);
//     java.awt.Stroke var67 = var36.getItemOutlineStroke((-1), 100, false);
//     var23.setRangeCrosshairStroke(var67);
//     var0.setSeriesStroke(15, var67, false);
//     
//     // Checks the contract:  equals-hashcode on var36 and var0
//     assertTrue("Contract failed: equals-hashcode on var36 and var0", var36.equals(var0) ? var36.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var36 and var0.", var36.equals(var0) == var0.equals(var36));
// 
//   }

  public void test357() {}
//   public void test357() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     org.jfree.chart.labels.ItemLabelPosition var5 = var0.getSeriesPositiveItemLabelPosition(1);
//     java.awt.Shape var7 = var0.lookupLegendShape(0);
//     org.jfree.chart.LegendItem var10 = var0.getLegendItem((-16777216), 0);
//     int var11 = var0.getPassCount();
//     org.jfree.chart.LegendItemCollection var12 = var0.getLegendItems();
//     java.lang.Object var13 = var12.clone();
//     java.lang.Object var14 = var12.clone();
//     
//     // Checks the contract:  equals-hashcode on var13 and var14
//     assertTrue("Contract failed: equals-hashcode on var13 and var14", var13.equals(var14) ? var13.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var14 and var13
//     assertTrue("Contract failed: equals-hashcode on var14 and var13", var14.equals(var13) ? var14.hashCode() == var13.hashCode() : true);
// 
//   }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.util.List var1 = var0.getAnnotations();
//     org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
//     var0.setShadowGenerator((org.jfree.chart.util.ShadowGenerator)var2);
//     org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var8 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var9 = null;
//     boolean var10 = var4.render(var5, var6, 100, var8, var9);
//     org.jfree.chart.util.Layer var11 = null;
//     java.util.Collection var12 = var4.getDomainMarkers(var11);
//     org.jfree.chart.axis.AxisSpace var13 = var4.getFixedRangeAxisSpace();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var16 = null;
//     var14.setSeriesURLGenerator(10, var16);
//     org.jfree.chart.labels.ItemLabelPosition var19 = null;
//     var14.setSeriesNegativeItemLabelPosition(0, var19, true);
//     java.awt.Stroke var23 = var14.lookupSeriesStroke(0);
//     var4.setRangeGridlineStroke(var23);
//     java.awt.Paint var25 = var4.getOutlinePaint();
//     var0.setParent((org.jfree.chart.plot.Plot)var4);
//     org.jfree.chart.axis.CategoryAxis var28 = var4.getDomainAxisForDataset(255);
//     java.awt.Graphics2D var29 = null;
//     java.awt.geom.Rectangle2D var30 = null;
//     var4.drawBackground(var29, var30);
// 
//   }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    java.awt.Stroke var3 = var0.getDomainGridlineStroke();
    org.jfree.chart.util.RectangleEdge var5 = var0.getDomainAxisEdge(15);
    org.jfree.chart.axis.ValueAxis var7 = null;
    var0.setRangeAxis(15, var7);
    var0.configureRangeAxes();
    org.jfree.chart.util.ShadowGenerator var10 = var0.getShadowGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var12 = null;
    var10.setSeriesOutlineStroke(100, var12);
    java.awt.Paint var15 = null;
    var10.setSeriesOutlinePaint(0, var15, true);
    java.awt.Shape var19 = var10.lookupSeriesShape(10);
    java.awt.Paint var21 = null;
    var10.setSeriesFillPaint(0, var21, false);
    boolean var24 = var10.getBaseShapesVisible();
    java.awt.Paint var25 = var10.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var26 = var10.getBaseNegativeItemLabelPosition();
    var10.setBaseSeriesVisible(false);
    double var29 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var32 = var31.isDrawBarOutline();
    boolean var33 = var31.isDrawBarOutline();
    java.awt.Paint var34 = var31.getShadowPaint();
    org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
    var10.setBaseLegendTextPaint(var34);
    var8.setRangeMinorGridlinePaint(var34);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var39 = null;
    java.awt.geom.Rectangle2D var40 = null;
    org.jfree.chart.plot.PlotRenderingInfo var42 = null;
    org.jfree.chart.plot.CategoryCrosshairState var43 = null;
    boolean var44 = var38.render(var39, var40, 100, var42, var43);
    org.jfree.chart.event.MarkerChangeEvent var45 = null;
    var38.markerChanged(var45);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var49 = var38.getInsets();
    java.awt.Stroke var50 = var38.getRangeZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var52 = var38.getDomainAxisLocation(100);
    boolean var53 = var8.equals((java.lang.Object)var38);
    org.jfree.chart.renderer.category.CategoryItemRenderer var55 = var38.getRenderer(3);
    var38.setRangePannable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    var8.setNoDataMessage("NOID");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = null;
    var0.setSeriesNegativeItemLabelPosition(0, var5, true);
    java.awt.Stroke var9 = var0.lookupSeriesStroke(0);
    var0.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    boolean var13 = var0.getBaseCreateEntities();
    org.jfree.chart.urls.CategoryURLGenerator var15 = null;
    var0.setSeriesURLGenerator(1, var15, true);
    var0.setBaseItemLabelsVisible(false, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesItemLabelsVisible((-1), true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test363() {}
//   public void test363() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var3 = var0.getItemShape(0, 0);
//     java.awt.Paint var4 = var0.getDefaultLabelPaint();
//     java.awt.Paint var6 = var0.getSeriesFillPaint(1);
//     java.awt.Stroke var8 = var0.getSeriesOutlineStroke(3);
// 
//   }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.plot.Plot var7 = var0.getParent();
    org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
    org.jfree.chart.axis.ValueAxis var9 = var0.getRangeAxis();
    org.jfree.chart.util.RectangleInsets var14 = new org.jfree.chart.util.RectangleInsets(0.0d, 0.0d, 0.0d, 0.0d);
    var0.setAxisOffset(var14);
    boolean var16 = var0.isNotify();
    org.jfree.chart.event.MarkerChangeEvent var17 = null;
    var0.markerChanged(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test365() {}
//   public void test365() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     org.jfree.chart.entity.ChartEntity var10 = new org.jfree.chart.entity.ChartEntity(var9);
//     java.lang.String var11 = var10.toString();
//     java.awt.Shape var12 = var10.getArea();
//     org.jfree.data.category.CategoryDataset var13 = null;
//     org.jfree.chart.axis.CategoryAxis var14 = null;
//     org.jfree.chart.axis.ValueAxis var15 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var18 = null;
//     var16.setSeriesOutlineStroke(100, var18);
//     java.awt.Paint var21 = null;
//     var16.setSeriesOutlinePaint(0, var21, true);
//     java.awt.Shape var25 = var16.lookupSeriesShape(10);
//     java.awt.Paint var27 = null;
//     var16.setSeriesFillPaint(0, var27, false);
//     boolean var30 = var16.getBaseShapesVisible();
//     java.awt.Paint var31 = var16.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var32 = var16.getBaseNegativeItemLabelPosition();
//     var16.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot(var13, var14, var15, (org.jfree.chart.renderer.category.CategoryItemRenderer)var16);
//     org.jfree.chart.axis.AxisSpace var36 = null;
//     var35.setFixedRangeAxisSpace(var36);
//     org.jfree.chart.util.RectangleEdge var39 = var35.getDomainAxisEdge(15);
//     org.jfree.chart.entity.PlotEntity var40 = new org.jfree.chart.entity.PlotEntity(var12, (org.jfree.chart.plot.Plot)var35);
//     org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var42 = null;
//     java.awt.geom.Rectangle2D var43 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var45 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var46 = null;
//     boolean var47 = var41.render(var42, var43, 100, var45, var46);
//     org.jfree.chart.plot.Plot var48 = var41.getParent();
//     org.jfree.data.general.DatasetGroup var49 = var41.getDatasetGroup();
//     java.awt.Paint var50 = var41.getDomainGridlinePaint();
//     boolean var51 = var40.equals((java.lang.Object)var41);
//     org.jfree.chart.plot.Plot var52 = var40.getPlot();
//     var40.setToolTipText("ItemLabelAnchor.OUTSIDE6");
//     org.jfree.chart.plot.Plot var55 = var40.getPlot();
//     java.lang.String var56 = var40.toString();
//     org.jfree.chart.renderer.RenderAttributes var57 = new org.jfree.chart.renderer.RenderAttributes();
//     org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var59 = null;
//     java.awt.geom.Rectangle2D var60 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var62 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var63 = null;
//     boolean var64 = var58.render(var59, var60, 100, var62, var63);
//     org.jfree.chart.plot.Plot var65 = var58.getParent();
//     org.jfree.data.general.DatasetGroup var66 = var58.getDatasetGroup();
//     java.awt.Paint var67 = var58.getDomainGridlinePaint();
//     var57.setDefaultPaint(var67);
//     org.jfree.chart.renderer.RenderAttributes var70 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var75 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var70.setSeriesOutlinePaint(0, (java.awt.Paint)var75);
//     java.awt.image.ColorModel var77 = null;
//     java.awt.Rectangle var78 = null;
//     java.awt.geom.Rectangle2D var79 = null;
//     java.awt.geom.AffineTransform var80 = null;
//     java.awt.RenderingHints var81 = null;
//     java.awt.PaintContext var82 = var75.createContext(var77, var78, var79, var80, var81);
//     java.awt.Color var83 = java.awt.Color.getColor("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", var75);
//     var57.setDefaultOutlinePaint((java.awt.Paint)var75);
//     org.jfree.chart.renderer.category.BarRenderer var86 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var87 = var86.isDrawBarOutline();
//     boolean var88 = var86.isDrawBarOutline();
//     java.awt.Paint var89 = var86.getShadowPaint();
//     org.jfree.chart.LegendItem var90 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var89);
//     java.awt.Stroke var91 = var90.getLineStroke();
//     var57.setDefaultOutlineStroke(var91);
//     boolean var93 = var40.equals((java.lang.Object)var91);
//     
//     // Checks the contract:  equals-hashcode on var41 and var58
//     assertTrue("Contract failed: equals-hashcode on var41 and var58", var41.equals(var58) ? var41.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var41
//     assertTrue("Contract failed: equals-hashcode on var58 and var41", var58.equals(var41) ? var58.hashCode() == var41.hashCode() : true);
// 
//   }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    double var17 = var0.getCategoryMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0d);

  }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
//     java.awt.Paint var12 = var0.getRangeGridlinePaint();
//     java.awt.Paint var13 = var0.getDomainCrosshairPaint();
//     org.jfree.chart.axis.CategoryAxis var14 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var17 = null;
//     var15.setSeriesURLGenerator(10, var17);
//     java.awt.Font var19 = var15.getBaseItemLabelFont();
//     var14.setLabelFont(var19);
//     org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
//     var21.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var24 = var21.getDomainAxis();
//     var14.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var21);
//     var14.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var14.setCategoryMargin(1.0d);
//     var14.setTickMarkOutsideLength(100.0f);
//     java.awt.Stroke var33 = var14.getTickMarkStroke();
//     var14.clearCategoryLabelToolTips();
//     java.lang.String var36 = var14.getCategoryLabelToolTip((java.lang.Comparable)(short)0);
//     int var37 = var0.getDomainAxisIndex(var14);
//     org.jfree.chart.axis.AxisSpace var38 = null;
//     var0.setFixedRangeAxisSpace(var38);
//     java.awt.Graphics2D var40 = null;
//     java.awt.geom.Rectangle2D var41 = null;
//     var0.drawOutline(var40, var41);
// 
//   }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ResourceBundle var1 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    java.awt.Paint var13 = var0.getItemFillPaint(1, 0, false);
    boolean var14 = var0.getAutoPopulateSeriesStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesLinesVisible((-1), true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    org.jfree.chart.util.RectangleInsets var4 = new org.jfree.chart.util.RectangleInsets(2.0d, (-16.0d), 0.0d, 8.0d);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    var4.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var16 = var4.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var17 = new org.jfree.chart.entity.ChartEntity(var16);
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var22 = var21.getRed();
    org.jfree.chart.LegendItem var23 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var16, (java.awt.Paint)var21);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var26 = null;
    var24.setSeriesOutlineStroke(100, var26);
    java.awt.Paint var29 = null;
    var24.setSeriesOutlinePaint(0, var29, true);
    var24.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var36 = var24.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var37 = new org.jfree.chart.entity.ChartEntity(var36);
    org.jfree.chart.util.ShapeList var38 = new org.jfree.chart.util.ShapeList();
    int var39 = var38.size();
    org.jfree.chart.renderer.category.BarRenderer var42 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var43 = var42.isDrawBarOutline();
    boolean var44 = var42.isDrawBarOutline();
    java.awt.Paint var45 = var42.getShadowPaint();
    org.jfree.chart.LegendItem var46 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var45);
    java.awt.Color var50 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    var46.setLabelPaint((java.awt.Paint)var50);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var58 = null;
    var56.setSeriesOutlineStroke(100, var58);
    java.awt.Paint var61 = null;
    var56.setSeriesOutlinePaint(0, var61, true);
    var56.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var68 = var56.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var69 = new org.jfree.chart.entity.ChartEntity(var68);
    java.awt.Color var73 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var74 = var73.getRed();
    org.jfree.chart.LegendItem var75 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var68, (java.awt.Paint)var73);
    var46.setShape(var68);
    var38.setShape(2, var68);
    var37.setArea(var68);
    var23.setLine(var68);
    org.jfree.chart.util.GradientPaintTransformer var80 = var23.getFillPaintTransformer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var14 = null;
    java.awt.geom.Rectangle2D var15 = null;
    org.jfree.chart.plot.PlotRenderingInfo var17 = null;
    org.jfree.chart.plot.CategoryCrosshairState var18 = null;
    boolean var19 = var13.render(var14, var15, 100, var17, var18);
    org.jfree.chart.event.MarkerChangeEvent var20 = null;
    var13.markerChanged(var20);
    var13.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var24 = var13.getDrawingSupplier();
    org.jfree.chart.LegendItemCollection var25 = var13.getLegendItems();
    var0.addChangeListener((org.jfree.chart.event.AxisChangeListener)var13);
    org.jfree.chart.plot.PlotRenderingInfo var28 = null;
    java.awt.geom.Point2D var29 = null;
    var13.zoomRangeAxes(1.0d, var28, var29);
    java.awt.Graphics2D var31 = null;
    java.awt.geom.Rectangle2D var32 = null;
    var13.drawBackgroundImage(var31, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var2 = null;
    java.awt.geom.Rectangle2D var3 = null;
    org.jfree.chart.plot.PlotRenderingInfo var5 = null;
    org.jfree.chart.plot.CategoryCrosshairState var6 = null;
    boolean var7 = var1.render(var2, var3, 100, var5, var6);
    org.jfree.chart.event.MarkerChangeEvent var8 = null;
    var1.markerChanged(var8);
    var1.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var12 = var1.getInsets();
    java.awt.Stroke var13 = var1.getRangeZeroBaselineStroke();
    var1.setBackgroundImageAlignment(15);
    org.jfree.chart.util.SortOrder var16 = var1.getColumnRenderingOrder();
    var0.sortByKeys(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var19 = var0.getObject(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }


    org.jfree.chart.util.DefaultShadowGenerator var0 = new org.jfree.chart.util.DefaultShadowGenerator();
    float var1 = var0.getShadowOpacity();
    int var2 = var0.calculateOffsetY();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var4 = null;
    java.awt.geom.Rectangle2D var5 = null;
    org.jfree.chart.plot.PlotRenderingInfo var7 = null;
    org.jfree.chart.plot.CategoryCrosshairState var8 = null;
    boolean var9 = var3.render(var4, var5, 100, var7, var8);
    org.jfree.chart.event.MarkerChangeEvent var10 = null;
    var3.markerChanged(var10);
    var3.setDrawSharedDomainAxis(true);
    int var14 = var3.getBackgroundImageAlignment();
    boolean var15 = var3.canSelectByRegion();
    int var16 = var3.getDatasetCount();
    java.lang.String var17 = var3.getNoDataMessage();
    org.jfree.chart.plot.DatasetRenderingOrder var18 = var3.getDatasetRenderingOrder();
    java.lang.String var19 = var18.toString();
    boolean var20 = var0.equals((java.lang.Object)var18);
    float var21 = var0.getShadowOpacity();
    int var22 = var0.calculateOffsetY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "DatasetRenderingOrder.REVERSE"+ "'", var19.equals("DatasetRenderingOrder.REVERSE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-2));

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.BooleanList var21 = new org.jfree.chart.util.BooleanList();
    var0.setObject((java.lang.Comparable)(short)(-1), (java.lang.Object)var21);
    org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var25 = null;
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.plot.PlotRenderingInfo var28 = null;
    org.jfree.chart.plot.CategoryCrosshairState var29 = null;
    boolean var30 = var24.render(var25, var26, 100, var28, var29);
    boolean var31 = var24.isOutlineVisible();
    var24.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var34 = var24.getDomainGridlinePosition();
    java.awt.Paint var35 = var24.getBackgroundPaint();
    org.jfree.chart.LegendItemCollection var36 = var24.getLegendItems();
    org.jfree.chart.axis.CategoryAxis var38 = var24.getDomainAxis(4);
    var0.setObject((java.lang.Comparable)"ChartEntity: tooltip = ChartEntity: tooltip = null", (java.lang.Object)var24);
    int var41 = var0.getIndex((java.lang.Comparable)(byte)(-1));
    org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
    var42.setRangeCrosshairValue((-1.0d));
    java.awt.Stroke var45 = var42.getDomainGridlineStroke();
    org.jfree.chart.util.RectangleEdge var47 = var42.getDomainAxisEdge(15);
    boolean var48 = var42.canSelectByRegion();
    org.jfree.chart.plot.CategoryPlot var49 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var50 = null;
    java.awt.geom.Rectangle2D var51 = null;
    org.jfree.chart.plot.PlotRenderingInfo var53 = null;
    org.jfree.chart.plot.CategoryCrosshairState var54 = null;
    boolean var55 = var49.render(var50, var51, 100, var53, var54);
    boolean var56 = var49.isOutlineVisible();
    org.jfree.chart.util.SortOrder var57 = var49.getRowRenderingOrder();
    java.lang.String var58 = var57.toString();
    var42.setRowRenderingOrder(var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.sortByKeys(var57);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "SortOrder.ASCENDING"+ "'", var58.equals("SortOrder.ASCENDING"));

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    org.jfree.chart.event.PlotChangeEvent var12 = null;
    var8.notifyListeners(var12);
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var15 = null;
    java.awt.geom.Rectangle2D var16 = null;
    org.jfree.chart.plot.PlotRenderingInfo var18 = null;
    org.jfree.chart.plot.CategoryCrosshairState var19 = null;
    boolean var20 = var14.render(var15, var16, 100, var18, var19);
    org.jfree.chart.event.MarkerChangeEvent var21 = null;
    var14.markerChanged(var21);
    var14.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var25 = var14.getInsets();
    double var27 = var25.calculateLeftInset(8.0d);
    var8.setAxisOffset(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.CategoryAxis var30 = var8.getDomainAxisForDataset((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 8.0d);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var22 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var23 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var22);
    var0.setBasePaint((java.awt.Paint)var22, false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var26 = null;
    var0.setBaseItemLabelGenerator(var26);
    org.jfree.chart.renderer.RenderAttributes var29 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var34 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var29.setSeriesOutlinePaint(0, (java.awt.Paint)var34);
    java.awt.image.ColorModel var36 = null;
    java.awt.Rectangle var37 = null;
    java.awt.geom.Rectangle2D var38 = null;
    java.awt.geom.AffineTransform var39 = null;
    java.awt.RenderingHints var40 = null;
    java.awt.PaintContext var41 = var34.createContext(var36, var37, var38, var39, var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setLegendTextPaint((-1), (java.awt.Paint)var34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    java.awt.Paint var13 = var0.getItemFillPaint(1, 0, false);
    org.jfree.chart.labels.ItemLabelPosition var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBaseNegativeItemLabelPosition(var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test379() {}
//   public void test379() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var3 = var0.getItemShape(0, 0);
//     java.awt.Paint var4 = var0.getDefaultLabelPaint();
//     java.lang.Boolean var5 = var0.getDefaultLabelVisible();
//     java.awt.Stroke var8 = var0.getItemStroke(0, 0);
//     java.awt.Stroke var9 = var0.getDefaultStroke();
//     java.awt.Stroke var11 = var0.getSeriesStroke(0);
//     java.lang.Boolean var14 = var0.getCreateEntity(5, 10);
// 
//   }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.PlotRenderingInfo var8 = null;
    org.jfree.chart.plot.CategoryCrosshairState var9 = null;
    boolean var10 = var4.render(var5, var6, 100, var8, var9);
    boolean var11 = var4.isOutlineVisible();
    var4.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var14 = var4.getDomainGridlinePosition();
    java.awt.Paint var15 = var4.getBackgroundPaint();
    var0.addChangeListener((org.jfree.chart.event.RendererChangeListener)var4);
    org.jfree.chart.labels.ItemLabelPosition var17 = new org.jfree.chart.labels.ItemLabelPosition();
    var0.setPositiveItemLabelPositionFallback(var17);
    org.jfree.data.category.DefaultCategoryDataset var19 = new org.jfree.data.category.DefaultCategoryDataset();
    var19.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    java.util.List var24 = var19.getColumnKeys();
    var19.removeColumn(0);
    org.jfree.data.Range var28 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var19, true);
    org.jfree.chart.axis.CategoryAxis var29 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var32 = null;
    var30.setSeriesURLGenerator(10, var32);
    java.awt.Font var34 = var30.getBaseItemLabelFont();
    var29.setLabelFont(var34);
    java.awt.Paint var36 = var29.getTickMarkPaint();
    java.awt.Font var37 = var29.getTickLabelFont();
    boolean var38 = var19.equals((java.lang.Object)var37);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var41 = null;
    var39.setSeriesURLGenerator(10, var41);
    boolean var46 = var39.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
    var39.setPlot(var47);
    org.jfree.chart.axis.ValueAxis var49 = null;
    org.jfree.data.Range var50 = var47.getDataRange(var49);
    java.awt.Paint var51 = var47.getRangeZeroBaselinePaint();
    var19.addChangeListener((org.jfree.data.event.DatasetChangeListener)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.removeColumn((java.lang.Comparable)3.0d);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    java.lang.String var13 = var0.getLabelURL();
    java.lang.String var15 = var0.getCategoryLabelToolTip((java.lang.Comparable)4.0d);
    var0.setMaximumCategoryLabelLines((-1));
    java.awt.Paint var18 = var0.getTickLabelPaint();
    java.awt.Color var22 = java.awt.Color.getHSBColor(10.0f, 10.0f, 10.0f);
    var0.setTickLabelPaint((java.awt.Paint)var22);
    float[] var24 = new float[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var25 = var22.getRGBComponents(var24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }


    org.jfree.chart.renderer.category.BarRenderer var1 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var2 = var1.isDrawBarOutline();
    boolean var3 = var1.isDrawBarOutline();
    java.awt.Paint var4 = var1.getShadowPaint();
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var4);
    java.awt.Stroke var6 = var5.getLineStroke();
    java.lang.String var7 = var5.getToolTipText();
    java.lang.String var8 = var5.getToolTipText();
    java.awt.Shape var9 = var5.getLine();
    var5.setDatasetIndex(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setWeight(10);
    org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var4 = null;
    org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    java.awt.Shape var15 = var6.lookupSeriesShape(10);
    java.awt.Paint var17 = null;
    var6.setSeriesFillPaint(0, var17, false);
    boolean var20 = var6.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var23 = var6.getBaseItemLabelFont();
    boolean var24 = var3.equals((java.lang.Object)var6);
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
    org.jfree.chart.util.Layer var26 = null;
    java.util.Collection var27 = var0.getDomainMarkers(var26);
    org.jfree.chart.event.PlotChangeListener var28 = null;
    var0.addChangeListener(var28);
    java.awt.Paint var30 = var0.getOutlinePaint();
    org.jfree.chart.LegendItemCollection var31 = var0.getFixedLegendItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = null;
    var0.setSeriesNegativeItemLabelPosition(0, var5, true);
    java.awt.Stroke var9 = var0.lookupSeriesStroke(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var23 = var11.lookupSeriesShape((-1));
    var0.setSeriesShape(0, var23);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var25 = null;
    var0.setLegendItemToolTipGenerator(var25);
    org.jfree.chart.labels.CategoryToolTipGenerator var28 = null;
    var0.setSeriesToolTipGenerator(1, var28, true);
    var0.setSeriesShapesVisible(0, (java.lang.Boolean)true);
    java.awt.Paint var35 = var0.getSeriesFillPaint(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    var0.setNoDataMessage("");
    java.lang.Comparable var5 = var0.getDomainCrosshairColumnKey();
    org.jfree.chart.axis.AxisLocation var7 = var0.getRangeAxisLocation((-1));
    java.lang.String var8 = var0.getPlotType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Category Plot"+ "'", var8.equals("Category Plot"));

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    java.lang.Boolean var15 = null;
    var0.setSeriesCreateEntities(2, var15, false);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var18 = var0.getLegendItemLabelGenerator();
    java.awt.Font var19 = var0.getBaseLegendTextFont();
    var0.setSeriesItemLabelsVisible(255, (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = var0.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getBaseNegativeItemLabelPosition();
    var0.setBaseCreateEntities(true, true);
    java.lang.Boolean var21 = var0.getSeriesItemLabelsVisible(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesShapesFilled((-1), (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    double var1 = var0.getBase();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var3 = null;
    java.awt.geom.Rectangle2D var4 = null;
    org.jfree.chart.plot.PlotRenderingInfo var6 = null;
    org.jfree.chart.plot.CategoryCrosshairState var7 = null;
    boolean var8 = var2.render(var3, var4, 100, var6, var7);
    org.jfree.chart.event.MarkerChangeEvent var9 = null;
    var2.markerChanged(var9);
    var2.setDrawSharedDomainAxis(true);
    int var13 = var2.getBackgroundImageAlignment();
    boolean var14 = var2.canSelectByRegion();
    org.jfree.data.category.CategoryDataset var16 = var2.getDataset(15);
    org.jfree.chart.renderer.RenderAttributes var18 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var23 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var18.setSeriesOutlinePaint(0, (java.awt.Paint)var23);
    java.awt.image.ColorModel var25 = null;
    java.awt.Rectangle var26 = null;
    java.awt.geom.Rectangle2D var27 = null;
    java.awt.geom.AffineTransform var28 = null;
    java.awt.RenderingHints var29 = null;
    java.awt.PaintContext var30 = var23.createContext(var25, var26, var27, var28, var29);
    java.awt.Color var31 = java.awt.Color.getColor("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", var23);
    var2.setDomainGridlinePaint((java.awt.Paint)var23);
    boolean var33 = var0.equals((java.lang.Object)var23);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var34 = var0.getLegendItemURLGenerator();
    var0.setBase((-14.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    double var13 = var11.calculateLeftInset(8.0d);
    double var15 = var11.calculateBottomOutset((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 4.0d);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.labels.ItemLabelPosition var4 = var0.getPositiveItemLabelPosition(0, 5, true);
    org.jfree.chart.text.TextAnchor var5 = var4.getTextAnchor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var14 = null;
    var12.setSeriesOutlineStroke(100, var14);
    java.awt.Paint var17 = null;
    var12.setSeriesOutlinePaint(0, var17, true);
    java.awt.Shape var21 = var12.lookupSeriesShape(10);
    java.awt.Paint var23 = null;
    var12.setSeriesFillPaint(0, var23, false);
    boolean var26 = var12.getBaseShapesVisible();
    java.awt.Paint var27 = var12.getBaseOutlinePaint();
    int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
    int var29 = var0.getWeight();
    org.jfree.chart.axis.AxisSpace var30 = null;
    var0.setFixedRangeAxisSpace(var30, false);
    org.jfree.chart.event.PlotChangeListener var33 = null;
    var0.addChangeListener(var33);
    org.jfree.chart.axis.AxisLocation var36 = var0.getRangeAxisLocation(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }


    org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Shape var3 = var0.getItemShape(0, 0);
    java.awt.Paint var4 = var0.getDefaultLabelPaint();
    java.lang.Boolean var5 = var0.getDefaultLabelVisible();
    java.awt.Stroke var8 = var0.getItemStroke(0, 0);
    java.awt.Paint var11 = var0.getItemFillPaint(100, 0);
    boolean var12 = var0.getAllowNull();
    java.awt.Shape var13 = var0.getDefaultShape();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var16 = null;
    var14.setSeriesURLGenerator(10, var16);
    org.jfree.data.category.CategoryDataset var18 = null;
    org.jfree.chart.axis.CategoryAxis var19 = null;
    org.jfree.chart.axis.ValueAxis var20 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var23 = null;
    var21.setSeriesOutlineStroke(100, var23);
    java.awt.Paint var26 = null;
    var21.setSeriesOutlinePaint(0, var26, true);
    java.awt.Shape var30 = var21.lookupSeriesShape(10);
    java.awt.Paint var32 = null;
    var21.setSeriesFillPaint(0, var32, false);
    boolean var35 = var21.getBaseShapesVisible();
    java.awt.Paint var36 = var21.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var37 = var21.getBaseNegativeItemLabelPosition();
    var21.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot(var18, var19, var20, (org.jfree.chart.renderer.category.CategoryItemRenderer)var21);
    boolean var41 = var14.hasListener((java.util.EventListener)var40);
    int var42 = var40.getWeight();
    boolean var43 = var40.isOutlineVisible();
    java.awt.Stroke var44 = var40.getOutlineStroke();
    var0.setDefaultOutlineStroke(var44);
    java.awt.Paint var46 = var0.getDefaultPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var13 = new org.jfree.chart.entity.ChartEntity(var12);
    java.lang.String var14 = var13.toString();
    var13.setToolTipText("TextAnchor.CENTER");
    java.awt.Shape var17 = var13.getArea();
    org.jfree.chart.entity.ChartEntity var18 = new org.jfree.chart.entity.ChartEntity(var17);
    java.lang.Object var19 = null;
    boolean var20 = var18.equals(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ChartEntity: tooltip = null"+ "'", var14.equals("ChartEntity: tooltip = null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    java.awt.geom.Rectangle2D var16 = null;
    org.jfree.chart.util.RectangleEdge var17 = null;
    double var18 = var0.getCategorySeriesMiddle(4, (-1), 255, 5, 0.0d, var16, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }


    org.jfree.chart.LegendItem var1 = new org.jfree.chart.LegendItem("NOID");
    java.lang.String var2 = var1.getToolTipText();
    var1.setDatasetIndex(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.setMaximumCategoryLabelLines(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var15 = null;
    var13.setSeriesOutlineStroke(100, var15);
    java.awt.Paint var18 = null;
    var13.setSeriesOutlinePaint(0, var18, true);
    java.awt.Shape var22 = var13.lookupSeriesShape(10);
    java.awt.Paint var24 = null;
    var13.setSeriesFillPaint(0, var24, false);
    boolean var27 = var13.getBaseShapesVisible();
    java.awt.Paint var28 = null;
    var13.setBasePaint(var28);
    var13.setAutoPopulateSeriesOutlineStroke(false);
    boolean var35 = var13.getItemCreateEntity(1, 0, false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var38 = null;
    var36.setSeriesURLGenerator(10, var38);
    org.jfree.chart.labels.ItemLabelPosition var41 = var36.getSeriesPositiveItemLabelPosition(1);
    var36.setItemLabelAnchorOffset(1.0d);
    java.awt.Color var48 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var49 = var48.getRed();
    java.awt.Color var50 = java.awt.Color.getColor("", var48);
    var36.setBasePaint((java.awt.Paint)var48);
    var13.setBaseLegendTextPaint((java.awt.Paint)var48);
    boolean var53 = var0.equals((java.lang.Object)var13);
    var0.setUpperMargin(0.0d);
    float var56 = var0.getMaximumCategoryLabelWidthRatio();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.0f);

  }

  public void test397() {}
//   public void test397() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
//     java.lang.Boolean var7 = var0.getDefaultCreateEntity();
//     org.jfree.chart.renderer.category.BarRenderer var9 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var10 = var9.isDrawBarOutline();
//     boolean var11 = var9.isDrawBarOutline();
//     java.awt.Paint var12 = var9.getShadowPaint();
//     org.jfree.chart.LegendItem var13 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var12);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var16 = null;
//     var14.setSeriesOutlineStroke(100, var16);
//     java.awt.Paint var19 = null;
//     var14.setSeriesOutlinePaint(0, var19, true);
//     java.awt.Shape var23 = var14.lookupSeriesShape(10);
//     java.awt.Paint var25 = null;
//     var14.setSeriesFillPaint(0, var25, false);
//     boolean var28 = var14.getBaseShapesVisible();
//     java.awt.Paint var29 = null;
//     var14.setBasePaint(var29);
//     var14.setAutoPopulateSeriesOutlineStroke(false);
//     org.jfree.chart.urls.CategoryURLGenerator var34 = null;
//     var14.setSeriesURLGenerator(2, var34, true);
//     org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var38 = null;
//     java.awt.geom.Rectangle2D var39 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var41 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var42 = null;
//     boolean var43 = var37.render(var38, var39, 100, var41, var42);
//     org.jfree.chart.event.MarkerChangeEvent var44 = null;
//     var37.markerChanged(var44);
//     var37.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var48 = var37.getDrawingSupplier();
//     java.awt.Paint var49 = var37.getRangeGridlinePaint();
//     var14.setBaseItemLabelPaint(var49, false);
//     var13.setOutlinePaint(var49);
//     var0.setDefaultFillPaint(var49);
//     java.awt.Color var57 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     java.lang.String var58 = var57.toString();
//     var0.setDefaultOutlinePaint((java.awt.Paint)var57);
//     java.awt.Stroke var62 = var0.getItemOutlineStroke(0, (-2));
// 
//   }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getRowCount();
    var0.validateObject();
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    java.awt.Font var8 = var4.getBaseItemLabelFont();
    var3.setLabelFont(var8);
    java.awt.Paint var10 = var3.getTickMarkPaint();
    float var11 = var3.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var12 = null;
    org.jfree.chart.renderer.category.BarRenderer var13 = new org.jfree.chart.renderer.category.BarRenderer();
    var13.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var3, var12, (org.jfree.chart.renderer.category.CategoryItemRenderer)var13);
    boolean var17 = var3.isTickMarksVisible();
    org.jfree.chart.util.RectangleInsets var18 = var3.getLabelInsets();
    int var19 = var3.getMaximumCategoryLabelLines();
    java.awt.Font var20 = var3.getLabelFont();
    double var21 = var3.getCategoryMargin();
    boolean var22 = var3.isMinorTickMarksVisible();
    org.jfree.chart.axis.CategoryAxis var23 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var26 = null;
    var24.setSeriesURLGenerator(10, var26);
    java.awt.Font var28 = var24.getBaseItemLabelFont();
    var23.setLabelFont(var28);
    java.lang.Object var30 = var23.clone();
    var23.setVisible(true);
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var35 = var33.getRangeAxisLocation(10);
    java.awt.Stroke var36 = var33.getRangeCrosshairStroke();
    org.jfree.chart.util.RectangleInsets var37 = var33.getInsets();
    var23.setTickLabelInsets(var37);
    double var40 = var37.calculateRightOutset((-6.0d));
    var3.setLabelInsets(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 8.0d);

  }

  public void test399() {}
//   public void test399() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     var0.setBase((-1.0d));
//     boolean var3 = var0.getAutoPopulateSeriesOutlinePaint();
//     org.jfree.chart.renderer.category.BarRenderer var5 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var6 = var5.getShadowsVisible();
//     java.awt.Paint var7 = var5.getBaseFillPaint();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.setSeriesItemLabelPaint((-254), var7);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
// 
//   }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    java.lang.Object var5 = var0.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow((java.lang.Comparable)(short)0);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = var0.getBaseOutlinePaint();
    var0.setUseSeriesOffset(false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var21 = null;
    var19.setSeriesOutlineStroke(100, var21);
    java.awt.Paint var24 = null;
    var19.setSeriesOutlinePaint(0, var24, true);
    var19.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var31 = var19.lookupSeriesShape((-1));
    java.awt.Paint var33 = null;
    var19.setLegendTextPaint(0, var33);
    boolean var35 = var19.getAutoPopulateSeriesOutlineStroke();
    var19.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var41 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var42 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var41);
    var19.setBasePaint((java.awt.Paint)var41, false);
    java.awt.image.ColorModel var45 = null;
    java.awt.Rectangle var46 = null;
    java.awt.geom.Rectangle2D var47 = null;
    java.awt.geom.AffineTransform var48 = null;
    java.awt.RenderingHints var49 = null;
    java.awt.PaintContext var50 = var41.createContext(var45, var46, var47, var48, var49);
    java.awt.Color var51 = var41.darker();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesItemLabelPaint((-254), (java.awt.Paint)var41, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    var0.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    int var5 = var0.getRowCount();
    org.jfree.data.category.CategoryDatasetSelectionState var6 = var0.getSelectionState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    var8.setRangeCrosshairLockedOnData(false);
    boolean var18 = var8.isRangeMinorGridlinesVisible();
    org.jfree.chart.axis.CategoryAxis var19 = new org.jfree.chart.axis.CategoryAxis();
    var19.setLabel("ChartEntity: tooltip = null");
    org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var24 = null;
    var22.setSeriesURLGenerator(10, var24);
    java.awt.Font var26 = var22.getBaseItemLabelFont();
    var19.setTickLabelFont(var26);
    var8.setNoDataMessageFont(var26);
    org.jfree.chart.axis.ValueAxis var30 = null;
    var8.setRangeAxis(2, var30, false);
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var34 = null;
    java.awt.geom.Rectangle2D var35 = null;
    org.jfree.chart.plot.PlotRenderingInfo var37 = null;
    org.jfree.chart.plot.CategoryCrosshairState var38 = null;
    boolean var39 = var33.render(var34, var35, 100, var37, var38);
    org.jfree.chart.util.Layer var40 = null;
    java.util.Collection var41 = var33.getDomainMarkers(var40);
    java.awt.Paint var42 = var33.getOutlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var44 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var46 = null;
    var44.setSeriesURLGenerator(10, var46);
    org.jfree.chart.labels.ItemLabelPosition var49 = null;
    var44.setSeriesNegativeItemLabelPosition(0, var49, true);
    org.jfree.chart.labels.ItemLabelPosition var55 = var44.getPositiveItemLabelPosition(0, 1, false);
    var33.setRenderer(0, (org.jfree.chart.renderer.category.CategoryItemRenderer)var44, true);
    var8.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var44);
    java.awt.Color var63 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    int var64 = var63.getRed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var44.setSeriesOutlinePaint((-16777216), (java.awt.Paint)var63, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var12 = null;
    var10.setSeriesOutlineStroke(100, var12);
    java.awt.Paint var15 = null;
    var10.setSeriesOutlinePaint(0, var15, true);
    java.awt.Shape var19 = var10.lookupSeriesShape(10);
    java.awt.Paint var21 = null;
    var10.setSeriesFillPaint(0, var21, false);
    boolean var24 = var10.getBaseShapesVisible();
    java.awt.Paint var25 = var10.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var26 = var10.getBaseNegativeItemLabelPosition();
    var10.setBaseSeriesVisible(false);
    double var29 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var32 = var31.isDrawBarOutline();
    boolean var33 = var31.isDrawBarOutline();
    java.awt.Paint var34 = var31.getShadowPaint();
    org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
    var10.setBaseLegendTextPaint(var34);
    var8.setRangeMinorGridlinePaint(var34);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var39 = null;
    java.awt.geom.Rectangle2D var40 = null;
    org.jfree.chart.plot.PlotRenderingInfo var42 = null;
    org.jfree.chart.plot.CategoryCrosshairState var43 = null;
    boolean var44 = var38.render(var39, var40, 100, var42, var43);
    org.jfree.chart.event.MarkerChangeEvent var45 = null;
    var38.markerChanged(var45);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var49 = var38.getInsets();
    java.awt.Stroke var50 = var38.getRangeZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var52 = var38.getDomainAxisLocation(100);
    boolean var53 = var8.equals((java.lang.Object)var38);
    org.jfree.chart.plot.PlotRenderingInfo var55 = null;
    java.awt.geom.Point2D var56 = null;
    var8.zoomRangeAxes((-1.8d), var55, var56, true);
    org.jfree.chart.plot.CategoryPlot var60 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var61 = null;
    java.awt.geom.Rectangle2D var62 = null;
    org.jfree.chart.plot.PlotRenderingInfo var64 = null;
    org.jfree.chart.plot.CategoryCrosshairState var65 = null;
    boolean var66 = var60.render(var61, var62, 100, var64, var65);
    org.jfree.chart.util.Layer var67 = null;
    java.util.Collection var68 = var60.getDomainMarkers(var67);
    java.awt.Paint var69 = var60.getOutlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var71 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var73 = null;
    var71.setSeriesURLGenerator(10, var73);
    org.jfree.chart.labels.ItemLabelPosition var76 = null;
    var71.setSeriesNegativeItemLabelPosition(0, var76, true);
    org.jfree.chart.labels.ItemLabelPosition var82 = var71.getPositiveItemLabelPosition(0, 1, false);
    var60.setRenderer(0, (org.jfree.chart.renderer.category.CategoryItemRenderer)var71, true);
    org.jfree.chart.plot.CategoryPlot var86 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.AxisLocation var88 = var86.getRangeAxisLocation(10);
    var60.setDomainAxisLocation(0, var88);
    var8.setRangeAxisLocation(100, var88);
    org.jfree.chart.util.SortOrder var91 = var8.getRowRenderingOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    java.lang.String var13 = var0.getLabelURL();
    java.lang.String var15 = var0.getCategoryLabelToolTip((java.lang.Comparable)4.0d);
    var0.setMaximumCategoryLabelLines((-1));
    java.awt.Font var18 = var0.getLabelFont();
    org.jfree.chart.util.RectangleInsets var23 = new org.jfree.chart.util.RectangleInsets(0.0d, 0.0d, 0.0d, 0.0d);
    var0.setLabelInsets(var23);
    java.lang.String var25 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "RectangleInsets[t=0.0,l=0.0,b=0.0,r=0.0]"+ "'", var25.equals("RectangleInsets[t=0.0,l=0.0,b=0.0,r=0.0]"));

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.util.BooleanList var21 = new org.jfree.chart.util.BooleanList();
    var0.setObject((java.lang.Comparable)(short)(-1), (java.lang.Object)var21);
    org.jfree.chart.plot.CategoryPlot var24 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var25 = null;
    java.awt.geom.Rectangle2D var26 = null;
    org.jfree.chart.plot.PlotRenderingInfo var28 = null;
    org.jfree.chart.plot.CategoryCrosshairState var29 = null;
    boolean var30 = var24.render(var25, var26, 100, var28, var29);
    boolean var31 = var24.isOutlineVisible();
    var24.setDomainGridlinesVisible(true);
    org.jfree.chart.axis.CategoryAnchor var34 = var24.getDomainGridlinePosition();
    java.awt.Paint var35 = var24.getBackgroundPaint();
    org.jfree.chart.LegendItemCollection var36 = var24.getLegendItems();
    org.jfree.chart.axis.CategoryAxis var38 = var24.getDomainAxis(4);
    var0.setObject((java.lang.Comparable)"ChartEntity: tooltip = ChartEntity: tooltip = null", (java.lang.Object)var24);
    int var41 = var0.getIndex((java.lang.Comparable)(byte)(-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var43 = var0.getObject((java.lang.Comparable)"NOID");
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    var8.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var12 = var8.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var13 = null;
    org.jfree.chart.axis.ValueAxis[] var14 = new org.jfree.chart.axis.ValueAxis[] { var13};
    var8.setRangeAxes(var14);
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var17 = null;
    java.awt.geom.Rectangle2D var18 = null;
    org.jfree.chart.plot.PlotRenderingInfo var20 = null;
    org.jfree.chart.plot.CategoryCrosshairState var21 = null;
    boolean var22 = var16.render(var17, var18, 100, var20, var21);
    org.jfree.chart.event.MarkerChangeEvent var23 = null;
    var16.markerChanged(var23);
    var16.setDrawSharedDomainAxis(true);
    int var27 = var16.getBackgroundImageAlignment();
    boolean var28 = var16.canSelectByRegion();
    int var29 = var16.getDatasetCount();
    java.lang.String var30 = var16.getNoDataMessage();
    org.jfree.chart.plot.DatasetRenderingOrder var31 = var16.getDatasetRenderingOrder();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var34 = null;
    var32.setSeriesOutlineStroke(100, var34);
    java.awt.Paint var37 = null;
    var32.setSeriesOutlinePaint(0, var37, true);
    java.awt.Shape var41 = var32.lookupSeriesShape(10);
    java.awt.Paint var43 = null;
    var32.setSeriesFillPaint(0, var43, false);
    boolean var46 = var32.getBaseShapesVisible();
    java.awt.Paint var47 = var32.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var48 = var32.getBaseNegativeItemLabelPosition();
    var32.setBaseSeriesVisible(false);
    boolean var51 = var31.equals((java.lang.Object)var32);
    var8.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var32, true);
    org.jfree.data.category.DefaultCategoryDataset var54 = new org.jfree.data.category.DefaultCategoryDataset();
    var54.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    java.util.List var59 = var54.getColumnKeys();
    var54.removeColumn(0);
    org.jfree.chart.renderer.category.CategoryItemRenderer var62 = var8.getRendererForDataset((org.jfree.data.category.CategoryDataset)var54);
    float var63 = var8.getForegroundAlpha();
    org.jfree.chart.axis.CategoryAxis var65 = var8.getDomainAxisForDataset(1);
    var8.mapDatasetToRangeAxis(1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    var0.setUseOutlinePaint(false);
    java.lang.Boolean var7 = var0.getSeriesLinesVisible(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesShapesVisible((-2), (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setAutoPopulateSeriesStroke(true);
    java.lang.Object var19 = var0.clone();
    var0.setSeriesItemLabelsVisible(4, (java.lang.Boolean)true);
    var0.setDrawOutlines(true);
    java.awt.Paint var28 = var0.getItemPaint(4, 0, true);
    org.jfree.chart.labels.CategoryItemLabelGenerator var29 = var0.getBaseItemLabelGenerator();
    var0.setBaseItemLabelsVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.plot.Plot var7 = var0.getParent();
//     org.jfree.data.general.DatasetGroup var8 = var0.getDatasetGroup();
//     java.awt.Paint var9 = var0.getDomainGridlinePaint();
//     var0.setNotify(false);
//     java.awt.Graphics2D var12 = null;
//     java.awt.geom.Rectangle2D var13 = null;
//     var0.drawBackground(var12, var13);
// 
//   }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var14 = null;
    java.awt.geom.Rectangle2D var15 = null;
    org.jfree.chart.plot.PlotRenderingInfo var17 = null;
    org.jfree.chart.plot.CategoryCrosshairState var18 = null;
    boolean var19 = var13.render(var14, var15, 100, var17, var18);
    org.jfree.chart.event.MarkerChangeEvent var20 = null;
    var13.markerChanged(var20);
    var13.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var24 = var13.getDrawingSupplier();
    org.jfree.chart.LegendItemCollection var25 = var13.getLegendItems();
    var0.addChangeListener((org.jfree.chart.event.AxisChangeListener)var13);
    org.jfree.chart.plot.PlotRenderingInfo var28 = null;
    java.awt.geom.Point2D var29 = null;
    var13.zoomRangeAxes(1.0d, var28, var29);
    org.jfree.chart.plot.Marker var32 = null;
    org.jfree.chart.util.Layer var33 = null;
    boolean var35 = var13.removeDomainMarker(100, var32, var33, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    var4.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var16 = var4.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var17 = new org.jfree.chart.entity.ChartEntity(var16);
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var22 = var21.getRed();
    org.jfree.chart.LegendItem var23 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var16, (java.awt.Paint)var21);
    java.awt.Color var27 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var23.setFillPaint((java.awt.Paint)var27);
    java.awt.Paint var29 = var23.getLinePaint();
    int var30 = var23.getSeriesIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }


    org.jfree.chart.util.DefaultShadowGenerator var0 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var1 = var0.calculateOffsetX();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var4 = null;
    var2.setSeriesOutlineStroke(100, var4);
    var2.removeAnnotations();
    org.jfree.chart.labels.CategoryToolTipGenerator var7 = var2.getBaseToolTipGenerator();
    java.awt.Paint var8 = var2.getBaseItemLabelPaint();
    boolean var9 = var0.equals((java.lang.Object)var8);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    org.jfree.chart.plot.CategoryCrosshairState var15 = null;
    boolean var16 = var10.render(var11, var12, 100, var14, var15);
    org.jfree.chart.event.MarkerChangeEvent var17 = null;
    var10.markerChanged(var17);
    var10.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var21 = var10.getInsets();
    boolean var22 = var0.equals((java.lang.Object)var10);
    int var23 = var10.getDatasetCount();
    var10.setDomainCrosshairVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.axis.AxisSpace var23 = null;
    var22.setFixedRangeAxisSpace(var23);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var28 = null;
    var26.setSeriesOutlineStroke(100, var28);
    java.awt.Paint var31 = null;
    var26.setSeriesOutlinePaint(0, var31, true);
    var26.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var38 = var26.lookupSeriesShape((-1));
    java.awt.Paint var40 = null;
    var26.setLegendTextPaint(0, var40);
    boolean var42 = var26.getAutoPopulateSeriesOutlineStroke();
    var26.setDataBoundsIncludesVisibleSeriesOnly(false);
    var22.setRenderer(1, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
    boolean var46 = var22.getDrawSharedDomainAxis();
    org.jfree.chart.plot.PlotRenderingInfo var48 = null;
    java.awt.geom.Point2D var49 = null;
    var22.zoomDomainAxes(0.0d, var48, var49, false);
    java.awt.Graphics2D var52 = null;
    java.awt.geom.Rectangle2D var53 = null;
    org.jfree.chart.plot.PlotRenderingInfo var55 = null;
    org.jfree.chart.plot.CategoryCrosshairState var56 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var57 = var22.render(var52, var53, (-254), var55, var56);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    java.awt.Paint var15 = null;
    var0.setBasePaint(var15);
    var0.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var22 = null;
    var20.setSeriesOutlineStroke(100, var22);
    java.awt.Paint var25 = null;
    var20.setSeriesOutlinePaint(0, var25, true);
    java.awt.Shape var29 = var20.lookupSeriesShape(10);
    java.awt.Paint var31 = null;
    var20.setSeriesFillPaint(0, var31, false);
    boolean var34 = var20.getBaseShapesVisible();
    java.awt.Paint var35 = var20.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var36 = var20.getBaseNegativeItemLabelPosition();
    var0.setSeriesPositiveItemLabelPosition(0, var36, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesVisible((-16777216), (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var4 = null;
    var2.setSeriesURLGenerator(10, var4);
    java.awt.Font var6 = var2.getBaseItemLabelFont();
    var1.setLabelFont(var6);
    java.awt.Paint var8 = var1.getTickMarkPaint();
    float var9 = var1.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var10 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var13 = null;
    var11.setSeriesURLGenerator(10, var13);
    java.awt.Font var15 = var11.getBaseItemLabelFont();
    java.lang.Boolean var17 = var11.getSeriesVisibleInLegend(10);
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var10, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var21 = null;
    var19.setSeriesURLGenerator(10, var21);
    boolean var26 = var19.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
    var19.setPlot(var27);
    var27.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    java.awt.Paint var31 = var27.getRangeCrosshairPaint();
    org.jfree.chart.axis.ValueAxis var32 = null;
    org.jfree.chart.axis.ValueAxis[] var33 = new org.jfree.chart.axis.ValueAxis[] { var32};
    var27.setRangeAxes(var33);
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    org.jfree.chart.plot.PlotRenderingInfo var39 = null;
    org.jfree.chart.plot.CategoryCrosshairState var40 = null;
    boolean var41 = var35.render(var36, var37, 100, var39, var40);
    org.jfree.chart.event.MarkerChangeEvent var42 = null;
    var35.markerChanged(var42);
    var35.setDrawSharedDomainAxis(true);
    int var46 = var35.getBackgroundImageAlignment();
    boolean var47 = var35.canSelectByRegion();
    int var48 = var35.getDatasetCount();
    java.lang.String var49 = var35.getNoDataMessage();
    org.jfree.chart.plot.DatasetRenderingOrder var50 = var35.getDatasetRenderingOrder();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var51 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var53 = null;
    var51.setSeriesOutlineStroke(100, var53);
    java.awt.Paint var56 = null;
    var51.setSeriesOutlinePaint(0, var56, true);
    java.awt.Shape var60 = var51.lookupSeriesShape(10);
    java.awt.Paint var62 = null;
    var51.setSeriesFillPaint(0, var62, false);
    boolean var65 = var51.getBaseShapesVisible();
    java.awt.Paint var66 = var51.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var67 = var51.getBaseNegativeItemLabelPosition();
    var51.setBaseSeriesVisible(false);
    boolean var70 = var50.equals((java.lang.Object)var51);
    var27.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var51, true);
    org.jfree.data.category.DefaultCategoryDataset var73 = new org.jfree.data.category.DefaultCategoryDataset();
    var73.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    java.util.List var78 = var73.getColumnKeys();
    var73.removeColumn(0);
    org.jfree.chart.renderer.category.CategoryItemRenderer var81 = var27.getRendererForDataset((org.jfree.data.category.CategoryDataset)var73);
    int var82 = var18.indexOf((org.jfree.data.category.CategoryDataset)var73);
    org.jfree.data.category.DefaultCategoryDataset var83 = new org.jfree.data.category.DefaultCategoryDataset();
    var83.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var88 = var83.getRowKeys();
    int var90 = var83.getColumnIndex((java.lang.Comparable)100L);
    var73.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState)var83);
    org.jfree.data.general.DatasetGroup var92 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var83.setGroup(var92);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    var0.clear();
    java.lang.Comparable var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = var0.getRowIndex(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    var0.setFixedDimension(2.0d);
    org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
    var19.setRangeCrosshairValue((-1.0d));
    var0.setPlot((org.jfree.chart.plot.Plot)var19);
    org.jfree.data.category.DefaultCategoryDataset var23 = new org.jfree.data.category.DefaultCategoryDataset();
    var23.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var28 = var23.getRowKeys();
    int var30 = var23.getColumnIndex((java.lang.Comparable)100L);
    java.lang.Object var31 = var23.clone();
    int var32 = var23.getColumnCount();
    var19.setDataset((org.jfree.data.category.CategoryDataset)var23);
    org.jfree.chart.annotations.CategoryAnnotation var34 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var36 = var19.removeAnnotation(var34, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var14 = null;
    java.awt.geom.Rectangle2D var15 = null;
    org.jfree.chart.plot.PlotRenderingInfo var17 = null;
    org.jfree.chart.plot.CategoryCrosshairState var18 = null;
    boolean var19 = var13.render(var14, var15, 100, var17, var18);
    org.jfree.chart.event.MarkerChangeEvent var20 = null;
    var13.markerChanged(var20);
    var13.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var24 = var13.getDrawingSupplier();
    org.jfree.chart.LegendItemCollection var25 = var13.getLegendItems();
    var0.addChangeListener((org.jfree.chart.event.AxisChangeListener)var13);
    double var27 = var0.getLabelAngle();
    double var28 = var0.getLowerMargin();
    boolean var29 = var0.isVisible();
    var0.setAxisLineVisible(false);
    var0.setCategoryLabelPositionOffset(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.plot.PlotRenderingInfo var27 = null;
    org.jfree.chart.plot.CategoryCrosshairState var28 = null;
    boolean var29 = var23.render(var24, var25, 100, var27, var28);
    org.jfree.chart.event.MarkerChangeEvent var30 = null;
    var23.markerChanged(var30);
    org.jfree.chart.plot.Marker var33 = null;
    org.jfree.chart.util.Layer var34 = null;
    boolean var36 = var23.removeDomainMarker(10, var33, var34, true);
    org.jfree.chart.axis.AxisLocation var38 = var23.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var39 = org.jfree.chart.axis.AxisLocation.getOpposite(var38);
    var22.setDomainAxisLocation(var39, false);
    org.jfree.chart.plot.PlotRenderingInfo var44 = null;
    java.awt.geom.Point2D var45 = null;
    var22.zoomRangeAxes((-6.0d), 4.0d, var44, var45);
    org.jfree.chart.axis.AxisLocation var47 = var22.getDomainAxisLocation();
    org.jfree.chart.axis.CategoryAxis var49 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var52 = null;
    var50.setSeriesURLGenerator(10, var52);
    java.awt.Font var54 = var50.getBaseItemLabelFont();
    var49.setLabelFont(var54);
    java.awt.Paint var56 = var49.getTickMarkPaint();
    org.jfree.chart.plot.CategoryPlot var57 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var58 = null;
    java.awt.geom.Rectangle2D var59 = null;
    org.jfree.chart.plot.PlotRenderingInfo var61 = null;
    org.jfree.chart.plot.CategoryCrosshairState var62 = null;
    boolean var63 = var57.render(var58, var59, 100, var61, var62);
    org.jfree.chart.plot.Plot var64 = var57.getParent();
    org.jfree.data.general.DatasetGroup var65 = var57.getDatasetGroup();
    java.awt.Paint var66 = var57.getDomainGridlinePaint();
    var49.setTickMarkPaint(var66);
    org.jfree.chart.util.RectangleInsets var68 = var49.getLabelInsets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setDomainAxis((-16777216), var49, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    org.jfree.chart.entity.ChartEntity var10 = new org.jfree.chart.entity.ChartEntity(var9);
    java.lang.String var11 = var10.toString();
    java.awt.Shape var12 = var10.getArea();
    org.jfree.data.category.CategoryDataset var13 = null;
    org.jfree.chart.axis.CategoryAxis var14 = null;
    org.jfree.chart.axis.ValueAxis var15 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var18 = null;
    var16.setSeriesOutlineStroke(100, var18);
    java.awt.Paint var21 = null;
    var16.setSeriesOutlinePaint(0, var21, true);
    java.awt.Shape var25 = var16.lookupSeriesShape(10);
    java.awt.Paint var27 = null;
    var16.setSeriesFillPaint(0, var27, false);
    boolean var30 = var16.getBaseShapesVisible();
    java.awt.Paint var31 = var16.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var32 = var16.getBaseNegativeItemLabelPosition();
    var16.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot(var13, var14, var15, (org.jfree.chart.renderer.category.CategoryItemRenderer)var16);
    org.jfree.chart.axis.AxisSpace var36 = null;
    var35.setFixedRangeAxisSpace(var36);
    org.jfree.chart.util.RectangleEdge var39 = var35.getDomainAxisEdge(15);
    org.jfree.chart.entity.PlotEntity var40 = new org.jfree.chart.entity.PlotEntity(var12, (org.jfree.chart.plot.Plot)var35);
    org.jfree.chart.plot.CategoryPlot var41 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var42 = null;
    java.awt.geom.Rectangle2D var43 = null;
    org.jfree.chart.plot.PlotRenderingInfo var45 = null;
    org.jfree.chart.plot.CategoryCrosshairState var46 = null;
    boolean var47 = var41.render(var42, var43, 100, var45, var46);
    org.jfree.chart.plot.Plot var48 = var41.getParent();
    org.jfree.data.general.DatasetGroup var49 = var41.getDatasetGroup();
    java.awt.Paint var50 = var41.getDomainGridlinePaint();
    boolean var51 = var40.equals((java.lang.Object)var41);
    var41.setRangeCrosshairVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ChartEntity: tooltip = null"+ "'", var11.equals("ChartEntity: tooltip = null"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }


    org.jfree.chart.util.DefaultShadowGenerator var0 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var1 = var0.calculateOffsetX();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var4 = null;
    var2.setSeriesOutlineStroke(100, var4);
    var2.removeAnnotations();
    org.jfree.chart.labels.CategoryToolTipGenerator var7 = var2.getBaseToolTipGenerator();
    java.awt.Paint var8 = var2.getBaseItemLabelPaint();
    boolean var9 = var0.equals((java.lang.Object)var8);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    org.jfree.chart.plot.CategoryCrosshairState var15 = null;
    boolean var16 = var10.render(var11, var12, 100, var14, var15);
    org.jfree.chart.event.MarkerChangeEvent var17 = null;
    var10.markerChanged(var17);
    var10.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var21 = var10.getInsets();
    boolean var22 = var0.equals((java.lang.Object)var10);
    int var23 = var10.getDatasetCount();
    org.jfree.chart.util.DefaultShadowGenerator var24 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var25 = var24.calculateOffsetX();
    int var26 = var24.getShadowSize();
    var10.setShadowGenerator((org.jfree.chart.util.ShadowGenerator)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 5);

  }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }
// 
// 
//     org.jfree.chart.plot.DefaultDrawingSupplier var0 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var1 = null;
//     org.jfree.chart.event.ChartChangeEvent var2 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var0, var1);
//     org.jfree.chart.event.ChartChangeEventType var3 = var2.getType();
//     org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var5 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator("");
//     boolean var6 = var3.equals((java.lang.Object)"");
//     org.jfree.chart.plot.DefaultDrawingSupplier var7 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var8 = null;
//     org.jfree.chart.event.ChartChangeEvent var9 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var7, var8);
//     org.jfree.chart.event.ChartChangeEventType var10 = var9.getType();
//     java.lang.String var11 = var10.toString();
//     boolean var12 = var3.equals((java.lang.Object)var10);
//     
//     // Checks the contract:  equals-hashcode on var0 and var7
//     assertTrue("Contract failed: equals-hashcode on var0 and var7", var0.equals(var7) ? var0.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var0
//     assertTrue("Contract failed: equals-hashcode on var7 and var0", var7.equals(var0) ? var7.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    double var1 = var0.getBase();
    org.jfree.chart.labels.ItemLabelPosition var2 = var0.getNegativeItemLabelPositionFallback();
    var0.setItemMargin(100.0d);
    java.awt.Graphics2D var5 = null;
    java.awt.geom.Rectangle2D var6 = null;
    org.jfree.chart.plot.DefaultDrawingSupplier var7 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.data.category.CategoryDataset var8 = null;
    org.jfree.chart.axis.CategoryAxis var9 = null;
    org.jfree.chart.axis.ValueAxis var10 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var13 = null;
    var11.setSeriesOutlineStroke(100, var13);
    java.awt.Paint var16 = null;
    var11.setSeriesOutlinePaint(0, var16, true);
    java.awt.Shape var20 = var11.lookupSeriesShape(10);
    java.awt.Paint var22 = null;
    var11.setSeriesFillPaint(0, var22, false);
    boolean var25 = var11.getBaseShapesVisible();
    java.awt.Paint var26 = var11.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var27 = var11.getBaseNegativeItemLabelPosition();
    var11.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot(var8, var9, var10, (org.jfree.chart.renderer.category.CategoryItemRenderer)var11);
    org.jfree.chart.axis.AxisSpace var31 = null;
    var30.setFixedRangeAxisSpace(var31);
    org.jfree.chart.util.RectangleEdge var34 = var30.getDomainAxisEdge(15);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var35 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var37 = null;
    var35.setSeriesOutlineStroke(100, var37);
    java.awt.Paint var40 = null;
    var35.setSeriesOutlinePaint(0, var40, true);
    boolean var43 = var35.getUseFillPaint();
    boolean var44 = var30.equals((java.lang.Object)var35);
    boolean var45 = var7.equals((java.lang.Object)var30);
    org.jfree.chart.axis.CategoryAxis var46 = null;
    org.jfree.chart.axis.ValueAxis var47 = null;
    org.jfree.data.category.CategoryDataset var48 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var52 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var52.setBaseSeriesVisibleInLegend(false, true);
    java.awt.Graphics2D var56 = null;
    java.awt.geom.Rectangle2D var57 = null;
    org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var59 = null;
    java.awt.geom.Rectangle2D var60 = null;
    org.jfree.chart.plot.PlotRenderingInfo var62 = null;
    org.jfree.chart.plot.CategoryCrosshairState var63 = null;
    boolean var64 = var58.render(var59, var60, 100, var62, var63);
    org.jfree.chart.event.MarkerChangeEvent var65 = null;
    var58.markerChanged(var65);
    var58.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var69 = var58.getDrawingSupplier();
    java.awt.Paint var70 = var58.getRangeGridlinePaint();
    var58.setForegroundAlpha((-1.0f));
    org.jfree.data.category.DefaultCategoryDataset var73 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.plot.PlotRenderingInfo var74 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var75 = var52.initialise(var56, var57, var58, (org.jfree.data.category.CategoryDataset)var73, var74);
    java.awt.geom.Rectangle2D var76 = null;
    java.awt.geom.Rectangle2D var77 = var0.createHotSpotBounds(var5, var6, var30, var46, var47, var48, 15, (-1), true, var75, var76);
    java.awt.Font var78 = var0.getBaseLegendTextFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    org.jfree.data.category.CategoryDataset var14 = var0.getDataset(15);
    boolean var15 = var0.isSubplot();
    org.jfree.chart.util.RectangleEdge var16 = var0.getRangeAxisEdge();
    var0.setRangeCrosshairValue((-8.0d));
    org.jfree.chart.plot.CategoryMarker var19 = null;
    org.jfree.chart.util.Layer var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addDomainMarker(var19, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.plot.PlotRenderingInfo var25 = null;
    java.awt.geom.Point2D var26 = null;
    var22.zoomDomainAxes(0.0d, 0.0d, var25, var26);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var29 = null;
    java.awt.geom.Rectangle2D var30 = null;
    org.jfree.chart.plot.PlotRenderingInfo var32 = null;
    org.jfree.chart.plot.CategoryCrosshairState var33 = null;
    boolean var34 = var28.render(var29, var30, 100, var32, var33);
    org.jfree.chart.plot.Plot var35 = var28.getParent();
    org.jfree.chart.axis.CategoryAxis var36 = null;
    org.jfree.chart.axis.CategoryAxis[] var37 = new org.jfree.chart.axis.CategoryAxis[] { var36};
    var28.setDomainAxes(var37);
    var22.setDomainAxes(var37);
    org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var41 = null;
    java.awt.geom.Rectangle2D var42 = null;
    org.jfree.chart.plot.PlotRenderingInfo var44 = null;
    org.jfree.chart.plot.CategoryCrosshairState var45 = null;
    boolean var46 = var40.render(var41, var42, 100, var44, var45);
    org.jfree.chart.event.MarkerChangeEvent var47 = null;
    var40.markerChanged(var47);
    var40.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var51 = var40.getInsets();
    double var53 = var51.calculateRightOutset(0.0d);
    org.jfree.chart.util.UnitType var54 = var51.getUnitType();
    double var56 = var51.trimWidth(2.0d);
    var22.setAxisOffset(var51);
    org.jfree.chart.plot.Marker var58 = null;
    org.jfree.chart.util.Layer var59 = null;
    boolean var60 = var22.removeDomainMarker(var58, var59);
    var22.setBackgroundAlpha(2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-14.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    java.awt.Paint var13 = var0.getItemFillPaint(1, 0, false);
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    var14.setRangeCrosshairValue((-1.0d));
    var14.setNoDataMessage("");
    org.jfree.data.category.CategoryDataset var19 = null;
    var14.setDataset(var19);
    org.jfree.chart.event.PlotChangeListener var21 = null;
    var14.addChangeListener(var21);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var25 = null;
    var23.setSeriesURLGenerator(10, var25);
    org.jfree.chart.labels.ItemLabelPosition var28 = null;
    var23.setSeriesNegativeItemLabelPosition(0, var28, true);
    java.awt.Stroke var32 = var23.lookupSeriesStroke(10);
    var14.setDomainGridlineStroke(var32);
    org.jfree.chart.renderer.RenderAttributes var34 = new org.jfree.chart.renderer.RenderAttributes();
    org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var36 = null;
    java.awt.geom.Rectangle2D var37 = null;
    org.jfree.chart.plot.PlotRenderingInfo var39 = null;
    org.jfree.chart.plot.CategoryCrosshairState var40 = null;
    boolean var41 = var35.render(var36, var37, 100, var39, var40);
    org.jfree.chart.util.Layer var42 = null;
    java.util.Collection var43 = var35.getDomainMarkers(var42);
    org.jfree.chart.axis.AxisSpace var44 = var35.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var45 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var47 = null;
    var45.setSeriesURLGenerator(10, var47);
    org.jfree.chart.labels.ItemLabelPosition var50 = null;
    var45.setSeriesNegativeItemLabelPosition(0, var50, true);
    java.awt.Stroke var54 = var45.lookupSeriesStroke(0);
    var35.setRangeGridlineStroke(var54);
    java.awt.Paint var56 = var35.getOutlinePaint();
    var34.setDefaultPaint(var56);
    org.jfree.chart.renderer.RenderAttributes var59 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var64 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    var59.setSeriesPaint(0, (java.awt.Paint)var64);
    var34.setSeriesFillPaint(3, (java.awt.Paint)var64);
    var14.setRangeGridlinePaint((java.awt.Paint)var64);
    var0.setPlot(var14);
    org.jfree.chart.urls.CategoryURLGenerator var70 = null;
    var0.setSeriesURLGenerator(10, var70, false);
    boolean var75 = var0.getItemVisible(100, 0);
    java.lang.Boolean var77 = var0.getSeriesShapesVisible((-254));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setDataBoundsIncludesVisibleSeriesOnly(false);
    org.jfree.chart.urls.CategoryURLGenerator var20 = null;
    var0.setSeriesURLGenerator(100, var20, true);
    boolean var23 = var0.getDataBoundsIncludesVisibleSeriesOnly();
    org.jfree.chart.annotations.CategoryAnnotation var24 = null;
    org.jfree.chart.util.Layer var25 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var24, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var11 = var0.getDrawingSupplier();
    java.awt.Paint var12 = var0.getRangeGridlinePaint();
    java.awt.Paint var13 = var0.getDomainCrosshairPaint();
    org.jfree.chart.axis.CategoryAxis var14 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var17 = null;
    var15.setSeriesURLGenerator(10, var17);
    java.awt.Font var19 = var15.getBaseItemLabelFont();
    var14.setLabelFont(var19);
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    var21.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var24 = var21.getDomainAxis();
    var14.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var21);
    var14.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var14.setCategoryMargin(1.0d);
    var14.setTickMarkOutsideLength(100.0f);
    java.awt.Stroke var33 = var14.getTickMarkStroke();
    var14.clearCategoryLabelToolTips();
    java.lang.String var36 = var14.getCategoryLabelToolTip((java.lang.Comparable)(short)0);
    int var37 = var0.getDomainAxisIndex(var14);
    org.jfree.chart.plot.Marker var39 = null;
    org.jfree.chart.util.Layer var40 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var41 = var0.removeRangeMarker(0, var39, var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    double var1 = var0.getBase();
    var0.setItemMargin(0.0d);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    boolean var11 = var4.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    var4.setPlot(var12);
    org.jfree.chart.axis.ValueAxis var14 = var12.getRangeAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Paint var17 = var15.getSeriesFillPaint(0);
    java.awt.Paint var21 = var15.getItemPaint(0, 0, true);
    var12.setNoDataMessagePaint(var21);
    var0.setBasePaint(var21);
    double var24 = var0.getShadowYOffset();
    org.jfree.chart.renderer.RenderAttributes var25 = var0.getSelectedItemAttributes();
    java.awt.Paint var26 = var25.getDefaultPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    var0.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var12 = var0.lookupSeriesShape((-1));
    java.awt.Paint var14 = null;
    var0.setLegendTextPaint(0, var14);
    boolean var16 = var0.getAutoPopulateSeriesOutlineStroke();
    var0.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var22 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var23 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var22);
    var0.setBasePaint((java.awt.Paint)var22, false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesItemLabelGenerator((-254), var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var17 = var0.getBaseItemLabelFont();
    var0.setSeriesShapesFilled(2, (java.lang.Boolean)false);
    int var21 = var0.getPassCount();
    var0.setSeriesShapesFilled(3, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2);

  }

  public void test433() {}
//   public void test433() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     java.awt.geom.GeneralPath var7 = null;
//     java.awt.geom.Rectangle2D var8 = null;
//     org.jfree.chart.RenderingSource var9 = null;
//     var0.select(var7, var8, var9);
//     org.jfree.chart.util.StrokeList var11 = new org.jfree.chart.util.StrokeList();
//     java.awt.Stroke var13 = null;
//     var11.setStroke(2, var13);
//     java.awt.Stroke var16 = var11.getStroke(10);
//     org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var18 = null;
//     java.awt.geom.Rectangle2D var19 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var21 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var22 = null;
//     boolean var23 = var17.render(var18, var19, 100, var21, var22);
//     boolean var24 = var17.isOutlineVisible();
//     org.jfree.chart.util.SortOrder var25 = var17.getRowRenderingOrder();
//     org.jfree.chart.axis.ValueAxis var26 = null;
//     org.jfree.chart.axis.ValueAxis[] var27 = new org.jfree.chart.axis.ValueAxis[] { var26};
//     var17.setRangeAxes(var27);
//     boolean var29 = var11.equals((java.lang.Object)var27);
//     var0.setRangeAxes(var27);
//     
//     // Checks the contract:  equals-hashcode on var0 and var17
//     assertTrue("Contract failed: equals-hashcode on var0 and var17", var0.equals(var17) ? var0.hashCode() == var17.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var0
//     assertTrue("Contract failed: equals-hashcode on var17 and var0", var17.equals(var0) ? var17.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test434() {}
//   public void test434() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     var0.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
//     java.awt.Stroke var12 = var0.getRangeZeroBaselineStroke();
//     org.jfree.chart.axis.AxisLocation var14 = var0.getDomainAxisLocation(100);
//     org.jfree.chart.axis.ValueAxis var15 = null;
//     org.jfree.data.Range var16 = var0.getDataRange(var15);
//     java.awt.Image var17 = null;
//     var0.setBackgroundImage(var17);
//     org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var20 = null;
//     java.awt.geom.Rectangle2D var21 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var23 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var24 = null;
//     boolean var25 = var19.render(var20, var21, 100, var23, var24);
//     org.jfree.chart.event.MarkerChangeEvent var26 = null;
//     var19.markerChanged(var26);
//     var19.setDrawSharedDomainAxis(true);
//     int var30 = var19.getBackgroundImageAlignment();
//     boolean var31 = var19.canSelectByRegion();
//     int var32 = var19.getDatasetCount();
//     java.lang.String var33 = var19.getNoDataMessage();
//     org.jfree.chart.plot.DatasetRenderingOrder var34 = var19.getDatasetRenderingOrder();
//     java.lang.String var35 = var34.toString();
//     var0.setDatasetRenderingOrder(var34);
//     
//     // Checks the contract:  equals-hashcode on var0 and var19
//     assertTrue("Contract failed: equals-hashcode on var0 and var19", var0.equals(var19) ? var0.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var19 and var0
//     assertTrue("Contract failed: equals-hashcode on var19 and var0", var19.equals(var0) ? var19.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    org.jfree.chart.axis.AxisLocation var15 = var0.getDomainAxisLocation(0);
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    var16.setRangeCrosshairValue((-1.0d));
    var16.setNoDataMessage("");
    var16.setDomainCrosshairVisible(false);
    java.awt.Stroke var23 = var16.getRangeGridlineStroke();
    org.jfree.data.KeyedObjects2D var24 = new org.jfree.data.KeyedObjects2D();
    java.util.List var25 = var24.getRowKeys();
    int var26 = var24.getColumnCount();
    java.lang.Object var27 = null;
    boolean var28 = var24.equals(var27);
    org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var30 = null;
    java.awt.geom.Rectangle2D var31 = null;
    org.jfree.chart.plot.PlotRenderingInfo var33 = null;
    org.jfree.chart.plot.CategoryCrosshairState var34 = null;
    boolean var35 = var29.render(var30, var31, 100, var33, var34);
    org.jfree.chart.event.MarkerChangeEvent var36 = null;
    var29.markerChanged(var36);
    var29.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var40 = var29.getInsets();
    java.awt.Stroke var41 = var29.getRangeZeroBaselineStroke();
    var24.addObject((java.lang.Object)var29, (java.lang.Comparable)100, (java.lang.Comparable)'4');
    boolean var45 = var29.isDomainZoomable();
    java.awt.Image var46 = null;
    var29.setBackgroundImage(var46);
    org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot();
    var48.setWeight(10);
    org.jfree.chart.plot.DefaultDrawingSupplier var51 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var52 = null;
    org.jfree.chart.event.ChartChangeEvent var53 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var51, var52);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var56 = null;
    var54.setSeriesOutlineStroke(100, var56);
    java.awt.Paint var59 = null;
    var54.setSeriesOutlinePaint(0, var59, true);
    java.awt.Shape var63 = var54.lookupSeriesShape(10);
    java.awt.Paint var65 = null;
    var54.setSeriesFillPaint(0, var65, false);
    boolean var68 = var54.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var70 = var54.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var71 = var54.getBaseItemLabelFont();
    boolean var72 = var51.equals((java.lang.Object)var54);
    var48.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var51);
    var29.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var51);
    org.jfree.chart.event.PlotChangeEvent var75 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var29);
    var16.notifyListeners(var75);
    var0.notifyListeners(var75);
    float var78 = var0.getBackgroundImageAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);

  }

  public void test436() {}
//   public void test436() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     java.awt.Paint var11 = null;
//     var0.setSeriesFillPaint(0, var11, false);
//     boolean var14 = var0.getBaseShapesVisible();
//     var0.setBaseSeriesVisibleInLegend(true);
//     java.awt.Font var17 = var0.getBaseLegendTextFont();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.data.category.DefaultCategoryDataset var19 = new org.jfree.data.category.DefaultCategoryDataset();
//     org.jfree.chart.axis.CategoryAxis var20 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var23 = null;
//     var21.setSeriesURLGenerator(10, var23);
//     java.awt.Font var25 = var21.getBaseItemLabelFont();
//     var20.setLabelFont(var25);
//     java.lang.Object var27 = var20.clone();
//     org.jfree.chart.axis.ValueAxis var28 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var31 = null;
//     var29.setSeriesURLGenerator(10, var31);
//     org.jfree.chart.labels.ItemLabelPosition var34 = var29.getSeriesPositiveItemLabelPosition(1);
//     org.jfree.chart.plot.CategoryPlot var35 = var29.getPlot();
//     org.jfree.chart.plot.CategoryPlot var36 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var19, var20, var28, (org.jfree.chart.renderer.category.CategoryItemRenderer)var29);
//     org.jfree.data.Range var37 = var18.findRangeBounds((org.jfree.data.category.CategoryDataset)var19);
//     boolean var38 = var18.getAutoPopulateSeriesOutlineStroke();
//     org.jfree.data.category.DefaultCategoryDataset var39 = new org.jfree.data.category.DefaultCategoryDataset();
//     int var40 = var39.getRowCount();
//     var39.validateObject();
//     org.jfree.data.Range var42 = var18.findRangeBounds((org.jfree.data.category.CategoryDataset)var39);
//     org.jfree.data.Range var43 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var39);
//     
//     // Checks the contract:  equals-hashcode on var0 and var18
//     assertTrue("Contract failed: equals-hashcode on var0 and var18", var0.equals(var18) ? var0.hashCode() == var18.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var21
//     assertTrue("Contract failed: equals-hashcode on var0 and var21", var0.equals(var21) ? var0.hashCode() == var21.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var0 and var29
//     assertTrue("Contract failed: equals-hashcode on var0 and var29", var0.equals(var29) ? var0.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var0
//     assertTrue("Contract failed: equals-hashcode on var18 and var0", var18.equals(var0) ? var18.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var21 and var0
//     assertTrue("Contract failed: equals-hashcode on var21 and var0", var21.equals(var0) ? var21.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var0
//     assertTrue("Contract failed: equals-hashcode on var29 and var0", var29.equals(var0) ? var29.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getSeriesNegativeItemLabelPosition(2);
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var18 = null;
    java.awt.geom.Rectangle2D var19 = null;
    org.jfree.chart.plot.PlotRenderingInfo var21 = null;
    org.jfree.chart.plot.CategoryCrosshairState var22 = null;
    boolean var23 = var17.render(var18, var19, 100, var21, var22);
    org.jfree.chart.event.MarkerChangeEvent var24 = null;
    var17.markerChanged(var24);
    var17.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var28 = var17.getDrawingSupplier();
    java.awt.Paint var29 = var17.getRangeGridlinePaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var32 = null;
    var30.setSeriesURLGenerator(10, var32);
    org.jfree.chart.labels.ItemLabelPosition var35 = null;
    var30.setSeriesNegativeItemLabelPosition(0, var35, true);
    java.awt.Stroke var39 = var30.lookupSeriesStroke(0);
    var30.setSeriesShapesVisible(15, (java.lang.Boolean)true);
    var17.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var30, false);
    java.awt.Paint var45 = var17.getNoDataMessagePaint();
    var0.setBasePaint(var45);
    int var47 = var0.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }


    org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Shape var3 = var0.getItemShape(0, 0);
    java.awt.Paint var4 = var0.getDefaultLabelPaint();
    java.lang.Boolean var5 = var0.getDefaultLabelVisible();
    java.awt.Shape var6 = var0.getDefaultShape();
    boolean var7 = var0.getAllowNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var14 = null;
    var12.setSeriesOutlineStroke(100, var14);
    java.awt.Paint var17 = null;
    var12.setSeriesOutlinePaint(0, var17, true);
    java.awt.Shape var21 = var12.lookupSeriesShape(10);
    java.awt.Paint var23 = null;
    var12.setSeriesFillPaint(0, var23, false);
    boolean var26 = var12.getBaseShapesVisible();
    java.awt.Paint var27 = var12.getBaseOutlinePaint();
    int var28 = var0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var12);
    int var29 = var0.getWeight();
    org.jfree.chart.axis.AxisSpace var30 = null;
    var0.setFixedRangeAxisSpace(var30, false);
    org.jfree.chart.event.PlotChangeListener var33 = null;
    var0.addChangeListener(var33);
    java.lang.Comparable var35 = var0.getDomainCrosshairColumnKey();
    var0.setNoDataMessage("PlotEntity: tooltip = ItemLabelAnchor.OUTSIDE6");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test440() {}
//   public void test440() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     var0.setBase((-1.0d));
//     boolean var3 = var0.getAutoPopulateSeriesOutlinePaint();
//     int var4 = var0.getPassCount();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var5 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var7 = null;
//     var5.setSeriesOutlineStroke(100, var7);
//     java.awt.Paint var10 = null;
//     var5.setSeriesOutlinePaint(0, var10, true);
//     org.jfree.chart.labels.ItemLabelPosition var13 = var5.getBaseNegativeItemLabelPosition();
//     var0.setBasePositiveItemLabelPosition(var13, false);
//     java.awt.Font var17 = var0.lookupLegendTextFont(100);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var24 = null;
//     var22.setSeriesOutlineStroke(100, var24);
//     java.awt.Paint var27 = null;
//     var22.setSeriesOutlinePaint(0, var27, true);
//     var22.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var34 = var22.lookupSeriesShape((-1));
//     org.jfree.chart.entity.ChartEntity var35 = new org.jfree.chart.entity.ChartEntity(var34);
//     java.awt.Color var39 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     int var40 = var39.getRed();
//     org.jfree.chart.LegendItem var41 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var34, (java.awt.Paint)var39);
//     org.jfree.chart.entity.ChartEntity var42 = new org.jfree.chart.entity.ChartEntity(var34);
//     var0.setBaseShape(var34);
//     
//     // Checks the contract:  equals-hashcode on var5 and var22
//     assertTrue("Contract failed: equals-hashcode on var5 and var22", var5.equals(var22) ? var5.hashCode() == var22.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var5 and var22.", var5.equals(var22) == var22.equals(var5));
// 
//   }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
//     var7.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
//     var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
//     var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var0.setCategoryMargin(1.0d);
//     var0.setTickMarkOutsideLength(100.0f);
//     java.awt.Stroke var19 = var0.getTickMarkStroke();
//     var0.clearCategoryLabelToolTips();
//     java.awt.Graphics2D var21 = null;
//     org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var23 = null;
//     java.awt.geom.Rectangle2D var24 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var26 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var27 = null;
//     boolean var28 = var22.render(var23, var24, 100, var26, var27);
//     org.jfree.chart.event.MarkerChangeEvent var29 = null;
//     var22.markerChanged(var29);
//     var22.setDrawSharedDomainAxis(true);
//     int var33 = var22.getBackgroundImageAlignment();
//     boolean var34 = var22.canSelectByRegion();
//     org.jfree.data.category.CategoryDataset var36 = var22.getDataset(15);
//     boolean var37 = var22.isSubplot();
//     org.jfree.chart.axis.ValueAxis var39 = var22.getRangeAxisForDataset(0);
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.data.category.CategoryDataset var41 = null;
//     org.jfree.chart.axis.CategoryAxis var42 = null;
//     org.jfree.chart.axis.ValueAxis var43 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var44 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var46 = null;
//     var44.setSeriesOutlineStroke(100, var46);
//     java.awt.Paint var49 = null;
//     var44.setSeriesOutlinePaint(0, var49, true);
//     java.awt.Shape var53 = var44.lookupSeriesShape(10);
//     java.awt.Paint var55 = null;
//     var44.setSeriesFillPaint(0, var55, false);
//     boolean var58 = var44.getBaseShapesVisible();
//     java.awt.Paint var59 = var44.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var60 = var44.getBaseNegativeItemLabelPosition();
//     var44.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var63 = new org.jfree.chart.plot.CategoryPlot(var41, var42, var43, (org.jfree.chart.renderer.category.CategoryItemRenderer)var44);
//     org.jfree.chart.axis.AxisSpace var64 = null;
//     var63.setFixedRangeAxisSpace(var64);
//     org.jfree.chart.util.RectangleEdge var67 = var63.getDomainAxisEdge(15);
//     org.jfree.chart.axis.AxisSpace var68 = null;
//     org.jfree.chart.axis.AxisSpace var69 = var0.reserveSpace(var21, (org.jfree.chart.plot.Plot)var22, var40, var67, var68);
// 
//   }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test442"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.plot.CategoryPlot var23 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.chart.plot.PlotRenderingInfo var27 = null;
    org.jfree.chart.plot.CategoryCrosshairState var28 = null;
    boolean var29 = var23.render(var24, var25, 100, var27, var28);
    org.jfree.chart.event.MarkerChangeEvent var30 = null;
    var23.markerChanged(var30);
    org.jfree.chart.plot.Marker var33 = null;
    org.jfree.chart.util.Layer var34 = null;
    boolean var36 = var23.removeDomainMarker(10, var33, var34, true);
    org.jfree.chart.axis.AxisLocation var38 = var23.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var39 = org.jfree.chart.axis.AxisLocation.getOpposite(var38);
    var22.setDomainAxisLocation(var39, false);
    boolean var42 = var22.isNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test443"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var12 = null;
    var10.setSeriesOutlineStroke(100, var12);
    java.awt.Paint var15 = null;
    var10.setSeriesOutlinePaint(0, var15, true);
    java.awt.Shape var19 = var10.lookupSeriesShape(10);
    java.awt.Paint var21 = null;
    var10.setSeriesFillPaint(0, var21, false);
    boolean var24 = var10.getBaseShapesVisible();
    java.awt.Paint var25 = var10.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var26 = var10.getBaseNegativeItemLabelPosition();
    var10.setBaseSeriesVisible(false);
    double var29 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer var31 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var32 = var31.isDrawBarOutline();
    boolean var33 = var31.isDrawBarOutline();
    java.awt.Paint var34 = var31.getShadowPaint();
    org.jfree.chart.LegendItem var35 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var34);
    var10.setBaseLegendTextPaint(var34);
    var8.setRangeMinorGridlinePaint(var34);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var39 = null;
    java.awt.geom.Rectangle2D var40 = null;
    org.jfree.chart.plot.PlotRenderingInfo var42 = null;
    org.jfree.chart.plot.CategoryCrosshairState var43 = null;
    boolean var44 = var38.render(var39, var40, 100, var42, var43);
    org.jfree.chart.event.MarkerChangeEvent var45 = null;
    var38.markerChanged(var45);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var49 = var38.getInsets();
    java.awt.Stroke var50 = var38.getRangeZeroBaselineStroke();
    org.jfree.chart.axis.AxisLocation var52 = var38.getDomainAxisLocation(100);
    boolean var53 = var8.equals((java.lang.Object)var38);
    org.jfree.chart.renderer.category.CategoryItemRenderer var55 = var38.getRenderer(3);
    org.jfree.chart.plot.CategoryMarker var57 = null;
    org.jfree.chart.util.Layer var58 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var38.addDomainMarker((-254), var57, var58, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test444"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    java.lang.String var12 = var11.toString();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var15 = null;
    var13.setSeriesOutlineStroke(100, var15);
    java.awt.Paint var18 = null;
    var13.setSeriesOutlinePaint(0, var18, true);
    java.awt.Shape var22 = var13.lookupSeriesShape(10);
    java.awt.Paint var24 = null;
    var13.setSeriesFillPaint(0, var24, false);
    boolean var27 = var13.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var29 = var13.getSeriesNegativeItemLabelPosition(2);
    boolean var30 = var11.equals((java.lang.Object)2);
    double var31 = var11.getLeft();
    double var32 = var11.getBottom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]"+ "'", var12.equals("RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 4.0d);

  }

  public void test445() {}
//   public void test445() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test445"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setRangeCrosshairValue((-1.0d));
//     java.util.List var3 = var0.getAnnotations();
//     org.jfree.chart.util.SortOrder var4 = var0.getColumnRenderingOrder();
//     org.jfree.chart.renderer.category.BarRenderer var6 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var7 = var6.isDrawBarOutline();
//     boolean var8 = var6.isDrawBarOutline();
//     java.awt.Paint var9 = var6.getShadowPaint();
//     org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var11 = null;
//     java.awt.geom.Rectangle2D var12 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var14 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var15 = null;
//     boolean var16 = var10.render(var11, var12, 100, var14, var15);
//     boolean var17 = var10.isOutlineVisible();
//     var10.setDomainGridlinesVisible(true);
//     org.jfree.chart.axis.CategoryAnchor var20 = var10.getDomainGridlinePosition();
//     java.awt.Paint var21 = var10.getBackgroundPaint();
//     var6.addChangeListener((org.jfree.chart.event.RendererChangeListener)var10);
//     org.jfree.chart.plot.DrawingSupplier var23 = var10.getDrawingSupplier();
//     org.jfree.chart.axis.AxisLocation var24 = var10.getDomainAxisLocation();
//     var0.setRangeAxisLocation(0, var24, true);
//     org.jfree.chart.plot.DrawingSupplier var27 = var0.getDrawingSupplier();
//     
//     // Checks the contract:  equals-hashcode on var23 and var27
//     assertTrue("Contract failed: equals-hashcode on var23 and var27", var23.equals(var27) ? var23.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var23
//     assertTrue("Contract failed: equals-hashcode on var27 and var23", var27.equals(var23) ? var27.hashCode() == var23.hashCode() : true);
// 
//   }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test446"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setWeight(10);
    org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var4 = null;
    org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    java.awt.Shape var15 = var6.lookupSeriesShape(10);
    java.awt.Paint var17 = null;
    var6.setSeriesFillPaint(0, var17, false);
    boolean var20 = var6.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var23 = var6.getBaseItemLabelFont();
    boolean var24 = var3.equals((java.lang.Object)var6);
    var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
    org.jfree.chart.plot.Marker var26 = null;
    org.jfree.chart.util.Layer var27 = null;
    boolean var28 = var0.removeDomainMarker(var26, var27);
    org.jfree.chart.util.RectangleInsets var29 = var0.getInsets();
    double var31 = var29.extendHeight((-7.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test447"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    java.awt.Paint var5 = null;
    var0.setSeriesOutlinePaint(0, var5, true);
    java.awt.Shape var9 = var0.lookupSeriesShape(10);
    java.awt.Paint var11 = null;
    var0.setSeriesFillPaint(0, var11, false);
    boolean var14 = var0.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var16 = var0.getSeriesNegativeItemLabelPosition(2);
    org.jfree.chart.urls.CategoryURLGenerator var17 = null;
    var0.setBaseURLGenerator(var17, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var22 = null;
    var20.setSeriesURLGenerator(10, var22);
    org.jfree.chart.labels.ItemLabelPosition var25 = var20.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.text.TextAnchor var26 = var25.getRotationAnchor();
    var0.setBaseNegativeItemLabelPosition(var25, true);
    org.jfree.chart.urls.CategoryURLGenerator var32 = var0.getURLGenerator((-1), 4, true);
    org.jfree.chart.labels.CategoryToolTipGenerator var34 = var0.getSeriesToolTipGenerator(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test448"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    org.jfree.chart.labels.ItemLabelPosition var5 = var0.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.text.TextAnchor var6 = var5.getRotationAnchor();
    org.jfree.data.category.DefaultCategoryDataset var7 = new org.jfree.data.category.DefaultCategoryDataset();
    java.lang.Object var8 = var7.clone();
    boolean var9 = var6.equals(var8);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var11 = null;
    java.awt.geom.Rectangle2D var12 = null;
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    org.jfree.chart.plot.CategoryCrosshairState var15 = null;
    boolean var16 = var10.render(var11, var12, 100, var14, var15);
    org.jfree.chart.event.MarkerChangeEvent var17 = null;
    var10.markerChanged(var17);
    var10.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var21 = var10.getInsets();
    double var23 = var21.calculateRightOutset(0.0d);
    org.jfree.chart.util.UnitType var24 = var21.getUnitType();
    double var26 = var21.trimWidth(2.0d);
    double var27 = var21.getRight();
    boolean var28 = var6.equals((java.lang.Object)var21);
    double var29 = var21.getBottom();
    java.awt.geom.Rectangle2D var30 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var31 = var21.createOutsetRectangle(var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-14.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 4.0d);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test449"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    org.jfree.chart.plot.Marker var10 = null;
    org.jfree.chart.util.Layer var11 = null;
    boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var15 = null;
    java.awt.geom.Rectangle2D var16 = null;
    org.jfree.chart.plot.PlotRenderingInfo var18 = null;
    org.jfree.chart.plot.CategoryCrosshairState var19 = null;
    boolean var20 = var14.render(var15, var16, 100, var18, var19);
    org.jfree.chart.event.MarkerChangeEvent var21 = null;
    var14.markerChanged(var21);
    var14.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var25 = var14.getInsets();
    double var27 = var25.calculateRightOutset(0.0d);
    org.jfree.chart.util.UnitType var28 = var25.getUnitType();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var31 = null;
    var29.setSeriesOutlineStroke(100, var31);
    java.awt.Paint var34 = null;
    var29.setSeriesOutlinePaint(0, var34, true);
    java.awt.Shape var38 = var29.lookupSeriesShape(10);
    java.awt.Paint var40 = null;
    var29.setSeriesFillPaint(0, var40, false);
    boolean var43 = var29.getBaseShapesVisible();
    java.awt.Paint var44 = null;
    var29.setBasePaint(var44);
    var29.setAutoPopulateSeriesOutlineStroke(false);
    org.jfree.chart.urls.CategoryURLGenerator var49 = null;
    var29.setSeriesURLGenerator(2, var49, true);
    java.awt.Color var56 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    org.jfree.chart.LegendItem var57 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var56);
    java.awt.Shape var58 = var57.getShape();
    var29.setBaseLegendShape(var58);
    boolean var60 = var28.equals((java.lang.Object)var29);
    org.jfree.chart.util.RectangleInsets var65 = new org.jfree.chart.util.RectangleInsets(var28, 0.0d, (-6.0d), 10.0d, 8.0d);
    var0.setInsets(var65);
    double var68 = var65.calculateLeftOutset((-14.0d));
    double var70 = var65.calculateBottomOutset(2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 10.0d);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test450"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var11 = var0.getInsets();
    java.awt.Stroke var12 = var0.getRangeZeroBaselineStroke();
    var0.setOutlineVisible(true);
    org.jfree.chart.axis.AxisLocation var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxisLocation(var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test451"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var2 = null;
    var0.setSeriesOutlineStroke(100, var2);
    org.jfree.chart.labels.CategoryItemLabelGenerator var5 = var0.getSeriesItemLabelGenerator(3);
    java.awt.Graphics2D var6 = null;
    org.jfree.chart.plot.CategoryPlot var7 = null;
    org.jfree.chart.axis.ValueAxis var8 = null;
    org.jfree.chart.plot.Marker var9 = null;
    java.awt.geom.Rectangle2D var10 = null;
    var0.drawRangeMarker(var6, var7, var8, var9, var10);
    org.jfree.chart.event.RendererChangeListener var12 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addChangeListener(var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test452() {}
//   public void test452() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test452"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     org.jfree.chart.labels.ItemLabelPosition var5 = null;
//     var0.setSeriesNegativeItemLabelPosition(0, var5, true);
//     org.jfree.chart.labels.ItemLabelPosition var11 = var0.getPositiveItemLabelPosition(0, 1, false);
//     var0.setBaseSeriesVisible(false, false);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var17 = null;
//     var15.setSeriesURLGenerator(10, var17);
//     org.jfree.chart.labels.ItemLabelPosition var20 = var15.getSeriesPositiveItemLabelPosition(1);
//     java.awt.Shape var22 = var15.lookupLegendShape(0);
//     java.awt.Font var24 = var15.getLegendTextFont(100);
//     org.jfree.chart.labels.ItemLabelPosition var25 = var15.getBasePositiveItemLabelPosition();
//     org.jfree.chart.labels.CategorySeriesLabelGenerator var26 = var15.getLegendItemLabelGenerator();
//     var0.setLegendItemURLGenerator(var26);
//     
//     // Checks the contract:  equals-hashcode on var11 and var20
//     assertTrue("Contract failed: equals-hashcode on var11 and var20", var11.equals(var20) ? var11.hashCode() == var20.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var25
//     assertTrue("Contract failed: equals-hashcode on var11 and var25", var11.equals(var25) ? var11.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var11
//     assertTrue("Contract failed: equals-hashcode on var20 and var11", var20.equals(var11) ? var20.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var11
//     assertTrue("Contract failed: equals-hashcode on var25 and var11", var25.equals(var11) ? var25.hashCode() == var11.hashCode() : true);
// 
//   }

  public void test453() {}
//   public void test453() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test453"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     var0.setWeight(10);
//     org.jfree.chart.plot.DefaultDrawingSupplier var3 = new org.jfree.chart.plot.DefaultDrawingSupplier();
//     org.jfree.chart.JFreeChart var4 = null;
//     org.jfree.chart.event.ChartChangeEvent var5 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var3, var4);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var8 = null;
//     var6.setSeriesOutlineStroke(100, var8);
//     java.awt.Paint var11 = null;
//     var6.setSeriesOutlinePaint(0, var11, true);
//     java.awt.Shape var15 = var6.lookupSeriesShape(10);
//     java.awt.Paint var17 = null;
//     var6.setSeriesFillPaint(0, var17, false);
//     boolean var20 = var6.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var22 = var6.getSeriesNegativeItemLabelPosition(2);
//     java.awt.Font var23 = var6.getBaseItemLabelFont();
//     boolean var24 = var3.equals((java.lang.Object)var6);
//     var0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var3);
//     org.jfree.chart.plot.Marker var26 = null;
//     org.jfree.chart.util.Layer var27 = null;
//     boolean var28 = var0.removeDomainMarker(var26, var27);
//     org.jfree.chart.util.RectangleInsets var29 = var0.getInsets();
//     java.awt.Stroke var30 = var0.getRangeGridlineStroke();
//     org.jfree.chart.axis.CategoryAxis var31 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var34 = null;
//     var32.setSeriesURLGenerator(10, var34);
//     java.awt.Font var36 = var32.getBaseItemLabelFont();
//     var31.setLabelFont(var36);
//     java.lang.Object var38 = var31.clone();
//     org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot();
//     var40.setRangeCrosshairValue((-1.0d));
//     var40.setNoDataMessage("");
//     java.awt.Color var48 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var40.setRangeZeroBaselinePaint((java.awt.Paint)var48);
//     float[] var53 = new float[] { 100.0f, 1.0f, 100.0f};
//     float[] var54 = var48.getRGBColorComponents(var53);
//     var31.setTickLabelPaint((java.lang.Comparable)(-1.0d), (java.awt.Paint)var48);
//     var0.setOutlinePaint((java.awt.Paint)var48);
//     
//     // Checks the contract:  equals-hashcode on var6 and var32
//     assertTrue("Contract failed: equals-hashcode on var6 and var32", var6.equals(var32) ? var6.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var6
//     assertTrue("Contract failed: equals-hashcode on var32 and var6", var32.equals(var6) ? var32.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test454() {}
//   public void test454() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test454"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
//     java.lang.Boolean var7 = var0.getDefaultCreateEntity();
//     java.awt.Shape var10 = var0.getItemShape((-1), 4);
//     java.lang.Boolean var12 = var0.getSeriesLabelVisible((-2));
// 
//   }

  public void test455() {}
//   public void test455() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test455"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     java.awt.Paint var11 = null;
//     var0.setSeriesFillPaint(0, var11, false);
//     boolean var14 = var0.getBaseShapesVisible();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var0.getSeriesNegativeItemLabelPosition(2);
//     var0.setUseOutlinePaint(true);
//     var0.clearSeriesStrokes(false);
//     int var21 = var0.getRowCount();
//     var0.setBaseShapesVisible(false);
//     java.awt.Graphics2D var24 = null;
//     org.jfree.data.KeyedObjects2D var25 = new org.jfree.data.KeyedObjects2D();
//     java.util.List var26 = var25.getRowKeys();
//     int var27 = var25.getColumnCount();
//     java.lang.Object var28 = null;
//     boolean var29 = var25.equals(var28);
//     org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var31 = null;
//     java.awt.geom.Rectangle2D var32 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var34 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var35 = null;
//     boolean var36 = var30.render(var31, var32, 100, var34, var35);
//     org.jfree.chart.event.MarkerChangeEvent var37 = null;
//     var30.markerChanged(var37);
//     var30.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var41 = var30.getInsets();
//     java.awt.Stroke var42 = var30.getRangeZeroBaselineStroke();
//     var25.addObject((java.lang.Object)var30, (java.lang.Comparable)100, (java.lang.Comparable)'4');
//     org.jfree.chart.plot.CategoryPlot var46 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var47 = null;
//     java.awt.geom.Rectangle2D var48 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var50 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var51 = null;
//     boolean var52 = var46.render(var47, var48, 100, var50, var51);
//     org.jfree.chart.util.Layer var53 = null;
//     java.util.Collection var54 = var46.getDomainMarkers(var53);
//     java.awt.Paint var55 = var46.getOutlinePaint();
//     var30.setOutlinePaint(var55);
//     java.util.List var57 = var30.getAnnotations();
//     java.awt.Stroke var58 = var30.getRangeGridlineStroke();
//     java.awt.geom.Rectangle2D var59 = null;
//     var0.drawBackground(var24, var30, var59);
// 
//   }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test456"); }


    java.awt.Shape var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.entity.ChartEntity var2 = new org.jfree.chart.entity.ChartEntity(var0, "RectangleInsets[t=0.0,l=-6.0,b=10.0,r=8.0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test457"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var14 = null;
    java.awt.geom.Rectangle2D var15 = null;
    org.jfree.chart.plot.PlotRenderingInfo var17 = null;
    org.jfree.chart.plot.CategoryCrosshairState var18 = null;
    boolean var19 = var13.render(var14, var15, 100, var17, var18);
    org.jfree.chart.event.MarkerChangeEvent var20 = null;
    var13.markerChanged(var20);
    var13.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.DrawingSupplier var24 = var13.getDrawingSupplier();
    org.jfree.chart.LegendItemCollection var25 = var13.getLegendItems();
    var0.addChangeListener((org.jfree.chart.event.AxisChangeListener)var13);
    double var27 = var0.getLabelAngle();
    double var28 = var0.getLowerMargin();
    org.jfree.chart.util.RectangleInsets var29 = var0.getLabelInsets();
    var0.setUpperMargin(1.0d);
    var0.setMinorTickMarksVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test458"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    var0.setDrawBarOutline(false);
    org.jfree.chart.labels.ItemLabelPosition var3 = var0.getNegativeItemLabelPositionFallback();
    var0.setBaseCreateEntities(true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test459"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.axis.ValueAxis var20 = var9.getRangeAxis();
    int var21 = var9.getRendererCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test460"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    java.util.List var1 = var0.getRowKeys();
    int var2 = var0.getColumnCount();
    java.lang.Object var3 = null;
    boolean var4 = var0.equals(var3);
    java.lang.Object var5 = var0.clone();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var8 = null;
    var6.setSeriesOutlineStroke(100, var8);
    java.awt.Paint var11 = null;
    var6.setSeriesOutlinePaint(0, var11, true);
    var6.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var18 = var6.lookupSeriesShape((-1));
    java.awt.Paint var20 = null;
    var6.setLegendTextPaint(0, var20);
    java.awt.Font var23 = var6.getSeriesItemLabelFont(0);
    org.jfree.chart.labels.ItemLabelPosition var25 = var6.getSeriesNegativeItemLabelPosition(10);
    java.awt.Font var26 = var6.getBaseLegendTextFont();
    var0.setObject((java.lang.Object)var6, (java.lang.Comparable)"AxisLocation.TOP_OR_RIGHT", (java.lang.Comparable)(-6.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test461"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.axis.AxisSpace var23 = null;
    var22.setFixedRangeAxisSpace(var23);
    org.jfree.chart.util.RectangleEdge var26 = var22.getDomainAxisEdge(15);
    var22.setRangeCrosshairValue(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test462() {}
//   public void test462() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test462"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var2 = null;
//     var0.setSeriesURLGenerator(10, var2);
//     org.jfree.chart.labels.ItemLabelPosition var5 = null;
//     var0.setSeriesNegativeItemLabelPosition(0, var5, true);
//     java.awt.Stroke var9 = var0.lookupSeriesStroke(0);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var13 = null;
//     var11.setSeriesOutlineStroke(100, var13);
//     java.awt.Paint var16 = null;
//     var11.setSeriesOutlinePaint(0, var16, true);
//     var11.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
//     java.awt.Shape var23 = var11.lookupSeriesShape((-1));
//     var0.setSeriesShape(0, var23);
//     org.jfree.chart.labels.CategorySeriesLabelGenerator var25 = null;
//     var0.setLegendItemToolTipGenerator(var25);
//     org.jfree.chart.labels.CategoryToolTipGenerator var28 = null;
//     var0.setSeriesToolTipGenerator(1, var28, true);
//     var0.setSeriesShapesVisible(0, (java.lang.Boolean)true);
//     org.jfree.chart.plot.CategoryPlot var34 = var0.getPlot();
//     org.jfree.chart.plot.CategoryPlot var35 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var36 = null;
//     java.awt.geom.Rectangle2D var37 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var39 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var40 = null;
//     boolean var41 = var35.render(var36, var37, 100, var39, var40);
//     org.jfree.chart.event.MarkerChangeEvent var42 = null;
//     var35.markerChanged(var42);
//     var35.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.DrawingSupplier var46 = var35.getDrawingSupplier();
//     java.awt.Paint var47 = var35.getRangeGridlinePaint();
//     org.jfree.chart.axis.ValueAxis var49 = null;
//     var35.setRangeAxis(15, var49);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var51 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var53 = null;
//     var51.setSeriesOutlineStroke(100, var53);
//     java.awt.Paint var56 = null;
//     var51.setSeriesOutlinePaint(0, var56, true);
//     java.awt.Shape var60 = var51.lookupSeriesShape(10);
//     java.awt.Paint var62 = null;
//     var51.setSeriesFillPaint(0, var62, false);
//     boolean var65 = var51.getBaseShapesVisible();
//     java.awt.Paint var66 = var51.getBaseOutlinePaint();
//     java.awt.Stroke var67 = var51.getBaseStroke();
//     var35.setRangeCrosshairStroke(var67);
//     var0.setBaseStroke(var67, true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var0
//     assertTrue("Contract failed: equals-hashcode on var51 and var0", var51.equals(var0) ? var51.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var11
//     assertTrue("Contract failed: equals-hashcode on var51 and var11", var51.equals(var11) ? var51.hashCode() == var11.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var51 and var0.", var51.equals(var0) == var0.equals(var51));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var51 and var11.", var51.equals(var11) == var11.equals(var51));
// 
//   }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test463"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    java.lang.String var13 = var0.getLabelURL();
    java.lang.String var15 = var0.getCategoryLabelToolTip((java.lang.Comparable)4.0d);
    var0.setMaximumCategoryLabelLines((-1));
    java.awt.Paint var18 = var0.getTickLabelPaint();
    java.awt.Color var22 = java.awt.Color.getHSBColor(10.0f, 10.0f, 10.0f);
    var0.setTickLabelPaint((java.awt.Paint)var22);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var26 = null;
    var24.setSeriesURLGenerator(10, var26);
    org.jfree.chart.labels.ItemLabelPosition var29 = var24.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.text.TextAnchor var30 = var29.getRotationAnchor();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var34 = null;
    var32.setSeriesOutlineStroke(100, var34);
    java.awt.Paint var37 = null;
    var32.setSeriesOutlinePaint(0, var37, true);
    var32.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var44 = var32.lookupSeriesShape((-1));
    java.awt.Paint var46 = null;
    var32.setLegendTextPaint(0, var46);
    boolean var48 = var32.getAutoPopulateSeriesOutlineStroke();
    var32.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var54 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var55 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var54);
    var32.setBasePaint((java.awt.Paint)var54, false);
    java.awt.image.ColorModel var58 = null;
    java.awt.Rectangle var59 = null;
    java.awt.geom.Rectangle2D var60 = null;
    java.awt.geom.AffineTransform var61 = null;
    java.awt.RenderingHints var62 = null;
    java.awt.PaintContext var63 = var54.createContext(var58, var59, var60, var61, var62);
    java.awt.Color var64 = java.awt.Color.getColor("", var54);
    java.awt.color.ColorSpace var65 = var64.getColorSpace();
    boolean var66 = var30.equals((java.lang.Object)var65);
    float[] var67 = null;
    float[] var68 = var22.getColorComponents(var65, var67);
    float[] var71 = new float[] { 10.0f, (-1.0f)};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var72 = var22.getColorComponents(var71);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test464"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.util.Layer var7 = null;
    java.util.Collection var8 = var0.getDomainMarkers(var7);
    org.jfree.chart.axis.AxisSpace var9 = var0.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.CategoryItemRenderer var11 = var0.getRenderer(1);
    var0.configureDomainAxes();
    org.jfree.data.category.DefaultCategoryDataset var13 = new org.jfree.data.category.DefaultCategoryDataset();
    int var14 = var13.getRowCount();
    var13.validateObject();
    org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var19 = null;
    var17.setSeriesURLGenerator(10, var19);
    java.awt.Font var21 = var17.getBaseItemLabelFont();
    var16.setLabelFont(var21);
    java.awt.Paint var23 = var16.getTickMarkPaint();
    float var24 = var16.getTickMarkInsideLength();
    org.jfree.chart.axis.ValueAxis var25 = null;
    org.jfree.chart.renderer.category.BarRenderer var26 = new org.jfree.chart.renderer.category.BarRenderer();
    var26.setBase((-1.0d));
    org.jfree.chart.plot.CategoryPlot var29 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var13, var16, var25, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
    boolean var30 = var16.isTickMarksVisible();
    org.jfree.chart.util.RectangleInsets var31 = var16.getLabelInsets();
    double var32 = var31.getLeft();
    var0.setInsets(var31, false);
    double var36 = var31.extendWidth(8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 14.0d);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test465"); }


    org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
    java.awt.Paint var8 = var0.getSeriesFillPaint(0);
    boolean var9 = var0.getAllowNull();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var12 = null;
    var10.setSeriesOutlineStroke(100, var12);
    java.awt.Paint var15 = null;
    var10.setSeriesOutlinePaint(0, var15, true);
    java.awt.Shape var19 = var10.lookupSeriesShape(10);
    java.awt.Paint var21 = null;
    var10.setSeriesFillPaint(0, var21, false);
    boolean var24 = var10.getBaseShapesVisible();
    java.awt.Paint var25 = null;
    var10.setBasePaint(var25);
    org.jfree.chart.plot.CategoryPlot var27 = var10.getPlot();
    boolean var28 = var10.getAutoPopulateSeriesShape();
    java.lang.Boolean var30 = var10.getSeriesCreateEntities(4);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var33 = null;
    var31.setSeriesOutlineStroke(100, var33);
    var31.removeAnnotations();
    org.jfree.chart.labels.CategoryToolTipGenerator var36 = var31.getBaseToolTipGenerator();
    java.lang.Object var37 = var31.clone();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var38 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var40 = null;
    var38.setSeriesURLGenerator(10, var40);
    boolean var45 = var38.getItemCreateEntity(1, 10, true);
    var38.setSeriesLinesVisible(100, (java.lang.Boolean)true);
    java.awt.Paint var50 = var38.lookupSeriesFillPaint(0);
    var31.setBasePaint(var50);
    var10.setBaseOutlinePaint(var50, true);
    var0.setDefaultOutlinePaint(var50);
    org.jfree.chart.util.DefaultShadowGenerator var56 = new org.jfree.chart.util.DefaultShadowGenerator();
    int var57 = var56.calculateOffsetX();
    float var58 = var56.getShadowOpacity();
    java.awt.Color var59 = var56.getShadowColor();
    var0.setSeriesPaint(1, (java.awt.Paint)var59);
    java.awt.Shape var62 = var0.getSeriesShape(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var63 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var65 = null;
    var63.setSeriesOutlineStroke(100, var65);
    java.awt.Paint var68 = null;
    var63.setSeriesOutlinePaint(0, var68, true);
    var63.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var75 = var63.lookupSeriesShape((-1));
    java.awt.Paint var77 = null;
    var63.setLegendTextPaint(0, var77);
    boolean var79 = var63.getAutoPopulateSeriesOutlineStroke();
    var63.setDataBoundsIncludesVisibleSeriesOnly(false);
    java.awt.Color var85 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    org.jfree.chart.event.ChartChangeEvent var86 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var85);
    var63.setBasePaint((java.awt.Paint)var85, false);
    int var89 = var85.getRed();
    java.awt.Color var90 = var85.brighter();
    var0.setDefaultPaint((java.awt.Paint)var85);
    java.awt.color.ColorSpace var92 = var85.getColorSpace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test466"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    int var1 = var0.getRowCount();
    int var3 = var0.getRowIndex((java.lang.Comparable)"RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]");
    java.lang.Object var4 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test467"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    var0.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
    java.util.List var5 = var0.getColumnKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSelected(3, (-16777216), false, true);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test468() {}
//   public void test468() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test468"); }
// 
// 
//     org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var1 = null;
//     java.awt.geom.Rectangle2D var2 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var4 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var5 = null;
//     boolean var6 = var0.render(var1, var2, 100, var4, var5);
//     org.jfree.chart.event.MarkerChangeEvent var7 = null;
//     var0.markerChanged(var7);
//     org.jfree.chart.plot.Marker var10 = null;
//     org.jfree.chart.util.Layer var11 = null;
//     boolean var13 = var0.removeDomainMarker(10, var10, var11, true);
//     boolean var14 = var0.isRangeZeroBaselineVisible();
//     org.jfree.chart.util.RectangleInsets var15 = var0.getAxisOffset();
//     org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
//     org.jfree.chart.util.RectangleEdge var17 = var0.getRangeAxisEdge();
//     org.jfree.chart.plot.Marker var18 = null;
//     org.jfree.chart.util.Layer var19 = null;
//     var0.addRangeMarker(var18, var19);
// 
//   }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test469"); }


    org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList(2);
    java.lang.Object var2 = null;
    boolean var3 = var1.equals(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test470"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    var7.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var10 = var7.getDomainAxis();
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var7);
    var0.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
    var0.setCategoryMargin(1.0d);
    org.jfree.chart.axis.CategoryLabelPositions var17 = var0.getCategoryLabelPositions();
    var0.configure();
    java.awt.geom.Rectangle2D var21 = null;
    org.jfree.chart.util.RectangleEdge var22 = null;
    double var23 = var0.getCategoryStart((-2), 4, var21, var22);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var26 = null;
    var24.setSeriesURLGenerator(10, var26);
    boolean var31 = var24.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var32 = new org.jfree.chart.plot.CategoryPlot();
    var24.setPlot(var32);
    var32.setDomainCrosshairRowKey((java.lang.Comparable)(-1.0f));
    boolean var36 = var0.equals((java.lang.Object)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test471() {}
//   public void test471() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test471"); }
// 
// 
//     java.awt.Color var3 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
//     java.awt.image.ColorModel var4 = null;
//     java.awt.Rectangle var5 = null;
//     java.awt.geom.Rectangle2D var6 = null;
//     java.awt.geom.AffineTransform var7 = null;
//     java.awt.RenderingHints var8 = null;
//     java.awt.PaintContext var9 = var3.createContext(var4, var5, var6, var7, var8);
//     org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
//     var10.setRangeCrosshairValue((-1.0d));
//     var10.setNoDataMessage("");
//     java.awt.Color var18 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var10.setRangeZeroBaselinePaint((java.awt.Paint)var18);
//     java.awt.image.ColorModel var20 = null;
//     java.awt.Rectangle var21 = null;
//     java.awt.geom.Rectangle2D var22 = null;
//     java.awt.geom.AffineTransform var23 = null;
//     java.awt.RenderingHints var24 = null;
//     java.awt.PaintContext var25 = var18.createContext(var20, var21, var22, var23, var24);
//     java.awt.color.ColorSpace var26 = var18.getColorSpace();
//     org.jfree.chart.renderer.RenderAttributes var27 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var30 = var27.getItemShape(0, 0);
//     java.awt.Paint var33 = var27.getItemOutlinePaint(2, 0);
//     org.jfree.chart.plot.CategoryPlot var34 = new org.jfree.chart.plot.CategoryPlot();
//     var34.setRangeCrosshairValue((-1.0d));
//     var34.setNoDataMessage("");
//     java.awt.Color var42 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var34.setRangeZeroBaselinePaint((java.awt.Paint)var42);
//     var27.setDefaultFillPaint((java.awt.Paint)var42);
//     float[] var45 = null;
//     float[] var46 = var42.getComponents(var45);
//     float[] var47 = var3.getColorComponents(var26, var46);
//     
//     // Checks the contract:  equals-hashcode on var10 and var34
//     assertTrue("Contract failed: equals-hashcode on var10 and var34", var10.equals(var34) ? var10.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var10
//     assertTrue("Contract failed: equals-hashcode on var34 and var10", var34.equals(var10) ? var34.hashCode() == var10.hashCode() : true);
// 
//   }

  public void test472() {}
//   public void test472() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test472"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var0.setSeriesItemLabelsVisible(1, (java.lang.Boolean)true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var5 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var7 = null;
//     var5.setSeriesOutlineStroke(100, var7);
//     java.awt.Paint var10 = null;
//     var5.setSeriesOutlinePaint(0, var10, true);
//     java.awt.Shape var14 = var5.lookupSeriesShape(10);
//     java.awt.Paint var16 = null;
//     var5.setSeriesFillPaint(0, var16, false);
//     boolean var19 = var5.getBaseShapesVisible();
//     java.awt.Paint var20 = null;
//     var5.setBasePaint(var20);
//     org.jfree.chart.plot.CategoryPlot var22 = var5.getPlot();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var26 = null;
//     var24.setSeriesURLGenerator(10, var26);
//     org.jfree.chart.labels.ItemLabelPosition var29 = null;
//     var24.setSeriesNegativeItemLabelPosition(0, var29, true);
//     java.awt.Stroke var33 = var24.lookupSeriesStroke(0);
//     var24.setBaseShapesFilled(false);
//     org.jfree.chart.labels.ItemLabelPosition var37 = var24.getSeriesNegativeItemLabelPosition(3);
//     org.jfree.chart.axis.CategoryAxis var38 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var41 = null;
//     var39.setSeriesURLGenerator(10, var41);
//     java.awt.Font var43 = var39.getBaseItemLabelFont();
//     var38.setLabelFont(var43);
//     boolean var45 = var37.equals((java.lang.Object)var43);
//     var5.setLegendTextFont(4, var43);
//     java.awt.Color var50 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var5.setBaseOutlinePaint((java.awt.Paint)var50, false);
//     var0.setLegendTextPaint(15, (java.awt.Paint)var50);
//     
//     // Checks the contract:  equals-hashcode on var39 and var0
//     assertTrue("Contract failed: equals-hashcode on var39 and var0", var39.equals(var0) ? var39.hashCode() == var0.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var39 and var0.", var39.equals(var0) == var0.equals(var39));
// 
//   }

  public void test473() {}
//   public void test473() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test473"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var3 = null;
//     var1.setSeriesURLGenerator(10, var3);
//     java.awt.Font var5 = var1.getBaseItemLabelFont();
//     var0.setLabelFont(var5);
//     java.awt.Graphics2D var7 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     java.awt.geom.Rectangle2D var10 = null;
//     org.jfree.data.category.CategoryDataset var11 = null;
//     org.jfree.chart.axis.CategoryAxis var12 = null;
//     org.jfree.chart.axis.ValueAxis var13 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var16 = null;
//     var14.setSeriesOutlineStroke(100, var16);
//     java.awt.Paint var19 = null;
//     var14.setSeriesOutlinePaint(0, var19, true);
//     java.awt.Shape var23 = var14.lookupSeriesShape(10);
//     java.awt.Paint var25 = null;
//     var14.setSeriesFillPaint(0, var25, false);
//     boolean var28 = var14.getBaseShapesVisible();
//     java.awt.Paint var29 = var14.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var30 = var14.getBaseNegativeItemLabelPosition();
//     var14.setBaseSeriesVisible(false);
//     org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot(var11, var12, var13, (org.jfree.chart.renderer.category.CategoryItemRenderer)var14);
//     org.jfree.chart.plot.PlotRenderingInfo var36 = null;
//     java.awt.geom.Point2D var37 = null;
//     var33.zoomDomainAxes(0.0d, 0.0d, var36, var37);
//     org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var40 = null;
//     java.awt.geom.Rectangle2D var41 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var43 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var44 = null;
//     boolean var45 = var39.render(var40, var41, 100, var43, var44);
//     org.jfree.chart.plot.Plot var46 = var39.getParent();
//     org.jfree.chart.axis.CategoryAxis var47 = null;
//     org.jfree.chart.axis.CategoryAxis[] var48 = new org.jfree.chart.axis.CategoryAxis[] { var47};
//     var39.setDomainAxes(var48);
//     var33.setDomainAxes(var48);
//     org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var52 = null;
//     java.awt.geom.Rectangle2D var53 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var55 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var56 = null;
//     boolean var57 = var51.render(var52, var53, 100, var55, var56);
//     org.jfree.chart.event.MarkerChangeEvent var58 = null;
//     var51.markerChanged(var58);
//     var51.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.RectangleInsets var62 = var51.getInsets();
//     double var64 = var62.calculateRightOutset(0.0d);
//     org.jfree.chart.util.UnitType var65 = var62.getUnitType();
//     double var67 = var62.trimWidth(2.0d);
//     var33.setAxisOffset(var62);
//     org.jfree.chart.util.RectangleEdge var70 = var33.getRangeAxisEdge(0);
//     org.jfree.chart.plot.PlotRenderingInfo var71 = null;
//     org.jfree.chart.axis.AxisState var72 = var0.draw(var7, (-6.0d), var9, var10, var70, var71);
// 
//   }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test474"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.axis.AxisSpace var12 = null;
    var0.setFixedRangeAxisSpace(var12);
    double var14 = var0.getRangeCrosshairValue();
    org.jfree.chart.plot.Marker var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var16 = var0.removeRangeMarker(var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test475"); }


    int var3 = java.awt.Color.HSBtoRGB((-1.0f), (-1.0f), 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-8323073));

  }

  public void test476() {}
//   public void test476() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test476"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
//     var0.setSeriesOutlinePaint(0, (java.awt.Paint)var5);
//     java.awt.Paint var8 = var0.getSeriesFillPaint(0);
//     java.awt.Paint var11 = var0.getItemOutlinePaint((-16777216), (-16777216));
//     java.lang.Boolean var14 = var0.getCreateEntity(5, 255);
// 
//   }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test477"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var6 = null;
    var4.setSeriesOutlineStroke(100, var6);
    java.awt.Paint var9 = null;
    var4.setSeriesOutlinePaint(0, var9, true);
    var4.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var16 = var4.lookupSeriesShape((-1));
    org.jfree.chart.entity.ChartEntity var17 = new org.jfree.chart.entity.ChartEntity(var16);
    java.awt.Color var21 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var22 = var21.getRed();
    org.jfree.chart.LegendItem var23 = new org.jfree.chart.LegendItem("", "ChartEntity: tooltip = null", "hi!", "TextAnchor.CENTER", var16, (java.awt.Paint)var21);
    java.awt.Paint var24 = var23.getFillPaint();
    java.awt.Paint var25 = var23.getLinePaint();
    boolean var26 = var23.isShapeFilled();
    boolean var27 = var23.isLineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test478"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    org.jfree.chart.axis.AxisSpace var12 = null;
    var0.setFixedRangeAxisSpace(var12);
    double var14 = var0.getRangeCrosshairValue();
    var0.setAnchorValue((-0.7853981633974483d));
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var19 = null;
    java.awt.geom.Rectangle2D var20 = null;
    org.jfree.chart.plot.PlotRenderingInfo var22 = null;
    org.jfree.chart.plot.CategoryCrosshairState var23 = null;
    boolean var24 = var18.render(var19, var20, 100, var22, var23);
    org.jfree.chart.event.MarkerChangeEvent var25 = null;
    var18.markerChanged(var25);
    org.jfree.chart.plot.Marker var28 = null;
    org.jfree.chart.util.Layer var29 = null;
    boolean var31 = var18.removeDomainMarker(10, var28, var29, true);
    org.jfree.chart.axis.AxisLocation var33 = var18.getDomainAxisLocation(0);
    org.jfree.chart.axis.AxisLocation var34 = var33.getOpposite();
    var0.setDomainAxisLocation(3, var34, false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var37 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var39 = null;
    var37.setSeriesOutlineStroke(100, var39);
    java.awt.Paint var42 = null;
    var37.setSeriesOutlinePaint(0, var42, true);
    java.awt.Shape var46 = var37.lookupSeriesShape(10);
    java.awt.Paint var48 = null;
    var37.setSeriesFillPaint(0, var48, false);
    boolean var51 = var37.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var55 = var37.getPositiveItemLabelPosition(1, 10, true);
    java.awt.Paint var56 = var37.getBasePaint();
    boolean var57 = var37.getBaseItemLabelsVisible();
    org.jfree.chart.plot.CategoryPlot var58 = new org.jfree.chart.plot.CategoryPlot();
    var58.setRangeCrosshairValue((-1.0d));
    var58.setNoDataMessage("");
    java.awt.Color var66 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    var58.setRangeZeroBaselinePaint((java.awt.Paint)var66);
    org.jfree.chart.util.Layer var68 = null;
    java.util.Collection var69 = var58.getDomainMarkers(var68);
    boolean var70 = var37.hasListener((java.util.EventListener)var58);
    java.awt.Paint var71 = var58.getOutlinePaint();
    org.jfree.chart.plot.PlotOrientation var72 = var58.getOrientation();
    java.lang.String var73 = var72.toString();
    java.lang.String var74 = var72.toString();
    org.jfree.chart.util.RectangleEdge var75 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var34, var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var73.equals("PlotOrientation.VERTICAL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var74.equals("PlotOrientation.VERTICAL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test479"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.setMaximumCategoryLabelLines(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var15 = null;
    var13.setSeriesOutlineStroke(100, var15);
    java.awt.Paint var18 = null;
    var13.setSeriesOutlinePaint(0, var18, true);
    java.awt.Shape var22 = var13.lookupSeriesShape(10);
    java.awt.Paint var24 = null;
    var13.setSeriesFillPaint(0, var24, false);
    boolean var27 = var13.getBaseShapesVisible();
    java.awt.Paint var28 = null;
    var13.setBasePaint(var28);
    var13.setAutoPopulateSeriesOutlineStroke(false);
    boolean var35 = var13.getItemCreateEntity(1, 0, false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var38 = null;
    var36.setSeriesURLGenerator(10, var38);
    org.jfree.chart.labels.ItemLabelPosition var41 = var36.getSeriesPositiveItemLabelPosition(1);
    var36.setItemLabelAnchorOffset(1.0d);
    java.awt.Color var48 = java.awt.Color.getHSBColor(10.0f, 100.0f, 0.0f);
    int var49 = var48.getRed();
    java.awt.Color var50 = java.awt.Color.getColor("", var48);
    var36.setBasePaint((java.awt.Paint)var48);
    var13.setBaseLegendTextPaint((java.awt.Paint)var48);
    boolean var53 = var0.equals((java.lang.Object)var13);
    org.jfree.chart.plot.DefaultDrawingSupplier var55 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    org.jfree.chart.JFreeChart var56 = null;
    org.jfree.chart.event.ChartChangeEvent var57 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var55, var56);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var58 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var60 = null;
    var58.setSeriesOutlineStroke(100, var60);
    java.awt.Paint var63 = null;
    var58.setSeriesOutlinePaint(0, var63, true);
    java.awt.Shape var67 = var58.lookupSeriesShape(10);
    java.awt.Paint var69 = null;
    var58.setSeriesFillPaint(0, var69, false);
    boolean var72 = var58.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var74 = var58.getSeriesNegativeItemLabelPosition(2);
    java.awt.Font var75 = var58.getBaseItemLabelFont();
    boolean var76 = var55.equals((java.lang.Object)var58);
    java.awt.Paint var77 = var55.getNextPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.setSeriesPaint((-2), var77);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test480"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    double var1 = var0.getBase();
    org.jfree.chart.renderer.category.BarPainter var2 = org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter();
    var0.setBarPainter(var2);
    java.awt.Shape var5 = var0.lookupLegendShape(1);
    org.jfree.chart.entity.ChartEntity var8 = new org.jfree.chart.entity.ChartEntity(var5, "", "AxisLocation.TOP_OR_RIGHT");
    java.lang.String var9 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ChartEntity: tooltip = "+ "'", var9.equals("ChartEntity: tooltip = "));

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test481"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    java.awt.Paint var3 = var0.getShadowPaint();
    org.jfree.chart.urls.CategoryURLGenerator var7 = var0.getURLGenerator((-1), 10, false);
    double var8 = var0.getBase();
    var0.setShadowYOffset(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test482() {}
//   public void test482() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test482"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var2 = null;
//     var0.setSeriesOutlineStroke(100, var2);
//     java.awt.Paint var5 = null;
//     var0.setSeriesOutlinePaint(0, var5, true);
//     java.awt.Shape var9 = var0.lookupSeriesShape(10);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var12 = null;
//     var10.setSeriesOutlineStroke(100, var12);
//     java.awt.Paint var15 = null;
//     var10.setSeriesOutlinePaint(0, var15, true);
//     org.jfree.chart.labels.ItemLabelPosition var18 = var10.getBaseNegativeItemLabelPosition();
//     var0.setBaseNegativeItemLabelPosition(var18);
//     org.jfree.chart.labels.ItemLabelAnchor var20 = var18.getItemLabelAnchor();
//     java.lang.String var21 = var20.toString();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var24 = null;
//     var22.setSeriesOutlineStroke(100, var24);
//     java.awt.Paint var27 = null;
//     var22.setSeriesOutlinePaint(0, var27, true);
//     java.awt.Shape var31 = var22.lookupSeriesShape(10);
//     java.awt.Paint var33 = null;
//     var22.setSeriesFillPaint(0, var33, false);
//     boolean var36 = var22.getBaseShapesVisible();
//     java.awt.Paint var37 = var22.getBaseOutlinePaint();
//     org.jfree.chart.labels.ItemLabelPosition var38 = var22.getBaseNegativeItemLabelPosition();
//     org.jfree.chart.text.TextAnchor var39 = var38.getRotationAnchor();
//     org.jfree.data.category.DefaultCategoryDataset var40 = new org.jfree.data.category.DefaultCategoryDataset();
//     int var41 = var40.getRowCount();
//     org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
//     org.jfree.chart.axis.AxisLocation var44 = var42.getRangeAxisLocation(10);
//     boolean var45 = var42.canSelectByRegion();
//     org.jfree.data.category.DefaultCategoryDataset var47 = new org.jfree.data.category.DefaultCategoryDataset();
//     var47.addValue((-14.0d), (java.lang.Comparable)100.0f, (java.lang.Comparable)(-0.7853981633974483d));
//     var42.setDataset(3, (org.jfree.data.category.CategoryDataset)var47);
//     int var53 = var47.getColumnCount();
//     var40.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState)var47);
//     boolean var55 = var39.equals((java.lang.Object)var40);
//     org.jfree.chart.labels.ItemLabelPosition var56 = new org.jfree.chart.labels.ItemLabelPosition(var20, var39);
//     
//     // Checks the contract:  equals-hashcode on var0 and var22
//     assertTrue("Contract failed: equals-hashcode on var0 and var22", var0.equals(var22) ? var0.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var10 and var22
//     assertTrue("Contract failed: equals-hashcode on var10 and var22", var10.equals(var22) ? var10.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var0
//     assertTrue("Contract failed: equals-hashcode on var22 and var0", var22.equals(var0) ? var22.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var10
//     assertTrue("Contract failed: equals-hashcode on var22 and var10", var22.equals(var10) ? var22.hashCode() == var10.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var38
//     assertTrue("Contract failed: equals-hashcode on var18 and var38", var18.equals(var38) ? var18.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var18
//     assertTrue("Contract failed: equals-hashcode on var38 and var18", var38.equals(var18) ? var38.hashCode() == var18.hashCode() : true);
// 
//   }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test483"); }


    org.jfree.chart.util.BooleanList var0 = new org.jfree.chart.util.BooleanList();
    var0.setBoolean(15, (java.lang.Boolean)false);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test484"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    boolean var2 = var0.isDrawBarOutline();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var5 = null;
    var3.setSeriesURLGenerator(10, var5);
    boolean var10 = var3.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
    var3.setPlot(var11);
    boolean var13 = var0.equals((java.lang.Object)var3);
    org.jfree.chart.plot.DrawingSupplier var14 = var3.getDrawingSupplier();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setItemMargin(4.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test485() {}
//   public void test485() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test485"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var2 = null;
//     java.awt.geom.Rectangle2D var3 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var5 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var6 = null;
//     boolean var7 = var1.render(var2, var3, 100, var5, var6);
//     org.jfree.chart.plot.Plot var8 = var1.getParent();
//     org.jfree.data.general.DatasetGroup var9 = var1.getDatasetGroup();
//     java.awt.Paint var10 = var1.getDomainGridlinePaint();
//     var0.setDefaultPaint(var10);
//     java.awt.Font var14 = var0.getItemLabelFont((-254), 100);
// 
//   }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test486"); }


    java.text.AttributedString var0 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var6 = null;
    var4.setSeriesURLGenerator(10, var6);
    org.jfree.chart.labels.ItemLabelPosition var9 = null;
    var4.setSeriesNegativeItemLabelPosition(0, var9, true);
    java.awt.Stroke var13 = var4.lookupSeriesStroke(0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var17 = null;
    var15.setSeriesOutlineStroke(100, var17);
    java.awt.Paint var20 = null;
    var15.setSeriesOutlinePaint(0, var20, true);
    var15.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var27 = var15.lookupSeriesShape((-1));
    var4.setSeriesShape(0, var27);
    java.awt.Shape var33 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var36 = null;
    var34.setSeriesURLGenerator(10, var36);
    boolean var41 = var34.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
    var34.setPlot(var42);
    org.jfree.chart.axis.ValueAxis var44 = var42.getRangeAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var45 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Paint var47 = var45.getSeriesFillPaint(0);
    java.awt.Paint var51 = var45.getItemPaint(0, 0, true);
    var42.setNoDataMessagePaint(var51);
    org.jfree.chart.plot.CategoryPlot var53 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var54 = null;
    java.awt.geom.Rectangle2D var55 = null;
    org.jfree.chart.plot.PlotRenderingInfo var57 = null;
    org.jfree.chart.plot.CategoryCrosshairState var58 = null;
    boolean var59 = var53.render(var54, var55, 100, var57, var58);
    org.jfree.chart.event.MarkerChangeEvent var60 = null;
    var53.markerChanged(var60);
    var53.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.RectangleInsets var64 = var53.getInsets();
    java.awt.Stroke var65 = var53.getRangeZeroBaselineStroke();
    java.awt.Color var69 = java.awt.Color.getHSBColor(10.0f, 10.0f, 10.0f);
    org.jfree.chart.LegendItem var70 = new org.jfree.chart.LegendItem("", "RectangleInsets[t=4.0,l=8.0,b=4.0,r=8.0]", "-3,-3,3,3", "", var33, var51, var65, (java.awt.Paint)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var71 = new org.jfree.chart.LegendItem(var0, "ChartChangeEventType.GENERAL", "AxisLocation.TOP_OR_RIGHT", "SortOrder.ASCENDING", var27, var51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test487() {}
//   public void test487() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test487"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
//     boolean var1 = var0.isDrawBarOutline();
//     boolean var2 = var0.isDrawBarOutline();
//     java.awt.Paint var3 = var0.getShadowPaint();
//     org.jfree.chart.urls.CategoryURLGenerator var7 = var0.getURLGenerator((-1), 10, false);
//     org.jfree.chart.labels.CategoryToolTipGenerator var9 = var0.getSeriesToolTipGenerator(3);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     java.awt.Stroke var12 = null;
//     var10.setSeriesOutlineStroke(100, var12);
//     java.awt.Paint var15 = null;
//     var10.setSeriesOutlinePaint(0, var15, true);
//     java.awt.Shape var19 = var10.lookupSeriesShape(10);
//     java.awt.Paint var21 = null;
//     var10.setSeriesFillPaint(0, var21, false);
//     boolean var24 = var10.getBaseShapesVisible();
//     java.awt.Paint var25 = null;
//     var10.setBasePaint(var25);
//     var10.setAutoPopulateSeriesOutlineStroke(false);
//     boolean var32 = var10.getItemCreateEntity(1, 0, false);
//     org.jfree.chart.labels.ItemLabelPosition var36 = var10.getPositiveItemLabelPosition(0, 15, true);
//     var0.setPositiveItemLabelPositionFallback(var36);
//     java.awt.Graphics2D var38 = null;
//     org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var40 = null;
//     java.awt.geom.Rectangle2D var41 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var43 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var44 = null;
//     boolean var45 = var39.render(var40, var41, 100, var43, var44);
//     org.jfree.chart.event.MarkerChangeEvent var46 = null;
//     var39.markerChanged(var46);
//     var39.setDrawSharedDomainAxis(true);
//     int var50 = var39.getBackgroundImageAlignment();
//     boolean var51 = var39.canSelectByRegion();
//     org.jfree.data.category.CategoryDataset var53 = var39.getDataset(15);
//     org.jfree.chart.plot.CategoryPlot var54 = new org.jfree.chart.plot.CategoryPlot();
//     java.awt.Graphics2D var55 = null;
//     java.awt.geom.Rectangle2D var56 = null;
//     org.jfree.chart.plot.PlotRenderingInfo var58 = null;
//     org.jfree.chart.plot.CategoryCrosshairState var59 = null;
//     boolean var60 = var54.render(var55, var56, 100, var58, var59);
//     org.jfree.chart.event.MarkerChangeEvent var61 = null;
//     var54.markerChanged(var61);
//     var54.setDrawSharedDomainAxis(true);
//     int var65 = var54.getBackgroundImageAlignment();
//     boolean var66 = var54.canSelectByRegion();
//     int var67 = var54.getDatasetCount();
//     java.lang.String var68 = var54.getNoDataMessage();
//     org.jfree.chart.plot.DatasetRenderingOrder var69 = var54.getDatasetRenderingOrder();
//     org.jfree.chart.axis.CategoryAxis var70 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var71 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var73 = null;
//     var71.setSeriesURLGenerator(10, var73);
//     java.awt.Font var75 = var71.getBaseItemLabelFont();
//     var70.setLabelFont(var75);
//     org.jfree.chart.plot.CategoryPlot var77 = new org.jfree.chart.plot.CategoryPlot();
//     var77.setWeight(10);
//     org.jfree.chart.axis.CategoryAxis var80 = var77.getDomainAxis();
//     var70.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var77);
//     var70.addCategoryLabelToolTip((java.lang.Comparable)"ChartEntity: tooltip = null", "NOID");
//     var54.setDomainAxis(var70);
//     java.awt.Stroke var86 = var70.getAxisLineStroke();
//     float var87 = var70.getMinorTickMarkInsideLength();
//     org.jfree.chart.plot.CategoryMarker var88 = null;
//     java.awt.geom.Rectangle2D var89 = null;
//     var0.drawDomainMarker(var38, var39, var70, var88, var89);
// 
//   }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test488"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    boolean var8 = var1.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var9 = new org.jfree.chart.plot.CategoryPlot();
    var1.setPlot(var9);
    org.jfree.chart.axis.ValueAxis var11 = var9.getRangeAxis();
    org.jfree.chart.plot.PlotRenderingInfo var14 = null;
    java.awt.geom.Point2D var15 = null;
    var9.zoomDomainAxes(1.0d, 4.0d, var14, var15);
    org.jfree.chart.axis.AxisLocation var18 = var9.getDomainAxisLocation((-1));
    boolean var19 = var0.equals((java.lang.Object)var9);
    java.util.List var20 = var0.getKeys();
    int var21 = var0.getItemCount();
    int var22 = var0.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test489"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = null;
    var0.setSeriesURLGenerator(10, var2);
    boolean var7 = var0.getItemCreateEntity(1, 10, true);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    var0.setPlot(var8);
    org.jfree.chart.axis.ValueAxis var10 = var8.getRangeAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Paint var13 = var11.getSeriesFillPaint(0);
    java.awt.Paint var17 = var11.getItemPaint(0, 0, true);
    var8.setNoDataMessagePaint(var17);
    java.lang.Comparable var19 = var8.getDomainCrosshairColumnKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test490"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    int var13 = var0.getDatasetCount();
    org.jfree.chart.JFreeChart var14 = null;
    org.jfree.chart.event.ChartChangeEventType var15 = null;
    org.jfree.chart.event.ChartChangeEvent var16 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var0, var14, var15);
    org.jfree.data.category.DefaultCategoryDataset var17 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.chart.axis.CategoryAxis var18 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var21 = null;
    var19.setSeriesURLGenerator(10, var21);
    java.awt.Font var23 = var19.getBaseItemLabelFont();
    var18.setLabelFont(var23);
    java.lang.Object var25 = var18.clone();
    org.jfree.chart.axis.ValueAxis var26 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var29 = null;
    var27.setSeriesURLGenerator(10, var29);
    org.jfree.chart.labels.ItemLabelPosition var32 = var27.getSeriesPositiveItemLabelPosition(1);
    org.jfree.chart.plot.CategoryPlot var33 = var27.getPlot();
    org.jfree.chart.plot.CategoryPlot var34 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var17, var18, var26, (org.jfree.chart.renderer.category.CategoryItemRenderer)var27);
    boolean var35 = var18.isTickLabelsVisible();
    java.util.List var36 = var0.getCategoriesForAxis(var18);
    var18.setTickMarkOutsideLength(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test491"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var1 = null;
    org.jfree.chart.axis.ValueAxis var2 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var5 = null;
    var3.setSeriesOutlineStroke(100, var5);
    java.awt.Paint var8 = null;
    var3.setSeriesOutlinePaint(0, var8, true);
    java.awt.Shape var12 = var3.lookupSeriesShape(10);
    java.awt.Paint var14 = null;
    var3.setSeriesFillPaint(0, var14, false);
    boolean var17 = var3.getBaseShapesVisible();
    java.awt.Paint var18 = var3.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var19 = var3.getBaseNegativeItemLabelPosition();
    var3.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var22 = new org.jfree.chart.plot.CategoryPlot(var0, var1, var2, (org.jfree.chart.renderer.category.CategoryItemRenderer)var3);
    org.jfree.chart.axis.AxisSpace var23 = null;
    var22.setFixedRangeAxisSpace(var23);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var28 = null;
    var26.setSeriesOutlineStroke(100, var28);
    java.awt.Paint var31 = null;
    var26.setSeriesOutlinePaint(0, var31, true);
    var26.setSeriesVisibleInLegend(0, (java.lang.Boolean)true);
    java.awt.Shape var38 = var26.lookupSeriesShape((-1));
    java.awt.Paint var40 = null;
    var26.setLegendTextPaint(0, var40);
    boolean var42 = var26.getAutoPopulateSeriesOutlineStroke();
    var26.setDataBoundsIncludesVisibleSeriesOnly(false);
    var22.setRenderer(1, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
    boolean var46 = var26.getUseSeriesOffset();
    boolean var49 = var26.getItemLineVisible((-254), (-8323073));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test492"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    var0.setRangeCrosshairValue((-1.0d));
    var0.setNoDataMessage("");
    org.jfree.data.category.CategoryDataset var5 = null;
    var0.setDataset(var5);
    org.jfree.chart.event.PlotChangeListener var7 = null;
    var0.addChangeListener(var7);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var11 = null;
    var9.setSeriesURLGenerator(10, var11);
    org.jfree.chart.labels.ItemLabelPosition var14 = null;
    var9.setSeriesNegativeItemLabelPosition(0, var14, true);
    java.awt.Stroke var18 = var9.lookupSeriesStroke(10);
    var0.setDomainGridlineStroke(var18);
    org.jfree.chart.renderer.RenderAttributes var20 = new org.jfree.chart.renderer.RenderAttributes();
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var22 = null;
    java.awt.geom.Rectangle2D var23 = null;
    org.jfree.chart.plot.PlotRenderingInfo var25 = null;
    org.jfree.chart.plot.CategoryCrosshairState var26 = null;
    boolean var27 = var21.render(var22, var23, 100, var25, var26);
    org.jfree.chart.util.Layer var28 = null;
    java.util.Collection var29 = var21.getDomainMarkers(var28);
    org.jfree.chart.axis.AxisSpace var30 = var21.getFixedRangeAxisSpace();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var33 = null;
    var31.setSeriesURLGenerator(10, var33);
    org.jfree.chart.labels.ItemLabelPosition var36 = null;
    var31.setSeriesNegativeItemLabelPosition(0, var36, true);
    java.awt.Stroke var40 = var31.lookupSeriesStroke(0);
    var21.setRangeGridlineStroke(var40);
    java.awt.Paint var42 = var21.getOutlinePaint();
    var20.setDefaultPaint(var42);
    org.jfree.chart.renderer.RenderAttributes var45 = new org.jfree.chart.renderer.RenderAttributes();
    java.awt.Color var50 = java.awt.Color.getHSBColor(100.0f, 0.0f, 0.0f);
    var45.setSeriesPaint(0, (java.awt.Paint)var50);
    var20.setSeriesFillPaint(3, (java.awt.Paint)var50);
    var0.setRangeGridlinePaint((java.awt.Paint)var50);
    org.jfree.chart.renderer.category.BarRenderer var55 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var58 = null;
    var56.setSeriesOutlineStroke(100, var58);
    java.awt.Paint var61 = null;
    var56.setSeriesOutlinePaint(0, var61, true);
    java.awt.Shape var65 = var56.lookupSeriesShape(10);
    java.awt.Paint var67 = null;
    var56.setSeriesFillPaint(0, var67, false);
    boolean var70 = var56.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var72 = var56.getSeriesNegativeItemLabelPosition(2);
    var55.setPositiveItemLabelPositionFallback(var72);
    var55.setSeriesItemLabelsVisible(4, (java.lang.Boolean)true);
    org.jfree.chart.urls.CategoryURLGenerator var80 = var55.getURLGenerator(1, 100, true);
    var55.setShadowYOffset(0.0d);
    org.jfree.data.category.DefaultCategoryDataset var83 = new org.jfree.data.category.DefaultCategoryDataset();
    var83.addValue((java.lang.Number)(-14.0d), (java.lang.Comparable)(-16777216), (java.lang.Comparable)3);
    java.util.List var88 = var83.getRowKeys();
    int var90 = var83.getColumnIndex((java.lang.Comparable)100L);
    org.jfree.data.Range var92 = var55.findRangeBounds((org.jfree.data.category.CategoryDataset)var83, false);
    java.lang.Object var93 = var83.clone();
    java.util.List var94 = var83.getRowKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToDomainAxes((-1), var94);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test493"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var3 = null;
    var1.setSeriesOutlineStroke(100, var3);
    java.awt.Paint var6 = null;
    var1.setSeriesOutlinePaint(0, var6, true);
    java.awt.Shape var10 = var1.lookupSeriesShape(10);
    java.awt.Paint var12 = null;
    var1.setSeriesFillPaint(0, var12, false);
    boolean var15 = var1.getBaseShapesVisible();
    org.jfree.chart.labels.ItemLabelPosition var17 = var1.getSeriesNegativeItemLabelPosition(2);
    var0.setPositiveItemLabelPositionFallback(var17);
    double var19 = var17.getAngle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);

  }

  public void test494() {}
//   public void test494() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test494"); }
// 
// 
//     org.jfree.chart.renderer.RenderAttributes var0 = new org.jfree.chart.renderer.RenderAttributes();
//     java.awt.Shape var3 = var0.getItemShape(0, 0);
//     java.awt.Paint var4 = var0.getDefaultLabelPaint();
//     java.lang.Boolean var5 = var0.getDefaultLabelVisible();
//     java.awt.Stroke var8 = var0.getItemStroke(0, 0);
//     java.awt.Paint var11 = var0.getItemFillPaint(100, 0);
//     boolean var12 = var0.getAllowNull();
//     java.awt.Paint var14 = var0.getSeriesPaint((-1));
//     java.awt.Font var17 = var0.getItemLabelFont(4, 0);
// 
//   }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test495"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    int var1 = var0.getRowCount();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var4 = null;
    var2.setSeriesURLGenerator(10, var4);
    org.jfree.data.category.CategoryDataset var6 = null;
    org.jfree.chart.axis.CategoryAxis var7 = null;
    org.jfree.chart.axis.ValueAxis var8 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var11 = null;
    var9.setSeriesOutlineStroke(100, var11);
    java.awt.Paint var14 = null;
    var9.setSeriesOutlinePaint(0, var14, true);
    java.awt.Shape var18 = var9.lookupSeriesShape(10);
    java.awt.Paint var20 = null;
    var9.setSeriesFillPaint(0, var20, false);
    boolean var23 = var9.getBaseShapesVisible();
    java.awt.Paint var24 = var9.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var25 = var9.getBaseNegativeItemLabelPosition();
    var9.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot(var6, var7, var8, (org.jfree.chart.renderer.category.CategoryItemRenderer)var9);
    boolean var29 = var2.hasListener((java.util.EventListener)var28);
    java.awt.Stroke var33 = var2.getItemOutlineStroke((-1), 100, false);
    boolean var34 = var0.equals((java.lang.Object)false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeColumn((java.lang.Comparable)"");
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test496"); }


    org.jfree.chart.LegendItemCollection var0 = new org.jfree.chart.LegendItemCollection();
    java.awt.Color var5 = java.awt.Color.getHSBColor(10.0f, 10.0f, 0.0f);
    org.jfree.chart.LegendItem var6 = new org.jfree.chart.LegendItem("TextAnchor.CENTER", (java.awt.Paint)var5);
    java.awt.Shape var7 = var6.getShape();
    boolean var8 = var0.equals((java.lang.Object)var6);
    java.awt.Paint var9 = var6.getLinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test497"); }


    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var2 = null;
    java.awt.geom.Rectangle2D var3 = null;
    org.jfree.chart.plot.PlotRenderingInfo var5 = null;
    org.jfree.chart.plot.CategoryCrosshairState var6 = null;
    boolean var7 = var1.render(var2, var3, 100, var5, var6);
    org.jfree.chart.event.MarkerChangeEvent var8 = null;
    var1.markerChanged(var8);
    var1.setDrawSharedDomainAxis(true);
    int var12 = var1.getBackgroundImageAlignment();
    boolean var13 = var1.canSelectByRegion();
    int var14 = var1.getDatasetCount();
    org.jfree.chart.JFreeChart var15 = null;
    org.jfree.chart.event.ChartChangeEventType var16 = null;
    org.jfree.chart.event.ChartChangeEvent var17 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var1, var15, var16);
    java.lang.Object var18 = var17.getSource();
    org.jfree.data.KeyedObject var19 = new org.jfree.data.KeyedObject((java.lang.Comparable)10L, var18);
    java.lang.Comparable var20 = var19.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 10L+ "'", var20.equals(10L));

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test498"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var1 = null;
    java.awt.geom.Rectangle2D var2 = null;
    org.jfree.chart.plot.PlotRenderingInfo var4 = null;
    org.jfree.chart.plot.CategoryCrosshairState var5 = null;
    boolean var6 = var0.render(var1, var2, 100, var4, var5);
    org.jfree.chart.event.MarkerChangeEvent var7 = null;
    var0.markerChanged(var7);
    var0.setDrawSharedDomainAxis(true);
    int var11 = var0.getBackgroundImageAlignment();
    boolean var12 = var0.canSelectByRegion();
    int var13 = var0.getDatasetCount();
    java.lang.String var14 = var0.getNoDataMessage();
    org.jfree.data.category.CategoryDataset var15 = null;
    org.jfree.chart.axis.CategoryAxis var16 = null;
    org.jfree.chart.axis.ValueAxis var17 = null;
    org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var20 = null;
    var18.setSeriesOutlineStroke(100, var20);
    java.awt.Paint var23 = null;
    var18.setSeriesOutlinePaint(0, var23, true);
    java.awt.Shape var27 = var18.lookupSeriesShape(10);
    java.awt.Paint var29 = null;
    var18.setSeriesFillPaint(0, var29, false);
    boolean var32 = var18.getBaseShapesVisible();
    java.awt.Paint var33 = var18.getBaseOutlinePaint();
    org.jfree.chart.labels.ItemLabelPosition var34 = var18.getBaseNegativeItemLabelPosition();
    var18.setBaseSeriesVisible(false);
    org.jfree.chart.plot.CategoryPlot var37 = new org.jfree.chart.plot.CategoryPlot(var15, var16, var17, (org.jfree.chart.renderer.category.CategoryItemRenderer)var18);
    var0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer)var18, false);
    boolean var40 = var18.getBaseLinesVisible();
    java.awt.Paint var41 = var18.getBaseItemLabelPaint();
    org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var43 = null;
    java.awt.geom.Rectangle2D var44 = null;
    org.jfree.chart.plot.PlotRenderingInfo var46 = null;
    org.jfree.chart.plot.CategoryCrosshairState var47 = null;
    boolean var48 = var42.render(var43, var44, 100, var46, var47);
    boolean var49 = var42.isOutlineVisible();
    org.jfree.chart.util.SortOrder var50 = var42.getRowRenderingOrder();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var51 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Stroke var53 = null;
    var51.setSeriesOutlineStroke(100, var53);
    java.awt.Paint var56 = null;
    var51.setSeriesOutlinePaint(0, var56, true);
    boolean var59 = var51.getBaseSeriesVisibleInLegend();
    java.awt.Font var61 = var51.getSeriesItemLabelFont(1);
    int var62 = var42.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var51);
    org.jfree.chart.annotations.CategoryAnnotation var63 = null;
    boolean var64 = var51.removeAnnotation(var63);
    var51.setSeriesShapesVisible(15, true);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var68 = var51.getLegendItemLabelGenerator();
    var18.setLegendItemURLGenerator(var68);
    var18.setBaseLinesVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test499"); }


    org.jfree.chart.renderer.category.BarRenderer var1 = new org.jfree.chart.renderer.category.BarRenderer();
    boolean var2 = var1.isDrawBarOutline();
    boolean var3 = var1.isDrawBarOutline();
    java.awt.Paint var4 = var1.getShadowPaint();
    org.jfree.chart.LegendItem var5 = new org.jfree.chart.LegendItem("ChartEntity: tooltip = null", var4);
    java.awt.Stroke var6 = var5.getLineStroke();
    java.awt.Stroke var7 = var5.getOutlineStroke();
    java.awt.Paint var8 = var5.getOutlinePaint();
    int var9 = var5.getSeriesIndex();
    org.jfree.chart.renderer.RenderAttributes var10 = new org.jfree.chart.renderer.RenderAttributes();
    org.jfree.chart.plot.CategoryPlot var11 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var12 = null;
    java.awt.geom.Rectangle2D var13 = null;
    org.jfree.chart.plot.PlotRenderingInfo var15 = null;
    org.jfree.chart.plot.CategoryCrosshairState var16 = null;
    boolean var17 = var11.render(var12, var13, 100, var15, var16);
    org.jfree.chart.plot.Plot var18 = var11.getParent();
    org.jfree.data.general.DatasetGroup var19 = var11.getDatasetGroup();
    java.awt.Paint var20 = var11.getDomainGridlinePaint();
    var10.setDefaultPaint(var20);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    java.awt.Paint var25 = var23.getSeriesFillPaint(0);
    java.awt.Paint var29 = var23.getItemPaint(0, 0, true);
    var10.setSeriesFillPaint(10, var29);
    var5.setLabelPaint(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test500"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var3 = null;
    var1.setSeriesURLGenerator(10, var3);
    java.awt.Font var5 = var1.getBaseItemLabelFont();
    var0.setLabelFont(var5);
    java.lang.Object var7 = var0.clone();
    var0.setVisible(true);
    boolean var10 = var0.isAxisLineVisible();
    var0.removeCategoryLabelToolTip((java.lang.Comparable)(-16777216));
    java.lang.String var13 = var0.getLabelURL();
    java.lang.String var15 = var0.getCategoryLabelToolTip((java.lang.Comparable)4.0d);
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    java.awt.Graphics2D var17 = null;
    java.awt.geom.Rectangle2D var18 = null;
    org.jfree.chart.plot.PlotRenderingInfo var20 = null;
    org.jfree.chart.plot.CategoryCrosshairState var21 = null;
    boolean var22 = var16.render(var17, var18, 100, var20, var21);
    boolean var23 = var16.isOutlineVisible();
    org.jfree.chart.util.SortOrder var24 = var16.getRowRenderingOrder();
    var0.addChangeListener((org.jfree.chart.event.AxisChangeListener)var16);
    org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var29 = null;
    var27.setSeriesURLGenerator(10, var29);
    java.awt.Font var31 = var27.getBaseItemLabelFont();
    var26.setLabelFont(var31);
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    var33.setWeight(10);
    org.jfree.chart.axis.CategoryAxis var36 = var33.getDomainAxis();
    var26.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var33);
    var0.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var33);
    double var39 = var0.getLowerMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.05d);

  }

}
