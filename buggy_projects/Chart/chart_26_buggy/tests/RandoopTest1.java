
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }


    java.text.NumberFormat var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.labels.StandardCategoryToolTipGenerator var2 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("AreaRendererEndType.TAPER", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }
// 
// 
//     java.lang.Number[] var2 = null;
//     java.lang.Number[][] var3 = new java.lang.Number[][] { var2};
//     org.jfree.data.category.CategoryDataset var4 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("-100,0,0,0,0,100,0,100,0,0,100,0,100,0,0,0,0,-100,0,-100,0,0,-100,0,-100,0", "AxisLocation.BOTTOM_OR_LEFT", var3);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Color var1 = java.awt.Color.decode("");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var0, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var5 = var0.getValue((java.lang.Comparable)0.2d, (java.lang.Comparable)(-1.0f));
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    java.awt.Paint var10 = var0.getSeriesOutlinePaint(10);
    var0.setAutoPopulateSeriesShape(false);
    boolean var15 = var0.getItemLineVisible(0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
    org.jfree.chart.plot.DatasetRenderingOrder var11 = var0.getDatasetRenderingOrder();
    int var12 = var0.getDatasetCount();
    boolean var13 = var0.isDomainZeroBaselineVisible();
    java.awt.Stroke var14 = var0.getDomainCrosshairStroke();
    org.jfree.chart.annotations.XYAnnotation var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }


    org.jfree.chart.block.BorderArrangement var0 = new org.jfree.chart.block.BorderArrangement();
    var0.clear();
    org.jfree.chart.renderer.category.StackedAreaRenderer var4 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var7 = var4.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var8 = null;
    org.jfree.chart.plot.RingPlot var9 = new org.jfree.chart.plot.RingPlot(var8);
    org.jfree.chart.plot.Plot var10 = var9.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var11 = null;
    var9.axisChanged(var11);
    org.jfree.chart.JFreeChart var14 = new org.jfree.chart.JFreeChart("hi!", var7, (org.jfree.chart.plot.Plot)var9, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var18 = var15.getLegendItem((-1), 100);
    var15.setBaseShapesFilled(false);
    java.awt.Paint var22 = var15.getSeriesOutlinePaint((-1));
    boolean var23 = var14.equals((java.lang.Object)var15);
    org.jfree.chart.title.TextTitle var24 = var14.getTitle();
    org.jfree.chart.util.HorizontalAlignment var25 = var24.getTextAlignment();
    java.awt.Graphics2D var26 = null;
    java.awt.geom.Rectangle2D var27 = null;
    java.awt.Shape var29 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.rotateShape(var29, 50.5d, (-1.0f), (-1.0f));
    java.lang.Object var34 = var24.draw(var26, var27, (java.lang.Object)var29);
    org.jfree.chart.renderer.category.MinMaxCategoryRenderer var35 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
    javax.swing.Icon var36 = var35.getObjectIcon();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((org.jfree.chart.block.Block)var24, (java.lang.Object)var36);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    boolean var6 = var0.equals((java.lang.Object)100.0f);
    var0.setSeriesCreateEntities(100, (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }


    org.jfree.chart.axis.AxisCollection var0 = new org.jfree.chart.axis.AxisCollection();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    java.awt.Paint var3 = var2.getTickLabelPaint();
    java.awt.Shape var4 = var2.getDownArrow();
    org.jfree.chart.axis.NumberAxis3D var6 = new org.jfree.chart.axis.NumberAxis3D("");
    var6.configure();
    org.jfree.chart.axis.NumberTickUnit var8 = var6.getTickUnit();
    var2.setTickUnit(var8);
    org.jfree.chart.plot.XYPlot var10 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var12 = new org.jfree.chart.axis.NumberAxis3D("");
    var12.configure();
    org.jfree.chart.util.RectangleInsets var14 = var12.getLabelInsets();
    var10.setAxisOffset(var14);
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var10.setRangeZeroBaselineStroke(var21);
    org.jfree.chart.util.Layer var23 = null;
    java.util.Collection var24 = var10.getDomainMarkers(var23);
    org.jfree.chart.util.RectangleInsets var25 = var10.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var27 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var28 = var27.getEndType();
    java.awt.Stroke var31 = var27.getItemStroke(0, 0);
    var10.setDomainZeroBaselineStroke(var31);
    org.jfree.chart.util.RectangleEdge var33 = var10.getDomainAxisEdge();
    var0.add((org.jfree.chart.axis.Axis)var2, var33);
    java.util.List var35 = var0.getAxesAtRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    int var39 = var38.getDomainAxisCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }


    org.jfree.data.gantt.TaskSeries var1 = new org.jfree.data.gantt.TaskSeries("");
    java.lang.Comparable var2 = var1.getKey();
    org.jfree.data.gantt.Task var3 = null;
    var1.remove(var3);
    java.lang.Object var5 = var1.clone();
    var1.removeAll();
    java.lang.Object var7 = var1.clone();
    int var8 = var1.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.util.List var13 = var12.getSubtitles();
    java.awt.Stroke var14 = var12.getBorderStroke();
    boolean var15 = var12.getAntiAlias();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross(0.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    org.jfree.chart.util.HorizontalAlignment var14 = null;
    org.jfree.chart.util.VerticalAlignment var15 = null;
    org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
    var18.clear();
    org.jfree.chart.block.Arrangement var20 = null;
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
    org.jfree.chart.util.RectangleInsets var22 = var21.getLegendItemGraphicPadding();
    var21.setPadding(0.0d, 90.0d, 1.0d, 10.0d);
    org.jfree.chart.plot.XYPlot var28 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var30 = new org.jfree.chart.axis.NumberAxis3D("");
    var30.configure();
    org.jfree.chart.util.RectangleInsets var32 = var30.getLabelInsets();
    var28.setAxisOffset(var32);
    org.jfree.chart.plot.CategoryMarker var35 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var36 = var35.getOutlineStroke();
    var28.addDomainMarker((org.jfree.chart.plot.Marker)var35);
    org.jfree.chart.renderer.xy.XYItemRenderer var38 = var28.getRenderer();
    org.jfree.chart.axis.ValueAxis var40 = var28.getDomainAxis(1);
    java.awt.Stroke var41 = var28.getDomainCrosshairStroke();
    org.jfree.data.general.PieDataset var42 = null;
    org.jfree.chart.plot.RingPlot var43 = new org.jfree.chart.plot.RingPlot(var42);
    org.jfree.chart.plot.Plot var44 = var43.getRootPlot();
    org.jfree.chart.JFreeChart var45 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var43);
    org.jfree.chart.labels.PieSectionLabelGenerator var46 = var43.getLegendLabelGenerator();
    org.jfree.chart.plot.DrawingSupplier var47 = var43.getDrawingSupplier();
    var43.setSectionDepth(Double.NaN);
    java.awt.Paint var50 = var43.getNoDataMessagePaint();
    var28.setDomainCrosshairPaint(var50);
    var21.setBackgroundPaint(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test15() {}
//   public void test15() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.util.List var13 = var12.getSubtitles();
//     java.awt.Stroke var14 = var12.getBorderStroke();
//     org.jfree.data.general.PieDataset var15 = null;
//     org.jfree.chart.plot.RingPlot var16 = new org.jfree.chart.plot.RingPlot(var15);
//     org.jfree.chart.plot.Plot var17 = var16.getRootPlot();
//     org.jfree.chart.JFreeChart var18 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var16);
//     java.awt.image.BufferedImage var21 = var18.createBufferedImage(1, 2);
//     var12.setBackgroundImage((java.awt.Image)var21);
//     
//     // Checks the contract:  equals-hashcode on var7 and var16
//     assertTrue("Contract failed: equals-hashcode on var7 and var16", var7.equals(var16) ? var7.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var7
//     assertTrue("Contract failed: equals-hashcode on var16 and var7", var16.equals(var7) ? var16.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var17
//     assertTrue("Contract failed: equals-hashcode on var8 and var17", var8.equals(var17) ? var8.hashCode() == var17.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var8
//     assertTrue("Contract failed: equals-hashcode on var17 and var8", var17.equals(var8) ? var17.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxisForDataset(1);
    org.jfree.chart.axis.NumberAxis3D var44 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var45 = var44.isTickMarksVisible();
    org.jfree.data.Range var48 = new org.jfree.data.Range(1.0d, 100.0d);
    var44.setRangeWithMargins(var48, false, false);
    org.jfree.chart.axis.ValueAxis[] var52 = new org.jfree.chart.axis.ValueAxis[] { var44};
    var38.setRangeAxes(var52);
    int var54 = var38.getDomainAxisCount();
    org.jfree.data.time.Month var56 = new org.jfree.data.time.Month();
    org.jfree.data.gantt.Task var57 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var56);
    org.jfree.chart.plot.XYPlot var58 = new org.jfree.chart.plot.XYPlot();
    var58.setDomainCrosshairValue(0.05d);
    java.awt.Paint var61 = var58.getDomainCrosshairPaint();
    org.jfree.chart.plot.IntervalMarker var65 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
    double var66 = var65.getEndValue();
    var65.setStartValue(0.2d);
    org.jfree.chart.util.Layer var69 = null;
    var58.addRangeMarker(0, (org.jfree.chart.plot.Marker)var65, var69);
    boolean var71 = var57.equals((java.lang.Object)var58);
    org.jfree.chart.axis.AxisLocation var72 = var58.getRangeAxisLocation();
    var38.setDomainAxisLocation(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    double var1 = var0.getLabelAngle();
    var0.setTickLabelsVisible(false);
    var0.configure();
    java.util.TimeZone var5 = var0.getTimeZone();
    org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
    var7.configure();
    org.jfree.chart.axis.NumberTickUnit var9 = var7.getTickUnit();
    org.jfree.data.Range var10 = var7.getRange();
    org.jfree.data.Range var11 = null;
    org.jfree.data.Range var12 = org.jfree.data.Range.combine(var10, var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDefaultAutoRange(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    org.jfree.data.category.CategoryDataset var1 = null;
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var3.setUpperMargin(0.0d);
    int var6 = var3.getMaximumCategoryLabelLines();
    java.lang.Object var7 = var3.clone();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var12 = var9.getLegendItem((-1), 100);
    var9.setBaseShapesFilled(false);
    java.awt.Paint var16 = var9.getSeriesOutlinePaint((-1));
    java.awt.Paint var18 = var9.lookupSeriesOutlinePaint(0);
    var8.setLabelPaint(var18);
    double var20 = var8.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var21 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var24 = var21.getLegendItem(2, 0);
    double var25 = var21.getBase();
    org.jfree.chart.labels.ItemLabelPosition var28 = var21.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var32 = var29.getLegendItem((-1), 100);
    var29.setBaseShapesFilled(false);
    java.awt.Paint var37 = var29.getItemOutlinePaint(10, 1);
    var21.setErrorIndicatorPaint(var37);
    org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot(var1, var3, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.renderer.category.CategoryItemRenderer)var21);
    var39.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var43 = var39.getDomainAxis(0);
    var39.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.SortOrder var46 = var39.getColumnRenderingOrder();
    var0.sortByValues(var46);
    java.lang.String var48 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "SortOrder.ASCENDING"+ "'", var48.equals("SortOrder.ASCENDING"));

  }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.plot.MultiplePiePlot var38 = new org.jfree.chart.plot.MultiplePiePlot((org.jfree.data.category.CategoryDataset)var17);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Comparable var40 = var17.getColumnKey(10);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }


    org.jfree.data.KeyToGroupMap var0 = new org.jfree.data.KeyToGroupMap();
    java.util.List var1 = var0.getGroups();
    java.util.List var2 = var0.getGroups();
    java.lang.Object var3 = var0.clone();
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month();
    int var5 = var0.getGroupIndex((java.lang.Comparable)var4);
    org.jfree.chart.axis.CategoryAxis var7 = new org.jfree.chart.axis.CategoryAxis("hi!");
    java.lang.String var9 = var7.getCategoryLabelToolTip((java.lang.Comparable)10);
    org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Paint var13 = var12.getLabelPaint();
    java.lang.Comparable var14 = var12.getKey();
    java.lang.String var15 = var12.getLabel();
    org.jfree.chart.renderer.category.StackedAreaRenderer var18 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var21 = var18.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var22 = null;
    org.jfree.chart.plot.RingPlot var23 = new org.jfree.chart.plot.RingPlot(var22);
    org.jfree.chart.plot.Plot var24 = var23.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var25 = null;
    var23.axisChanged(var25);
    org.jfree.chart.JFreeChart var28 = new org.jfree.chart.JFreeChart("hi!", var21, (org.jfree.chart.plot.Plot)var23, true);
    var12.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var23);
    java.awt.Paint var30 = var12.getPaint();
    var7.setTickLabelPaint((java.lang.Comparable)100.0d, var30);
    org.jfree.chart.axis.NumberAxis3D var33 = new org.jfree.chart.axis.NumberAxis3D("");
    java.awt.Paint var34 = var33.getTickLabelPaint();
    java.awt.Shape var35 = var33.getUpArrow();
    boolean var36 = var33.isAxisLineVisible();
    var33.setTickMarkOutsideLength(10.0f);
    org.jfree.chart.axis.NumberAxis var40 = new org.jfree.chart.axis.NumberAxis("");
    org.jfree.chart.axis.NumberTickUnit var41 = var40.getTickUnit();
    var33.setTickUnit(var41);
    var7.removeCategoryLabelToolTip((java.lang.Comparable)var41);
    java.lang.Comparable var44 = var0.getGroup((java.lang.Comparable)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + true+ "'", var14.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Default Group"+ "'", var44.equals("Default Group"));

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeColumn(0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }


    org.jfree.chart.renderer.category.StatisticalBarRenderer var0 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var1.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var5 = var1.getBaseLinesVisible();
    java.lang.Boolean var7 = var1.getSeriesVisibleInLegend(10);
    java.awt.Paint var8 = var1.getBaseItemLabelPaint();
    java.awt.Color var11 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var12 = null;
    float[] var13 = var11.getRGBColorComponents(var12);
    var1.setBaseItemLabelPaint((java.awt.Paint)var11);
    org.jfree.chart.renderer.category.StackedAreaRenderer var16 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var17 = var16.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var18 = var16.getBaseNegativeItemLabelPosition();
    var1.setBasePositiveItemLabelPosition(var18, true);
    var0.setPositiveItemLabelPositionFallback(var18);
    org.jfree.chart.text.TextAnchor var22 = var18.getRotationAnchor();
    double var23 = var18.getAngle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }


    org.jfree.data.KeyToGroupMap var8 = new org.jfree.data.KeyToGroupMap();
    java.util.List var9 = var8.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var10 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var9);
    java.lang.Number var11 = var10.getMedian();
    java.lang.Number var12 = var10.getMean();
    java.lang.Number var13 = var10.getMedian();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1.0d+ "'", var11.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + 1.0d+ "'", var12.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 1.0d+ "'", var13.equals(1.0d));

  }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }
// 
// 
//     java.awt.Graphics2D var1 = null;
//     java.awt.Shape var7 = org.jfree.chart.text.TextUtilities.calculateRotatedStringBounds("org.jfree.data.UnknownKeyException: org.jfree.chart.event.RendererChangeEvent[source=false]", var1, 0.0f, (-1.0f), 10.0d, 10.0f, 10.0f);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var0, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
    var0.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var5);
    java.lang.Number var9 = var0.getMaxRegularValue((java.lang.Comparable)100.0f, (java.lang.Comparable)10);
    int var11 = var0.getRowIndex((java.lang.Comparable)Double.NaN);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.statistics.BoxAndWhiskerItem var14 = var0.getItem(2, (-457));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test26() {}
//   public void test26() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedBarRenderer3D var3 = new org.jfree.chart.renderer.category.StackedBarRenderer3D(8.0d, 1.0E-5d, false);
//     boolean var4 = var3.getRenderAsPercentages();
//     java.awt.Graphics2D var5 = null;
//     org.jfree.data.category.CategoryDataset var6 = null;
//     org.jfree.chart.axis.CategoryAxis var8 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var8.setUpperMargin(0.0d);
//     int var11 = var8.getMaximumCategoryLabelLines();
//     java.lang.Object var12 = var8.clone();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var17 = var14.getLegendItem((-1), 100);
//     var14.setBaseShapesFilled(false);
//     java.awt.Paint var21 = var14.getSeriesOutlinePaint((-1));
//     java.awt.Paint var23 = var14.lookupSeriesOutlinePaint(0);
//     var13.setLabelPaint(var23);
//     double var25 = var13.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var26 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var29 = var26.getLegendItem(2, 0);
//     double var30 = var26.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var33 = var26.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var37 = var34.getLegendItem((-1), 100);
//     var34.setBaseShapesFilled(false);
//     java.awt.Paint var42 = var34.getItemOutlinePaint(10, 1);
//     var26.setErrorIndicatorPaint(var42);
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot(var6, var8, (org.jfree.chart.axis.ValueAxis)var13, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
//     var44.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var48 = var44.getDomainAxis(0);
//     var44.setDrawSharedDomainAxis(true);
//     java.awt.geom.Rectangle2D var51 = null;
//     var3.drawOutline(var5, var44, var51);
// 
//   }

  public void test27() {}
//   public void test27() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }
// 
// 
//     org.jfree.chart.util.RectangleInsets var0 = new org.jfree.chart.util.RectangleInsets();
//     java.awt.geom.Rectangle2D var1 = null;
//     var0.trim(var1);
// 
//   }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    boolean var9 = var0.getUseOutlinePaint();
    boolean var12 = var0.getItemShapeFilled(100, 10);
    org.jfree.chart.plot.CategoryMarker var15 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)1L);
    java.lang.Object var16 = var15.clone();
    java.awt.Paint var17 = var15.getOutlinePaint();
    var0.setSeriesOutlinePaint(0, var17);
    var0.setBaseItemLabelsVisible(true);
    boolean var23 = var0.getItemShapeVisible(100, (-1));
    boolean var24 = var0.getBaseShapesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test29() {}
//   public void test29() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var24 = var23.getSuppressed();
//     java.lang.Throwable[] var25 = var23.getSuppressed();
//     boolean var26 = var21.equals((java.lang.Object)var25);
//     org.jfree.chart.util.RectangleInsets var27 = var21.getItemLabelPadding();
//     java.awt.Graphics2D var28 = null;
//     org.jfree.chart.block.RectangleConstraint var31 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
//     double var32 = var31.getWidth();
//     org.jfree.chart.util.Size2D var33 = var21.arrange(var28, var31);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, Double.NaN, Double.NaN);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var48 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var50 = var48.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var53 = new org.jfree.chart.entity.CategoryItemEntity(var38, "hi!", "", (org.jfree.data.category.CategoryDataset)var48, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var57 = var54.getLegendItem((-1), 100);
//     var54.setBaseShapesFilled(false);
//     java.awt.Paint var61 = var54.getSeriesOutlinePaint((-1));
//     java.awt.Paint var63 = var54.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var64 = new org.jfree.chart.title.LegendGraphic(var38, var63);
//     org.jfree.data.general.PieDataset var65 = null;
//     org.jfree.chart.plot.RingPlot var66 = new org.jfree.chart.plot.RingPlot(var65);
//     org.jfree.chart.plot.Plot var67 = var66.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var68 = var66.getInsets();
//     double var70 = var68.calculateBottomOutset(100.0d);
//     var64.setPadding(var68);
//     org.jfree.chart.util.RectangleInsets var72 = var64.getMargin();
//     org.jfree.chart.util.RectangleAnchor var73 = var64.getShapeLocation();
//     java.awt.geom.Rectangle2D var74 = org.jfree.chart.util.RectangleAnchor.createRectangle(var33, (-8.0d), 50.5d, var73);
//     
//     // Checks the contract:  equals-hashcode on var7 and var66
//     assertTrue("Contract failed: equals-hashcode on var7 and var66", var7.equals(var66) ? var7.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var7
//     assertTrue("Contract failed: equals-hashcode on var66 and var7", var66.equals(var7) ? var66.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var67
//     assertTrue("Contract failed: equals-hashcode on var8 and var67", var8.equals(var67) ? var8.hashCode() == var67.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var67 and var8
//     assertTrue("Contract failed: equals-hashcode on var67 and var8", var67.equals(var8) ? var67.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }
// 
// 
//     org.jfree.data.time.Month var0 = new org.jfree.data.time.Month();
//     long var1 = var0.getSerialIndex();
//     java.util.Date var2 = var0.getEnd();
//     org.jfree.chart.text.TextBlock var3 = null;
//     org.jfree.chart.text.TextBlockAnchor var4 = null;
//     org.jfree.chart.plot.XYPlot var5 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
//     var7.configure();
//     org.jfree.chart.util.RectangleInsets var9 = var7.getLabelInsets();
//     var5.setAxisOffset(var9);
//     org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var13 = var12.getOutlineStroke();
//     var5.addDomainMarker((org.jfree.chart.plot.Marker)var12);
//     var12.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var17 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var18.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var22 = var18.getBaseLinesVisible();
//     java.lang.Boolean var24 = var18.getSeriesVisibleInLegend(10);
//     java.awt.Paint var25 = var18.getBaseItemLabelPaint();
//     java.awt.Color var28 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var29 = null;
//     float[] var30 = var28.getRGBColorComponents(var29);
//     var18.setBaseItemLabelPaint((java.awt.Paint)var28);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var34 = var33.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var35 = var33.getBaseNegativeItemLabelPosition();
//     var18.setBasePositiveItemLabelPosition(var35, true);
//     var17.setPositiveItemLabelPositionFallback(var35);
//     org.jfree.chart.text.TextAnchor var39 = var35.getRotationAnchor();
//     var12.setLabelTextAnchor(var39);
//     org.jfree.chart.axis.CategoryTick var42 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var2, var3, var4, var39, 2.0d);
//     org.jfree.chart.text.TextBlock var43 = var42.getLabel();
//     org.jfree.chart.text.TextAnchor var44 = var42.getRotationAnchor();
//     java.lang.String var45 = var42.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
// 
//   }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var23 = var0.getDomainAxisEdge();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.data.DefaultKeyedValues2D var27 = new org.jfree.data.DefaultKeyedValues2D(false);
    var27.clear();
    java.util.List var29 = var27.getColumnKeys();
    var0.drawDomainTickBands(var24, var25, var29);
    org.jfree.data.category.CategoryDataset var32 = null;
    org.jfree.chart.axis.CategoryAxis var34 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var34.setUpperMargin(0.0d);
    int var37 = var34.getMaximumCategoryLabelLines();
    java.lang.Object var38 = var34.clone();
    org.jfree.chart.axis.DateAxis var39 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var40 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var43 = var40.getLegendItem((-1), 100);
    var40.setBaseShapesFilled(false);
    java.awt.Paint var47 = var40.getSeriesOutlinePaint((-1));
    java.awt.Paint var49 = var40.lookupSeriesOutlinePaint(0);
    var39.setLabelPaint(var49);
    double var51 = var39.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var52 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var55 = var52.getLegendItem(2, 0);
    double var56 = var52.getBase();
    org.jfree.chart.labels.ItemLabelPosition var59 = var52.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var63 = var60.getLegendItem((-1), 100);
    var60.setBaseShapesFilled(false);
    java.awt.Paint var68 = var60.getItemOutlinePaint(10, 1);
    var52.setErrorIndicatorPaint(var68);
    org.jfree.chart.plot.CategoryPlot var70 = new org.jfree.chart.plot.CategoryPlot(var32, var34, (org.jfree.chart.axis.ValueAxis)var39, (org.jfree.chart.renderer.category.CategoryItemRenderer)var52);
    var70.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var74 = var70.getDomainAxisForDataset(1);
    org.jfree.chart.axis.NumberAxis3D var76 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var77 = var76.isTickMarksVisible();
    org.jfree.data.Range var80 = new org.jfree.data.Range(1.0d, 100.0d);
    var76.setRangeWithMargins(var80, false, false);
    org.jfree.chart.axis.ValueAxis[] var84 = new org.jfree.chart.axis.ValueAxis[] { var76};
    var70.setRangeAxes(var84);
    int var86 = var70.getDomainAxisCount();
    org.jfree.chart.axis.AxisLocation var87 = var70.getDomainAxisLocation();
    var0.setRangeAxisLocation(100, var87);
    org.jfree.chart.annotations.XYAnnotation var89 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = new org.jfree.data.time.Year((-457));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    org.jfree.chart.block.RectangleConstraint var2 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
    double var3 = var2.getWidth();
    org.jfree.chart.block.LengthConstraintType var4 = var2.getWidthConstraintType();
    java.lang.Object var5 = null;
    boolean var6 = var4.equals(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 50.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.lang.Object var2 = null;
    boolean var3 = org.jfree.chart.util.ObjectUtilities.equal((java.lang.Object)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }


    double[][] var0 = null;
    double[] var1 = null;
    double[][] var2 = new double[][] { var1};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.category.DefaultIntervalCategoryDataset var3 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.SortOrder var45 = var38.getColumnRenderingOrder();
    org.jfree.chart.plot.PlotOrientation var46 = var38.getOrientation();
    var38.clearRangeAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    java.awt.Paint var2 = var1.getBaseSectionPaint();
    double var3 = var1.getLabelGap();
    org.jfree.chart.plot.Plot var4 = var1.getRootPlot();
    org.jfree.chart.renderer.category.StackedAreaRenderer var6 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var7 = var6.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var8 = var6.getBaseNegativeItemLabelPosition();
    java.awt.Paint var11 = var6.getItemFillPaint(4, (-457));
    var1.setLabelShadowPaint(var11);
    boolean var13 = var1.getIgnoreNullValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test38() {}
//   public void test38() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }
// 
// 
//     org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var3 = var2.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var4 = var2.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var5 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var7 = var5.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var13 = var10.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var14 = null;
//     org.jfree.chart.plot.RingPlot var15 = new org.jfree.chart.plot.RingPlot(var14);
//     org.jfree.chart.plot.Plot var16 = var15.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var17 = null;
//     var15.axisChanged(var17);
//     org.jfree.chart.JFreeChart var20 = new org.jfree.chart.JFreeChart("hi!", var13, (org.jfree.chart.plot.Plot)var15, true);
//     boolean var21 = var5.equals((java.lang.Object)var13);
//     var5.validateObject();
//     org.jfree.data.Range var23 = var2.findRangeBounds((org.jfree.data.category.CategoryDataset)var5);
//     java.awt.Stroke var25 = var2.lookupSeriesStroke(10);
//     var0.setGroupStroke(var25);
//     javax.swing.Icon var27 = var0.getMaxIcon();
//     boolean var28 = var0.isDrawLines();
//     org.jfree.chart.block.CenterArrangement var30 = new org.jfree.chart.block.CenterArrangement();
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, Double.NaN, Double.NaN);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var33, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var43 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var45 = var43.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var48 = new org.jfree.chart.entity.CategoryItemEntity(var33, "hi!", "", (org.jfree.data.category.CategoryDataset)var43, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var49 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var52 = var49.getLegendItem((-1), 100);
//     var49.setBaseShapesFilled(false);
//     java.awt.Paint var56 = var49.getSeriesOutlinePaint((-1));
//     java.awt.Paint var58 = var49.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var59 = new org.jfree.chart.title.LegendGraphic(var33, var58);
//     org.jfree.data.Range var62 = new org.jfree.data.Range(1.0d, 100.0d);
//     var30.add((org.jfree.chart.block.Block)var59, (java.lang.Object)var62);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var64 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var64.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var68 = var64.getBaseLinesVisible();
//     java.lang.Boolean var70 = var64.getSeriesVisibleInLegend(10);
//     java.awt.Paint var71 = var64.getBaseItemLabelPaint();
//     java.awt.Color var74 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var75 = null;
//     float[] var76 = var74.getRGBColorComponents(var75);
//     var64.setBaseItemLabelPaint((java.awt.Paint)var74);
//     int var78 = var74.getGreen();
//     var59.setFillPaint((java.awt.Paint)var74);
//     var0.setSeriesFillPaint(10, (java.awt.Paint)var74);
//     
//     // Checks the contract:  equals-hashcode on var5 and var43
//     assertTrue("Contract failed: equals-hashcode on var5 and var43", var5.equals(var43) ? var5.hashCode() == var43.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var43 and var5
//     assertTrue("Contract failed: equals-hashcode on var43 and var5", var43.equals(var5) ? var43.hashCode() == var5.hashCode() : true);
// 
//   }

  public void test39() {}
//   public void test39() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.chart.entity.LegendItemEntity var29 = new org.jfree.chart.entity.LegendItemEntity(var2);
//     java.lang.Object var30 = var29.clone();
//     java.lang.Object var31 = var29.clone();
//     
//     // Checks the contract:  equals-hashcode on var30 and var31
//     assertTrue("Contract failed: equals-hashcode on var30 and var31", var30.equals(var31) ? var30.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var30
//     assertTrue("Contract failed: equals-hashcode on var31 and var30", var31.equals(var30) ? var31.hashCode() == var30.hashCode() : true);
// 
//   }

  public void test40() {}
//   public void test40() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.category.CategoryDataset var38 = null;
//     org.jfree.chart.axis.CategoryAxis var40 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var40.setUpperMargin(0.0d);
//     int var43 = var40.getMaximumCategoryLabelLines();
//     java.lang.Object var44 = var40.clone();
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var46 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var49 = var46.getLegendItem((-1), 100);
//     var46.setBaseShapesFilled(false);
//     java.awt.Paint var53 = var46.getSeriesOutlinePaint((-1));
//     java.awt.Paint var55 = var46.lookupSeriesOutlinePaint(0);
//     var45.setLabelPaint(var55);
//     double var57 = var45.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var58 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var61 = var58.getLegendItem(2, 0);
//     double var62 = var58.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var65 = var58.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var66 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var69 = var66.getLegendItem((-1), 100);
//     var66.setBaseShapesFilled(false);
//     java.awt.Paint var74 = var66.getItemOutlinePaint(10, 1);
//     var58.setErrorIndicatorPaint(var74);
//     org.jfree.chart.plot.CategoryPlot var76 = new org.jfree.chart.plot.CategoryPlot(var38, var40, (org.jfree.chart.axis.ValueAxis)var45, (org.jfree.chart.renderer.category.CategoryItemRenderer)var58);
//     var76.setRangeCrosshairValue(50.5d);
//     boolean var79 = var17.hasListener((java.util.EventListener)var76);
//     var76.mapDatasetToRangeAxis(2, (-1));
//     org.jfree.chart.plot.DatasetRenderingOrder var83 = var76.getDatasetRenderingOrder();
//     boolean var84 = var76.isRangeGridlinesVisible();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var62 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var79 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var84 == true);
// 
//   }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.category.CategoryDataset var38 = null;
//     org.jfree.chart.axis.CategoryAxis var40 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var40.setUpperMargin(0.0d);
//     int var43 = var40.getMaximumCategoryLabelLines();
//     java.lang.Object var44 = var40.clone();
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var46 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var49 = var46.getLegendItem((-1), 100);
//     var46.setBaseShapesFilled(false);
//     java.awt.Paint var53 = var46.getSeriesOutlinePaint((-1));
//     java.awt.Paint var55 = var46.lookupSeriesOutlinePaint(0);
//     var45.setLabelPaint(var55);
//     double var57 = var45.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var58 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var61 = var58.getLegendItem(2, 0);
//     double var62 = var58.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var65 = var58.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var66 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var69 = var66.getLegendItem((-1), 100);
//     var66.setBaseShapesFilled(false);
//     java.awt.Paint var74 = var66.getItemOutlinePaint(10, 1);
//     var58.setErrorIndicatorPaint(var74);
//     org.jfree.chart.plot.CategoryPlot var76 = new org.jfree.chart.plot.CategoryPlot(var38, var40, (org.jfree.chart.axis.ValueAxis)var45, (org.jfree.chart.renderer.category.CategoryItemRenderer)var58);
//     var76.setRangeCrosshairValue(50.5d);
//     boolean var79 = var17.hasListener((java.util.EventListener)var76);
//     org.jfree.chart.axis.CategoryAxis var81 = var76.getDomainAxis(1);
//     java.awt.Stroke var82 = var76.getOutlineStroke();
//     var76.configureRangeAxes();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var62 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var79 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    org.jfree.chart.axis.NumberAxis3D var5 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var6 = var5.isTickMarksVisible();
    java.awt.Shape var7 = var5.getDownArrow();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 100.0d, 0.2d);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var11.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var15 = var11.getBaseLinesVisible();
    java.lang.Boolean var17 = var11.getSeriesVisibleInLegend(10);
    java.awt.Paint var18 = var11.getBaseItemLabelPaint();
    java.awt.Color var21 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var22 = null;
    float[] var23 = var21.getRGBColorComponents(var22);
    var11.setBaseItemLabelPaint((java.awt.Paint)var21);
    int var25 = var21.getGreen();
    java.lang.String var26 = var21.toString();
    org.jfree.chart.LegendItem var27 = new org.jfree.chart.LegendItem("hi!", "ThreadContext", "Pie Plot", "Range[1.0,100.0]", var10, (java.awt.Paint)var21);
    boolean var28 = var27.isShapeVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var26.equals("java.awt.Color[r=0,g=0,b=10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.data.Range var15 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var16 = var15.toString();
//     org.jfree.data.Range var18 = org.jfree.data.Range.shift(var15, 0.0d);
//     var0.setRange(var18);
//     java.awt.geom.Rectangle2D var21 = null;
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var24 = new org.jfree.chart.axis.NumberAxis3D("");
//     var24.configure();
//     org.jfree.chart.util.RectangleInsets var26 = var24.getLabelInsets();
//     var22.setAxisOffset(var26);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var29 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var30 = var29.getEndType();
//     java.awt.Stroke var33 = var29.getItemStroke(0, 0);
//     var22.setRangeZeroBaselineStroke(var33);
//     org.jfree.chart.util.Layer var35 = null;
//     java.util.Collection var36 = var22.getDomainMarkers(var35);
//     org.jfree.chart.util.RectangleInsets var37 = var22.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var39 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var40 = var39.getEndType();
//     java.awt.Stroke var43 = var39.getItemStroke(0, 0);
//     var22.setDomainZeroBaselineStroke(var43);
//     org.jfree.chart.util.RectangleEdge var46 = var22.getDomainAxisEdge(1);
//     double var47 = var0.java2DToValue(1.0d, var21, var46);
// 
//   }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    boolean var9 = var0.getUseOutlinePaint();
    boolean var12 = var0.getItemShapeFilled(100, 10);
    org.jfree.chart.labels.CategoryToolTipGenerator var13 = null;
    var0.setBaseToolTipGenerator(var13);
    var0.setAutoPopulateSeriesShape(false);
    java.awt.Paint var19 = var0.getItemFillPaint(2, 2);
    var0.setDrawOutlines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    var1.setRenderAsPercentages(false);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }


    java.lang.Object var0 = null;
    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var3 = var2.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var4 = var2.getBaseNegativeItemLabelPosition();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var5 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.Range var6 = var2.findRangeBounds((org.jfree.data.category.CategoryDataset)var5);
    org.jfree.data.general.DatasetChangeListener var7 = null;
    var5.addChangeListener(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.general.DatasetChangeEvent var9 = new org.jfree.data.general.DatasetChangeEvent(var0, (org.jfree.data.general.Dataset)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var2.setUpperMargin(0.0d);
//     int var5 = var2.getMaximumCategoryLabelLines();
//     java.lang.Object var6 = var2.clone();
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
//     var8.setBaseShapesFilled(false);
//     java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
//     java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
//     var7.setLabelPaint(var17);
//     double var19 = var7.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
//     double var24 = var20.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
//     var20.setErrorIndicatorPaint(var36);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
//     var38.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxisForDataset(1);
//     java.awt.geom.Rectangle2D var45 = null;
//     org.jfree.chart.axis.AxisCollection var46 = new org.jfree.chart.axis.AxisCollection();
//     org.jfree.chart.axis.NumberAxis3D var48 = new org.jfree.chart.axis.NumberAxis3D("");
//     java.awt.Paint var49 = var48.getTickLabelPaint();
//     java.awt.Shape var50 = var48.getDownArrow();
//     org.jfree.chart.axis.NumberAxis3D var52 = new org.jfree.chart.axis.NumberAxis3D("");
//     var52.configure();
//     org.jfree.chart.axis.NumberTickUnit var54 = var52.getTickUnit();
//     var48.setTickUnit(var54);
//     org.jfree.chart.plot.XYPlot var56 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var58 = new org.jfree.chart.axis.NumberAxis3D("");
//     var58.configure();
//     org.jfree.chart.util.RectangleInsets var60 = var58.getLabelInsets();
//     var56.setAxisOffset(var60);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var63 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var64 = var63.getEndType();
//     java.awt.Stroke var67 = var63.getItemStroke(0, 0);
//     var56.setRangeZeroBaselineStroke(var67);
//     org.jfree.chart.util.Layer var69 = null;
//     java.util.Collection var70 = var56.getDomainMarkers(var69);
//     org.jfree.chart.util.RectangleInsets var71 = var56.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var73 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var74 = var73.getEndType();
//     java.awt.Stroke var77 = var73.getItemStroke(0, 0);
//     var56.setDomainZeroBaselineStroke(var77);
//     org.jfree.chart.util.RectangleEdge var79 = var56.getDomainAxisEdge();
//     var46.add((org.jfree.chart.axis.Axis)var48, var79);
//     double var81 = var42.getCategoryStart((-1), 1, var45, var79);
// 
//   }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    var1.setBaseShapesFilled(false);
    java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
    var1.setBaseNegativeItemLabelPosition(var12);
    var0.setPositiveItemLabelPositionFallback(var12);
    double var15 = var0.getStartPercent();
    double var16 = var0.getMaximumBarWidth();
    org.jfree.chart.labels.CategorySeriesLabelGenerator var17 = var0.getLegendItemURLGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.35d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }
// 
// 
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     double var2 = var0.getRangeLowerBound(false);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var5 = var0.getValue((-16777206), 0);
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == Double.NaN);
// 
//   }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    org.jfree.chart.axis.NumberTickUnit var3 = var1.getTickUnit();
    org.jfree.data.Range var4 = var1.getRange();
    org.jfree.data.Range var5 = null;
    org.jfree.data.Range var6 = org.jfree.data.Range.combine(var4, var5);
    org.jfree.data.Range var9 = org.jfree.data.Range.expand(var4, 0.2d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var32 = var30.getInsets();
//     double var34 = var32.calculateBottomOutset(100.0d);
//     var28.setPadding(var32);
//     org.jfree.chart.util.RectangleInsets var36 = var28.getMargin();
//     org.jfree.chart.util.RectangleAnchor var37 = var28.getShapeLocation();
//     var28.setMargin(0.0d, (-8.0d), 50.5d, 1.0E-5d);
//     java.lang.Object var43 = var28.clone();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == 4.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
// 
//   }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    java.lang.String[] var0 = org.jfree.data.time.SerialDate.getMonths();
    java.lang.Comparable[] var1 = null;
    double[] var2 = null;
    double[][] var3 = new double[][] { var2};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.category.CategoryDataset var4 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable[])var0, var1, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    org.jfree.chart.util.ObjectList var0 = new org.jfree.chart.util.ObjectList();
    java.lang.Object var2 = var0.get(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.util.List var13 = var12.getSubtitles();
    org.jfree.chart.ChartRenderingInfo var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.image.BufferedImage var18 = var12.createBufferedImage(0, (-1), 100, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test55() {}
//   public void test55() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var24 = var23.getSuppressed();
//     java.lang.Throwable[] var25 = var23.getSuppressed();
//     boolean var26 = var21.equals((java.lang.Object)var25);
//     org.jfree.chart.util.RectangleInsets var27 = var21.getItemLabelPadding();
//     org.jfree.chart.util.VerticalAlignment var28 = var21.getVerticalAlignment();
//     org.jfree.chart.LegendItemSource[] var29 = var21.getSources();
//     java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var35 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var32, Double.NaN, Double.NaN);
//     java.awt.Shape var39 = org.jfree.chart.util.ShapeUtilities.rotateShape(var32, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var42 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var44 = var42.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var47 = new org.jfree.chart.entity.CategoryItemEntity(var32, "hi!", "", (org.jfree.data.category.CategoryDataset)var42, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var51 = var48.getLegendItem((-1), 100);
//     var48.setBaseShapesFilled(false);
//     java.awt.Paint var55 = var48.getSeriesOutlinePaint((-1));
//     java.awt.Paint var57 = var48.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var58 = new org.jfree.chart.title.LegendGraphic(var32, var57);
//     org.jfree.data.general.PieDataset var59 = null;
//     org.jfree.chart.plot.RingPlot var60 = new org.jfree.chart.plot.RingPlot(var59);
//     org.jfree.chart.plot.Plot var61 = var60.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var62 = var60.getInsets();
//     double var64 = var62.calculateBottomOutset(100.0d);
//     var58.setPadding(var62);
//     org.jfree.chart.util.RectangleInsets var66 = var58.getMargin();
//     org.jfree.chart.util.RectangleAnchor var67 = var58.getShapeAnchor();
//     var21.setLegendItemGraphicLocation(var67);
//     
//     // Checks the contract:  equals-hashcode on var7 and var60
//     assertTrue("Contract failed: equals-hashcode on var7 and var60", var7.equals(var60) ? var7.hashCode() == var60.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var60 and var7
//     assertTrue("Contract failed: equals-hashcode on var60 and var7", var60.equals(var7) ? var60.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var61
//     assertTrue("Contract failed: equals-hashcode on var8 and var61", var8.equals(var61) ? var8.hashCode() == var61.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var61 and var8
//     assertTrue("Contract failed: equals-hashcode on var61 and var8", var61.equals(var8) ? var61.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    org.jfree.data.DefaultKeyedValues2D var1 = new org.jfree.data.DefaultKeyedValues2D(false);
    int var2 = var1.getColumnCount();
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    double var5 = var4.getInteriorGap();
    org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var8 = var7.isTickMarksVisible();
    org.jfree.data.Range var11 = new org.jfree.data.Range(1.0d, 100.0d);
    var7.setRangeWithMargins(var11, false, false);
    java.text.NumberFormat var15 = var7.getNumberFormatOverride();
    org.jfree.chart.axis.NumberTickUnit var16 = var7.getTickUnit();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var17 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var20 = var17.getLegendItem(2, 0);
    double var21 = var17.getBase();
    org.jfree.chart.labels.ItemLabelPosition var24 = var17.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var28 = var25.getLegendItem((-1), 100);
    var25.setBaseShapesFilled(false);
    java.awt.Paint var33 = var25.getItemOutlinePaint(10, 1);
    var17.setErrorIndicatorPaint(var33);
    var4.setSectionPaint((java.lang.Comparable)var16, var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeRow((java.lang.Comparable)var16);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test57() {}
//   public void test57() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.category.CategoryDataset var38 = null;
//     org.jfree.chart.axis.CategoryAxis var40 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var40.setUpperMargin(0.0d);
//     int var43 = var40.getMaximumCategoryLabelLines();
//     java.lang.Object var44 = var40.clone();
//     org.jfree.chart.axis.DateAxis var45 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var46 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var49 = var46.getLegendItem((-1), 100);
//     var46.setBaseShapesFilled(false);
//     java.awt.Paint var53 = var46.getSeriesOutlinePaint((-1));
//     java.awt.Paint var55 = var46.lookupSeriesOutlinePaint(0);
//     var45.setLabelPaint(var55);
//     double var57 = var45.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var58 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var61 = var58.getLegendItem(2, 0);
//     double var62 = var58.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var65 = var58.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var66 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var69 = var66.getLegendItem((-1), 100);
//     var66.setBaseShapesFilled(false);
//     java.awt.Paint var74 = var66.getItemOutlinePaint(10, 1);
//     var58.setErrorIndicatorPaint(var74);
//     org.jfree.chart.plot.CategoryPlot var76 = new org.jfree.chart.plot.CategoryPlot(var38, var40, (org.jfree.chart.axis.ValueAxis)var45, (org.jfree.chart.renderer.category.CategoryItemRenderer)var58);
//     var76.setRangeCrosshairValue(50.5d);
//     boolean var79 = var17.hasListener((java.util.EventListener)var76);
//     var76.mapDatasetToRangeAxis(2, (-1));
//     org.jfree.chart.plot.DatasetRenderingOrder var83 = var76.getDatasetRenderingOrder();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var85 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     var85.setSeriesItemLabelsVisible(0, (java.lang.Boolean)true);
//     java.awt.Shape var90 = var85.getSeriesShape(15);
//     boolean var91 = var83.equals((java.lang.Object)var85);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var14 and var85.", var14.equals(var85) == var85.equals(var14));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var22 and var85.", var22.equals(var85) == var85.equals(var22));
// 
//   }

  public void test58() {}
//   public void test58() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }
// 
// 
//     org.jfree.data.general.PieDataset var0 = null;
//     org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
//     java.awt.Paint var2 = var1.getBaseSectionPaint();
//     boolean var3 = var1.isOutlineVisible();
//     java.awt.Color var7 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var8 = null;
//     float[] var9 = var7.getRGBColorComponents(var8);
//     var1.setSectionOutlinePaint((java.lang.Comparable)"", (java.awt.Paint)var7);
//     int var11 = var7.getRed();
//     java.awt.Color var14 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var15 = null;
//     float[] var16 = var14.getRGBColorComponents(var15);
//     java.awt.Color var19 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var20 = null;
//     float[] var21 = var19.getRGBColorComponents(var20);
//     float[] var22 = var14.getColorComponents(var20);
//     java.awt.color.ColorSpace var23 = var14.getColorSpace();
//     org.jfree.data.general.PieDataset var27 = null;
//     org.jfree.chart.plot.RingPlot var28 = new org.jfree.chart.plot.RingPlot(var27);
//     java.awt.Paint var29 = var28.getBaseSectionPaint();
//     boolean var30 = var28.isOutlineVisible();
//     java.awt.Color var34 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var35 = null;
//     float[] var36 = var34.getRGBColorComponents(var35);
//     var28.setSectionOutlinePaint((java.lang.Comparable)"", (java.awt.Paint)var34);
//     java.awt.Color var40 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var41 = null;
//     float[] var42 = var40.getRGBColorComponents(var41);
//     float[] var43 = var34.getRGBComponents(var41);
//     float[] var44 = java.awt.Color.RGBtoHSB((-457), 4, 0, var41);
//     float[] var45 = var7.getColorComponents(var23, var44);
//     
//     // Checks the contract:  equals-hashcode on var1 and var28
//     assertTrue("Contract failed: equals-hashcode on var1 and var28", var1.equals(var28) ? var1.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var1
//     assertTrue("Contract failed: equals-hashcode on var28 and var1", var28.equals(var1) ? var28.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var0, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
    var0.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var5);
    java.lang.Number var9 = var0.getMaxRegularValue((java.lang.Comparable)100.0f, (java.lang.Comparable)10);
    org.jfree.data.general.DatasetGroup var10 = var0.getGroup();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var13 = var0.getQ1Value((-1), 15);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    org.jfree.chart.util.HorizontalAlignment var14 = null;
    org.jfree.chart.util.VerticalAlignment var15 = null;
    org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
    var18.clear();
    org.jfree.chart.block.Arrangement var20 = null;
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
    org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.lang.Throwable[] var25 = var23.getSuppressed();
    boolean var26 = var21.equals((java.lang.Object)var25);
    org.jfree.chart.util.RectangleInsets var27 = var21.getItemLabelPadding();
    double var29 = var27.calculateRightOutset(0.05d);
    java.awt.geom.Rectangle2D var30 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var31 = var27.createInsetRectangle(var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2.0d);

  }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.plot.XYPlot var38 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var40 = new org.jfree.chart.axis.NumberAxis3D("");
//     var40.configure();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     var38.setAxisOffset(var42);
//     org.jfree.chart.plot.CategoryMarker var45 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var46 = var45.getOutlineStroke();
//     var38.addDomainMarker((org.jfree.chart.plot.Marker)var45);
//     var17.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var38);
//     org.jfree.chart.renderer.category.GanttRenderer var49 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.plot.CategoryMarker var51 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var52 = var51.getLabelPaint();
//     var49.setCompletePaint(var52);
//     var38.setDomainZeroBaselinePaint(var52);
//     
//     // Checks the contract:  equals-hashcode on var45 and var51
//     assertTrue("Contract failed: equals-hashcode on var45 and var51", var45.equals(var51) ? var45.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var45
//     assertTrue("Contract failed: equals-hashcode on var51 and var45", var51.equals(var45) ? var51.hashCode() == var45.hashCode() : true);
// 
//   }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var1.setUpperMargin(0.0d);
    float var4 = var1.getMaximumCategoryLabelWidthRatio();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0f);

  }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     double var14 = var7.getInteriorGap();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var20 = var17.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var21 = null;
//     org.jfree.chart.plot.RingPlot var22 = new org.jfree.chart.plot.RingPlot(var21);
//     org.jfree.chart.plot.Plot var23 = var22.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var24 = null;
//     var22.axisChanged(var24);
//     org.jfree.chart.JFreeChart var27 = new org.jfree.chart.JFreeChart("hi!", var20, (org.jfree.chart.plot.Plot)var22, true);
//     java.lang.Object var28 = var22.clone();
//     java.awt.Paint var29 = var22.getLabelLinkPaint();
//     var7.setBackgroundPaint(var29);
//     
//     // Checks the contract:  equals-hashcode on var13 and var28
//     assertTrue("Contract failed: equals-hashcode on var13 and var28", var13.equals(var28) ? var13.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var13
//     assertTrue("Contract failed: equals-hashcode on var28 and var13", var28.equals(var13) ? var28.hashCode() == var13.hashCode() : true);
// 
//   }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.plot.MultiplePiePlot var38 = new org.jfree.chart.plot.MultiplePiePlot((org.jfree.data.category.CategoryDataset)var17);
//     java.lang.String var39 = var38.getPlotType();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var39 + "' != '" + "Multiple Pie Plot"+ "'", var39.equals("Multiple Pie Plot"));
// 
//   }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }
// 
// 
//     org.jfree.data.general.PieDataset var0 = null;
//     org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
//     org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var3 = null;
//     var1.axisChanged(var3);
//     var1.setShadowYOffset(0.0d);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var13 = var10.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var14 = null;
//     org.jfree.chart.plot.RingPlot var15 = new org.jfree.chart.plot.RingPlot(var14);
//     org.jfree.chart.plot.Plot var16 = var15.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var17 = null;
//     var15.axisChanged(var17);
//     org.jfree.chart.JFreeChart var20 = new org.jfree.chart.JFreeChart("hi!", var13, (org.jfree.chart.plot.Plot)var15, true);
//     java.util.List var21 = var20.getSubtitles();
//     java.awt.Stroke var22 = var20.getBorderStroke();
//     var1.setSectionOutlineStroke((java.lang.Comparable)0.0d, var22);
//     org.jfree.data.general.PieDataset var24 = null;
//     org.jfree.chart.plot.RingPlot var25 = new org.jfree.chart.plot.RingPlot(var24);
//     org.jfree.chart.plot.Plot var26 = var25.getRootPlot();
//     org.jfree.chart.JFreeChart var27 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var25);
//     org.jfree.chart.labels.PieSectionLabelGenerator var28 = var25.getLegendLabelGenerator();
//     var1.setLegendLabelToolTipGenerator(var28);
//     
//     // Checks the contract:  equals-hashcode on var15 and var25
//     assertTrue("Contract failed: equals-hashcode on var15 and var25", var15.equals(var25) ? var15.hashCode() == var25.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var25 and var15
//     assertTrue("Contract failed: equals-hashcode on var25 and var15", var25.equals(var15) ? var25.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var26
//     assertTrue("Contract failed: equals-hashcode on var16 and var26", var16.equals(var26) ? var16.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var16
//     assertTrue("Contract failed: equals-hashcode on var26 and var16", var26.equals(var16) ? var26.hashCode() == var16.hashCode() : true);
// 
//   }

  public void test66() {}
//   public void test66() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var8 = var7.getOutlineStroke();
//     var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
//     java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
//     org.jfree.chart.plot.DatasetRenderingOrder var11 = var0.getDatasetRenderingOrder();
//     int var12 = var0.getDatasetCount();
//     boolean var13 = var0.isDomainZeroBaselineVisible();
//     java.awt.Stroke var14 = var0.getDomainCrosshairStroke();
//     org.jfree.data.time.Month var16 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var17 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var16);
//     org.jfree.chart.plot.XYPlot var18 = new org.jfree.chart.plot.XYPlot();
//     var18.setDomainCrosshairValue(0.05d);
//     java.awt.Paint var21 = var18.getDomainCrosshairPaint();
//     org.jfree.chart.plot.IntervalMarker var25 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
//     double var26 = var25.getEndValue();
//     var25.setStartValue(0.2d);
//     org.jfree.chart.util.Layer var29 = null;
//     var18.addRangeMarker(0, (org.jfree.chart.plot.Marker)var25, var29);
//     boolean var31 = var17.equals((java.lang.Object)var18);
//     org.jfree.chart.axis.AxisLocation var32 = var18.getRangeAxisLocation();
//     var0.setDomainAxisLocation(var32, true);
//     org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var37 = new org.jfree.chart.axis.NumberAxis3D("");
//     var37.configure();
//     org.jfree.chart.util.RectangleInsets var39 = var37.getLabelInsets();
//     var35.setAxisOffset(var39);
//     org.jfree.chart.plot.CategoryMarker var42 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var43 = var42.getOutlineStroke();
//     var35.addDomainMarker((org.jfree.chart.plot.Marker)var42);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var47 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var50 = var47.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var51 = null;
//     org.jfree.chart.plot.RingPlot var52 = new org.jfree.chart.plot.RingPlot(var51);
//     org.jfree.chart.plot.Plot var53 = var52.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var54 = null;
//     var52.axisChanged(var54);
//     org.jfree.chart.JFreeChart var57 = new org.jfree.chart.JFreeChart("hi!", var50, (org.jfree.chart.plot.Plot)var52, true);
//     java.awt.Paint var58 = var52.getBackgroundPaint();
//     java.awt.Paint var59 = var52.getLabelOutlinePaint();
//     var35.setRangeTickBandPaint(var59);
//     org.jfree.chart.util.Layer var61 = null;
//     java.util.Collection var62 = var35.getRangeMarkers(var61);
//     org.jfree.chart.plot.PlotOrientation var63 = var35.getOrientation();
//     org.jfree.chart.util.RectangleEdge var64 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(var32, var63);
//     
//     // Checks the contract:  equals-hashcode on var0 and var35
//     assertTrue("Contract failed: equals-hashcode on var0 and var35", var0.equals(var35) ? var0.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var0
//     assertTrue("Contract failed: equals-hashcode on var35 and var0", var35.equals(var0) ? var35.hashCode() == var0.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var7 and var42
//     assertTrue("Contract failed: equals-hashcode on var7 and var42", var7.equals(var42) ? var7.hashCode() == var42.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var42 and var7
//     assertTrue("Contract failed: equals-hashcode on var42 and var7", var42.equals(var7) ? var42.hashCode() == var7.hashCode() : true);
// 
//   }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var3 = var1.getBaseNegativeItemLabelPosition();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var4 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.Range var5 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var4);
    org.jfree.data.general.DatasetChangeListener var6 = null;
    var4.addChangeListener(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var10 = var4.getMeanValue(100, 4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }


    java.awt.Font var1 = null;
    org.jfree.chart.renderer.category.GanttRenderer var2 = new org.jfree.chart.renderer.category.GanttRenderer();
    java.lang.Boolean var4 = var2.getSeriesVisible((-16777206));
    java.awt.Paint var5 = var2.getIncompletePaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.text.TextBlock var6 = org.jfree.chart.text.TextUtilities.createTextBlock("Other", var1, var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test69() {}
//   public void test69() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     double var12 = var0.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var15 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var18 = var15.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var19 = null;
//     org.jfree.chart.plot.RingPlot var20 = new org.jfree.chart.plot.RingPlot(var19);
//     org.jfree.chart.plot.Plot var21 = var20.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var22 = null;
//     var20.axisChanged(var22);
//     org.jfree.chart.JFreeChart var25 = new org.jfree.chart.JFreeChart("hi!", var18, (org.jfree.chart.plot.Plot)var20, true);
//     java.awt.Paint var26 = var20.getBackgroundPaint();
//     java.awt.Paint var27 = var20.getLabelOutlinePaint();
//     var0.setTickMarkPaint(var27);
//     java.awt.Graphics2D var29 = null;
//     org.jfree.chart.axis.AxisState var30 = new org.jfree.chart.axis.AxisState();
//     java.awt.geom.Rectangle2D var31 = null;
//     org.jfree.chart.plot.XYPlot var32 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var34 = new org.jfree.chart.axis.NumberAxis3D("");
//     var34.configure();
//     org.jfree.chart.util.RectangleInsets var36 = var34.getLabelInsets();
//     var32.setAxisOffset(var36);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var39 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var40 = var39.getEndType();
//     java.awt.Stroke var43 = var39.getItemStroke(0, 0);
//     var32.setRangeZeroBaselineStroke(var43);
//     boolean var45 = var32.isRangeCrosshairLockedOnData();
//     org.jfree.chart.util.RectangleEdge var47 = var32.getDomainAxisEdge(1);
//     java.util.List var48 = var0.refreshTicks(var29, var30, var31, var47);
// 
//   }

  public void test70() {}
//   public void test70() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var10 = var7.getLegendItem((-1), 100);
//     var7.setBaseShapesFilled(false);
//     java.awt.Paint var14 = var7.getSeriesOutlinePaint((-1));
//     java.awt.Paint var16 = var7.lookupSeriesOutlinePaint(0);
//     var6.setLabelPaint(var16);
//     boolean var18 = var6.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var20 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var21 = var20.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var22 = var20.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var23 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var25 = var23.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var31 = var28.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var32 = null;
//     org.jfree.chart.plot.RingPlot var33 = new org.jfree.chart.plot.RingPlot(var32);
//     org.jfree.chart.plot.Plot var34 = var33.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var35 = null;
//     var33.axisChanged(var35);
//     org.jfree.chart.JFreeChart var38 = new org.jfree.chart.JFreeChart("hi!", var31, (org.jfree.chart.plot.Plot)var33, true);
//     boolean var39 = var23.equals((java.lang.Object)var31);
//     var23.validateObject();
//     org.jfree.data.Range var41 = var20.findRangeBounds((org.jfree.data.category.CategoryDataset)var23);
//     org.jfree.data.general.DatasetChangeEvent var42 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var18, (org.jfree.data.general.Dataset)var23);
//     var0.datasetChanged(var42);
//     int var44 = var0.getSeriesCount();
//     var0.setWeight(4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 0);
// 
//   }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    org.jfree.chart.renderer.category.StatisticalBarRenderer var0 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem(2, 0);
    double var4 = var0.getBase();
    org.jfree.chart.labels.ItemLabelPosition var7 = var0.getPositiveItemLabelPosition(2, (-1));
    double var8 = var0.getMaximumBarWidth();
    var0.setBase(4.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var11 = org.jfree.chart.util.ObjectUtilities.clone((java.lang.Object)4.0d);
      fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);

  }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }
// 
// 
//     org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
//     javax.swing.Icon var1 = var0.getMaxIcon();
//     org.jfree.chart.renderer.category.MinMaxCategoryRenderer var2 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
//     org.jfree.chart.urls.StandardCategoryURLGenerator var5 = new org.jfree.chart.urls.StandardCategoryURLGenerator("AreaRendererEndType.TAPER");
//     var2.setSeriesURLGenerator(4, (org.jfree.chart.urls.CategoryURLGenerator)var5);
//     java.awt.Paint var7 = var2.getBaseFillPaint();
//     var0.setGroupPaint(var7);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var2.", var0.equals(var2) == var2.equals(var0));
// 
//   }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }


    java.lang.Object var0 = null;
    org.jfree.chart.JFreeChart var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.event.ChartChangeEvent var2 = new org.jfree.chart.event.ChartChangeEvent(var0, var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var6 = var3.getLegendItem((-1), 100);
    var3.setBaseShapesFilled(false);
    java.awt.Paint var11 = var3.getItemOutlinePaint(10, 1);
    java.awt.Paint var13 = var3.getSeriesOutlinePaint(10);
    var3.setAutoPopulateSeriesShape(false);
    boolean var16 = var1.equals((java.lang.Object)var3);
    java.awt.Paint var18 = var3.getSeriesOutlinePaint(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }
// 
// 
//     java.awt.geom.Rectangle2D var0 = null;
//     org.jfree.chart.axis.AxisCollection var1 = new org.jfree.chart.axis.AxisCollection();
//     org.jfree.chart.axis.NumberAxis3D var3 = new org.jfree.chart.axis.NumberAxis3D("");
//     java.awt.Paint var4 = var3.getTickLabelPaint();
//     java.awt.Shape var5 = var3.getDownArrow();
//     org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
//     var7.configure();
//     org.jfree.chart.axis.NumberTickUnit var9 = var7.getTickUnit();
//     var3.setTickUnit(var9);
//     org.jfree.chart.plot.XYPlot var11 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var13 = new org.jfree.chart.axis.NumberAxis3D("");
//     var13.configure();
//     org.jfree.chart.util.RectangleInsets var15 = var13.getLabelInsets();
//     var11.setAxisOffset(var15);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var18 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var19 = var18.getEndType();
//     java.awt.Stroke var22 = var18.getItemStroke(0, 0);
//     var11.setRangeZeroBaselineStroke(var22);
//     org.jfree.chart.util.Layer var24 = null;
//     java.util.Collection var25 = var11.getDomainMarkers(var24);
//     org.jfree.chart.util.RectangleInsets var26 = var11.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var29 = var28.getEndType();
//     java.awt.Stroke var32 = var28.getItemStroke(0, 0);
//     var11.setDomainZeroBaselineStroke(var32);
//     org.jfree.chart.util.RectangleEdge var34 = var11.getDomainAxisEdge();
//     var1.add((org.jfree.chart.axis.Axis)var3, var34);
//     double var36 = org.jfree.chart.util.RectangleEdge.coordinate(var0, var34);
// 
//   }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.PlotRenderingInfo var47 = null;
    org.jfree.chart.plot.XYPlot var48 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var50 = new org.jfree.chart.axis.NumberAxis3D("");
    var50.configure();
    org.jfree.chart.util.RectangleInsets var52 = var50.getLabelInsets();
    var48.setAxisOffset(var52);
    org.jfree.chart.plot.CategoryMarker var55 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var56 = var55.getOutlineStroke();
    var48.addDomainMarker((org.jfree.chart.plot.Marker)var55);
    java.awt.geom.Point2D var58 = var48.getQuadrantOrigin();
    var38.zoomRangeAxes(0.0d, 90.0d, var47, var58);
    org.jfree.data.general.PieDataset var60 = null;
    org.jfree.chart.plot.RingPlot var61 = new org.jfree.chart.plot.RingPlot(var60);
    org.jfree.chart.plot.Plot var62 = var61.getRootPlot();
    org.jfree.chart.JFreeChart var63 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var61);
    boolean var64 = var63.getAntiAlias();
    org.jfree.chart.util.RectangleInsets var65 = var63.getPadding();
    var38.removeChangeListener((org.jfree.chart.event.PlotChangeListener)var63);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var67 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var67.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var71 = var67.getBaseLinesVisible();
    java.lang.Boolean var73 = var67.getSeriesVisibleInLegend(10);
    java.awt.Paint var74 = var67.getBaseItemLabelPaint();
    org.jfree.chart.block.BlockBorder var75 = new org.jfree.chart.block.BlockBorder(var74);
    var38.setDomainGridlinePaint(var74);
    org.jfree.chart.annotations.CategoryAnnotation var77 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var78 = var38.removeAnnotation(var77);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }


    org.jfree.data.DefaultKeyedValue var2 = new org.jfree.data.DefaultKeyedValue((java.lang.Comparable)10, (java.lang.Number)(-1L));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var3.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var7 = var3.getBaseLinesVisible();
    java.lang.Boolean var9 = var3.getSeriesVisibleInLegend(10);
    var3.setBaseSeriesVisibleInLegend(false);
    org.jfree.data.general.PieDataset var13 = null;
    org.jfree.chart.plot.RingPlot var14 = new org.jfree.chart.plot.RingPlot(var13);
    org.jfree.chart.plot.Plot var15 = var14.getRootPlot();
    org.jfree.chart.JFreeChart var16 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var14);
    boolean var17 = var16.getAntiAlias();
    java.awt.Stroke var18 = var16.getBorderStroke();
    var3.setSeriesOutlineStroke(15, var18, true);
    boolean var21 = var2.equals((java.lang.Object)true);
    java.lang.Number var22 = var2.getValue();
    java.lang.Number var23 = var2.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + (-1L)+ "'", var22.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + (-1L)+ "'", var23.equals((-1L)));

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    java.awt.Stroke var14 = var7.getSeparatorStroke();
    double var15 = var7.getStartAngle();
    var7.setCircular(true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 90.0d);

  }

  public void test79() {}
//   public void test79() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     java.awt.Graphics2D var22 = null;
//     java.awt.geom.Rectangle2D var23 = null;
//     var7.drawBackgroundImage(var22, var23);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var27 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var30 = var27.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var31 = null;
//     org.jfree.chart.plot.RingPlot var32 = new org.jfree.chart.plot.RingPlot(var31);
//     org.jfree.chart.plot.Plot var33 = var32.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var34 = null;
//     var32.axisChanged(var34);
//     org.jfree.chart.JFreeChart var37 = new org.jfree.chart.JFreeChart("hi!", var30, (org.jfree.chart.plot.Plot)var32, true);
//     org.jfree.chart.event.ChartProgressListener var38 = null;
//     var37.removeProgressListener(var38);
//     var7.addChangeListener((org.jfree.chart.event.PlotChangeListener)var37);
//     
//     // Checks the contract:  equals-hashcode on var7 and var32
//     assertTrue("Contract failed: equals-hashcode on var7 and var32", var7.equals(var32) ? var7.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var7
//     assertTrue("Contract failed: equals-hashcode on var32 and var7", var32.equals(var7) ? var32.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var33
//     assertTrue("Contract failed: equals-hashcode on var8 and var33", var8.equals(var33) ? var8.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var8
//     assertTrue("Contract failed: equals-hashcode on var33 and var8", var33.equals(var8) ? var33.hashCode() == var8.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var12 and var37
//     assertTrue("Contract failed: equals-hashcode on var12 and var37", var12.equals(var37) ? var12.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var12
//     assertTrue("Contract failed: equals-hashcode on var37 and var12", var37.equals(var12) ? var37.hashCode() == var12.hashCode() : true);
// 
//   }

  public void test80() {}
//   public void test80() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var8 = var7.getOutlineStroke();
//     var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
//     org.jfree.chart.renderer.xy.XYItemRenderer var10 = var0.getRenderer();
//     org.jfree.chart.axis.ValueAxis var12 = var0.getDomainAxis(1);
//     double var13 = var0.getDomainCrosshairValue();
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     var0.drawBackground(var14, var15);
// 
//   }

  public void test81() {}
//   public void test81() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }
// 
// 
//     org.jfree.chart.plot.CategoryMarker var1 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var2 = var1.getLabelPaint();
//     org.jfree.chart.plot.XYPlot var3 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var5 = new org.jfree.chart.axis.NumberAxis3D("");
//     var5.configure();
//     org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
//     var3.setAxisOffset(var7);
//     org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var11 = var10.getOutlineStroke();
//     var3.addDomainMarker((org.jfree.chart.plot.Marker)var10);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var15 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var18 = var15.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var19 = null;
//     org.jfree.chart.plot.RingPlot var20 = new org.jfree.chart.plot.RingPlot(var19);
//     org.jfree.chart.plot.Plot var21 = var20.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var22 = null;
//     var20.axisChanged(var22);
//     org.jfree.chart.JFreeChart var25 = new org.jfree.chart.JFreeChart("hi!", var18, (org.jfree.chart.plot.Plot)var20, true);
//     java.awt.Paint var26 = var20.getBackgroundPaint();
//     java.awt.Paint var27 = var20.getLabelOutlinePaint();
//     var3.setRangeTickBandPaint(var27);
//     org.jfree.chart.util.Layer var29 = null;
//     java.util.Collection var30 = var3.getRangeMarkers(var29);
//     org.jfree.chart.plot.PlotOrientation var31 = var3.getOrientation();
//     var1.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var3);
//     
//     // Checks the contract:  equals-hashcode on var1 and var10
//     assertTrue("Contract failed: equals-hashcode on var1 and var10", var1.equals(var10) ? var1.hashCode() == var10.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var10 and var1
//     assertTrue("Contract failed: equals-hashcode on var10 and var1", var10.equals(var1) ? var10.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    org.jfree.chart.title.TextTitle var0 = new org.jfree.chart.title.TextTitle();

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.util.RectangleInsets var3 = var1.getInsets();
    double var5 = var3.calculateBottomOutset(100.0d);
    java.awt.geom.Rectangle2D var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.geom.Rectangle2D var9 = var3.createOutsetRectangle(var6, false, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4.0d);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    int var1 = org.jfree.data.time.SerialDate.stringToWeekdayCode("DateTickMarkPosition.START");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test85() {}
//   public void test85() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }
// 
// 
//     org.jfree.chart.axis.AxisSpace var0 = new org.jfree.chart.axis.AxisSpace();
//     double var1 = var0.getLeft();
//     java.awt.geom.Rectangle2D var2 = null;
//     java.awt.geom.Rectangle2D var3 = null;
//     java.awt.geom.Rectangle2D var4 = var0.shrink(var2, var3);
// 
//   }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var0, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var4 = var0.getRowKey(0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    java.awt.Paint var2 = var1.getBaseSectionPaint();
    double var3 = var1.getMaximumLabelWidth();
    org.jfree.chart.event.PlotChangeEvent var4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var1);
    java.lang.Object var5 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    org.jfree.chart.axis.NumberAxis3D var3 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var4 = var3.isTickMarksVisible();
    org.jfree.data.Range var7 = new org.jfree.data.Range(1.0d, 100.0d);
    var3.setRangeWithMargins(var7, false, false);
    var1.setRangeWithMargins(var7);
    var1.configure();
    org.jfree.chart.axis.NumberTickUnit var13 = var1.getTickUnit();
    java.awt.Font var14 = var1.getLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
    var13.setBaseShapesFilled(false);
    java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
    boolean var21 = var12.equals((java.lang.Object)var13);
    int var22 = var12.getBackgroundImageAlignment();
    org.jfree.chart.renderer.category.StackedAreaRenderer var25 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var28 = var25.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var29 = null;
    org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
    org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var32 = null;
    var30.axisChanged(var32);
    org.jfree.chart.JFreeChart var35 = new org.jfree.chart.JFreeChart("hi!", var28, (org.jfree.chart.plot.Plot)var30, true);
    java.lang.Object var36 = var30.clone();
    java.awt.Stroke var37 = var30.getSeparatorStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setTextAntiAlias((java.lang.Object)var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate(1, (-457), 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    boolean var9 = var0.getUseOutlinePaint();
    boolean var12 = var0.getItemShapeFilled(100, 10);
    org.jfree.chart.labels.CategoryToolTipGenerator var13 = null;
    var0.setBaseToolTipGenerator(var13);
    var0.setAutoPopulateSeriesShape(false);
    java.awt.Paint var19 = var0.getItemFillPaint(2, 2);
    org.jfree.chart.event.RendererChangeListener var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addChangeListener(var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    org.jfree.data.KeyToGroupMap var9 = new org.jfree.data.KeyToGroupMap();
    java.util.List var10 = var9.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var10);
    java.lang.Comparable var12 = null;
    var0.setObject((java.lang.Object)var10, var12, (java.lang.Comparable)1);
    var0.removeObject((java.lang.Comparable)10, (java.lang.Comparable)(short)100);
    int var18 = var0.getRowCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);

  }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }
// 
// 
//     org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
//     var1.setBaseNegativeItemLabelPosition(var12);
//     var0.setPositiveItemLabelPositionFallback(var12);
//     org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var21 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var24 = var21.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var25 = null;
//     org.jfree.chart.plot.RingPlot var26 = new org.jfree.chart.plot.RingPlot(var25);
//     org.jfree.chart.plot.Plot var27 = var26.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var28 = null;
//     var26.axisChanged(var28);
//     org.jfree.chart.JFreeChart var31 = new org.jfree.chart.JFreeChart("hi!", var24, (org.jfree.chart.plot.Plot)var26, true);
//     java.awt.Paint var32 = var26.getBackgroundPaint();
//     var17.setSeriesItemLabelPaint(0, var32, true);
//     var0.setCompletePaint(var32);
//     org.jfree.chart.plot.IntervalMarker var38 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
//     double var39 = var38.getEndValue();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var40 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var43 = var40.getLegendItem((-1), 100);
//     var40.setBaseShapesFilled(false);
//     java.awt.Paint var47 = var40.getSeriesOutlinePaint((-1));
//     java.awt.Paint var49 = var40.lookupSeriesOutlinePaint(0);
//     var38.setOutlinePaint(var49);
//     var0.setBasePaint(var49, false);
//     org.jfree.data.general.PieDataset var53 = null;
//     org.jfree.chart.plot.RingPlot var54 = new org.jfree.chart.plot.RingPlot(var53);
//     org.jfree.chart.plot.Plot var55 = var54.getRootPlot();
//     org.jfree.chart.JFreeChart var56 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var54);
//     org.jfree.chart.plot.CategoryMarker var58 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var59 = var58.getOutlineStroke();
//     var56.setBorderStroke(var59);
//     var0.setBaseStroke(var59, false);
//     
//     // Checks the contract:  equals-hashcode on var26 and var54
//     assertTrue("Contract failed: equals-hashcode on var26 and var54", var26.equals(var54) ? var26.hashCode() == var54.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var26
//     assertTrue("Contract failed: equals-hashcode on var54 and var26", var54.equals(var26) ? var54.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var55
//     assertTrue("Contract failed: equals-hashcode on var27 and var55", var27.equals(var55) ? var27.hashCode() == var55.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var55 and var27
//     assertTrue("Contract failed: equals-hashcode on var55 and var27", var55.equals(var27) ? var55.hashCode() == var27.hashCode() : true);
// 
//   }

  public void test94() {}
//   public void test94() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var2.setUpperMargin(0.0d);
//     int var5 = var2.getMaximumCategoryLabelLines();
//     java.lang.Object var6 = var2.clone();
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
//     var8.setBaseShapesFilled(false);
//     java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
//     java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
//     var7.setLabelPaint(var17);
//     double var19 = var7.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
//     double var24 = var20.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
//     var20.setErrorIndicatorPaint(var36);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
//     java.awt.geom.Rectangle2D var41 = null;
//     org.jfree.chart.plot.XYPlot var42 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var44 = new org.jfree.chart.axis.NumberAxis3D("");
//     var44.configure();
//     org.jfree.chart.util.RectangleInsets var46 = var44.getLabelInsets();
//     var42.setAxisOffset(var46);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var49 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var50 = var49.getEndType();
//     java.awt.Stroke var53 = var49.getItemStroke(0, 0);
//     var42.setRangeZeroBaselineStroke(var53);
//     boolean var55 = var42.isRangeCrosshairLockedOnData();
//     org.jfree.chart.util.RectangleEdge var57 = var42.getDomainAxisEdge(1);
//     double var58 = var2.getCategoryMiddle(2, 100, var41, var57);
// 
//   }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    org.jfree.data.time.SimpleTimePeriod var3 = new org.jfree.data.time.SimpleTimePeriod((-1L), 10L);
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var3);
    org.jfree.chart.renderer.category.StatisticalBarRenderer var5 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    double var6 = var5.getItemMargin();
    org.jfree.chart.LegendItemCollection var7 = var5.getLegendItems();
    java.awt.Paint var10 = var5.getItemPaint((-16777206), (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = var3.compareTo((java.lang.Object)(-1));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
    var13.setBaseShapesFilled(false);
    java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
    boolean var21 = var12.equals((java.lang.Object)var13);
    org.jfree.chart.title.TextTitle var22 = var12.getTitle();
    org.jfree.chart.util.HorizontalAlignment var23 = var22.getTextAlignment();
    var22.setText("hi!");
    java.lang.String var26 = var22.getText();
    java.awt.Font var27 = var22.getFont();
    var22.setExpandToFitSpace(true);
    java.awt.Paint var30 = var22.getBackgroundPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    org.jfree.chart.axis.NumberTickUnit var3 = var1.getTickUnit();
    org.jfree.data.Range var4 = var1.getRange();
    boolean var5 = var1.isTickLabelsVisible();
    var1.setTickMarksVisible(true);
    var1.setRange(2.0d, Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    var1.setBaseShapesFilled(false);
    java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
    var1.setBaseNegativeItemLabelPosition(var12);
    var0.setPositiveItemLabelPositionFallback(var12);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
    org.jfree.chart.renderer.category.StackedAreaRenderer var21 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var24 = var21.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var25 = null;
    org.jfree.chart.plot.RingPlot var26 = new org.jfree.chart.plot.RingPlot(var25);
    org.jfree.chart.plot.Plot var27 = var26.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var28 = null;
    var26.axisChanged(var28);
    org.jfree.chart.JFreeChart var31 = new org.jfree.chart.JFreeChart("hi!", var24, (org.jfree.chart.plot.Plot)var26, true);
    java.awt.Paint var32 = var26.getBackgroundPaint();
    var17.setSeriesItemLabelPaint(0, var32, true);
    var0.setCompletePaint(var32);
    org.jfree.chart.axis.NumberAxis3D var39 = new org.jfree.chart.axis.NumberAxis3D("");
    java.awt.Paint var40 = var39.getTickLabelPaint();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var41 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var44 = var41.getLegendItem(2, 0);
    double var45 = var41.getBase();
    java.awt.Color var48 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var49 = null;
    float[] var50 = var48.getRGBColorComponents(var49);
    java.awt.Color var53 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var54 = null;
    float[] var55 = var53.getRGBColorComponents(var54);
    float[] var56 = var48.getColorComponents(var54);
    var41.setErrorIndicatorPaint((java.awt.Paint)var48);
    org.jfree.chart.plot.XYPlot var58 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var60 = new org.jfree.chart.axis.NumberAxis3D("");
    var60.configure();
    org.jfree.chart.util.RectangleInsets var62 = var60.getLabelInsets();
    var58.setAxisOffset(var62);
    org.jfree.chart.plot.CategoryMarker var65 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var66 = var65.getOutlineStroke();
    var58.addDomainMarker((org.jfree.chart.plot.Marker)var65);
    java.awt.geom.Point2D var68 = var58.getQuadrantOrigin();
    java.awt.Paint var69 = var58.getDomainCrosshairPaint();
    org.jfree.chart.renderer.category.StackedAreaRenderer var71 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var72 = var71.getEndType();
    java.awt.Paint var73 = var71.getBaseFillPaint();
    org.jfree.chart.renderer.category.WaterfallBarRenderer var74 = new org.jfree.chart.renderer.category.WaterfallBarRenderer(var40, (java.awt.Paint)var48, var69, var73);
    org.jfree.chart.axis.NumberAxis3D var76 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var77 = var76.isTickMarksVisible();
    org.jfree.data.Range var80 = new org.jfree.data.Range(1.0d, 100.0d);
    var76.setRangeWithMargins(var80, false, false);
    java.text.NumberFormat var84 = var76.getNumberFormatOverride();
    java.awt.Stroke var85 = var76.getAxisLineStroke();
    org.jfree.chart.plot.CategoryMarker var86 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0d, var73, var85);
    var0.setSeriesPaint(0, var73, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    boolean var4 = var0.getBaseLinesVisible();
    org.jfree.chart.renderer.category.BoxAndWhiskerRenderer var6 = new org.jfree.chart.renderer.category.BoxAndWhiskerRenderer();
    double var7 = var6.getItemMargin();
    java.awt.Paint var8 = var6.getArtifactPaint();
    var0.setSeriesItemLabelPaint(0, var8);
    var0.setSeriesShapesVisible(100, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    boolean var4 = var3.getAntiAlias();
    java.awt.Stroke var5 = var3.getBorderStroke();
    java.awt.Image var6 = var3.getBackgroundImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test101() {}
//   public void test101() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     double var1 = var0.getLabelAngle();
//     var0.setTickLabelsVisible(false);
//     var0.configure();
//     org.jfree.chart.event.AxisChangeListener var5 = null;
//     var0.removeChangeListener(var5);
//     java.text.DateFormat var7 = null;
//     var0.setDateFormatOverride(var7);
//     org.jfree.chart.axis.DateTickUnit var9 = null;
//     java.util.Date var10 = var0.calculateHighestVisibleTickValue(var9);
// 
//   }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
    java.awt.Paint var11 = var0.getDomainCrosshairPaint();
    var0.setWeight((-1));
    var0.setRangeCrosshairVisible(true);
    java.awt.Graphics2D var16 = null;
    java.awt.geom.Rectangle2D var17 = null;
    org.jfree.chart.plot.PlotRenderingInfo var19 = null;
    org.jfree.chart.plot.CrosshairState var20 = null;
    boolean var21 = var0.render(var16, var17, 0, var19, var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test103() {}
//   public void test103() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
//     var13.setBaseShapesFilled(false);
//     java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
//     boolean var21 = var12.equals((java.lang.Object)var13);
//     org.jfree.chart.title.TextTitle var22 = var12.getTitle();
//     org.jfree.chart.util.HorizontalAlignment var23 = var22.getTextAlignment();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var26 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var29 = var26.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var30 = null;
//     org.jfree.chart.plot.RingPlot var31 = new org.jfree.chart.plot.RingPlot(var30);
//     org.jfree.chart.plot.Plot var32 = var31.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var33 = null;
//     var31.axisChanged(var33);
//     org.jfree.chart.JFreeChart var36 = new org.jfree.chart.JFreeChart("hi!", var29, (org.jfree.chart.plot.Plot)var31, true);
//     java.lang.Object var37 = var31.clone();
//     org.jfree.chart.util.HorizontalAlignment var38 = null;
//     org.jfree.chart.util.VerticalAlignment var39 = null;
//     org.jfree.chart.block.FlowArrangement var42 = new org.jfree.chart.block.FlowArrangement(var38, var39, 100.0d, 10.0d);
//     var42.clear();
//     org.jfree.chart.block.Arrangement var44 = null;
//     org.jfree.chart.title.LegendTitle var45 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var31, (org.jfree.chart.block.Arrangement)var42, var44);
//     org.jfree.data.UnknownKeyException var47 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var48 = var47.getSuppressed();
//     java.lang.Throwable[] var49 = var47.getSuppressed();
//     boolean var50 = var45.equals((java.lang.Object)var49);
//     org.jfree.chart.util.RectangleInsets var51 = var45.getItemLabelPadding();
//     org.jfree.chart.util.VerticalAlignment var52 = var45.getVerticalAlignment();
//     org.jfree.chart.block.FlowArrangement var55 = new org.jfree.chart.block.FlowArrangement(var23, var52, 12.0d, 3.0d);
//     
//     // Checks the contract:  equals-hashcode on var7 and var31
//     assertTrue("Contract failed: equals-hashcode on var7 and var31", var7.equals(var31) ? var7.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var7
//     assertTrue("Contract failed: equals-hashcode on var31 and var7", var31.equals(var7) ? var31.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var32
//     assertTrue("Contract failed: equals-hashcode on var8 and var32", var8.equals(var32) ? var8.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var8
//     assertTrue("Contract failed: equals-hashcode on var32 and var8", var32.equals(var8) ? var32.hashCode() == var8.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var12 and var36
//     assertTrue("Contract failed: equals-hashcode on var12 and var36", var12.equals(var36) ? var12.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var12
//     assertTrue("Contract failed: equals-hashcode on var36 and var12", var36.equals(var12) ? var36.hashCode() == var12.hashCode() : true);
// 
//   }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    org.jfree.data.time.Month var1 = new org.jfree.data.time.Month();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var1);
    org.jfree.chart.plot.XYPlot var3 = new org.jfree.chart.plot.XYPlot();
    var3.setDomainCrosshairValue(0.05d);
    java.awt.Paint var6 = var3.getDomainCrosshairPaint();
    org.jfree.chart.plot.IntervalMarker var10 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
    double var11 = var10.getEndValue();
    var10.setStartValue(0.2d);
    org.jfree.chart.util.Layer var14 = null;
    var3.addRangeMarker(0, (org.jfree.chart.plot.Marker)var10, var14);
    boolean var16 = var2.equals((java.lang.Object)var3);
    org.jfree.chart.axis.AxisLocation var17 = var3.getRangeAxisLocation();
    java.lang.String var18 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "AxisLocation.BOTTOM_OR_LEFT"+ "'", var18.equals("AxisLocation.BOTTOM_OR_LEFT"));

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    org.jfree.chart.renderer.category.AreaRenderer var0 = new org.jfree.chart.renderer.category.AreaRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var1 = var0.getBaseURLGenerator();
    var0.setSeriesVisible(0, (java.lang.Boolean)true, false);
    boolean var8 = var0.getItemVisible((-1), 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    var1.setBaseShapesFilled(false);
    java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
    var1.setBaseNegativeItemLabelPosition(var12);
    var0.setPositiveItemLabelPositionFallback(var12);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
    org.jfree.chart.renderer.category.StackedAreaRenderer var21 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var24 = var21.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var25 = null;
    org.jfree.chart.plot.RingPlot var26 = new org.jfree.chart.plot.RingPlot(var25);
    org.jfree.chart.plot.Plot var27 = var26.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var28 = null;
    var26.axisChanged(var28);
    org.jfree.chart.JFreeChart var31 = new org.jfree.chart.JFreeChart("hi!", var24, (org.jfree.chart.plot.Plot)var26, true);
    java.awt.Paint var32 = var26.getBackgroundPaint();
    var17.setSeriesItemLabelPaint(0, var32, true);
    var0.setCompletePaint(var32);
    java.lang.Object var36 = null;
    boolean var37 = var0.equals(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.util.RectangleInsets var3 = var1.getInsets();
    java.awt.Stroke var4 = var1.getBaseSectionOutlineStroke();
    org.jfree.chart.renderer.category.StackedAreaRenderer var6 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var9 = var6.getItemLabelFont((-1), 0);
    var1.setNoDataMessageFont(var9);
    org.jfree.chart.urls.PieURLGenerator var11 = var1.getURLGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    var7.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
    org.jfree.chart.renderer.category.StatisticalBarRenderer var12 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var13.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var17 = var13.getBaseLinesVisible();
    java.lang.Boolean var19 = var13.getSeriesVisibleInLegend(10);
    java.awt.Paint var20 = var13.getBaseItemLabelPaint();
    java.awt.Color var23 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var24 = null;
    float[] var25 = var23.getRGBColorComponents(var24);
    var13.setBaseItemLabelPaint((java.awt.Paint)var23);
    org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var29 = var28.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var30 = var28.getBaseNegativeItemLabelPosition();
    var13.setBasePositiveItemLabelPosition(var30, true);
    var12.setPositiveItemLabelPositionFallback(var30);
    org.jfree.chart.text.TextAnchor var34 = var30.getRotationAnchor();
    var7.setLabelTextAnchor(var34);
    java.awt.Stroke var36 = var7.getStroke();
    org.jfree.data.KeyedObjects2D var37 = new org.jfree.data.KeyedObjects2D();
    boolean var38 = var7.equals((java.lang.Object)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var37.removeRow((-457));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
    org.jfree.chart.axis.AxisSpace var43 = var38.getFixedDomainAxisSpace();
    double var44 = var38.getAnchorValue();
    var38.clearRangeMarkers((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);

  }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }
// 
// 
//     java.util.Date var0 = null;
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var1 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     org.jfree.data.time.Year var4 = new org.jfree.data.time.Year();
//     org.jfree.data.time.Month var5 = new org.jfree.data.time.Month(10, var4);
//     org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("PlotOrientation.VERTICAL", (org.jfree.data.time.TimePeriod)var4);
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
//     var8.setBaseShapesFilled(false);
//     java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
//     java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
//     var7.setLabelPaint(var17);
//     double var19 = var7.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     java.awt.Paint var33 = var27.getBackgroundPaint();
//     java.awt.Paint var34 = var27.getLabelOutlinePaint();
//     var7.setTickMarkPaint(var34);
//     java.text.DateFormat var38 = null;
//     org.jfree.chart.axis.DateTickUnit var39 = new org.jfree.chart.axis.DateTickUnit(2, 1, var38);
//     var7.setTickUnit(var39, false, false);
//     org.jfree.chart.axis.DateAxis var43 = new org.jfree.chart.axis.DateAxis();
//     java.util.Date var44 = var43.getMaximumDate();
//     java.lang.String var45 = var39.dateToString(var44);
//     java.lang.Number var46 = var1.getStdDevValue((java.lang.Comparable)var4, (java.lang.Comparable)var45);
//     org.jfree.data.Range var48 = var1.getRangeBounds(false);
//     org.jfree.chart.axis.DateAxis var49 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var53 = var50.getLegendItem((-1), 100);
//     var50.setBaseShapesFilled(false);
//     java.awt.Paint var57 = var50.getSeriesOutlinePaint((-1));
//     java.awt.Paint var59 = var50.lookupSeriesOutlinePaint(0);
//     var49.setLabelPaint(var59);
//     boolean var61 = var49.isNegativeArrowVisible();
//     org.jfree.data.Range var64 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var65 = var64.toString();
//     org.jfree.data.Range var67 = org.jfree.data.Range.shift(var64, 0.0d);
//     var49.setRange(var67);
//     org.jfree.data.time.Month var69 = new org.jfree.data.time.Month();
//     long var70 = var69.getSerialIndex();
//     java.util.Date var71 = var69.getEnd();
//     org.jfree.data.time.Month var72 = new org.jfree.data.time.Month();
//     long var73 = var72.getSerialIndex();
//     java.util.Date var74 = var72.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var75 = new org.jfree.data.time.SimpleTimePeriod(var71, var74);
//     var49.setMaximumDate(var71);
//     org.jfree.data.time.Month var77 = new org.jfree.data.time.Month();
//     long var78 = var77.getSerialIndex();
//     java.util.Date var79 = var77.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var80 = new org.jfree.data.time.SimpleTimePeriod(var71, var79);
//     java.lang.Number var82 = var1.getValue((java.lang.Comparable)var79, (java.lang.Comparable)"SortOrder.ASCENDING");
//     org.jfree.data.time.DateRange var83 = new org.jfree.data.time.DateRange(var0, var79);
// 
//   }

  public void test111() {}
//   public void test111() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }
// 
// 
//     java.awt.Graphics2D var1 = null;
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var8 = var7.getLabelPaint();
//     java.lang.Comparable var9 = var7.getKey();
//     java.lang.String var10 = var7.getLabel();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var13 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var16 = var13.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var17 = null;
//     org.jfree.chart.plot.RingPlot var18 = new org.jfree.chart.plot.RingPlot(var17);
//     org.jfree.chart.plot.Plot var19 = var18.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var20 = null;
//     var18.axisChanged(var20);
//     org.jfree.chart.JFreeChart var23 = new org.jfree.chart.JFreeChart("hi!", var16, (org.jfree.chart.plot.Plot)var18, true);
//     var7.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var18);
//     java.lang.Comparable var25 = var7.getKey();
//     org.jfree.chart.text.TextAnchor var26 = var7.getLabelTextAnchor();
//     org.jfree.data.time.Month var27 = new org.jfree.data.time.Month();
//     long var28 = var27.getSerialIndex();
//     java.util.Date var29 = var27.getEnd();
//     org.jfree.chart.text.TextBlock var30 = null;
//     org.jfree.chart.text.TextBlockAnchor var31 = null;
//     org.jfree.chart.plot.XYPlot var32 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var34 = new org.jfree.chart.axis.NumberAxis3D("");
//     var34.configure();
//     org.jfree.chart.util.RectangleInsets var36 = var34.getLabelInsets();
//     var32.setAxisOffset(var36);
//     org.jfree.chart.plot.CategoryMarker var39 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var40 = var39.getOutlineStroke();
//     var32.addDomainMarker((org.jfree.chart.plot.Marker)var39);
//     var39.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var44 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var45 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var45.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var49 = var45.getBaseLinesVisible();
//     java.lang.Boolean var51 = var45.getSeriesVisibleInLegend(10);
//     java.awt.Paint var52 = var45.getBaseItemLabelPaint();
//     java.awt.Color var55 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var56 = null;
//     float[] var57 = var55.getRGBColorComponents(var56);
//     var45.setBaseItemLabelPaint((java.awt.Paint)var55);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var60 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var61 = var60.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var62 = var60.getBaseNegativeItemLabelPosition();
//     var45.setBasePositiveItemLabelPosition(var62, true);
//     var44.setPositiveItemLabelPositionFallback(var62);
//     org.jfree.chart.text.TextAnchor var66 = var62.getRotationAnchor();
//     var39.setLabelTextAnchor(var66);
//     org.jfree.chart.axis.CategoryTick var69 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var29, var30, var31, var66, 2.0d);
//     org.jfree.chart.text.TextAnchor var70 = var69.getRotationAnchor();
//     org.jfree.chart.axis.NumberTick var72 = new org.jfree.chart.axis.NumberTick((java.lang.Number)(byte)100, "Size2D[width=50.5, height=10.0]", var26, var70, 50.5d);
//     org.jfree.chart.text.TextAnchor var74 = null;
//     java.awt.Shape var75 = org.jfree.chart.text.TextUtilities.calculateRotatedStringBounds("org.jfree.data.UnknownKeyException: ", var1, 0.5f, 10.0f, var26, 1.0d, var74);
// 
//   }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }


    java.text.NumberFormat var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.labels.IntervalCategoryToolTipGenerator var2 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("java.awt.Color[r=0,g=0,b=10]", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    org.jfree.data.KeyToGroupMap var9 = new org.jfree.data.KeyToGroupMap();
    java.util.List var10 = var9.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var10);
    java.lang.Comparable var12 = null;
    var0.setObject((java.lang.Object)var10, var12, (java.lang.Comparable)1);
    var0.removeObject((java.lang.Comparable)10, (java.lang.Comparable)(short)100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeColumn((-16777206));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    org.jfree.chart.axis.AxisState var0 = new org.jfree.chart.axis.AxisState();
    var0.cursorUp((-1.0d));
    var0.setMax(Double.NaN);
    double var5 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1.0d);

  }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }
// 
// 
//     org.jfree.data.DefaultKeyedValues var1 = new org.jfree.data.DefaultKeyedValues();
//     org.jfree.data.category.CategoryDataset var2 = null;
//     org.jfree.chart.axis.CategoryAxis var4 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var4.setUpperMargin(0.0d);
//     int var7 = var4.getMaximumCategoryLabelLines();
//     java.lang.Object var8 = var4.clone();
//     org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var13 = var10.getLegendItem((-1), 100);
//     var10.setBaseShapesFilled(false);
//     java.awt.Paint var17 = var10.getSeriesOutlinePaint((-1));
//     java.awt.Paint var19 = var10.lookupSeriesOutlinePaint(0);
//     var9.setLabelPaint(var19);
//     double var21 = var9.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var22 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var25 = var22.getLegendItem(2, 0);
//     double var26 = var22.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var29 = var22.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var33 = var30.getLegendItem((-1), 100);
//     var30.setBaseShapesFilled(false);
//     java.awt.Paint var38 = var30.getItemOutlinePaint(10, 1);
//     var22.setErrorIndicatorPaint(var38);
//     org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot(var2, var4, (org.jfree.chart.axis.ValueAxis)var9, (org.jfree.chart.renderer.category.CategoryItemRenderer)var22);
//     var40.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var44 = var40.getDomainAxis(0);
//     var40.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.SortOrder var47 = var40.getColumnRenderingOrder();
//     var1.sortByValues(var47);
//     org.jfree.data.time.Month var49 = new org.jfree.data.time.Month();
//     long var50 = var49.getSerialIndex();
//     java.util.Date var51 = var49.getEnd();
//     var1.setValue((java.lang.Comparable)var51, (java.lang.Number)1.0E-5d);
//     org.jfree.data.time.SerialDate var54 = org.jfree.data.time.SerialDate.createInstance(var51);
//     org.jfree.data.time.SerialDate var55 = org.jfree.data.time.SerialDate.addYears((-1), var54);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.data.time.SerialDate var57 = var54.getFollowingDayOfWeek((-457));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
// 
//   }

  public void test116() {}
//   public void test116() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }
// 
// 
//     org.jfree.chart.axis.CategoryLabelPositions var0 = new org.jfree.chart.axis.CategoryLabelPositions();
//     org.jfree.chart.plot.XYPlot var1 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var3 = new org.jfree.chart.axis.NumberAxis3D("");
//     var3.configure();
//     org.jfree.chart.util.RectangleInsets var5 = var3.getLabelInsets();
//     var1.setAxisOffset(var5);
//     org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var9 = var8.getOutlineStroke();
//     var1.addDomainMarker((org.jfree.chart.plot.Marker)var8);
//     java.awt.geom.Point2D var11 = var1.getQuadrantOrigin();
//     org.jfree.chart.plot.DatasetRenderingOrder var12 = var1.getDatasetRenderingOrder();
//     var1.setDomainCrosshairValue(1.0d, true);
//     java.awt.Paint var16 = var1.getDomainGridlinePaint();
//     org.jfree.chart.util.RectangleEdge var18 = var1.getDomainAxisEdge(2);
//     org.jfree.chart.axis.CategoryLabelPosition var19 = var0.getLabelPosition(var18);
//     org.jfree.chart.axis.CategoryLabelPositions var20 = new org.jfree.chart.axis.CategoryLabelPositions();
//     org.jfree.chart.plot.XYPlot var21 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var23 = new org.jfree.chart.axis.NumberAxis3D("");
//     var23.configure();
//     org.jfree.chart.util.RectangleInsets var25 = var23.getLabelInsets();
//     var21.setAxisOffset(var25);
//     org.jfree.chart.plot.CategoryMarker var28 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var29 = var28.getOutlineStroke();
//     var21.addDomainMarker((org.jfree.chart.plot.Marker)var28);
//     java.awt.geom.Point2D var31 = var21.getQuadrantOrigin();
//     org.jfree.chart.plot.DatasetRenderingOrder var32 = var21.getDatasetRenderingOrder();
//     var21.setDomainCrosshairValue(1.0d, true);
//     java.awt.Paint var36 = var21.getDomainGridlinePaint();
//     org.jfree.chart.util.RectangleEdge var38 = var21.getDomainAxisEdge(2);
//     org.jfree.chart.axis.CategoryLabelPosition var39 = var20.getLabelPosition(var38);
//     double var40 = var39.getAngle();
//     org.jfree.chart.axis.CategoryLabelPositions var41 = org.jfree.chart.axis.CategoryLabelPositions.replaceBottomPosition(var0, var39);
//     
//     // Checks the contract:  equals-hashcode on var1 and var21
//     assertTrue("Contract failed: equals-hashcode on var1 and var21", var1.equals(var21) ? var1.hashCode() == var21.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var21 and var1
//     assertTrue("Contract failed: equals-hashcode on var21 and var1", var21.equals(var1) ? var21.hashCode() == var1.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var28
//     assertTrue("Contract failed: equals-hashcode on var8 and var28", var8.equals(var28) ? var8.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var8
//     assertTrue("Contract failed: equals-hashcode on var28 and var8", var28.equals(var8) ? var28.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var3 = var1.getBaseNegativeItemLabelPosition();
//     org.jfree.chart.labels.ItemLabelPosition var5 = var1.getSeriesNegativeItemLabelPosition((-1));
//     org.jfree.chart.plot.MultiplePiePlot var6 = new org.jfree.chart.plot.MultiplePiePlot();
//     double var7 = var6.getLimit();
//     double var8 = var6.getLimit();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var9 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var11 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var9, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var12 = null;
//     org.jfree.chart.plot.RingPlot var13 = new org.jfree.chart.plot.RingPlot(var12);
//     org.jfree.chart.plot.Plot var14 = var13.getRootPlot();
//     var9.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var14);
//     java.lang.Comparable var16 = null;
//     java.lang.Number var18 = var9.getMeanValue(var16, (java.lang.Comparable)100.0f);
//     var6.setDataset((org.jfree.data.category.CategoryDataset)var9);
//     org.jfree.data.general.DatasetGroup var20 = var9.getGroup();
//     double var22 = var9.getRangeLowerBound(true);
//     org.jfree.chart.plot.XYPlot var23 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var25 = new org.jfree.chart.axis.NumberAxis3D("");
//     var25.configure();
//     org.jfree.chart.util.RectangleInsets var27 = var25.getLabelInsets();
//     var23.setAxisOffset(var27);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var30 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var31 = var30.getEndType();
//     java.awt.Stroke var34 = var30.getItemStroke(0, 0);
//     var23.setRangeZeroBaselineStroke(var34);
//     org.jfree.chart.util.Layer var36 = null;
//     java.util.Collection var37 = var23.getDomainMarkers(var36);
//     var23.setForegroundAlpha(100.0f);
//     boolean var40 = var9.hasListener((java.util.EventListener)var23);
//     org.jfree.data.general.PieDataset var42 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var9, (-16777206));
//     org.jfree.data.Range var43 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var9);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var46 = var9.getMeanValue(100, 15);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
// 
//   }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var1.setUpperMargin(0.0d);
//     int var4 = var1.getMaximumCategoryLabelLines();
//     java.awt.Graphics2D var5 = null;
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     java.awt.Paint var8 = var7.getBaseSectionPaint();
//     double var9 = var7.getMaximumLabelWidth();
//     org.jfree.chart.event.PlotChangeEvent var10 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var7);
//     org.jfree.chart.axis.NumberAxis3D var12 = new org.jfree.chart.axis.NumberAxis3D("");
//     java.awt.Paint var13 = var12.getTickLabelPaint();
//     var7.setShadowPaint(var13);
//     double var15 = var7.getOuterSeparatorExtension();
//     java.awt.geom.Rectangle2D var16 = null;
//     org.jfree.chart.plot.XYPlot var17 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var19 = new org.jfree.chart.axis.NumberAxis3D("");
//     var19.configure();
//     org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
//     var17.setAxisOffset(var21);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var24 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var25 = var24.getEndType();
//     java.awt.Stroke var28 = var24.getItemStroke(0, 0);
//     var17.setRangeZeroBaselineStroke(var28);
//     boolean var30 = var17.isRangeCrosshairLockedOnData();
//     org.jfree.chart.util.RectangleEdge var32 = var17.getDomainAxisEdge(1);
//     org.jfree.chart.axis.AxisSpace var33 = new org.jfree.chart.axis.AxisSpace();
//     double var34 = var33.getLeft();
//     org.jfree.chart.axis.AxisSpace var35 = new org.jfree.chart.axis.AxisSpace();
//     double var36 = var35.getLeft();
//     var33.ensureAtLeast(var35);
//     org.jfree.chart.axis.AxisSpace var38 = var1.reserveSpace(var5, (org.jfree.chart.plot.Plot)var7, var16, var32, var35);
// 
//   }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var24 = var23.getSuppressed();
//     java.lang.Throwable[] var25 = var23.getSuppressed();
//     boolean var26 = var21.equals((java.lang.Object)var25);
//     org.jfree.chart.util.RectangleInsets var27 = var21.getItemLabelPadding();
//     org.jfree.chart.util.VerticalAlignment var28 = var21.getVerticalAlignment();
//     org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var31 = var30.getLabelPaint();
//     java.lang.Comparable var32 = var30.getKey();
//     java.lang.String var33 = var30.getLabel();
//     var30.setDrawAsLine(true);
//     java.awt.Shape var38 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var38, Double.NaN, Double.NaN);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.rotateShape(var38, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var48 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var50 = var48.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var53 = new org.jfree.chart.entity.CategoryItemEntity(var38, "hi!", "", (org.jfree.data.category.CategoryDataset)var48, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var57 = var54.getLegendItem((-1), 100);
//     var54.setBaseShapesFilled(false);
//     java.awt.Paint var61 = var54.getSeriesOutlinePaint((-1));
//     java.awt.Paint var63 = var54.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var64 = new org.jfree.chart.title.LegendGraphic(var38, var63);
//     org.jfree.data.general.PieDataset var65 = null;
//     org.jfree.chart.plot.RingPlot var66 = new org.jfree.chart.plot.RingPlot(var65);
//     org.jfree.chart.plot.Plot var67 = var66.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var68 = var66.getInsets();
//     double var70 = var68.calculateBottomOutset(100.0d);
//     var64.setPadding(var68);
//     org.jfree.chart.util.RectangleInsets var72 = var64.getMargin();
//     org.jfree.chart.util.RectangleAnchor var73 = var64.getShapeAnchor();
//     var30.setLabelAnchor(var73);
//     var21.setLegendItemGraphicAnchor(var73);
//     
//     // Checks the contract:  equals-hashcode on var7 and var66
//     assertTrue("Contract failed: equals-hashcode on var7 and var66", var7.equals(var66) ? var7.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var7
//     assertTrue("Contract failed: equals-hashcode on var66 and var7", var66.equals(var7) ? var66.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var67
//     assertTrue("Contract failed: equals-hashcode on var8 and var67", var8.equals(var67) ? var8.hashCode() == var67.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var67 and var8
//     assertTrue("Contract failed: equals-hashcode on var67 and var8", var67.equals(var8) ? var67.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }


    org.jfree.chart.block.BlockParams var0 = new org.jfree.chart.block.BlockParams();
    var0.setTranslateX(3.0d);
    double var3 = var0.getTranslateX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3.0d);

  }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var32 = var30.getInsets();
//     double var34 = var32.calculateBottomOutset(100.0d);
//     var28.setPadding(var32);
//     org.jfree.chart.util.RectangleInsets var36 = var28.getMargin();
//     org.jfree.chart.util.RectangleAnchor var37 = var28.getShapeLocation();
//     var28.setMargin(0.0d, (-8.0d), 50.5d, 1.0E-5d);
//     var28.setShapeOutlineVisible(false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == 4.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    boolean var9 = var0.getUseOutlinePaint();
    boolean var12 = var0.getItemShapeFilled(100, 10);
    java.awt.Stroke var13 = var0.getBaseStroke();
    java.lang.Boolean var15 = var0.getSeriesVisible(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }


    java.text.DateFormat var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.DateTickUnit var3 = new org.jfree.chart.axis.DateTickUnit(10, 1, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    double var2 = var1.getInteriorGap();
    org.jfree.chart.axis.NumberAxis3D var4 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var5 = var4.isTickMarksVisible();
    org.jfree.data.Range var8 = new org.jfree.data.Range(1.0d, 100.0d);
    var4.setRangeWithMargins(var8, false, false);
    java.text.NumberFormat var12 = var4.getNumberFormatOverride();
    org.jfree.chart.axis.NumberTickUnit var13 = var4.getTickUnit();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var14 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var17 = var14.getLegendItem(2, 0);
    double var18 = var14.getBase();
    org.jfree.chart.labels.ItemLabelPosition var21 = var14.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var25 = var22.getLegendItem((-1), 100);
    var22.setBaseShapesFilled(false);
    java.awt.Paint var30 = var22.getItemOutlinePaint(10, 1);
    var14.setErrorIndicatorPaint(var30);
    var1.setSectionPaint((java.lang.Comparable)var13, var30);
    var1.setShadowXOffset(4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test125() {}
//   public void test125() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }
// 
// 
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var3 = var1.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var6 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var9 = var6.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var10 = null;
//     org.jfree.chart.plot.RingPlot var11 = new org.jfree.chart.plot.RingPlot(var10);
//     org.jfree.chart.plot.Plot var12 = var11.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var13 = null;
//     var11.axisChanged(var13);
//     org.jfree.chart.JFreeChart var16 = new org.jfree.chart.JFreeChart("hi!", var9, (org.jfree.chart.plot.Plot)var11, true);
//     boolean var17 = var1.equals((java.lang.Object)var9);
//     org.jfree.data.general.PieDataset var18 = null;
//     org.jfree.chart.plot.RingPlot var19 = new org.jfree.chart.plot.RingPlot(var18);
//     java.awt.Paint var20 = var19.getBaseSectionPaint();
//     boolean var21 = var19.isOutlineVisible();
//     java.awt.Color var25 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var26 = null;
//     float[] var27 = var25.getRGBColorComponents(var26);
//     var19.setSectionOutlinePaint((java.lang.Comparable)"", (java.awt.Paint)var25);
//     int var29 = var25.getRed();
//     java.awt.Graphics2D var31 = null;
//     org.jfree.chart.text.G2TextMeasurer var32 = new org.jfree.chart.text.G2TextMeasurer(var31);
//     org.jfree.chart.text.TextBlock var33 = org.jfree.chart.text.TextUtilities.createTextBlock("Multiple Pie Plot", var9, (java.awt.Paint)var25, 100.0f, (org.jfree.chart.text.TextMeasurer)var32);
// 
//   }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    org.jfree.chart.renderer.category.StackedAreaRenderer var12 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var15 = var12.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var16 = null;
    org.jfree.chart.plot.RingPlot var17 = new org.jfree.chart.plot.RingPlot(var16);
    org.jfree.chart.plot.Plot var18 = var17.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var19 = null;
    var17.axisChanged(var19);
    org.jfree.chart.JFreeChart var22 = new org.jfree.chart.JFreeChart("hi!", var15, (org.jfree.chart.plot.Plot)var17, true);
    java.awt.Paint var23 = var17.getBackgroundPaint();
    java.awt.Paint var24 = var17.getLabelOutlinePaint();
    var0.setRangeTickBandPaint(var24);
    org.jfree.chart.renderer.xy.XYItemRenderer var26 = null;
    int var27 = var0.getIndexOf(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(10.0d);
    var1.setValue(0.0d);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    java.lang.Object var1 = var0.clone();
    int var3 = var0.getIndex((java.lang.Comparable)24180L);
    boolean var5 = var0.equals((java.lang.Object)2.0d);
    var0.addValue((java.lang.Comparable)Double.NaN, 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    java.lang.Object var3 = var1.clone();
    java.lang.Number var6 = null;
    java.util.List var12 = null;
    org.jfree.data.statistics.BoxAndWhiskerItem var13 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var6, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var12);
    boolean var14 = var1.equals((java.lang.Object)0);
    boolean var15 = var1.isAutoRange();
    java.awt.Font var16 = var1.getLabelFont();
    org.jfree.chart.util.RectangleInsets var17 = var1.getTickLabelInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
    var13.setBaseShapesFilled(false);
    java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
    boolean var21 = var12.equals((java.lang.Object)var13);
    var12.setTitle("ThreadContext");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.CategoryPlot var24 = var12.getCategoryPlot();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
    var0.configureRangeAxes();
    org.jfree.chart.plot.SeriesRenderingOrder var12 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesRenderingOrder(var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = org.jfree.data.time.Year.parseYear("org.jfree.data.general.DatasetChangeEvent[source=false]");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }
// 
// 
//     org.jfree.chart.util.StandardGradientPaintTransformer var0 = new org.jfree.chart.util.StandardGradientPaintTransformer();
//     java.awt.GradientPaint var1 = null;
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 50.5d, (-1.0f), (-1.0f));
//     java.awt.GradientPaint var8 = var0.transform(var1, var7);
// 
//   }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    var1.setBaseShapesFilled(false);
    java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
    var1.setBaseNegativeItemLabelPosition(var12);
    var0.setPositiveItemLabelPositionFallback(var12);
    double var15 = var0.getStartPercent();
    java.awt.Stroke var16 = var0.getBaseOutlineStroke();
    boolean var17 = var0.isDrawBarOutline();
    var0.setStartPercent(0.35d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.35d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    java.util.EventListener var39 = null;
    boolean var40 = var2.hasListener(var39);
    var2.setTickMarksVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }
// 
// 
//     java.awt.Graphics2D var1 = null;
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var8 = var7.getLabelPaint();
//     java.lang.Comparable var9 = var7.getKey();
//     java.lang.String var10 = var7.getLabel();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var13 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var16 = var13.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var17 = null;
//     org.jfree.chart.plot.RingPlot var18 = new org.jfree.chart.plot.RingPlot(var17);
//     org.jfree.chart.plot.Plot var19 = var18.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var20 = null;
//     var18.axisChanged(var20);
//     org.jfree.chart.JFreeChart var23 = new org.jfree.chart.JFreeChart("hi!", var16, (org.jfree.chart.plot.Plot)var18, true);
//     var7.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var18);
//     java.lang.Comparable var25 = var7.getKey();
//     org.jfree.chart.text.TextAnchor var26 = var7.getLabelTextAnchor();
//     org.jfree.data.time.Month var27 = new org.jfree.data.time.Month();
//     long var28 = var27.getSerialIndex();
//     java.util.Date var29 = var27.getEnd();
//     org.jfree.chart.text.TextBlock var30 = null;
//     org.jfree.chart.text.TextBlockAnchor var31 = null;
//     org.jfree.chart.plot.XYPlot var32 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var34 = new org.jfree.chart.axis.NumberAxis3D("");
//     var34.configure();
//     org.jfree.chart.util.RectangleInsets var36 = var34.getLabelInsets();
//     var32.setAxisOffset(var36);
//     org.jfree.chart.plot.CategoryMarker var39 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var40 = var39.getOutlineStroke();
//     var32.addDomainMarker((org.jfree.chart.plot.Marker)var39);
//     var39.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var44 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var45 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var45.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var49 = var45.getBaseLinesVisible();
//     java.lang.Boolean var51 = var45.getSeriesVisibleInLegend(10);
//     java.awt.Paint var52 = var45.getBaseItemLabelPaint();
//     java.awt.Color var55 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var56 = null;
//     float[] var57 = var55.getRGBColorComponents(var56);
//     var45.setBaseItemLabelPaint((java.awt.Paint)var55);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var60 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var61 = var60.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var62 = var60.getBaseNegativeItemLabelPosition();
//     var45.setBasePositiveItemLabelPosition(var62, true);
//     var44.setPositiveItemLabelPositionFallback(var62);
//     org.jfree.chart.text.TextAnchor var66 = var62.getRotationAnchor();
//     var39.setLabelTextAnchor(var66);
//     org.jfree.chart.axis.CategoryTick var69 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var29, var30, var31, var66, 2.0d);
//     org.jfree.chart.text.TextAnchor var70 = var69.getRotationAnchor();
//     org.jfree.chart.axis.NumberTick var72 = new org.jfree.chart.axis.NumberTick((java.lang.Number)(byte)100, "Size2D[width=50.5, height=10.0]", var26, var70, 50.5d);
//     org.jfree.chart.plot.CategoryMarker var75 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var76 = var75.getLabelPaint();
//     org.jfree.chart.text.TextAnchor var77 = var75.getLabelTextAnchor();
//     org.jfree.chart.text.TextUtilities.drawRotatedString("org.jfree.data.general.SeriesChangeEvent[source=4]", var1, 100.0f, 10.0f, var70, 1.0d, var77);
// 
//   }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(1);
    org.jfree.data.xy.XYDataset var25 = null;
    var0.setDataset(var25);
    var0.setRangeCrosshairValue(4.0d, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    int var2 = var0.getIndex((java.lang.Comparable)0.25d);
    int var4 = var0.getIndex((java.lang.Comparable)(byte)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeValue(15);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    org.jfree.chart.axis.AxisState var0 = new org.jfree.chart.axis.AxisState();
    var0.cursorDown(1.0d);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }


    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    java.lang.Object var4 = var2.clone();
    java.lang.Number var7 = null;
    java.util.List var13 = null;
    org.jfree.data.statistics.BoxAndWhiskerItem var14 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var7, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var13);
    boolean var15 = var2.equals((java.lang.Object)0);
    boolean var16 = var2.isAutoRange();
    java.awt.Font var17 = var2.getLabelFont();
    org.jfree.chart.text.TextLine var18 = new org.jfree.chart.text.TextLine("Size2D[width=50.5, height=10.0]", var17);
    org.jfree.data.DefaultKeyedValues2D var20 = new org.jfree.data.DefaultKeyedValues2D(false);
    var20.clear();
    java.util.List var22 = var20.getColumnKeys();
    boolean var23 = var18.equals((java.lang.Object)var20);
    org.jfree.chart.renderer.category.StackedAreaRenderer var26 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var29 = var26.getItemLabelFont((-1), 0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var30.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var34 = var30.getBaseLinesVisible();
    java.lang.Boolean var36 = var30.getSeriesVisibleInLegend(10);
    java.awt.Paint var37 = var30.getBaseItemLabelPaint();
    org.jfree.chart.text.TextFragment var38 = new org.jfree.chart.text.TextFragment("", var29, var37);
    var18.removeFragment(var38);
    java.lang.String var40 = var38.getText();
    org.jfree.chart.renderer.category.StackedAreaRenderer var43 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var46 = var43.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var47 = null;
    org.jfree.chart.plot.RingPlot var48 = new org.jfree.chart.plot.RingPlot(var47);
    org.jfree.chart.plot.Plot var49 = var48.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var50 = null;
    var48.axisChanged(var50);
    org.jfree.chart.JFreeChart var53 = new org.jfree.chart.JFreeChart("hi!", var46, (org.jfree.chart.plot.Plot)var48, true);
    java.lang.Object var54 = var48.clone();
    org.jfree.chart.util.HorizontalAlignment var55 = null;
    org.jfree.chart.util.VerticalAlignment var56 = null;
    org.jfree.chart.block.FlowArrangement var59 = new org.jfree.chart.block.FlowArrangement(var55, var56, 100.0d, 10.0d);
    var59.clear();
    org.jfree.chart.block.Arrangement var61 = null;
    org.jfree.chart.title.LegendTitle var62 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var48, (org.jfree.chart.block.Arrangement)var59, var61);
    org.jfree.data.UnknownKeyException var64 = new org.jfree.data.UnknownKeyException("");
    java.lang.Throwable[] var65 = var64.getSuppressed();
    java.lang.Throwable[] var66 = var64.getSuppressed();
    boolean var67 = var62.equals((java.lang.Object)var66);
    boolean var68 = var38.equals((java.lang.Object)var66);
    org.jfree.chart.plot.XYPlot var69 = new org.jfree.chart.plot.XYPlot();
    var69.setDomainCrosshairValue(0.05d);
    java.awt.Paint var72 = var69.getDomainCrosshairPaint();
    var69.mapDatasetToRangeAxis(1, 15);
    var69.setRangeCrosshairValue(100.0d);
    java.util.List var78 = var69.getAnnotations();
    java.awt.Stroke var79 = var69.getRangeZeroBaselineStroke();
    boolean var80 = var38.equals((java.lang.Object)var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    java.awt.Paint var10 = var0.getSeriesOutlinePaint(10);
    var0.setUseFillPaint(false);
    var0.setSeriesCreateEntities(100, (java.lang.Boolean)true, false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var17 = var0.getBaseItemLabelGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    java.io.ObjectOutputStream var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.SerialUtilities.writeStroke(var21, var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.chart.entity.LegendItemEntity var29 = new org.jfree.chart.entity.LegendItemEntity(var2);
//     java.lang.Comparable var30 = var29.getSeriesKey();
//     java.awt.Shape var33 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var36 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var33, Double.NaN, Double.NaN);
//     java.awt.Shape var40 = org.jfree.chart.util.ShapeUtilities.rotateShape(var33, 10.0d, 0.0f, 0.0f);
//     var29.setArea(var33);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var44, Double.NaN, Double.NaN);
//     java.awt.Shape var51 = org.jfree.chart.util.ShapeUtilities.rotateShape(var44, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var54 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var56 = var54.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var59 = new org.jfree.chart.entity.CategoryItemEntity(var44, "hi!", "", (org.jfree.data.category.CategoryDataset)var54, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var63 = var60.getLegendItem((-1), 100);
//     var60.setBaseShapesFilled(false);
//     java.awt.Paint var67 = var60.getSeriesOutlinePaint((-1));
//     java.awt.Paint var69 = var60.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var70 = new org.jfree.chart.title.LegendGraphic(var44, var69);
//     org.jfree.chart.entity.LegendItemEntity var71 = new org.jfree.chart.entity.LegendItemEntity(var44);
//     java.lang.Comparable var72 = var71.getSeriesKey();
//     java.awt.Shape var75 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var78 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var75, Double.NaN, Double.NaN);
//     java.awt.Shape var82 = org.jfree.chart.util.ShapeUtilities.rotateShape(var75, 10.0d, 0.0f, 0.0f);
//     var71.setArea(var75);
//     var29.setArea(var75);
//     
//     // Checks the contract:  equals-hashcode on var12 and var54
//     assertTrue("Contract failed: equals-hashcode on var12 and var54", var12.equals(var54) ? var12.hashCode() == var54.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var12
//     assertTrue("Contract failed: equals-hashcode on var54 and var12", var54.equals(var12) ? var54.hashCode() == var12.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var71
//     assertTrue("Contract failed: equals-hashcode on var29 and var71", var29.equals(var71) ? var29.hashCode() == var71.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var71 and var29
//     assertTrue("Contract failed: equals-hashcode on var71 and var29", var71.equals(var29) ? var71.hashCode() == var29.hashCode() : true);
// 
//   }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    org.jfree.chart.ui.BasicProjectInfo var4 = new org.jfree.chart.ui.BasicProjectInfo("ThreadContext", "2014", "-100,0,0,0,0,100,0,100,0,0,100,0,100,0,0,0,0,-100,0,-100,0,0,-100,0,-100,0", "");
    var4.setCopyright("Other");

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }


    org.jfree.data.DefaultKeyedValues2D var1 = new org.jfree.data.DefaultKeyedValues2D(false);
    var1.clear();
    java.util.List var3 = var1.getColumnKeys();
    java.lang.Object var4 = null;
    boolean var5 = var1.equals(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeColumn((-16777206));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }
// 
// 
//     java.awt.Graphics2D var1 = null;
//     org.jfree.chart.text.TextUtilities.drawRotatedString("Range[1.0,100.0]", var1, 1.0f, 10.0f, 0.05d, 10.0f, 1.0f);
// 
//   }

  public void test147() {}
//   public void test147() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var32 = var30.getInsets();
//     double var34 = var32.calculateBottomOutset(100.0d);
//     var28.setPadding(var32);
//     org.jfree.chart.util.RectangleAnchor var36 = var28.getShapeLocation();
//     var28.setLineVisible(false);
//     boolean var39 = var28.isLineVisible();
//     java.awt.Graphics2D var40 = null;
//     java.awt.geom.Rectangle2D var41 = null;
//     var28.draw(var40, var41);
// 
//   }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
//     java.awt.Stroke var11 = var7.getItemStroke(0, 0);
//     var0.setRangeZeroBaselineStroke(var11);
//     org.jfree.chart.util.Layer var13 = null;
//     java.util.Collection var14 = var0.getDomainMarkers(var13);
//     org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var18 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var21 = var18.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var22 = null;
//     org.jfree.chart.plot.RingPlot var23 = new org.jfree.chart.plot.RingPlot(var22);
//     org.jfree.chart.plot.Plot var24 = var23.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var25 = null;
//     var23.axisChanged(var25);
//     org.jfree.chart.JFreeChart var28 = new org.jfree.chart.JFreeChart("hi!", var21, (org.jfree.chart.plot.Plot)var23, true);
//     java.lang.Object var29 = var23.clone();
//     org.jfree.chart.util.HorizontalAlignment var30 = null;
//     org.jfree.chart.util.VerticalAlignment var31 = null;
//     org.jfree.chart.block.FlowArrangement var34 = new org.jfree.chart.block.FlowArrangement(var30, var31, 100.0d, 10.0d);
//     var34.clear();
//     org.jfree.chart.block.Arrangement var36 = null;
//     org.jfree.chart.title.LegendTitle var37 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var23, (org.jfree.chart.block.Arrangement)var34, var36);
//     org.jfree.chart.plot.XYPlot var38 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var40 = new org.jfree.chart.axis.NumberAxis3D("");
//     var40.configure();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     var38.setAxisOffset(var42);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var45 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var46 = var45.getEndType();
//     java.awt.Stroke var49 = var45.getItemStroke(0, 0);
//     var38.setRangeZeroBaselineStroke(var49);
//     org.jfree.chart.util.Layer var51 = null;
//     java.util.Collection var52 = var38.getDomainMarkers(var51);
//     org.jfree.chart.util.RectangleInsets var53 = var38.getInsets();
//     var37.setItemLabelPadding(var53);
//     var0.setInsets(var53);
//     
//     // Checks the contract:  equals-hashcode on var0 and var38
//     assertTrue("Contract failed: equals-hashcode on var0 and var38", var0.equals(var38) ? var0.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var0
//     assertTrue("Contract failed: equals-hashcode on var38 and var0", var38.equals(var0) ? var38.hashCode() == var0.hashCode() : true);
// 
//   }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }
// 
// 
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     double var2 = var0.getRangeLowerBound(false);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var5 = var0.getMeanValue(1, 0);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == Double.NaN);
// 
//   }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    boolean var4 = var0.getBaseSeriesVisibleInLegend();
    boolean var5 = var0.getBaseShapesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    var0.setDomainCrosshairValue(0.05d);
    java.awt.Paint var3 = var0.getDomainCrosshairPaint();
    var0.mapDatasetToRangeAxis(1, 15);
    var0.setRangeCrosshairValue(100.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.ValueAxis var10 = var0.getRangeAxisForDataset(4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }


    org.jfree.data.xy.XYDataset var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.Range var1 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test153() {}
//   public void test153() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }
// 
// 
//     org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
//     var0.setAdjustForDaylightSaving(true);
//     long var5 = var0.getExceptionSegmentCount(1L, 0L);
//     var0.addBaseTimelineExclusions(1420099199999L, 0L);
// 
//   }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.text.G2TextMeasurer var1 = new org.jfree.chart.text.G2TextMeasurer(var0);
//     float var5 = var1.getStringWidth("", 100, 0);
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    org.jfree.chart.renderer.category.LineRenderer3D var0 = new org.jfree.chart.renderer.category.LineRenderer3D();
    double var1 = var0.getYOffset();
    org.jfree.data.category.CategoryDataset var2 = null;
    org.jfree.chart.axis.CategoryAxis var4 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var4.setUpperMargin(0.0d);
    int var7 = var4.getMaximumCategoryLabelLines();
    java.lang.Object var8 = var4.clone();
    org.jfree.chart.axis.DateAxis var9 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var13 = var10.getLegendItem((-1), 100);
    var10.setBaseShapesFilled(false);
    java.awt.Paint var17 = var10.getSeriesOutlinePaint((-1));
    java.awt.Paint var19 = var10.lookupSeriesOutlinePaint(0);
    var9.setLabelPaint(var19);
    double var21 = var9.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var22 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var25 = var22.getLegendItem(2, 0);
    double var26 = var22.getBase();
    org.jfree.chart.labels.ItemLabelPosition var29 = var22.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var30 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var33 = var30.getLegendItem((-1), 100);
    var30.setBaseShapesFilled(false);
    java.awt.Paint var38 = var30.getItemOutlinePaint(10, 1);
    var22.setErrorIndicatorPaint(var38);
    org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot(var2, var4, (org.jfree.chart.axis.ValueAxis)var9, (org.jfree.chart.renderer.category.CategoryItemRenderer)var22);
    org.jfree.chart.axis.CategoryAnchor var41 = var40.getDomainGridlinePosition();
    org.jfree.data.category.CategoryDataset var42 = var40.getDataset();
    org.jfree.chart.LegendItemCollection var43 = var40.getLegendItems();
    var40.clearDomainAxes();
    org.jfree.chart.plot.CategoryMarker var46 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Paint var47 = var46.getLabelPaint();
    java.lang.Comparable var48 = var46.getKey();
    java.lang.String var49 = var46.getLabel();
    java.awt.Stroke var50 = var46.getOutlineStroke();
    var40.addDomainMarker(var46);
    boolean var52 = var0.equals((java.lang.Object)var40);
    double var53 = var40.getRangeCrosshairValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + true+ "'", var48.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.0d);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    boolean var5 = var1.getBaseLinesVisible();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
    java.awt.Paint var9 = var8.getErrorIndicatorPaint();
    org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var10 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
    var8.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var10);
    var1.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var10);
    org.jfree.data.KeyedObject var13 = new org.jfree.data.KeyedObject((java.lang.Comparable)(-1L), (java.lang.Object)var10);
    java.lang.Object var14 = var13.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var0, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
    var0.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var5);
    org.jfree.data.KeyToGroupMap var15 = new org.jfree.data.KeyToGroupMap();
    java.util.List var16 = var15.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var17 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var16);
    var0.add(var17, (java.lang.Comparable)0.0f, (java.lang.Comparable)"hi!");
    org.jfree.data.general.PieDataset var21 = null;
    org.jfree.chart.plot.RingPlot var22 = new org.jfree.chart.plot.RingPlot(var21);
    java.awt.Paint var23 = var22.getBaseSectionPaint();
    boolean var24 = var22.isOutlineVisible();
    var22.setMaximumLabelWidth(100.0d);
    boolean var27 = var0.hasListener((java.util.EventListener)var22);
    org.jfree.chart.labels.PieToolTipGenerator var28 = var22.getToolTipGenerator();
    org.jfree.chart.labels.PieToolTipGenerator var29 = var22.getToolTipGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxisForDataset(1);
    org.jfree.chart.axis.NumberAxis3D var44 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var45 = var44.isTickMarksVisible();
    org.jfree.data.Range var48 = new org.jfree.data.Range(1.0d, 100.0d);
    var44.setRangeWithMargins(var48, false, false);
    org.jfree.chart.axis.ValueAxis[] var52 = new org.jfree.chart.axis.ValueAxis[] { var44};
    var38.setRangeAxes(var52);
    int var54 = var38.getDomainAxisCount();
    org.jfree.chart.util.SortOrder var55 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var38.setRowRenderingOrder(var55);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    java.awt.Paint var10 = var0.getSeriesOutlinePaint(10);
    var0.setUseFillPaint(false);
    var0.setSeriesCreateEntities(100, (java.lang.Boolean)true, false);
    var0.setBaseShapesFilled(false);
    var0.setSeriesLinesVisible(2, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var2.setUpperMargin(0.0d);
//     int var5 = var2.getMaximumCategoryLabelLines();
//     java.lang.Object var6 = var2.clone();
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
//     var8.setBaseShapesFilled(false);
//     java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
//     java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
//     var7.setLabelPaint(var17);
//     double var19 = var7.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
//     double var24 = var20.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
//     var20.setErrorIndicatorPaint(var36);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
//     var38.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxisForDataset(1);
//     org.jfree.data.general.PieDataset var43 = null;
//     org.jfree.chart.plot.RingPlot var44 = new org.jfree.chart.plot.RingPlot(var43);
//     org.jfree.chart.plot.Plot var45 = var44.getRootPlot();
//     org.jfree.chart.JFreeChart var46 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var44);
//     boolean var47 = var46.getAntiAlias();
//     java.awt.Stroke var48 = var46.getBorderStroke();
//     org.jfree.chart.util.RectangleInsets var49 = var46.getPadding();
//     var46.setNotify(false);
//     java.awt.Paint var52 = var46.getBorderPaint();
//     var42.setAxisLinePaint(var52);
//     java.awt.geom.Rectangle2D var56 = null;
//     org.jfree.chart.axis.AxisSpace var57 = new org.jfree.chart.axis.AxisSpace();
//     double var58 = var57.getLeft();
//     org.jfree.chart.axis.AxisSpace var59 = new org.jfree.chart.axis.AxisSpace();
//     double var60 = var59.getLeft();
//     var57.ensureAtLeast(var59);
//     org.jfree.chart.plot.XYPlot var63 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var65 = new org.jfree.chart.axis.NumberAxis3D("");
//     var65.configure();
//     org.jfree.chart.util.RectangleInsets var67 = var65.getLabelInsets();
//     var63.setAxisOffset(var67);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var70 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var71 = var70.getEndType();
//     java.awt.Stroke var74 = var70.getItemStroke(0, 0);
//     var63.setRangeZeroBaselineStroke(var74);
//     org.jfree.chart.util.Layer var76 = null;
//     java.util.Collection var77 = var63.getDomainMarkers(var76);
//     var63.setForegroundAlpha(100.0f);
//     var63.setRangeCrosshairVisible(true);
//     boolean var82 = var63.isRangeZoomable();
//     org.jfree.chart.util.RectangleEdge var84 = var63.getDomainAxisEdge(1);
//     var59.add(0.0d, var84);
//     double var86 = var42.getCategoryMiddle(2, 2, var56, var84);
// 
//   }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
//     java.awt.Stroke var11 = var7.getItemStroke(0, 0);
//     var0.setRangeZeroBaselineStroke(var11);
//     org.jfree.chart.util.Layer var13 = null;
//     java.util.Collection var14 = var0.getDomainMarkers(var13);
//     org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
//     java.awt.Stroke var21 = var17.getItemStroke(0, 0);
//     var0.setDomainZeroBaselineStroke(var21);
//     org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(1);
//     java.awt.Stroke var25 = var0.getDomainZeroBaselineStroke();
//     org.jfree.chart.renderer.category.GanttRenderer var26 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var30 = var27.getLegendItem((-1), 100);
//     var27.setBaseShapesFilled(false);
//     java.awt.Paint var34 = var27.getSeriesOutlinePaint((-1));
//     org.jfree.chart.renderer.category.StackedAreaRenderer var36 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var37 = var36.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var38 = var36.getBaseNegativeItemLabelPosition();
//     var27.setBaseNegativeItemLabelPosition(var38);
//     var26.setPositiveItemLabelPositionFallback(var38);
//     org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var43 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var47 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var50 = var47.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var51 = null;
//     org.jfree.chart.plot.RingPlot var52 = new org.jfree.chart.plot.RingPlot(var51);
//     org.jfree.chart.plot.Plot var53 = var52.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var54 = null;
//     var52.axisChanged(var54);
//     org.jfree.chart.JFreeChart var57 = new org.jfree.chart.JFreeChart("hi!", var50, (org.jfree.chart.plot.Plot)var52, true);
//     java.awt.Paint var58 = var52.getBackgroundPaint();
//     var43.setSeriesItemLabelPaint(0, var58, true);
//     var26.setCompletePaint(var58);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var62 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var62.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var66 = var62.getBaseLinesVisible();
//     java.lang.Boolean var68 = var62.getSeriesVisibleInLegend(10);
//     java.awt.Paint var69 = var62.getBaseItemLabelPaint();
//     var26.setIncompletePaint(var69);
//     var0.setRangeCrosshairPaint(var69);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var74 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var77 = var74.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var78 = null;
//     org.jfree.chart.plot.RingPlot var79 = new org.jfree.chart.plot.RingPlot(var78);
//     org.jfree.chart.plot.Plot var80 = var79.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var81 = null;
//     var79.axisChanged(var81);
//     org.jfree.chart.JFreeChart var84 = new org.jfree.chart.JFreeChart("hi!", var77, (org.jfree.chart.plot.Plot)var79, true);
//     java.lang.Object var85 = var79.clone();
//     java.awt.Stroke var86 = var79.getSeparatorStroke();
//     java.awt.Paint var87 = var79.getBaseSectionPaint();
//     var0.setDomainTickBandPaint(var87);
//     
//     // Checks the contract:  equals-hashcode on var52 and var79
//     assertTrue("Contract failed: equals-hashcode on var52 and var79", var52.equals(var79) ? var52.hashCode() == var79.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var79 and var52
//     assertTrue("Contract failed: equals-hashcode on var79 and var52", var79.equals(var52) ? var79.hashCode() == var52.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var53 and var80
//     assertTrue("Contract failed: equals-hashcode on var53 and var80", var53.equals(var80) ? var53.hashCode() == var80.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var80 and var53
//     assertTrue("Contract failed: equals-hashcode on var80 and var53", var80.equals(var53) ? var80.hashCode() == var53.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var84
//     assertTrue("Contract failed: equals-hashcode on var57 and var84", var57.equals(var84) ? var57.hashCode() == var84.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var84 and var57
//     assertTrue("Contract failed: equals-hashcode on var84 and var57", var84.equals(var57) ? var84.hashCode() == var57.hashCode() : true);
// 
//   }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }
// 
// 
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var0 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var3 = var0.getLegendItem(2, 0);
//     double var4 = var0.getBase();
//     java.awt.Color var7 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var8 = null;
//     float[] var9 = var7.getRGBColorComponents(var8);
//     java.awt.Color var12 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var13 = null;
//     float[] var14 = var12.getRGBColorComponents(var13);
//     float[] var15 = var7.getColorComponents(var13);
//     var0.setErrorIndicatorPaint((java.awt.Paint)var7);
//     java.awt.Graphics2D var17 = null;
//     org.jfree.chart.plot.CategoryPlot var18 = null;
//     org.jfree.chart.axis.NumberAxis3D var20 = new org.jfree.chart.axis.NumberAxis3D("");
//     var20.configure();
//     org.jfree.chart.axis.NumberTickUnit var22 = var20.getTickUnit();
//     org.jfree.data.Range var23 = var20.getRange();
//     org.jfree.chart.plot.XYPlot var24 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var26 = new org.jfree.chart.axis.NumberAxis3D("");
//     var26.configure();
//     org.jfree.chart.util.RectangleInsets var28 = var26.getLabelInsets();
//     var24.setAxisOffset(var28);
//     org.jfree.chart.plot.CategoryMarker var31 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var32 = var31.getOutlineStroke();
//     var24.addDomainMarker((org.jfree.chart.plot.Marker)var31);
//     var31.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     java.awt.Font var36 = var31.getLabelFont();
//     java.awt.geom.Rectangle2D var37 = null;
//     var0.drawRangeMarker(var17, var18, (org.jfree.chart.axis.ValueAxis)var20, (org.jfree.chart.plot.Marker)var31, var37);
//     java.lang.String var39 = var20.getLabel();
//     java.awt.Graphics2D var40 = null;
//     java.awt.geom.Rectangle2D var42 = null;
//     java.awt.geom.Rectangle2D var43 = null;
//     org.jfree.chart.renderer.category.StackedAreaRenderer var46 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var49 = var46.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var50 = null;
//     org.jfree.chart.plot.RingPlot var51 = new org.jfree.chart.plot.RingPlot(var50);
//     org.jfree.chart.plot.Plot var52 = var51.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var53 = null;
//     var51.axisChanged(var53);
//     org.jfree.chart.JFreeChart var56 = new org.jfree.chart.JFreeChart("hi!", var49, (org.jfree.chart.plot.Plot)var51, true);
//     java.lang.Object var57 = var51.clone();
//     org.jfree.chart.util.HorizontalAlignment var58 = null;
//     org.jfree.chart.util.VerticalAlignment var59 = null;
//     org.jfree.chart.block.FlowArrangement var62 = new org.jfree.chart.block.FlowArrangement(var58, var59, 100.0d, 10.0d);
//     var62.clear();
//     org.jfree.chart.block.Arrangement var64 = null;
//     org.jfree.chart.title.LegendTitle var65 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var51, (org.jfree.chart.block.Arrangement)var62, var64);
//     org.jfree.data.UnknownKeyException var67 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var68 = var67.getSuppressed();
//     java.lang.Throwable[] var69 = var67.getSuppressed();
//     boolean var70 = var65.equals((java.lang.Object)var69);
//     java.awt.Paint var71 = var65.getBackgroundPaint();
//     org.jfree.chart.util.RectangleEdge var72 = var65.getLegendItemGraphicEdge();
//     org.jfree.chart.plot.PlotRenderingInfo var73 = null;
//     org.jfree.chart.axis.AxisState var74 = var20.draw(var40, 8.0d, var42, var43, var72, var73);
// 
//   }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    org.jfree.data.KeyToGroupMap var9 = new org.jfree.data.KeyToGroupMap();
    java.util.List var10 = var9.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var10);
    java.lang.Comparable var12 = null;
    var0.setObject((java.lang.Object)var10, var12, (java.lang.Comparable)1);
    var0.removeObject((java.lang.Comparable)10, (java.lang.Comparable)(short)100);
    int var19 = var0.getColumnIndex((java.lang.Comparable)(byte)100);
    java.lang.Object var22 = var0.getObject(0, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow((java.lang.Comparable)10L);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    java.lang.Object var9 = var0.clone();
    var0.setSeriesShapesVisible(1, false);
    org.jfree.chart.renderer.category.StatisticalBarRenderer var13 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var14.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var18 = var14.getBaseLinesVisible();
    java.lang.Boolean var20 = var14.getSeriesVisibleInLegend(10);
    java.awt.Paint var21 = var14.getBaseItemLabelPaint();
    java.awt.Color var24 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var25 = null;
    float[] var26 = var24.getRGBColorComponents(var25);
    var14.setBaseItemLabelPaint((java.awt.Paint)var24);
    org.jfree.chart.renderer.category.StackedAreaRenderer var29 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var30 = var29.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var31 = var29.getBaseNegativeItemLabelPosition();
    var14.setBasePositiveItemLabelPosition(var31, true);
    var13.setPositiveItemLabelPositionFallback(var31);
    java.awt.Stroke var37 = var13.getItemStroke((-16777206), (-1));
    var0.setBaseStroke(var37);
    java.lang.Object var39 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
//     java.awt.Stroke var11 = var7.getItemStroke(0, 0);
//     var0.setRangeZeroBaselineStroke(var11);
//     org.jfree.chart.util.Layer var13 = null;
//     java.util.Collection var14 = var0.getDomainMarkers(var13);
//     var0.setForegroundAlpha(100.0f);
//     var0.setRangeCrosshairVisible(true);
//     boolean var19 = var0.isRangeZoomable();
//     org.jfree.chart.util.RectangleEdge var21 = var0.getDomainAxisEdge(1);
//     org.jfree.data.general.PieDataset var22 = null;
//     org.jfree.chart.plot.RingPlot var23 = new org.jfree.chart.plot.RingPlot(var22);
//     java.awt.Paint var24 = var23.getBaseSectionPaint();
//     double var25 = var23.getLabelGap();
//     double var26 = var23.getInnerSeparatorExtension();
//     org.jfree.data.general.PieDataset var27 = null;
//     org.jfree.chart.plot.RingPlot var28 = new org.jfree.chart.plot.RingPlot(var27);
//     org.jfree.chart.plot.Plot var29 = var28.getRootPlot();
//     org.jfree.chart.JFreeChart var30 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var28);
//     boolean var31 = var30.getAntiAlias();
//     java.awt.Stroke var32 = var30.getBorderStroke();
//     var23.setOutlineStroke(var32);
//     var0.setRangeGridlineStroke(var32);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var37 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var40 = var37.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var41 = null;
//     org.jfree.chart.plot.RingPlot var42 = new org.jfree.chart.plot.RingPlot(var41);
//     org.jfree.chart.plot.Plot var43 = var42.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var44 = null;
//     var42.axisChanged(var44);
//     org.jfree.chart.JFreeChart var47 = new org.jfree.chart.JFreeChart("hi!", var40, (org.jfree.chart.plot.Plot)var42, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var51 = var48.getLegendItem((-1), 100);
//     var48.setBaseShapesFilled(false);
//     java.awt.Paint var55 = var48.getSeriesOutlinePaint((-1));
//     boolean var56 = var47.equals((java.lang.Object)var48);
//     var47.setTitle("ThreadContext");
//     org.jfree.chart.renderer.category.StackedAreaRenderer var60 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var61 = var60.getEndType();
//     java.awt.Stroke var64 = var60.getItemStroke(0, 0);
//     var47.setBorderStroke(var64);
//     var0.setRangeGridlineStroke(var64);
//     
//     // Checks the contract:  equals-hashcode on var28 and var42
//     assertTrue("Contract failed: equals-hashcode on var28 and var42", var28.equals(var42) ? var28.hashCode() == var42.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var42 and var28
//     assertTrue("Contract failed: equals-hashcode on var42 and var28", var42.equals(var28) ? var42.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var43
//     assertTrue("Contract failed: equals-hashcode on var29 and var43", var29.equals(var43) ? var29.hashCode() == var43.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var43 and var29
//     assertTrue("Contract failed: equals-hashcode on var43 and var29", var43.equals(var29) ? var43.hashCode() == var29.hashCode() : true);
// 
//   }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
    java.awt.Stroke var5 = var1.getItemStroke(0, 0);
    boolean var7 = var1.isSeriesItemLabelsVisible(15);
    java.awt.Graphics2D var8 = null;
    java.awt.geom.Rectangle2D var9 = null;
    org.jfree.data.category.CategoryDataset var10 = null;
    org.jfree.chart.axis.CategoryAxis var12 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var12.setUpperMargin(0.0d);
    int var15 = var12.getMaximumCategoryLabelLines();
    java.lang.Object var16 = var12.clone();
    org.jfree.chart.axis.DateAxis var17 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
    var18.setBaseShapesFilled(false);
    java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
    java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
    var17.setLabelPaint(var27);
    double var29 = var17.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var30 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var33 = var30.getLegendItem(2, 0);
    double var34 = var30.getBase();
    org.jfree.chart.labels.ItemLabelPosition var37 = var30.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var38 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var41 = var38.getLegendItem((-1), 100);
    var38.setBaseShapesFilled(false);
    java.awt.Paint var46 = var38.getItemOutlinePaint(10, 1);
    var30.setErrorIndicatorPaint(var46);
    org.jfree.chart.plot.CategoryPlot var48 = new org.jfree.chart.plot.CategoryPlot(var10, var12, (org.jfree.chart.axis.ValueAxis)var17, (org.jfree.chart.renderer.category.CategoryItemRenderer)var30);
    org.jfree.chart.axis.CategoryAnchor var49 = var48.getDomainGridlinePosition();
    org.jfree.chart.plot.PlotRenderingInfo var51 = null;
    org.jfree.chart.renderer.category.CategoryItemRendererState var52 = var1.initialise(var8, var9, var48, 0, var51);
    org.jfree.chart.renderer.category.StackedAreaRenderer var55 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var58 = var55.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var59 = null;
    org.jfree.chart.plot.RingPlot var60 = new org.jfree.chart.plot.RingPlot(var59);
    org.jfree.chart.plot.Plot var61 = var60.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var62 = null;
    var60.axisChanged(var62);
    org.jfree.chart.JFreeChart var65 = new org.jfree.chart.JFreeChart("hi!", var58, (org.jfree.chart.plot.Plot)var60, true);
    java.lang.Object var66 = var60.clone();
    org.jfree.chart.util.HorizontalAlignment var67 = null;
    org.jfree.chart.util.VerticalAlignment var68 = null;
    org.jfree.chart.block.FlowArrangement var71 = new org.jfree.chart.block.FlowArrangement(var67, var68, 100.0d, 10.0d);
    var71.clear();
    org.jfree.chart.block.Arrangement var73 = null;
    org.jfree.chart.title.LegendTitle var74 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var60, (org.jfree.chart.block.Arrangement)var71, var73);
    java.awt.Graphics2D var75 = null;
    java.awt.geom.Rectangle2D var76 = null;
    var60.drawBackgroundImage(var75, var76);
    java.awt.Font var78 = var60.getLabelFont();
    var1.setBaseItemLabelFont(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }
// 
// 
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     org.jfree.data.time.Year var3 = new org.jfree.data.time.Year();
//     org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(10, var3);
//     org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("PlotOrientation.VERTICAL", (org.jfree.data.time.TimePeriod)var3);
//     org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var10 = var7.getLegendItem((-1), 100);
//     var7.setBaseShapesFilled(false);
//     java.awt.Paint var14 = var7.getSeriesOutlinePaint((-1));
//     java.awt.Paint var16 = var7.lookupSeriesOutlinePaint(0);
//     var6.setLabelPaint(var16);
//     double var18 = var6.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var21 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var24 = var21.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var25 = null;
//     org.jfree.chart.plot.RingPlot var26 = new org.jfree.chart.plot.RingPlot(var25);
//     org.jfree.chart.plot.Plot var27 = var26.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var28 = null;
//     var26.axisChanged(var28);
//     org.jfree.chart.JFreeChart var31 = new org.jfree.chart.JFreeChart("hi!", var24, (org.jfree.chart.plot.Plot)var26, true);
//     java.awt.Paint var32 = var26.getBackgroundPaint();
//     java.awt.Paint var33 = var26.getLabelOutlinePaint();
//     var6.setTickMarkPaint(var33);
//     java.text.DateFormat var37 = null;
//     org.jfree.chart.axis.DateTickUnit var38 = new org.jfree.chart.axis.DateTickUnit(2, 1, var37);
//     var6.setTickUnit(var38, false, false);
//     org.jfree.chart.axis.DateAxis var42 = new org.jfree.chart.axis.DateAxis();
//     java.util.Date var43 = var42.getMaximumDate();
//     java.lang.String var44 = var38.dateToString(var43);
//     java.lang.Number var45 = var0.getStdDevValue((java.lang.Comparable)var3, (java.lang.Comparable)var44);
//     org.jfree.data.Range var47 = var0.getRangeBounds(false);
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var49 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var52 = var49.getLegendItem((-1), 100);
//     var49.setBaseShapesFilled(false);
//     java.awt.Paint var56 = var49.getSeriesOutlinePaint((-1));
//     java.awt.Paint var58 = var49.lookupSeriesOutlinePaint(0);
//     var48.setLabelPaint(var58);
//     boolean var60 = var48.isNegativeArrowVisible();
//     org.jfree.data.Range var63 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var64 = var63.toString();
//     org.jfree.data.Range var66 = org.jfree.data.Range.shift(var63, 0.0d);
//     var48.setRange(var66);
//     org.jfree.data.time.Month var68 = new org.jfree.data.time.Month();
//     long var69 = var68.getSerialIndex();
//     java.util.Date var70 = var68.getEnd();
//     org.jfree.data.time.Month var71 = new org.jfree.data.time.Month();
//     long var72 = var71.getSerialIndex();
//     java.util.Date var73 = var71.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var74 = new org.jfree.data.time.SimpleTimePeriod(var70, var73);
//     var48.setMaximumDate(var70);
//     org.jfree.data.time.Month var76 = new org.jfree.data.time.Month();
//     long var77 = var76.getSerialIndex();
//     java.util.Date var78 = var76.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var79 = new org.jfree.data.time.SimpleTimePeriod(var70, var78);
//     java.lang.Number var81 = var0.getValue((java.lang.Comparable)var78, (java.lang.Comparable)"SortOrder.ASCENDING");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var84 = var0.getMeanValue(0, (-457));
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var44 + "' != '" + "12/31/69"+ "'", var44.equals("12/31/69"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var64 + "' != '" + "Range[1.0,100.0]"+ "'", var64.equals("Range[1.0,100.0]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var72 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var73);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var77 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var81);
// 
//   }

  public void test168() {}
//   public void test168() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }
// 
// 
//     org.jfree.chart.block.CenterArrangement var0 = new org.jfree.chart.block.CenterArrangement();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, Double.NaN, Double.NaN);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var13 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var15 = var13.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var18 = new org.jfree.chart.entity.CategoryItemEntity(var3, "hi!", "", (org.jfree.data.category.CategoryDataset)var13, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var22 = var19.getLegendItem((-1), 100);
//     var19.setBaseShapesFilled(false);
//     java.awt.Paint var26 = var19.getSeriesOutlinePaint((-1));
//     java.awt.Paint var28 = var19.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var29 = new org.jfree.chart.title.LegendGraphic(var3, var28);
//     org.jfree.data.Range var32 = new org.jfree.data.Range(1.0d, 100.0d);
//     var0.add((org.jfree.chart.block.Block)var29, (java.lang.Object)var32);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var34.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var38 = var34.getBaseLinesVisible();
//     java.lang.Boolean var40 = var34.getSeriesVisibleInLegend(10);
//     java.awt.Paint var41 = var34.getBaseItemLabelPaint();
//     java.awt.Color var44 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var45 = null;
//     float[] var46 = var44.getRGBColorComponents(var45);
//     var34.setBaseItemLabelPaint((java.awt.Paint)var44);
//     int var48 = var44.getGreen();
//     var29.setFillPaint((java.awt.Paint)var44);
//     org.jfree.data.time.Month var51 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var52 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var51);
//     var52.setDescription("poly");
//     org.jfree.data.time.Month var55 = new org.jfree.data.time.Month();
//     long var56 = var55.getSerialIndex();
//     java.util.Date var57 = var55.getEnd();
//     var52.setDuration((org.jfree.data.time.TimePeriod)var55);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var59 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var59.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var63 = var59.getBaseLinesVisible();
//     java.lang.Boolean var65 = var59.getSeriesVisibleInLegend(10);
//     java.awt.Paint var66 = var59.getBaseItemLabelPaint();
//     java.awt.Color var69 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var70 = null;
//     float[] var71 = var69.getRGBColorComponents(var70);
//     var59.setBaseItemLabelPaint((java.awt.Paint)var69);
//     int var73 = var69.getGreen();
//     java.lang.String var74 = var69.toString();
//     java.awt.Color var77 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var78 = null;
//     float[] var79 = var77.getRGBColorComponents(var78);
//     float[] var80 = var69.getRGBColorComponents(var79);
//     int var81 = var55.compareTo((java.lang.Object)var79);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       float[] var82 = var44.getRGBComponents(var79);
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var56 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var63 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var73 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var74 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var74.equals("java.awt.Color[r=0,g=0,b=10]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var81 == 1);
// 
//   }

  public void test169() {}
//   public void test169() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var8 = var7.getOutlineStroke();
//     var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
//     var7.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var12 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var13.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var17 = var13.getBaseLinesVisible();
//     java.lang.Boolean var19 = var13.getSeriesVisibleInLegend(10);
//     java.awt.Paint var20 = var13.getBaseItemLabelPaint();
//     java.awt.Color var23 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var24 = null;
//     float[] var25 = var23.getRGBColorComponents(var24);
//     var13.setBaseItemLabelPaint((java.awt.Paint)var23);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var29 = var28.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var30 = var28.getBaseNegativeItemLabelPosition();
//     var13.setBasePositiveItemLabelPosition(var30, true);
//     var12.setPositiveItemLabelPositionFallback(var30);
//     org.jfree.chart.text.TextAnchor var34 = var30.getRotationAnchor();
//     var7.setLabelTextAnchor(var34);
//     java.awt.Stroke var36 = var7.getStroke();
//     java.lang.Class var37 = null;
//     java.util.EventListener[] var38 = var7.getListeners(var37);
// 
//   }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }


    double[] var0 = null;
    double[][] var1 = new double[][] { var0};
    double[] var2 = null;
    double[][] var3 = new double[][] { var2};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.category.DefaultIntervalCategoryDataset var4 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var1, var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var24 = var23.getSuppressed();
//     java.lang.Throwable[] var25 = var23.getSuppressed();
//     boolean var26 = var21.equals((java.lang.Object)var25);
//     org.jfree.chart.util.RectangleInsets var27 = var21.getPadding();
//     org.jfree.chart.block.FlowArrangement var28 = new org.jfree.chart.block.FlowArrangement();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var29 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var31 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var29, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var32 = null;
//     org.jfree.chart.plot.RingPlot var33 = new org.jfree.chart.plot.RingPlot(var32);
//     org.jfree.chart.plot.Plot var34 = var33.getRootPlot();
//     var29.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var34);
//     org.jfree.data.KeyToGroupMap var44 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var45 = var44.getGroups();
//     org.jfree.data.statistics.BoxAndWhiskerItem var46 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var45);
//     var29.add(var46, (java.lang.Comparable)0.0f, (java.lang.Comparable)"hi!");
//     org.jfree.chart.title.LegendItemBlockContainer var51 = new org.jfree.chart.title.LegendItemBlockContainer((org.jfree.chart.block.Arrangement)var28, (org.jfree.data.general.Dataset)var29, (java.lang.Comparable)false);
//     java.lang.Comparable var52 = var51.getSeriesKey();
//     double var53 = var51.getContentYOffset();
//     java.awt.Graphics2D var54 = null;
//     org.jfree.chart.block.RectangleConstraint var57 = new org.jfree.chart.block.RectangleConstraint(0.0d, 10.0d);
//     org.jfree.chart.block.RectangleConstraint var60 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
//     org.jfree.chart.util.Size2D var61 = null;
//     org.jfree.chart.util.Size2D var62 = var60.calculateConstrainedSize(var61);
//     org.jfree.chart.util.Size2D var63 = var57.calculateConstrainedSize(var62);
//     org.jfree.chart.util.Size2D var64 = var51.arrange(var54, var57);
//     var21.setWrapper((org.jfree.chart.block.BlockContainer)var51);
//     
//     // Checks the contract:  equals-hashcode on var7 and var33
//     assertTrue("Contract failed: equals-hashcode on var7 and var33", var7.equals(var33) ? var7.hashCode() == var33.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var7
//     assertTrue("Contract failed: equals-hashcode on var33 and var7", var33.equals(var7) ? var33.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var34
//     assertTrue("Contract failed: equals-hashcode on var8 and var34", var8.equals(var34) ? var8.hashCode() == var34.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var34 and var8
//     assertTrue("Contract failed: equals-hashcode on var34 and var8", var34.equals(var8) ? var34.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test172() {}
//   public void test172() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.data.time.Month var18 = new org.jfree.data.time.Month();
//     long var19 = var18.getSerialIndex();
//     java.util.Date var20 = var18.getEnd();
//     java.lang.String var21 = var18.toString();
//     var17.setColumnKey((java.lang.Comparable)var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var21 + "' != '" + "December 2014"+ "'", var21.equals("December 2014"));
// 
//   }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    var0.setDomainCrosshairValue(0.05d);
    java.awt.Paint var3 = var0.getDomainCrosshairPaint();
    org.jfree.chart.plot.IntervalMarker var7 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
    double var8 = var7.getEndValue();
    var7.setStartValue(0.2d);
    org.jfree.chart.util.Layer var11 = null;
    var0.addRangeMarker(0, (org.jfree.chart.plot.Marker)var7, var11);
    java.awt.Paint var13 = var7.getPaint();
    org.jfree.chart.util.GradientPaintTransformer var14 = var7.getGradientPaintTransformer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SpreadsheetDate var3 = new org.jfree.data.time.SpreadsheetDate((-457), 0, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }
// 
// 
//     org.jfree.data.KeyToGroupMap var0 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var1 = var0.getGroups();
//     org.jfree.chart.plot.XYPlot var2 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var4 = new org.jfree.chart.axis.NumberAxis3D("");
//     var4.configure();
//     org.jfree.chart.util.RectangleInsets var6 = var4.getLabelInsets();
//     var2.setAxisOffset(var6);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var9 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var10 = var9.getEndType();
//     java.awt.Stroke var13 = var9.getItemStroke(0, 0);
//     var2.setRangeZeroBaselineStroke(var13);
//     org.jfree.chart.util.Layer var15 = null;
//     java.util.Collection var16 = var2.getDomainMarkers(var15);
//     var2.setForegroundAlpha(100.0f);
//     var2.setRangeCrosshairVisible(true);
//     org.jfree.chart.renderer.xy.XYItemRenderer var21 = null;
//     org.jfree.chart.renderer.xy.XYItemRenderer[] var22 = new org.jfree.chart.renderer.xy.XYItemRenderer[] { var21};
//     var2.setRenderers(var22);
//     org.jfree.chart.plot.XYPlot var24 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var26 = new org.jfree.chart.axis.NumberAxis3D("");
//     var26.configure();
//     org.jfree.chart.util.RectangleInsets var28 = var26.getLabelInsets();
//     var24.setAxisOffset(var28);
//     org.jfree.chart.plot.CategoryMarker var31 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var32 = var31.getOutlineStroke();
//     var24.addDomainMarker((org.jfree.chart.plot.Marker)var31);
//     org.jfree.chart.renderer.xy.XYItemRenderer var34 = var24.getRenderer();
//     org.jfree.chart.axis.ValueAxis var36 = var24.getDomainAxis(1);
//     java.awt.Stroke var37 = var24.getDomainCrosshairStroke();
//     var2.setRangeGridlineStroke(var37);
//     boolean var39 = var0.equals((java.lang.Object)var37);
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, Double.NaN, Double.NaN);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var52 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var54 = var52.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var57 = new org.jfree.chart.entity.CategoryItemEntity(var42, "hi!", "", (org.jfree.data.category.CategoryDataset)var52, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var58 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var61 = var58.getLegendItem((-1), 100);
//     var58.setBaseShapesFilled(false);
//     java.awt.Paint var65 = var58.getSeriesOutlinePaint((-1));
//     java.awt.Paint var67 = var58.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var68 = new org.jfree.chart.title.LegendGraphic(var42, var67);
//     org.jfree.data.general.PieDataset var69 = null;
//     org.jfree.chart.plot.RingPlot var70 = new org.jfree.chart.plot.RingPlot(var69);
//     org.jfree.chart.plot.Plot var71 = var70.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var72 = var70.getInsets();
//     double var74 = var72.calculateBottomOutset(100.0d);
//     var68.setPadding(var72);
//     org.jfree.chart.util.RectangleInsets var76 = var68.getMargin();
//     org.jfree.chart.util.RectangleAnchor var77 = var68.getShapeLocation();
//     java.awt.Stroke var78 = var68.getOutlineStroke();
//     org.jfree.chart.renderer.category.GanttRenderer var79 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.plot.CategoryMarker var81 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var82 = var81.getLabelPaint();
//     var79.setCompletePaint(var82);
//     var68.setOutlinePaint(var82);
//     boolean var85 = var0.equals((java.lang.Object)var82);
//     
//     // Checks the contract:  equals-hashcode on var31 and var81
//     assertTrue("Contract failed: equals-hashcode on var31 and var81", var31.equals(var81) ? var31.hashCode() == var81.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var81 and var31
//     assertTrue("Contract failed: equals-hashcode on var81 and var31", var81.equals(var31) ? var81.hashCode() == var31.hashCode() : true);
// 
//   }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    org.jfree.chart.block.LineBorder var0 = new org.jfree.chart.block.LineBorder();
    org.jfree.chart.plot.XYPlot var1 = new org.jfree.chart.plot.XYPlot();
    float var2 = var1.getForegroundAlpha();
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.axis.NumberAxis3D var10 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var11 = var10.isTickMarksVisible();
    java.awt.Shape var12 = var10.getDownArrow();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var12, 100.0d, 0.2d);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var16.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var20 = var16.getBaseLinesVisible();
    java.lang.Boolean var22 = var16.getSeriesVisibleInLegend(10);
    java.awt.Paint var23 = var16.getBaseItemLabelPaint();
    java.awt.Color var26 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var27 = null;
    float[] var28 = var26.getRGBColorComponents(var27);
    var16.setBaseItemLabelPaint((java.awt.Paint)var26);
    int var30 = var26.getGreen();
    java.lang.String var31 = var26.toString();
    org.jfree.chart.LegendItem var32 = new org.jfree.chart.LegendItem("hi!", "ThreadContext", "Pie Plot", "Range[1.0,100.0]", var15, (java.awt.Paint)var26);
    var3.setTickLabelPaint((java.lang.Comparable)10.0d, (java.awt.Paint)var26);
    var1.setBackgroundPaint((java.awt.Paint)var26);
    java.awt.color.ColorSpace var35 = var26.getColorSpace();
    boolean var36 = var0.equals((java.lang.Object)var26);
    int var37 = var26.getAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var31.equals("java.awt.Color[r=0,g=0,b=10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 255);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    var0.setUseFillPaint(true);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }


    org.jfree.chart.util.HorizontalAlignment var0 = null;
    org.jfree.chart.util.VerticalAlignment var1 = null;
    org.jfree.chart.block.FlowArrangement var4 = new org.jfree.chart.block.FlowArrangement(var0, var1, Double.NaN, 4.0d);
    org.jfree.chart.block.BlockContainer var5 = new org.jfree.chart.block.BlockContainer();
    java.awt.Graphics2D var6 = null;
    org.jfree.chart.block.RectangleConstraint var9 = new org.jfree.chart.block.RectangleConstraint(1.0d, (-1.0d));
    org.jfree.chart.util.Size2D var10 = var4.arrange(var5, var6, var9);
    var5.clear();
    var5.setWidth(12.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test179() {}
//   public void test179() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var4 = var0.getBaseLinesVisible();
//     boolean var6 = var0.equals((java.lang.Object)100.0f);
//     org.jfree.chart.event.RendererChangeEvent var7 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var6);
//     java.lang.String var8 = var7.toString();
//     org.jfree.data.general.PieDataset var9 = null;
//     org.jfree.chart.plot.RingPlot var10 = new org.jfree.chart.plot.RingPlot(var9);
//     org.jfree.chart.plot.Plot var11 = var10.getRootPlot();
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var10);
//     java.lang.Object var13 = var12.clone();
//     var7.setChart(var12);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var20 = var17.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var21 = null;
//     org.jfree.chart.plot.RingPlot var22 = new org.jfree.chart.plot.RingPlot(var21);
//     org.jfree.chart.plot.Plot var23 = var22.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var24 = null;
//     var22.axisChanged(var24);
//     org.jfree.chart.JFreeChart var27 = new org.jfree.chart.JFreeChart("hi!", var20, (org.jfree.chart.plot.Plot)var22, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var35 = var28.getSeriesOutlinePaint((-1));
//     boolean var36 = var27.equals((java.lang.Object)var28);
//     org.jfree.chart.title.TextTitle var37 = var27.getTitle();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var39 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var40 = var39.getEndType();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var41 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var44 = var41.getLegendItem((-1), 100);
//     var41.setBaseShapesFilled(false);
//     java.awt.Paint var49 = var41.getItemOutlinePaint(10, 1);
//     java.awt.Paint var51 = var41.getSeriesOutlinePaint(10);
//     var41.setAutoPopulateSeriesShape(false);
//     boolean var54 = var39.equals((java.lang.Object)var41);
//     java.awt.Paint var57 = var39.getItemPaint(1, 0);
//     var37.setPaint(var57);
//     org.jfree.data.time.Month var59 = new org.jfree.data.time.Month();
//     long var60 = var59.getSerialIndex();
//     java.util.Date var61 = var59.getEnd();
//     org.jfree.data.time.Month var62 = new org.jfree.data.time.Month();
//     long var63 = var62.getSerialIndex();
//     java.util.Date var64 = var62.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var65 = new org.jfree.data.time.SimpleTimePeriod(var61, var64);
//     boolean var66 = var37.equals((java.lang.Object)var61);
//     var12.setTitle(var37);
//     
//     // Checks the contract:  equals-hashcode on var10 and var22
//     assertTrue("Contract failed: equals-hashcode on var10 and var22", var10.equals(var22) ? var10.hashCode() == var22.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var22 and var10
//     assertTrue("Contract failed: equals-hashcode on var22 and var10", var22.equals(var10) ? var22.hashCode() == var10.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var11 and var23
//     assertTrue("Contract failed: equals-hashcode on var11 and var23", var11.equals(var23) ? var11.hashCode() == var23.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var23 and var11
//     assertTrue("Contract failed: equals-hashcode on var23 and var11", var23.equals(var11) ? var23.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var12 and var27
//     assertTrue("Contract failed: equals-hashcode on var12 and var27", var12.equals(var27) ? var12.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var12
//     assertTrue("Contract failed: equals-hashcode on var27 and var12", var27.equals(var12) ? var27.hashCode() == var12.hashCode() : true);
// 
//   }

  public void test180() {}
//   public void test180() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     float var1 = var0.getForegroundAlpha();
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis();
//     org.jfree.chart.axis.NumberAxis3D var9 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var10 = var9.isTickMarksVisible();
//     java.awt.Shape var11 = var9.getDownArrow();
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 100.0d, 0.2d);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var15.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var19 = var15.getBaseLinesVisible();
//     java.lang.Boolean var21 = var15.getSeriesVisibleInLegend(10);
//     java.awt.Paint var22 = var15.getBaseItemLabelPaint();
//     java.awt.Color var25 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var26 = null;
//     float[] var27 = var25.getRGBColorComponents(var26);
//     var15.setBaseItemLabelPaint((java.awt.Paint)var25);
//     int var29 = var25.getGreen();
//     java.lang.String var30 = var25.toString();
//     org.jfree.chart.LegendItem var31 = new org.jfree.chart.LegendItem("hi!", "ThreadContext", "Pie Plot", "Range[1.0,100.0]", var14, (java.awt.Paint)var25);
//     var2.setTickLabelPaint((java.lang.Comparable)10.0d, (java.awt.Paint)var25);
//     var0.setBackgroundPaint((java.awt.Paint)var25);
//     org.jfree.chart.plot.Marker var35 = null;
//     org.jfree.chart.util.Layer var36 = null;
//     var0.addRangeMarker(1, var35, var36);
// 
//   }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
    var38.setDrawSharedDomainAxis(true);
    var38.configureRangeAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var0, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
    var0.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var5);
    java.lang.Number var9 = var0.getMaxRegularValue((java.lang.Comparable)100.0f, (java.lang.Comparable)10);
    int var11 = var0.getRowIndex((java.lang.Comparable)Double.NaN);
    int var12 = var0.getColumnCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var15 = var0.getMeanValue((-457), 100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }


    org.jfree.data.xy.XYDataset var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var1 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var6 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var9 = var6.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var10 = null;
//     org.jfree.chart.plot.RingPlot var11 = new org.jfree.chart.plot.RingPlot(var10);
//     org.jfree.chart.plot.Plot var12 = var11.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var13 = null;
//     var11.axisChanged(var13);
//     org.jfree.chart.JFreeChart var16 = new org.jfree.chart.JFreeChart("hi!", var9, (org.jfree.chart.plot.Plot)var11, true);
//     org.jfree.chart.block.LabelBlock var17 = new org.jfree.chart.block.LabelBlock("Range[1.0,100.0]", var9);
//     java.lang.Object var18 = var17.clone();
//     java.awt.Font var19 = var17.getFont();
//     org.jfree.chart.block.LabelBlock var20 = new org.jfree.chart.block.LabelBlock("Oct", var19);
//     org.jfree.chart.text.TextFragment var21 = new org.jfree.chart.text.TextFragment("Default Group", var19);
//     org.jfree.chart.renderer.category.GanttRenderer var22 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var26 = var23.getLegendItem((-1), 100);
//     var23.setBaseShapesFilled(false);
//     java.awt.Paint var30 = var23.getSeriesOutlinePaint((-1));
//     org.jfree.chart.renderer.category.StackedAreaRenderer var32 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var33 = var32.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var34 = var32.getBaseNegativeItemLabelPosition();
//     var23.setBaseNegativeItemLabelPosition(var34);
//     var22.setPositiveItemLabelPositionFallback(var34);
//     org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var43 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var46 = var43.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var47 = null;
//     org.jfree.chart.plot.RingPlot var48 = new org.jfree.chart.plot.RingPlot(var47);
//     org.jfree.chart.plot.Plot var49 = var48.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var50 = null;
//     var48.axisChanged(var50);
//     org.jfree.chart.JFreeChart var53 = new org.jfree.chart.JFreeChart("hi!", var46, (org.jfree.chart.plot.Plot)var48, true);
//     java.awt.Paint var54 = var48.getBackgroundPaint();
//     var39.setSeriesItemLabelPaint(0, var54, true);
//     var22.setCompletePaint(var54);
//     org.jfree.chart.plot.IntervalMarker var60 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
//     double var61 = var60.getEndValue();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var62 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var65 = var62.getLegendItem((-1), 100);
//     var62.setBaseShapesFilled(false);
//     java.awt.Paint var69 = var62.getSeriesOutlinePaint((-1));
//     java.awt.Paint var71 = var62.lookupSeriesOutlinePaint(0);
//     var60.setOutlinePaint(var71);
//     var22.setBasePaint(var71, false);
//     org.jfree.chart.text.TextLine var75 = new org.jfree.chart.text.TextLine("PlotOrientation.VERTICAL", var19, var71);
//     
//     // Checks the contract:  equals-hashcode on var11 and var48
//     assertTrue("Contract failed: equals-hashcode on var11 and var48", var11.equals(var48) ? var11.hashCode() == var48.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var48 and var11
//     assertTrue("Contract failed: equals-hashcode on var48 and var11", var48.equals(var11) ? var48.hashCode() == var11.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var12 and var49
//     assertTrue("Contract failed: equals-hashcode on var12 and var49", var12.equals(var49) ? var12.hashCode() == var49.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var49 and var12
//     assertTrue("Contract failed: equals-hashcode on var49 and var12", var49.equals(var12) ? var49.hashCode() == var12.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var53
//     assertTrue("Contract failed: equals-hashcode on var16 and var53", var16.equals(var53) ? var16.hashCode() == var53.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var53 and var16
//     assertTrue("Contract failed: equals-hashcode on var53 and var16", var53.equals(var16) ? var53.hashCode() == var16.hashCode() : true);
// 
//   }

  public void test185() {}
//   public void test185() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.plot.XYPlot var38 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var40 = new org.jfree.chart.axis.NumberAxis3D("");
//     var40.configure();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     var38.setAxisOffset(var42);
//     org.jfree.chart.plot.CategoryMarker var45 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var46 = var45.getOutlineStroke();
//     var38.addDomainMarker((org.jfree.chart.plot.Marker)var45);
//     var17.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var38);
//     org.jfree.data.general.PieDataset var49 = null;
//     org.jfree.chart.plot.RingPlot var50 = new org.jfree.chart.plot.RingPlot(var49);
//     org.jfree.chart.plot.Plot var51 = var50.getRootPlot();
//     org.jfree.chart.JFreeChart var52 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var50);
//     boolean var53 = var52.getAntiAlias();
//     var52.setAntiAlias(true);
//     org.jfree.chart.event.ChartProgressListener var56 = null;
//     var52.addProgressListener(var56);
//     var38.removeChangeListener((org.jfree.chart.event.PlotChangeListener)var52);
//     
//     // Checks the contract:  equals-hashcode on var27 and var50
//     assertTrue("Contract failed: equals-hashcode on var27 and var50", var27.equals(var50) ? var27.hashCode() == var50.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var50 and var27
//     assertTrue("Contract failed: equals-hashcode on var50 and var27", var50.equals(var27) ? var50.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var51
//     assertTrue("Contract failed: equals-hashcode on var28 and var51", var28.equals(var51) ? var28.hashCode() == var51.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var51 and var28
//     assertTrue("Contract failed: equals-hashcode on var51 and var28", var51.equals(var28) ? var51.hashCode() == var28.hashCode() : true);
// 
//   }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    double var1 = var0.getLabelAngle();
    var0.setTickLabelsVisible(false);
    var0.setTickMarkOutsideLength(1.0f);
    var0.configure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    org.jfree.data.category.CategoryDataset var1 = null;
    org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var3.setUpperMargin(0.0d);
    int var6 = var3.getMaximumCategoryLabelLines();
    java.lang.Object var7 = var3.clone();
    org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var12 = var9.getLegendItem((-1), 100);
    var9.setBaseShapesFilled(false);
    java.awt.Paint var16 = var9.getSeriesOutlinePaint((-1));
    java.awt.Paint var18 = var9.lookupSeriesOutlinePaint(0);
    var8.setLabelPaint(var18);
    double var20 = var8.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var21 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var24 = var21.getLegendItem(2, 0);
    double var25 = var21.getBase();
    org.jfree.chart.labels.ItemLabelPosition var28 = var21.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var32 = var29.getLegendItem((-1), 100);
    var29.setBaseShapesFilled(false);
    java.awt.Paint var37 = var29.getItemOutlinePaint(10, 1);
    var21.setErrorIndicatorPaint(var37);
    org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot(var1, var3, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.renderer.category.CategoryItemRenderer)var21);
    var39.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var43 = var39.getDomainAxis(0);
    var39.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.SortOrder var46 = var39.getColumnRenderingOrder();
    var0.sortByValues(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertValue(10, (java.lang.Comparable)(-1L), 100.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }


    org.jfree.chart.renderer.category.AreaRenderer var0 = new org.jfree.chart.renderer.category.AreaRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var1 = var0.getBaseURLGenerator();
    var0.setSeriesVisible(0, (java.lang.Boolean)true, false);
    org.jfree.chart.renderer.category.StatisticalBarRenderer var7 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var8.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var12 = var8.getBaseLinesVisible();
    java.lang.Boolean var14 = var8.getSeriesVisibleInLegend(10);
    java.awt.Paint var15 = var8.getBaseItemLabelPaint();
    java.awt.Color var18 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var19 = null;
    float[] var20 = var18.getRGBColorComponents(var19);
    var8.setBaseItemLabelPaint((java.awt.Paint)var18);
    org.jfree.chart.renderer.category.StackedAreaRenderer var23 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var24 = var23.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var25 = var23.getBaseNegativeItemLabelPosition();
    var8.setBasePositiveItemLabelPosition(var25, true);
    var7.setPositiveItemLabelPositionFallback(var25);
    var0.setSeriesNegativeItemLabelPosition(100, var25);
    double var30 = var25.getAngle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);

  }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }
// 
// 
//     org.jfree.data.time.Year var0 = new org.jfree.data.time.Year();
//     long var1 = var0.getSerialIndex();
//     java.util.Date var2 = var0.getEnd();
//     java.util.Calendar var3 = null;
//     long var4 = var0.getLastMillisecond(var3);
// 
//   }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    int var1 = var0.getItemCount();
    int var2 = var0.getItemCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var4 = var0.getValue((-457));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var32 = var30.getInsets();
//     double var34 = var32.calculateBottomOutset(100.0d);
//     var28.setPadding(var32);
//     org.jfree.chart.util.RectangleInsets var36 = var28.getMargin();
//     org.jfree.chart.util.RectangleAnchor var37 = var28.getShapeLocation();
//     java.awt.Stroke var38 = var28.getOutlineStroke();
//     org.jfree.chart.renderer.category.GanttRenderer var39 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var42 = var41.getLabelPaint();
//     var39.setCompletePaint(var42);
//     var28.setOutlinePaint(var42);
//     java.awt.Shape var47 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var47, Double.NaN, Double.NaN);
//     java.awt.Shape var54 = org.jfree.chart.util.ShapeUtilities.rotateShape(var47, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var57 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var59 = var57.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var62 = new org.jfree.chart.entity.CategoryItemEntity(var47, "hi!", "", (org.jfree.data.category.CategoryDataset)var57, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var63 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var66 = var63.getLegendItem((-1), 100);
//     var63.setBaseShapesFilled(false);
//     java.awt.Paint var70 = var63.getSeriesOutlinePaint((-1));
//     java.awt.Paint var72 = var63.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var73 = new org.jfree.chart.title.LegendGraphic(var47, var72);
//     org.jfree.data.general.PieDataset var74 = null;
//     org.jfree.chart.plot.RingPlot var75 = new org.jfree.chart.plot.RingPlot(var74);
//     org.jfree.chart.plot.Plot var76 = var75.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var77 = var75.getInsets();
//     double var79 = var77.calculateBottomOutset(100.0d);
//     var73.setPadding(var77);
//     org.jfree.chart.util.RectangleAnchor var81 = var73.getShapeLocation();
//     var28.setShapeAnchor(var81);
//     
//     // Checks the contract:  equals-hashcode on var12 and var57
//     assertTrue("Contract failed: equals-hashcode on var12 and var57", var12.equals(var57) ? var12.hashCode() == var57.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var12
//     assertTrue("Contract failed: equals-hashcode on var57 and var12", var57.equals(var12) ? var57.hashCode() == var12.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var75
//     assertTrue("Contract failed: equals-hashcode on var30 and var75", var30.equals(var75) ? var30.hashCode() == var75.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var75 and var30
//     assertTrue("Contract failed: equals-hashcode on var75 and var30", var75.equals(var30) ? var75.hashCode() == var30.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var76
//     assertTrue("Contract failed: equals-hashcode on var31 and var76", var31.equals(var76) ? var31.hashCode() == var76.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var76 and var31
//     assertTrue("Contract failed: equals-hashcode on var76 and var31", var76.equals(var31) ? var76.hashCode() == var31.hashCode() : true);
// 
//   }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("Size2D[width=50.5, height=10.0]");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    boolean var4 = var0.getBaseLinesVisible();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
    java.awt.Paint var8 = var7.getErrorIndicatorPaint();
    org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
    var7.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var9);
    var0.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var9);
    org.jfree.chart.renderer.category.StackedAreaRenderer var13 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var16 = var13.getItemLabelFont((-1), 0);
    var0.setBaseItemLabelFont(var16);
    var0.setBaseSeriesVisible(false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }
// 
// 
//     org.jfree.data.DefaultKeyedValues2D var1 = new org.jfree.data.DefaultKeyedValues2D(false);
//     var1.clear();
//     java.util.List var3 = var1.getColumnKeys();
//     java.lang.Object var4 = null;
//     boolean var5 = var1.equals(var4);
//     int var7 = var1.getRowIndex((java.lang.Comparable)' ');
//     org.jfree.data.general.PieDataset var8 = null;
//     org.jfree.chart.plot.RingPlot var9 = new org.jfree.chart.plot.RingPlot(var8);
//     org.jfree.chart.plot.Plot var10 = var9.getRootPlot();
//     org.jfree.chart.JFreeChart var11 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var9);
//     boolean var12 = var11.getAntiAlias();
//     org.jfree.chart.util.RectangleInsets var13 = var11.getPadding();
//     org.jfree.chart.event.ChartChangeEventType var14 = null;
//     org.jfree.chart.event.ChartChangeEvent var15 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)' ', var11, var14);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var18 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var21 = var18.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var22 = null;
//     org.jfree.chart.plot.RingPlot var23 = new org.jfree.chart.plot.RingPlot(var22);
//     org.jfree.chart.plot.Plot var24 = var23.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var25 = null;
//     var23.axisChanged(var25);
//     org.jfree.chart.JFreeChart var28 = new org.jfree.chart.JFreeChart("hi!", var21, (org.jfree.chart.plot.Plot)var23, true);
//     int var29 = var28.getBackgroundImageAlignment();
//     var15.setChart(var28);
//     
//     // Checks the contract:  equals-hashcode on var9 and var23
//     assertTrue("Contract failed: equals-hashcode on var9 and var23", var9.equals(var23) ? var9.hashCode() == var23.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var23 and var9
//     assertTrue("Contract failed: equals-hashcode on var23 and var9", var23.equals(var9) ? var23.hashCode() == var9.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var10 and var24
//     assertTrue("Contract failed: equals-hashcode on var10 and var24", var10.equals(var24) ? var10.hashCode() == var24.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var24 and var10
//     assertTrue("Contract failed: equals-hashcode on var24 and var10", var24.equals(var10) ? var24.hashCode() == var10.hashCode() : true);
// 
//   }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     java.lang.Comparable var18 = var17.getRowKey();
//     org.jfree.chart.axis.NumberAxis3D var20 = new org.jfree.chart.axis.NumberAxis3D("");
//     var20.configure();
//     org.jfree.chart.axis.NumberTickUnit var22 = var20.getTickUnit();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var25 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var28 = var25.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var32 = null;
//     var30.axisChanged(var32);
//     org.jfree.chart.JFreeChart var35 = new org.jfree.chart.JFreeChart("hi!", var28, (org.jfree.chart.plot.Plot)var30, true);
//     int var36 = var22.compareTo((java.lang.Object)var30);
//     var17.setColumnKey((java.lang.Comparable)var22);
//     org.jfree.data.time.Month var39 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var40 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var39);
//     var40.setDescription("poly");
//     org.jfree.data.time.Month var43 = new org.jfree.data.time.Month();
//     long var44 = var43.getSerialIndex();
//     java.util.Date var45 = var43.getEnd();
//     var40.setDuration((org.jfree.data.time.TimePeriod)var43);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var47 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var47.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var51 = var47.getBaseLinesVisible();
//     java.lang.Boolean var53 = var47.getSeriesVisibleInLegend(10);
//     java.awt.Paint var54 = var47.getBaseItemLabelPaint();
//     java.awt.Color var57 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var58 = null;
//     float[] var59 = var57.getRGBColorComponents(var58);
//     var47.setBaseItemLabelPaint((java.awt.Paint)var57);
//     int var61 = var57.getGreen();
//     java.lang.String var62 = var57.toString();
//     java.awt.Color var65 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var66 = null;
//     float[] var67 = var65.getRGBColorComponents(var66);
//     float[] var68 = var57.getRGBColorComponents(var67);
//     int var69 = var43.compareTo((java.lang.Object)var67);
//     org.jfree.data.time.RegularTimePeriod var70 = var43.next();
//     var17.setColumnKey((java.lang.Comparable)var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var18 + "' != '" + 100.0f+ "'", var18.equals(100.0f));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var36 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var61 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var62 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var62.equals("java.awt.Color[r=0,g=0,b=10]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
// 
//   }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }


    org.jfree.chart.labels.IntervalCategoryToolTipGenerator var0 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator();
    java.lang.Object var1 = var0.clone();
    org.jfree.data.category.CategoryDataset var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var0.generateToolTip(var2, 15, (-16777206));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }
// 
// 
//     org.jfree.data.xy.XYDataset var0 = null;
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("org.jfree.data.UnknownKeyException: ");
//     org.jfree.chart.renderer.PolarItemRenderer var3 = null;
//     org.jfree.chart.plot.PolarPlot var4 = new org.jfree.chart.plot.PolarPlot(var0, (org.jfree.chart.axis.ValueAxis)var2, var3);
//     java.awt.Paint var5 = null;
//     var4.setRadiusGridlinePaint(var5);
//     org.jfree.chart.plot.PlotOrientation var7 = var4.getOrientation();
//     java.awt.Graphics2D var8 = null;
//     java.awt.geom.Rectangle2D var9 = null;
//     org.jfree.chart.plot.XYPlot var10 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var12 = new org.jfree.chart.axis.NumberAxis3D("");
//     var12.configure();
//     org.jfree.chart.util.RectangleInsets var14 = var12.getLabelInsets();
//     var10.setAxisOffset(var14);
//     org.jfree.chart.plot.CategoryMarker var17 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var18 = var17.getOutlineStroke();
//     var10.addDomainMarker((org.jfree.chart.plot.Marker)var17);
//     java.awt.geom.Point2D var20 = var10.getQuadrantOrigin();
//     org.jfree.chart.plot.PlotState var21 = new org.jfree.chart.plot.PlotState();
//     org.jfree.chart.entity.EntityCollection var22 = null;
//     org.jfree.chart.ChartRenderingInfo var23 = new org.jfree.chart.ChartRenderingInfo(var22);
//     org.jfree.chart.plot.PlotRenderingInfo var24 = var23.getPlotInfo();
//     var4.draw(var8, var9, var20, var21, var24);
// 
//   }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.LegendItemCollection var1 = new org.jfree.chart.LegendItemCollection();
    int var2 = var1.getItemCount();
    var0.setFixedLegendItems(var1);
    org.jfree.chart.axis.AxisLocation var5 = var0.getRangeAxisLocation(10);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)1L);
    java.lang.Object var8 = var7.clone();
    java.awt.Paint var9 = var7.getOutlinePaint();
    var0.setDomainGridlinePaint(var9);
    org.jfree.chart.annotations.XYAnnotation var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addAnnotation(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    org.jfree.chart.renderer.category.BoxAndWhiskerRenderer var0 = new org.jfree.chart.renderer.category.BoxAndWhiskerRenderer();
    double var1 = var0.getItemMargin();
    java.awt.Paint var2 = var0.getArtifactPaint();
    var0.setItemMargin(0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }


    java.text.DateFormat var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.labels.IntervalCategoryToolTipGenerator var2 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("Multiple Pie Plot", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.util.List var13 = var12.getSubtitles();
    var12.setTextAntiAlias(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    org.jfree.chart.axis.CategoryAxis var0 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var8 = var7.isTickMarksVisible();
    java.awt.Shape var9 = var7.getDownArrow();
    java.awt.Shape var12 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var9, 100.0d, 0.2d);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var13.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var17 = var13.getBaseLinesVisible();
    java.lang.Boolean var19 = var13.getSeriesVisibleInLegend(10);
    java.awt.Paint var20 = var13.getBaseItemLabelPaint();
    java.awt.Color var23 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var24 = null;
    float[] var25 = var23.getRGBColorComponents(var24);
    var13.setBaseItemLabelPaint((java.awt.Paint)var23);
    int var27 = var23.getGreen();
    java.lang.String var28 = var23.toString();
    org.jfree.chart.LegendItem var29 = new org.jfree.chart.LegendItem("hi!", "ThreadContext", "Pie Plot", "Range[1.0,100.0]", var12, (java.awt.Paint)var23);
    var0.setTickLabelPaint((java.lang.Comparable)10.0d, (java.awt.Paint)var23);
    int var31 = var23.getBlue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var28.equals("java.awt.Color[r=0,g=0,b=10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 10);

  }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
//     var1.configure();
//     org.jfree.chart.block.CenterArrangement var3 = new org.jfree.chart.block.CenterArrangement();
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var6, Double.NaN, Double.NaN);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.rotateShape(var6, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var16 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var18 = var16.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var21 = new org.jfree.chart.entity.CategoryItemEntity(var6, "hi!", "", (org.jfree.data.category.CategoryDataset)var16, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var25 = var22.getLegendItem((-1), 100);
//     var22.setBaseShapesFilled(false);
//     java.awt.Paint var29 = var22.getSeriesOutlinePaint((-1));
//     java.awt.Paint var31 = var22.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var32 = new org.jfree.chart.title.LegendGraphic(var6, var31);
//     org.jfree.data.Range var35 = new org.jfree.data.Range(1.0d, 100.0d);
//     var3.add((org.jfree.chart.block.Block)var32, (java.lang.Object)var35);
//     var1.setRangeWithMargins(var35);
//     double var38 = var35.getCentralValue();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 50.5d);
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    java.lang.Object var4 = var3.clone();
    int var5 = var3.getSubtitleCount();
    org.jfree.chart.plot.Plot var6 = var3.getPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test205() {}
//   public void test205() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }
// 
// 
//     org.jfree.data.UnknownKeyException var1 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var2 = var1.getSuppressed();
//     java.lang.String var3 = var1.toString();
//     java.lang.Throwable var4 = null;
//     var1.addSuppressed(var4);
// 
//   }

  public void test206() {}
//   public void test206() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }
// 
// 
//     org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
//     org.jfree.data.KeyToGroupMap var9 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var10 = var9.getGroups();
//     org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var10);
//     java.lang.Comparable var12 = null;
//     var0.setObject((java.lang.Object)var10, var12, (java.lang.Comparable)1);
//     var0.removeObject((java.lang.Comparable)10, (java.lang.Comparable)(short)100);
//     int var19 = var0.getColumnIndex((java.lang.Comparable)(byte)100);
//     org.jfree.chart.util.HorizontalAlignment var20 = null;
//     org.jfree.chart.util.VerticalAlignment var21 = null;
//     org.jfree.chart.block.FlowArrangement var24 = new org.jfree.chart.block.FlowArrangement(var20, var21, 90.0d, 1.0d);
//     java.lang.Comparable var25 = null;
//     org.jfree.data.KeyToGroupMap var26 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var27 = var26.getGroups();
//     java.util.List var28 = var26.getGroups();
//     java.lang.Object var29 = var26.clone();
//     org.jfree.data.time.Month var30 = new org.jfree.data.time.Month();
//     int var31 = var26.getGroupIndex((java.lang.Comparable)var30);
//     var0.setObject((java.lang.Object)1.0d, var25, (java.lang.Comparable)var31);
//     
//     // Checks the contract:  equals-hashcode on var9 and var26
//     assertTrue("Contract failed: equals-hashcode on var9 and var26", var9.equals(var26) ? var9.hashCode() == var26.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var26 and var9
//     assertTrue("Contract failed: equals-hashcode on var26 and var9", var26.equals(var9) ? var26.hashCode() == var9.hashCode() : true);
// 
//   }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }
// 
// 
//     org.jfree.chart.block.CenterArrangement var0 = new org.jfree.chart.block.CenterArrangement();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, Double.NaN, Double.NaN);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var13 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var15 = var13.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var18 = new org.jfree.chart.entity.CategoryItemEntity(var3, "hi!", "", (org.jfree.data.category.CategoryDataset)var13, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var22 = var19.getLegendItem((-1), 100);
//     var19.setBaseShapesFilled(false);
//     java.awt.Paint var26 = var19.getSeriesOutlinePaint((-1));
//     java.awt.Paint var28 = var19.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var29 = new org.jfree.chart.title.LegendGraphic(var3, var28);
//     org.jfree.data.Range var32 = new org.jfree.data.Range(1.0d, 100.0d);
//     var0.add((org.jfree.chart.block.Block)var29, (java.lang.Object)var32);
//     java.awt.Graphics2D var34 = null;
//     org.jfree.chart.block.RectangleConstraint var37 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
//     org.jfree.chart.util.Size2D var38 = var29.arrange(var34, var37);
//     java.awt.Graphics2D var39 = null;
//     java.awt.geom.Rectangle2D var40 = null;
//     org.jfree.chart.plot.XYPlot var41 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var43 = new org.jfree.chart.axis.NumberAxis3D("");
//     var43.configure();
//     org.jfree.chart.util.RectangleInsets var45 = var43.getLabelInsets();
//     var41.setAxisOffset(var45);
//     org.jfree.chart.plot.CategoryMarker var48 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var49 = var48.getOutlineStroke();
//     var41.addDomainMarker((org.jfree.chart.plot.Marker)var48);
//     java.awt.geom.Point2D var51 = var41.getQuadrantOrigin();
//     org.jfree.chart.plot.DatasetRenderingOrder var52 = var41.getDatasetRenderingOrder();
//     int var53 = var41.getDatasetCount();
//     boolean var54 = var41.isDomainZeroBaselineVisible();
//     java.awt.Stroke var55 = var41.getDomainCrosshairStroke();
//     java.lang.Object var56 = var29.draw(var39, var40, (java.lang.Object)var41);
// 
//   }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    org.jfree.chart.labels.PieSectionLabelGenerator var4 = var1.getLegendLabelGenerator();
    org.jfree.chart.util.Rotation var5 = var1.getDirection();
    java.awt.Shape var6 = var1.getLegendItemShape();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    double var8 = var7.getLabelAngle();
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, Double.NaN, Double.NaN);
    var7.setDownArrow(var11);
    boolean var16 = org.jfree.chart.util.ShapeUtilities.equal(var6, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }
// 
// 
//     org.jfree.chart.renderer.category.LayeredBarRenderer var1 = new org.jfree.chart.renderer.category.LayeredBarRenderer();
//     double var3 = var1.getSeriesBarWidth((-457));
//     java.awt.Font var6 = var1.getItemLabelFont(1, 0);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var7.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var11 = var7.getBaseLinesVisible();
//     java.lang.Boolean var13 = var7.getSeriesVisibleInLegend(10);
//     java.awt.Paint var14 = var7.getBaseItemLabelPaint();
//     java.awt.Color var17 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var18 = null;
//     float[] var19 = var17.getRGBColorComponents(var18);
//     var7.setBaseItemLabelPaint((java.awt.Paint)var17);
//     java.awt.Color var21 = var17.brighter();
//     java.awt.Graphics2D var24 = null;
//     org.jfree.chart.text.G2TextMeasurer var25 = new org.jfree.chart.text.G2TextMeasurer(var24);
//     org.jfree.chart.text.TextBlock var26 = org.jfree.chart.text.TextUtilities.createTextBlock("2014", var6, (java.awt.Paint)var17, 10.0f, (-16777206), (org.jfree.chart.text.TextMeasurer)var25);
// 
//   }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    org.jfree.chart.util.HorizontalAlignment var14 = null;
    org.jfree.chart.util.VerticalAlignment var15 = null;
    org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
    var18.clear();
    org.jfree.chart.block.Arrangement var20 = null;
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
    org.jfree.chart.util.RectangleInsets var22 = var21.getLegendItemGraphicPadding();
    double var24 = var22.calculateLeftInset(0.0d);
    double var26 = var22.calculateRightOutset((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2.0d);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    org.jfree.chart.util.HorizontalAlignment var14 = null;
    org.jfree.chart.util.VerticalAlignment var15 = null;
    org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
    var18.clear();
    org.jfree.chart.block.Arrangement var20 = null;
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
    java.lang.String var22 = var7.getNoDataMessage();
    boolean var23 = var7.getSectionOutlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    org.jfree.chart.renderer.category.StatisticalBarRenderer var0 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem(2, 0);
    double var4 = var0.getBase();
    org.jfree.chart.labels.ItemLabelPosition var7 = var0.getPositiveItemLabelPosition(2, (-1));
    double var8 = var0.getMaximumBarWidth();
    var0.setBase(4.0d);
    boolean var11 = var0.getBaseSeriesVisibleInLegend();
    java.awt.Color var14 = java.awt.Color.getColor("Default Group", 1);
    var0.setErrorIndicatorPaint((java.awt.Paint)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var24 = var23.getSuppressed();
//     java.lang.Throwable[] var25 = var23.getSuppressed();
//     boolean var26 = var21.equals((java.lang.Object)var25);
//     java.awt.Paint var27 = var21.getBackgroundPaint();
//     org.jfree.chart.util.RectangleEdge var28 = var21.getLegendItemGraphicEdge();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var31 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var34 = var31.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var35 = null;
//     org.jfree.chart.plot.RingPlot var36 = new org.jfree.chart.plot.RingPlot(var35);
//     org.jfree.chart.plot.Plot var37 = var36.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var38 = null;
//     var36.axisChanged(var38);
//     org.jfree.chart.JFreeChart var41 = new org.jfree.chart.JFreeChart("hi!", var34, (org.jfree.chart.plot.Plot)var36, true);
//     java.lang.Object var42 = var36.clone();
//     org.jfree.chart.util.HorizontalAlignment var43 = null;
//     org.jfree.chart.util.VerticalAlignment var44 = null;
//     org.jfree.chart.block.FlowArrangement var47 = new org.jfree.chart.block.FlowArrangement(var43, var44, 100.0d, 10.0d);
//     var47.clear();
//     org.jfree.chart.block.Arrangement var49 = null;
//     org.jfree.chart.title.LegendTitle var50 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var36, (org.jfree.chart.block.Arrangement)var47, var49);
//     org.jfree.data.UnknownKeyException var52 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var53 = var52.getSuppressed();
//     java.lang.Throwable[] var54 = var52.getSuppressed();
//     boolean var55 = var50.equals((java.lang.Object)var54);
//     org.jfree.chart.util.RectangleInsets var56 = var50.getItemLabelPadding();
//     org.jfree.chart.util.VerticalAlignment var57 = var50.getVerticalAlignment();
//     var21.setVerticalAlignment(var57);
//     
//     // Checks the contract:  equals-hashcode on var7 and var36
//     assertTrue("Contract failed: equals-hashcode on var7 and var36", var7.equals(var36) ? var7.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var7
//     assertTrue("Contract failed: equals-hashcode on var36 and var7", var36.equals(var7) ? var36.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var37
//     assertTrue("Contract failed: equals-hashcode on var8 and var37", var8.equals(var37) ? var8.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var8
//     assertTrue("Contract failed: equals-hashcode on var37 and var8", var37.equals(var8) ? var37.hashCode() == var8.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var12 and var41
//     assertTrue("Contract failed: equals-hashcode on var12 and var41", var12.equals(var41) ? var12.hashCode() == var41.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var41 and var12
//     assertTrue("Contract failed: equals-hashcode on var41 and var12", var41.equals(var12) ? var41.hashCode() == var12.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var42
//     assertTrue("Contract failed: equals-hashcode on var13 and var42", var13.equals(var42) ? var13.hashCode() == var42.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var42 and var13
//     assertTrue("Contract failed: equals-hashcode on var42 and var13", var42.equals(var13) ? var42.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var18 and var47
//     assertTrue("Contract failed: equals-hashcode on var18 and var47", var18.equals(var47) ? var18.hashCode() == var47.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var18
//     assertTrue("Contract failed: equals-hashcode on var47 and var18", var47.equals(var18) ? var47.hashCode() == var18.hashCode() : true);
// 
//   }

  public void test214() {}
//   public void test214() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     java.awt.Stroke var5 = var1.getItemStroke(0, 0);
//     boolean var7 = var1.isSeriesItemLabelsVisible(15);
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var12 = var9.getLegendItem((-1), 100);
//     var9.setBaseShapesFilled(false);
//     java.awt.Paint var16 = var9.getSeriesOutlinePaint((-1));
//     java.awt.Paint var18 = var9.lookupSeriesOutlinePaint(0);
//     var8.setLabelPaint(var18);
//     boolean var20 = var8.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var23 = var22.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var24 = var22.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var25 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var27 = var25.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var30 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var33 = var30.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var34 = null;
//     org.jfree.chart.plot.RingPlot var35 = new org.jfree.chart.plot.RingPlot(var34);
//     org.jfree.chart.plot.Plot var36 = var35.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var37 = null;
//     var35.axisChanged(var37);
//     org.jfree.chart.JFreeChart var40 = new org.jfree.chart.JFreeChart("hi!", var33, (org.jfree.chart.plot.Plot)var35, true);
//     boolean var41 = var25.equals((java.lang.Object)var33);
//     var25.validateObject();
//     org.jfree.data.Range var43 = var22.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
//     org.jfree.data.general.DatasetChangeEvent var44 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var20, (org.jfree.data.general.Dataset)var25);
//     org.jfree.data.Range var45 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
//     org.jfree.chart.plot.XYPlot var46 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var48 = new org.jfree.chart.axis.NumberAxis3D("");
//     var48.configure();
//     org.jfree.chart.util.RectangleInsets var50 = var48.getLabelInsets();
//     var46.setAxisOffset(var50);
//     org.jfree.chart.plot.CategoryMarker var53 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var54 = var53.getOutlineStroke();
//     var46.addDomainMarker((org.jfree.chart.plot.Marker)var53);
//     var25.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var46);
//     org.jfree.data.Range var57 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var60 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var63 = var60.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var64 = null;
//     org.jfree.chart.plot.RingPlot var65 = new org.jfree.chart.plot.RingPlot(var64);
//     org.jfree.chart.plot.Plot var66 = var65.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var67 = null;
//     var65.axisChanged(var67);
//     org.jfree.chart.JFreeChart var70 = new org.jfree.chart.JFreeChart("hi!", var63, (org.jfree.chart.plot.Plot)var65, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var71 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var74 = var71.getLegendItem((-1), 100);
//     var71.setBaseShapesFilled(false);
//     java.awt.Paint var78 = var71.getSeriesOutlinePaint((-1));
//     boolean var79 = var70.equals((java.lang.Object)var71);
//     org.jfree.chart.title.TextTitle var80 = var70.getTitle();
//     org.jfree.chart.util.HorizontalAlignment var81 = var80.getTextAlignment();
//     var80.setText("hi!");
//     java.lang.String var84 = var80.getText();
//     java.awt.Font var85 = var80.getFont();
//     var1.setBaseItemLabelFont(var85);
//     
//     // Checks the contract:  equals-hashcode on var35 and var65
//     assertTrue("Contract failed: equals-hashcode on var35 and var65", var35.equals(var65) ? var35.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var35
//     assertTrue("Contract failed: equals-hashcode on var65 and var35", var65.equals(var35) ? var65.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var36 and var66
//     assertTrue("Contract failed: equals-hashcode on var36 and var66", var36.equals(var66) ? var36.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var36
//     assertTrue("Contract failed: equals-hashcode on var66 and var36", var66.equals(var36) ? var66.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var40 and var70
//     assertTrue("Contract failed: equals-hashcode on var40 and var70", var40.equals(var70) ? var40.hashCode() == var70.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var70 and var40
//     assertTrue("Contract failed: equals-hashcode on var70 and var40", var70.equals(var40) ? var70.hashCode() == var40.hashCode() : true);
// 
//   }

  public void test215() {}
//   public void test215() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var4 = var0.getBaseLinesVisible();
//     java.lang.Boolean var6 = var0.getSeriesVisibleInLegend(10);
//     var0.setBaseSeriesVisibleInLegend(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var11 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var12 = var11.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var13 = var11.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var14 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var16 = var14.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var19 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var22 = var19.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var23 = null;
//     org.jfree.chart.plot.RingPlot var24 = new org.jfree.chart.plot.RingPlot(var23);
//     org.jfree.chart.plot.Plot var25 = var24.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var26 = null;
//     var24.axisChanged(var26);
//     org.jfree.chart.JFreeChart var29 = new org.jfree.chart.JFreeChart("hi!", var22, (org.jfree.chart.plot.Plot)var24, true);
//     boolean var30 = var14.equals((java.lang.Object)var22);
//     var14.validateObject();
//     org.jfree.data.Range var32 = var11.findRangeBounds((org.jfree.data.category.CategoryDataset)var14);
//     java.awt.Graphics2D var33 = null;
//     org.jfree.data.category.CategoryDataset var34 = null;
//     org.jfree.chart.axis.CategoryAxis var36 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var36.setUpperMargin(0.0d);
//     int var39 = var36.getMaximumCategoryLabelLines();
//     java.lang.Object var40 = var36.clone();
//     org.jfree.chart.axis.DateAxis var41 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var42 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var45 = var42.getLegendItem((-1), 100);
//     var42.setBaseShapesFilled(false);
//     java.awt.Paint var49 = var42.getSeriesOutlinePaint((-1));
//     java.awt.Paint var51 = var42.lookupSeriesOutlinePaint(0);
//     var41.setLabelPaint(var51);
//     double var53 = var41.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var54 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var57 = var54.getLegendItem(2, 0);
//     double var58 = var54.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var61 = var54.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var62 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var65 = var62.getLegendItem((-1), 100);
//     var62.setBaseShapesFilled(false);
//     java.awt.Paint var70 = var62.getItemOutlinePaint(10, 1);
//     var54.setErrorIndicatorPaint(var70);
//     org.jfree.chart.plot.CategoryPlot var72 = new org.jfree.chart.plot.CategoryPlot(var34, var36, (org.jfree.chart.axis.ValueAxis)var41, (org.jfree.chart.renderer.category.CategoryItemRenderer)var54);
//     var72.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var76 = var72.getDomainAxis(0);
//     var72.setDrawSharedDomainAxis(true);
//     var72.zoom(3.0d);
//     org.jfree.chart.axis.NumberAxis var81 = new org.jfree.chart.axis.NumberAxis();
//     org.jfree.chart.plot.CategoryMarker var83 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var84 = var83.getLabelPaint();
//     org.jfree.chart.text.TextAnchor var85 = var83.getLabelTextAnchor();
//     java.awt.geom.Rectangle2D var86 = null;
//     var11.drawRangeMarker(var33, var72, (org.jfree.chart.axis.ValueAxis)var81, (org.jfree.chart.plot.Marker)var83, var86);
//     java.awt.Paint var88 = var72.getRangeCrosshairPaint();
//     var0.setSeriesFillPaint(15, var88, true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var58 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var84);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var85);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var88);
// 
//   }

  public void test216() {}
//   public void test216() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.text.G2TextMeasurer var1 = new org.jfree.chart.text.G2TextMeasurer(var0);
//     float var5 = var1.getStringWidth("", (-1), 10);
// 
//   }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    org.jfree.chart.text.TextBlock var0 = new org.jfree.chart.text.TextBlock();
    java.awt.Graphics2D var1 = null;
    org.jfree.chart.text.TextBlockAnchor var4 = null;
    var0.draw(var1, 0.0f, (-1.0f), var4);

  }

  public void test218() {}
//   public void test218() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }
// 
// 
//     org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
//     double var1 = var0.getLimit();
//     double var2 = var0.getLimit();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var3 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var5 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var3, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     var3.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var8);
//     java.lang.Comparable var10 = null;
//     java.lang.Number var12 = var3.getMeanValue(var10, (java.lang.Comparable)100.0f);
//     var0.setDataset((org.jfree.data.category.CategoryDataset)var3);
//     org.jfree.data.general.DatasetGroup var14 = var3.getGroup();
//     double var16 = var3.getRangeLowerBound(true);
//     org.jfree.chart.plot.XYPlot var17 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var19 = new org.jfree.chart.axis.NumberAxis3D("");
//     var19.configure();
//     org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
//     var17.setAxisOffset(var21);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var24 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var25 = var24.getEndType();
//     java.awt.Stroke var28 = var24.getItemStroke(0, 0);
//     var17.setRangeZeroBaselineStroke(var28);
//     org.jfree.chart.util.Layer var30 = null;
//     java.util.Collection var31 = var17.getDomainMarkers(var30);
//     var17.setForegroundAlpha(100.0f);
//     boolean var34 = var3.hasListener((java.util.EventListener)var17);
//     org.jfree.chart.axis.AxisSpace var35 = var17.getFixedDomainAxisSpace();
//     org.jfree.chart.entity.EntityCollection var38 = null;
//     org.jfree.chart.ChartRenderingInfo var39 = new org.jfree.chart.ChartRenderingInfo(var38);
//     org.jfree.chart.plot.PlotRenderingInfo var40 = var39.getPlotInfo();
//     org.jfree.chart.plot.PlotRenderingInfo var41 = var39.getPlotInfo();
//     org.jfree.chart.plot.XYPlot var42 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var44 = new org.jfree.chart.axis.NumberAxis3D("");
//     var44.configure();
//     org.jfree.chart.util.RectangleInsets var46 = var44.getLabelInsets();
//     var42.setAxisOffset(var46);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var49 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var50 = var49.getEndType();
//     java.awt.Stroke var53 = var49.getItemStroke(0, 0);
//     var42.setRangeZeroBaselineStroke(var53);
//     org.jfree.chart.util.Layer var55 = null;
//     java.util.Collection var56 = var42.getDomainMarkers(var55);
//     org.jfree.chart.util.RectangleInsets var57 = var42.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var59 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var60 = var59.getEndType();
//     java.awt.Stroke var63 = var59.getItemStroke(0, 0);
//     var42.setDomainZeroBaselineStroke(var63);
//     org.jfree.chart.util.RectangleEdge var66 = var42.getDomainAxisEdge(1);
//     org.jfree.data.xy.XYDataset var67 = null;
//     var42.setDataset(var67);
//     var42.setRangeCrosshairValue(1.0d);
//     org.jfree.chart.axis.NumberAxis3D var72 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var73 = var72.isTickMarksVisible();
//     org.jfree.chart.axis.NumberTickUnit var74 = var72.getTickUnit();
//     int var75 = var42.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var72);
//     java.awt.geom.Point2D var76 = var42.getQuadrantOrigin();
//     var17.zoomDomainAxes(0.0d, 50.5d, var41, var76);
//     boolean var78 = var17.isRangeCrosshairVisible();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var73 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var75 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var78 == false);
// 
//   }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
//     java.awt.Stroke var11 = var7.getItemStroke(0, 0);
//     var0.setRangeZeroBaselineStroke(var11);
//     boolean var13 = var0.isRangeCrosshairVisible();
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     org.jfree.data.KeyToGroupMap var16 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var17 = var16.getGroups();
//     java.util.List var18 = var16.getGroups();
//     var0.drawRangeTickBands(var14, var15, var18);
//     var0.clearAnnotations();
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var24 = new org.jfree.chart.axis.NumberAxis3D("");
//     var24.configure();
//     org.jfree.chart.util.RectangleInsets var26 = var24.getLabelInsets();
//     var22.setAxisOffset(var26);
//     org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var32 = var29.getLegendItem((-1), 100);
//     var29.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var29.getSeriesOutlinePaint((-1));
//     java.awt.Paint var38 = var29.lookupSeriesOutlinePaint(0);
//     var28.setLabelPaint(var38);
//     boolean var40 = var28.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var42 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var43 = var42.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var44 = var42.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var45 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var47 = var45.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var50 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var53 = var50.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var54 = null;
//     org.jfree.chart.plot.RingPlot var55 = new org.jfree.chart.plot.RingPlot(var54);
//     org.jfree.chart.plot.Plot var56 = var55.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var57 = null;
//     var55.axisChanged(var57);
//     org.jfree.chart.JFreeChart var60 = new org.jfree.chart.JFreeChart("hi!", var53, (org.jfree.chart.plot.Plot)var55, true);
//     boolean var61 = var45.equals((java.lang.Object)var53);
//     var45.validateObject();
//     org.jfree.data.Range var63 = var42.findRangeBounds((org.jfree.data.category.CategoryDataset)var45);
//     org.jfree.data.general.DatasetChangeEvent var64 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var40, (org.jfree.data.general.Dataset)var45);
//     var22.datasetChanged(var64);
//     org.jfree.chart.plot.XYPlot var66 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.LegendItemCollection var67 = new org.jfree.chart.LegendItemCollection();
//     int var68 = var67.getItemCount();
//     var66.setFixedLegendItems(var67);
//     org.jfree.chart.axis.AxisLocation var71 = var66.getRangeAxisLocation(10);
//     var22.setDomainAxisLocation(var71);
//     var0.setDomainAxisLocation(15, var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var61 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
// 
//   }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    java.awt.Color var1 = java.awt.Color.getColor("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test221() {}
//   public void test221() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }
// 
// 
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var0, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var3 = null;
//     org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
//     org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
//     var0.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var5);
//     java.lang.Number var9 = var0.getMaxRegularValue((java.lang.Comparable)100.0f, (java.lang.Comparable)10);
//     org.jfree.chart.axis.CategoryAxis var11 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     java.lang.String var13 = var11.getCategoryLabelToolTip((java.lang.Comparable)10);
//     org.jfree.chart.plot.CategoryMarker var16 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var17 = var16.getLabelPaint();
//     java.lang.Comparable var18 = var16.getKey();
//     java.lang.String var19 = var16.getLabel();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     var16.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var27);
//     java.awt.Paint var34 = var16.getPaint();
//     var11.setTickLabelPaint((java.lang.Comparable)100.0d, var34);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var37 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var40 = var37.getLegendItem((-1), 100);
//     var37.setBaseShapesFilled(false);
//     java.awt.Paint var44 = var37.getSeriesOutlinePaint((-1));
//     java.awt.Paint var46 = var37.lookupSeriesOutlinePaint(0);
//     var36.setLabelPaint(var46);
//     boolean var48 = var36.isNegativeArrowVisible();
//     org.jfree.data.Range var51 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var52 = var51.toString();
//     org.jfree.data.Range var54 = org.jfree.data.Range.shift(var51, 0.0d);
//     var36.setRange(var54);
//     org.jfree.data.time.Month var56 = new org.jfree.data.time.Month();
//     long var57 = var56.getSerialIndex();
//     java.util.Date var58 = var56.getEnd();
//     org.jfree.data.time.Month var59 = new org.jfree.data.time.Month();
//     long var60 = var59.getSerialIndex();
//     java.util.Date var61 = var59.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var62 = new org.jfree.data.time.SimpleTimePeriod(var58, var61);
//     var36.setMaximumDate(var58);
//     org.jfree.chart.axis.NumberAxis3D var65 = new org.jfree.chart.axis.NumberAxis3D("");
//     java.awt.Paint var66 = var65.getTickLabelPaint();
//     org.jfree.chart.axis.NumberAxis3D var68 = new org.jfree.chart.axis.NumberAxis3D("");
//     org.jfree.chart.axis.NumberAxis3D var70 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var71 = var70.isTickMarksVisible();
//     org.jfree.data.Range var74 = new org.jfree.data.Range(1.0d, 100.0d);
//     var70.setRangeWithMargins(var74, false, false);
//     var68.setRangeWithMargins(var74);
//     var65.setDefaultAutoRange(var74);
//     org.jfree.chart.block.RectangleConstraint var81 = new org.jfree.chart.block.RectangleConstraint(var74, 10.0d);
//     var36.setRangeWithMargins(var74);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var83 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var86 = var83.getLegendItem((-1), 100);
//     var83.setBaseShapesFilled(false);
//     java.awt.Paint var91 = var83.getItemOutlinePaint(10, 1);
//     java.lang.Object var92 = var83.clone();
//     var83.setSeriesShapesVisible(1, false);
//     var83.setDrawOutlines(false);
//     org.jfree.chart.plot.CategoryPlot var98 = new org.jfree.chart.plot.CategoryPlot((org.jfree.data.category.CategoryDataset)var0, var11, (org.jfree.chart.axis.ValueAxis)var36, (org.jfree.chart.renderer.category.CategoryItemRenderer)var83);
//     
//     // Checks the contract:  equals-hashcode on var4 and var27
//     assertTrue("Contract failed: equals-hashcode on var4 and var27", var4.equals(var27) ? var4.hashCode() == var27.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var27 and var4
//     assertTrue("Contract failed: equals-hashcode on var27 and var4", var27.equals(var4) ? var27.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var5 and var28
//     assertTrue("Contract failed: equals-hashcode on var5 and var28", var5.equals(var28) ? var5.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var5
//     assertTrue("Contract failed: equals-hashcode on var28 and var5", var28.equals(var5) ? var28.hashCode() == var5.hashCode() : true);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var37 and var83.", var37.equals(var83) == var83.equals(var37));
// 
//   }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeValue(5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test223() {}
//   public void test223() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.LegendItemCollection var1 = new org.jfree.chart.LegendItemCollection();
//     int var2 = var1.getItemCount();
//     var0.setFixedLegendItems(var1);
//     org.jfree.chart.axis.AxisLocation var5 = var0.getRangeAxisLocation(10);
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)1L);
//     java.lang.Object var8 = var7.clone();
//     java.awt.Paint var9 = var7.getOutlinePaint();
//     var0.setDomainGridlinePaint(var9);
//     var0.setRangeCrosshairLockedOnData(true);
//     org.jfree.chart.plot.XYPlot var14 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var16 = new org.jfree.chart.axis.NumberAxis3D("");
//     var16.configure();
//     org.jfree.chart.util.RectangleInsets var18 = var16.getLabelInsets();
//     var14.setAxisOffset(var18);
//     org.jfree.chart.axis.DateAxis var20 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var24 = var21.getLegendItem((-1), 100);
//     var21.setBaseShapesFilled(false);
//     java.awt.Paint var28 = var21.getSeriesOutlinePaint((-1));
//     java.awt.Paint var30 = var21.lookupSeriesOutlinePaint(0);
//     var20.setLabelPaint(var30);
//     boolean var32 = var20.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var34 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var35 = var34.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var36 = var34.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var37 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var39 = var37.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var42 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var45 = var42.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var46 = null;
//     org.jfree.chart.plot.RingPlot var47 = new org.jfree.chart.plot.RingPlot(var46);
//     org.jfree.chart.plot.Plot var48 = var47.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var49 = null;
//     var47.axisChanged(var49);
//     org.jfree.chart.JFreeChart var52 = new org.jfree.chart.JFreeChart("hi!", var45, (org.jfree.chart.plot.Plot)var47, true);
//     boolean var53 = var37.equals((java.lang.Object)var45);
//     var37.validateObject();
//     org.jfree.data.Range var55 = var34.findRangeBounds((org.jfree.data.category.CategoryDataset)var37);
//     org.jfree.data.general.DatasetChangeEvent var56 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var32, (org.jfree.data.general.Dataset)var37);
//     var14.datasetChanged(var56);
//     org.jfree.chart.plot.XYPlot var58 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.LegendItemCollection var59 = new org.jfree.chart.LegendItemCollection();
//     int var60 = var59.getItemCount();
//     var58.setFixedLegendItems(var59);
//     org.jfree.chart.axis.AxisLocation var63 = var58.getRangeAxisLocation(10);
//     var14.setDomainAxisLocation(var63);
//     org.jfree.chart.axis.AxisLocation var65 = var63.getOpposite();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.setDomainAxisLocation((-16777206), var63, true);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
// 
//   }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
    org.jfree.chart.plot.DatasetRenderingOrder var11 = var0.getDatasetRenderingOrder();
    var0.setDomainCrosshairValue(1.0d, true);
    java.awt.Paint var15 = var0.getDomainGridlinePaint();
    org.jfree.chart.util.RectangleEdge var17 = var0.getDomainAxisEdge(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.ValueAxis var19 = var0.getDomainAxisForDataset((-16777206));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    java.awt.Paint var2 = var1.getBaseSectionPaint();
    double var3 = var1.getMaximumLabelWidth();
    org.jfree.chart.event.PlotChangeEvent var4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var1);
    var1.setMinimumArcAngleToDraw(100.0d);
    var1.setMaximumLabelWidth(2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.2d);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    java.lang.Boolean var6 = var0.getSeriesVisibleInLegend(10);
    var0.setBaseSeriesVisibleInLegend(false);
    org.jfree.data.general.PieDataset var10 = null;
    org.jfree.chart.plot.RingPlot var11 = new org.jfree.chart.plot.RingPlot(var10);
    org.jfree.chart.plot.Plot var12 = var11.getRootPlot();
    org.jfree.chart.JFreeChart var13 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var11);
    boolean var14 = var13.getAntiAlias();
    java.awt.Stroke var15 = var13.getBorderStroke();
    var0.setSeriesOutlineStroke(15, var15, true);
    var0.setSeriesItemLabelsVisible(0, (java.lang.Boolean)true, false);
    org.jfree.chart.LegendItemCollection var22 = var0.getLegendItems();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var24 = var22.get(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var3 = var1.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var4 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var6 = var4.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var9 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var12 = var9.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var13 = null;
//     org.jfree.chart.plot.RingPlot var14 = new org.jfree.chart.plot.RingPlot(var13);
//     org.jfree.chart.plot.Plot var15 = var14.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var16 = null;
//     var14.axisChanged(var16);
//     org.jfree.chart.JFreeChart var19 = new org.jfree.chart.JFreeChart("hi!", var12, (org.jfree.chart.plot.Plot)var14, true);
//     boolean var20 = var4.equals((java.lang.Object)var12);
//     var4.validateObject();
//     org.jfree.data.Range var22 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var4);
//     java.awt.Graphics2D var23 = null;
//     org.jfree.data.category.CategoryDataset var24 = null;
//     org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var26.setUpperMargin(0.0d);
//     int var29 = var26.getMaximumCategoryLabelLines();
//     java.lang.Object var30 = var26.clone();
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var35 = var32.getLegendItem((-1), 100);
//     var32.setBaseShapesFilled(false);
//     java.awt.Paint var39 = var32.getSeriesOutlinePaint((-1));
//     java.awt.Paint var41 = var32.lookupSeriesOutlinePaint(0);
//     var31.setLabelPaint(var41);
//     double var43 = var31.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var44 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var47 = var44.getLegendItem(2, 0);
//     double var48 = var44.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var51 = var44.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var52 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var55 = var52.getLegendItem((-1), 100);
//     var52.setBaseShapesFilled(false);
//     java.awt.Paint var60 = var52.getItemOutlinePaint(10, 1);
//     var44.setErrorIndicatorPaint(var60);
//     org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot(var24, var26, (org.jfree.chart.axis.ValueAxis)var31, (org.jfree.chart.renderer.category.CategoryItemRenderer)var44);
//     var62.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var66 = var62.getDomainAxis(0);
//     var62.setDrawSharedDomainAxis(true);
//     var62.zoom(3.0d);
//     org.jfree.chart.axis.NumberAxis var71 = new org.jfree.chart.axis.NumberAxis();
//     org.jfree.chart.plot.CategoryMarker var73 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var74 = var73.getLabelPaint();
//     org.jfree.chart.text.TextAnchor var75 = var73.getLabelTextAnchor();
//     java.awt.geom.Rectangle2D var76 = null;
//     var1.drawRangeMarker(var23, var62, (org.jfree.chart.axis.ValueAxis)var71, (org.jfree.chart.plot.Marker)var73, var76);
//     boolean var78 = var73.getDrawAsLine();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var78 == false);
// 
//   }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }
// 
// 
//     org.jfree.chart.block.FlowArrangement var0 = new org.jfree.chart.block.FlowArrangement();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var3 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var1, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var4 = null;
//     org.jfree.chart.plot.RingPlot var5 = new org.jfree.chart.plot.RingPlot(var4);
//     org.jfree.chart.plot.Plot var6 = var5.getRootPlot();
//     var1.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var6);
//     org.jfree.data.KeyToGroupMap var16 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var17 = var16.getGroups();
//     org.jfree.data.statistics.BoxAndWhiskerItem var18 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var17);
//     var1.add(var18, (java.lang.Comparable)0.0f, (java.lang.Comparable)"hi!");
//     org.jfree.chart.title.LegendItemBlockContainer var23 = new org.jfree.chart.title.LegendItemBlockContainer((org.jfree.chart.block.Arrangement)var0, (org.jfree.data.general.Dataset)var1, (java.lang.Comparable)false);
//     var23.setToolTipText("AreaRendererEndType.TAPER");
//     org.jfree.data.general.Dataset var26 = var23.getDataset();
//     org.jfree.data.general.PieDataset var27 = null;
//     org.jfree.chart.plot.RingPlot var28 = new org.jfree.chart.plot.RingPlot(var27);
//     org.jfree.chart.plot.Plot var29 = var28.getRootPlot();
//     org.jfree.chart.JFreeChart var30 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var28);
//     boolean var31 = var30.getAntiAlias();
//     var30.setAntiAlias(true);
//     org.jfree.chart.event.ChartChangeEvent var34 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var26, var30);
//     
//     // Checks the contract:  equals-hashcode on var5 and var28
//     assertTrue("Contract failed: equals-hashcode on var5 and var28", var5.equals(var28) ? var5.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var5
//     assertTrue("Contract failed: equals-hashcode on var28 and var5", var28.equals(var5) ? var28.hashCode() == var5.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var6 and var29
//     assertTrue("Contract failed: equals-hashcode on var6 and var29", var6.equals(var29) ? var6.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var6
//     assertTrue("Contract failed: equals-hashcode on var29 and var6", var29.equals(var6) ? var29.hashCode() == var6.hashCode() : true);
// 
//   }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    org.jfree.chart.renderer.category.AreaRenderer var0 = new org.jfree.chart.renderer.category.AreaRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var1 = var0.getBaseURLGenerator();
    var0.setSeriesVisible(0, (java.lang.Boolean)true, false);
    java.awt.Paint var8 = var0.getItemLabelPaint(4, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.plot.MultiplePiePlot var38 = new org.jfree.chart.plot.MultiplePiePlot((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.LegendItemCollection var39 = var38.getLegendItems();
//     var38.setAggregatedItemsKey((java.lang.Comparable)(-1.0f));
//     org.jfree.chart.util.RectangleInsets var42 = var38.getInsets();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
// 
//   }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    var1.setBaseShapesFilled(false);
    java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
    var1.setBaseNegativeItemLabelPosition(var12);
    var0.setPositiveItemLabelPositionFallback(var12);
    int var15 = var0.getRowCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }
// 
// 
//     org.jfree.chart.block.CenterArrangement var0 = new org.jfree.chart.block.CenterArrangement();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, Double.NaN, Double.NaN);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var13 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var15 = var13.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var18 = new org.jfree.chart.entity.CategoryItemEntity(var3, "hi!", "", (org.jfree.data.category.CategoryDataset)var13, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var22 = var19.getLegendItem((-1), 100);
//     var19.setBaseShapesFilled(false);
//     java.awt.Paint var26 = var19.getSeriesOutlinePaint((-1));
//     java.awt.Paint var28 = var19.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var29 = new org.jfree.chart.title.LegendGraphic(var3, var28);
//     org.jfree.data.general.PieDataset var30 = null;
//     org.jfree.chart.plot.RingPlot var31 = new org.jfree.chart.plot.RingPlot(var30);
//     org.jfree.chart.plot.Plot var32 = var31.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var33 = var31.getInsets();
//     double var35 = var33.calculateBottomOutset(100.0d);
//     var29.setPadding(var33);
//     org.jfree.chart.util.RectangleInsets var37 = var29.getMargin();
//     var29.setShapeFilled(false);
//     org.jfree.data.resources.DataPackageResources var40 = new org.jfree.data.resources.DataPackageResources();
//     var0.add((org.jfree.chart.block.Block)var29, (java.lang.Object)var40);
//     var29.setShapeFilled(false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == 4.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }


    org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
    javax.swing.Icon var1 = var0.getMaxIcon();
    org.jfree.chart.renderer.category.MinMaxCategoryRenderer var2 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
    javax.swing.Icon var3 = var2.getMaxIcon();
    var0.setMinIcon(var3);
    boolean var5 = var0.isDrawLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var3 = var1.getBaseNegativeItemLabelPosition();
//     var1.setSeriesVisible(100, (java.lang.Boolean)false, true);
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var12 = var9.getLegendItem((-1), 100);
//     var9.setBaseShapesFilled(false);
//     java.awt.Paint var16 = var9.getSeriesOutlinePaint((-1));
//     java.awt.Paint var18 = var9.lookupSeriesOutlinePaint(0);
//     var8.setLabelPaint(var18);
//     boolean var20 = var8.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var23 = var22.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var24 = var22.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var25 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var27 = var25.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var30 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var33 = var30.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var34 = null;
//     org.jfree.chart.plot.RingPlot var35 = new org.jfree.chart.plot.RingPlot(var34);
//     org.jfree.chart.plot.Plot var36 = var35.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var37 = null;
//     var35.axisChanged(var37);
//     org.jfree.chart.JFreeChart var40 = new org.jfree.chart.JFreeChart("hi!", var33, (org.jfree.chart.plot.Plot)var35, true);
//     boolean var41 = var25.equals((java.lang.Object)var33);
//     var25.validateObject();
//     org.jfree.data.Range var43 = var22.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
//     org.jfree.data.general.DatasetChangeEvent var44 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var20, (org.jfree.data.general.Dataset)var25);
//     org.jfree.data.Range var45 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
//     org.jfree.chart.plot.XYPlot var46 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var48 = new org.jfree.chart.axis.NumberAxis3D("");
//     var48.configure();
//     org.jfree.chart.util.RectangleInsets var50 = var48.getLabelInsets();
//     var46.setAxisOffset(var50);
//     org.jfree.chart.plot.CategoryMarker var53 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var54 = var53.getOutlineStroke();
//     var46.addDomainMarker((org.jfree.chart.plot.Marker)var53);
//     var25.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var46);
//     org.jfree.data.Range var57 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var22 and var1.", var22.equals(var1) == var1.equals(var22));
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var30 and var1.", var30.equals(var1) == var1.equals(var30));
//     
//     // Checks the contract:  equals-hashcode on var3 and var24
//     assertTrue("Contract failed: equals-hashcode on var3 and var24", var3.equals(var24) ? var3.hashCode() == var24.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var24 and var3
//     assertTrue("Contract failed: equals-hashcode on var24 and var3", var24.equals(var3) ? var24.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }


    org.jfree.data.KeyToGroupMap var8 = new org.jfree.data.KeyToGroupMap();
    java.util.List var9 = var8.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var10 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var9);
    java.lang.Number var11 = var10.getMedian();
    java.lang.String var12 = var10.toString();
    org.jfree.chart.axis.CategoryAxis var14 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var14.setUpperMargin(0.0d);
    int var17 = var14.getMaximumCategoryLabelLines();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var22 = var19.getLegendItem((-1), 100);
    var19.setBaseShapesFilled(false);
    java.awt.Paint var26 = var19.getSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var29 = var28.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var30 = var28.getBaseNegativeItemLabelPosition();
    var19.setBaseNegativeItemLabelPosition(var30);
    org.jfree.data.general.PieDataset var32 = null;
    org.jfree.chart.plot.RingPlot var33 = new org.jfree.chart.plot.RingPlot(var32);
    org.jfree.chart.plot.Plot var34 = var33.getRootPlot();
    org.jfree.chart.util.RectangleInsets var35 = var33.getInsets();
    java.awt.Stroke var36 = var33.getBaseSectionOutlineStroke();
    org.jfree.chart.renderer.category.StackedAreaRenderer var38 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var41 = var38.getItemLabelFont((-1), 0);
    var33.setNoDataMessageFont(var41);
    var19.setBaseItemLabelFont(var41);
    var14.setTickLabelFont((java.lang.Comparable)(short)10, var41);
    boolean var45 = var10.equals((java.lang.Object)var14);
    java.lang.Number var46 = var10.getQ1();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 1.0d+ "'", var11.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + 100.0f+ "'", var46.equals(100.0f));

  }

  public void test236() {}
//   public void test236() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
//     var0.setBaseShapesFilled(false);
//     java.awt.Paint var7 = var0.getSeriesOutlinePaint((-1));
//     org.jfree.chart.renderer.category.StackedAreaRenderer var9 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var10 = var9.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var11 = var9.getBaseNegativeItemLabelPosition();
//     var0.setBaseNegativeItemLabelPosition(var11);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     var0.setBaseNegativeItemLabelPosition(var16);
//     
//     // Checks the contract:  equals-hashcode on var11 and var16
//     assertTrue("Contract failed: equals-hashcode on var11 and var16", var11.equals(var16) ? var11.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var11
//     assertTrue("Contract failed: equals-hashcode on var16 and var11", var16.equals(var11) ? var16.hashCode() == var11.hashCode() : true);
// 
//   }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var2.setUpperMargin(0.0d);
//     int var5 = var2.getMaximumCategoryLabelLines();
//     java.lang.Object var6 = var2.clone();
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
//     var8.setBaseShapesFilled(false);
//     java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
//     java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
//     var7.setLabelPaint(var17);
//     double var19 = var7.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
//     double var24 = var20.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
//     var20.setErrorIndicatorPaint(var36);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
//     var38.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxisForDataset(1);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var43 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var46 = var43.getLegendItem((-1), 100);
//     int var47 = var38.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var43);
//     org.jfree.chart.renderer.category.MinMaxCategoryRenderer var49 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var51 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var52 = var51.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var53 = var51.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var54 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var56 = var54.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var59 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var62 = var59.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var63 = null;
//     org.jfree.chart.plot.RingPlot var64 = new org.jfree.chart.plot.RingPlot(var63);
//     org.jfree.chart.plot.Plot var65 = var64.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var66 = null;
//     var64.axisChanged(var66);
//     org.jfree.chart.JFreeChart var69 = new org.jfree.chart.JFreeChart("hi!", var62, (org.jfree.chart.plot.Plot)var64, true);
//     boolean var70 = var54.equals((java.lang.Object)var62);
//     var54.validateObject();
//     org.jfree.data.Range var72 = var51.findRangeBounds((org.jfree.data.category.CategoryDataset)var54);
//     java.awt.Stroke var74 = var51.lookupSeriesStroke(10);
//     var49.setGroupStroke(var74);
//     var43.setSeriesOutlineStroke(15, var74, false);
//     boolean var78 = var43.getBaseLinesVisible();
//     boolean var81 = var43.getItemLineVisible((-16777206), 10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var56 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var70 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var78 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var81 == true);
// 
//   }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }


    boolean var0 = org.jfree.chart.util.ObjectUtilities.isJDK14();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0 == true);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.data.KeyToGroupMap var1 = new org.jfree.data.KeyToGroupMap();
    java.util.List var2 = var1.getGroups();
    org.jfree.data.Range var3 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var0, var1);
    org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis();
    double var5 = var4.getLabelAngle();
    org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var10 = var7.getLegendItem((-1), 100);
    var7.setBaseShapesFilled(false);
    java.awt.Paint var14 = var7.getSeriesOutlinePaint((-1));
    java.awt.Paint var16 = var7.lookupSeriesOutlinePaint(0);
    var6.setLabelPaint(var16);
    org.jfree.chart.axis.DateTickMarkPosition var18 = var6.getTickMarkPosition();
    var4.setTickMarkPosition(var18);
    org.jfree.chart.renderer.category.StackedAreaRenderer var21 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var22 = var21.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var23 = var21.getBaseNegativeItemLabelPosition();
    boolean var24 = var4.equals((java.lang.Object)var23);
    boolean var25 = var1.equals((java.lang.Object)var4);
    java.lang.Comparable var26 = null;
    java.lang.Comparable var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.mapKeyToGroup(var26, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     int var13 = var12.getBackgroundImageAlignment();
//     org.jfree.chart.title.LegendTitle var15 = var12.getLegend(0);
//     var12.setTitle("AxisLocation.BOTTOM_OR_LEFT");
//     org.jfree.data.general.PieDataset var18 = null;
//     org.jfree.chart.plot.RingPlot var19 = new org.jfree.chart.plot.RingPlot(var18);
//     org.jfree.chart.plot.Plot var20 = var19.getRootPlot();
//     org.jfree.chart.JFreeChart var21 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var19);
//     boolean var22 = var21.getAntiAlias();
//     java.awt.Stroke var23 = var21.getBorderStroke();
//     java.awt.Stroke var24 = var21.getBorderStroke();
//     var12.setBorderStroke(var24);
//     
//     // Checks the contract:  equals-hashcode on var7 and var19
//     assertTrue("Contract failed: equals-hashcode on var7 and var19", var7.equals(var19) ? var7.hashCode() == var19.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var19 and var7
//     assertTrue("Contract failed: equals-hashcode on var19 and var7", var19.equals(var7) ? var19.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var20
//     assertTrue("Contract failed: equals-hashcode on var8 and var20", var8.equals(var20) ? var8.hashCode() == var20.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var8
//     assertTrue("Contract failed: equals-hashcode on var20 and var8", var20.equals(var8) ? var20.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test241() {}
//   public void test241() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var3 = var1.getBaseNegativeItemLabelPosition();
//     org.jfree.chart.labels.ItemLabelPosition var5 = var1.getSeriesNegativeItemLabelPosition((-1));
//     java.awt.Graphics2D var6 = null;
//     org.jfree.data.category.CategoryDataset var7 = null;
//     org.jfree.chart.axis.CategoryAxis var9 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var9.setUpperMargin(0.0d);
//     int var12 = var9.getMaximumCategoryLabelLines();
//     java.lang.Object var13 = var9.clone();
//     org.jfree.chart.axis.DateAxis var14 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var18 = var15.getLegendItem((-1), 100);
//     var15.setBaseShapesFilled(false);
//     java.awt.Paint var22 = var15.getSeriesOutlinePaint((-1));
//     java.awt.Paint var24 = var15.lookupSeriesOutlinePaint(0);
//     var14.setLabelPaint(var24);
//     double var26 = var14.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var27 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var30 = var27.getLegendItem(2, 0);
//     double var31 = var27.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var34 = var27.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var35 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var38 = var35.getLegendItem((-1), 100);
//     var35.setBaseShapesFilled(false);
//     java.awt.Paint var43 = var35.getItemOutlinePaint(10, 1);
//     var27.setErrorIndicatorPaint(var43);
//     org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot(var7, var9, (org.jfree.chart.axis.ValueAxis)var14, (org.jfree.chart.renderer.category.CategoryItemRenderer)var27);
//     var45.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var49 = var45.getDomainAxisForDataset(1);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var53 = var50.getLegendItem((-1), 100);
//     int var54 = var45.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var50);
//     org.jfree.chart.axis.ValueAxis var56 = var45.getRangeAxis(2);
//     java.awt.geom.Rectangle2D var57 = null;
//     var1.drawBackground(var6, var45, var57);
// 
//   }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     double var12 = var0.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var15 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var18 = var15.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var19 = null;
//     org.jfree.chart.plot.RingPlot var20 = new org.jfree.chart.plot.RingPlot(var19);
//     org.jfree.chart.plot.Plot var21 = var20.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var22 = null;
//     var20.axisChanged(var22);
//     org.jfree.chart.JFreeChart var25 = new org.jfree.chart.JFreeChart("hi!", var18, (org.jfree.chart.plot.Plot)var20, true);
//     java.awt.Paint var26 = var20.getBackgroundPaint();
//     java.awt.Paint var27 = var20.getLabelOutlinePaint();
//     var0.setTickMarkPaint(var27);
//     java.text.DateFormat var31 = null;
//     org.jfree.chart.axis.DateTickUnit var32 = new org.jfree.chart.axis.DateTickUnit(2, 1, var31);
//     var0.setTickUnit(var32, false, false);
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     java.util.Date var37 = var36.getMaximumDate();
//     java.lang.String var38 = var32.dateToString(var37);
//     int var39 = var32.getCount();
//     java.lang.String var40 = var32.toString();
//     org.jfree.chart.axis.NumberAxis3D var45 = new org.jfree.chart.axis.NumberAxis3D("");
//     var45.configure();
//     java.lang.Object var47 = var45.clone();
//     java.lang.Number var50 = null;
//     java.util.List var56 = null;
//     org.jfree.data.statistics.BoxAndWhiskerItem var57 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var50, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var56);
//     boolean var58 = var45.equals((java.lang.Object)0);
//     boolean var59 = var45.isAutoRange();
//     java.awt.Font var60 = var45.getLabelFont();
//     org.jfree.chart.plot.CategoryMarker var62 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)1L);
//     java.lang.Object var63 = var62.clone();
//     java.awt.Paint var64 = var62.getOutlinePaint();
//     org.jfree.chart.block.LabelBlock var65 = new org.jfree.chart.block.LabelBlock("Size2D[width=50.5, height=10.0]", var60, var64);
//     org.jfree.chart.plot.RingPlot var66 = new org.jfree.chart.plot.RingPlot();
//     org.jfree.chart.plot.IntervalMarker var69 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
//     double var70 = var69.getEndValue();
//     var69.setStartValue(0.2d);
//     java.awt.Stroke var73 = var69.getStroke();
//     var66.setLabelOutlineStroke(var73);
//     org.jfree.chart.JFreeChart var76 = new org.jfree.chart.JFreeChart("poly", var60, (org.jfree.chart.plot.Plot)var66, false);
//     org.jfree.data.general.PieDataset var77 = null;
//     org.jfree.chart.plot.RingPlot var78 = new org.jfree.chart.plot.RingPlot(var77);
//     java.awt.Paint var79 = var78.getBaseSectionPaint();
//     boolean var80 = var78.isOutlineVisible();
//     java.awt.Color var84 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var85 = null;
//     float[] var86 = var84.getRGBColorComponents(var85);
//     var78.setSectionOutlinePaint((java.lang.Comparable)"", (java.awt.Paint)var84);
//     int var88 = var84.getRed();
//     org.jfree.chart.text.TextFragment var89 = new org.jfree.chart.text.TextFragment("Size2D[width=50.5, height=10.0]", var60, (java.awt.Paint)var84);
//     boolean var90 = var32.equals((java.lang.Object)var89);
//     
//     // Checks the contract:  equals-hashcode on var20 and var66
//     assertTrue("Contract failed: equals-hashcode on var20 and var66", var20.equals(var66) ? var20.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var20
//     assertTrue("Contract failed: equals-hashcode on var66 and var20", var66.equals(var20) ? var66.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test243() {}
//   public void test243() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }
// 
// 
//     org.jfree.chart.block.BorderArrangement var0 = new org.jfree.chart.block.BorderArrangement();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var1 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var2.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var6 = var2.getBaseLinesVisible();
//     java.lang.Boolean var8 = var2.getSeriesVisibleInLegend(10);
//     java.awt.Paint var9 = var2.getBaseItemLabelPaint();
//     java.awt.Color var12 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var13 = null;
//     float[] var14 = var12.getRGBColorComponents(var13);
//     var2.setBaseItemLabelPaint((java.awt.Paint)var12);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var19 = var17.getBaseNegativeItemLabelPosition();
//     var2.setBasePositiveItemLabelPosition(var19, true);
//     var1.setPositiveItemLabelPositionFallback(var19);
//     boolean var23 = var0.equals((java.lang.Object)var1);
//     var0.clear();
//     org.jfree.chart.block.FlowArrangement var25 = new org.jfree.chart.block.FlowArrangement();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var26 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var26, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     var26.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var31);
//     org.jfree.data.KeyToGroupMap var41 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var42 = var41.getGroups();
//     org.jfree.data.statistics.BoxAndWhiskerItem var43 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var42);
//     var26.add(var43, (java.lang.Comparable)0.0f, (java.lang.Comparable)"hi!");
//     org.jfree.chart.title.LegendItemBlockContainer var48 = new org.jfree.chart.title.LegendItemBlockContainer((org.jfree.chart.block.Arrangement)var25, (org.jfree.data.general.Dataset)var26, (java.lang.Comparable)false);
//     java.lang.Comparable var49 = var48.getSeriesKey();
//     double var50 = var48.getContentYOffset();
//     org.jfree.chart.util.RectangleInsets var51 = var48.getPadding();
//     java.awt.Graphics2D var52 = null;
//     org.jfree.chart.block.RectangleConstraint var55 = new org.jfree.chart.block.RectangleConstraint(0.0d, 10.0d);
//     org.jfree.chart.block.RectangleConstraint var58 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
//     org.jfree.chart.util.Size2D var59 = null;
//     org.jfree.chart.util.Size2D var60 = var58.calculateConstrainedSize(var59);
//     org.jfree.chart.util.Size2D var61 = var55.calculateConstrainedSize(var60);
//     org.jfree.chart.util.Size2D var62 = var0.arrange((org.jfree.chart.block.BlockContainer)var48, var52, var55);
//     
//     // Checks the contract:  equals-hashcode on var61 and var62
//     assertTrue("Contract failed: equals-hashcode on var61 and var62", var61.equals(var62) ? var61.hashCode() == var62.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var62 and var61
//     assertTrue("Contract failed: equals-hashcode on var62 and var61", var62.equals(var61) ? var62.hashCode() == var61.hashCode() : true);
// 
//   }

  public void test244() {}
//   public void test244() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
//     java.awt.Stroke var11 = var7.getItemStroke(0, 0);
//     var0.setRangeZeroBaselineStroke(var11);
//     org.jfree.chart.util.Layer var13 = null;
//     java.util.Collection var14 = var0.getDomainMarkers(var13);
//     var0.setForegroundAlpha(100.0f);
//     var0.setRangeCrosshairVisible(true);
//     org.jfree.chart.axis.AxisLocation var20 = null;
//     var0.setDomainAxisLocation(1, var20, false);
//     org.jfree.chart.axis.ValueAxis var24 = var0.getDomainAxis((-457));
//     org.jfree.chart.axis.NumberAxis3D var26 = new org.jfree.chart.axis.NumberAxis3D("");
//     var26.configure();
//     java.lang.Object var28 = var26.clone();
//     java.lang.Number var31 = null;
//     java.util.List var37 = null;
//     org.jfree.data.statistics.BoxAndWhiskerItem var38 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var31, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var37);
//     boolean var39 = var26.equals((java.lang.Object)0);
//     boolean var40 = var26.isAutoRange();
//     java.awt.Font var41 = var26.getLabelFont();
//     org.jfree.chart.axis.ValueAxis[] var42 = new org.jfree.chart.axis.ValueAxis[] { var26};
//     var0.setDomainAxes(var42);
//     org.jfree.chart.plot.XYPlot var44 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var46 = new org.jfree.chart.axis.NumberAxis3D("");
//     var46.configure();
//     org.jfree.chart.util.RectangleInsets var48 = var46.getLabelInsets();
//     var44.setAxisOffset(var48);
//     org.jfree.chart.plot.CategoryMarker var51 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var52 = var51.getOutlineStroke();
//     var44.addDomainMarker((org.jfree.chart.plot.Marker)var51);
//     org.jfree.chart.renderer.xy.XYItemRenderer var54 = var44.getRenderer();
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var59 = var56.getLegendItem((-1), 100);
//     var56.setBaseShapesFilled(false);
//     java.awt.Paint var63 = var56.getSeriesOutlinePaint((-1));
//     java.awt.Paint var65 = var56.lookupSeriesOutlinePaint(0);
//     var55.setLabelPaint(var65);
//     boolean var67 = var55.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var69 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var70 = var69.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var71 = var69.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var72 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var74 = var72.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var77 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var80 = var77.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var81 = null;
//     org.jfree.chart.plot.RingPlot var82 = new org.jfree.chart.plot.RingPlot(var81);
//     org.jfree.chart.plot.Plot var83 = var82.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var84 = null;
//     var82.axisChanged(var84);
//     org.jfree.chart.JFreeChart var87 = new org.jfree.chart.JFreeChart("hi!", var80, (org.jfree.chart.plot.Plot)var82, true);
//     boolean var88 = var72.equals((java.lang.Object)var80);
//     var72.validateObject();
//     org.jfree.data.Range var90 = var69.findRangeBounds((org.jfree.data.category.CategoryDataset)var72);
//     org.jfree.data.general.DatasetChangeEvent var91 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var67, (org.jfree.data.general.Dataset)var72);
//     var44.datasetChanged(var91);
//     var0.datasetChanged(var91);
//     var0.clearDomainMarkers();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var67 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var74 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var88 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var90);
// 
//   }

  public void test245() {}
//   public void test245() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }
// 
// 
//     org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
//     org.jfree.data.KeyToGroupMap var9 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var10 = var9.getGroups();
//     org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var10);
//     java.lang.Comparable var12 = null;
//     var0.setObject((java.lang.Object)var10, var12, (java.lang.Comparable)1);
//     var0.removeColumn(0);
//     org.jfree.data.time.SimpleTimePeriod var19 = new org.jfree.data.time.SimpleTimePeriod((-1L), 10L);
//     var0.removeObject((java.lang.Comparable)var19, (java.lang.Comparable)(byte)10);
//     org.jfree.data.category.CategoryDataset var23 = null;
//     org.jfree.data.KeyToGroupMap var24 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var25 = var24.getGroups();
//     org.jfree.data.Range var26 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var23, var24);
//     org.jfree.data.KeyedObjects2D var27 = new org.jfree.data.KeyedObjects2D();
//     org.jfree.data.time.Month var29 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var30 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var29);
//     var30.setDescription("poly");
//     org.jfree.data.time.Month var33 = new org.jfree.data.time.Month();
//     long var34 = var33.getSerialIndex();
//     java.util.Date var35 = var33.getEnd();
//     var30.setDuration((org.jfree.data.time.TimePeriod)var33);
//     org.jfree.chart.axis.DateAxis var37 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var38 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var41 = var38.getLegendItem((-1), 100);
//     var38.setBaseShapesFilled(false);
//     java.awt.Paint var45 = var38.getSeriesOutlinePaint((-1));
//     java.awt.Paint var47 = var38.lookupSeriesOutlinePaint(0);
//     var37.setLabelPaint(var47);
//     double var49 = var37.getFixedAutoRange();
//     var37.setNegativeArrowVisible(true);
//     java.text.DateFormat var54 = null;
//     org.jfree.chart.axis.DateTickUnit var55 = new org.jfree.chart.axis.DateTickUnit(2, 1, var54);
//     var37.setTickUnit(var55, true, false);
//     org.jfree.data.time.Year var59 = new org.jfree.data.time.Year();
//     var27.setObject((java.lang.Object)var30, (java.lang.Comparable)true, (java.lang.Comparable)var59);
//     java.lang.String var61 = var59.toString();
//     int var62 = var24.getKeyCount((java.lang.Comparable)var59);
//     var0.removeObject((java.lang.Comparable)"Size2D[width=50.5, height=10.0]", (java.lang.Comparable)var59);
//     
//     // Checks the contract:  equals-hashcode on var9 and var24
//     assertTrue("Contract failed: equals-hashcode on var9 and var24", var9.equals(var24) ? var9.hashCode() == var24.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var24 and var9
//     assertTrue("Contract failed: equals-hashcode on var24 and var9", var24.equals(var9) ? var24.hashCode() == var9.hashCode() : true);
// 
//   }

  public void test246() {}
//   public void test246() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }
// 
// 
//     org.jfree.chart.block.BorderArrangement var0 = new org.jfree.chart.block.BorderArrangement();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var1 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var2.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var6 = var2.getBaseLinesVisible();
//     java.lang.Boolean var8 = var2.getSeriesVisibleInLegend(10);
//     java.awt.Paint var9 = var2.getBaseItemLabelPaint();
//     java.awt.Color var12 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var13 = null;
//     float[] var14 = var12.getRGBColorComponents(var13);
//     var2.setBaseItemLabelPaint((java.awt.Paint)var12);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var19 = var17.getBaseNegativeItemLabelPosition();
//     var2.setBasePositiveItemLabelPosition(var19, true);
//     var1.setPositiveItemLabelPositionFallback(var19);
//     boolean var23 = var0.equals((java.lang.Object)var1);
//     java.awt.Shape var26 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     org.jfree.chart.entity.ChartEntity var27 = new org.jfree.chart.entity.ChartEntity(var26);
//     java.awt.Shape var28 = var27.getArea();
//     java.lang.String var29 = var27.getShapeCoords();
//     boolean var30 = var1.equals((java.lang.Object)var29);
//     org.jfree.chart.renderer.category.AreaRenderer var31 = new org.jfree.chart.renderer.category.AreaRenderer();
//     org.jfree.chart.urls.CategoryURLGenerator var32 = var31.getBaseURLGenerator();
//     var31.setSeriesVisible(0, (java.lang.Boolean)true, false);
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var38 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var39.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var43 = var39.getBaseLinesVisible();
//     java.lang.Boolean var45 = var39.getSeriesVisibleInLegend(10);
//     java.awt.Paint var46 = var39.getBaseItemLabelPaint();
//     java.awt.Color var49 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var50 = null;
//     float[] var51 = var49.getRGBColorComponents(var50);
//     var39.setBaseItemLabelPaint((java.awt.Paint)var49);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var54 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var55 = var54.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var56 = var54.getBaseNegativeItemLabelPosition();
//     var39.setBasePositiveItemLabelPosition(var56, true);
//     var38.setPositiveItemLabelPositionFallback(var56);
//     var31.setSeriesNegativeItemLabelPosition(100, var56);
//     var1.setPositiveItemLabelPositionFallback(var56);
//     
//     // Checks the contract:  equals-hashcode on var19 and var56
//     assertTrue("Contract failed: equals-hashcode on var19 and var56", var19.equals(var56) ? var19.hashCode() == var56.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var56 and var19
//     assertTrue("Contract failed: equals-hashcode on var56 and var19", var56.equals(var19) ? var56.hashCode() == var19.hashCode() : true);
// 
//   }

  public void test247() {}
//   public void test247() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var24 = new org.jfree.chart.axis.NumberAxis3D("");
//     var24.configure();
//     org.jfree.chart.util.RectangleInsets var26 = var24.getLabelInsets();
//     var22.setAxisOffset(var26);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var29 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var30 = var29.getEndType();
//     java.awt.Stroke var33 = var29.getItemStroke(0, 0);
//     var22.setRangeZeroBaselineStroke(var33);
//     org.jfree.chart.util.Layer var35 = null;
//     java.util.Collection var36 = var22.getDomainMarkers(var35);
//     org.jfree.chart.util.RectangleInsets var37 = var22.getInsets();
//     var21.setItemLabelPadding(var37);
//     org.jfree.chart.util.RectangleInsets var39 = var21.getItemLabelPadding();
//     java.awt.geom.Rectangle2D var40 = null;
//     var39.trim(var40);
// 
//   }

  public void test248() {}
//   public void test248() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     java.lang.Number var40 = var17.getQ1Value((java.lang.Comparable)0L, (java.lang.Comparable)"");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var43 = var17.getMinOutlier(2, 4);
//       fail("Expected exception of type java.lang.IndexOutOfBoundsException");
//     } catch (java.lang.IndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var40);
// 
//   }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    org.jfree.chart.renderer.category.IntervalBarRenderer var0 = new org.jfree.chart.renderer.category.IntervalBarRenderer();
    boolean var1 = var0.isDrawBarOutline();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    org.jfree.chart.util.HorizontalAlignment var14 = null;
    org.jfree.chart.util.VerticalAlignment var15 = null;
    org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
    var18.clear();
    org.jfree.chart.block.Arrangement var20 = null;
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
    org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.lang.Throwable[] var25 = var23.getSuppressed();
    boolean var26 = var21.equals((java.lang.Object)var25);
    org.jfree.chart.util.RectangleInsets var27 = var21.getItemLabelPadding();
    java.awt.Graphics2D var28 = null;
    org.jfree.chart.block.RectangleConstraint var31 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
    double var32 = var31.getWidth();
    org.jfree.chart.util.Size2D var33 = var21.arrange(var28, var31);
    org.jfree.chart.block.LengthConstraintType var34 = var31.getHeightConstraintType();
    org.jfree.chart.block.RectangleConstraint var36 = var31.toFixedWidth(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 50.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test251() {}
//   public void test251() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
//     var13.setBaseShapesFilled(false);
//     java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
//     boolean var21 = var12.equals((java.lang.Object)var13);
//     org.jfree.chart.title.TextTitle var22 = var12.getTitle();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var24 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var25 = var24.getEndType();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var29 = var26.getLegendItem((-1), 100);
//     var26.setBaseShapesFilled(false);
//     java.awt.Paint var34 = var26.getItemOutlinePaint(10, 1);
//     java.awt.Paint var36 = var26.getSeriesOutlinePaint(10);
//     var26.setAutoPopulateSeriesShape(false);
//     boolean var39 = var24.equals((java.lang.Object)var26);
//     java.awt.Paint var42 = var24.getItemPaint(1, 0);
//     var22.setPaint(var42);
//     org.jfree.data.time.Month var44 = new org.jfree.data.time.Month();
//     long var45 = var44.getSerialIndex();
//     java.util.Date var46 = var44.getEnd();
//     org.jfree.data.time.Month var47 = new org.jfree.data.time.Month();
//     long var48 = var47.getSerialIndex();
//     java.util.Date var49 = var47.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var50 = new org.jfree.data.time.SimpleTimePeriod(var46, var49);
//     boolean var51 = var22.equals((java.lang.Object)var46);
//     var22.setText("org.jfree.data.general.DatasetChangeEvent[source=false]");
//     java.awt.Graphics2D var54 = null;
//     java.awt.geom.Rectangle2D var55 = null;
//     org.jfree.chart.renderer.category.StackedAreaRenderer var58 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var61 = var58.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var62 = null;
//     org.jfree.chart.plot.RingPlot var63 = new org.jfree.chart.plot.RingPlot(var62);
//     org.jfree.chart.plot.Plot var64 = var63.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var65 = null;
//     var63.axisChanged(var65);
//     org.jfree.chart.JFreeChart var68 = new org.jfree.chart.JFreeChart("hi!", var61, (org.jfree.chart.plot.Plot)var63, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var69 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var72 = var69.getLegendItem((-1), 100);
//     var69.setBaseShapesFilled(false);
//     java.awt.Paint var76 = var69.getSeriesOutlinePaint((-1));
//     boolean var77 = var68.equals((java.lang.Object)var69);
//     var68.setTitle("ThreadContext");
//     var68.setNotify(false);
//     java.lang.Object var82 = var22.draw(var54, var55, (java.lang.Object)false);
//     
//     // Checks the contract:  equals-hashcode on var7 and var63
//     assertTrue("Contract failed: equals-hashcode on var7 and var63", var7.equals(var63) ? var7.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var7
//     assertTrue("Contract failed: equals-hashcode on var63 and var7", var63.equals(var7) ? var63.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var64
//     assertTrue("Contract failed: equals-hashcode on var8 and var64", var8.equals(var64) ? var8.hashCode() == var64.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var64 and var8
//     assertTrue("Contract failed: equals-hashcode on var64 and var8", var64.equals(var8) ? var64.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }


    org.jfree.chart.resources.JFreeChartResources var0 = new org.jfree.chart.resources.JFreeChartResources();
    java.lang.Object[][] var1 = var0.getContents();
    java.util.Locale var2 = var0.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = var0.getString("org.jfree.data.general.DatasetChangeEvent[source=false]");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }


    java.lang.String[] var1 = org.jfree.data.time.SerialDate.getMonths(true);
    java.lang.String[] var3 = org.jfree.data.time.SerialDate.getMonths(false);
    double[] var4 = null;
    double[][] var5 = new double[][] { var4};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.category.CategoryDataset var6 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable[])var1, (java.lang.Comparable[])var3, var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test254() {}
//   public void test254() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }
// 
// 
//     org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
//     var1.configure();
//     org.jfree.chart.axis.NumberTickUnit var3 = var1.getTickUnit();
//     java.awt.geom.Rectangle2D var5 = null;
//     org.jfree.chart.axis.CategoryLabelPositions var6 = new org.jfree.chart.axis.CategoryLabelPositions();
//     org.jfree.chart.plot.XYPlot var7 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var9 = new org.jfree.chart.axis.NumberAxis3D("");
//     var9.configure();
//     org.jfree.chart.util.RectangleInsets var11 = var9.getLabelInsets();
//     var7.setAxisOffset(var11);
//     org.jfree.chart.plot.CategoryMarker var14 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var15 = var14.getOutlineStroke();
//     var7.addDomainMarker((org.jfree.chart.plot.Marker)var14);
//     java.awt.geom.Point2D var17 = var7.getQuadrantOrigin();
//     org.jfree.chart.plot.DatasetRenderingOrder var18 = var7.getDatasetRenderingOrder();
//     var7.setDomainCrosshairValue(1.0d, true);
//     java.awt.Paint var22 = var7.getDomainGridlinePaint();
//     org.jfree.chart.util.RectangleEdge var24 = var7.getDomainAxisEdge(2);
//     org.jfree.chart.axis.CategoryLabelPosition var25 = var6.getLabelPosition(var24);
//     double var26 = var1.java2DToValue(0.25d, var5, var24);
// 
//   }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var3 = var1.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var4 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var6 = var4.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var9 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var12 = var9.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var13 = null;
//     org.jfree.chart.plot.RingPlot var14 = new org.jfree.chart.plot.RingPlot(var13);
//     org.jfree.chart.plot.Plot var15 = var14.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var16 = null;
//     var14.axisChanged(var16);
//     org.jfree.chart.JFreeChart var19 = new org.jfree.chart.JFreeChart("hi!", var12, (org.jfree.chart.plot.Plot)var14, true);
//     boolean var20 = var4.equals((java.lang.Object)var12);
//     var4.validateObject();
//     org.jfree.data.Range var22 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var4);
//     java.awt.Graphics2D var23 = null;
//     org.jfree.data.category.CategoryDataset var24 = null;
//     org.jfree.chart.axis.CategoryAxis var26 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var26.setUpperMargin(0.0d);
//     int var29 = var26.getMaximumCategoryLabelLines();
//     java.lang.Object var30 = var26.clone();
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var35 = var32.getLegendItem((-1), 100);
//     var32.setBaseShapesFilled(false);
//     java.awt.Paint var39 = var32.getSeriesOutlinePaint((-1));
//     java.awt.Paint var41 = var32.lookupSeriesOutlinePaint(0);
//     var31.setLabelPaint(var41);
//     double var43 = var31.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var44 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var47 = var44.getLegendItem(2, 0);
//     double var48 = var44.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var51 = var44.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var52 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var55 = var52.getLegendItem((-1), 100);
//     var52.setBaseShapesFilled(false);
//     java.awt.Paint var60 = var52.getItemOutlinePaint(10, 1);
//     var44.setErrorIndicatorPaint(var60);
//     org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot(var24, var26, (org.jfree.chart.axis.ValueAxis)var31, (org.jfree.chart.renderer.category.CategoryItemRenderer)var44);
//     var62.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var66 = var62.getDomainAxis(0);
//     var62.setDrawSharedDomainAxis(true);
//     var62.zoom(3.0d);
//     org.jfree.chart.axis.NumberAxis var71 = new org.jfree.chart.axis.NumberAxis();
//     org.jfree.chart.plot.CategoryMarker var73 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var74 = var73.getLabelPaint();
//     org.jfree.chart.text.TextAnchor var75 = var73.getLabelTextAnchor();
//     java.awt.geom.Rectangle2D var76 = null;
//     var1.drawRangeMarker(var23, var62, (org.jfree.chart.axis.ValueAxis)var71, (org.jfree.chart.plot.Marker)var73, var76);
//     var71.setPositiveArrowVisible(true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
// 
//   }

  public void test256() {}
//   public void test256() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
//     var13.setBaseShapesFilled(false);
//     java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
//     boolean var21 = var12.equals((java.lang.Object)var13);
//     int var22 = var12.getBackgroundImageAlignment();
//     org.jfree.chart.ChartRenderingInfo var25 = null;
//     var12.handleClick((-457), 15, var25);
// 
//   }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }


    org.jfree.data.xy.XYDataset var0 = null;
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("org.jfree.data.UnknownKeyException: ");
    org.jfree.chart.renderer.PolarItemRenderer var3 = null;
    org.jfree.chart.plot.PolarPlot var4 = new org.jfree.chart.plot.PolarPlot(var0, (org.jfree.chart.axis.ValueAxis)var2, var3);
    java.awt.Paint var5 = null;
    var4.setRadiusGridlinePaint(var5);
    org.jfree.chart.plot.PlotOrientation var7 = var4.getOrientation();
    boolean var8 = var4.isAngleLabelsVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }
// 
// 
//     org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
//     var0.setAdjustForDaylightSaving(true);
//     java.util.Date var3 = null;
//     var0.addException(var3);
// 
//   }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.SortOrder var45 = var38.getColumnRenderingOrder();
    org.jfree.chart.plot.PlotOrientation var46 = var38.getOrientation();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var47.equals("PlotOrientation.VERTICAL"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var48.equals("PlotOrientation.VERTICAL"));

  }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }
// 
// 
//     org.jfree.data.general.PieDataset var0 = null;
//     org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
//     org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
//     org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
//     java.lang.Object var4 = var3.clone();
//     int var5 = var3.getSubtitleCount();
//     org.jfree.data.category.CategoryDataset var6 = null;
//     org.jfree.chart.axis.CategoryAxis var8 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var8.setUpperMargin(0.0d);
//     int var11 = var8.getMaximumCategoryLabelLines();
//     java.lang.Object var12 = var8.clone();
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var17 = var14.getLegendItem((-1), 100);
//     var14.setBaseShapesFilled(false);
//     java.awt.Paint var21 = var14.getSeriesOutlinePaint((-1));
//     java.awt.Paint var23 = var14.lookupSeriesOutlinePaint(0);
//     var13.setLabelPaint(var23);
//     double var25 = var13.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var26 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var29 = var26.getLegendItem(2, 0);
//     double var30 = var26.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var33 = var26.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var37 = var34.getLegendItem((-1), 100);
//     var34.setBaseShapesFilled(false);
//     java.awt.Paint var42 = var34.getItemOutlinePaint(10, 1);
//     var26.setErrorIndicatorPaint(var42);
//     org.jfree.chart.plot.CategoryPlot var44 = new org.jfree.chart.plot.CategoryPlot(var6, var8, (org.jfree.chart.axis.ValueAxis)var13, (org.jfree.chart.renderer.category.CategoryItemRenderer)var26);
//     var44.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.AxisSpace var47 = new org.jfree.chart.axis.AxisSpace();
//     double var48 = var47.getLeft();
//     var44.setFixedRangeAxisSpace(var47);
//     org.jfree.chart.axis.AxisSpace var50 = new org.jfree.chart.axis.AxisSpace();
//     double var51 = var50.getLeft();
//     var44.setFixedRangeAxisSpace(var50);
//     var44.setRangeCrosshairLockedOnData(false);
//     org.jfree.chart.axis.CategoryAxis var55 = var44.getDomainAxis();
//     boolean var56 = var3.equals((java.lang.Object)var55);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var59 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var62 = var59.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var63 = null;
//     org.jfree.chart.plot.RingPlot var64 = new org.jfree.chart.plot.RingPlot(var63);
//     org.jfree.chart.plot.Plot var65 = var64.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var66 = null;
//     var64.axisChanged(var66);
//     org.jfree.chart.JFreeChart var69 = new org.jfree.chart.JFreeChart("hi!", var62, (org.jfree.chart.plot.Plot)var64, true);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var70 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var73 = var70.getLegendItem((-1), 100);
//     var70.setBaseShapesFilled(false);
//     java.awt.Paint var77 = var70.getSeriesOutlinePaint((-1));
//     boolean var78 = var69.equals((java.lang.Object)var70);
//     org.jfree.chart.title.TextTitle var79 = var69.getTitle();
//     org.jfree.chart.util.HorizontalAlignment var80 = var79.getTextAlignment();
//     var3.removeSubtitle((org.jfree.chart.title.Title)var79);
//     
//     // Checks the contract:  equals-hashcode on var1 and var64
//     assertTrue("Contract failed: equals-hashcode on var1 and var64", var1.equals(var64) ? var1.hashCode() == var64.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var64 and var1
//     assertTrue("Contract failed: equals-hashcode on var64 and var1", var64.equals(var1) ? var64.hashCode() == var1.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var2 and var65
//     assertTrue("Contract failed: equals-hashcode on var2 and var65", var2.equals(var65) ? var2.hashCode() == var65.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var65 and var2
//     assertTrue("Contract failed: equals-hashcode on var65 and var2", var65.equals(var2) ? var65.hashCode() == var2.hashCode() : true);
// 
//   }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow((java.lang.Comparable)"ThreadContext");
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }
// 
// 
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     int var1 = var0.getColumnCount();
//     org.jfree.chart.axis.NumberAxis3D var3 = new org.jfree.chart.axis.NumberAxis3D("");
//     org.jfree.chart.axis.NumberAxis3D var5 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var6 = var5.isTickMarksVisible();
//     org.jfree.data.Range var9 = new org.jfree.data.Range(1.0d, 100.0d);
//     var5.setRangeWithMargins(var9, false, false);
//     var3.setRangeWithMargins(var9);
//     var3.configure();
//     org.jfree.chart.axis.NumberTickUnit var15 = var3.getTickUnit();
//     org.jfree.data.time.Year var16 = new org.jfree.data.time.Year();
//     java.util.Date var17 = var16.getEnd();
//     java.util.Date var18 = var16.getEnd();
//     java.lang.Number var19 = var0.getMeanValue((java.lang.Comparable)var15, (java.lang.Comparable)var16);
//     int var20 = var16.getYear();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == 2014);
// 
//   }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }


    org.jfree.chart.renderer.category.BoxAndWhiskerRenderer var0 = new org.jfree.chart.renderer.category.BoxAndWhiskerRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-16777206), (-457));
    var0.setFillBox(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test264() {}
//   public void test264() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.util.List var13 = var12.getSubtitles();
//     java.awt.Stroke var14 = var12.getBorderStroke();
//     java.awt.Graphics2D var15 = null;
//     java.awt.geom.Rectangle2D var16 = null;
//     org.jfree.chart.entity.EntityCollection var17 = null;
//     org.jfree.chart.ChartRenderingInfo var18 = new org.jfree.chart.ChartRenderingInfo(var17);
//     org.jfree.chart.plot.PlotRenderingInfo var19 = var18.getPlotInfo();
//     org.jfree.chart.plot.PlotRenderingInfo var20 = var18.getPlotInfo();
//     var12.draw(var15, var16, var18);
// 
//   }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    org.jfree.chart.labels.IntervalCategoryToolTipGenerator var0 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var3 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var1, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var4 = null;
    org.jfree.chart.plot.RingPlot var5 = new org.jfree.chart.plot.RingPlot(var4);
    org.jfree.chart.plot.Plot var6 = var5.getRootPlot();
    var1.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var9 = var0.generateColumnLabel((org.jfree.data.category.CategoryDataset)var1, 4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    java.lang.String var1 = org.jfree.data.time.SerialDate.weekInMonthToString(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Fourth"+ "'", var1.equals("Fourth"));

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidWeekdayCode(255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test268() {}
//   public void test268() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }
// 
// 
//     org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
//     org.jfree.data.DefaultKeyedValues2D var2 = new org.jfree.data.DefaultKeyedValues2D(false);
//     var2.clear();
//     java.util.List var4 = var2.getColumnKeys();
//     var0.setExceptionSegments(var4);
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var6 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     org.jfree.data.time.Year var9 = new org.jfree.data.time.Year();
//     org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(10, var9);
//     org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("PlotOrientation.VERTICAL", (org.jfree.data.time.TimePeriod)var9);
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
//     var13.setBaseShapesFilled(false);
//     java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
//     java.awt.Paint var22 = var13.lookupSeriesOutlinePaint(0);
//     var12.setLabelPaint(var22);
//     double var24 = var12.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var27 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var30 = var27.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var31 = null;
//     org.jfree.chart.plot.RingPlot var32 = new org.jfree.chart.plot.RingPlot(var31);
//     org.jfree.chart.plot.Plot var33 = var32.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var34 = null;
//     var32.axisChanged(var34);
//     org.jfree.chart.JFreeChart var37 = new org.jfree.chart.JFreeChart("hi!", var30, (org.jfree.chart.plot.Plot)var32, true);
//     java.awt.Paint var38 = var32.getBackgroundPaint();
//     java.awt.Paint var39 = var32.getLabelOutlinePaint();
//     var12.setTickMarkPaint(var39);
//     java.text.DateFormat var43 = null;
//     org.jfree.chart.axis.DateTickUnit var44 = new org.jfree.chart.axis.DateTickUnit(2, 1, var43);
//     var12.setTickUnit(var44, false, false);
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     java.util.Date var49 = var48.getMaximumDate();
//     java.lang.String var50 = var44.dateToString(var49);
//     java.lang.Number var51 = var6.getStdDevValue((java.lang.Comparable)var9, (java.lang.Comparable)var50);
//     org.jfree.data.Range var53 = var6.getRangeBounds(false);
//     org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var58 = var55.getLegendItem((-1), 100);
//     var55.setBaseShapesFilled(false);
//     java.awt.Paint var62 = var55.getSeriesOutlinePaint((-1));
//     java.awt.Paint var64 = var55.lookupSeriesOutlinePaint(0);
//     var54.setLabelPaint(var64);
//     boolean var66 = var54.isNegativeArrowVisible();
//     org.jfree.data.Range var69 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var70 = var69.toString();
//     org.jfree.data.Range var72 = org.jfree.data.Range.shift(var69, 0.0d);
//     var54.setRange(var72);
//     org.jfree.data.time.Month var74 = new org.jfree.data.time.Month();
//     long var75 = var74.getSerialIndex();
//     java.util.Date var76 = var74.getEnd();
//     org.jfree.data.time.Month var77 = new org.jfree.data.time.Month();
//     long var78 = var77.getSerialIndex();
//     java.util.Date var79 = var77.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var80 = new org.jfree.data.time.SimpleTimePeriod(var76, var79);
//     var54.setMaximumDate(var76);
//     org.jfree.data.time.Month var82 = new org.jfree.data.time.Month();
//     long var83 = var82.getSerialIndex();
//     java.util.Date var84 = var82.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var85 = new org.jfree.data.time.SimpleTimePeriod(var76, var84);
//     java.lang.Number var87 = var6.getValue((java.lang.Comparable)var84, (java.lang.Comparable)"SortOrder.ASCENDING");
//     org.jfree.chart.axis.SegmentedTimeline.Segment var88 = var0.getSegment(var84);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var89 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var91 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var89, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var92 = null;
//     org.jfree.chart.plot.RingPlot var93 = new org.jfree.chart.plot.RingPlot(var92);
//     org.jfree.chart.plot.Plot var94 = var93.getRootPlot();
//     var89.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var94);
//     java.util.List var96 = var89.getRowKeys();
//     var0.setExceptionSegments(var96);
//     
//     // Checks the contract:  equals-hashcode on var32 and var93
//     assertTrue("Contract failed: equals-hashcode on var32 and var93", var32.equals(var93) ? var32.hashCode() == var93.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var93 and var32
//     assertTrue("Contract failed: equals-hashcode on var93 and var32", var93.equals(var32) ? var93.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var33 and var94
//     assertTrue("Contract failed: equals-hashcode on var33 and var94", var33.equals(var94) ? var33.hashCode() == var94.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var94 and var33
//     assertTrue("Contract failed: equals-hashcode on var94 and var33", var94.equals(var33) ? var94.hashCode() == var33.hashCode() : true);
// 
//   }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    org.jfree.chart.util.HorizontalAlignment var0 = null;
    org.jfree.chart.util.VerticalAlignment var1 = null;
    org.jfree.chart.block.FlowArrangement var4 = new org.jfree.chart.block.FlowArrangement(var0, var1, Double.NaN, 4.0d);
    org.jfree.chart.block.BlockContainer var5 = new org.jfree.chart.block.BlockContainer();
    java.awt.Graphics2D var6 = null;
    org.jfree.chart.block.RectangleConstraint var9 = new org.jfree.chart.block.RectangleConstraint(1.0d, (-1.0d));
    org.jfree.chart.util.Size2D var10 = var4.arrange(var5, var6, var9);
    var5.clear();
    boolean var12 = var5.isEmpty();
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var15, Double.NaN, Double.NaN);
    java.awt.Shape var22 = org.jfree.chart.util.ShapeUtilities.rotateShape(var15, 10.0d, 0.0f, 0.0f);
    java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var25, Double.NaN, Double.NaN);
    java.awt.Shape var32 = org.jfree.chart.util.ShapeUtilities.rotateShape(var25, 10.0d, 0.0f, 0.0f);
    boolean var33 = org.jfree.chart.util.ShapeUtilities.equal(var22, var32);
    org.jfree.chart.renderer.category.StackedAreaRenderer var36 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var39 = var36.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var40 = null;
    org.jfree.chart.plot.RingPlot var41 = new org.jfree.chart.plot.RingPlot(var40);
    org.jfree.chart.plot.Plot var42 = var41.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var43 = null;
    var41.axisChanged(var43);
    org.jfree.chart.JFreeChart var46 = new org.jfree.chart.JFreeChart("hi!", var39, (org.jfree.chart.plot.Plot)var41, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var47 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var50 = var47.getLegendItem((-1), 100);
    var47.setBaseShapesFilled(false);
    java.awt.Paint var54 = var47.getSeriesOutlinePaint((-1));
    boolean var55 = var46.equals((java.lang.Object)var47);
    org.jfree.chart.title.TextTitle var56 = var46.getTitle();
    org.jfree.chart.renderer.category.StackedAreaRenderer var58 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var59 = var58.getEndType();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var63 = var60.getLegendItem((-1), 100);
    var60.setBaseShapesFilled(false);
    java.awt.Paint var68 = var60.getItemOutlinePaint(10, 1);
    java.awt.Paint var70 = var60.getSeriesOutlinePaint(10);
    var60.setAutoPopulateSeriesShape(false);
    boolean var73 = var58.equals((java.lang.Object)var60);
    java.awt.Paint var76 = var58.getItemPaint(1, 0);
    var56.setPaint(var76);
    org.jfree.chart.title.LegendGraphic var78 = new org.jfree.chart.title.LegendGraphic(var32, var76);
    org.jfree.chart.axis.NumberAxis3D var80 = new org.jfree.chart.axis.NumberAxis3D("");
    var80.configure();
    org.jfree.chart.axis.NumberTickUnit var82 = var80.getTickUnit();
    org.jfree.data.Range var83 = var80.getRange();
    org.jfree.chart.axis.TickUnitSource var84 = var80.getStandardTickUnits();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.add((org.jfree.chart.block.Block)var78, (java.lang.Object)var80);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }


    org.jfree.chart.renderer.category.LineRenderer3D var0 = new org.jfree.chart.renderer.category.LineRenderer3D();
    double var1 = var0.getYOffset();
    java.awt.Paint var2 = var0.getWallPaint();
    var0.setXOffset(2.0d);
    var0.setXOffset(0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 8.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxisForDataset(1);
    org.jfree.data.general.PieDataset var43 = null;
    org.jfree.chart.plot.RingPlot var44 = new org.jfree.chart.plot.RingPlot(var43);
    org.jfree.chart.plot.Plot var45 = var44.getRootPlot();
    org.jfree.chart.JFreeChart var46 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var44);
    boolean var47 = var46.getAntiAlias();
    java.awt.Stroke var48 = var46.getBorderStroke();
    org.jfree.chart.util.RectangleInsets var49 = var46.getPadding();
    var46.setNotify(false);
    java.awt.Paint var52 = var46.getBorderPaint();
    var42.setAxisLinePaint(var52);
    var42.setUpperMargin(4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var6 = var3.getLegendItem((-1), 100);
    var3.setBaseShapesFilled(false);
    java.awt.Paint var11 = var3.getItemOutlinePaint(10, 1);
    java.awt.Paint var13 = var3.getSeriesOutlinePaint(10);
    var3.setAutoPopulateSeriesShape(false);
    boolean var16 = var1.equals((java.lang.Object)var3);
    int var17 = var1.getPassCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.awt.Paint var13 = var7.getBackgroundPaint();
    var7.setShadowYOffset(2.0d);
    org.jfree.chart.plot.Plot var16 = var7.getRootPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test274() {}
//   public void test274() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }
// 
// 
//     org.jfree.data.time.Month var0 = new org.jfree.data.time.Month();
//     long var1 = var0.getSerialIndex();
//     java.util.Date var2 = var0.getEnd();
//     org.jfree.chart.text.TextBlock var3 = null;
//     org.jfree.chart.text.TextBlockAnchor var4 = null;
//     org.jfree.chart.plot.XYPlot var5 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
//     var7.configure();
//     org.jfree.chart.util.RectangleInsets var9 = var7.getLabelInsets();
//     var5.setAxisOffset(var9);
//     org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var13 = var12.getOutlineStroke();
//     var5.addDomainMarker((org.jfree.chart.plot.Marker)var12);
//     var12.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var17 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var18.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var22 = var18.getBaseLinesVisible();
//     java.lang.Boolean var24 = var18.getSeriesVisibleInLegend(10);
//     java.awt.Paint var25 = var18.getBaseItemLabelPaint();
//     java.awt.Color var28 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var29 = null;
//     float[] var30 = var28.getRGBColorComponents(var29);
//     var18.setBaseItemLabelPaint((java.awt.Paint)var28);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var34 = var33.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var35 = var33.getBaseNegativeItemLabelPosition();
//     var18.setBasePositiveItemLabelPosition(var35, true);
//     var17.setPositiveItemLabelPositionFallback(var35);
//     org.jfree.chart.text.TextAnchor var39 = var35.getRotationAnchor();
//     var12.setLabelTextAnchor(var39);
//     org.jfree.chart.axis.CategoryTick var42 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var2, var3, var4, var39, 2.0d);
//     org.jfree.chart.text.TextBlock var43 = var42.getLabel();
//     org.jfree.chart.text.TextBlockAnchor var44 = var42.getLabelAnchor();
//     java.lang.Object var45 = var42.clone();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
// 
//   }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    var0.setDomainCrosshairValue(0.05d);
    java.awt.Paint var3 = var0.getDomainCrosshairPaint();
    var0.mapDatasetToRangeAxis(1, 15);
    var0.setRangeCrosshairValue(100.0d);
    java.util.List var9 = var0.getAnnotations();
    java.awt.Stroke var10 = var0.getRangeZeroBaselineStroke();
    org.jfree.data.general.PieDataset var12 = null;
    org.jfree.chart.plot.RingPlot var13 = new org.jfree.chart.plot.RingPlot(var12);
    org.jfree.chart.plot.Plot var14 = var13.getRootPlot();
    org.jfree.chart.JFreeChart var15 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var13);
    double var16 = var13.getLabelLinkMargin();
    java.awt.Paint var17 = var13.getSeparatorPaint();
    var0.setQuadrantPaint(0, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var2 = var1.isTickMarksVisible();
    org.jfree.data.Range var5 = new org.jfree.data.Range(1.0d, 100.0d);
    var1.setRangeWithMargins(var5, false, false);
    java.text.NumberFormat var9 = var1.getNumberFormatOverride();
    java.awt.Stroke var10 = var1.getAxisLineStroke();
    java.lang.String var11 = var1.getLabelURL();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    org.jfree.chart.entity.ChartEntity var3 = new org.jfree.chart.entity.ChartEntity(var2);
    java.lang.String var4 = var3.getURLText();
    var3.setToolTipText("");
    org.jfree.data.general.PieDataset var7 = null;
    org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
    org.jfree.chart.plot.Plot var9 = var8.getRootPlot();
    org.jfree.chart.util.RectangleInsets var10 = var8.getInsets();
    boolean var11 = var3.equals((java.lang.Object)var8);
    var3.setURLText("Multiple Pie Plot");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    var1.setSectionDepth(2.0d);
    java.awt.Paint var6 = var1.getShadowPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var0, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
    var0.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var9 = var0.getOutliers(2014, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(1);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var25.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var29 = var25.getBaseLinesVisible();
    java.lang.Boolean var31 = var25.getSeriesVisibleInLegend(10);
    java.awt.Paint var32 = var25.getBaseItemLabelPaint();
    java.awt.Color var35 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var36 = null;
    float[] var37 = var35.getRGBColorComponents(var36);
    var25.setBaseItemLabelPaint((java.awt.Paint)var35);
    int var39 = var35.getGreen();
    java.lang.String var40 = var35.toString();
    var0.setDomainTickBandPaint((java.awt.Paint)var35);
    org.jfree.chart.block.RectangleConstraint var44 = new org.jfree.chart.block.RectangleConstraint(0.0d, 10.0d);
    org.jfree.chart.block.RectangleConstraint var47 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
    org.jfree.chart.util.Size2D var48 = null;
    org.jfree.chart.util.Size2D var49 = var47.calculateConstrainedSize(var48);
    org.jfree.chart.util.Size2D var50 = var44.calculateConstrainedSize(var49);
    org.jfree.data.general.PieDataset var51 = null;
    org.jfree.chart.plot.RingPlot var52 = new org.jfree.chart.plot.RingPlot(var51);
    org.jfree.chart.plot.Plot var53 = var52.getRootPlot();
    boolean var54 = var49.equals((java.lang.Object)var52);
    boolean var55 = var35.equals((java.lang.Object)var52);
    float var56 = var52.getForegroundAlpha();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var40.equals("java.awt.Color[r=0,g=0,b=10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1.0f);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    org.jfree.chart.labels.CategoryToolTipGenerator var6 = null;
    var0.setSeriesToolTipGenerator(0, var6);
    org.jfree.chart.plot.DrawingSupplier var8 = var0.getDrawingSupplier();
    java.lang.Boolean var10 = null;
    var0.setSeriesVisibleInLegend(0, var10, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test282() {}
//   public void test282() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }
// 
// 
//     org.jfree.chart.labels.IntervalCategoryToolTipGenerator var0 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator();
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var1 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     double var3 = var1.getRangeLowerBound(false);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var5 = var0.generateRowLabel((org.jfree.data.category.CategoryDataset)var1, (-1));
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == Double.NaN);
// 
//   }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
    var38.setDrawSharedDomainAxis(true);
    var38.mapDatasetToRangeAxis(10, (-16777206));
    var38.setRangeGridlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    boolean var9 = var0.getUseOutlinePaint();
    boolean var12 = var0.getItemShapeFilled(100, 10);
    org.jfree.chart.labels.CategoryToolTipGenerator var13 = null;
    var0.setBaseToolTipGenerator(var13);
    var0.setAutoPopulateSeriesShape(false);
    var0.setSeriesItemLabelsVisible(1, (java.lang.Boolean)true);
    var0.setBaseShapesVisible(false);
    boolean var23 = var0.isSeriesVisible(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesLinesVisible((-16777206), false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.util.RectangleInsets var6 = var0.getAxisOffset();
    java.awt.Paint var7 = var0.getDomainTickBandPaint();
    var0.setOutlineVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var2.setUpperMargin(0.0d);
//     int var5 = var2.getMaximumCategoryLabelLines();
//     java.lang.Object var6 = var2.clone();
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
//     var8.setBaseShapesFilled(false);
//     java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
//     java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
//     var7.setLabelPaint(var17);
//     double var19 = var7.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
//     double var24 = var20.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
//     var20.setErrorIndicatorPaint(var36);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
//     var38.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
//     var38.setDrawSharedDomainAxis(true);
//     org.jfree.chart.plot.PlotRenderingInfo var47 = null;
//     org.jfree.chart.plot.XYPlot var48 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var50 = new org.jfree.chart.axis.NumberAxis3D("");
//     var50.configure();
//     org.jfree.chart.util.RectangleInsets var52 = var50.getLabelInsets();
//     var48.setAxisOffset(var52);
//     org.jfree.chart.plot.CategoryMarker var55 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var56 = var55.getOutlineStroke();
//     var48.addDomainMarker((org.jfree.chart.plot.Marker)var55);
//     java.awt.geom.Point2D var58 = var48.getQuadrantOrigin();
//     var38.zoomRangeAxes(0.0d, 90.0d, var47, var58);
//     java.awt.Stroke var60 = var38.getRangeGridlineStroke();
//     org.jfree.chart.axis.CategoryAxis var62 = var38.getDomainAxisForDataset(10);
//     var38.configureDomainAxes();
//     java.awt.Graphics2D var64 = null;
//     java.awt.geom.Rectangle2D var65 = null;
//     var38.drawBackground(var64, var65);
// 
//   }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.util.ObjectList var1 = new org.jfree.chart.util.ObjectList((-457));
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    org.jfree.chart.labels.CategoryToolTipGenerator var6 = null;
    var0.setSeriesToolTipGenerator(0, var6);
    boolean var9 = var0.isSeriesVisible(0);
    org.jfree.chart.urls.CategoryURLGenerator var12 = var0.getURLGenerator(1, 4);
    boolean var13 = var0.getBaseItemLabelsVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    var0.setForegroundAlpha(100.0f);
    var0.setRangeCrosshairVisible(true);
    boolean var19 = var0.isRangeZoomable();
    org.jfree.chart.util.RectangleEdge var21 = var0.getDomainAxisEdge(1);
    org.jfree.data.general.PieDataset var22 = null;
    org.jfree.chart.plot.RingPlot var23 = new org.jfree.chart.plot.RingPlot(var22);
    java.awt.Paint var24 = var23.getBaseSectionPaint();
    double var25 = var23.getLabelGap();
    double var26 = var23.getInnerSeparatorExtension();
    org.jfree.data.general.PieDataset var27 = null;
    org.jfree.chart.plot.RingPlot var28 = new org.jfree.chart.plot.RingPlot(var27);
    org.jfree.chart.plot.Plot var29 = var28.getRootPlot();
    org.jfree.chart.JFreeChart var30 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var28);
    boolean var31 = var30.getAntiAlias();
    java.awt.Stroke var32 = var30.getBorderStroke();
    var23.setOutlineStroke(var32);
    var0.setRangeGridlineStroke(var32);
    org.jfree.data.general.PieDataset var36 = null;
    org.jfree.chart.plot.RingPlot var37 = new org.jfree.chart.plot.RingPlot(var36);
    org.jfree.chart.plot.Plot var38 = var37.getRootPlot();
    org.jfree.chart.util.RectangleInsets var39 = var37.getInsets();
    java.awt.Stroke var40 = var37.getLabelOutlineStroke();
    java.awt.Paint var41 = var37.getLabelShadowPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setQuadrantPaint(5, var41);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }
// 
// 
//     java.awt.Color var3 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var4 = null;
//     float[] var5 = var3.getRGBColorComponents(var4);
//     java.awt.Color var8 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var9 = null;
//     float[] var10 = var8.getRGBColorComponents(var9);
//     float[] var11 = var3.getColorComponents(var9);
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
//     var13.setBaseShapesFilled(false);
//     java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
//     java.awt.Paint var22 = var13.lookupSeriesOutlinePaint(0);
//     var12.setLabelPaint(var22);
//     boolean var24 = var12.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var26 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var27 = var26.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var28 = var26.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var29 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var31 = var29.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var34 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var37 = var34.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var38 = null;
//     org.jfree.chart.plot.RingPlot var39 = new org.jfree.chart.plot.RingPlot(var38);
//     org.jfree.chart.plot.Plot var40 = var39.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var41 = null;
//     var39.axisChanged(var41);
//     org.jfree.chart.JFreeChart var44 = new org.jfree.chart.JFreeChart("hi!", var37, (org.jfree.chart.plot.Plot)var39, true);
//     boolean var45 = var29.equals((java.lang.Object)var37);
//     var29.validateObject();
//     org.jfree.data.Range var47 = var26.findRangeBounds((org.jfree.data.category.CategoryDataset)var29);
//     org.jfree.data.general.DatasetChangeEvent var48 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var24, (org.jfree.data.general.Dataset)var29);
//     org.jfree.data.Range var49 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var29);
//     org.jfree.chart.plot.XYPlot var50 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var52 = new org.jfree.chart.axis.NumberAxis3D("");
//     var52.configure();
//     org.jfree.chart.util.RectangleInsets var54 = var52.getLabelInsets();
//     var50.setAxisOffset(var54);
//     org.jfree.chart.plot.CategoryMarker var57 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var58 = var57.getOutlineStroke();
//     var50.addDomainMarker((org.jfree.chart.plot.Marker)var57);
//     var29.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var50);
//     java.awt.Stroke var61 = var50.getDomainGridlineStroke();
//     org.jfree.chart.plot.ValueMarker var62 = new org.jfree.chart.plot.ValueMarker(0.0d, (java.awt.Paint)var3, var61);
//     int var63 = var3.getRGB();
//     java.awt.Color var64 = var3.brighter();
//     int var65 = var3.getAlpha();
//     int var66 = var3.getBlue();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var63 == (-16777206));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var65 == 255);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var66 == 10);
// 
//   }

  public void test291() {}
//   public void test291() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }
// 
// 
//     org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
//     var1.setBaseNegativeItemLabelPosition(var12);
//     var0.setPositiveItemLabelPositionFallback(var12);
//     double var15 = var0.getStartPercent();
//     org.jfree.chart.axis.DateAxis var16 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var20 = var17.getLegendItem((-1), 100);
//     var17.setBaseShapesFilled(false);
//     java.awt.Paint var24 = var17.getSeriesOutlinePaint((-1));
//     java.awt.Paint var26 = var17.lookupSeriesOutlinePaint(0);
//     var16.setLabelPaint(var26);
//     boolean var28 = var16.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var30 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var31 = var30.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var32 = var30.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var33 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var35 = var33.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var38 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var41 = var38.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var42 = null;
//     org.jfree.chart.plot.RingPlot var43 = new org.jfree.chart.plot.RingPlot(var42);
//     org.jfree.chart.plot.Plot var44 = var43.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var45 = null;
//     var43.axisChanged(var45);
//     org.jfree.chart.JFreeChart var48 = new org.jfree.chart.JFreeChart("hi!", var41, (org.jfree.chart.plot.Plot)var43, true);
//     boolean var49 = var33.equals((java.lang.Object)var41);
//     var33.validateObject();
//     org.jfree.data.Range var51 = var30.findRangeBounds((org.jfree.data.category.CategoryDataset)var33);
//     org.jfree.data.general.DatasetChangeEvent var52 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var28, (org.jfree.data.general.Dataset)var33);
//     org.jfree.data.Range var53 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var33);
//     
//     // Checks the contract:  equals-hashcode on var12 and var32
//     assertTrue("Contract failed: equals-hashcode on var12 and var32", var12.equals(var32) ? var12.hashCode() == var32.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var32 and var12
//     assertTrue("Contract failed: equals-hashcode on var32 and var12", var32.equals(var12) ? var32.hashCode() == var12.hashCode() : true);
// 
//   }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    boolean var4 = var3.getAntiAlias();
    org.jfree.chart.event.ChartProgressListener var5 = null;
    var3.removeProgressListener(var5);
    org.jfree.chart.event.ChartChangeListener var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChangeListener(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    org.jfree.chart.util.HorizontalAlignment var14 = null;
    org.jfree.chart.util.VerticalAlignment var15 = null;
    org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
    var18.clear();
    org.jfree.chart.block.Arrangement var20 = null;
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
    java.lang.String var22 = var7.getNoDataMessage();
    org.jfree.data.general.PieDataset var23 = null;
    org.jfree.chart.plot.RingPlot var24 = new org.jfree.chart.plot.RingPlot(var23);
    org.jfree.chart.plot.Plot var25 = var24.getRootPlot();
    org.jfree.chart.JFreeChart var26 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var24);
    boolean var27 = var26.getAntiAlias();
    java.awt.Stroke var28 = var26.getBorderStroke();
    var7.setSeparatorStroke(var28);
    java.awt.Paint var31 = var7.getSectionOutlinePaint((java.lang.Comparable)"({0}, {1}) = {3} - {4}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    java.awt.Shape var4 = null;
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var9 = var6.getLegendItem((-1), 100);
    var6.setBaseShapesFilled(false);
    java.awt.Paint var13 = var6.getSeriesOutlinePaint((-1));
    java.awt.Paint var15 = var6.lookupSeriesOutlinePaint(0);
    var5.setLabelPaint(var15);
    double var17 = var5.getFixedAutoRange();
    org.jfree.chart.renderer.category.StackedAreaRenderer var20 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var23 = var20.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var24 = null;
    org.jfree.chart.plot.RingPlot var25 = new org.jfree.chart.plot.RingPlot(var24);
    org.jfree.chart.plot.Plot var26 = var25.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var27 = null;
    var25.axisChanged(var27);
    org.jfree.chart.JFreeChart var30 = new org.jfree.chart.JFreeChart("hi!", var23, (org.jfree.chart.plot.Plot)var25, true);
    java.awt.Paint var31 = var25.getBackgroundPaint();
    java.awt.Paint var32 = var25.getLabelOutlinePaint();
    var5.setTickMarkPaint(var32);
    org.jfree.chart.LegendItem var34 = new org.jfree.chart.LegendItem("Pie Plot", "Pie Plot", "Pie Plot", "Size2D[width=50.5, height=10.0]", var4, var32);
    boolean var35 = var34.isShapeOutlineVisible();
    boolean var36 = var34.isLineVisible();
    org.jfree.data.general.Dataset var37 = var34.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test295() {}
//   public void test295() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }
// 
// 
//     org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
//     int var1 = var0.getColumnCount();
//     int var2 = var0.getRowCount();
//     org.jfree.data.KeyedObjects2D var3 = new org.jfree.data.KeyedObjects2D();
//     org.jfree.data.time.Month var5 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var5);
//     var6.setDescription("poly");
//     org.jfree.data.time.Month var9 = new org.jfree.data.time.Month();
//     long var10 = var9.getSerialIndex();
//     java.util.Date var11 = var9.getEnd();
//     var6.setDuration((org.jfree.data.time.TimePeriod)var9);
//     org.jfree.chart.axis.DateAxis var13 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var17 = var14.getLegendItem((-1), 100);
//     var14.setBaseShapesFilled(false);
//     java.awt.Paint var21 = var14.getSeriesOutlinePaint((-1));
//     java.awt.Paint var23 = var14.lookupSeriesOutlinePaint(0);
//     var13.setLabelPaint(var23);
//     double var25 = var13.getFixedAutoRange();
//     var13.setNegativeArrowVisible(true);
//     java.text.DateFormat var30 = null;
//     org.jfree.chart.axis.DateTickUnit var31 = new org.jfree.chart.axis.DateTickUnit(2, 1, var30);
//     var13.setTickUnit(var31, true, false);
//     org.jfree.data.time.Year var35 = new org.jfree.data.time.Year();
//     var3.setObject((java.lang.Object)var6, (java.lang.Comparable)true, (java.lang.Comparable)var35);
//     java.lang.String var37 = var35.toString();
//     int var38 = var0.getColumnIndex((java.lang.Comparable)var35);
//     long var39 = var35.getMiddleMillisecond();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var37 + "' != '" + "2014"+ "'", var37.equals("2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 1404331199999L);
// 
//   }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }


    org.jfree.data.time.SerialDate var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.SerialDate var2 = org.jfree.data.time.SerialDate.getNearestDayOfWeek((-16777206), var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     java.lang.String var18 = var17.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == Double.NaN);
// 
//   }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    java.awt.Paint var8 = var0.getItemOutlinePaint(10, 1);
    java.awt.Paint var10 = var0.getSeriesOutlinePaint(10);
    var0.setUseFillPaint(false);
    var0.setSeriesCreateEntities(100, (java.lang.Boolean)true, false);
    var0.setSeriesItemLabelsVisible(1, (java.lang.Boolean)true);
    java.awt.Stroke var21 = var0.getSeriesStroke(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(1);
    org.jfree.data.xy.XYDataset var25 = null;
    var0.setDataset(var25);
    var0.setRangeCrosshairValue(1.0d);
    org.jfree.chart.axis.NumberAxis3D var30 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var31 = var30.isTickMarksVisible();
    org.jfree.chart.axis.NumberTickUnit var32 = var30.getTickUnit();
    int var33 = var0.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var30);
    java.awt.geom.Point2D var34 = var0.getQuadrantOrigin();
    org.jfree.chart.util.RectangleInsets var35 = var0.getInsets();
    org.jfree.chart.util.UnitType var36 = var35.getUnitType();
    java.lang.String var37 = var36.toString();
    java.lang.Object var38 = null;
    boolean var39 = var36.equals(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "UnitType.ABSOLUTE"+ "'", var37.equals("UnitType.ABSOLUTE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    int var1 = var0.getItemCount();
    var0.removeValue((java.lang.Comparable)"Oct");
    org.jfree.data.category.CategoryDataset var4 = null;
    org.jfree.chart.axis.CategoryAxis var6 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var6.setUpperMargin(0.0d);
    int var9 = var6.getMaximumCategoryLabelLines();
    java.lang.Object var10 = var6.clone();
    org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var15 = var12.getLegendItem((-1), 100);
    var12.setBaseShapesFilled(false);
    java.awt.Paint var19 = var12.getSeriesOutlinePaint((-1));
    java.awt.Paint var21 = var12.lookupSeriesOutlinePaint(0);
    var11.setLabelPaint(var21);
    double var23 = var11.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var24 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var27 = var24.getLegendItem(2, 0);
    double var28 = var24.getBase();
    org.jfree.chart.labels.ItemLabelPosition var31 = var24.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var35 = var32.getLegendItem((-1), 100);
    var32.setBaseShapesFilled(false);
    java.awt.Paint var40 = var32.getItemOutlinePaint(10, 1);
    var24.setErrorIndicatorPaint(var40);
    org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot(var4, var6, (org.jfree.chart.axis.ValueAxis)var11, (org.jfree.chart.renderer.category.CategoryItemRenderer)var24);
    var42.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var46 = var42.getDomainAxis(0);
    var42.setDrawSharedDomainAxis(true);
    org.jfree.chart.util.SortOrder var49 = var42.getColumnRenderingOrder();
    var0.sortByKeys(var49);
    org.jfree.chart.axis.DateAxis var51 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var52 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var55 = var52.getLegendItem((-1), 100);
    var52.setBaseShapesFilled(false);
    java.awt.Paint var59 = var52.getSeriesOutlinePaint((-1));
    java.awt.Paint var61 = var52.lookupSeriesOutlinePaint(0);
    var51.setLabelPaint(var61);
    double var63 = var51.getFixedAutoRange();
    var51.setNegativeArrowVisible(true);
    java.text.DateFormat var68 = null;
    org.jfree.chart.axis.DateTickUnit var69 = new org.jfree.chart.axis.DateTickUnit(2, 1, var68);
    var51.setTickUnit(var69, true, false);
    var0.addValue((java.lang.Comparable)false, 2.0d);
    java.lang.Comparable var75 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addValue(var75, 0.05d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.0d);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    org.jfree.chart.axis.NumberTickUnit var3 = var1.getTickUnit();
    org.jfree.data.Range var4 = var1.getRange();
    boolean var5 = var1.isTickLabelsVisible();
    var1.setTickMarksVisible(true);
    var1.setAutoRangeMinimumSize(0.25d, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    org.jfree.chart.axis.NumberTickUnit var3 = var1.getTickUnit();
    org.jfree.data.Range var4 = var1.getRange();
    var1.setLowerMargin(100.0d);
    var1.setAutoRange(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setRange(10.0d, 3.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test303() {}
//   public void test303() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }
// 
// 
//     java.awt.Graphics2D var1 = null;
//     org.jfree.chart.text.TextUtilities.drawRotatedString("Range[1.0,100.0]", var1, 1.0f, 100.0f, 90.0d, 0.0f, 1.0f);
// 
//   }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    java.awt.geom.GeneralPath var0 = null;
    java.awt.geom.GeneralPath var1 = null;
    boolean var2 = org.jfree.chart.util.ShapeUtilities.equal(var0, var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test305() {}
//   public void test305() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var10 = var7.getLegendItem((-1), 100);
//     var7.setBaseShapesFilled(false);
//     java.awt.Paint var14 = var7.getSeriesOutlinePaint((-1));
//     java.awt.Paint var16 = var7.lookupSeriesOutlinePaint(0);
//     var6.setLabelPaint(var16);
//     boolean var18 = var6.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var20 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var21 = var20.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var22 = var20.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var23 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var25 = var23.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var31 = var28.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var32 = null;
//     org.jfree.chart.plot.RingPlot var33 = new org.jfree.chart.plot.RingPlot(var32);
//     org.jfree.chart.plot.Plot var34 = var33.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var35 = null;
//     var33.axisChanged(var35);
//     org.jfree.chart.JFreeChart var38 = new org.jfree.chart.JFreeChart("hi!", var31, (org.jfree.chart.plot.Plot)var33, true);
//     boolean var39 = var23.equals((java.lang.Object)var31);
//     var23.validateObject();
//     org.jfree.data.Range var41 = var20.findRangeBounds((org.jfree.data.category.CategoryDataset)var23);
//     org.jfree.data.general.DatasetChangeEvent var42 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var18, (org.jfree.data.general.Dataset)var23);
//     var0.datasetChanged(var42);
//     org.jfree.chart.plot.XYPlot var44 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.LegendItemCollection var45 = new org.jfree.chart.LegendItemCollection();
//     int var46 = var45.getItemCount();
//     var44.setFixedLegendItems(var45);
//     org.jfree.chart.axis.AxisLocation var49 = var44.getRangeAxisLocation(10);
//     var0.setDomainAxisLocation(var49);
//     boolean var51 = var0.isDomainZoomable();
//     var0.configureDomainAxes();
//     java.lang.String var53 = var0.getNoDataMessage();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var53);
// 
//   }

  public void test306() {}
//   public void test306() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var24 = new org.jfree.chart.axis.NumberAxis3D("");
//     var24.configure();
//     org.jfree.chart.util.RectangleInsets var26 = var24.getLabelInsets();
//     var22.setAxisOffset(var26);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var29 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var30 = var29.getEndType();
//     java.awt.Stroke var33 = var29.getItemStroke(0, 0);
//     var22.setRangeZeroBaselineStroke(var33);
//     org.jfree.chart.util.Layer var35 = null;
//     java.util.Collection var36 = var22.getDomainMarkers(var35);
//     org.jfree.chart.util.RectangleInsets var37 = var22.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var39 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var40 = var39.getEndType();
//     java.awt.Stroke var43 = var39.getItemStroke(0, 0);
//     var22.setDomainZeroBaselineStroke(var43);
//     org.jfree.chart.util.RectangleEdge var46 = var22.getDomainAxisEdge(1);
//     var21.setLegendItemGraphicEdge(var46);
//     java.awt.Shape var50 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var53 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var50, Double.NaN, Double.NaN);
//     java.awt.Shape var57 = org.jfree.chart.util.ShapeUtilities.rotateShape(var50, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var60 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var62 = var60.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var65 = new org.jfree.chart.entity.CategoryItemEntity(var50, "hi!", "", (org.jfree.data.category.CategoryDataset)var60, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var66 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var69 = var66.getLegendItem((-1), 100);
//     var66.setBaseShapesFilled(false);
//     java.awt.Paint var73 = var66.getSeriesOutlinePaint((-1));
//     java.awt.Paint var75 = var66.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var76 = new org.jfree.chart.title.LegendGraphic(var50, var75);
//     org.jfree.data.general.PieDataset var77 = null;
//     org.jfree.chart.plot.RingPlot var78 = new org.jfree.chart.plot.RingPlot(var77);
//     org.jfree.chart.plot.Plot var79 = var78.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var80 = var78.getInsets();
//     double var82 = var80.calculateBottomOutset(100.0d);
//     var76.setPadding(var80);
//     org.jfree.chart.util.RectangleAnchor var84 = var76.getShapeLocation();
//     var21.setLegendItemGraphicLocation(var84);
//     
//     // Checks the contract:  equals-hashcode on var7 and var78
//     assertTrue("Contract failed: equals-hashcode on var7 and var78", var7.equals(var78) ? var7.hashCode() == var78.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var78 and var7
//     assertTrue("Contract failed: equals-hashcode on var78 and var7", var78.equals(var7) ? var78.hashCode() == var7.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var8 and var79
//     assertTrue("Contract failed: equals-hashcode on var8 and var79", var8.equals(var79) ? var8.hashCode() == var79.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var79 and var8
//     assertTrue("Contract failed: equals-hashcode on var79 and var8", var79.equals(var8) ? var79.hashCode() == var8.hashCode() : true);
// 
//   }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.util.List var13 = var12.getSubtitles();
    java.awt.Stroke var14 = var12.getBorderStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.title.Title var16 = var12.getSubtitle(1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker(10.0d);
    org.jfree.chart.util.LengthAdjustmentType var2 = var1.getLabelOffsetType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }
// 
// 
//     org.jfree.chart.block.CenterArrangement var0 = new org.jfree.chart.block.CenterArrangement();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, Double.NaN, Double.NaN);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var13 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var15 = var13.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var18 = new org.jfree.chart.entity.CategoryItemEntity(var3, "hi!", "", (org.jfree.data.category.CategoryDataset)var13, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var22 = var19.getLegendItem((-1), 100);
//     var19.setBaseShapesFilled(false);
//     java.awt.Paint var26 = var19.getSeriesOutlinePaint((-1));
//     java.awt.Paint var28 = var19.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var29 = new org.jfree.chart.title.LegendGraphic(var3, var28);
//     org.jfree.data.Range var32 = new org.jfree.data.Range(1.0d, 100.0d);
//     var0.add((org.jfree.chart.block.Block)var29, (java.lang.Object)var32);
//     java.awt.Graphics2D var34 = null;
//     org.jfree.chart.block.RectangleConstraint var37 = new org.jfree.chart.block.RectangleConstraint(50.5d, 10.0d);
//     org.jfree.chart.util.Size2D var38 = var29.arrange(var34, var37);
//     double var39 = var38.getHeight();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 10.0d);
// 
//   }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    boolean var0 = org.jfree.chart.text.TextUtilities.isUseDrawRotatedStringWorkaround();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0 == false);

  }

  public void test311() {}
//   public void test311() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }
// 
// 
//     org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
//     double var2 = var1.getLimit();
//     var1.setLimit(1.0d);
//     org.jfree.chart.plot.MultiplePiePlot var5 = new org.jfree.chart.plot.MultiplePiePlot();
//     double var6 = var5.getLimit();
//     double var7 = var5.getLimit();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var8 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var10 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var8, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var11 = null;
//     org.jfree.chart.plot.RingPlot var12 = new org.jfree.chart.plot.RingPlot(var11);
//     org.jfree.chart.plot.Plot var13 = var12.getRootPlot();
//     var8.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var13);
//     java.lang.Comparable var15 = null;
//     java.lang.Number var17 = var8.getMeanValue(var15, (java.lang.Comparable)100.0f);
//     var5.setDataset((org.jfree.data.category.CategoryDataset)var8);
//     org.jfree.chart.util.TableOrder var19 = var5.getDataExtractOrder();
//     var1.setDataExtractOrder(var19);
//     org.jfree.chart.JFreeChart var21 = var1.getPieChart();
//     var21.fireChartChanged();
//     java.awt.Paint var23 = var21.getBorderPaint();
//     org.jfree.data.general.PieDataset var24 = null;
//     org.jfree.chart.plot.RingPlot var25 = new org.jfree.chart.plot.RingPlot(var24);
//     java.awt.Paint var26 = var25.getBaseSectionPaint();
//     double var27 = var25.getMaximumLabelWidth();
//     org.jfree.chart.event.PlotChangeEvent var28 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var25);
//     var25.setMinimumArcAngleToDraw(100.0d);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var36 = var33.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var37 = null;
//     org.jfree.chart.plot.RingPlot var38 = new org.jfree.chart.plot.RingPlot(var37);
//     org.jfree.chart.plot.Plot var39 = var38.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var40 = null;
//     var38.axisChanged(var40);
//     org.jfree.chart.JFreeChart var43 = new org.jfree.chart.JFreeChart("hi!", var36, (org.jfree.chart.plot.Plot)var38, true);
//     java.lang.Object var44 = var38.clone();
//     java.awt.Stroke var45 = var38.getSeparatorStroke();
//     java.awt.Stroke var46 = var38.getSeparatorStroke();
//     var25.setBaseSectionOutlineStroke(var46);
//     java.awt.Stroke var48 = var25.getLabelLinkStroke();
//     org.jfree.chart.plot.ValueMarker var49 = new org.jfree.chart.plot.ValueMarker(1.0d, var23, var48);
//     
//     // Checks the contract:  equals-hashcode on var12 and var38
//     assertTrue("Contract failed: equals-hashcode on var12 and var38", var12.equals(var38) ? var12.hashCode() == var38.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var38 and var12
//     assertTrue("Contract failed: equals-hashcode on var38 and var12", var38.equals(var12) ? var38.hashCode() == var12.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var39
//     assertTrue("Contract failed: equals-hashcode on var13 and var39", var13.equals(var39) ? var13.hashCode() == var39.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var39 and var13
//     assertTrue("Contract failed: equals-hashcode on var39 and var13", var39.equals(var13) ? var39.hashCode() == var13.hashCode() : true);
// 
//   }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    org.jfree.chart.text.TextBlock var0 = new org.jfree.chart.text.TextBlock();
    java.awt.Graphics2D var1 = null;
    org.jfree.chart.text.TextBlockAnchor var4 = null;
    var0.draw(var1, 0.0f, 1.0f, var4, (-1.0f), (-1.0f), 3.0d);
    org.jfree.chart.util.HorizontalAlignment var9 = var0.getLineAlignment();
    org.jfree.chart.text.TextLine var10 = var0.getLastLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test313() {}
//   public void test313() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }
// 
// 
//     org.jfree.chart.plot.CategoryMarker var1 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var2 = var1.getLabelPaint();
//     java.lang.Comparable var3 = var1.getKey();
//     java.lang.String var4 = var1.getLabel();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var10 = var7.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var11 = null;
//     org.jfree.chart.plot.RingPlot var12 = new org.jfree.chart.plot.RingPlot(var11);
//     org.jfree.chart.plot.Plot var13 = var12.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var14 = null;
//     var12.axisChanged(var14);
//     org.jfree.chart.JFreeChart var17 = new org.jfree.chart.JFreeChart("hi!", var10, (org.jfree.chart.plot.Plot)var12, true);
//     var1.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var12);
//     java.awt.Paint var19 = var1.getPaint();
//     var1.setKey((java.lang.Comparable)1.0d);
//     java.awt.Paint var22 = var1.getPaint();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var25 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var28 = var25.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var32 = null;
//     var30.axisChanged(var32);
//     org.jfree.chart.JFreeChart var35 = new org.jfree.chart.JFreeChart("hi!", var28, (org.jfree.chart.plot.Plot)var30, true);
//     java.lang.Object var36 = var30.clone();
//     org.jfree.chart.util.HorizontalAlignment var37 = null;
//     org.jfree.chart.util.VerticalAlignment var38 = null;
//     org.jfree.chart.block.FlowArrangement var41 = new org.jfree.chart.block.FlowArrangement(var37, var38, 100.0d, 10.0d);
//     var41.clear();
//     org.jfree.chart.block.Arrangement var43 = null;
//     org.jfree.chart.title.LegendTitle var44 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var30, (org.jfree.chart.block.Arrangement)var41, var43);
//     java.lang.String var45 = var30.getNoDataMessage();
//     org.jfree.chart.urls.PieURLGenerator var46 = null;
//     var30.setURLGenerator(var46);
//     java.awt.Stroke var48 = var30.getBaseSectionOutlineStroke();
//     var1.setStroke(var48);
//     
//     // Checks the contract:  equals-hashcode on var12 and var30
//     assertTrue("Contract failed: equals-hashcode on var12 and var30", var12.equals(var30) ? var12.hashCode() == var30.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var30 and var12
//     assertTrue("Contract failed: equals-hashcode on var30 and var12", var30.equals(var12) ? var30.hashCode() == var12.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var13 and var31
//     assertTrue("Contract failed: equals-hashcode on var13 and var31", var13.equals(var31) ? var13.hashCode() == var31.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var31 and var13
//     assertTrue("Contract failed: equals-hashcode on var31 and var13", var31.equals(var13) ? var31.hashCode() == var13.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var17 and var35
//     assertTrue("Contract failed: equals-hashcode on var17 and var35", var17.equals(var35) ? var17.hashCode() == var35.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var35 and var17
//     assertTrue("Contract failed: equals-hashcode on var35 and var17", var35.equals(var17) ? var35.hashCode() == var17.hashCode() : true);
// 
//   }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    java.lang.Object var0 = null;
    org.jfree.chart.renderer.category.StackedAreaRenderer var3 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var6 = var3.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var7 = null;
    org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
    org.jfree.chart.plot.Plot var9 = var8.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var10 = null;
    var8.axisChanged(var10);
    org.jfree.chart.JFreeChart var13 = new org.jfree.chart.JFreeChart("hi!", var6, (org.jfree.chart.plot.Plot)var8, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var17 = var14.getLegendItem((-1), 100);
    var14.setBaseShapesFilled(false);
    java.awt.Paint var21 = var14.getSeriesOutlinePaint((-1));
    boolean var22 = var13.equals((java.lang.Object)var14);
    var13.setTitle("ThreadContext");
    org.jfree.chart.event.ChartProgressListener var25 = null;
    var13.addProgressListener(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.event.ChartProgressEvent var29 = new org.jfree.chart.event.ChartProgressEvent(var0, var13, 0, 5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test315() {}
//   public void test315() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.data.Range var15 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var16 = var15.toString();
//     org.jfree.data.Range var18 = org.jfree.data.Range.shift(var15, 0.0d);
//     var0.setRange(var18);
//     org.jfree.data.time.Month var20 = new org.jfree.data.time.Month();
//     long var21 = var20.getSerialIndex();
//     java.util.Date var22 = var20.getEnd();
//     org.jfree.data.time.Month var23 = new org.jfree.data.time.Month();
//     long var24 = var23.getSerialIndex();
//     java.util.Date var25 = var23.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var26 = new org.jfree.data.time.SimpleTimePeriod(var22, var25);
//     var0.setMaximumDate(var22);
//     org.jfree.chart.axis.NumberAxis3D var29 = new org.jfree.chart.axis.NumberAxis3D("");
//     java.awt.Paint var30 = var29.getTickLabelPaint();
//     org.jfree.chart.axis.NumberAxis3D var32 = new org.jfree.chart.axis.NumberAxis3D("");
//     org.jfree.chart.axis.NumberAxis3D var34 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var35 = var34.isTickMarksVisible();
//     org.jfree.data.Range var38 = new org.jfree.data.Range(1.0d, 100.0d);
//     var34.setRangeWithMargins(var38, false, false);
//     var32.setRangeWithMargins(var38);
//     var29.setDefaultAutoRange(var38);
//     org.jfree.chart.block.RectangleConstraint var45 = new org.jfree.chart.block.RectangleConstraint(var38, 10.0d);
//     var0.setRangeWithMargins(var38);
//     org.jfree.chart.block.RectangleConstraint var48 = new org.jfree.chart.block.RectangleConstraint(var38, 1.0E-8d);
//     double var50 = var38.constrain(0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "Range[1.0,100.0]"+ "'", var16.equals("Range[1.0,100.0]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == 1.0d);
// 
//   }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Year var1 = org.jfree.data.time.Year.parseYear("org.jfree.data.UnknownKeyException: ");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    var1.setSectionDepth(2.0d);
    boolean var6 = var1.getIgnoreZeroValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }
// 
// 
//     org.jfree.data.time.Month var0 = new org.jfree.data.time.Month();
//     long var1 = var0.getSerialIndex();
//     java.util.Date var2 = var0.getEnd();
//     org.jfree.chart.text.TextBlock var3 = null;
//     org.jfree.chart.text.TextBlockAnchor var4 = null;
//     org.jfree.chart.plot.XYPlot var5 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
//     var7.configure();
//     org.jfree.chart.util.RectangleInsets var9 = var7.getLabelInsets();
//     var5.setAxisOffset(var9);
//     org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var13 = var12.getOutlineStroke();
//     var5.addDomainMarker((org.jfree.chart.plot.Marker)var12);
//     var12.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var17 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var18.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var22 = var18.getBaseLinesVisible();
//     java.lang.Boolean var24 = var18.getSeriesVisibleInLegend(10);
//     java.awt.Paint var25 = var18.getBaseItemLabelPaint();
//     java.awt.Color var28 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var29 = null;
//     float[] var30 = var28.getRGBColorComponents(var29);
//     var18.setBaseItemLabelPaint((java.awt.Paint)var28);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var34 = var33.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var35 = var33.getBaseNegativeItemLabelPosition();
//     var18.setBasePositiveItemLabelPosition(var35, true);
//     var17.setPositiveItemLabelPositionFallback(var35);
//     org.jfree.chart.text.TextAnchor var39 = var35.getRotationAnchor();
//     var12.setLabelTextAnchor(var39);
//     org.jfree.chart.axis.CategoryTick var42 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var2, var3, var4, var39, 2.0d);
//     double var43 = var42.getAngle();
//     double var44 = var42.getAngle();
//     java.lang.String var45 = var42.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 2.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 2.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
// 
//   }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.util.RectangleInsets var6 = var0.getAxisOffset();
    boolean var7 = var0.isRangeCrosshairVisible();
    org.jfree.chart.entity.EntityCollection var10 = null;
    org.jfree.chart.ChartRenderingInfo var11 = new org.jfree.chart.ChartRenderingInfo(var10);
    org.jfree.chart.plot.PlotRenderingInfo var12 = var11.getPlotInfo();
    org.jfree.chart.renderer.category.CategoryItemRendererState var13 = new org.jfree.chart.renderer.category.CategoryItemRendererState(var12);
    java.awt.geom.Rectangle2D var14 = null;
    org.jfree.chart.util.RectangleAnchor var15 = null;
    java.awt.geom.Point2D var16 = org.jfree.chart.util.RectangleAnchor.coordinates(var14, var15);
    var0.zoomRangeAxes(10.0d, 10.0d, var12, var16);
    org.jfree.chart.util.Layer var19 = null;
    java.util.Collection var20 = var0.getRangeMarkers(100, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test320() {}
//   public void test320() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }
// 
// 
//     org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
//     org.jfree.data.category.CategoryDataset var1 = null;
//     org.jfree.chart.axis.CategoryAxis var3 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var3.setUpperMargin(0.0d);
//     int var6 = var3.getMaximumCategoryLabelLines();
//     java.lang.Object var7 = var3.clone();
//     org.jfree.chart.axis.DateAxis var8 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var12 = var9.getLegendItem((-1), 100);
//     var9.setBaseShapesFilled(false);
//     java.awt.Paint var16 = var9.getSeriesOutlinePaint((-1));
//     java.awt.Paint var18 = var9.lookupSeriesOutlinePaint(0);
//     var8.setLabelPaint(var18);
//     double var20 = var8.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var21 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var24 = var21.getLegendItem(2, 0);
//     double var25 = var21.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var28 = var21.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var32 = var29.getLegendItem((-1), 100);
//     var29.setBaseShapesFilled(false);
//     java.awt.Paint var37 = var29.getItemOutlinePaint(10, 1);
//     var21.setErrorIndicatorPaint(var37);
//     org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot(var1, var3, (org.jfree.chart.axis.ValueAxis)var8, (org.jfree.chart.renderer.category.CategoryItemRenderer)var21);
//     var39.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var43 = var39.getDomainAxis(0);
//     var39.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.SortOrder var46 = var39.getColumnRenderingOrder();
//     var0.sortByValues(var46);
//     org.jfree.data.category.CategoryDataset var48 = null;
//     org.jfree.chart.axis.CategoryAxis var50 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var50.setUpperMargin(0.0d);
//     int var53 = var50.getMaximumCategoryLabelLines();
//     java.lang.Object var54 = var50.clone();
//     org.jfree.chart.axis.DateAxis var55 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var59 = var56.getLegendItem((-1), 100);
//     var56.setBaseShapesFilled(false);
//     java.awt.Paint var63 = var56.getSeriesOutlinePaint((-1));
//     java.awt.Paint var65 = var56.lookupSeriesOutlinePaint(0);
//     var55.setLabelPaint(var65);
//     double var67 = var55.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var68 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var71 = var68.getLegendItem(2, 0);
//     double var72 = var68.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var75 = var68.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var76 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var79 = var76.getLegendItem((-1), 100);
//     var76.setBaseShapesFilled(false);
//     java.awt.Paint var84 = var76.getItemOutlinePaint(10, 1);
//     var68.setErrorIndicatorPaint(var84);
//     org.jfree.chart.plot.CategoryPlot var86 = new org.jfree.chart.plot.CategoryPlot(var48, var50, (org.jfree.chart.axis.ValueAxis)var55, (org.jfree.chart.renderer.category.CategoryItemRenderer)var68);
//     org.jfree.chart.axis.CategoryAnchor var87 = var86.getDomainGridlinePosition();
//     org.jfree.data.category.CategoryDataset var88 = var86.getDataset();
//     org.jfree.chart.LegendItemCollection var89 = var86.getLegendItems();
//     var86.clearDomainAxes();
//     org.jfree.chart.util.SortOrder var91 = var86.getRowRenderingOrder();
//     var0.sortByKeys(var91);
//     
//     // Checks the contract:  equals-hashcode on var28 and var75
//     assertTrue("Contract failed: equals-hashcode on var28 and var75", var28.equals(var75) ? var28.hashCode() == var75.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var75 and var28
//     assertTrue("Contract failed: equals-hashcode on var75 and var28", var75.equals(var28) ? var75.hashCode() == var28.hashCode() : true);
// 
//   }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }


    org.jfree.data.general.WaferMapDataset var0 = null;
    org.jfree.chart.plot.WaferMapPlot var1 = new org.jfree.chart.plot.WaferMapPlot(var0);
    org.jfree.chart.util.RectangleInsets var2 = var1.getInsets();
    java.lang.String var3 = var1.getPlotType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "WMAP_Plot"+ "'", var3.equals("WMAP_Plot"));

  }

  public void test322() {}
//   public void test322() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Comparable var39 = var17.getRowKey((-457));
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
// 
//   }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }


    org.jfree.chart.block.RectangleConstraint var2 = new org.jfree.chart.block.RectangleConstraint((-8.0d), 0.0d);
    org.jfree.chart.block.RectangleConstraint var4 = var2.toFixedHeight(90.0d);
    org.jfree.data.Range var5 = var4.getHeightRange();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    boolean var6 = var0.equals((java.lang.Object)100.0f);
    java.awt.Stroke var8 = var0.lookupSeriesStroke(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test325() {}
//   public void test325() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var32 = var30.getInsets();
//     double var34 = var32.calculateBottomOutset(100.0d);
//     var28.setPadding(var32);
//     org.jfree.chart.util.RectangleInsets var36 = var28.getMargin();
//     org.jfree.chart.util.RectangleAnchor var37 = var28.getShapeLocation();
//     java.awt.Stroke var38 = var28.getOutlineStroke();
//     org.jfree.chart.renderer.category.GanttRenderer var39 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var42 = var41.getLabelPaint();
//     var39.setCompletePaint(var42);
//     var28.setOutlinePaint(var42);
//     var28.setShapeVisible(true);
//     org.jfree.chart.plot.XYPlot var47 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var49 = new org.jfree.chart.axis.NumberAxis3D("");
//     var49.configure();
//     org.jfree.chart.util.RectangleInsets var51 = var49.getLabelInsets();
//     var47.setAxisOffset(var51);
//     org.jfree.chart.plot.CategoryMarker var54 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var55 = var54.getOutlineStroke();
//     var47.addDomainMarker((org.jfree.chart.plot.Marker)var54);
//     org.jfree.chart.renderer.xy.XYItemRenderer var57 = var47.getRenderer();
//     org.jfree.chart.axis.ValueAxis var59 = var47.getDomainAxis(1);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var62 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var65 = var62.getItemLabelFont((-1), 0);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var66 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var66.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var70 = var66.getBaseLinesVisible();
//     java.lang.Boolean var72 = var66.getSeriesVisibleInLegend(10);
//     java.awt.Paint var73 = var66.getBaseItemLabelPaint();
//     org.jfree.chart.text.TextFragment var74 = new org.jfree.chart.text.TextFragment("", var65, var73);
//     var47.setRangeZeroBaselinePaint(var73);
//     var28.setFillPaint(var73);
//     
//     // Checks the contract:  equals-hashcode on var41 and var54
//     assertTrue("Contract failed: equals-hashcode on var41 and var54", var41.equals(var54) ? var41.hashCode() == var54.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var54 and var41
//     assertTrue("Contract failed: equals-hashcode on var54 and var41", var54.equals(var41) ? var54.hashCode() == var41.hashCode() : true);
// 
//   }

  public void test326() {}
//   public void test326() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }
// 
// 
//     org.jfree.data.time.Month var2 = new org.jfree.data.time.Month();
//     long var3 = var2.getSerialIndex();
//     java.util.Date var4 = var2.getEnd();
//     org.jfree.chart.text.TextBlock var5 = null;
//     org.jfree.chart.text.TextBlockAnchor var6 = null;
//     org.jfree.chart.plot.XYPlot var7 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var9 = new org.jfree.chart.axis.NumberAxis3D("");
//     var9.configure();
//     org.jfree.chart.util.RectangleInsets var11 = var9.getLabelInsets();
//     var7.setAxisOffset(var11);
//     org.jfree.chart.plot.CategoryMarker var14 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var15 = var14.getOutlineStroke();
//     var7.addDomainMarker((org.jfree.chart.plot.Marker)var14);
//     var14.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var19 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var20.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var24 = var20.getBaseLinesVisible();
//     java.lang.Boolean var26 = var20.getSeriesVisibleInLegend(10);
//     java.awt.Paint var27 = var20.getBaseItemLabelPaint();
//     java.awt.Color var30 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var31 = null;
//     float[] var32 = var30.getRGBColorComponents(var31);
//     var20.setBaseItemLabelPaint((java.awt.Paint)var30);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var35 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var36 = var35.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var37 = var35.getBaseNegativeItemLabelPosition();
//     var20.setBasePositiveItemLabelPosition(var37, true);
//     var19.setPositiveItemLabelPositionFallback(var37);
//     org.jfree.chart.text.TextAnchor var41 = var37.getRotationAnchor();
//     var14.setLabelTextAnchor(var41);
//     org.jfree.chart.axis.CategoryTick var44 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var4, var5, var6, var41, 2.0d);
//     org.jfree.chart.text.TextAnchor var45 = var44.getRotationAnchor();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var46 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var49 = var46.getLegendItem((-1), 100);
//     var46.setBaseShapesFilled(false);
//     java.awt.Paint var53 = var46.getSeriesOutlinePaint((-1));
//     org.jfree.chart.renderer.category.StackedAreaRenderer var55 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var56 = var55.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var57 = var55.getBaseNegativeItemLabelPosition();
//     var46.setBaseNegativeItemLabelPosition(var57);
//     org.jfree.chart.text.TextAnchor var59 = var57.getTextAnchor();
//     org.jfree.chart.axis.NumberTick var61 = new org.jfree.chart.axis.NumberTick((java.lang.Number)1577894399999L, "AreaRendererEndType.TAPER", var45, var59, 0.0d);
//     
//     // Checks the contract:  equals-hashcode on var37 and var57
//     assertTrue("Contract failed: equals-hashcode on var37 and var57", var37.equals(var57) ? var37.hashCode() == var57.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var57 and var37
//     assertTrue("Contract failed: equals-hashcode on var57 and var37", var57.equals(var37) ? var57.hashCode() == var37.hashCode() : true);
// 
//   }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }


    org.jfree.chart.renderer.category.StatisticalBarRenderer var0 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem(2, 0);
    double var4 = var0.getBase();
    java.awt.Color var7 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var8 = null;
    float[] var9 = var7.getRGBColorComponents(var8);
    java.awt.Color var12 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var13 = null;
    float[] var14 = var12.getRGBColorComponents(var13);
    float[] var15 = var7.getColorComponents(var13);
    var0.setErrorIndicatorPaint((java.awt.Paint)var7);
    org.jfree.chart.labels.ItemLabelPosition var17 = var0.getNegativeItemLabelPositionFallback();
    var0.setMinimumBarLength(0.35d);
    boolean var20 = var0.getAutoPopulateSeriesOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    org.jfree.chart.ui.BasicProjectInfo var4 = new org.jfree.chart.ui.BasicProjectInfo("ThreadContext", "2014", "-100,0,0,0,0,100,0,100,0,0,100,0,100,0,0,0,0,-100,0,-100,0,0,-100,0,-100,0", "");
    org.jfree.chart.ui.BasicProjectInfo var5 = new org.jfree.chart.ui.BasicProjectInfo();
    java.lang.String var6 = var5.getInfo();
    var5.setInfo("");
    var5.setName("Range[1.0,100.0]");
    java.lang.String var11 = var5.getName();
    org.jfree.chart.ui.BasicProjectInfo var12 = new org.jfree.chart.ui.BasicProjectInfo();
    java.lang.String var13 = var12.getInfo();
    var12.setInfo("");
    var5.addLibrary((org.jfree.chart.ui.Library)var12);
    var4.addOptionalLibrary((org.jfree.chart.ui.Library)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Range[1.0,100.0]"+ "'", var11.equals("Range[1.0,100.0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
    java.awt.Paint var3 = var1.getBaseFillPaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var5 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var5.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var9 = var5.getBaseLinesVisible();
    boolean var11 = var5.equals((java.lang.Object)100.0f);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var13.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var20 = var17.getLegendItem((-1), 100);
    var17.setBaseShapesFilled(false);
    java.awt.Paint var25 = var17.getItemOutlinePaint(10, 1);
    var13.setBaseItemLabelPaint(var25);
    var5.setSeriesFillPaint(100, var25, false);
    org.jfree.chart.labels.ItemLabelPosition var29 = var5.getBaseNegativeItemLabelPosition();
    var1.setSeriesNegativeItemLabelPosition(2, var29);
    org.jfree.chart.plot.CategoryMarker var33 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Paint var34 = var33.getLabelPaint();
    java.lang.Comparable var35 = var33.getKey();
    java.lang.String var36 = var33.getLabel();
    org.jfree.chart.renderer.category.StackedAreaRenderer var39 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var42 = var39.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var43 = null;
    org.jfree.chart.plot.RingPlot var44 = new org.jfree.chart.plot.RingPlot(var43);
    org.jfree.chart.plot.Plot var45 = var44.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var46 = null;
    var44.axisChanged(var46);
    org.jfree.chart.JFreeChart var49 = new org.jfree.chart.JFreeChart("hi!", var42, (org.jfree.chart.plot.Plot)var44, true);
    var33.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var44);
    java.awt.Paint var51 = var33.getPaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setSeriesOutlinePaint((-457), var51, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + true+ "'", var35.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test330() {}
//   public void test330() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }
// 
// 
//     org.jfree.data.category.CategoryDataset var0 = null;
//     org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var2.setUpperMargin(0.0d);
//     int var5 = var2.getMaximumCategoryLabelLines();
//     java.lang.Object var6 = var2.clone();
//     org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
//     var8.setBaseShapesFilled(false);
//     java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
//     java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
//     var7.setLabelPaint(var17);
//     double var19 = var7.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
//     double var24 = var20.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
//     var20.setErrorIndicatorPaint(var36);
//     org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
//     var38.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxisForDataset(1);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var43 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var46 = var43.getLegendItem((-1), 100);
//     int var47 = var38.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer)var43);
//     org.jfree.chart.renderer.category.MinMaxCategoryRenderer var49 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var51 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var52 = var51.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var53 = var51.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var54 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var56 = var54.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var59 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var62 = var59.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var63 = null;
//     org.jfree.chart.plot.RingPlot var64 = new org.jfree.chart.plot.RingPlot(var63);
//     org.jfree.chart.plot.Plot var65 = var64.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var66 = null;
//     var64.axisChanged(var66);
//     org.jfree.chart.JFreeChart var69 = new org.jfree.chart.JFreeChart("hi!", var62, (org.jfree.chart.plot.Plot)var64, true);
//     boolean var70 = var54.equals((java.lang.Object)var62);
//     var54.validateObject();
//     org.jfree.data.Range var72 = var51.findRangeBounds((org.jfree.data.category.CategoryDataset)var54);
//     java.awt.Stroke var74 = var51.lookupSeriesStroke(10);
//     var49.setGroupStroke(var74);
//     var43.setSeriesOutlineStroke(15, var74, false);
//     boolean var78 = var43.getBaseLinesVisible();
//     var43.setBaseCreateEntities(true, true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var56 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var70 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var78 == true);
// 
//   }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    double var1 = var0.getLabelAngle();
    java.awt.Shape var4 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var4, Double.NaN, Double.NaN);
    var0.setDownArrow(var4);
    java.awt.Font var9 = var0.getTickLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem((-1), 100);
    var0.setBaseShapesFilled(false);
    org.jfree.data.category.CategoryDataset var6 = null;
    org.jfree.chart.plot.MultiplePiePlot var7 = new org.jfree.chart.plot.MultiplePiePlot(var6);
    java.awt.Paint var8 = var7.getAggregatedItemsPaint();
    var0.setBaseItemLabelPaint(var8, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }


    org.jfree.chart.axis.NumberAxis3D var5 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var6 = var5.isTickMarksVisible();
    java.awt.Shape var7 = var5.getDownArrow();
    java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, 100.0d, 0.2d);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var11.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var15 = var11.getBaseLinesVisible();
    java.lang.Boolean var17 = var11.getSeriesVisibleInLegend(10);
    java.awt.Paint var18 = var11.getBaseItemLabelPaint();
    java.awt.Color var21 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var22 = null;
    float[] var23 = var21.getRGBColorComponents(var22);
    var11.setBaseItemLabelPaint((java.awt.Paint)var21);
    int var25 = var21.getGreen();
    java.lang.String var26 = var21.toString();
    org.jfree.chart.LegendItem var27 = new org.jfree.chart.LegendItem("hi!", "ThreadContext", "Pie Plot", "Range[1.0,100.0]", var10, (java.awt.Paint)var21);
    java.lang.Comparable var28 = var27.getSeriesKey();
    int var29 = var27.getSeriesIndex();
    java.awt.Shape var30 = var27.getShape();
    java.awt.Stroke var31 = var27.getOutlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var26.equals("java.awt.Color[r=0,g=0,b=10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    org.jfree.chart.axis.CategoryAxis3D var1 = new org.jfree.chart.axis.CategoryAxis3D("Pie Plot");
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    double var5 = var4.getInteriorGap();
    org.jfree.chart.renderer.category.StackedAreaRenderer var8 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var11 = var8.getItemLabelFont((-1), 0);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var12.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var16 = var12.getBaseLinesVisible();
    java.lang.Boolean var18 = var12.getSeriesVisibleInLegend(10);
    java.awt.Paint var19 = var12.getBaseItemLabelPaint();
    org.jfree.chart.text.TextFragment var20 = new org.jfree.chart.text.TextFragment("", var11, var19);
    var4.setLabelFont(var11);
    var1.setTickLabelFont((java.lang.Comparable)1L, var11);
    int var23 = var1.getMaximumCategoryLabelLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getColumnCount();
    int var2 = var0.getRowCount();
    var0.removeColumn((java.lang.Comparable)10.0d);
    int var5 = var0.getRowCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test336() {}
//   public void test336() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }
// 
// 
//     org.jfree.data.KeyToGroupMap var0 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var1 = var0.getGroups();
//     java.util.List var2 = var0.getGroups();
//     java.lang.Object var3 = var0.clone();
//     org.jfree.data.time.Month var4 = new org.jfree.data.time.Month();
//     int var5 = var0.getGroupIndex((java.lang.Comparable)var4);
//     long var6 = var4.getLastMillisecond();
//     java.util.Calendar var7 = null;
//     var4.peg(var7);
// 
//   }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createDiagonalCross((-1.0f), 0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test338() {}
//   public void test338() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }
// 
// 
//     org.jfree.data.time.Month var0 = new org.jfree.data.time.Month();
//     long var1 = var0.getSerialIndex();
//     java.util.Date var2 = var0.getEnd();
//     org.jfree.chart.text.TextBlock var3 = null;
//     org.jfree.chart.text.TextBlockAnchor var4 = null;
//     org.jfree.chart.plot.XYPlot var5 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
//     var7.configure();
//     org.jfree.chart.util.RectangleInsets var9 = var7.getLabelInsets();
//     var5.setAxisOffset(var9);
//     org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var13 = var12.getOutlineStroke();
//     var5.addDomainMarker((org.jfree.chart.plot.Marker)var12);
//     var12.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var17 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var18.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var22 = var18.getBaseLinesVisible();
//     java.lang.Boolean var24 = var18.getSeriesVisibleInLegend(10);
//     java.awt.Paint var25 = var18.getBaseItemLabelPaint();
//     java.awt.Color var28 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var29 = null;
//     float[] var30 = var28.getRGBColorComponents(var29);
//     var18.setBaseItemLabelPaint((java.awt.Paint)var28);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var34 = var33.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var35 = var33.getBaseNegativeItemLabelPosition();
//     var18.setBasePositiveItemLabelPosition(var35, true);
//     var17.setPositiveItemLabelPositionFallback(var35);
//     org.jfree.chart.text.TextAnchor var39 = var35.getRotationAnchor();
//     var12.setLabelTextAnchor(var39);
//     org.jfree.chart.axis.CategoryTick var42 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var2, var3, var4, var39, 2.0d);
//     double var43 = var42.getAngle();
//     double var44 = var42.getAngle();
//     org.jfree.chart.text.TextBlockAnchor var45 = var42.getLabelAnchor();
//     java.lang.String var46 = var42.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 2.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 2.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));
// 
//   }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
    var13.setBaseShapesFilled(false);
    java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
    boolean var21 = var12.equals((java.lang.Object)var13);
    org.jfree.chart.title.TextTitle var22 = var12.getTitle();
    org.jfree.chart.util.HorizontalAlignment var23 = var22.getTextAlignment();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    java.awt.Shape var27 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.rotateShape(var27, 50.5d, (-1.0f), (-1.0f));
    java.lang.Object var32 = var22.draw(var24, var25, (java.lang.Object)var27);
    org.jfree.chart.util.HorizontalAlignment var33 = var22.getTextAlignment();
    var22.setExpandToFitSpace(false);
    boolean var36 = var22.getExpandToFitSpace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    var0.setDomainCrosshairValue(0.05d);
    java.awt.Paint var3 = var0.getDomainCrosshairPaint();
    org.jfree.chart.plot.IntervalMarker var7 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
    double var8 = var7.getEndValue();
    var7.setStartValue(0.2d);
    org.jfree.chart.util.Layer var11 = null;
    var0.addRangeMarker(0, (org.jfree.chart.plot.Marker)var7, var11);
    org.jfree.chart.util.RectangleInsets var13 = var7.getLabelOffset();
    java.awt.Stroke var14 = var7.getStroke();
    org.jfree.chart.util.RectangleAnchor var15 = var7.getLabelAnchor();
    org.jfree.chart.text.TextBlockAnchor var16 = null;
    org.jfree.chart.plot.CategoryMarker var18 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Paint var19 = var18.getLabelPaint();
    java.lang.Comparable var20 = var18.getKey();
    java.lang.String var21 = var18.getLabel();
    org.jfree.chart.renderer.category.StackedAreaRenderer var24 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var27 = var24.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var28 = null;
    org.jfree.chart.plot.RingPlot var29 = new org.jfree.chart.plot.RingPlot(var28);
    org.jfree.chart.plot.Plot var30 = var29.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var31 = null;
    var29.axisChanged(var31);
    org.jfree.chart.JFreeChart var34 = new org.jfree.chart.JFreeChart("hi!", var27, (org.jfree.chart.plot.Plot)var29, true);
    var18.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var29);
    java.lang.Comparable var36 = var18.getKey();
    org.jfree.chart.text.TextAnchor var37 = var18.getLabelTextAnchor();
    org.jfree.chart.axis.CategoryLabelWidthType var39 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.axis.CategoryLabelPosition var41 = new org.jfree.chart.axis.CategoryLabelPosition(var15, var16, var37, Double.NaN, var39, 1.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + true+ "'", var20.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + true+ "'", var36.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidWeekdayCode((-16777206));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var0, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var3 = null;
    org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
    org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
    var0.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var5);
    java.lang.Number var9 = var0.getMaxRegularValue((java.lang.Comparable)100.0f, (java.lang.Comparable)10);
    int var11 = var0.getRowIndex((java.lang.Comparable)Double.NaN);
    int var12 = var0.getColumnCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var15 = var0.getMedianValue(0, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    org.jfree.chart.block.RectangleConstraint var2 = new org.jfree.chart.block.RectangleConstraint(12.0d, 0.2d);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createDiamond(100.0f);
    java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var5, 50.5d, (-1.0f), (-1.0f));
    org.jfree.data.general.PieDataset var10 = null;
    org.jfree.chart.plot.RingPlot var11 = new org.jfree.chart.plot.RingPlot(var10);
    java.awt.Paint var12 = var11.getBaseSectionPaint();
    boolean var13 = var11.isOutlineVisible();
    var11.setMaximumLabelWidth(100.0d);
    org.jfree.data.general.PieDataset var16 = null;
    org.jfree.chart.plot.RingPlot var17 = new org.jfree.chart.plot.RingPlot(var16);
    org.jfree.chart.plot.Plot var18 = var17.getRootPlot();
    org.jfree.chart.util.RectangleInsets var19 = var17.getInsets();
    java.awt.Stroke var20 = var17.getLabelOutlineStroke();
    var11.setLabelLinkStroke(var20);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var22.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var26 = var22.getBaseLinesVisible();
    java.lang.Boolean var28 = var22.getSeriesVisibleInLegend(10);
    java.awt.Paint var29 = var22.getBaseItemLabelPaint();
    java.awt.Color var32 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var33 = null;
    float[] var34 = var32.getRGBColorComponents(var33);
    var22.setBaseItemLabelPaint((java.awt.Paint)var32);
    int var36 = var32.getGreen();
    org.jfree.chart.LegendItem var37 = new org.jfree.chart.LegendItem("org.jfree.data.UnknownKeyException: org.jfree.chart.event.RendererChangeEvent[source=false]", "Fourth", "", "Category Plot", var5, var20, (java.awt.Paint)var32);
    int var38 = var32.getRGB();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-16777206));

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    boolean var4 = var3.getAntiAlias();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.CategoryPlot var5 = var3.getCategoryPlot();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    org.jfree.chart.labels.CategoryToolTipGenerator var6 = null;
    var0.setSeriesToolTipGenerator(0, var6);
    org.jfree.chart.plot.DrawingSupplier var8 = var0.getDrawingSupplier();
    org.jfree.chart.LegendItem var11 = var0.getLegendItem((-457), (-16777206));
    java.awt.Paint var13 = var0.getSeriesItemLabelPaint(5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }


    org.jfree.chart.renderer.category.LineRenderer3D var0 = new org.jfree.chart.renderer.category.LineRenderer3D();
    var0.setXOffset(Double.NaN);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    org.jfree.data.gantt.TaskSeries var1 = new org.jfree.data.gantt.TaskSeries("");
    java.lang.Object var2 = var1.clone();
    java.lang.Comparable var3 = var1.getKey();
    org.jfree.data.general.SeriesChangeListener var4 = null;
    var1.removeChangeListener(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    java.lang.String var1 = var0.getPlotType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Multiple Pie Plot"+ "'", var1.equals("Multiple Pie Plot"));

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    org.jfree.chart.axis.CategoryAxis3D var1 = new org.jfree.chart.axis.CategoryAxis3D("Pie Plot");
    double var2 = var1.getCategoryMargin();
    org.jfree.chart.axis.NumberAxis3D var4 = new org.jfree.chart.axis.NumberAxis3D("");
    var4.configure();
    org.jfree.chart.axis.NumberTickUnit var6 = var4.getTickUnit();
    org.jfree.chart.renderer.category.StackedAreaRenderer var9 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var12 = var9.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var13 = null;
    org.jfree.chart.plot.RingPlot var14 = new org.jfree.chart.plot.RingPlot(var13);
    org.jfree.chart.plot.Plot var15 = var14.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var16 = null;
    var14.axisChanged(var16);
    org.jfree.chart.JFreeChart var19 = new org.jfree.chart.JFreeChart("hi!", var12, (org.jfree.chart.plot.Plot)var14, true);
    int var20 = var6.compareTo((java.lang.Object)var14);
    var1.removeChangeListener((org.jfree.chart.event.AxisChangeListener)var14);
    int var22 = var1.getMaximumCategoryLabelLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);

  }

  public void test351() {}
//   public void test351() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }
// 
// 
//     org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
//     org.jfree.data.DefaultKeyedValues2D var2 = new org.jfree.data.DefaultKeyedValues2D(false);
//     var2.clear();
//     java.util.List var4 = var2.getColumnKeys();
//     var0.setExceptionSegments(var4);
//     org.jfree.data.statistics.DefaultStatisticalCategoryDataset var6 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
//     org.jfree.data.time.Year var9 = new org.jfree.data.time.Year();
//     org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(10, var9);
//     org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("PlotOrientation.VERTICAL", (org.jfree.data.time.TimePeriod)var9);
//     org.jfree.chart.axis.DateAxis var12 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
//     var13.setBaseShapesFilled(false);
//     java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
//     java.awt.Paint var22 = var13.lookupSeriesOutlinePaint(0);
//     var12.setLabelPaint(var22);
//     double var24 = var12.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var27 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var30 = var27.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var31 = null;
//     org.jfree.chart.plot.RingPlot var32 = new org.jfree.chart.plot.RingPlot(var31);
//     org.jfree.chart.plot.Plot var33 = var32.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var34 = null;
//     var32.axisChanged(var34);
//     org.jfree.chart.JFreeChart var37 = new org.jfree.chart.JFreeChart("hi!", var30, (org.jfree.chart.plot.Plot)var32, true);
//     java.awt.Paint var38 = var32.getBackgroundPaint();
//     java.awt.Paint var39 = var32.getLabelOutlinePaint();
//     var12.setTickMarkPaint(var39);
//     java.text.DateFormat var43 = null;
//     org.jfree.chart.axis.DateTickUnit var44 = new org.jfree.chart.axis.DateTickUnit(2, 1, var43);
//     var12.setTickUnit(var44, false, false);
//     org.jfree.chart.axis.DateAxis var48 = new org.jfree.chart.axis.DateAxis();
//     java.util.Date var49 = var48.getMaximumDate();
//     java.lang.String var50 = var44.dateToString(var49);
//     java.lang.Number var51 = var6.getStdDevValue((java.lang.Comparable)var9, (java.lang.Comparable)var50);
//     org.jfree.data.Range var53 = var6.getRangeBounds(false);
//     org.jfree.chart.axis.DateAxis var54 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var58 = var55.getLegendItem((-1), 100);
//     var55.setBaseShapesFilled(false);
//     java.awt.Paint var62 = var55.getSeriesOutlinePaint((-1));
//     java.awt.Paint var64 = var55.lookupSeriesOutlinePaint(0);
//     var54.setLabelPaint(var64);
//     boolean var66 = var54.isNegativeArrowVisible();
//     org.jfree.data.Range var69 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var70 = var69.toString();
//     org.jfree.data.Range var72 = org.jfree.data.Range.shift(var69, 0.0d);
//     var54.setRange(var72);
//     org.jfree.data.time.Month var74 = new org.jfree.data.time.Month();
//     long var75 = var74.getSerialIndex();
//     java.util.Date var76 = var74.getEnd();
//     org.jfree.data.time.Month var77 = new org.jfree.data.time.Month();
//     long var78 = var77.getSerialIndex();
//     java.util.Date var79 = var77.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var80 = new org.jfree.data.time.SimpleTimePeriod(var76, var79);
//     var54.setMaximumDate(var76);
//     org.jfree.data.time.Month var82 = new org.jfree.data.time.Month();
//     long var83 = var82.getSerialIndex();
//     java.util.Date var84 = var82.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var85 = new org.jfree.data.time.SimpleTimePeriod(var76, var84);
//     java.lang.Number var87 = var6.getValue((java.lang.Comparable)var84, (java.lang.Comparable)"SortOrder.ASCENDING");
//     org.jfree.chart.axis.SegmentedTimeline.Segment var88 = var0.getSegment(var84);
//     var0.addBaseTimelineExclusions(1388563200000L, 100L);
// 
//   }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var24 = new org.jfree.chart.axis.NumberAxis3D("");
//     var24.configure();
//     org.jfree.chart.util.RectangleInsets var26 = var24.getLabelInsets();
//     var22.setAxisOffset(var26);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var29 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var30 = var29.getEndType();
//     java.awt.Stroke var33 = var29.getItemStroke(0, 0);
//     var22.setRangeZeroBaselineStroke(var33);
//     org.jfree.chart.util.Layer var35 = null;
//     java.util.Collection var36 = var22.getDomainMarkers(var35);
//     org.jfree.chart.util.RectangleInsets var37 = var22.getInsets();
//     var21.setItemLabelPadding(var37);
//     java.awt.Graphics2D var39 = null;
//     java.awt.Shape var42 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var45 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var42, Double.NaN, Double.NaN);
//     java.awt.Shape var49 = org.jfree.chart.util.ShapeUtilities.rotateShape(var42, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var52 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var54 = var52.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var57 = new org.jfree.chart.entity.CategoryItemEntity(var42, "hi!", "", (org.jfree.data.category.CategoryDataset)var52, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var58 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var61 = var58.getLegendItem((-1), 100);
//     var58.setBaseShapesFilled(false);
//     java.awt.Paint var65 = var58.getSeriesOutlinePaint((-1));
//     java.awt.Paint var67 = var58.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var68 = new org.jfree.chart.title.LegendGraphic(var42, var67);
//     org.jfree.data.general.PieDataset var69 = null;
//     org.jfree.chart.plot.RingPlot var70 = new org.jfree.chart.plot.RingPlot(var69);
//     org.jfree.chart.plot.Plot var71 = var70.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var72 = var70.getInsets();
//     double var74 = var72.calculateBottomOutset(100.0d);
//     var68.setPadding(var72);
//     org.jfree.chart.util.RectangleAnchor var76 = var68.getShapeLocation();
//     var68.setLineVisible(false);
//     boolean var79 = var68.isLineVisible();
//     java.awt.geom.Rectangle2D var80 = var68.getBounds();
//     org.jfree.chart.axis.AxisState var81 = new org.jfree.chart.axis.AxisState();
//     java.lang.Object var82 = var21.draw(var39, var80, (java.lang.Object)var81);
// 
//   }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }


    org.jfree.data.gantt.TaskSeries var1 = new org.jfree.data.gantt.TaskSeries("");
    java.lang.Comparable var2 = var1.getKey();
    org.jfree.data.gantt.Task var3 = null;
    var1.remove(var3);
    java.lang.Object var5 = var1.clone();
    java.awt.Shape var8 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    java.awt.Shape var11 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var8, Double.NaN, Double.NaN);
    java.awt.Shape var15 = org.jfree.chart.util.ShapeUtilities.rotateShape(var8, 10.0d, 0.0f, 0.0f);
    boolean var16 = var1.equals((java.lang.Object)10.0d);
    java.util.List var17 = var1.getTasks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.util.List var13 = var12.getSubtitles();
    org.jfree.chart.entity.EntityCollection var18 = null;
    org.jfree.chart.ChartRenderingInfo var19 = new org.jfree.chart.ChartRenderingInfo(var18);
    java.awt.image.BufferedImage var20 = var12.createBufferedImage(4, 100, 1.0d, 10.0d, var19);
    org.jfree.chart.entity.EntityCollection var21 = null;
    var19.setEntityCollection(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var23 = var0.getDomainAxisEdge();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.data.DefaultKeyedValues2D var27 = new org.jfree.data.DefaultKeyedValues2D(false);
    var27.clear();
    java.util.List var29 = var27.getColumnKeys();
    var0.drawDomainTickBands(var24, var25, var29);
    float var31 = var0.getBackgroundAlpha();
    org.jfree.chart.axis.ValueAxis var32 = var0.getRangeAxis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test356() {}
//   public void test356() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }
// 
// 
//     org.jfree.chart.util.RectangleAnchor var0 = null;
//     org.jfree.chart.text.TextBlockAnchor var1 = null;
//     org.jfree.data.time.Month var2 = new org.jfree.data.time.Month();
//     long var3 = var2.getSerialIndex();
//     java.util.Date var4 = var2.getEnd();
//     org.jfree.chart.text.TextBlock var5 = null;
//     org.jfree.chart.text.TextBlockAnchor var6 = null;
//     org.jfree.chart.plot.XYPlot var7 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var9 = new org.jfree.chart.axis.NumberAxis3D("");
//     var9.configure();
//     org.jfree.chart.util.RectangleInsets var11 = var9.getLabelInsets();
//     var7.setAxisOffset(var11);
//     org.jfree.chart.plot.CategoryMarker var14 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var15 = var14.getOutlineStroke();
//     var7.addDomainMarker((org.jfree.chart.plot.Marker)var14);
//     var14.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var19 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var20.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var24 = var20.getBaseLinesVisible();
//     java.lang.Boolean var26 = var20.getSeriesVisibleInLegend(10);
//     java.awt.Paint var27 = var20.getBaseItemLabelPaint();
//     java.awt.Color var30 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var31 = null;
//     float[] var32 = var30.getRGBColorComponents(var31);
//     var20.setBaseItemLabelPaint((java.awt.Paint)var30);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var35 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var36 = var35.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var37 = var35.getBaseNegativeItemLabelPosition();
//     var20.setBasePositiveItemLabelPosition(var37, true);
//     var19.setPositiveItemLabelPositionFallback(var37);
//     org.jfree.chart.text.TextAnchor var41 = var37.getRotationAnchor();
//     var14.setLabelTextAnchor(var41);
//     org.jfree.chart.axis.CategoryTick var44 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var4, var5, var6, var41, 2.0d);
//     org.jfree.chart.axis.CategoryLabelWidthType var46 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       org.jfree.chart.axis.CategoryLabelPosition var48 = new org.jfree.chart.axis.CategoryLabelPosition(var0, var1, var41, 12.0d, var46, 10.0f);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
// 
//   }

  public void test357() {}
//   public void test357() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }
// 
// 
//     java.awt.geom.Rectangle2D var0 = null;
//     org.jfree.chart.plot.XYPlot var1 = new org.jfree.chart.plot.XYPlot();
//     var1.setDomainCrosshairValue(0.05d);
//     java.awt.Paint var4 = var1.getDomainCrosshairPaint();
//     org.jfree.chart.plot.IntervalMarker var8 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
//     double var9 = var8.getEndValue();
//     var8.setStartValue(0.2d);
//     org.jfree.chart.util.Layer var12 = null;
//     var1.addRangeMarker(0, (org.jfree.chart.plot.Marker)var8, var12);
//     org.jfree.chart.util.RectangleInsets var14 = var8.getLabelOffset();
//     java.awt.Stroke var15 = var8.getStroke();
//     org.jfree.chart.util.RectangleAnchor var16 = var8.getLabelAnchor();
//     java.awt.geom.Point2D var17 = org.jfree.chart.util.RectangleAnchor.coordinates(var0, var16);
// 
//   }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.plot.MultiplePiePlot var38 = new org.jfree.chart.plot.MultiplePiePlot((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.LegendItemCollection var39 = var38.getLegendItems();
//     double var40 = var38.getLimit();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 0.0d);
// 
//   }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    org.jfree.data.DefaultKeyedValue var2 = new org.jfree.data.DefaultKeyedValue((java.lang.Comparable)10, (java.lang.Number)(-1L));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var3.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var7 = var3.getBaseLinesVisible();
    java.lang.Boolean var9 = var3.getSeriesVisibleInLegend(10);
    var3.setBaseSeriesVisibleInLegend(false);
    org.jfree.data.general.PieDataset var13 = null;
    org.jfree.chart.plot.RingPlot var14 = new org.jfree.chart.plot.RingPlot(var13);
    org.jfree.chart.plot.Plot var15 = var14.getRootPlot();
    org.jfree.chart.JFreeChart var16 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var14);
    boolean var17 = var16.getAntiAlias();
    java.awt.Stroke var18 = var16.getBorderStroke();
    var3.setSeriesOutlineStroke(15, var18, true);
    boolean var21 = var2.equals((java.lang.Object)true);
    java.lang.Comparable var22 = var2.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + 10+ "'", var22.equals(10));

  }

  public void test360() {}
//   public void test360() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }
// 
// 
//     org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(2.0d, 100.0d);
//     double var3 = var2.getYOffset();
//     org.jfree.chart.plot.CategoryMarker var5 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var6 = var5.getLabelPaint();
//     java.lang.Comparable var7 = var5.getKey();
//     java.lang.String var8 = var5.getLabel();
//     var5.setDrawAsLine(true);
//     java.awt.Shape var13 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var16 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var13, Double.NaN, Double.NaN);
//     java.awt.Shape var20 = org.jfree.chart.util.ShapeUtilities.rotateShape(var13, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var23 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var25 = var23.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var28 = new org.jfree.chart.entity.CategoryItemEntity(var13, "hi!", "", (org.jfree.data.category.CategoryDataset)var23, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var32 = var29.getLegendItem((-1), 100);
//     var29.setBaseShapesFilled(false);
//     java.awt.Paint var36 = var29.getSeriesOutlinePaint((-1));
//     java.awt.Paint var38 = var29.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var39 = new org.jfree.chart.title.LegendGraphic(var13, var38);
//     org.jfree.data.general.PieDataset var40 = null;
//     org.jfree.chart.plot.RingPlot var41 = new org.jfree.chart.plot.RingPlot(var40);
//     org.jfree.chart.plot.Plot var42 = var41.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var43 = var41.getInsets();
//     double var45 = var43.calculateBottomOutset(100.0d);
//     var39.setPadding(var43);
//     org.jfree.chart.util.RectangleInsets var47 = var39.getMargin();
//     org.jfree.chart.util.RectangleAnchor var48 = var39.getShapeAnchor();
//     var5.setLabelAnchor(var48);
//     org.jfree.chart.event.MarkerChangeEvent var50 = null;
//     var5.notifyListeners(var50);
//     java.awt.Paint var52 = var5.getLabelPaint();
//     var2.setWallPaint(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == 100.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var7 + "' != '" + true+ "'", var7.equals(true));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == 4.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
// 
//   }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    float var1 = var0.getForegroundAlpha();
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis();
    org.jfree.chart.axis.NumberAxis3D var9 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var10 = var9.isTickMarksVisible();
    java.awt.Shape var11 = var9.getDownArrow();
    java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var11, 100.0d, 0.2d);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var15.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var19 = var15.getBaseLinesVisible();
    java.lang.Boolean var21 = var15.getSeriesVisibleInLegend(10);
    java.awt.Paint var22 = var15.getBaseItemLabelPaint();
    java.awt.Color var25 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var26 = null;
    float[] var27 = var25.getRGBColorComponents(var26);
    var15.setBaseItemLabelPaint((java.awt.Paint)var25);
    int var29 = var25.getGreen();
    java.lang.String var30 = var25.toString();
    org.jfree.chart.LegendItem var31 = new org.jfree.chart.LegendItem("hi!", "ThreadContext", "Pie Plot", "Range[1.0,100.0]", var14, (java.awt.Paint)var25);
    var2.setTickLabelPaint((java.lang.Comparable)10.0d, (java.awt.Paint)var25);
    var0.setBackgroundPaint((java.awt.Paint)var25);
    org.jfree.chart.renderer.category.StackedAreaRenderer var36 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var39 = var36.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var40 = null;
    org.jfree.chart.plot.RingPlot var41 = new org.jfree.chart.plot.RingPlot(var40);
    org.jfree.chart.plot.Plot var42 = var41.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var43 = null;
    var41.axisChanged(var43);
    org.jfree.chart.JFreeChart var46 = new org.jfree.chart.JFreeChart("hi!", var39, (org.jfree.chart.plot.Plot)var41, true);
    java.lang.Object var47 = var41.clone();
    org.jfree.chart.util.HorizontalAlignment var48 = null;
    org.jfree.chart.util.VerticalAlignment var49 = null;
    org.jfree.chart.block.FlowArrangement var52 = new org.jfree.chart.block.FlowArrangement(var48, var49, 100.0d, 10.0d);
    var52.clear();
    org.jfree.chart.block.Arrangement var54 = null;
    org.jfree.chart.title.LegendTitle var55 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var41, (org.jfree.chart.block.Arrangement)var52, var54);
    java.lang.String var56 = var41.getNoDataMessage();
    org.jfree.data.general.PieDataset var57 = null;
    org.jfree.chart.plot.RingPlot var58 = new org.jfree.chart.plot.RingPlot(var57);
    org.jfree.chart.plot.Plot var59 = var58.getRootPlot();
    org.jfree.chart.JFreeChart var60 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var58);
    boolean var61 = var60.getAntiAlias();
    java.awt.Stroke var62 = var60.getBorderStroke();
    var41.setSeparatorStroke(var62);
    var0.setDomainCrosshairStroke(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var30.equals("java.awt.Color[r=0,g=0,b=10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    org.jfree.chart.ui.BasicProjectInfo var0 = new org.jfree.chart.ui.BasicProjectInfo();
    java.lang.String var1 = var0.getName();
    var0.setCopyright("org.jfree.chart.event.RendererChangeEvent[source=false]");
    org.jfree.chart.ui.Library[] var4 = var0.getOptionalLibraries();
    java.lang.String var5 = var0.getVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    java.awt.Paint var2 = var1.getTickLabelPaint();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var3 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var6 = var3.getLegendItem(2, 0);
    double var7 = var3.getBase();
    java.awt.Color var10 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var11 = null;
    float[] var12 = var10.getRGBColorComponents(var11);
    java.awt.Color var15 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var16 = null;
    float[] var17 = var15.getRGBColorComponents(var16);
    float[] var18 = var10.getColorComponents(var16);
    var3.setErrorIndicatorPaint((java.awt.Paint)var10);
    org.jfree.chart.plot.XYPlot var20 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var22 = new org.jfree.chart.axis.NumberAxis3D("");
    var22.configure();
    org.jfree.chart.util.RectangleInsets var24 = var22.getLabelInsets();
    var20.setAxisOffset(var24);
    org.jfree.chart.plot.CategoryMarker var27 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var28 = var27.getOutlineStroke();
    var20.addDomainMarker((org.jfree.chart.plot.Marker)var27);
    java.awt.geom.Point2D var30 = var20.getQuadrantOrigin();
    java.awt.Paint var31 = var20.getDomainCrosshairPaint();
    org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var34 = var33.getEndType();
    java.awt.Paint var35 = var33.getBaseFillPaint();
    org.jfree.chart.renderer.category.WaterfallBarRenderer var36 = new org.jfree.chart.renderer.category.WaterfallBarRenderer(var2, (java.awt.Paint)var10, var31, var35);
    java.awt.Paint var37 = var36.getLastBarPaint();
    java.awt.Paint var38 = var36.getLastBarPaint();
    java.awt.Paint var39 = var36.getFirstBarPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var3.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var7 = var3.getBaseLinesVisible();
    java.lang.Boolean var9 = var3.getSeriesVisibleInLegend(10);
    java.awt.Paint var10 = var3.getBaseItemLabelPaint();
    var3.setDrawOutlines(false);
    boolean var15 = var3.isItemLabelVisible(10, 100);
    org.jfree.chart.plot.XYPlot var16 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var18 = new org.jfree.chart.axis.NumberAxis3D("");
    var18.configure();
    org.jfree.chart.util.RectangleInsets var20 = var18.getLabelInsets();
    var16.setAxisOffset(var20);
    org.jfree.chart.plot.CategoryMarker var23 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var24 = var23.getOutlineStroke();
    var16.addDomainMarker((org.jfree.chart.plot.Marker)var23);
    org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var31 = var28.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var32 = null;
    org.jfree.chart.plot.RingPlot var33 = new org.jfree.chart.plot.RingPlot(var32);
    org.jfree.chart.plot.Plot var34 = var33.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var35 = null;
    var33.axisChanged(var35);
    org.jfree.chart.JFreeChart var38 = new org.jfree.chart.JFreeChart("hi!", var31, (org.jfree.chart.plot.Plot)var33, true);
    java.awt.Paint var39 = var33.getBackgroundPaint();
    java.awt.Paint var40 = var33.getLabelOutlinePaint();
    var16.setRangeTickBandPaint(var40);
    var3.setBaseFillPaint(var40, true);
    java.awt.Paint var46 = var3.getItemFillPaint(0, 15);
    var1.setTickLabelPaint(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    var7.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
    java.awt.Font var12 = var7.getLabelFont();
    org.jfree.chart.util.RectangleInsets var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setLabelOffset(var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }


    org.jfree.data.xy.XYDataset var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.findDomainBounds(var0, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
    var13.setBaseShapesFilled(false);
    java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
    boolean var21 = var12.equals((java.lang.Object)var13);
    org.jfree.chart.title.TextTitle var22 = var12.getTitle();
    org.jfree.chart.util.HorizontalAlignment var23 = var22.getTextAlignment();
    var22.setText("hi!");
    java.lang.String var26 = var22.getText();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var30 = var27.getLegendItem((-1), 100);
    var27.setBaseShapesFilled(false);
    boolean var33 = var27.getAutoPopulateSeriesStroke();
    org.jfree.data.general.PieDataset var34 = null;
    org.jfree.chart.plot.RingPlot var35 = new org.jfree.chart.plot.RingPlot(var34);
    java.awt.Paint var36 = var35.getBaseSectionPaint();
    boolean var37 = var35.isOutlineVisible();
    java.awt.Color var41 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var42 = null;
    float[] var43 = var41.getRGBColorComponents(var42);
    var35.setSectionOutlinePaint((java.lang.Comparable)"", (java.awt.Paint)var41);
    var27.setBaseItemLabelPaint((java.awt.Paint)var41, false);
    var22.setBackgroundPaint((java.awt.Paint)var41);
    org.jfree.chart.axis.NumberAxis3D var53 = new org.jfree.chart.axis.NumberAxis3D("");
    boolean var54 = var53.isTickMarksVisible();
    java.awt.Shape var55 = var53.getDownArrow();
    java.awt.Shape var58 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var55, 100.0d, 0.2d);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var59 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var59.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var63 = var59.getBaseLinesVisible();
    java.lang.Boolean var65 = var59.getSeriesVisibleInLegend(10);
    java.awt.Paint var66 = var59.getBaseItemLabelPaint();
    java.awt.Color var69 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var70 = null;
    float[] var71 = var69.getRGBColorComponents(var70);
    var59.setBaseItemLabelPaint((java.awt.Paint)var69);
    int var73 = var69.getGreen();
    java.lang.String var74 = var69.toString();
    org.jfree.chart.LegendItem var75 = new org.jfree.chart.LegendItem("hi!", "ThreadContext", "Pie Plot", "Range[1.0,100.0]", var58, (java.awt.Paint)var69);
    java.lang.Comparable var76 = var75.getSeriesKey();
    java.lang.Comparable var77 = null;
    var75.setSeriesKey(var77);
    java.awt.Shape var79 = var75.getLine();
    boolean var80 = var22.equals((java.lang.Object)var75);
    java.lang.String var81 = var75.getURLText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "hi!"+ "'", var26.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "java.awt.Color[r=0,g=0,b=10]"+ "'", var74.equals("java.awt.Color[r=0,g=0,b=10]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "Range[1.0,100.0]"+ "'", var81.equals("Range[1.0,100.0]"));

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    org.jfree.chart.axis.AxisSpace var0 = new org.jfree.chart.axis.AxisSpace();
    double var1 = var0.getLeft();
    org.jfree.chart.axis.AxisSpace var2 = new org.jfree.chart.axis.AxisSpace();
    double var3 = var2.getLeft();
    var0.ensureAtLeast(var2);
    var0.setLeft(4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ResourceBundle var1 = java.util.ResourceBundle.getBundle("WMAP_Plot");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.AxisSpace var41 = new org.jfree.chart.axis.AxisSpace();
    double var42 = var41.getLeft();
    var38.setFixedRangeAxisSpace(var41);
    org.jfree.chart.axis.AxisSpace var44 = new org.jfree.chart.axis.AxisSpace();
    double var45 = var44.getLeft();
    var38.setFixedRangeAxisSpace(var44);
    var38.setRangeCrosshairLockedOnData(false);
    org.jfree.chart.axis.CategoryAxis var49 = var38.getDomainAxis();
    java.awt.Paint var50 = var49.getTickMarkPaint();
    double var51 = var49.getUpperMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.0d);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var1.setUpperMargin(0.0d);
    int var4 = var1.getMaximumCategoryLabelLines();
    java.lang.Object var5 = var1.clone();
    org.jfree.chart.plot.PiePlot3D var6 = new org.jfree.chart.plot.PiePlot3D();
    java.lang.String var7 = var6.getPlotType();
    org.jfree.chart.axis.NumberAxis var9 = new org.jfree.chart.axis.NumberAxis("");
    org.jfree.chart.axis.NumberTickUnit var10 = var9.getTickUnit();
    java.awt.Paint var11 = var6.getSectionPaint((java.lang.Comparable)var10);
    var1.addCategoryLabelToolTip((java.lang.Comparable)var10, "PlotOrientation.VERTICAL");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Pie 3D Plot"+ "'", var7.equals("Pie 3D Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }


    org.jfree.chart.axis.CategoryAxis3D var1 = new org.jfree.chart.axis.CategoryAxis3D("java.awt.Color[r=0,g=0,b=10]");
    var1.setCategoryMargin(0.0d);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    int var1 = var0.getColumnCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var4 = var0.getStdDevValue(100, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
    org.jfree.chart.plot.XYPlot var3 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var5 = new org.jfree.chart.axis.NumberAxis3D("");
    var5.configure();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    var3.setAxisOffset(var7);
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    java.awt.Stroke var14 = var10.getItemStroke(0, 0);
    var3.setRangeZeroBaselineStroke(var14);
    org.jfree.chart.util.Layer var16 = null;
    java.util.Collection var17 = var3.getDomainMarkers(var16);
    var3.setForegroundAlpha(100.0f);
    var3.setRangeCrosshairVisible(true);
    boolean var22 = var3.isRangeZoomable();
    org.jfree.chart.util.RectangleEdge var24 = var3.getDomainAxisEdge(1);
    boolean var25 = var3.isRangeZoomable();
    var2.addChangeListener((org.jfree.chart.event.MarkerChangeListener)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    org.jfree.data.KeyToGroupMap var9 = new org.jfree.data.KeyToGroupMap();
    java.util.List var10 = var9.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var10);
    java.lang.Comparable var12 = null;
    var0.setObject((java.lang.Object)var10, var12, (java.lang.Comparable)1);
    var0.removeColumn(0);
    org.jfree.data.time.SimpleTimePeriod var19 = new org.jfree.data.time.SimpleTimePeriod((-1L), 10L);
    var0.removeObject((java.lang.Comparable)var19, (java.lang.Comparable)(byte)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var23 = var0.getRowKey(2);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test376() {}
//   public void test376() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }
// 
// 
//     org.jfree.data.time.Month var1 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var1);
//     var2.setDescription("poly");
//     org.jfree.data.time.Month var5 = new org.jfree.data.time.Month();
//     long var6 = var5.getSerialIndex();
//     java.util.Date var7 = var5.getEnd();
//     var2.setDuration((org.jfree.data.time.TimePeriod)var5);
//     int var9 = var2.getSubtaskCount();
//     java.lang.Double var10 = var2.getPercentComplete();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
// 
//   }

  public void test377() {}
//   public void test377() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.axis.DateAxis var6 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var10 = var7.getLegendItem((-1), 100);
//     var7.setBaseShapesFilled(false);
//     java.awt.Paint var14 = var7.getSeriesOutlinePaint((-1));
//     java.awt.Paint var16 = var7.lookupSeriesOutlinePaint(0);
//     var6.setLabelPaint(var16);
//     boolean var18 = var6.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var20 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var21 = var20.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var22 = var20.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var23 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var25 = var23.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var28 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var31 = var28.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var32 = null;
//     org.jfree.chart.plot.RingPlot var33 = new org.jfree.chart.plot.RingPlot(var32);
//     org.jfree.chart.plot.Plot var34 = var33.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var35 = null;
//     var33.axisChanged(var35);
//     org.jfree.chart.JFreeChart var38 = new org.jfree.chart.JFreeChart("hi!", var31, (org.jfree.chart.plot.Plot)var33, true);
//     boolean var39 = var23.equals((java.lang.Object)var31);
//     var23.validateObject();
//     org.jfree.data.Range var41 = var20.findRangeBounds((org.jfree.data.category.CategoryDataset)var23);
//     org.jfree.data.general.DatasetChangeEvent var42 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var18, (org.jfree.data.general.Dataset)var23);
//     var0.datasetChanged(var42);
//     org.jfree.chart.axis.ValueAxis var45 = var0.getDomainAxis((-16777206));
//     var0.clearDomainAxes();
//     org.jfree.chart.axis.AxisLocation var47 = var0.getRangeAxisLocation();
//     org.jfree.chart.renderer.xy.XYItemRenderer var48 = null;
//     int var49 = var0.getIndexOf(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == 0);
// 
//   }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    java.lang.Object var4 = var2.clone();
    java.lang.Number var7 = null;
    java.util.List var13 = null;
    org.jfree.data.statistics.BoxAndWhiskerItem var14 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var7, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var13);
    boolean var15 = var2.equals((java.lang.Object)0);
    boolean var16 = var2.isAutoRange();
    java.awt.Font var17 = var2.getLabelFont();
    org.jfree.chart.plot.CategoryMarker var19 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)1L);
    java.lang.Object var20 = var19.clone();
    java.awt.Paint var21 = var19.getOutlinePaint();
    org.jfree.chart.block.LabelBlock var22 = new org.jfree.chart.block.LabelBlock("Size2D[width=50.5, height=10.0]", var17, var21);
    var22.setHeight(4.0d);
    java.awt.Font var25 = var22.getFont();
    java.lang.String var26 = var22.getURLText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    boolean var4 = var3.getAntiAlias();
    java.awt.Stroke var5 = var3.getBorderStroke();
    org.jfree.chart.util.RectangleInsets var6 = var3.getPadding();
    double var8 = var6.calculateTopOutset(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test380() {}
//   public void test380() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     java.awt.Stroke var5 = var1.getItemStroke(0, 0);
//     java.awt.Shape var7 = var1.lookupSeriesShape(10);
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var9 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.GanttRenderer var10 = new org.jfree.chart.renderer.category.GanttRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var14 = var11.getLegendItem((-1), 100);
//     var11.setBaseShapesFilled(false);
//     java.awt.Paint var18 = var11.getSeriesOutlinePaint((-1));
//     org.jfree.chart.renderer.category.StackedAreaRenderer var20 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var21 = var20.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var22 = var20.getBaseNegativeItemLabelPosition();
//     var11.setBaseNegativeItemLabelPosition(var22);
//     var10.setPositiveItemLabelPositionFallback(var22);
//     var9.setPositiveItemLabelPositionFallback(var22);
//     var1.setSeriesNegativeItemLabelPosition(10, var22);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var20 and var1.", var20.equals(var1) == var1.equals(var20));
// 
//   }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
    org.jfree.chart.plot.DatasetRenderingOrder var11 = var0.getDatasetRenderingOrder();
    var0.setDomainCrosshairValue(1.0d, true);
    java.awt.Paint var15 = var0.getDomainGridlinePaint();
    org.jfree.chart.plot.Plot var16 = var0.getRootPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }
// 
// 
//     java.util.Locale var1 = null;
//     java.util.ResourceBundle.Control var2 = null;
//     java.util.ResourceBundle var3 = java.util.ResourceBundle.getBundle("", var1, var2);
// 
//   }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    org.jfree.data.xy.XYDataset var0 = null;
    boolean var1 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    var0.setForegroundAlpha(100.0f);
    var0.setRangeCrosshairVisible(true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var19.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var23 = var19.getBaseLinesVisible();
    java.lang.Boolean var25 = var19.getSeriesVisibleInLegend(10);
    java.awt.Paint var26 = var19.getBaseItemLabelPaint();
    java.awt.Color var29 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var30 = null;
    float[] var31 = var29.getRGBColorComponents(var30);
    var19.setBaseItemLabelPaint((java.awt.Paint)var29);
    java.awt.Color var33 = var29.brighter();
    var0.setRangeGridlinePaint((java.awt.Paint)var33);
    var0.clearDomainMarkers(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }


    boolean var1 = org.jfree.data.time.SerialDate.isValidWeekdayCode((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    java.lang.Object var13 = var7.clone();
    org.jfree.chart.util.HorizontalAlignment var14 = null;
    org.jfree.chart.util.VerticalAlignment var15 = null;
    org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
    var18.clear();
    org.jfree.chart.block.Arrangement var20 = null;
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
    org.jfree.chart.plot.XYPlot var22 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var24 = new org.jfree.chart.axis.NumberAxis3D("");
    var24.configure();
    org.jfree.chart.util.RectangleInsets var26 = var24.getLabelInsets();
    var22.setAxisOffset(var26);
    org.jfree.chart.renderer.category.StackedAreaRenderer var29 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var30 = var29.getEndType();
    java.awt.Stroke var33 = var29.getItemStroke(0, 0);
    var22.setRangeZeroBaselineStroke(var33);
    org.jfree.chart.util.Layer var35 = null;
    java.util.Collection var36 = var22.getDomainMarkers(var35);
    org.jfree.chart.util.RectangleInsets var37 = var22.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var39 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var40 = var39.getEndType();
    java.awt.Stroke var43 = var39.getItemStroke(0, 0);
    var22.setDomainZeroBaselineStroke(var43);
    org.jfree.chart.util.RectangleEdge var46 = var22.getDomainAxisEdge(1);
    var21.setLegendItemGraphicEdge(var46);
    java.awt.Font var48 = var21.getItemFont();
    java.awt.Graphics2D var49 = null;
    org.jfree.data.Range var50 = null;
    org.jfree.chart.block.RectangleConstraint var52 = new org.jfree.chart.block.RectangleConstraint(var50, 0.0d);
    org.jfree.chart.util.Size2D var53 = var21.arrange(var49, var52);
    org.jfree.chart.block.LengthConstraintType var54 = var52.getHeightConstraintType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test387() {}
//   public void test387() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }
// 
// 
//     org.jfree.chart.plot.CategoryMarker var1 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Paint var2 = var1.getLabelPaint();
//     java.lang.Comparable var3 = var1.getKey();
//     java.lang.String var4 = var1.getLabel();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var10 = var7.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var11 = null;
//     org.jfree.chart.plot.RingPlot var12 = new org.jfree.chart.plot.RingPlot(var11);
//     org.jfree.chart.plot.Plot var13 = var12.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var14 = null;
//     var12.axisChanged(var14);
//     org.jfree.chart.JFreeChart var17 = new org.jfree.chart.JFreeChart("hi!", var10, (org.jfree.chart.plot.Plot)var12, true);
//     var1.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var12);
//     java.awt.Paint var19 = var1.getPaint();
//     var1.setKey((java.lang.Comparable)1.0d);
//     java.awt.Paint var22 = var1.getPaint();
//     org.jfree.data.time.Month var23 = new org.jfree.data.time.Month();
//     long var24 = var23.getSerialIndex();
//     java.util.Date var25 = var23.getEnd();
//     java.lang.String var26 = var23.toString();
//     var1.setKey((java.lang.Comparable)var23);
//     java.util.Calendar var28 = null;
//     long var29 = var23.getLastMillisecond(var28);
// 
//   }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    org.jfree.chart.util.RectangleInsets var3 = var1.getLabelInsets();
    var1.setFixedAutoRange(0.2d);
    org.jfree.chart.axis.MarkerAxisBand var6 = var1.getMarkerBand();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test389() {}
//   public void test389() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var8 = var7.getOutlineStroke();
//     var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
//     java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
//     var0.configureRangeAxes();
//     org.jfree.chart.entity.EntityCollection var13 = null;
//     org.jfree.chart.ChartRenderingInfo var14 = new org.jfree.chart.ChartRenderingInfo(var13);
//     org.jfree.chart.plot.PlotRenderingInfo var15 = var14.getPlotInfo();
//     org.jfree.chart.renderer.category.CategoryItemRendererState var16 = new org.jfree.chart.renderer.category.CategoryItemRendererState(var15);
//     org.jfree.chart.plot.XYPlot var17 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var19 = new org.jfree.chart.axis.NumberAxis3D("");
//     var19.configure();
//     org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
//     var17.setAxisOffset(var21);
//     org.jfree.chart.util.RectangleInsets var23 = var17.getAxisOffset();
//     boolean var24 = var17.isRangeCrosshairVisible();
//     org.jfree.chart.entity.EntityCollection var27 = null;
//     org.jfree.chart.ChartRenderingInfo var28 = new org.jfree.chart.ChartRenderingInfo(var27);
//     org.jfree.chart.plot.PlotRenderingInfo var29 = var28.getPlotInfo();
//     org.jfree.chart.renderer.category.CategoryItemRendererState var30 = new org.jfree.chart.renderer.category.CategoryItemRendererState(var29);
//     java.awt.geom.Rectangle2D var31 = null;
//     org.jfree.chart.util.RectangleAnchor var32 = null;
//     java.awt.geom.Point2D var33 = org.jfree.chart.util.RectangleAnchor.coordinates(var31, var32);
//     var17.zoomRangeAxes(10.0d, 10.0d, var29, var33);
//     var0.zoomDomainAxes(3.0d, var15, var33);
//     
//     // Checks the contract:  equals-hashcode on var14 and var28
//     assertTrue("Contract failed: equals-hashcode on var14 and var28", var14.equals(var28) ? var14.hashCode() == var28.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var28 and var14
//     assertTrue("Contract failed: equals-hashcode on var28 and var14", var28.equals(var14) ? var28.hashCode() == var14.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var15 and var29
//     assertTrue("Contract failed: equals-hashcode on var15 and var29", var15.equals(var29) ? var15.hashCode() == var29.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var29 and var15
//     assertTrue("Contract failed: equals-hashcode on var29 and var15", var29.equals(var15) ? var29.hashCode() == var15.hashCode() : true);
// 
//   }

  public void test390() {}
//   public void test390() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     double var1 = var0.getLabelAngle();
//     org.jfree.chart.plot.Plot var2 = var0.getPlot();
//     java.text.DateFormat var3 = var0.getDateFormatOverride();
//     java.util.Date var4 = var0.getMinimumDate();
//     java.util.TimeZone var5 = null;
//     org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(var4, var5);
// 
//   }

  public void test391() {}
//   public void test391() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }
// 
// 
//     java.awt.Graphics2D var0 = null;
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var9 = var1.getItemOutlinePaint(10, 1);
//     boolean var10 = var1.getUseOutlinePaint();
//     boolean var13 = var1.getItemShapeFilled(100, 10);
//     org.jfree.chart.labels.CategoryToolTipGenerator var14 = null;
//     var1.setBaseToolTipGenerator(var14);
//     var1.setAutoPopulateSeriesShape(false);
//     java.awt.Paint var20 = var1.getItemFillPaint(2, 2);
//     org.jfree.chart.axis.NumberAxis3D var23 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var24 = var23.isTickMarksVisible();
//     org.jfree.chart.axis.NumberTickUnit var25 = var23.getTickUnit();
//     java.awt.Shape var28 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var31 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var28, Double.NaN, Double.NaN);
//     var23.setDownArrow(var31);
//     var1.setSeriesShape(2, var31, true);
//     org.jfree.chart.util.ShapeUtilities.drawRotatedShape(var0, var31, 8.0d, 0.5f, 0.5f);
// 
//   }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    var1.setBaseShapesFilled(false);
    java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
    java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
    var0.setLabelPaint(var10);
    double var12 = var0.getFixedAutoRange();
    org.jfree.chart.axis.NumberAxis3D var14 = new org.jfree.chart.axis.NumberAxis3D("");
    java.awt.Paint var15 = var14.getTickLabelPaint();
    java.awt.Shape var16 = var14.getDownArrow();
    var0.setLeftArrow(var16);
    boolean var18 = var0.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
    java.awt.Paint var3 = var2.getErrorIndicatorPaint();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var4.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var8 = var4.getBaseLinesVisible();
    java.lang.Boolean var10 = var4.getSeriesVisibleInLegend(10);
    java.awt.Paint var11 = var4.getBaseItemLabelPaint();
    java.awt.Color var14 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var15 = null;
    float[] var16 = var14.getRGBColorComponents(var15);
    var4.setBaseItemLabelPaint((java.awt.Paint)var14);
    org.jfree.chart.renderer.category.StackedAreaRenderer var19 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var20 = var19.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var21 = var19.getBaseNegativeItemLabelPosition();
    var4.setBasePositiveItemLabelPosition(var21, true);
    var2.setBaseNegativeItemLabelPosition(var21);
    org.jfree.chart.labels.CategoryToolTipGenerator var25 = var2.getBaseToolTipGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
    var1.setBaseShapesFilled(false);
    java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var12 = var10.getBaseNegativeItemLabelPosition();
    var1.setBaseNegativeItemLabelPosition(var12);
    var0.setPositiveItemLabelPositionFallback(var12);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer(false, false);
    org.jfree.chart.renderer.category.StackedAreaRenderer var21 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var24 = var21.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var25 = null;
    org.jfree.chart.plot.RingPlot var26 = new org.jfree.chart.plot.RingPlot(var25);
    org.jfree.chart.plot.Plot var27 = var26.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var28 = null;
    var26.axisChanged(var28);
    org.jfree.chart.JFreeChart var31 = new org.jfree.chart.JFreeChart("hi!", var24, (org.jfree.chart.plot.Plot)var26, true);
    java.awt.Paint var32 = var26.getBackgroundPaint();
    var17.setSeriesItemLabelPaint(0, var32, true);
    var0.setCompletePaint(var32);
    org.jfree.chart.renderer.category.StackedAreaRenderer var37 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var38 = var37.getEndType();
    java.awt.Stroke var41 = var37.getItemStroke(0, 0);
    boolean var43 = var37.isSeriesItemLabelsVisible(15);
    org.jfree.chart.renderer.category.StackedAreaRenderer var45 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var46 = var45.getEndType();
    java.awt.Stroke var49 = var45.getItemStroke(0, 0);
    java.awt.Shape var51 = var45.lookupSeriesShape(10);
    var37.setBaseShape(var51, false);
    java.awt.Paint var55 = var37.lookupSeriesFillPaint(10);
    var0.setCompletePaint(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    java.lang.Boolean var6 = var0.getSeriesVisibleInLegend(10);
    var0.setBaseSeriesVisibleInLegend(false);
    var0.setBaseItemLabelsVisible(true, true);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var12 = var0.getLegendItemLabelGenerator();
    java.awt.Paint var14 = var0.lookupSeriesPaint(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test396() {}
//   public void test396() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }
// 
// 
//     org.jfree.data.general.PieDataset var0 = null;
//     org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
//     double var2 = var1.getInteriorGap();
//     org.jfree.data.general.PieDataset var3 = null;
//     org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
//     org.jfree.chart.plot.Plot var5 = var4.getRootPlot();
//     org.jfree.chart.JFreeChart var6 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var4);
//     org.jfree.chart.labels.PieSectionLabelGenerator var7 = var4.getLegendLabelGenerator();
//     var1.setLegendLabelGenerator(var7);
//     
//     // Checks the contract:  equals-hashcode on var1 and var4
//     assertTrue("Contract failed: equals-hashcode on var1 and var4", var1.equals(var4) ? var1.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var1
//     assertTrue("Contract failed: equals-hashcode on var4 and var1", var4.equals(var1) ? var4.hashCode() == var1.hashCode() : true);
// 
//   }

  public void test397() {}
//   public void test397() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }
// 
// 
//     org.jfree.data.time.Month var0 = new org.jfree.data.time.Month();
//     long var1 = var0.getSerialIndex();
//     java.util.Date var2 = var0.getEnd();
//     org.jfree.chart.text.TextBlock var3 = null;
//     org.jfree.chart.text.TextBlockAnchor var4 = null;
//     org.jfree.chart.plot.XYPlot var5 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var7 = new org.jfree.chart.axis.NumberAxis3D("");
//     var7.configure();
//     org.jfree.chart.util.RectangleInsets var9 = var7.getLabelInsets();
//     var5.setAxisOffset(var9);
//     org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var13 = var12.getOutlineStroke();
//     var5.addDomainMarker((org.jfree.chart.plot.Marker)var12);
//     var12.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var17 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var18.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var22 = var18.getBaseLinesVisible();
//     java.lang.Boolean var24 = var18.getSeriesVisibleInLegend(10);
//     java.awt.Paint var25 = var18.getBaseItemLabelPaint();
//     java.awt.Color var28 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var29 = null;
//     float[] var30 = var28.getRGBColorComponents(var29);
//     var18.setBaseItemLabelPaint((java.awt.Paint)var28);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var34 = var33.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var35 = var33.getBaseNegativeItemLabelPosition();
//     var18.setBasePositiveItemLabelPosition(var35, true);
//     var17.setPositiveItemLabelPositionFallback(var35);
//     org.jfree.chart.text.TextAnchor var39 = var35.getRotationAnchor();
//     var12.setLabelTextAnchor(var39);
//     org.jfree.chart.axis.CategoryTick var42 = new org.jfree.chart.axis.CategoryTick((java.lang.Comparable)var2, var3, var4, var39, 2.0d);
//     org.jfree.chart.text.TextBlock var43 = var42.getLabel();
//     org.jfree.chart.text.TextBlockAnchor var44 = var42.getLabelAnchor();
//     java.lang.Comparable var45 = var42.getCategory();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
// 
//   }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }


    org.jfree.data.gantt.TaskSeries var1 = new org.jfree.data.gantt.TaskSeries("");
    java.lang.Comparable var2 = var1.getKey();
    org.jfree.data.gantt.Task var3 = null;
    var1.remove(var3);
    java.lang.Object var5 = var1.clone();
    var1.removeAll();
    java.lang.Comparable var7 = var1.getKey();
    var1.setNotify(false);
    var1.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }


    org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
    java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
    org.jfree.chart.entity.AxisLabelEntity var6 = new org.jfree.chart.entity.AxisLabelEntity((org.jfree.chart.axis.Axis)var0, var3, "Category Plot", "java.awt.Color[r=0,g=0,b=10]");
    org.jfree.chart.axis.Axis var7 = var6.getAxis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = org.jfree.data.time.SerialDate.weekdayCodeToString(15);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(1);
    java.awt.Stroke var25 = var0.getDomainZeroBaselineStroke();
    var0.setOutlineVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    java.text.DateFormat var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.labels.IntervalCategoryToolTipGenerator var2 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("DateTickUnit[DAY, 1]", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }


    org.jfree.chart.axis.NumberAxis3D var1 = new org.jfree.chart.axis.NumberAxis3D("");
    var1.configure();
    java.lang.Object var3 = var1.clone();
    java.lang.Number var6 = null;
    java.util.List var12 = null;
    org.jfree.data.statistics.BoxAndWhiskerItem var13 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var6, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var12);
    boolean var14 = var1.equals((java.lang.Object)0);
    boolean var15 = var1.isAutoRange();
    var1.setLabelAngle(0.0d);
    double var18 = var1.getLowerMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.05d);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.AxisSpace var41 = new org.jfree.chart.axis.AxisSpace();
    double var42 = var41.getLeft();
    var38.setFixedRangeAxisSpace(var41);
    org.jfree.chart.axis.AxisSpace var44 = new org.jfree.chart.axis.AxisSpace();
    double var45 = var44.getLeft();
    var38.setFixedRangeAxisSpace(var44);
    var38.setRangeCrosshairLockedOnData(false);
    org.jfree.chart.axis.CategoryAxis var50 = var38.getDomainAxis((-1));
    org.jfree.chart.axis.AxisSpace var51 = new org.jfree.chart.axis.AxisSpace();
    double var52 = var51.getBottom();
    var38.setFixedRangeAxisSpace(var51);
    org.jfree.chart.axis.DateAxis var56 = new org.jfree.chart.axis.DateAxis("-100,0,0,0,0,100,0,100,0,0,100,0,100,0,0,0,0,-100,0,-100,0,0,-100,0,-100,0");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var38.setRangeAxis((-457), (org.jfree.chart.axis.ValueAxis)var56, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);

  }

  public void test405() {}
//   public void test405() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.data.general.PieDataset var29 = null;
//     org.jfree.chart.plot.RingPlot var30 = new org.jfree.chart.plot.RingPlot(var29);
//     org.jfree.chart.plot.Plot var31 = var30.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var32 = var30.getInsets();
//     double var34 = var32.calculateBottomOutset(100.0d);
//     var28.setPadding(var32);
//     java.awt.Paint var36 = var28.getOutlinePaint();
//     org.jfree.chart.util.GradientPaintTransformer var37 = var28.getFillPaintTransformer();
//     java.awt.Color var41 = java.awt.Color.getHSBColor(10.0f, 0.0f, 100.0f);
//     java.lang.String var42 = org.jfree.chart.util.PaintUtilities.colorToString(var41);
//     var28.setFillPaint((java.awt.Paint)var41);
//     boolean var44 = var28.isShapeOutlineVisible();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == 4.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var42 + "' != '" + "#ffff9c"+ "'", var42.equals("#ffff9c"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
// 
//   }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }
// 
// 
//     java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var5 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var2, Double.NaN, Double.NaN);
//     java.awt.Shape var9 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var14 = var12.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var17 = new org.jfree.chart.entity.CategoryItemEntity(var2, "hi!", "", (org.jfree.data.category.CategoryDataset)var12, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var21 = var18.getLegendItem((-1), 100);
//     var18.setBaseShapesFilled(false);
//     java.awt.Paint var25 = var18.getSeriesOutlinePaint((-1));
//     java.awt.Paint var27 = var18.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var28 = new org.jfree.chart.title.LegendGraphic(var2, var27);
//     org.jfree.chart.entity.LegendItemEntity var29 = new org.jfree.chart.entity.LegendItemEntity(var2);
//     java.lang.Comparable var30 = var29.getSeriesKey();
//     org.jfree.chart.axis.DateAxis var31 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var35 = var32.getLegendItem((-1), 100);
//     var32.setBaseShapesFilled(false);
//     java.awt.Paint var39 = var32.getSeriesOutlinePaint((-1));
//     java.awt.Paint var41 = var32.lookupSeriesOutlinePaint(0);
//     var31.setLabelPaint(var41);
//     double var43 = var31.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var46 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var49 = var46.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var50 = null;
//     org.jfree.chart.plot.RingPlot var51 = new org.jfree.chart.plot.RingPlot(var50);
//     org.jfree.chart.plot.Plot var52 = var51.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var53 = null;
//     var51.axisChanged(var53);
//     org.jfree.chart.JFreeChart var56 = new org.jfree.chart.JFreeChart("hi!", var49, (org.jfree.chart.plot.Plot)var51, true);
//     java.awt.Paint var57 = var51.getBackgroundPaint();
//     java.awt.Paint var58 = var51.getLabelOutlinePaint();
//     var31.setTickMarkPaint(var58);
//     java.text.DateFormat var62 = null;
//     org.jfree.chart.axis.DateTickUnit var63 = new org.jfree.chart.axis.DateTickUnit(2, 1, var62);
//     var31.setTickUnit(var63, false, false);
//     var29.setSeriesKey((java.lang.Comparable)var63);
//     org.jfree.chart.axis.DateAxis var68 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var69 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var72 = var69.getLegendItem((-1), 100);
//     var69.setBaseShapesFilled(false);
//     java.awt.Paint var76 = var69.getSeriesOutlinePaint((-1));
//     java.awt.Paint var78 = var69.lookupSeriesOutlinePaint(0);
//     var68.setLabelPaint(var78);
//     boolean var80 = var68.isNegativeArrowVisible();
//     org.jfree.data.Range var83 = new org.jfree.data.Range(1.0d, 100.0d);
//     java.lang.String var84 = var83.toString();
//     org.jfree.data.Range var86 = org.jfree.data.Range.shift(var83, 0.0d);
//     var68.setRange(var86);
//     org.jfree.data.time.Month var88 = new org.jfree.data.time.Month();
//     long var89 = var88.getSerialIndex();
//     java.util.Date var90 = var88.getEnd();
//     org.jfree.data.time.Month var91 = new org.jfree.data.time.Month();
//     long var92 = var91.getSerialIndex();
//     java.util.Date var93 = var91.getEnd();
//     org.jfree.data.time.SimpleTimePeriod var94 = new org.jfree.data.time.SimpleTimePeriod(var90, var93);
//     var68.setMaximumDate(var90);
//     var29.setSeriesKey((java.lang.Comparable)var90);
//     java.lang.Object var97 = var29.clone();
//     org.jfree.data.general.Dataset var98 = var29.getDataset();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var43 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var80 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var84 + "' != '" + "Range[1.0,100.0]"+ "'", var84.equals("Range[1.0,100.0]"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var86);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var89 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var90);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var92 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var93);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var97);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var98);
// 
//   }

  public void test407() {}
//   public void test407() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }
// 
// 
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var4 = var0.getBaseLinesVisible();
//     boolean var6 = var0.equals((java.lang.Object)100.0f);
//     org.jfree.chart.event.RendererChangeEvent var7 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var6);
//     java.lang.String var8 = var7.toString();
//     org.jfree.data.general.PieDataset var9 = null;
//     org.jfree.chart.plot.RingPlot var10 = new org.jfree.chart.plot.RingPlot(var9);
//     org.jfree.chart.plot.Plot var11 = var10.getRootPlot();
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var10);
//     java.lang.Object var13 = var12.clone();
//     var7.setChart(var12);
//     org.jfree.chart.event.TitleChangeEvent var15 = null;
//     var12.titleChanged(var15);
// 
//   }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.CategoryAxis var42 = var38.getDomainAxis(0);
    var38.setDrawSharedDomainAxis(true);
    org.jfree.chart.plot.PlotRenderingInfo var47 = null;
    org.jfree.chart.plot.XYPlot var48 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var50 = new org.jfree.chart.axis.NumberAxis3D("");
    var50.configure();
    org.jfree.chart.util.RectangleInsets var52 = var50.getLabelInsets();
    var48.setAxisOffset(var52);
    org.jfree.chart.plot.CategoryMarker var55 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var56 = var55.getOutlineStroke();
    var48.addDomainMarker((org.jfree.chart.plot.Marker)var55);
    java.awt.geom.Point2D var58 = var48.getQuadrantOrigin();
    var38.zoomRangeAxes(0.0d, 90.0d, var47, var58);
    java.awt.Stroke var60 = var38.getRangeGridlineStroke();
    org.jfree.chart.util.RectangleEdge var61 = var38.getDomainAxisEdge();
    org.jfree.chart.LegendItemCollection var62 = null;
    var38.setFixedLegendItems(var62);
    org.jfree.chart.util.SortOrder var64 = var38.getColumnRenderingOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test409() {}
//   public void test409() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var2 = var1.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var3 = var1.getBaseNegativeItemLabelPosition();
//     org.jfree.chart.labels.ItemLabelPosition var5 = var1.getSeriesNegativeItemLabelPosition((-1));
//     org.jfree.chart.plot.MultiplePiePlot var6 = new org.jfree.chart.plot.MultiplePiePlot();
//     double var7 = var6.getLimit();
//     double var8 = var6.getLimit();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var9 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var11 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var9, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var12 = null;
//     org.jfree.chart.plot.RingPlot var13 = new org.jfree.chart.plot.RingPlot(var12);
//     org.jfree.chart.plot.Plot var14 = var13.getRootPlot();
//     var9.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var14);
//     java.lang.Comparable var16 = null;
//     java.lang.Number var18 = var9.getMeanValue(var16, (java.lang.Comparable)100.0f);
//     var6.setDataset((org.jfree.data.category.CategoryDataset)var9);
//     org.jfree.data.general.DatasetGroup var20 = var9.getGroup();
//     double var22 = var9.getRangeLowerBound(true);
//     org.jfree.chart.plot.XYPlot var23 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var25 = new org.jfree.chart.axis.NumberAxis3D("");
//     var25.configure();
//     org.jfree.chart.util.RectangleInsets var27 = var25.getLabelInsets();
//     var23.setAxisOffset(var27);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var30 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var31 = var30.getEndType();
//     java.awt.Stroke var34 = var30.getItemStroke(0, 0);
//     var23.setRangeZeroBaselineStroke(var34);
//     org.jfree.chart.util.Layer var36 = null;
//     java.util.Collection var37 = var23.getDomainMarkers(var36);
//     var23.setForegroundAlpha(100.0f);
//     boolean var40 = var9.hasListener((java.util.EventListener)var23);
//     org.jfree.data.general.PieDataset var42 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var9, (-16777206));
//     org.jfree.data.Range var43 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var9);
//     java.util.List var44 = var9.getColumnKeys();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.Number var47 = var9.getMedianValue((-16777206), 10);
//       fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
//     } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
// 
//   }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }
// 
// 
//     org.jfree.chart.block.BlockBorder var0 = new org.jfree.chart.block.BlockBorder();
//     org.jfree.data.category.CategoryDataset var1 = null;
//     org.jfree.data.KeyToGroupMap var2 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var3 = var2.getGroups();
//     org.jfree.data.Range var4 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var1, var2);
//     org.jfree.data.KeyedObjects2D var5 = new org.jfree.data.KeyedObjects2D();
//     org.jfree.data.time.Month var7 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var7);
//     var8.setDescription("poly");
//     org.jfree.data.time.Month var11 = new org.jfree.data.time.Month();
//     long var12 = var11.getSerialIndex();
//     java.util.Date var13 = var11.getEnd();
//     var8.setDuration((org.jfree.data.time.TimePeriod)var11);
//     org.jfree.chart.axis.DateAxis var15 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var19 = var16.getLegendItem((-1), 100);
//     var16.setBaseShapesFilled(false);
//     java.awt.Paint var23 = var16.getSeriesOutlinePaint((-1));
//     java.awt.Paint var25 = var16.lookupSeriesOutlinePaint(0);
//     var15.setLabelPaint(var25);
//     double var27 = var15.getFixedAutoRange();
//     var15.setNegativeArrowVisible(true);
//     java.text.DateFormat var32 = null;
//     org.jfree.chart.axis.DateTickUnit var33 = new org.jfree.chart.axis.DateTickUnit(2, 1, var32);
//     var15.setTickUnit(var33, true, false);
//     org.jfree.data.time.Year var37 = new org.jfree.data.time.Year();
//     var5.setObject((java.lang.Object)var8, (java.lang.Comparable)true, (java.lang.Comparable)var37);
//     java.lang.String var39 = var37.toString();
//     int var40 = var2.getKeyCount((java.lang.Comparable)var37);
//     boolean var41 = var0.equals((java.lang.Object)var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var39 + "' != '" + "2014"+ "'", var39.equals("2014"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == false);
// 
//   }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var0.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var4 = var0.getBaseLinesVisible();
    java.lang.Boolean var6 = var0.getSeriesVisibleInLegend(10);
    var0.setBaseSeriesVisibleInLegend(false);
    org.jfree.data.general.PieDataset var10 = null;
    org.jfree.chart.plot.RingPlot var11 = new org.jfree.chart.plot.RingPlot(var10);
    org.jfree.chart.plot.Plot var12 = var11.getRootPlot();
    org.jfree.chart.JFreeChart var13 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var11);
    boolean var14 = var13.getAntiAlias();
    java.awt.Stroke var15 = var13.getBorderStroke();
    var0.setSeriesOutlineStroke(15, var15, true);
    var0.setSeriesItemLabelsVisible(0, (java.lang.Boolean)true, false);
    org.jfree.chart.LegendItemCollection var22 = var0.getLegendItems();
    int var23 = var22.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    org.jfree.data.category.DefaultCategoryDataset var0 = new org.jfree.data.category.DefaultCategoryDataset();
    int var1 = var0.getColumnCount();
    int var2 = var0.getRowCount();
    var0.removeColumn((java.lang.Comparable)10.0d);
    java.lang.Object var5 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test413() {}
//   public void test413() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }
// 
// 
//     org.jfree.data.time.Month var0 = new org.jfree.data.time.Month();
//     long var1 = var0.getSerialIndex();
//     java.util.Date var2 = var0.getEnd();
//     long var3 = var0.getLastMillisecond();
//     java.util.Calendar var4 = null;
//     long var5 = var0.getFirstMillisecond(var4);
// 
//   }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    org.jfree.chart.text.TextBlock var0 = new org.jfree.chart.text.TextBlock();
    java.awt.Graphics2D var1 = null;
    org.jfree.chart.text.TextBlockAnchor var4 = null;
    var0.draw(var1, 0.0f, 1.0f, var4, (-1.0f), (-1.0f), 3.0d);
    org.jfree.chart.util.HorizontalAlignment var9 = var0.getLineAlignment();
    java.awt.Graphics2D var10 = null;
    org.jfree.chart.axis.CategoryLabelPositions var13 = new org.jfree.chart.axis.CategoryLabelPositions();
    org.jfree.chart.plot.XYPlot var14 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var16 = new org.jfree.chart.axis.NumberAxis3D("");
    var16.configure();
    org.jfree.chart.util.RectangleInsets var18 = var16.getLabelInsets();
    var14.setAxisOffset(var18);
    org.jfree.chart.plot.CategoryMarker var21 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var22 = var21.getOutlineStroke();
    var14.addDomainMarker((org.jfree.chart.plot.Marker)var21);
    java.awt.geom.Point2D var24 = var14.getQuadrantOrigin();
    org.jfree.chart.plot.DatasetRenderingOrder var25 = var14.getDatasetRenderingOrder();
    var14.setDomainCrosshairValue(1.0d, true);
    java.awt.Paint var29 = var14.getDomainGridlinePaint();
    org.jfree.chart.util.RectangleEdge var31 = var14.getDomainAxisEdge(2);
    org.jfree.chart.axis.CategoryLabelPosition var32 = var13.getLabelPosition(var31);
    org.jfree.chart.text.TextBlockAnchor var33 = var32.getLabelAnchor();
    var0.draw(var10, 0.0f, 0.0f, var33, 0.5f, 100.0f, 2.0d);
    java.lang.String var38 = var33.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "TextBlockAnchor.BOTTOM_CENTER"+ "'", var38.equals("TextBlockAnchor.BOTTOM_CENTER"));

  }

  public void test415() {}
//   public void test415() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }
// 
// 
//     org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
//     org.jfree.data.time.Month var2 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var2);
//     var3.setDescription("poly");
//     org.jfree.data.time.Month var6 = new org.jfree.data.time.Month();
//     long var7 = var6.getSerialIndex();
//     java.util.Date var8 = var6.getEnd();
//     var3.setDuration((org.jfree.data.time.TimePeriod)var6);
//     org.jfree.chart.axis.DateAxis var10 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var14 = var11.getLegendItem((-1), 100);
//     var11.setBaseShapesFilled(false);
//     java.awt.Paint var18 = var11.getSeriesOutlinePaint((-1));
//     java.awt.Paint var20 = var11.lookupSeriesOutlinePaint(0);
//     var10.setLabelPaint(var20);
//     double var22 = var10.getFixedAutoRange();
//     var10.setNegativeArrowVisible(true);
//     java.text.DateFormat var27 = null;
//     org.jfree.chart.axis.DateTickUnit var28 = new org.jfree.chart.axis.DateTickUnit(2, 1, var27);
//     var10.setTickUnit(var28, true, false);
//     org.jfree.data.time.Year var32 = new org.jfree.data.time.Year();
//     var0.setObject((java.lang.Object)var3, (java.lang.Comparable)true, (java.lang.Comparable)var32);
//     org.jfree.data.time.Month var35 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var36 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var35);
//     org.jfree.chart.plot.XYPlot var37 = new org.jfree.chart.plot.XYPlot();
//     var37.setDomainCrosshairValue(0.05d);
//     java.awt.Paint var40 = var37.getDomainCrosshairPaint();
//     org.jfree.chart.plot.IntervalMarker var44 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
//     double var45 = var44.getEndValue();
//     var44.setStartValue(0.2d);
//     org.jfree.chart.util.Layer var48 = null;
//     var37.addRangeMarker(0, (org.jfree.chart.plot.Marker)var44, var48);
//     boolean var50 = var36.equals((java.lang.Object)var37);
//     var3.addSubtask(var36);
//     org.jfree.data.gantt.Task var53 = var3.getSubtask(0);
//     java.lang.Double var54 = null;
//     var3.setPercentComplete(var54);
//     org.jfree.data.time.Month var57 = new org.jfree.data.time.Month();
//     org.jfree.data.gantt.Task var58 = new org.jfree.data.gantt.Task("ThreadContext", (org.jfree.data.time.TimePeriod)var57);
//     org.jfree.chart.plot.XYPlot var59 = new org.jfree.chart.plot.XYPlot();
//     var59.setDomainCrosshairValue(0.05d);
//     java.awt.Paint var62 = var59.getDomainCrosshairPaint();
//     org.jfree.chart.plot.IntervalMarker var66 = new org.jfree.chart.plot.IntervalMarker(4.0d, 0.25d);
//     double var67 = var66.getEndValue();
//     var66.setStartValue(0.2d);
//     org.jfree.chart.util.Layer var70 = null;
//     var59.addRangeMarker(0, (org.jfree.chart.plot.Marker)var66, var70);
//     boolean var72 = var58.equals((java.lang.Object)var59);
//     org.jfree.data.time.TimePeriod var73 = var58.getDuration();
//     var3.removeSubtask(var58);
//     
//     // Checks the contract:  equals-hashcode on var36 and var58
//     assertTrue("Contract failed: equals-hashcode on var36 and var58", var36.equals(var58) ? var36.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var53 and var58
//     assertTrue("Contract failed: equals-hashcode on var53 and var58", var53.equals(var58) ? var53.hashCode() == var58.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var36
//     assertTrue("Contract failed: equals-hashcode on var58 and var36", var58.equals(var36) ? var58.hashCode() == var36.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var58 and var53
//     assertTrue("Contract failed: equals-hashcode on var58 and var53", var58.equals(var53) ? var58.hashCode() == var53.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var37 and var59
//     assertTrue("Contract failed: equals-hashcode on var37 and var59", var37.equals(var59) ? var37.hashCode() == var59.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var59 and var37
//     assertTrue("Contract failed: equals-hashcode on var59 and var37", var59.equals(var37) ? var59.hashCode() == var37.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var44 and var66
//     assertTrue("Contract failed: equals-hashcode on var44 and var66", var44.equals(var66) ? var44.hashCode() == var66.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var66 and var44
//     assertTrue("Contract failed: equals-hashcode on var66 and var44", var66.equals(var44) ? var66.hashCode() == var44.hashCode() : true);
// 
//   }

  public void test416() {}
//   public void test416() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }
// 
// 
//     org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
//     double var1 = var0.getLimit();
//     double var2 = var0.getLimit();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var3 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var5 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var3, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     var3.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var8);
//     java.lang.Comparable var10 = null;
//     java.lang.Number var12 = var3.getMeanValue(var10, (java.lang.Comparable)100.0f);
//     var0.setDataset((org.jfree.data.category.CategoryDataset)var3);
//     org.jfree.data.general.DatasetGroup var14 = var3.getGroup();
//     double var16 = var3.getRangeLowerBound(true);
//     org.jfree.chart.plot.XYPlot var17 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var19 = new org.jfree.chart.axis.NumberAxis3D("");
//     var19.configure();
//     org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
//     var17.setAxisOffset(var21);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var24 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var25 = var24.getEndType();
//     java.awt.Stroke var28 = var24.getItemStroke(0, 0);
//     var17.setRangeZeroBaselineStroke(var28);
//     org.jfree.chart.util.Layer var30 = null;
//     java.util.Collection var31 = var17.getDomainMarkers(var30);
//     var17.setForegroundAlpha(100.0f);
//     boolean var34 = var3.hasListener((java.util.EventListener)var17);
//     java.awt.Paint var36 = var17.getQuadrantPaint(1);
//     org.jfree.chart.axis.AxisSpace var37 = new org.jfree.chart.axis.AxisSpace();
//     java.lang.String var38 = var37.toString();
//     var17.setFixedDomainAxisSpace(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var36);
// 
//   }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }
// 
// 
//     java.util.Locale var1 = null;
//     java.lang.Class var2 = null;
//     java.lang.ClassLoader var3 = org.jfree.chart.util.ObjectUtilities.getClassLoader(var2);
//     java.util.ResourceBundle.clearCache(var3);
//     org.jfree.chart.util.ObjectUtilities.setClassLoader(var3);
//     java.util.ResourceBundle.Control var6 = null;
//     java.util.ResourceBundle var7 = java.util.ResourceBundle.getBundle("Size2D[width=50.5, height=10.0]", var1, var3, var6);
// 
//   }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    boolean var1 = var0.isRangeGridlinesVisible();
    java.awt.Paint var2 = var0.getRangeTickBandPaint();
    org.jfree.chart.plot.XYPlot var3 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var5 = new org.jfree.chart.axis.NumberAxis3D("");
    var5.configure();
    org.jfree.chart.util.RectangleInsets var7 = var5.getLabelInsets();
    var3.setAxisOffset(var7);
    org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var11 = var10.getEndType();
    java.awt.Stroke var14 = var10.getItemStroke(0, 0);
    var3.setRangeZeroBaselineStroke(var14);
    org.jfree.chart.util.Layer var16 = null;
    java.util.Collection var17 = var3.getDomainMarkers(var16);
    var3.setForegroundAlpha(100.0f);
    var3.setRangeCrosshairVisible(true);
    org.jfree.chart.axis.AxisLocation var23 = null;
    var3.setDomainAxisLocation(1, var23, false);
    org.jfree.chart.axis.ValueAxis var27 = var3.getDomainAxis((-457));
    org.jfree.chart.axis.NumberAxis3D var29 = new org.jfree.chart.axis.NumberAxis3D("");
    var29.configure();
    java.lang.Object var31 = var29.clone();
    java.lang.Number var34 = null;
    java.util.List var40 = null;
    org.jfree.data.statistics.BoxAndWhiskerItem var41 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var34, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var40);
    boolean var42 = var29.equals((java.lang.Object)0);
    boolean var43 = var29.isAutoRange();
    java.awt.Font var44 = var29.getLabelFont();
    org.jfree.chart.axis.ValueAxis[] var45 = new org.jfree.chart.axis.ValueAxis[] { var29};
    var3.setDomainAxes(var45);
    var0.setDomainAxes(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    double var1 = var0.getLimit();
    double var2 = var0.getLimit();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var3.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var7 = var3.getBaseLinesVisible();
    java.lang.Boolean var9 = var3.getSeriesVisibleInLegend(10);
    java.awt.Paint var10 = var3.getBaseItemLabelPaint();
    java.awt.Color var13 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var14 = null;
    float[] var15 = var13.getRGBColorComponents(var14);
    var3.setBaseItemLabelPaint((java.awt.Paint)var13);
    var0.setAggregatedItemsPaint((java.awt.Paint)var13);
    double var18 = var0.getLimit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }


    org.jfree.data.general.PieDataset var0 = null;
    org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
    org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
    org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
    boolean var4 = var3.getAntiAlias();
    java.awt.Stroke var5 = var3.getBorderStroke();
    org.jfree.chart.util.RectangleInsets var6 = var3.getPadding();
    var3.setNotify(false);
    java.awt.Paint var9 = var3.getBorderPaint();
    boolean var10 = var3.isBorderVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }
// 
// 
//     org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
//     double var1 = var0.getLimit();
//     double var2 = var0.getLimit();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var3 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var5 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var3, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     var3.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var8);
//     java.lang.Comparable var10 = null;
//     java.lang.Number var12 = var3.getMeanValue(var10, (java.lang.Comparable)100.0f);
//     var0.setDataset((org.jfree.data.category.CategoryDataset)var3);
//     org.jfree.data.general.DatasetGroup var14 = var3.getGroup();
//     double var16 = var3.getRangeLowerBound(true);
//     org.jfree.chart.plot.XYPlot var17 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var19 = new org.jfree.chart.axis.NumberAxis3D("");
//     var19.configure();
//     org.jfree.chart.util.RectangleInsets var21 = var19.getLabelInsets();
//     var17.setAxisOffset(var21);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var24 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var25 = var24.getEndType();
//     java.awt.Stroke var28 = var24.getItemStroke(0, 0);
//     var17.setRangeZeroBaselineStroke(var28);
//     org.jfree.chart.util.Layer var30 = null;
//     java.util.Collection var31 = var17.getDomainMarkers(var30);
//     var17.setForegroundAlpha(100.0f);
//     boolean var34 = var3.hasListener((java.util.EventListener)var17);
//     org.jfree.chart.axis.AxisSpace var35 = var17.getFixedDomainAxisSpace();
//     org.jfree.chart.entity.EntityCollection var38 = null;
//     org.jfree.chart.ChartRenderingInfo var39 = new org.jfree.chart.ChartRenderingInfo(var38);
//     org.jfree.chart.plot.PlotRenderingInfo var40 = var39.getPlotInfo();
//     org.jfree.chart.plot.PlotRenderingInfo var41 = var39.getPlotInfo();
//     org.jfree.chart.plot.XYPlot var42 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var44 = new org.jfree.chart.axis.NumberAxis3D("");
//     var44.configure();
//     org.jfree.chart.util.RectangleInsets var46 = var44.getLabelInsets();
//     var42.setAxisOffset(var46);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var49 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var50 = var49.getEndType();
//     java.awt.Stroke var53 = var49.getItemStroke(0, 0);
//     var42.setRangeZeroBaselineStroke(var53);
//     org.jfree.chart.util.Layer var55 = null;
//     java.util.Collection var56 = var42.getDomainMarkers(var55);
//     org.jfree.chart.util.RectangleInsets var57 = var42.getInsets();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var59 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var60 = var59.getEndType();
//     java.awt.Stroke var63 = var59.getItemStroke(0, 0);
//     var42.setDomainZeroBaselineStroke(var63);
//     org.jfree.chart.util.RectangleEdge var66 = var42.getDomainAxisEdge(1);
//     org.jfree.data.xy.XYDataset var67 = null;
//     var42.setDataset(var67);
//     var42.setRangeCrosshairValue(1.0d);
//     org.jfree.chart.axis.NumberAxis3D var72 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var73 = var72.isTickMarksVisible();
//     org.jfree.chart.axis.NumberTickUnit var74 = var72.getTickUnit();
//     int var75 = var42.getRangeAxisIndex((org.jfree.chart.axis.ValueAxis)var72);
//     java.awt.geom.Point2D var76 = var42.getQuadrantOrigin();
//     var17.zoomDomainAxes(0.0d, 50.5d, var41, var76);
//     org.jfree.chart.renderer.xy.XYItemRenderer var78 = null;
//     var17.setRenderer(var78);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var73 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var75 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
// 
//   }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }
// 
// 
//     org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
//     javax.swing.Icon var1 = var0.getMaxIcon();
//     org.jfree.chart.renderer.category.MinMaxCategoryRenderer var2 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
//     org.jfree.chart.urls.StandardCategoryURLGenerator var5 = new org.jfree.chart.urls.StandardCategoryURLGenerator("AreaRendererEndType.TAPER");
//     var2.setSeriesURLGenerator(4, (org.jfree.chart.urls.CategoryURLGenerator)var5);
//     javax.swing.Icon var7 = var2.getObjectIcon();
//     javax.swing.Icon var8 = var2.getObjectIcon();
//     var0.setObjectIcon(var8);
//     
//     // This assertion (symmetry of equals) fails 
//     assertTrue("Contract failed: equals-symmetric on var0 and var2.", var0.equals(var2) == var2.equals(var0));
// 
//   }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }
// 
// 
//     org.jfree.chart.entity.EntityCollection var0 = null;
//     org.jfree.chart.ChartRenderingInfo var1 = new org.jfree.chart.ChartRenderingInfo(var0);
//     org.jfree.chart.plot.PlotRenderingInfo var2 = var1.getPlotInfo();
//     org.jfree.chart.plot.PlotRenderingInfo var3 = var1.getPlotInfo();
//     org.jfree.chart.plot.PlotRenderingInfo var4 = new org.jfree.chart.plot.PlotRenderingInfo(var1);
//     
//     // Checks the contract:  equals-hashcode on var2 and var4
//     assertTrue("Contract failed: equals-hashcode on var2 and var4", var2.equals(var4) ? var2.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var3 and var4
//     assertTrue("Contract failed: equals-hashcode on var3 and var4", var3.equals(var4) ? var3.hashCode() == var4.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var2
//     assertTrue("Contract failed: equals-hashcode on var4 and var2", var4.equals(var2) ? var4.hashCode() == var2.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var4 and var3
//     assertTrue("Contract failed: equals-hashcode on var4 and var3", var4.equals(var3) ? var4.hashCode() == var3.hashCode() : true);
// 
//   }

  public void test424() {}
//   public void test424() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
//     java.awt.Stroke var11 = var7.getItemStroke(0, 0);
//     var0.setRangeZeroBaselineStroke(var11);
//     boolean var13 = var0.isRangeCrosshairVisible();
//     java.awt.Graphics2D var14 = null;
//     java.awt.geom.Rectangle2D var15 = null;
//     org.jfree.data.KeyToGroupMap var16 = new org.jfree.data.KeyToGroupMap();
//     java.util.List var17 = var16.getGroups();
//     java.util.List var18 = var16.getGroups();
//     var0.drawRangeTickBands(var14, var15, var18);
//     org.jfree.chart.plot.XYPlot var21 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var23 = new org.jfree.chart.axis.NumberAxis3D("");
//     var23.configure();
//     org.jfree.chart.util.RectangleInsets var25 = var23.getLabelInsets();
//     var21.setAxisOffset(var25);
//     org.jfree.chart.axis.DateAxis var27 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
//     var28.setBaseShapesFilled(false);
//     java.awt.Paint var35 = var28.getSeriesOutlinePaint((-1));
//     java.awt.Paint var37 = var28.lookupSeriesOutlinePaint(0);
//     var27.setLabelPaint(var37);
//     boolean var39 = var27.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var41 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var42 = var41.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var43 = var41.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var44 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var46 = var44.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var49 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var52 = var49.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var53 = null;
//     org.jfree.chart.plot.RingPlot var54 = new org.jfree.chart.plot.RingPlot(var53);
//     org.jfree.chart.plot.Plot var55 = var54.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var56 = null;
//     var54.axisChanged(var56);
//     org.jfree.chart.JFreeChart var59 = new org.jfree.chart.JFreeChart("hi!", var52, (org.jfree.chart.plot.Plot)var54, true);
//     boolean var60 = var44.equals((java.lang.Object)var52);
//     var44.validateObject();
//     org.jfree.data.Range var62 = var41.findRangeBounds((org.jfree.data.category.CategoryDataset)var44);
//     org.jfree.data.general.DatasetChangeEvent var63 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var39, (org.jfree.data.general.Dataset)var44);
//     var21.datasetChanged(var63);
//     org.jfree.chart.axis.ValueAxis var66 = var21.getDomainAxis((-16777206));
//     var21.clearDomainAxes();
//     org.jfree.chart.axis.AxisLocation var68 = var21.getRangeAxisLocation();
//     var0.setRangeAxisLocation(5, var68, true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var46 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
// 
//   }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }


    org.jfree.chart.renderer.category.StatisticalBarRenderer var0 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    double var1 = var0.getItemMargin();
    org.jfree.chart.LegendItemCollection var2 = var0.getLegendItems();
    var0.setIncludeBaseInRange(true);
    org.jfree.chart.plot.XYPlot var6 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var8 = new org.jfree.chart.axis.NumberAxis3D("");
    var8.configure();
    org.jfree.chart.util.RectangleInsets var10 = var8.getLabelInsets();
    var6.setAxisOffset(var10);
    org.jfree.chart.plot.CategoryMarker var13 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var14 = var13.getOutlineStroke();
    var6.addDomainMarker((org.jfree.chart.plot.Marker)var13);
    var13.setLabel("org.jfree.chart.event.RendererChangeEvent[source=false]");
    org.jfree.chart.renderer.category.StatisticalBarRenderer var18 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    var19.setSeriesCreateEntities(1, (java.lang.Boolean)false);
    boolean var23 = var19.getBaseLinesVisible();
    java.lang.Boolean var25 = var19.getSeriesVisibleInLegend(10);
    java.awt.Paint var26 = var19.getBaseItemLabelPaint();
    java.awt.Color var29 = java.awt.Color.getColor("ThreadContext", 10);
    float[] var30 = null;
    float[] var31 = var29.getRGBColorComponents(var30);
    var19.setBaseItemLabelPaint((java.awt.Paint)var29);
    org.jfree.chart.renderer.category.StackedAreaRenderer var34 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var35 = var34.getEndType();
    org.jfree.chart.labels.ItemLabelPosition var36 = var34.getBaseNegativeItemLabelPosition();
    var19.setBasePositiveItemLabelPosition(var36, true);
    var18.setPositiveItemLabelPositionFallback(var36);
    org.jfree.chart.text.TextAnchor var40 = var36.getRotationAnchor();
    var13.setLabelTextAnchor(var40);
    java.awt.Stroke var42 = var13.getStroke();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSeriesOutlineStroke((-457), var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var6 = null;
    org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
    org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var9 = null;
    var7.axisChanged(var9);
    org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
    org.jfree.chart.renderer.category.LineAndShapeRenderer var13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var16 = var13.getLegendItem((-1), 100);
    var13.setBaseShapesFilled(false);
    java.awt.Paint var20 = var13.getSeriesOutlinePaint((-1));
    boolean var21 = var12.equals((java.lang.Object)var13);
    org.jfree.chart.labels.CategoryToolTipGenerator var22 = null;
    var13.setBaseToolTipGenerator(var22, false);
    java.awt.Paint var27 = var13.getItemFillPaint(0, 10);
    boolean var28 = var13.getUseOutlinePaint();
    var13.setUseFillPaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }


    org.jfree.chart.renderer.category.LineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    boolean var1 = var0.getBaseShapesFilled();
    org.jfree.chart.axis.NumberAxis3D var3 = new org.jfree.chart.axis.NumberAxis3D("");
    var3.configure();
    java.lang.Object var5 = var3.clone();
    java.lang.Number var8 = null;
    java.util.List var14 = null;
    org.jfree.data.statistics.BoxAndWhiskerItem var15 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)0L, var8, (java.lang.Number)100.0f, (java.lang.Number)0L, (java.lang.Number)0, (java.lang.Number)(short)(-1), (java.lang.Number)1.0d, var14);
    boolean var16 = var3.equals((java.lang.Object)0);
    boolean var17 = var3.isAutoRange();
    java.awt.Font var18 = var3.getLabelFont();
    var0.setBaseItemLabelFont(var18, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    org.jfree.chart.util.RectangleInsets var4 = new org.jfree.chart.util.RectangleInsets((-1.0d), 0.0d, 0.05d, Double.NaN);
    double var6 = var4.calculateBottomInset(0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.05d);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    org.jfree.chart.plot.IntervalMarker var2 = new org.jfree.chart.plot.IntervalMarker(2.0d, (-8.0d));
    double var3 = var2.getEndValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-8.0d));

  }

  public void test430() {}
//   public void test430() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }
// 
// 
//     org.jfree.chart.util.HorizontalAlignment var0 = null;
//     org.jfree.chart.util.VerticalAlignment var1 = null;
//     org.jfree.chart.block.FlowArrangement var4 = new org.jfree.chart.block.FlowArrangement(var0, var1, 90.0d, 1.0d);
//     java.awt.Shape var7 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var7, Double.NaN, Double.NaN);
//     java.awt.Shape var14 = org.jfree.chart.util.ShapeUtilities.rotateShape(var7, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var22 = new org.jfree.chart.entity.CategoryItemEntity(var7, "hi!", "", (org.jfree.data.category.CategoryDataset)var17, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var26 = var23.getLegendItem((-1), 100);
//     var23.setBaseShapesFilled(false);
//     java.awt.Paint var30 = var23.getSeriesOutlinePaint((-1));
//     java.awt.Paint var32 = var23.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var33 = new org.jfree.chart.title.LegendGraphic(var7, var32);
//     org.jfree.data.general.PieDataset var34 = null;
//     org.jfree.chart.plot.RingPlot var35 = new org.jfree.chart.plot.RingPlot(var34);
//     org.jfree.chart.plot.Plot var36 = var35.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var37 = var35.getInsets();
//     double var39 = var37.calculateBottomOutset(100.0d);
//     var33.setPadding(var37);
//     org.jfree.chart.util.RectangleInsets var41 = var33.getMargin();
//     org.jfree.chart.util.RectangleAnchor var42 = var33.getShapeLocation();
//     org.jfree.data.DefaultKeyedValues2D var44 = new org.jfree.data.DefaultKeyedValues2D(true);
//     var4.add((org.jfree.chart.block.Block)var33, (java.lang.Object)true);
//     java.awt.Paint var46 = var33.getLinePaint();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == 4.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var46);
// 
//   }

  public void test431() {}
//   public void test431() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }
// 
// 
//     org.jfree.data.general.PieDataset var0 = null;
//     org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
//     org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
//     org.jfree.chart.JFreeChart var3 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var1);
//     boolean var4 = var3.getAntiAlias();
//     org.jfree.chart.util.RectangleInsets var5 = var3.getPadding();
//     double var7 = var5.extendHeight(10.0d);
//     double var9 = var5.calculateRightInset(3.0d);
//     org.jfree.chart.axis.NumberAxis3D var11 = new org.jfree.chart.axis.NumberAxis3D("");
//     var11.configure();
//     org.jfree.chart.util.RectangleInsets var13 = var11.getLabelInsets();
//     double var15 = var13.calculateBottomOutset(4.0d);
//     java.awt.Shape var18 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var21 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var18, Double.NaN, Double.NaN);
//     java.awt.Shape var25 = org.jfree.chart.util.ShapeUtilities.rotateShape(var18, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var28 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var30 = var28.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var33 = new org.jfree.chart.entity.CategoryItemEntity(var18, "hi!", "", (org.jfree.data.category.CategoryDataset)var28, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var37 = var34.getLegendItem((-1), 100);
//     var34.setBaseShapesFilled(false);
//     java.awt.Paint var41 = var34.getSeriesOutlinePaint((-1));
//     java.awt.Paint var43 = var34.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var44 = new org.jfree.chart.title.LegendGraphic(var18, var43);
//     org.jfree.data.general.PieDataset var45 = null;
//     org.jfree.chart.plot.RingPlot var46 = new org.jfree.chart.plot.RingPlot(var45);
//     org.jfree.chart.plot.Plot var47 = var46.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var48 = var46.getInsets();
//     double var50 = var48.calculateBottomOutset(100.0d);
//     var44.setPadding(var48);
//     org.jfree.chart.util.RectangleAnchor var52 = var44.getShapeLocation();
//     var44.setLineVisible(false);
//     boolean var55 = var44.isLineVisible();
//     java.awt.geom.Rectangle2D var56 = var44.getBounds();
//     java.awt.geom.Rectangle2D var57 = var13.createOutsetRectangle(var56);
//     var5.trim(var57);
//     
//     // Checks the contract:  equals-hashcode on var1 and var46
//     assertTrue("Contract failed: equals-hashcode on var1 and var46", var1.equals(var46) ? var1.hashCode() == var46.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var46 and var1
//     assertTrue("Contract failed: equals-hashcode on var46 and var1", var46.equals(var1) ? var46.hashCode() == var1.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var2 and var47
//     assertTrue("Contract failed: equals-hashcode on var2 and var47", var2.equals(var47) ? var2.hashCode() == var47.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var47 and var2
//     assertTrue("Contract failed: equals-hashcode on var47 and var2", var47.equals(var2) ? var47.hashCode() == var2.hashCode() : true);
// 
//   }

  public void test432() {}
//   public void test432() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }
// 
// 
//     org.jfree.chart.block.CenterArrangement var0 = new org.jfree.chart.block.CenterArrangement();
//     java.awt.Shape var3 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var3, Double.NaN, Double.NaN);
//     java.awt.Shape var10 = org.jfree.chart.util.ShapeUtilities.rotateShape(var3, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var13 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var15 = var13.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var18 = new org.jfree.chart.entity.CategoryItemEntity(var3, "hi!", "", (org.jfree.data.category.CategoryDataset)var13, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var22 = var19.getLegendItem((-1), 100);
//     var19.setBaseShapesFilled(false);
//     java.awt.Paint var26 = var19.getSeriesOutlinePaint((-1));
//     java.awt.Paint var28 = var19.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var29 = new org.jfree.chart.title.LegendGraphic(var3, var28);
//     org.jfree.data.Range var32 = new org.jfree.data.Range(1.0d, 100.0d);
//     var0.add((org.jfree.chart.block.Block)var29, (java.lang.Object)var32);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var34.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var38 = var34.getBaseLinesVisible();
//     java.lang.Boolean var40 = var34.getSeriesVisibleInLegend(10);
//     java.awt.Paint var41 = var34.getBaseItemLabelPaint();
//     java.awt.Color var44 = java.awt.Color.getColor("ThreadContext", 10);
//     float[] var45 = null;
//     float[] var46 = var44.getRGBColorComponents(var45);
//     var34.setBaseItemLabelPaint((java.awt.Paint)var44);
//     int var48 = var44.getGreen();
//     var29.setFillPaint((java.awt.Paint)var44);
//     org.jfree.chart.util.RectangleAnchor var50 = var29.getShapeLocation();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
// 
//   }

  public void test433() {}
//   public void test433() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }
// 
// 
//     org.jfree.chart.axis.CategoryAxis3D var1 = new org.jfree.chart.axis.CategoryAxis3D("Pie Plot");
//     org.jfree.data.general.PieDataset var3 = null;
//     org.jfree.chart.plot.RingPlot var4 = new org.jfree.chart.plot.RingPlot(var3);
//     double var5 = var4.getInteriorGap();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var8 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var11 = var8.getItemLabelFont((-1), 0);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     var12.setSeriesCreateEntities(1, (java.lang.Boolean)false);
//     boolean var16 = var12.getBaseLinesVisible();
//     java.lang.Boolean var18 = var12.getSeriesVisibleInLegend(10);
//     java.awt.Paint var19 = var12.getBaseItemLabelPaint();
//     org.jfree.chart.text.TextFragment var20 = new org.jfree.chart.text.TextFragment("", var11, var19);
//     var4.setLabelFont(var11);
//     var1.setTickLabelFont((java.lang.Comparable)1L, var11);
//     org.jfree.chart.axis.CategoryAnchor var23 = null;
//     org.jfree.chart.axis.NumberAxis3D var27 = new org.jfree.chart.axis.NumberAxis3D("");
//     var27.configure();
//     org.jfree.chart.util.RectangleInsets var29 = var27.getLabelInsets();
//     double var31 = var29.calculateBottomOutset(4.0d);
//     java.awt.Shape var34 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var37 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var34, Double.NaN, Double.NaN);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.rotateShape(var34, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var44 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var46 = var44.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var49 = new org.jfree.chart.entity.CategoryItemEntity(var34, "hi!", "", (org.jfree.data.category.CategoryDataset)var44, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var53 = var50.getLegendItem((-1), 100);
//     var50.setBaseShapesFilled(false);
//     java.awt.Paint var57 = var50.getSeriesOutlinePaint((-1));
//     java.awt.Paint var59 = var50.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var60 = new org.jfree.chart.title.LegendGraphic(var34, var59);
//     org.jfree.data.general.PieDataset var61 = null;
//     org.jfree.chart.plot.RingPlot var62 = new org.jfree.chart.plot.RingPlot(var61);
//     org.jfree.chart.plot.Plot var63 = var62.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var64 = var62.getInsets();
//     double var66 = var64.calculateBottomOutset(100.0d);
//     var60.setPadding(var64);
//     org.jfree.chart.util.RectangleAnchor var68 = var60.getShapeLocation();
//     var60.setLineVisible(false);
//     boolean var71 = var60.isLineVisible();
//     java.awt.geom.Rectangle2D var72 = var60.getBounds();
//     java.awt.geom.Rectangle2D var73 = var29.createOutsetRectangle(var72);
//     org.jfree.chart.plot.XYPlot var74 = new org.jfree.chart.plot.XYPlot();
//     boolean var75 = var74.isRangeGridlinesVisible();
//     java.awt.Paint var76 = var74.getRangeTickBandPaint();
//     java.lang.Object var77 = var74.clone();
//     org.jfree.chart.util.RectangleEdge var79 = var74.getRangeAxisEdge(1);
//     double var80 = var1.getCategoryJava2DCoordinate(var23, 0, 100, var72, var79);
// 
//   }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }


    org.jfree.chart.ui.BasicProjectInfo var5 = new org.jfree.chart.ui.BasicProjectInfo("AreaRendererEndType.TAPER", "org.jfree.data.general.DatasetChangeEvent[source=false]", "Other", "org.jfree.data.UnknownKeyException: ", "hi!");
    var5.setName("Category Plot");

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }


    java.awt.Shape var2 = org.jfree.chart.util.ShapeUtilities.createRegularCross((-1.0f), 100.0f);
    java.awt.Shape var6 = org.jfree.chart.util.ShapeUtilities.rotateShape(var2, 0.25d, 0.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test436() {}
//   public void test436() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }
// 
// 
//     org.jfree.data.general.PieDataset var0 = null;
//     org.jfree.chart.plot.RingPlot var1 = new org.jfree.chart.plot.RingPlot(var0);
//     org.jfree.chart.plot.Plot var2 = var1.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var3 = null;
//     var1.axisChanged(var3);
//     var1.setShadowYOffset(0.0d);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var10 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var13 = var10.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var14 = null;
//     org.jfree.chart.plot.RingPlot var15 = new org.jfree.chart.plot.RingPlot(var14);
//     org.jfree.chart.plot.Plot var16 = var15.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var17 = null;
//     var15.axisChanged(var17);
//     org.jfree.chart.JFreeChart var20 = new org.jfree.chart.JFreeChart("hi!", var13, (org.jfree.chart.plot.Plot)var15, true);
//     java.util.List var21 = var20.getSubtitles();
//     java.awt.Stroke var22 = var20.getBorderStroke();
//     var1.setSectionOutlineStroke((java.lang.Comparable)0.0d, var22);
//     java.awt.Paint var24 = var1.getBaseSectionOutlinePaint();
//     org.jfree.chart.plot.XYPlot var25 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var27 = new org.jfree.chart.axis.NumberAxis3D("");
//     var27.configure();
//     org.jfree.chart.util.RectangleInsets var29 = var27.getLabelInsets();
//     var25.setAxisOffset(var29);
//     org.jfree.chart.plot.CategoryMarker var32 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var33 = var32.getOutlineStroke();
//     var25.addDomainMarker((org.jfree.chart.plot.Marker)var32);
//     org.jfree.chart.renderer.xy.XYItemRenderer var35 = var25.getRenderer();
//     org.jfree.chart.axis.DateAxis var36 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var37 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var40 = var37.getLegendItem((-1), 100);
//     var37.setBaseShapesFilled(false);
//     java.awt.Paint var44 = var37.getSeriesOutlinePaint((-1));
//     java.awt.Paint var46 = var37.lookupSeriesOutlinePaint(0);
//     var36.setLabelPaint(var46);
//     boolean var48 = var36.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var50 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var51 = var50.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var52 = var50.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var53 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var55 = var53.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var58 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var61 = var58.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var62 = null;
//     org.jfree.chart.plot.RingPlot var63 = new org.jfree.chart.plot.RingPlot(var62);
//     org.jfree.chart.plot.Plot var64 = var63.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var65 = null;
//     var63.axisChanged(var65);
//     org.jfree.chart.JFreeChart var68 = new org.jfree.chart.JFreeChart("hi!", var61, (org.jfree.chart.plot.Plot)var63, true);
//     boolean var69 = var53.equals((java.lang.Object)var61);
//     var53.validateObject();
//     org.jfree.data.Range var71 = var50.findRangeBounds((org.jfree.data.category.CategoryDataset)var53);
//     org.jfree.data.general.DatasetChangeEvent var72 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var48, (org.jfree.data.general.Dataset)var53);
//     var25.datasetChanged(var72);
//     org.jfree.data.general.Dataset var74 = var72.getDataset();
//     var1.datasetChanged(var72);
//     
//     // Checks the contract:  equals-hashcode on var15 and var63
//     assertTrue("Contract failed: equals-hashcode on var15 and var63", var15.equals(var63) ? var15.hashCode() == var63.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var63 and var15
//     assertTrue("Contract failed: equals-hashcode on var63 and var15", var63.equals(var15) ? var63.hashCode() == var15.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var16 and var64
//     assertTrue("Contract failed: equals-hashcode on var16 and var64", var16.equals(var64) ? var16.hashCode() == var64.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var64 and var16
//     assertTrue("Contract failed: equals-hashcode on var64 and var16", var64.equals(var16) ? var64.hashCode() == var16.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var20 and var68
//     assertTrue("Contract failed: equals-hashcode on var20 and var68", var20.equals(var68) ? var20.hashCode() == var68.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var68 and var20
//     assertTrue("Contract failed: equals-hashcode on var68 and var20", var68.equals(var20) ? var68.hashCode() == var20.hashCode() : true);
// 
//   }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    org.jfree.chart.renderer.xy.XYItemRenderer var10 = var0.getRenderer();
    org.jfree.chart.axis.ValueAxis var12 = var0.getDomainAxis(1);
    java.awt.Stroke var13 = var0.getDomainCrosshairStroke();
    boolean var14 = var0.isSubplot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    org.jfree.chart.axis.CategoryAxis var2 = new org.jfree.chart.axis.CategoryAxis("hi!");
    var2.setUpperMargin(0.0d);
    int var5 = var2.getMaximumCategoryLabelLines();
    java.lang.Object var6 = var2.clone();
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis();
    org.jfree.chart.renderer.category.LineAndShapeRenderer var8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var11 = var8.getLegendItem((-1), 100);
    var8.setBaseShapesFilled(false);
    java.awt.Paint var15 = var8.getSeriesOutlinePaint((-1));
    java.awt.Paint var17 = var8.lookupSeriesOutlinePaint(0);
    var7.setLabelPaint(var17);
    double var19 = var7.getFixedAutoRange();
    org.jfree.chart.renderer.category.StatisticalBarRenderer var20 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
    org.jfree.chart.LegendItem var23 = var20.getLegendItem(2, 0);
    double var24 = var20.getBase();
    org.jfree.chart.labels.ItemLabelPosition var27 = var20.getPositiveItemLabelPosition(2, (-1));
    org.jfree.chart.renderer.category.LineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
    org.jfree.chart.LegendItem var31 = var28.getLegendItem((-1), 100);
    var28.setBaseShapesFilled(false);
    java.awt.Paint var36 = var28.getItemOutlinePaint(10, 1);
    var20.setErrorIndicatorPaint(var36);
    org.jfree.chart.plot.CategoryPlot var38 = new org.jfree.chart.plot.CategoryPlot(var0, var2, (org.jfree.chart.axis.ValueAxis)var7, (org.jfree.chart.renderer.category.CategoryItemRenderer)var20);
    var38.setRangeCrosshairValue(50.5d);
    org.jfree.chart.axis.AxisSpace var41 = new org.jfree.chart.axis.AxisSpace();
    double var42 = var41.getLeft();
    var38.setFixedRangeAxisSpace(var41);
    org.jfree.chart.axis.AxisSpace var44 = new org.jfree.chart.axis.AxisSpace();
    double var45 = var44.getLeft();
    var38.setFixedRangeAxisSpace(var44);
    var38.setRangeCrosshairLockedOnData(false);
    org.jfree.chart.axis.CategoryAxis var50 = var38.getDomainAxis((-1));
    org.jfree.chart.axis.AxisSpace var51 = new org.jfree.chart.axis.AxisSpace();
    double var52 = var51.getBottom();
    var38.setFixedRangeAxisSpace(var51);
    org.jfree.chart.util.Layer var54 = null;
    java.util.Collection var55 = var38.getDomainMarkers(var54);
    java.util.List var56 = var38.getCategories();
    org.jfree.chart.axis.CategoryAxis var58 = new org.jfree.chart.axis.CategoryAxis("hi!");
    java.lang.String var60 = var58.getCategoryLabelToolTip((java.lang.Comparable)10);
    var58.setUpperMargin(4.0d);
    var58.setTickLabelsVisible(true);
    var58.setCategoryLabelPositionOffset(2);
    java.util.List var67 = var38.getCategoriesForAxis(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test439() {}
//   public void test439() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }
// 
// 
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     org.jfree.data.general.PieDataset var3 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var1, (java.lang.Comparable)"");
//     org.jfree.data.general.PieDataset var4 = null;
//     org.jfree.chart.plot.RingPlot var5 = new org.jfree.chart.plot.RingPlot(var4);
//     org.jfree.chart.plot.Plot var6 = var5.getRootPlot();
//     var1.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var6);
//     java.lang.Comparable var8 = null;
//     java.lang.Number var10 = var1.getMeanValue(var8, (java.lang.Comparable)100.0f);
//     org.jfree.data.Range var11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var1);
//     java.lang.Comparable var12 = null;
//     org.jfree.data.DefaultKeyedValues var13 = new org.jfree.data.DefaultKeyedValues();
//     org.jfree.data.category.CategoryDataset var14 = null;
//     org.jfree.chart.axis.CategoryAxis var16 = new org.jfree.chart.axis.CategoryAxis("hi!");
//     var16.setUpperMargin(0.0d);
//     int var19 = var16.getMaximumCategoryLabelLines();
//     java.lang.Object var20 = var16.clone();
//     org.jfree.chart.axis.DateAxis var21 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var25 = var22.getLegendItem((-1), 100);
//     var22.setBaseShapesFilled(false);
//     java.awt.Paint var29 = var22.getSeriesOutlinePaint((-1));
//     java.awt.Paint var31 = var22.lookupSeriesOutlinePaint(0);
//     var21.setLabelPaint(var31);
//     double var33 = var21.getFixedAutoRange();
//     org.jfree.chart.renderer.category.StatisticalBarRenderer var34 = new org.jfree.chart.renderer.category.StatisticalBarRenderer();
//     org.jfree.chart.LegendItem var37 = var34.getLegendItem(2, 0);
//     double var38 = var34.getBase();
//     org.jfree.chart.labels.ItemLabelPosition var41 = var34.getPositiveItemLabelPosition(2, (-1));
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var42 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var45 = var42.getLegendItem((-1), 100);
//     var42.setBaseShapesFilled(false);
//     java.awt.Paint var50 = var42.getItemOutlinePaint(10, 1);
//     var34.setErrorIndicatorPaint(var50);
//     org.jfree.chart.plot.CategoryPlot var52 = new org.jfree.chart.plot.CategoryPlot(var14, var16, (org.jfree.chart.axis.ValueAxis)var21, (org.jfree.chart.renderer.category.CategoryItemRenderer)var34);
//     var52.setRangeCrosshairValue(50.5d);
//     org.jfree.chart.axis.CategoryAxis var56 = var52.getDomainAxis(0);
//     var52.setDrawSharedDomainAxis(true);
//     org.jfree.chart.util.SortOrder var59 = var52.getColumnRenderingOrder();
//     var13.sortByValues(var59);
//     org.jfree.data.time.Month var61 = new org.jfree.data.time.Month();
//     long var62 = var61.getSerialIndex();
//     java.util.Date var63 = var61.getEnd();
//     var13.setValue((java.lang.Comparable)var63, (java.lang.Number)1.0E-5d);
//     org.jfree.data.time.SerialDate var66 = org.jfree.data.time.SerialDate.createInstance(var63);
//     java.lang.Number var67 = var1.getValue(var12, (java.lang.Comparable)var66);
//     org.jfree.data.time.SerialDate var68 = org.jfree.data.time.SerialDate.addMonths(0, var66);
//     java.lang.String var69 = var68.toString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var62 == 24180L);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var69 + "' != '" + "31-December-2014"+ "'", var69.equals("31-December-2014"));
// 
//   }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }


    org.jfree.data.xy.XYDataset var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.findRangeBounds(var0, false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }
// 
// 
//     org.jfree.chart.axis.DateAxis var0 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), 100);
//     var1.setBaseShapesFilled(false);
//     java.awt.Paint var8 = var1.getSeriesOutlinePaint((-1));
//     java.awt.Paint var10 = var1.lookupSeriesOutlinePaint(0);
//     var0.setLabelPaint(var10);
//     boolean var12 = var0.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var14 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var15 = var14.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var16 = var14.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var17 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var19 = var17.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var22 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var25 = var22.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var26 = null;
//     org.jfree.chart.plot.RingPlot var27 = new org.jfree.chart.plot.RingPlot(var26);
//     org.jfree.chart.plot.Plot var28 = var27.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var29 = null;
//     var27.axisChanged(var29);
//     org.jfree.chart.JFreeChart var32 = new org.jfree.chart.JFreeChart("hi!", var25, (org.jfree.chart.plot.Plot)var27, true);
//     boolean var33 = var17.equals((java.lang.Object)var25);
//     var17.validateObject();
//     org.jfree.data.Range var35 = var14.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.data.general.DatasetChangeEvent var36 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var12, (org.jfree.data.general.Dataset)var17);
//     org.jfree.data.Range var37 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var17);
//     org.jfree.chart.plot.XYPlot var38 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var40 = new org.jfree.chart.axis.NumberAxis3D("");
//     var40.configure();
//     org.jfree.chart.util.RectangleInsets var42 = var40.getLabelInsets();
//     var38.setAxisOffset(var42);
//     org.jfree.chart.plot.CategoryMarker var45 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var46 = var45.getOutlineStroke();
//     var38.addDomainMarker((org.jfree.chart.plot.Marker)var45);
//     var17.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var38);
//     java.awt.Image var49 = var38.getBackgroundImage();
//     org.jfree.chart.axis.NumberAxis3D var51 = new org.jfree.chart.axis.NumberAxis3D("");
//     java.awt.Paint var52 = var51.getTickLabelPaint();
//     org.jfree.chart.axis.NumberAxis3D var54 = new org.jfree.chart.axis.NumberAxis3D("");
//     org.jfree.chart.axis.NumberAxis3D var56 = new org.jfree.chart.axis.NumberAxis3D("");
//     boolean var57 = var56.isTickMarksVisible();
//     org.jfree.data.Range var60 = new org.jfree.data.Range(1.0d, 100.0d);
//     var56.setRangeWithMargins(var60, false, false);
//     var54.setRangeWithMargins(var60);
//     var51.setDefaultAutoRange(var60);
//     java.awt.Font var66 = var51.getTickLabelFont();
//     var38.setDomainAxis((org.jfree.chart.axis.ValueAxis)var51);
//     java.awt.Paint var69 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var38.setQuadrantPaint((-16777206), var69);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var57 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
// 
//   }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test442"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var23 = var0.getDomainAxisEdge();
    java.awt.Graphics2D var24 = null;
    java.awt.geom.Rectangle2D var25 = null;
    org.jfree.data.DefaultKeyedValues2D var27 = new org.jfree.data.DefaultKeyedValues2D(false);
    var27.clear();
    java.util.List var29 = var27.getColumnKeys();
    var0.drawDomainTickBands(var24, var25, var29);
    float var31 = var0.getBackgroundAlpha();
    org.jfree.data.xy.XYDataset var32 = var0.getDataset();
    org.jfree.chart.plot.Plot var33 = var0.getRootPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test443"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
    java.awt.Stroke var8 = var7.getOutlineStroke();
    var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
    java.awt.geom.Point2D var10 = var0.getQuadrantOrigin();
    org.jfree.chart.plot.DatasetRenderingOrder var11 = var0.getDatasetRenderingOrder();
    int var12 = var0.getDatasetCount();
    boolean var13 = var0.isDomainZeroBaselineVisible();
    org.jfree.chart.util.Layer var15 = null;
    java.util.Collection var16 = var0.getRangeMarkers(2, var15);
    org.jfree.chart.renderer.xy.XYItemRenderer var18 = null;
    var0.setRenderer(2, var18, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test444() {}
//   public void test444() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test444"); }
// 
// 
//     org.jfree.chart.renderer.category.StackedAreaRenderer var2 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var5 = var2.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var6 = null;
//     org.jfree.chart.plot.RingPlot var7 = new org.jfree.chart.plot.RingPlot(var6);
//     org.jfree.chart.plot.Plot var8 = var7.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var9 = null;
//     var7.axisChanged(var9);
//     org.jfree.chart.JFreeChart var12 = new org.jfree.chart.JFreeChart("hi!", var5, (org.jfree.chart.plot.Plot)var7, true);
//     java.lang.Object var13 = var7.clone();
//     org.jfree.chart.util.HorizontalAlignment var14 = null;
//     org.jfree.chart.util.VerticalAlignment var15 = null;
//     org.jfree.chart.block.FlowArrangement var18 = new org.jfree.chart.block.FlowArrangement(var14, var15, 100.0d, 10.0d);
//     var18.clear();
//     org.jfree.chart.block.Arrangement var20 = null;
//     org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var7, (org.jfree.chart.block.Arrangement)var18, var20);
//     org.jfree.data.UnknownKeyException var23 = new org.jfree.data.UnknownKeyException("");
//     java.lang.Throwable[] var24 = var23.getSuppressed();
//     java.lang.Throwable[] var25 = var23.getSuppressed();
//     boolean var26 = var21.equals((java.lang.Object)var25);
//     org.jfree.chart.util.RectangleInsets var27 = var21.getItemLabelPadding();
//     org.jfree.chart.util.VerticalAlignment var28 = var21.getVerticalAlignment();
//     org.jfree.chart.LegendItemSource[] var29 = var21.getSources();
//     org.jfree.chart.util.RectangleInsets var30 = var21.getLegendItemGraphicPadding();
//     boolean var31 = var21.getNotify();
//     java.awt.Graphics2D var32 = null;
//     org.jfree.chart.axis.NumberAxis3D var34 = new org.jfree.chart.axis.NumberAxis3D("");
//     var34.configure();
//     org.jfree.chart.util.RectangleInsets var36 = var34.getLabelInsets();
//     double var38 = var36.calculateBottomOutset(4.0d);
//     java.awt.Shape var41 = org.jfree.chart.util.ShapeUtilities.createRegularCross(100.0f, 0.0f);
//     java.awt.Shape var44 = org.jfree.chart.util.ShapeUtilities.createTranslatedShape(var41, Double.NaN, Double.NaN);
//     java.awt.Shape var48 = org.jfree.chart.util.ShapeUtilities.rotateShape(var41, 10.0d, 0.0f, 0.0f);
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var51 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var53 = var51.getRangeUpperBound(false);
//     org.jfree.chart.entity.CategoryItemEntity var56 = new org.jfree.chart.entity.CategoryItemEntity(var41, "hi!", "", (org.jfree.data.category.CategoryDataset)var51, (java.lang.Comparable)100.0f, (java.lang.Comparable)10L);
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var57 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var60 = var57.getLegendItem((-1), 100);
//     var57.setBaseShapesFilled(false);
//     java.awt.Paint var64 = var57.getSeriesOutlinePaint((-1));
//     java.awt.Paint var66 = var57.lookupSeriesOutlinePaint(0);
//     org.jfree.chart.title.LegendGraphic var67 = new org.jfree.chart.title.LegendGraphic(var41, var66);
//     org.jfree.data.general.PieDataset var68 = null;
//     org.jfree.chart.plot.RingPlot var69 = new org.jfree.chart.plot.RingPlot(var68);
//     org.jfree.chart.plot.Plot var70 = var69.getRootPlot();
//     org.jfree.chart.util.RectangleInsets var71 = var69.getInsets();
//     double var73 = var71.calculateBottomOutset(100.0d);
//     var67.setPadding(var71);
//     org.jfree.chart.util.RectangleAnchor var75 = var67.getShapeLocation();
//     var67.setLineVisible(false);
//     boolean var78 = var67.isLineVisible();
//     java.awt.geom.Rectangle2D var79 = var67.getBounds();
//     java.awt.geom.Rectangle2D var80 = var36.createOutsetRectangle(var79);
//     var21.draw(var32, var79);
// 
//   }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test445"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    java.lang.Object var1 = var0.clone();
    int var3 = var0.getIndex((java.lang.Comparable)24180L);
    org.jfree.data.KeyedObjects2D var5 = new org.jfree.data.KeyedObjects2D();
    org.jfree.data.KeyToGroupMap var14 = new org.jfree.data.KeyToGroupMap();
    java.util.List var15 = var14.getGroups();
    org.jfree.data.statistics.BoxAndWhiskerItem var16 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)1.0d, (java.lang.Number)1.0d, (java.lang.Number)100.0f, (java.lang.Number)(short)1, (java.lang.Number)1.0f, (java.lang.Number)(byte)(-1), (java.lang.Number)(-1), (java.lang.Number)(byte)100, var15);
    java.lang.Comparable var17 = null;
    var5.setObject((java.lang.Object)var15, var17, (java.lang.Comparable)1);
    var5.removeColumn(0);
    org.jfree.data.time.SimpleTimePeriod var24 = new org.jfree.data.time.SimpleTimePeriod((-1L), 10L);
    var5.removeObject((java.lang.Comparable)var24, (java.lang.Comparable)(byte)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertValue(2014, (java.lang.Comparable)(byte)10, (java.lang.Number)1.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test446"); }


    org.jfree.chart.entity.EntityCollection var0 = null;
    org.jfree.chart.ChartRenderingInfo var1 = new org.jfree.chart.ChartRenderingInfo(var0);
    org.jfree.chart.plot.PlotRenderingInfo var2 = var1.getPlotInfo();
    org.jfree.chart.plot.PlotRenderingInfo var3 = var1.getPlotInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.PlotRenderingInfo var5 = var3.getSubplotInfo(0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test447"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
    var2.configure();
    org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
    var0.setAxisOffset(var4);
    org.jfree.chart.renderer.category.StackedAreaRenderer var7 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var8 = var7.getEndType();
    java.awt.Stroke var11 = var7.getItemStroke(0, 0);
    var0.setRangeZeroBaselineStroke(var11);
    org.jfree.chart.util.Layer var13 = null;
    java.util.Collection var14 = var0.getDomainMarkers(var13);
    org.jfree.chart.util.RectangleInsets var15 = var0.getInsets();
    org.jfree.chart.renderer.category.StackedAreaRenderer var17 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.renderer.AreaRendererEndType var18 = var17.getEndType();
    java.awt.Stroke var21 = var17.getItemStroke(0, 0);
    var0.setDomainZeroBaselineStroke(var21);
    org.jfree.chart.util.RectangleEdge var24 = var0.getDomainAxisEdge(1);
    org.jfree.data.xy.XYDataset var25 = null;
    var0.setDataset(var25);
    var0.setRangeCrosshairValue(1.0d);
    var0.setRangeCrosshairValue((-8.0d), true);
    boolean var32 = var0.isDomainCrosshairVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test448"); }


    org.jfree.data.category.CategoryDataset var0 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var0, 1.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test449() {}
//   public void test449() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test449"); }
// 
// 
//     org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
//     org.jfree.chart.axis.NumberAxis3D var2 = new org.jfree.chart.axis.NumberAxis3D("");
//     var2.configure();
//     org.jfree.chart.util.RectangleInsets var4 = var2.getLabelInsets();
//     var0.setAxisOffset(var4);
//     org.jfree.chart.plot.CategoryMarker var7 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)true);
//     java.awt.Stroke var8 = var7.getOutlineStroke();
//     var0.addDomainMarker((org.jfree.chart.plot.Marker)var7);
//     org.jfree.chart.renderer.xy.XYItemRenderer var10 = var0.getRenderer();
//     org.jfree.chart.axis.DateAxis var11 = new org.jfree.chart.axis.DateAxis();
//     org.jfree.chart.renderer.category.LineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer();
//     org.jfree.chart.LegendItem var15 = var12.getLegendItem((-1), 100);
//     var12.setBaseShapesFilled(false);
//     java.awt.Paint var19 = var12.getSeriesOutlinePaint((-1));
//     java.awt.Paint var21 = var12.lookupSeriesOutlinePaint(0);
//     var11.setLabelPaint(var21);
//     boolean var23 = var11.isNegativeArrowVisible();
//     org.jfree.chart.renderer.category.StackedAreaRenderer var25 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     org.jfree.chart.renderer.AreaRendererEndType var26 = var25.getEndType();
//     org.jfree.chart.labels.ItemLabelPosition var27 = var25.getBaseNegativeItemLabelPosition();
//     org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var28 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
//     double var30 = var28.getRangeUpperBound(false);
//     org.jfree.chart.renderer.category.StackedAreaRenderer var33 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
//     java.awt.Font var36 = var33.getItemLabelFont((-1), 0);
//     org.jfree.data.general.PieDataset var37 = null;
//     org.jfree.chart.plot.RingPlot var38 = new org.jfree.chart.plot.RingPlot(var37);
//     org.jfree.chart.plot.Plot var39 = var38.getRootPlot();
//     org.jfree.chart.event.AxisChangeEvent var40 = null;
//     var38.axisChanged(var40);
//     org.jfree.chart.JFreeChart var43 = new org.jfree.chart.JFreeChart("hi!", var36, (org.jfree.chart.plot.Plot)var38, true);
//     boolean var44 = var28.equals((java.lang.Object)var36);
//     var28.validateObject();
//     org.jfree.data.Range var46 = var25.findRangeBounds((org.jfree.data.category.CategoryDataset)var28);
//     org.jfree.data.general.DatasetChangeEvent var47 = new org.jfree.data.general.DatasetChangeEvent((java.lang.Object)var23, (org.jfree.data.general.Dataset)var28);
//     var0.datasetChanged(var47);
//     var0.clearAnnotations();
//     org.jfree.chart.axis.AxisSpace var50 = var0.getFixedDomainAxisSpace();
//     org.jfree.chart.annotations.XYAnnotation var51 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.addAnnotation(var51);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == Double.NaN);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var50);
// 
//   }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test450"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.plot.MultiplePiePlot var2 = new org.jfree.chart.plot.MultiplePiePlot();
    double var3 = var2.getLimit();
    double var4 = var2.getLimit();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var5 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn((org.jfree.data.category.CategoryDataset)var5, (java.lang.Comparable)"");
    org.jfree.data.general.PieDataset var8 = null;
    org.jfree.chart.plot.RingPlot var9 = new org.jfree.chart.plot.RingPlot(var8);
    org.jfree.chart.plot.Plot var10 = var9.getRootPlot();
    var5.removeChangeListener((org.jfree.data.general.DatasetChangeListener)var10);
    java.lang.Comparable var12 = null;
    java.lang.Number var14 = var5.getMeanValue(var12, (java.lang.Comparable)100.0f);
    var2.setDataset((org.jfree.data.category.CategoryDataset)var5);
    org.jfree.data.Range var16 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var5);
    boolean var17 = var1.getAutoPopulateSeriesPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test451"); }


    org.jfree.chart.renderer.category.AreaRenderer var0 = new org.jfree.chart.renderer.category.AreaRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var1 = var0.getBaseURLGenerator();
    var0.setSeriesVisible(0, (java.lang.Boolean)true, false);
    org.jfree.chart.renderer.category.StackedAreaRenderer var11 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    java.awt.Font var14 = var11.getItemLabelFont((-1), 0);
    org.jfree.data.general.PieDataset var15 = null;
    org.jfree.chart.plot.RingPlot var16 = new org.jfree.chart.plot.RingPlot(var15);
    org.jfree.chart.plot.Plot var17 = var16.getRootPlot();
    org.jfree.chart.event.AxisChangeEvent var18 = null;
    var16.axisChanged(var18);
    org.jfree.chart.JFreeChart var21 = new org.jfree.chart.JFreeChart("hi!", var14, (org.jfree.chart.plot.Plot)var16, true);
    org.jfree.chart.block.LabelBlock var22 = new org.jfree.chart.block.LabelBlock("Range[1.0,100.0]", var14);
    java.lang.Object var23 = var22.clone();
    java.awt.Font var24 = var22.getFont();
    org.jfree.chart.block.LabelBlock var25 = new org.jfree.chart.block.LabelBlock("Oct", var24);
    org.jfree.chart.axis.NumberAxis3D var27 = new org.jfree.chart.axis.NumberAxis3D("");
    java.awt.Paint var28 = var27.getTickLabelPaint();
    org.jfree.chart.renderer.category.StatisticalBar