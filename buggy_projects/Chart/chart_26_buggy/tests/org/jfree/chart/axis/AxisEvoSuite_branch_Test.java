/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:39:09 GMT 2014
 */

package org.jfree.chart.axis;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.EventListener;
import java.util.Locale;
import javax.swing.Action;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JToolBar;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.RegularTimePeriod;
import org.junit.runner.RunWith;

 
public class AxisEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(combinedDomainXYPlot1);
      
      boolean boolean0 = numberAxis3D0.hasListener((EventListener) combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(boolean0);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      String string0 = "Null 'state' argument.";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals("Null 'state' argument.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertNotNull(subCategoryAxis0);
      
      Color color0 = (Color)subCategoryAxis0.getSubLabelPaint();
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals("Null 'state' argument.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      Graphics2D graphics2D0 = null;
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertNotNull(defaultTableCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultTableCellRenderer_UIResource0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertNotNull(rectangle0);
      
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertNotNull(jToolBar_Separator0);
      
      Locale locale0 = jToolBar_Separator0.getLocale();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertNotNull(locale0);
      
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals("Null 'state' argument.", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(symbolAxis0);
      
      Font font0 = symbolAxis0.getTickLabelFont();
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals("Null 'state' argument.", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(font0);
      
      DateTitle dateTitle0 = new DateTitle(rectangle0.width, locale0, font0, (Paint) color0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals("Null 'state' argument.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertEquals(true, dateTitle0.getNotify());
      assertNull(dateTitle0.getURLText());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      assertEquals("Friday, 14 February 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals("Null 'state' argument.", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertNotNull(dateTitle0);
      
      RectangleEdge rectangleEdge0 = dateTitle0.getPosition();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals("Null 'state' argument.", subCategoryAxis0.getLabel());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertEquals(true, dateTitle0.getNotify());
      assertNull(dateTitle0.getURLText());
      assertNull(dateTitle0.getToolTipText());
      assertNull(dateTitle0.getID());
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      assertEquals("Friday, 14 February 2014", dateTitle0.getText());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("Null 'state' argument.", symbolAxis0.getLabel());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertNotNull(rectangleEdge0);
      
      // Undeclared exception!
      try {
        subCategoryAxis0.drawAxisLine(graphics2D0, double0, rectangle0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertNotNull(logarithmicAxis0);
      
      Graphics2D graphics2D0 = null;
      boolean boolean0 = true;
      JMenu jMenu0 = new JMenu(string0, boolean0);
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isShowing());
      assertNotNull(jMenu0);
      
      Rectangle rectangle0 = jMenu0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertNotNull(rectangle0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(rectangleEdge0);
      
      AxisState axisState0 = null;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try {
        AxisState axisState1 = logarithmicAxis0.drawLabel(string0, graphics2D0, rectangle0, rectangle0, rectangleEdge0, axisState0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'state' argument.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNotNull(thermometerPlot0);
      
      double double0 = 2.0;
      String string0 = "=J";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("=J", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNotNull(logarithmicAxis0);
      
      Graphics2D graphics2D0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logarithmicAxis0);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("=J", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(int0);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("=J", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, string0);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("=J", cyclicNumberAxis0.getLabel());
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      Range range0 = thermometerPlot0.getDataRange((ValueAxis) cyclicNumberAxis0);
      assertEquals(50.0, range0.getCentralValue(), 0.01D);
      assertEquals(100.0, range0.getLength(), 0.01D);
      assertEquals(100.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("=J", cyclicNumberAxis0.getLabel());
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNotNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertEquals(50.0, range0.getCentralValue(), 0.01D);
      assertEquals(100.0, range0.getLength(), 0.01D);
      assertEquals(100.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals("=J", moduloAxis0.getLabel());
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("=J", cyclicNumberAxis0.getLabel());
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNotNull(moduloAxis0);
      
      // Undeclared exception!
      try {
        Rectangle2D rectangle2D0 = moduloAxis0.getLabelEnclosure(graphics2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertNotNull(numberAxis3D0);
      
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(stackedXYBarRenderer0);
      
      XYPlot xYPlot0 = stackedXYBarRenderer0.getPlot();
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertNull(xYPlot0);
      
      numberAxis3D0.removeChangeListener((AxisChangeListener) xYPlot0);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "1\\4#>>=owz$/Z7T2P)R";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("1\\4#>>=owz$/Z7T2P)R", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNotNull(dateAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("1\\4#>>=owz$/Z7T2P)R", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("1\\4#>>=owz$/Z7T2P)R", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      extendedCategoryAxis0.removeChangeListener((AxisChangeListener) combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("1\\4#>>=owz$/Z7T2P)R", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("1\\4#>>=owz$/Z7T2P)R", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.01;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0);
      assertEquals(0.01, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.01, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.01, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNotNull(cyclicNumberAxis0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        cyclicNumberAxis0.setTickMarkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "1\\4#>>=owz$/Z7T2P)R";
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals("1\\4#>>=owz$/Z7T2P)R", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertNotNull(symbolAxis0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      int int0 = 2282;
      JPasswordField jPasswordField0 = new JPasswordField((Document) defaultStyledDocument0, stringArray0[3], int0);
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertNotNull(jPasswordField0);
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jPasswordField0.getBackground();
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(255, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=255,g=255,b=255]", colorUIResource0.toString());
      assertEquals(255, colorUIResource0.getGreen());
      assertEquals(-1, colorUIResource0.getRGB());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(255, colorUIResource0.getRed());
      assertEquals(255, colorUIResource0.getAlpha());
      assertNotNull(colorUIResource0);
      
      symbolAxis0.setTickMarkPaint((Paint) colorUIResource0);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals("1\\4#>>=owz$/Z7T2P)R", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(255, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=255,g=255,b=255]", colorUIResource0.toString());
      assertEquals(255, colorUIResource0.getGreen());
      assertEquals(-1, colorUIResource0.getRGB());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(255, colorUIResource0.getRed());
      assertEquals(255, colorUIResource0.getAlpha());
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNotNull(cyclicNumberAxis0);
      
      String string0 = "f06o4WZM1`s}(]";
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertNotNull(statisticalBarRenderer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = statisticalBarRenderer0.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals("f06o4WZM1`s}(]", moduloAxis0.getLabel());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(moduloAxis0);
      
      moduloAxis0.setTickMarkStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals("f06o4WZM1`s}(]", moduloAxis0.getLabel());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "X";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("X", subCategoryAxis0.getLabel());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(subCategoryAxis0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(minMaxCategoryRenderer0);
      
      int int0 = 1777;
      Stroke stroke0 = minMaxCategoryRenderer0.getSeriesStroke(int0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(stroke0);
      
      // Undeclared exception!
      try {
        subCategoryAxis0.setTickMarkStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertNotNull(numberAxis3D0);
      
      String string0 = "Null 'insets' argument.";
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange((ValueAxis) numberAxis3D0);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals("Null 'insets' argument.", moduloAxis0.getLabel());
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(moduloAxis0);
      
      CompassPlot compassPlot0 = new CompassPlot();
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01D);
      assertEquals(true, compassPlot0.isOutlineVisible());
      assertEquals(false, compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, compassPlot0.getDrawBorder());
      assertNotNull(compassPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)compassPlot0.getOutlineStroke();
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01D);
      assertEquals(true, compassPlot0.isOutlineVisible());
      assertEquals(false, compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, compassPlot0.getDrawBorder());
      assertNotNull(basicStroke0);
      
      moduloAxis0.setTickMarkStroke((Stroke) basicStroke0);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals("Null 'insets' argument.", moduloAxis0.getLabel());
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, moduloAxis0.isVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertEquals(0, compassPlot0.getLabelType());
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01D);
      assertEquals(true, compassPlot0.isOutlineVisible());
      assertEquals(false, compassPlot0.isSubplot());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, compassPlot0.getDrawBorder());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "`5{k~FT}#MG\"n";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      //  // Unstable assertion: assertEquals("`5{k~FT}#MG\"n", subCategoryAxis0.getLabel());
      //  // Unstable assertion: assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      //  // Unstable assertion: assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      //  // Unstable assertion: assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isVisible());
      //  // Unstable assertion: assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNotNull(subCategoryAxis0);
      
      DateAxis dateAxis0 = new DateAxis();
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertNull(dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertNotNull(dateAxis0);
      
      String string1 = subCategoryAxis0.getLabelURL();
      //  // Unstable assertion: assertEquals("`5{k~FT}#MG\"n", subCategoryAxis0.getLabel());
      //  // Unstable assertion: assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      //  // Unstable assertion: assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      //  // Unstable assertion: assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isVisible());
      //  // Unstable assertion: assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNull(string1);
      
      boolean boolean0 = dateAxis0.isTickMarksVisible();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertNull(dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392335999919L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399918L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(string1, (RegularTimePeriod) day0, (RegularTimePeriod) day0);
      //  // Unstable assertion: assertNull(periodAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isInverted());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(1392335999919L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399918L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals("`5{k~FT}#MG\"n", subCategoryAxis0.getLabel());
      //  // Unstable assertion: assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      //  // Unstable assertion: assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      //  // Unstable assertion: assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isVisible());
      //  // Unstable assertion: assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNotNull(periodAxis0);
      
      periodAxis0.setTickMarksVisible(boolean0);
      //  // Unstable assertion: assertNull(periodAxis0.getLabel());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isInverted());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, periodAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(true, periodAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, periodAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNull(periodAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(1392335999919L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422399918L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertNull(dateAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertNull(dateAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isInverted());
      //  // Unstable assertion: assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(dateAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, dateAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, dateAxis0.isVisible());
      //  // Unstable assertion: assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(true, dateAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, dateAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals("`5{k~FT}#MG\"n", subCategoryAxis0.getLabel());
      //  // Unstable assertion: assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      //  // Unstable assertion: assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      //  // Unstable assertion: assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isVisible());
      //  // Unstable assertion: assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertNull(subCategoryAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "-&YG\"U}1Q)";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("-&YG\"U}1Q)", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNotNull(subCategoryAxis0);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      subCategoryAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("-&YG\"U}1Q)", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(categoryAxis3D0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertNotNull(cyclicXYItemRenderer0);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) cyclicXYItemRenderer0, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, legendTitle0.getNotify());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertNotNull(legendTitle0);
      
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, legendTitle0.getNotify());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      categoryAxis3D0.setTickLabelInsets(rectangleInsets0);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, legendTitle0.getNotify());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "The 'data' array must hve length == 6.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNotNull(categoryAxis3D0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        categoryAxis3D0.setTickLabelPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNotNull(categoryAxis3D0);
      
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      categoryAxis3D0.setTickLabelPaint((Paint) color0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "-&YG\"U}1Q)";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("-&YG\"U}1Q)", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertNotNull(dateAxis0);
      
      int int0 = 2250;
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction(string0, int0);
      assertNotNull(styledEditorKit_AlignmentAction0);
      
      JRadioButton jRadioButton0 = new JRadioButton((Action) styledEditorKit_AlignmentAction0);
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertNotNull(jRadioButton0);
      
      FontUIResource fontUIResource0 = (FontUIResource)jRadioButton0.getFont();
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(1, fontUIResource0.getStyle());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertNotNull(fontUIResource0);
      
      dateAxis0.setTickLabelFont((Font) fontUIResource0);
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("-&YG\"U}1Q)", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(1, fontUIResource0.getStyle());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "ull 'seriesParameterName' argument.";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals("ull 'seriesParameterName' argument.", subCategoryAxis0.getLabel());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertNotNull(subCategoryAxis0);
      
      Font font0 = null;
      // Undeclared exception!
      try {
        subCategoryAxis0.setTickLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "X";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals("X", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertNotNull(subCategoryAxis0);
      
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals(true, font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertNotNull(font0);
      
      subCategoryAxis0.setTickLabelFont(font0);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals("X", subCategoryAxis0.getLabel());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals(true, font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "The 'data' array must hve length == 6.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNotNull(categoryAxis3D0);
      
      boolean boolean0 = false;
      categoryAxis3D0.setTickLabelsVisible(boolean0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "\\f";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals("\\f", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNotNull(extendedCategoryAxis0);
      
      boolean boolean0 = true;
      extendedCategoryAxis0.setTickLabelsVisible(boolean0);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals("\\f", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test
  public void test21()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertNotNull(categoryAxis3D0);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(categoryStepRenderer0);
      
      int int0 = 87;
      Stroke stroke0 = categoryStepRenderer0.getSeriesStroke(int0);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(stroke0);
      
      // Undeclared exception!
      try {
        categoryAxis3D0.setAxisLineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNotNull(categoryAxis3D0);
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      categoryAxis3D0.setAxisLineStroke((Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "\\f";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals("\\f", extendedCategoryAxis0.getLabel());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertNotNull(extendedCategoryAxis0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertNotNull(xYErrorRenderer0);
      
      int int0 = 32;
      Paint paint0 = xYErrorRenderer0.getSeriesOutlinePaint(int0);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        extendedCategoryAxis0.setAxisLinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNotNull(numberAxis3D0);
      
      String string0 = "2yEJ";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("2yEJ", extendedCategoryAxis0.getLabel());
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = numberAxis3D0.hasListener((EventListener) combinedDomainXYPlot0);
      assertTrue(boolean0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(jInternalFrame0);
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(jInternalFrame_JDesktopIcon0);
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jInternalFrame_JDesktopIcon0.getBackground();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(colorUIResource0);
      
      extendedCategoryAxis0.setAxisLinePaint((Paint) colorUIResource0);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("2yEJ", extendedCategoryAxis0.getLabel());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "The 'data' array must hve length == 6.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNotNull(categoryAxis3D0);
      
      RectangleInsets rectangleInsets0 = categoryAxis3D0.getLabelInsets();
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNotNull(rectangleInsets0);
      
      categoryAxis3D0.setLabelInsets(rectangleInsets0);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
  }

  @Test
  public void test26()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getInsets();
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNotNull(rectangleInsets0);
      
      dateAxis0.setLabelInsets(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = (-1396.175197097307);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals((-1396.175197097307), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals((-1396.175197097307), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals((-1396.175197097307), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = (-133);
      Paint paint0 = statisticalLineAndShapeRenderer0.getSeriesItemLabelPaint(int0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        cyclicNumberAxis0.setLabelPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "R";
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("R", symbolAxis0.getLabel());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(symbolAxis0);
      
      int int0 = (-467);
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertNotNull(xYErrorRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = xYErrorRenderer0.getBaseToolTipGenerator();
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertNull(xYToolTipGenerator0);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(int0, xYToolTipGenerator0);
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(true, standardXYItemRenderer0.getPlotImages());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertNotNull(standardXYItemRenderer0);
      
      Color color0 = (Color)standardXYItemRenderer0.getBaseOutlinePaint();
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(true, standardXYItemRenderer0.getPlotImages());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertNotNull(color0);
      
      symbolAxis0.setLabelPaint((Paint) color0);
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("R", symbolAxis0.getLabel());
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(true, standardXYItemRenderer0.getPlotImages());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "\\f";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("\\f", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNotNull(logarithmicAxis0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertNotNull(spiderWebPlot0);
      
      Font font0 = spiderWebPlot0.getNoDataMessageFont();
      assertEquals(12, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isBold());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertNotNull(font0);
      
      logarithmicAxis0.setLabelFont(font0);
      assertEquals(12, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isBold());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("\\f", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
  }

  @Test
  public void test30()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNotNull(dateAxis0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertNotNull(groupedStackedBarRenderer0);
      
      int int0 = 0;
      Font font0 = groupedStackedBarRenderer0.getSeriesItemLabelFont(int0);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertNull(font0);
      
      // Undeclared exception!
      try {
        dateAxis0.setLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "1\\4#>>=owz$/Z7T2P)R";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("1\\4#>>=owz$/Z7T2P)R", extendedCategoryAxis0.getLabel());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertNotNull(font0);
      
      extendedCategoryAxis0.setLabelFont(font0);
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals("1\\4#>>=owz$/Z7T2P)R", extendedCategoryAxis0.getLabel());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "2yEJ";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals("2yEJ", extendedCategoryAxis0.getLabel());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      String string1 = "\\f";
      assertNotSame(string1, string0);
      
      extendedCategoryAxis0.setLabel(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals("\\f", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "2yEJ";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("2yEJ", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNotNull(extendedCategoryAxis0);
      
      extendedCategoryAxis0.setLabel(string0);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("2yEJ", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "2yEJ";
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis();
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNotNull(categoryAxis0);
      
      categoryAxis0.setLabel(string0);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("2yEJ", categoryAxis0.getLabel());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "";
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNotNull(subCategoryAxis0);
      
      boolean boolean0 = false;
      subCategoryAxis0.setVisible(boolean0);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, subCategoryAxis0.isVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "R";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals("R", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertNotNull(logarithmicAxis0);
      
      boolean boolean0 = true;
      logarithmicAxis0.setVisible(boolean0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals("R", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "The 'data' array must hve length == 6.";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNotNull(categoryAxis3D0);
      
      float float0 = 534.9612F;
      categoryAxis3D0.setTickMarkInsideLength(float0);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals("The 'data' array must hve length == 6.", categoryAxis3D0.getLabel());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(534.9612F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "S9L;~/$U'<r_zjm";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals("S9L;~/$U'<r_zjm", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNotNull(logarithmicAxis0);
      
      Color color0 = (Color)logarithmicAxis0.getLabelPaint();
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("S9L;~/$U'<r_zjm", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNotNull(color0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "SansSerif";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals("SansSerif", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNotNull(dateAxis0);
      
      String string1 = dateAxis0.getLabelToolTip();
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals("SansSerif", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(string1);
  }

  @Test
  public void test40()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(categoryAxis3D0);
      
      CategoryAxis3D categoryAxis3D1 = (CategoryAxis3D)categoryAxis3D0.clone();
      assertTrue(categoryAxis3D0.equals((Object)categoryAxis3D1));
      assertTrue(categoryAxis3D1.equals((Object)categoryAxis3D0));
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D1.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D1.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D1.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D1.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis3D1.isTickLabelsVisible());
      assertEquals(4, categoryAxis3D1.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D1.isVisible());
      assertNull(categoryAxis3D1.getLabel());
      assertEquals(0.2, categoryAxis3D1.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D1.getLabelToolTip());
      assertEquals(false, categoryAxis3D1.isTickMarksVisible());
      assertEquals(true, categoryAxis3D1.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D1.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D1.getUpperMargin(), 0.01D);
      assertNull(categoryAxis3D1.getLabelURL());
      assertEquals(0.0F, categoryAxis3D1.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNotSame(categoryAxis3D0, categoryAxis3D1);
      assertNotSame(categoryAxis3D1, categoryAxis3D0);
      assertNotNull(categoryAxis3D1);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "\\f";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals("\\f", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setLabelToolTip(string0);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals("\\f", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("\\f", logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "orgjfree.charN.axis.Axis";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals("orgjfree.charN.axis.Axis", numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNotNull(numberAxis3D0);
      
      double double0 = numberAxis3D0.getLabelAngle();
      assertEquals(0.0, double0, 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals("orgjfree.charN.axis.Axis", numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "-&YG\"U}1Q)";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals("-&YG\"U}1Q)", categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNotNull(categoryAxis3D0);
      
      double double0 = categoryAxis3D0.getLowerMargin();
      assertEquals(0.05, double0, 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals("-&YG\"U}1Q)", categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isVisible());
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertNotNull(numberAxis3D0);
      
      numberAxis3D0.setFixedDimension(double0);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals("-&YG\"U}1Q)", categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
  }

  @Test
  public void test44()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNotNull(numberAxis3D0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertNotNull(defaultCaret0);
      
      numberAxis3D0.setLabelAngle((double) defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "Q-fE4XD54HCQFI";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertNotNull(categoryAxis3D0);
      
      categoryAxis3D0.setLabelURL(string0);
      assertEquals("Q-fE4XD54HCQFI", categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
  }

  @Test
  public void test46()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertNotNull(dateAxis0);
      
      float float0 = (-396.9F);
      dateAxis0.setTickMarkOutsideLength(float0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals((-396.9F), dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
  }

  @Test
  public void test47()  throws Throwable  {
      double double0 = 241.317391430449;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      
      int int0 = 1549;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, double0, double0, chartRenderingInfo0);
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1549, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1549, bufferedImage0.getHeight());
      assertEquals(1549, bufferedImage0.getWidth());
      assertEquals(1549, bufferedImage0.getTileWidth());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(bufferedImage0);
  }
}
