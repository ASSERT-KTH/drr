import java.io.IOException; 
import java.io.RandomAccessFile;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    
static boolean flag__lxy=false;
static public void printRuntimeMSG (String printMSG)
{
if(flag__lxy)return;
flag__lxy=true;
	try {
	RandomAccessFile randomFile = new RandomAccessFile("/Users/sophie/Documents/xiongyingfei/DefectRepairing/tool/source/tmp_aChart1Patch1get_randoop_coverage", "rw");
	long fileLength = randomFile.length();
	randomFile.seek(fileLength);
	randomFile.writeBytes(printMSG+"\n");
	randomFile.close();
	} catch (IOException e__e__e) {
	e__e__e.printStackTrace();

	}
flag__lxy=false;
}
public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
printRuntimeMSG("---RegressionTest1:test001");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test001");
        org.jfree.chart.JFreeChart jFreeChart1 = null;
        org.jfree.chart.event.ChartChangeEvent chartChangeEvent2 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object) (-16777216), jFreeChart1);
        java.lang.Object obj3 = chartChangeEvent2.getSource();
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (-16777216) + "'", obj3.equals((-16777216)));
    }

    @Test
    public void test002() throws Throwable {
printRuntimeMSG("---RegressionTest1:test002");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test002");
        java.text.AttributedString attributedString0 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean9 = lineAndShapeRenderer7.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean10 = lineAndShapeRenderer7.getBaseLinesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer13.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator15 = null;
        lineAndShapeRenderer13.setBaseToolTipGenerator(categoryToolTipGenerator15);
        java.awt.Font font18 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer13.setSeriesItemLabelFont((int) (short) 0, font18, true);
        lineAndShapeRenderer7.setBaseLegendTextFont(font18);
        org.jfree.chart.renderer.RenderAttributes renderAttributes23 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean29 = lineAndShapeRenderer27.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean30 = lineAndShapeRenderer27.getBaseLinesVisible();
        java.awt.Shape shape31 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer27.setBaseLegendShape(shape31);
        renderAttributes23.setSeriesShape((int) ' ', shape31);
        lineAndShapeRenderer7.setLegendShape(100, shape31);
        java.awt.Color color36 = java.awt.Color.PINK;
        int int37 = color36.getBlue();
        java.awt.Paint paint39 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.RenderAttributes renderAttributes43 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer47 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean49 = lineAndShapeRenderer47.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean50 = lineAndShapeRenderer47.getBaseLinesVisible();
        java.awt.Shape shape51 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer47.setBaseLegendShape(shape51);
        renderAttributes43.setSeriesShape((int) ' ', shape51);
        java.awt.Shape shape58 = null;
        java.awt.Color color59 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke60 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color61 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem62 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape58, (java.awt.Paint) color59, stroke60, (java.awt.Paint) color61);
        org.jfree.chart.renderer.RenderAttributes renderAttributes67 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer71 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean73 = lineAndShapeRenderer71.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean74 = lineAndShapeRenderer71.getBaseLinesVisible();
        java.awt.Shape shape75 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer71.setBaseLegendShape(shape75);
        renderAttributes67.setSeriesShape((int) ' ', shape75);
        org.jfree.chart.entity.ChartEntity chartEntity79 = new org.jfree.chart.entity.ChartEntity(shape75, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint80 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color82 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem83 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color82);
        java.lang.String str84 = legendItem83.getToolTipText();
        java.awt.Stroke stroke85 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem83.setOutlineStroke(stroke85);
        java.awt.Shape shape91 = null;
        java.awt.Color color92 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke93 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color94 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem95 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape91, (java.awt.Paint) color92, stroke93, (java.awt.Paint) color94);
        java.lang.Class<?> wildcardClass96 = color92.getClass();
        org.jfree.chart.LegendItem legendItem97 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape75, paint80, stroke85, (java.awt.Paint) color92);
        try {
            org.jfree.chart.LegendItem legendItem98 = new org.jfree.chart.LegendItem(attributedString0, "ItemLabelAnchor.OUTSIDE9", "ItemLabelAnchor.INSIDE5", "GradientPaintTransformType.CENTER_VERTICAL", true, shape31, true, (java.awt.Paint) color36, true, paint39, stroke41, false, shape51, stroke60, paint80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'label' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNotNull(font18);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(shape31);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 175 + "'", int37 == 175);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(shape51);
        org.junit.Assert.assertNotNull(color59);
        org.junit.Assert.assertNotNull(stroke60);
        org.junit.Assert.assertNotNull(color61);
        org.junit.Assert.assertNull(boolean73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(shape75);
        org.junit.Assert.assertNotNull(paint80);
        org.junit.Assert.assertNotNull(color82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(stroke85);
        org.junit.Assert.assertNotNull(color92);
        org.junit.Assert.assertNotNull(stroke93);
        org.junit.Assert.assertNotNull(color94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test003() throws Throwable {
printRuntimeMSG("---RegressionTest1:test003");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test003");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent14 = null;
        categoryPlot0.annotationChanged(annotationChangeEvent14);
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation17 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot16.setOrientation(plotOrientation17);
        categoryPlot0.setOrientation(plotOrientation17);
        org.jfree.data.category.CategoryDataset categoryDataset20 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis21 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis21.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis24 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator28 = lineAndShapeRenderer27.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot29 = new org.jfree.chart.plot.CategoryPlot(categoryDataset20, categoryAxis21, valueAxis24, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer27);
        boolean boolean30 = categoryAxis21.isTickLabelsVisible();
        double double31 = categoryAxis21.getFixedDimension();
        java.lang.Object obj32 = categoryAxis21.clone();
        java.awt.Paint paint33 = categoryAxis21.getLabelPaint();
        boolean boolean34 = plotOrientation17.equals((java.lang.Object) categoryAxis21);
        categoryAxis21.setTickMarksVisible(false);
        java.awt.geom.Rectangle2D rectangle2D42 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot43 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke44 = categoryPlot43.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis45 = null;
        categoryPlot43.setRangeAxis(valueAxis45);
        org.jfree.chart.util.RectangleEdge rectangleEdge47 = categoryPlot43.getRangeAxisEdge();
        try {
            double double48 = categoryAxis21.getCategorySeriesMiddle((int) '4', (-1), (int) (byte) 10, (int) (byte) 0, (double) (-1), rectangle2D42, rectangleEdge47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(plotOrientation17);
        org.junit.Assert.assertNull(categoryItemLabelGenerator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(paint33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertNotNull(rectangleEdge47);
    }

    @Test
    public void test004() throws Throwable {
printRuntimeMSG("---RegressionTest1:test004");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test004");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer2.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean12 = lineAndShapeRenderer2.getBaseShapesVisible();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-8355712));
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer17 = null;
        categoryPlot15.setRenderer(categoryItemRenderer17);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent19 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot15);
        org.jfree.data.category.CategoryDataset categoryDataset20 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis21 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis21.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis24 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator28 = lineAndShapeRenderer27.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot29 = new org.jfree.chart.plot.CategoryPlot(categoryDataset20, categoryAxis21, valueAxis24, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer27);
        java.util.List list30 = categoryPlot15.getCategoriesForAxis(categoryAxis21);
        lineAndShapeRenderer2.addChangeListener((org.jfree.chart.event.RendererChangeListener) categoryPlot15);
        lineAndShapeRenderer2.setBaseCreateEntities(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition14);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator28);
        org.junit.Assert.assertNotNull(list30);
    }

    @Test
    public void test005() throws Throwable {
printRuntimeMSG("---RegressionTest1:test005");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test005");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        int int8 = lineAndShapeRenderer2.getDefaultEntityRadius();
        java.awt.Stroke stroke9 = lineAndShapeRenderer2.getBaseStroke();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(stroke9);
    }

    @Test
    public void test006() throws Throwable {
printRuntimeMSG("---RegressionTest1:test006");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test006");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setDatasetIndex((int) (short) -1);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
    }

    @Test
    public void test007() throws Throwable {
printRuntimeMSG("---RegressionTest1:test007");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test007");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE6;
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
    }

    @Test
    public void test008() throws Throwable {
printRuntimeMSG("---RegressionTest1:test008");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test008");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.awt.Color color27 = java.awt.Color.yellow;
        boolean boolean28 = keyedObjects0.equals((java.lang.Object) color27);
        try {
            java.lang.Object obj30 = keyedObjects0.getObject((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test009() throws Throwable {
printRuntimeMSG("---RegressionTest1:test009");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test009");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setMaximumCategoryLabelWidthRatio((float) 100);
        categoryAxis0.removeCategoryLabelToolTip((java.lang.Comparable) 100);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
    }

    @Test
    public void test010() throws Throwable {
printRuntimeMSG("---RegressionTest1:test010");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test010");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        java.lang.Comparable comparable9 = categoryPlot0.getDomainCrosshairRowKey();
        java.awt.Paint paint10 = categoryPlot0.getRangeGridlinePaint();
        org.jfree.chart.axis.CategoryAnchor categoryAnchor11 = categoryPlot0.getDomainGridlinePosition();
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation12 = null;
        try {
            boolean boolean13 = categoryPlot0.removeAnnotation(categoryAnnotation12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'annotation' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNull(comparable9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(categoryAnchor11);
    }

    @Test
    public void test011() throws Throwable {
printRuntimeMSG("---RegressionTest1:test011");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test011");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        org.jfree.chart.LegendItemCollection legendItemCollection3 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.Marker marker4 = null;
        org.jfree.chart.util.Layer layer5 = null;
        try {
            categoryPlot0.addRangeMarker(marker4, layer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNull(legendItemCollection3);
    }

    @Test
    public void test012() throws Throwable {
printRuntimeMSG("---RegressionTest1:test012");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test012");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint9 = categoryAxis8.getTickLabelPaint();
        categoryAxis8.setFixedDimension((double) 1);
        org.jfree.chart.renderer.RenderAttributes renderAttributes16 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean22 = lineAndShapeRenderer20.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean23 = lineAndShapeRenderer20.getBaseLinesVisible();
        java.awt.Shape shape24 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer20.setBaseLegendShape(shape24);
        renderAttributes16.setSeriesShape((int) ' ', shape24);
        org.jfree.chart.entity.ChartEntity chartEntity28 = new org.jfree.chart.entity.ChartEntity(shape24, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color31 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem32 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color31);
        java.lang.String str33 = legendItem32.getToolTipText();
        java.awt.Stroke stroke34 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem32.setOutlineStroke(stroke34);
        java.awt.Shape shape40 = null;
        java.awt.Color color41 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke42 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color43 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape40, (java.awt.Paint) color41, stroke42, (java.awt.Paint) color43);
        java.lang.Class<?> wildcardClass45 = color41.getClass();
        org.jfree.chart.LegendItem legendItem46 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape24, paint29, stroke34, (java.awt.Paint) color41);
        categoryAxis8.setAxisLineStroke(stroke34);
        categoryPlot0.setOutlineStroke(stroke34);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shape24);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test013() throws Throwable {
printRuntimeMSG("---RegressionTest1:test013");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test013");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        lineAndShapeRenderer2.setLegendShape(0, shape19);
        lineAndShapeRenderer2.setSeriesVisible(4, (java.lang.Boolean) true);
        lineAndShapeRenderer2.setBaseItemLabelsVisible(true);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test014() throws Throwable {
printRuntimeMSG("---RegressionTest1:test014");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test014");
        java.awt.Stroke stroke0 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE;
        org.junit.Assert.assertNotNull(stroke0);
    }

    @Test
    public void test015() throws Throwable {
printRuntimeMSG("---RegressionTest1:test015");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test015");
        java.awt.Color color2 = java.awt.Color.getColor("SortOrder.ASCENDING", 255);
        org.junit.Assert.assertNotNull(color2);
    }

    @Test
    public void test016() throws Throwable {
printRuntimeMSG("---RegressionTest1:test016");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test016");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        int int7 = categoryPlot0.getWeight();
        org.jfree.chart.plot.PlotOrientation plotOrientation8 = categoryPlot0.getOrientation();
        boolean boolean9 = categoryPlot0.isRangeCrosshairLockedOnData();
        try {
            categoryPlot0.setBackgroundImageAlpha((float) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The 'alpha' value must be in the range 0.0f to 1.0f.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(plotOrientation8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test017() throws Throwable {
printRuntimeMSG("---RegressionTest1:test017");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test017");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint9 = lineAndShapeRenderer2.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        java.awt.Graphics2D graphics2D11 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo15 = null;
        java.awt.geom.Point2D point2D16 = null;
        categoryPlot12.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo15, point2D16);
        org.jfree.chart.axis.ValueAxis valueAxis18 = null;
        java.awt.geom.Rectangle2D rectangle2D19 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot21 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke22 = categoryPlot21.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot23 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke24 = categoryPlot23.getRangeMinorGridlineStroke();
        categoryPlot21.setParent((org.jfree.chart.plot.Plot) categoryPlot23);
        org.jfree.chart.LegendItemCollection legendItemCollection26 = categoryPlot21.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier27 = categoryPlot21.getDrawingSupplier();
        java.awt.Stroke stroke28 = categoryPlot21.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis29 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list30 = categoryPlot21.getCategoriesForAxis(categoryAxis29);
        boolean boolean31 = categoryPlot21.isDomainZoomable();
        java.awt.Paint paint32 = categoryPlot21.getBackgroundPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer35 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator36 = lineAndShapeRenderer35.getBaseItemLabelGenerator();
        java.awt.Paint paint38 = lineAndShapeRenderer35.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator40 = lineAndShapeRenderer35.getSeriesURLGenerator(0);
        double double41 = lineAndShapeRenderer35.getItemMargin();
        java.awt.Stroke stroke43 = lineAndShapeRenderer35.lookupSeriesOutlineStroke(100);
        try {
            lineAndShapeRenderer2.drawRangeLine(graphics2D11, categoryPlot12, valueAxis18, rectangle2D19, (double) (-1.0f), paint32, stroke43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNull(legendItemCollection26);
        org.junit.Assert.assertNotNull(drawingSupplier27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(paint32);
        org.junit.Assert.assertNull(categoryItemLabelGenerator36);
        org.junit.Assert.assertNotNull(paint38);
        org.junit.Assert.assertNull(categoryURLGenerator40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(stroke43);
    }

    @Test
    public void test018() throws Throwable {
printRuntimeMSG("---RegressionTest1:test018");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test018");
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor5 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.axis.AxisLocation axisLocation6 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation7 = axisLocation6.getOpposite();
        boolean boolean8 = itemLabelAnchor5.equals((java.lang.Object) axisLocation6);
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        categoryPlot9.setParent((org.jfree.chart.plot.Plot) categoryPlot11);
        org.jfree.chart.LegendItemCollection legendItemCollection14 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent15 = null;
        categoryPlot9.axisChanged(axisChangeEvent15);
        org.jfree.chart.axis.AxisSpace axisSpace17 = categoryPlot9.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset18 = null;
        categoryPlot9.setDataset(categoryDataset18);
        java.awt.Stroke stroke20 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot9.setDomainCrosshairStroke(stroke20);
        java.awt.Stroke stroke22 = categoryPlot9.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent23 = null;
        categoryPlot9.annotationChanged(annotationChangeEvent23);
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation26 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot25.setOrientation(plotOrientation26);
        categoryPlot9.setOrientation(plotOrientation26);
        org.jfree.chart.util.RectangleEdge rectangleEdge29 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(axisLocation6, plotOrientation26);
        try {
            double double30 = categoryAxis1.getCategoryEnd((-10), (int) '#', rectangle2D4, rectangleEdge29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelAnchor5);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNull(legendItemCollection14);
        org.junit.Assert.assertNull(axisSpace17);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNotNull(plotOrientation26);
        org.junit.Assert.assertNotNull(rectangleEdge29);
    }

    @Test
    public void test019() throws Throwable {
printRuntimeMSG("---RegressionTest1:test019");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test019");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        boolean boolean7 = barRenderer0.getIncludeBaseInRange();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = barRenderer0.getBasePositiveItemLabelPosition();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
    }

    @Test
    public void test020() throws Throwable {
printRuntimeMSG("---RegressionTest1:test020");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test020");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        barRenderer0.setMinimumBarLength((double) 0.0f);
        boolean boolean13 = barRenderer0.getShadowsVisible();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test021() throws Throwable {
printRuntimeMSG("---RegressionTest1:test021");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test021");
        org.jfree.chart.renderer.RenderAttributes renderAttributes4 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean10 = lineAndShapeRenderer8.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean11 = lineAndShapeRenderer8.getBaseLinesVisible();
        java.awt.Shape shape12 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer8.setBaseLegendShape(shape12);
        renderAttributes4.setSeriesShape((int) ' ', shape12);
        org.jfree.chart.entity.ChartEntity chartEntity16 = new org.jfree.chart.entity.ChartEntity(shape12, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint17 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color19 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem20 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color19);
        java.lang.String str21 = legendItem20.getToolTipText();
        java.awt.Stroke stroke22 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem20.setOutlineStroke(stroke22);
        java.awt.Shape shape28 = null;
        java.awt.Color color29 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color31 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem32 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape28, (java.awt.Paint) color29, stroke30, (java.awt.Paint) color31);
        java.lang.Class<?> wildcardClass33 = color29.getClass();
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape12, paint17, stroke22, (java.awt.Paint) color29);
        org.jfree.chart.entity.ChartEntity chartEntity35 = new org.jfree.chart.entity.ChartEntity(shape12);
        org.jfree.chart.imagemap.ToolTipTagFragmentGenerator toolTipTagFragmentGenerator36 = null;
        org.jfree.chart.imagemap.URLTagFragmentGenerator uRLTagFragmentGenerator37 = null;
        java.lang.String str38 = chartEntity35.getImageMapAreaTag(toolTipTagFragmentGenerator36, uRLTagFragmentGenerator37);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(shape12);
        org.junit.Assert.assertNotNull(paint17);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
    }

    @Test
    public void test022() throws Throwable {
printRuntimeMSG("---RegressionTest1:test022");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test022");
        java.text.AttributedString attributedString0 = null;
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        org.jfree.data.category.CategoryDataset categoryDataset40 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis41 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis41.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis44 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer47 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator48 = lineAndShapeRenderer47.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot49 = new org.jfree.chart.plot.CategoryPlot(categoryDataset40, categoryAxis41, valueAxis44, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer47);
        boolean boolean50 = categoryAxis41.isTickLabelsVisible();
        categoryAxis41.setLabelToolTip("hi!");
        boolean boolean53 = categoryAxis41.isVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator57 = lineAndShapeRenderer56.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator61 = lineAndShapeRenderer56.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer56.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint65 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer56.setBaseOutlinePaint(paint65);
        categoryAxis41.setTickMarkPaint(paint65);
        try {
            org.jfree.chart.LegendItem legendItem68 = new org.jfree.chart.LegendItem(attributedString0, "AxisLocation.BOTTOM_OR_RIGHT", "DatasetRenderingOrder.FORWARD", "GradientPaintTransformType.VERTICAL", shape16, paint65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'label' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNull(categoryItemLabelGenerator48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator57);
        org.junit.Assert.assertNull(categoryToolTipGenerator61);
        org.junit.Assert.assertNotNull(paint65);
    }

    @Test
    public void test023() throws Throwable {
printRuntimeMSG("---RegressionTest1:test023");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test023");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        categoryPlot0.setForegroundAlpha((float) (-1));
        org.jfree.data.category.CategoryDataset categoryDataset16 = categoryPlot0.getDataset();
        java.awt.Paint paint17 = categoryPlot0.getDomainCrosshairPaint();
        org.jfree.chart.axis.CategoryAnchor categoryAnchor18 = categoryPlot0.getDomainGridlinePosition();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(categoryDataset16);
        org.junit.Assert.assertNotNull(paint17);
        org.junit.Assert.assertNotNull(categoryAnchor18);
    }

    @Test
    public void test024() throws Throwable {
printRuntimeMSG("---RegressionTest1:test024");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test024");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        java.awt.Graphics2D graphics2D5 = null;
        java.awt.geom.Rectangle2D rectangle2D6 = null;
        java.awt.geom.Point2D point2D7 = null;
        org.jfree.chart.plot.PlotState plotState8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo9 = null;
        try {
            categoryPlot0.draw(graphics2D5, rectangle2D6, point2D7, plotState8, plotRenderingInfo9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
    }

    @Test
    public void test025() throws Throwable {
printRuntimeMSG("---RegressionTest1:test025");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test025");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double1 = rectangleInsets0.getRight();
        java.awt.Color color2 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        boolean boolean3 = rectangleInsets0.equals((java.lang.Object) color2);
        double double4 = rectangleInsets0.getRight();
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.0d + "'", double4 == 4.0d);
    }

    @Test
    public void test026() throws Throwable {
printRuntimeMSG("---RegressionTest1:test026");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test026");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent14 = null;
        categoryPlot0.annotationChanged(annotationChangeEvent14);
        org.jfree.chart.axis.ValueAxis valueAxis17 = null;
        categoryPlot0.setRangeAxis((int) ' ', valueAxis17);
        org.jfree.chart.axis.AxisSpace axisSpace19 = categoryPlot0.getFixedDomainAxisSpace();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(axisSpace19);
    }

    @Test
    public void test027() throws Throwable {
printRuntimeMSG("---RegressionTest1:test027");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test027");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.fireSelectionEvent();
        try {
            boolean boolean51 = defaultCategoryDataset44.isSelected((int) (byte) 1, 192);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
    }

    @Test
    public void test028() throws Throwable {
printRuntimeMSG("---RegressionTest1:test028");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test028");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint9 = lineAndShapeRenderer2.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator21 = lineAndShapeRenderer20.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator22 = null;
        lineAndShapeRenderer20.setBaseToolTipGenerator(categoryToolTipGenerator22);
        java.awt.Font font25 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer20.setSeriesItemLabelFont((int) (short) 0, font25, true);
        lineAndShapeRenderer14.setBaseLegendTextFont(font25);
        lineAndShapeRenderer2.setSeriesItemLabelFont(255, font25, true);
        java.lang.Object obj31 = lineAndShapeRenderer2.clone();
        lineAndShapeRenderer2.setBaseShapesFilled(true);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator21);
        org.junit.Assert.assertNotNull(font25);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test029() throws Throwable {
printRuntimeMSG("---RegressionTest1:test029");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test029");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        int int2 = keyedObjects2D0.getRowIndex((java.lang.Comparable) true);
        java.util.List list3 = keyedObjects2D0.getColumnKeys();
        try {
            java.lang.Object obj6 = keyedObjects2D0.getObject((java.lang.Comparable) 18.0d, (java.lang.Comparable) "TextAnchor.HALF_ASCENT_LEFT");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (18.0) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test030() throws Throwable {
printRuntimeMSG("---RegressionTest1:test030");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test030");
        int int3 = java.awt.Color.HSBtoRGB((float) (short) 0, 2.0f, (float) 192);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-15935) + "'", int3 == (-15935));
    }

    @Test
    public void test031() throws Throwable {
printRuntimeMSG("---RegressionTest1:test031");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test031");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        lineAndShapeRenderer2.setSeriesOutlinePaint(4, paint23, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer45 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition47 = null;
        lineAndShapeRenderer45.setSeriesPositiveItemLabelPosition(0, itemLabelPosition47);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator49 = null;
        lineAndShapeRenderer45.setLegendItemToolTipGenerator(categorySeriesLabelGenerator49);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition51 = lineAndShapeRenderer45.getBasePositiveItemLabelPosition();
        boolean boolean52 = lineAndShapeRenderer45.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition53 = lineAndShapeRenderer45.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setBasePositiveItemLabelPosition(itemLabelPosition53);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(itemLabelPosition51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition53);
    }

    @Test
    public void test032() throws Throwable {
printRuntimeMSG("---RegressionTest1:test032");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test032");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        try {
            java.lang.Comparable comparable28 = keyedObjects0.getKey((-10));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test033() throws Throwable {
printRuntimeMSG("---RegressionTest1:test033");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test033");
        java.awt.Color color1 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem2 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color1);
        boolean boolean3 = legendItem2.isShapeOutlineVisible();
        boolean boolean4 = legendItem2.isLineVisible();
        legendItem2.setDescription("ItemLabelAnchor.OUTSIDE9");
        org.junit.Assert.assertNotNull(color1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test034() throws Throwable {
printRuntimeMSG("---RegressionTest1:test034");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test034");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        lineAndShapeRenderer2.setAutoPopulateSeriesOutlinePaint(false);
        lineAndShapeRenderer2.removeAnnotations();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
    }

    @Test
    public void test035() throws Throwable {
printRuntimeMSG("---RegressionTest1:test035");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test035");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        java.awt.Paint paint9 = categoryPlot0.getRangeZeroBaselinePaint();
        int int10 = categoryPlot0.getBackgroundImageAlignment();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
    }

    @Test
    public void test036() throws Throwable {
printRuntimeMSG("---RegressionTest1:test036");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test036");
        org.jfree.data.SelectableValue selectableValue1 = new org.jfree.data.SelectableValue((java.lang.Number) (short) 10);
    }

    @Test
    public void test037() throws Throwable {
printRuntimeMSG("---RegressionTest1:test037");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test037");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.data.category.CategoryDataset categoryDataset53 = categoryItemEntity47.getDataset();
        org.jfree.chart.imagemap.ToolTipTagFragmentGenerator toolTipTagFragmentGenerator54 = null;
        org.jfree.chart.imagemap.URLTagFragmentGenerator uRLTagFragmentGenerator55 = null;
        try {
            java.lang.String str56 = categoryItemEntity47.getImageMapAreaTag(toolTipTagFragmentGenerator54, uRLTagFragmentGenerator55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNotNull(categoryDataset53);
    }

    @Test
    public void test038() throws Throwable {
printRuntimeMSG("---RegressionTest1:test038");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test038");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        java.awt.Shape shape8 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer4.setBaseLegendShape(shape8);
        renderAttributes0.setSeriesShape((int) ' ', shape8);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean16 = lineAndShapeRenderer13.getBaseLinesVisible();
        java.awt.Shape shape17 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer13.setBaseLegendShape(shape17);
        renderAttributes0.setDefaultShape(shape17);
        org.jfree.chart.entity.ChartEntity chartEntity21 = new org.jfree.chart.entity.ChartEntity(shape17, "PlotOrientation.VERTICAL");
        java.lang.String str22 = chartEntity21.getShapeType();
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(shape8);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shape17);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "poly" + "'", str22.equals("poly"));
    }

    @Test
    public void test039() throws Throwable {
printRuntimeMSG("---RegressionTest1:test039");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test039");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) "TextAnchor.HALF_ASCENT_LEFT");
        categoryPlot0.setBackgroundAlpha((float) 0);
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
    }

    @Test
    public void test040() throws Throwable {
printRuntimeMSG("---RegressionTest1:test040");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test040");
        org.jfree.chart.text.TextAnchor textAnchor0 = org.jfree.chart.text.TextAnchor.TOP_LEFT;
        org.junit.Assert.assertNotNull(textAnchor0);
    }

    @Test
    public void test041() throws Throwable {
printRuntimeMSG("---RegressionTest1:test041");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test041");
        boolean boolean0 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE;
        org.junit.Assert.assertTrue("'" + boolean0 + "' != '" + false + "'", boolean0 == false);
    }

    @Test
    public void test042() throws Throwable {
printRuntimeMSG("---RegressionTest1:test042");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test042");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        categoryPlot0.setWeight((int) (byte) 1);
        org.jfree.data.category.CategoryDataset categoryDataset10 = null;
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = categoryPlot0.getRendererForDataset(categoryDataset10);
        org.jfree.data.category.CategoryDataset categoryDataset13 = categoryPlot0.getDataset((int) (byte) 1);
        org.junit.Assert.assertNull(categoryItemRenderer11);
        org.junit.Assert.assertNull(categoryDataset13);
    }

    @Test
    public void test043() throws Throwable {
printRuntimeMSG("---RegressionTest1:test043");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test043");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation11 = null;
        try {
            lineAndShapeRenderer2.addAnnotation(categoryAnnotation11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'annotation' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
    }

    @Test
    public void test044() throws Throwable {
printRuntimeMSG("---RegressionTest1:test044");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test044");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint12 = lineAndShapeRenderer2.getBaseItemLabelPaint();
        lineAndShapeRenderer2.setAutoPopulateSeriesOutlinePaint(false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(paint12);
    }

    @Test
    public void test045() throws Throwable {
printRuntimeMSG("---RegressionTest1:test045");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test045");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        int int52 = defaultCategoryDataset47.getColumnCount();
        try {
            java.lang.Comparable comparable54 = defaultCategoryDataset47.getRowKey((-16777216));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test046() throws Throwable {
printRuntimeMSG("---RegressionTest1:test046");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test046");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearAnnotations();
        categoryPlot0.setCrosshairDatasetIndex(192, false);
        java.awt.Paint paint10 = categoryPlot0.getRangeZeroBaselinePaint();
        org.junit.Assert.assertNotNull(paint10);
    }

    @Test
    public void test047() throws Throwable {
printRuntimeMSG("---RegressionTest1:test047");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test047");
        org.jfree.chart.renderer.RenderAttributes renderAttributes4 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean10 = lineAndShapeRenderer8.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean11 = lineAndShapeRenderer8.getBaseLinesVisible();
        java.awt.Shape shape12 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer8.setBaseLegendShape(shape12);
        renderAttributes4.setSeriesShape((int) ' ', shape12);
        org.jfree.chart.entity.ChartEntity chartEntity16 = new org.jfree.chart.entity.ChartEntity(shape12, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint17 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color19 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem20 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color19);
        java.lang.String str21 = legendItem20.getToolTipText();
        java.awt.Stroke stroke22 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem20.setOutlineStroke(stroke22);
        java.awt.Shape shape28 = null;
        java.awt.Color color29 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color31 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem32 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape28, (java.awt.Paint) color29, stroke30, (java.awt.Paint) color31);
        java.lang.Class<?> wildcardClass33 = color29.getClass();
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape12, paint17, stroke22, (java.awt.Paint) color29);
        org.jfree.chart.entity.ChartEntity chartEntity35 = new org.jfree.chart.entity.ChartEntity(shape12);
        chartEntity35.setToolTipText("");
        chartEntity35.setToolTipText("ItemLabelAnchor.OUTSIDE4");
        java.lang.String str40 = chartEntity35.getShapeCoords();
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(shape12);
        org.junit.Assert.assertNotNull(paint17);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0" + "'", str40.equals("4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0"));
    }

    @Test
    public void test048() throws Throwable {
printRuntimeMSG("---RegressionTest1:test048");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test048");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        categoryPlot11.setParent((org.jfree.chart.plot.Plot) categoryPlot13);
        org.jfree.chart.plot.Plot plot16 = categoryPlot11.getParent();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer19.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint29 = lineAndShapeRenderer19.getBaseItemLabelPaint();
        categoryPlot11.setRangeMinorGridlinePaint(paint29);
        lineAndShapeRenderer2.removeChangeListener((org.jfree.chart.event.RendererChangeListener) categoryPlot11);
        lineAndShapeRenderer2.setBaseCreateEntities(false);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator34 = null;
        lineAndShapeRenderer2.setBaseURLGenerator(categoryURLGenerator34);
        java.lang.Boolean boolean37 = lineAndShapeRenderer2.getSeriesVisible((-8355712));
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(plot16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNull(boolean37);
    }

    @Test
    public void test049() throws Throwable {
printRuntimeMSG("---RegressionTest1:test049");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test049");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets2 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double3 = rectangleInsets2.getRight();
        double double5 = rectangleInsets2.calculateTopInset(0.0d);
        categoryAxis0.setLabelInsets(rectangleInsets2, false);
        float float8 = categoryAxis0.getTickMarkOutsideLength();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNotNull(rectangleInsets2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.0d + "'", double3 == 4.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
    }

    @Test
    public void test050() throws Throwable {
printRuntimeMSG("---RegressionTest1:test050");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test050");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = null;
        java.util.List list11 = categoryPlot0.getCategoriesForAxis(categoryAxis10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = null;
        categoryPlot0.notifyListeners(plotChangeEvent12);
        boolean boolean14 = categoryPlot0.isDomainCrosshairVisible();
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent15 = null;
        categoryPlot0.rendererChanged(rendererChangeEvent15);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test051() throws Throwable {
printRuntimeMSG("---RegressionTest1:test051");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test051");
        java.awt.Color color1 = java.awt.Color.BLACK;
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator5 = new org.jfree.chart.util.DefaultShadowGenerator(3, color1, 1.0f, 100, 56.0d);
        int int6 = defaultShadowGenerator5.calculateOffsetY();
        org.junit.Assert.assertNotNull(color1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 49 + "'", int6 == 49);
    }

    @Test
    public void test052() throws Throwable {
printRuntimeMSG("---RegressionTest1:test052");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test052");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.calculateTopOutset((double) ' ');
        double double6 = rectangleInsets0.calculateRightOutset(100.0d);
        double double8 = rectangleInsets0.trimHeight((double) 4);
        double double10 = rectangleInsets0.calculateRightInset((double) 1);
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.0d + "'", double4 == 2.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.0d + "'", double6 == 4.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.0d + "'", double10 == 4.0d);
    }

    @Test
    public void test053() throws Throwable {
printRuntimeMSG("---RegressionTest1:test053");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test053");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset3 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj4 = abstractCategoryDataset3.clone();
        java.lang.Object obj5 = abstractCategoryDataset3.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes14 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        java.awt.Shape shape22 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer18.setBaseLegendShape(shape22);
        renderAttributes14.setSeriesShape((int) ' ', shape22);
        org.jfree.chart.entity.ChartEntity chartEntity26 = new org.jfree.chart.entity.ChartEntity(shape22, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color29 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem30 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color29);
        java.lang.String str31 = legendItem30.getToolTipText();
        java.awt.Stroke stroke32 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem30.setOutlineStroke(stroke32);
        java.awt.Shape shape38 = null;
        java.awt.Color color39 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color41 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape38, (java.awt.Paint) color39, stroke40, (java.awt.Paint) color41);
        java.lang.Class<?> wildcardClass43 = color39.getClass();
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape22, paint27, stroke32, (java.awt.Paint) color39);
        org.jfree.chart.entity.ChartEntity chartEntity45 = new org.jfree.chart.entity.ChartEntity(shape22);
        java.awt.Color color46 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape22, (java.awt.Paint) color46);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset50 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity53 = new org.jfree.chart.entity.CategoryItemEntity(shape22, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset50, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset3.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        int int56 = defaultCategoryDataset50.getRowCount();
        org.jfree.data.general.DatasetGroup datasetGroup57 = defaultCategoryDataset50.getGroup();
        java.util.List list58 = defaultCategoryDataset50.getRowKeys();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(shape22);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(datasetGroup57);
        org.junit.Assert.assertNotNull(list58);
    }

    @Test
    public void test054() throws Throwable {
printRuntimeMSG("---RegressionTest1:test054");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test054");
        java.awt.Color color0 = org.jfree.chart.ChartColor.LIGHT_CYAN;
        int int1 = color0.getTransparency();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test055() throws Throwable {
printRuntimeMSG("---RegressionTest1:test055");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test055");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        org.jfree.chart.axis.CategoryAxis categoryAxis28 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset29 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis30 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis30.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis33 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator37 = lineAndShapeRenderer36.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot38 = new org.jfree.chart.plot.CategoryPlot(categoryDataset29, categoryAxis30, valueAxis33, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer36);
        boolean boolean39 = categoryAxis30.isTickLabelsVisible();
        double double40 = categoryAxis30.getFixedDimension();
        java.awt.Paint paint42 = categoryAxis30.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis28.setTickLabelPaint(paint42);
        categoryAxis28.setLabelToolTip("hi!");
        double double46 = categoryAxis28.getCategoryMargin();
        double double47 = categoryAxis28.getLabelAngle();
        keyedObjects0.addObject((java.lang.Comparable) 2.0d, (java.lang.Object) categoryAxis28);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(paint42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.2d + "'", double46 == 0.2d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test056() throws Throwable {
printRuntimeMSG("---RegressionTest1:test056");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test056");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        double double10 = barRenderer0.getMaximumBarWidth();
        java.awt.Stroke stroke12 = barRenderer0.lookupSeriesStroke((-1));
        java.awt.Paint paint13 = barRenderer0.getShadowPaint();
        barRenderer0.setIncludeBaseInRange(false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(paint13);
    }

    @Test
    public void test057() throws Throwable {
printRuntimeMSG("---RegressionTest1:test057");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test057");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.fireSelectionEvent();
        try {
            defaultCategoryDataset44.removeRow((java.lang.Comparable) "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
    }

    @Test
    public void test058() throws Throwable {
printRuntimeMSG("---RegressionTest1:test058");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test058");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation1 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot0.setOrientation(plotOrientation1);
        org.jfree.chart.axis.ValueAxis valueAxis4 = categoryPlot0.getRangeAxis((int) (short) 1);
        categoryPlot0.mapDatasetToRangeAxis(15, 15);
        org.junit.Assert.assertNotNull(plotOrientation1);
        org.junit.Assert.assertNull(valueAxis4);
    }

    @Test
    public void test059() throws Throwable {
printRuntimeMSG("---RegressionTest1:test059");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test059");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        boolean boolean9 = lineAndShapeRenderer2.getBaseCreateEntities();
        java.awt.Color color11 = org.jfree.chart.ChartColor.VERY_DARK_CYAN;
        lineAndShapeRenderer2.setSeriesPaint((int) '4', (java.awt.Paint) color11, true);
        java.awt.Stroke stroke15 = null;
        try {
            lineAndShapeRenderer2.setSeriesOutlineStroke((-1), stroke15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(color11);
    }

    @Test
    public void test060() throws Throwable {
printRuntimeMSG("---RegressionTest1:test060");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test060");
        java.util.Locale locale1 = null;
        java.lang.ClassLoader classLoader2 = null;
        try {
            java.util.ResourceBundle resourceBundle3 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("TextAnchor.BASELINE_RIGHT", locale1, classLoader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test061() throws Throwable {
printRuntimeMSG("---RegressionTest1:test061");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test061");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, (int) '#', plotRenderingInfo10, categoryCrosshairState11);
        org.jfree.chart.plot.CategoryMarker categoryMarker14 = null;
        org.jfree.chart.util.Layer layer15 = null;
        try {
            categoryPlot0.addDomainMarker(192, categoryMarker14, layer15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' not permitted.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test062() throws Throwable {
printRuntimeMSG("---RegressionTest1:test062");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test062");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        double double11 = barRenderer0.getBase();
        java.awt.Color color13 = org.jfree.chart.ChartColor.DARK_YELLOW;
        barRenderer0.setSeriesFillPaint(49, (java.awt.Paint) color13, true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(color13);
    }

    @Test
    public void test063() throws Throwable {
printRuntimeMSG("---RegressionTest1:test063");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test063");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = lineAndShapeRenderer2.getDrawingSupplier();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator10 = lineAndShapeRenderer2.getToolTipGenerator((-16777216), 3, false);
        java.awt.Paint paint12 = lineAndShapeRenderer2.lookupLegendTextPaint(3);
        try {
            lineAndShapeRenderer2.setSeriesShapesVisible((-15935), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(drawingSupplier6);
        org.junit.Assert.assertNull(categoryToolTipGenerator10);
        org.junit.Assert.assertNull(paint12);
    }

    @Test
    public void test064() throws Throwable {
printRuntimeMSG("---RegressionTest1:test064");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test064");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        categoryPlot0.clearSelection();
        org.jfree.chart.plot.Marker marker7 = null;
        try {
            categoryPlot0.addRangeMarker(marker7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
    }

    @Test
    public void test065() throws Throwable {
printRuntimeMSG("---RegressionTest1:test065");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test065");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint5 = lineAndShapeRenderer2.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = lineAndShapeRenderer2.getSeriesURLGenerator(0);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator8 = lineAndShapeRenderer2.getLegendItemURLGenerator();
        boolean boolean9 = lineAndShapeRenderer2.getBaseShapesFilled();
        lineAndShapeRenderer2.removeAnnotations();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNull(categoryURLGenerator7);
        org.junit.Assert.assertNull(categorySeriesLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test066() throws Throwable {
printRuntimeMSG("---RegressionTest1:test066");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test066");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        boolean boolean11 = barRenderer0.getAutoPopulateSeriesOutlineStroke();
        boolean boolean12 = barRenderer0.getAutoPopulateSeriesOutlineStroke();
        double double13 = barRenderer0.getShadowYOffset();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.0d + "'", double13 == 4.0d);
    }

    @Test
    public void test067() throws Throwable {
printRuntimeMSG("---RegressionTest1:test067");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test067");
        org.jfree.chart.renderer.RenderAttributes renderAttributes1 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Shape shape4 = renderAttributes1.getItemShape((int) '4', (int) (byte) 100);
        java.awt.Stroke stroke7 = renderAttributes1.getItemStroke(2, (-12566464));
        java.awt.Shape shape8 = renderAttributes1.getDefaultShape();
        renderAttributes1.setDefaultLabelVisible((java.lang.Boolean) false);
        org.junit.Assert.assertNull(shape4);
        org.junit.Assert.assertNull(stroke7);
        org.junit.Assert.assertNull(shape8);
    }

    @Test
    public void test068() throws Throwable {
printRuntimeMSG("---RegressionTest1:test068");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test068");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        lineAndShapeRenderer2.setUseSeriesOffset(true);
        int int12 = lineAndShapeRenderer2.getDefaultEntityRadius();
        java.lang.Object obj13 = lineAndShapeRenderer2.clone();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test069() throws Throwable {
printRuntimeMSG("---RegressionTest1:test069");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test069");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_DARK_YELLOW;
        int int1 = color0.getGreen();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 128 + "'", int1 == 128);
    }

    @Test
    public void test070() throws Throwable {
printRuntimeMSG("---RegressionTest1:test070");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test070");
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer4 = legendItem3.getFillPaintTransformer();
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_CYAN;
        legendItem3.setFillPaint((java.awt.Paint) color5);
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator10 = new org.jfree.chart.util.DefaultShadowGenerator((int) (byte) 1, color5, 0.0f, 10, (double) (byte) 1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(gradientPaintTransformer4);
        org.junit.Assert.assertNotNull(color5);
    }

    @Test
    public void test071() throws Throwable {
printRuntimeMSG("---RegressionTest1:test071");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test071");
        java.awt.Color color0 = java.awt.Color.LIGHT_GRAY;
        java.lang.String str1 = color0.toString();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "java.awt.Color[r=192,g=192,b=192]" + "'", str1.equals("java.awt.Color[r=192,g=192,b=192]"));
    }

    @Test
    public void test072() throws Throwable {
printRuntimeMSG("---RegressionTest1:test072");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test072");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        categoryAxis1.clearCategoryLabelToolTips();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) (-10));
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test073() throws Throwable {
printRuntimeMSG("---RegressionTest1:test073");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test073");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        java.awt.Graphics2D graphics2D10 = null;
        java.awt.geom.Rectangle2D rectangle2D11 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState14 = null;
        boolean boolean15 = categoryPlot9.render(graphics2D10, rectangle2D11, 0, plotRenderingInfo13, categoryCrosshairState14);
        org.jfree.chart.renderer.RenderAttributes renderAttributes24 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean30 = lineAndShapeRenderer28.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean31 = lineAndShapeRenderer28.getBaseLinesVisible();
        java.awt.Shape shape32 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer28.setBaseLegendShape(shape32);
        renderAttributes24.setSeriesShape((int) ' ', shape32);
        org.jfree.chart.entity.ChartEntity chartEntity36 = new org.jfree.chart.entity.ChartEntity(shape32, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color39 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color39);
        java.lang.String str41 = legendItem40.getToolTipText();
        java.awt.Stroke stroke42 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem40.setOutlineStroke(stroke42);
        java.awt.Shape shape48 = null;
        java.awt.Color color49 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke50 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color51 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem52 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape48, (java.awt.Paint) color49, stroke50, (java.awt.Paint) color51);
        java.lang.Class<?> wildcardClass53 = color49.getClass();
        org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, paint37, stroke42, (java.awt.Paint) color49);
        org.jfree.chart.entity.ChartEntity chartEntity55 = new org.jfree.chart.entity.ChartEntity(shape32);
        java.awt.Color color56 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem57 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape32, (java.awt.Paint) color56);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset60 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity63 = new org.jfree.chart.entity.CategoryItemEntity(shape32, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset60, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str64 = categoryItemEntity63.toString();
        java.awt.Shape shape65 = categoryItemEntity63.getArea();
        categoryItemEntity63.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset68 = categoryItemEntity63.getDataset();
        org.jfree.data.category.CategoryDataset categoryDataset69 = categoryItemEntity63.getDataset();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer70 = categoryPlot9.getRendererForDataset(categoryDataset69);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(shape32);
        org.junit.Assert.assertNotNull(paint37);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(color49);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(color56);
        org.junit.Assert.assertNotNull(shape65);
        org.junit.Assert.assertNotNull(categoryDataset68);
        org.junit.Assert.assertNotNull(categoryDataset69);
        org.junit.Assert.assertNull(categoryItemRenderer70);
    }

    @Test
    public void test074() throws Throwable {
printRuntimeMSG("---RegressionTest1:test074");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test074");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        int int9 = legendItem8.getSeriesIndex();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer10 = legendItem8.getFillPaintTransformer();
        java.awt.Stroke stroke11 = null;
        legendItem8.setOutlineStroke(stroke11);
        java.awt.Paint paint13 = null;
        try {
            legendItem8.setLinePaint(paint13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'paint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(gradientPaintTransformer10);
    }

    @Test
    public void test075() throws Throwable {
printRuntimeMSG("---RegressionTest1:test075");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test075");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        categoryPlot11.setParent((org.jfree.chart.plot.Plot) categoryPlot13);
        org.jfree.chart.plot.Plot plot16 = categoryPlot11.getParent();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer19.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint29 = lineAndShapeRenderer19.getBaseItemLabelPaint();
        categoryPlot11.setRangeMinorGridlinePaint(paint29);
        lineAndShapeRenderer2.removeChangeListener((org.jfree.chart.event.RendererChangeListener) categoryPlot11);
        java.awt.Stroke stroke35 = lineAndShapeRenderer2.getItemOutlineStroke((int) 'a', 192, true);
        int int36 = lineAndShapeRenderer2.getPassCount();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(plot16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test076() throws Throwable {
printRuntimeMSG("---RegressionTest1:test076");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test076");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        categoryPlot0.configureDomainAxes();
        boolean boolean10 = categoryPlot0.isRangeGridlinesVisible();
        categoryPlot0.setForegroundAlpha((float) (-1));
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test077() throws Throwable {
printRuntimeMSG("---RegressionTest1:test077");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test077");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        org.jfree.data.category.CategoryDataset categoryDataset49 = categoryItemEntity47.getDataset();
        org.jfree.data.category.CategoryDataset categoryDataset50 = categoryItemEntity47.getDataset();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(categoryDataset50);
    }

    @Test
    public void test078() throws Throwable {
printRuntimeMSG("---RegressionTest1:test078");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test078");
        java.awt.Color color0 = java.awt.Color.BLACK;
        int int1 = color0.getGreen();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test079() throws Throwable {
printRuntimeMSG("---RegressionTest1:test079");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test079");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        categoryAxis1.clearCategoryLabelToolTips();
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        categoryPlot17.setBackgroundImageAlignment((int) (byte) -1);
        int int21 = categoryPlot17.getDatasetCount();
        java.awt.Paint paint22 = categoryPlot17.getDomainCrosshairPaint();
        boolean boolean23 = categoryAxis1.hasListener((java.util.EventListener) categoryPlot17);
        boolean boolean24 = categoryAxis1.isTickMarksVisible();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(paint22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test080() throws Throwable {
printRuntimeMSG("---RegressionTest1:test080");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test080");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        int int9 = legendItem8.getSeriesIndex();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer10 = legendItem8.getFillPaintTransformer();
        legendItem8.setToolTipText("TextAnchor.HALF_ASCENT_LEFT");
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(gradientPaintTransformer10);
    }

    @Test
    public void test081() throws Throwable {
printRuntimeMSG("---RegressionTest1:test081");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test081");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setMinorTickMarkInsideLength((float) (-12566464));
        double double20 = categoryAxis0.getCategoryMargin();
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
    }

    @Test
    public void test082() throws Throwable {
printRuntimeMSG("---RegressionTest1:test082");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test082");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        try {
            defaultCategoryDataset47.removeColumn((java.lang.Comparable) "PlotOrientation.HORIZONTAL");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Column key (PlotOrientation.HORIZONTAL) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
    }

    @Test
    public void test083() throws Throwable {
printRuntimeMSG("---RegressionTest1:test083");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test083");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        org.jfree.data.general.DatasetGroup datasetGroup51 = categoryPlot0.getDatasetGroup();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo53 = null;
        java.awt.geom.Point2D point2D54 = null;
        categoryPlot0.panDomainAxes((double) (byte) 1, plotRenderingInfo53, point2D54);
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNull(datasetGroup51);
    }

    @Test
    public void test084() throws Throwable {
printRuntimeMSG("---RegressionTest1:test084");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test084");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation14 = categoryPlot0.getRangeAxisLocation();
        org.jfree.chart.util.RectangleEdge rectangleEdge15 = categoryPlot0.getDomainAxisEdge();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent16 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent16);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(axisLocation14);
        org.junit.Assert.assertNotNull(rectangleEdge15);
    }

    @Test
    public void test085() throws Throwable {
printRuntimeMSG("---RegressionTest1:test085");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test085");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint2 = renderAttributes0.getSeriesPaint((int) (short) 0);
        java.awt.Paint paint3 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Stroke stroke5 = renderAttributes0.getSeriesStroke((int) '4');
        org.junit.Assert.assertNull(paint2);
        org.junit.Assert.assertNull(paint3);
        org.junit.Assert.assertNull(stroke5);
    }

    @Test
    public void test086() throws Throwable {
printRuntimeMSG("---RegressionTest1:test086");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test086");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean8 = lineAndShapeRenderer2.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator16 = null;
        lineAndShapeRenderer12.setLegendItemToolTipGenerator(categorySeriesLabelGenerator16);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition18 = lineAndShapeRenderer12.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition((int) (byte) 0, itemLabelPosition18, false);
        org.jfree.chart.text.TextAnchor textAnchor21 = itemLabelPosition18.getRotationAnchor();
        double double22 = itemLabelPosition18.getAngle();
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition18);
        org.junit.Assert.assertNotNull(textAnchor21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test087() throws Throwable {
printRuntimeMSG("---RegressionTest1:test087");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test087");
        java.text.AttributedString attributedString0 = null;
        org.jfree.chart.renderer.RenderAttributes renderAttributes4 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint5 = renderAttributes4.getDefaultLabelPaint();
        java.awt.Paint paint8 = renderAttributes4.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.axis.CategoryAxis categoryAxis9 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis9.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font12 = categoryAxis9.getTickLabelFont();
        renderAttributes4.setDefaultLabelFont(font12);
        org.jfree.chart.renderer.RenderAttributes renderAttributes23 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean29 = lineAndShapeRenderer27.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean30 = lineAndShapeRenderer27.getBaseLinesVisible();
        java.awt.Shape shape31 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer27.setBaseLegendShape(shape31);
        renderAttributes23.setSeriesShape((int) ' ', shape31);
        org.jfree.chart.entity.ChartEntity chartEntity35 = new org.jfree.chart.entity.ChartEntity(shape31, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color38 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color38);
        java.lang.String str40 = legendItem39.getToolTipText();
        java.awt.Stroke stroke41 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem39.setOutlineStroke(stroke41);
        java.awt.Shape shape47 = null;
        java.awt.Color color48 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke49 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color50 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem51 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape47, (java.awt.Paint) color48, stroke49, (java.awt.Paint) color50);
        java.lang.Class<?> wildcardClass52 = color48.getClass();
        org.jfree.chart.LegendItem legendItem53 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape31, paint36, stroke41, (java.awt.Paint) color48);
        org.jfree.chart.entity.ChartEntity chartEntity54 = new org.jfree.chart.entity.ChartEntity(shape31);
        java.awt.Color color55 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem56 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape31, (java.awt.Paint) color55);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset59 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity62 = new org.jfree.chart.entity.CategoryItemEntity(shape31, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset59, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str63 = categoryItemEntity62.toString();
        java.awt.Shape shape64 = categoryItemEntity62.getArea();
        renderAttributes4.setSeriesShape((int) (byte) 10, shape64);
        java.awt.Paint paint66 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer69 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator70 = lineAndShapeRenderer69.getBaseItemLabelGenerator();
        java.awt.Paint paint72 = lineAndShapeRenderer69.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator74 = lineAndShapeRenderer69.getSeriesURLGenerator(0);
        double double75 = lineAndShapeRenderer69.getItemMargin();
        java.awt.Stroke stroke77 = lineAndShapeRenderer69.lookupSeriesOutlineStroke(100);
        org.jfree.chart.plot.CategoryPlot categoryPlot78 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke79 = categoryPlot78.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot80 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke81 = categoryPlot80.getRangeMinorGridlineStroke();
        categoryPlot78.setParent((org.jfree.chart.plot.Plot) categoryPlot80);
        org.jfree.chart.LegendItemCollection legendItemCollection83 = categoryPlot78.getFixedLegendItems();
        java.lang.Comparable comparable84 = categoryPlot78.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge85 = categoryPlot78.getRangeAxisEdge();
        categoryPlot78.setRangeZeroBaselineVisible(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer89 = categoryPlot78.getRenderer((int) (byte) -1);
        java.awt.Color color90 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        categoryPlot78.setDomainCrosshairPaint((java.awt.Paint) color90);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer94 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean95 = lineAndShapeRenderer94.getUseOutlinePaint();
        categoryPlot78.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer94);
        java.awt.Paint paint97 = categoryPlot78.getNoDataMessagePaint();
        try {
            org.jfree.chart.LegendItem legendItem98 = new org.jfree.chart.LegendItem(attributedString0, "", "Category Plot", "PlotEntity: tooltip = ItemLabelAnchor.OUTSIDE9", shape64, paint66, stroke77, paint97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'label' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(paint5);
        org.junit.Assert.assertNull(paint8);
        org.junit.Assert.assertNotNull(font12);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(shape31);
        org.junit.Assert.assertNotNull(paint36);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(stroke49);
        org.junit.Assert.assertNotNull(color50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(color55);
        org.junit.Assert.assertNotNull(shape64);
        org.junit.Assert.assertNull(categoryItemLabelGenerator70);
        org.junit.Assert.assertNotNull(paint72);
        org.junit.Assert.assertNull(categoryURLGenerator74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(stroke77);
        org.junit.Assert.assertNotNull(stroke79);
        org.junit.Assert.assertNotNull(stroke81);
        org.junit.Assert.assertNull(legendItemCollection83);
        org.junit.Assert.assertNull(comparable84);
        org.junit.Assert.assertNotNull(rectangleEdge85);
        org.junit.Assert.assertNull(categoryItemRenderer89);
        org.junit.Assert.assertNotNull(color90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(paint97);
    }

    @Test
    public void test088() throws Throwable {
printRuntimeMSG("---RegressionTest1:test088");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test088");
        org.jfree.chart.util.UnitType unitType0 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        categoryPlot1.setParent((org.jfree.chart.plot.Plot) categoryPlot3);
        org.jfree.chart.LegendItemCollection legendItemCollection6 = categoryPlot1.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier7 = categoryPlot1.getDrawingSupplier();
        java.awt.Stroke stroke8 = categoryPlot1.getOutlineStroke();
        boolean boolean9 = unitType0.equals((java.lang.Object) categoryPlot1);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot1.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo12, point2D13);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean19 = lineAndShapeRenderer17.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean20 = lineAndShapeRenderer17.getBaseLinesVisible();
        java.awt.Shape shape21 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer17.setBaseLegendShape(shape21);
        java.awt.Color color23 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer17.setBaseOutlinePaint((java.awt.Paint) color23, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition30 = null;
        lineAndShapeRenderer28.setSeriesPositiveItemLabelPosition(0, itemLabelPosition30);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer28.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean34 = lineAndShapeRenderer28.getUseFillPaint();
        lineAndShapeRenderer28.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer28.setBaseStroke(stroke37, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray40 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer17, lineAndShapeRenderer28 };
        categoryPlot1.setRenderers(categoryItemRendererArray40);
        boolean boolean42 = categoryPlot1.isRangeCrosshairLockedOnData();
        org.jfree.data.general.DatasetGroup datasetGroup43 = categoryPlot1.getDatasetGroup();
        org.junit.Assert.assertNotNull(unitType0);
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNull(legendItemCollection6);
        org.junit.Assert.assertNotNull(drawingSupplier7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(shape21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(categoryItemRendererArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(datasetGroup43);
    }

    @Test
    public void test089() throws Throwable {
printRuntimeMSG("---RegressionTest1:test089");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test089");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        boolean boolean11 = defaultCategoryDataset0.equals((java.lang.Object) false);
        try {
            java.lang.Comparable comparable13 = defaultCategoryDataset0.getColumnKey(128);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 128, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test090() throws Throwable {
printRuntimeMSG("---RegressionTest1:test090");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test090");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        categoryPlot0.drawBackgroundImage(graphics2D3, rectangle2D4);
        categoryPlot0.clearAnnotations();
        java.lang.Object obj7 = categoryPlot0.clone();
        categoryPlot0.configureRangeAxes();
        java.awt.Stroke stroke9 = categoryPlot0.getRangeZeroBaselineStroke();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(stroke9);
    }

    @Test
    public void test091() throws Throwable {
printRuntimeMSG("---RegressionTest1:test091");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test091");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition1 = barRenderer0.getNegativeItemLabelPositionFallback();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition2 = barRenderer0.getNegativeItemLabelPositionFallback();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer5 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator6 = lineAndShapeRenderer5.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator10 = lineAndShapeRenderer5.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer5.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint14 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer5.setBaseOutlinePaint(paint14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer5.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition19);
        java.awt.Shape shape25 = null;
        java.awt.Color color26 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color28 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem29 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape25, (java.awt.Paint) color26, stroke27, (java.awt.Paint) color28);
        java.awt.Paint paint30 = legendItem29.getLabelPaint();
        java.lang.String str31 = legendItem29.getURLText();
        java.awt.Paint paint32 = legendItem29.getOutlinePaint();
        barRenderer0.setShadowPaint(paint32);
        org.junit.Assert.assertNull(itemLabelPosition1);
        org.junit.Assert.assertNull(itemLabelPosition2);
        org.junit.Assert.assertNull(categoryItemLabelGenerator6);
        org.junit.Assert.assertNull(categoryToolTipGenerator10);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(color28);
        org.junit.Assert.assertNull(paint30);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str31.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint32);
    }

    @Test
    public void test092() throws Throwable {
printRuntimeMSG("---RegressionTest1:test092");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test092");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean33 = lineAndShapeRenderer31.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition37 = lineAndShapeRenderer31.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        org.jfree.chart.text.TextAnchor textAnchor38 = itemLabelPosition37.getRotationAnchor();
        keyedObjects0.insertValue(0, (java.lang.Comparable) ' ', (java.lang.Object) textAnchor38);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(itemLabelPosition37);
        org.junit.Assert.assertNotNull(textAnchor38);
    }

    @Test
    public void test093() throws Throwable {
printRuntimeMSG("---RegressionTest1:test093");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test093");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent14 = null;
        categoryPlot0.annotationChanged(annotationChangeEvent14);
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation17 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot16.setOrientation(plotOrientation17);
        categoryPlot0.setOrientation(plotOrientation17);
        org.jfree.chart.axis.AxisSpace axisSpace20 = null;
        categoryPlot0.setFixedRangeAxisSpace(axisSpace20);
        categoryPlot0.setRangeCrosshairValue(0.05d);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(plotOrientation17);
    }

    @Test
    public void test094() throws Throwable {
printRuntimeMSG("---RegressionTest1:test094");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test094");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint3 = renderAttributes0.getItemOutlinePaint(1, (int) 'a');
        java.awt.Paint paint4 = renderAttributes0.getDefaultFillPaint();
        java.awt.Paint paint7 = renderAttributes0.getItemOutlinePaint((int) 'a', 4);
        java.awt.Paint paint8 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_PAINT;
        renderAttributes0.setDefaultLabelPaint(paint8);
        org.junit.Assert.assertNull(paint3);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(paint8);
    }

    @Test
    public void test095() throws Throwable {
printRuntimeMSG("---RegressionTest1:test095");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test095");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        categoryPlot0.setWeight((int) (byte) 1);
        org.jfree.data.category.CategoryDataset categoryDataset10 = null;
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = categoryPlot0.getRendererForDataset(categoryDataset10);
        org.jfree.chart.axis.AxisLocation axisLocation12 = categoryPlot0.getRangeAxisLocation();
        org.jfree.chart.renderer.category.BarRenderer barRenderer13 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint14 = barRenderer13.getShadowPaint();
        boolean boolean15 = barRenderer13.getBaseSeriesVisible();
        barRenderer13.setBaseItemLabelsVisible(false);
        double double18 = barRenderer13.getItemMargin();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = barRenderer13.getBaseNegativeItemLabelPosition();
        java.awt.Paint paint20 = barRenderer13.getBaseOutlinePaint();
        boolean boolean21 = axisLocation12.equals((java.lang.Object) paint20);
        org.junit.Assert.assertNull(categoryItemRenderer11);
        org.junit.Assert.assertNotNull(axisLocation12);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test096() throws Throwable {
printRuntimeMSG("---RegressionTest1:test096");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test096");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        boolean boolean14 = lineAndShapeRenderer2.getAutoPopulateSeriesStroke();
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator15 = null;
        lineAndShapeRenderer2.setBaseItemLabelGenerator(categoryItemLabelGenerator15, true);
        java.awt.Graphics2D graphics2D18 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer21 = null;
        categoryPlot19.setRenderer(categoryItemRenderer21);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent23 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot19);
        categoryPlot19.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D26 = null;
        java.awt.geom.Rectangle2D rectangle2D27 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo29 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState30 = null;
        boolean boolean31 = categoryPlot19.render(graphics2D26, rectangle2D27, 0, plotRenderingInfo29, categoryCrosshairState30);
        boolean boolean32 = categoryPlot19.isDomainCrosshairVisible();
        java.awt.geom.Rectangle2D rectangle2D33 = null;
        try {
            lineAndShapeRenderer2.drawOutline(graphics2D18, categoryPlot19, rectangle2D33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test097() throws Throwable {
printRuntimeMSG("---RegressionTest1:test097");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test097");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint5 = lineAndShapeRenderer2.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = lineAndShapeRenderer2.getSeriesURLGenerator(0);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator8 = lineAndShapeRenderer2.getLegendItemURLGenerator();
        boolean boolean9 = lineAndShapeRenderer2.getBaseShapesFilled();
        try {
            lineAndShapeRenderer2.setSeriesLinesVisible((-16777216), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNull(categoryURLGenerator7);
        org.junit.Assert.assertNull(categorySeriesLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test098() throws Throwable {
printRuntimeMSG("---RegressionTest1:test098");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test098");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition6 = barRenderer0.getBaseNegativeItemLabelPosition();
        try {
            barRenderer0.setSeriesVisible((-15935), (java.lang.Boolean) true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNotNull(itemLabelPosition6);
    }

    @Test
    public void test099() throws Throwable {
printRuntimeMSG("---RegressionTest1:test099");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test099");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.awt.Color color10 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        boolean boolean11 = lineAndShapeRenderer2.equals((java.lang.Object) color10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes12 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean18 = lineAndShapeRenderer16.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean19 = lineAndShapeRenderer16.getBaseLinesVisible();
        java.awt.Shape shape20 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer16.setBaseLegendShape(shape20);
        renderAttributes12.setSeriesShape((int) ' ', shape20);
        org.jfree.chart.entity.ChartEntity chartEntity24 = new org.jfree.chart.entity.ChartEntity(shape20, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        lineAndShapeRenderer2.setBaseShape(shape20, true);
        boolean boolean27 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNotNull(color10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(shape20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test100() throws Throwable {
printRuntimeMSG("---RegressionTest1:test100");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test100");
        org.jfree.chart.util.ShapeList shapeList0 = new org.jfree.chart.util.ShapeList();
        org.jfree.chart.renderer.RenderAttributes renderAttributes6 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer10.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean13 = lineAndShapeRenderer10.getBaseLinesVisible();
        java.awt.Shape shape14 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer10.setBaseLegendShape(shape14);
        renderAttributes6.setSeriesShape((int) ' ', shape14);
        org.jfree.chart.entity.ChartEntity chartEntity18 = new org.jfree.chart.entity.ChartEntity(shape14, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint19 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color21 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color21);
        java.lang.String str23 = legendItem22.getToolTipText();
        java.awt.Stroke stroke24 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem22.setOutlineStroke(stroke24);
        java.awt.Shape shape30 = null;
        java.awt.Color color31 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color33 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape30, (java.awt.Paint) color31, stroke32, (java.awt.Paint) color33);
        java.lang.Class<?> wildcardClass35 = color31.getClass();
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape14, paint19, stroke24, (java.awt.Paint) color31);
        org.jfree.chart.entity.ChartEntity chartEntity37 = new org.jfree.chart.entity.ChartEntity(shape14);
        shapeList0.setShape((int) (short) 1, shape14);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer42 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator43 = lineAndShapeRenderer42.getBaseItemLabelGenerator();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition45 = lineAndShapeRenderer42.getSeriesNegativeItemLabelPosition(192);
        java.awt.Shape shape46 = lineAndShapeRenderer42.getBaseShape();
        shapeList0.setShape((int) (short) 10, shape46);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer50 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean52 = lineAndShapeRenderer50.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean53 = lineAndShapeRenderer50.getBaseLinesVisible();
        lineAndShapeRenderer50.setAutoPopulateSeriesPaint(false);
        boolean boolean56 = lineAndShapeRenderer50.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition57 = lineAndShapeRenderer50.getBasePositiveItemLabelPosition();
        boolean boolean58 = shapeList0.equals((java.lang.Object) lineAndShapeRenderer50);
        java.lang.Object obj59 = shapeList0.clone();
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(shape14);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNull(categoryItemLabelGenerator43);
        org.junit.Assert.assertNotNull(itemLabelPosition45);
        org.junit.Assert.assertNotNull(shape46);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
    }

    @Test
    public void test101() throws Throwable {
printRuntimeMSG("---RegressionTest1:test101");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test101");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false);
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false, false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
    }

    @Test
    public void test102() throws Throwable {
printRuntimeMSG("---RegressionTest1:test102");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test102");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        double double10 = barRenderer0.getMaximumBarWidth();
        java.awt.Stroke stroke12 = barRenderer0.lookupSeriesStroke((-1));
        java.awt.Paint paint13 = barRenderer0.getShadowPaint();
        double double14 = barRenderer0.getBase();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test103() throws Throwable {
printRuntimeMSG("---RegressionTest1:test103");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test103");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Paint paint3 = categoryPlot0.getBackgroundPaint();
        org.jfree.chart.util.Layer layer5 = null;
        java.util.Collection collection6 = categoryPlot0.getRangeMarkers((int) (byte) 0, layer5);
        org.jfree.chart.axis.AxisSpace axisSpace7 = categoryPlot0.getFixedRangeAxisSpace();
        categoryPlot0.setDomainCrosshairRowKey((java.lang.Comparable) 96.0d, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertNull(collection6);
        org.junit.Assert.assertNull(axisSpace7);
    }

    @Test
    public void test104() throws Throwable {
printRuntimeMSG("---RegressionTest1:test104");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test104");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.awt.Font font10 = lineAndShapeRenderer2.getSeriesItemLabelFont((int) (short) 1);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator11 = lineAndShapeRenderer2.getLegendItemLabelGenerator();
        boolean boolean15 = lineAndShapeRenderer2.isItemLabelVisible(175, 10, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(categorySeriesLabelGenerator11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test105() throws Throwable {
printRuntimeMSG("---RegressionTest1:test105");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test105");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        double double3 = barRenderer0.getMinimumBarLength();
        org.jfree.chart.LegendItem legendItem6 = barRenderer0.getLegendItem(0, (int) (short) 100);
        org.jfree.chart.renderer.category.BarPainter barPainter7 = barRenderer0.getBarPainter();
        java.awt.Graphics2D graphics2D8 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        categoryPlot9.setParent((org.jfree.chart.plot.Plot) categoryPlot11);
        org.jfree.chart.LegendItemCollection legendItemCollection14 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent15 = null;
        categoryPlot9.axisChanged(axisChangeEvent15);
        org.jfree.chart.axis.AxisSpace axisSpace17 = categoryPlot9.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset18 = null;
        categoryPlot9.setDataset(categoryDataset18);
        java.awt.Stroke stroke20 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot9.setDomainCrosshairStroke(stroke20);
        java.awt.Stroke stroke22 = categoryPlot9.getRangeGridlineStroke();
        categoryPlot9.setForegroundAlpha((float) (-1));
        org.jfree.data.category.CategoryDataset categoryDataset25 = categoryPlot9.getDataset();
        java.awt.Paint paint26 = categoryPlot9.getDomainCrosshairPaint();
        java.awt.Stroke stroke27 = categoryPlot9.getRangeZeroBaselineStroke();
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        try {
            barRenderer0.drawOutline(graphics2D8, categoryPlot9, rectangle2D28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNull(legendItem6);
        org.junit.Assert.assertNotNull(barPainter7);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNull(legendItemCollection14);
        org.junit.Assert.assertNull(axisSpace17);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNull(categoryDataset25);
        org.junit.Assert.assertNotNull(paint26);
        org.junit.Assert.assertNotNull(stroke27);
    }

    @Test
    public void test106() throws Throwable {
printRuntimeMSG("---RegressionTest1:test106");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test106");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        boolean boolean9 = lineAndShapeRenderer2.getBaseCreateEntities();
        java.awt.Color color11 = org.jfree.chart.ChartColor.VERY_DARK_CYAN;
        lineAndShapeRenderer2.setSeriesPaint((int) '4', (java.awt.Paint) color11, true);
        lineAndShapeRenderer2.setSeriesLinesVisible(192, false);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator17 = lineAndShapeRenderer2.getBaseURLGenerator();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNull(categoryURLGenerator17);
    }

    @Test
    public void test107() throws Throwable {
printRuntimeMSG("---RegressionTest1:test107");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test107");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.lang.String str13 = categoryAxis1.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions14 = categoryAxis1.getCategoryLabelPositions();
        categoryAxis1.setAxisLineVisible(false);
        org.jfree.chart.util.RectangleInsets rectangleInsets17 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str18 = rectangleInsets17.toString();
        double double19 = rectangleInsets17.getTop();
        categoryAxis1.setTickLabelInsets(rectangleInsets17);
        categoryAxis1.addCategoryLabelToolTip((java.lang.Comparable) "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", "");
        java.awt.geom.Rectangle2D rectangle2D29 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot30 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke31 = categoryPlot30.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot32 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke33 = categoryPlot32.getRangeMinorGridlineStroke();
        categoryPlot30.setParent((org.jfree.chart.plot.Plot) categoryPlot32);
        org.jfree.chart.LegendItemCollection legendItemCollection35 = categoryPlot30.getFixedLegendItems();
        java.lang.Comparable comparable36 = categoryPlot30.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge37 = categoryPlot30.getRangeAxisEdge();
        try {
            double double38 = categoryAxis1.getCategorySeriesMiddle((-12566464), (int) (short) 1, 175, (-12566464), (double) 4, rectangle2D29, rectangleEdge37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(categoryLabelPositions14);
        org.junit.Assert.assertNotNull(rectangleInsets17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str18.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.0d + "'", double19 == 2.0d);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNull(legendItemCollection35);
        org.junit.Assert.assertNull(comparable36);
        org.junit.Assert.assertNotNull(rectangleEdge37);
    }

    @Test
    public void test108() throws Throwable {
printRuntimeMSG("---RegressionTest1:test108");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test108");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setCategoryMargin((double) (byte) 100);
        float float20 = categoryAxis0.getTickMarkOutsideLength();
        int int21 = categoryAxis0.getCategoryLabelPositionOffset();
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 2.0f + "'", float20 == 2.0f);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test109() throws Throwable {
printRuntimeMSG("---RegressionTest1:test109");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test109");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        categoryPlot0.setRangeZeroBaselineVisible(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = categoryPlot0.getRenderer((int) (byte) -1);
        java.awt.Color color12 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        categoryPlot0.setDomainCrosshairPaint((java.awt.Paint) color12);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean17 = lineAndShapeRenderer16.getUseOutlinePaint();
        categoryPlot0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer16);
        org.jfree.chart.plot.Marker marker20 = null;
        org.jfree.chart.util.Layer layer21 = null;
        try {
            categoryPlot0.addRangeMarker(128, marker20, layer21, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNull(categoryItemRenderer11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test110() throws Throwable {
printRuntimeMSG("---RegressionTest1:test110");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test110");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Color color9 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer2.setSeriesPaint(2, (java.awt.Paint) color9);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer13.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator15 = null;
        lineAndShapeRenderer13.setBaseToolTipGenerator(categoryToolTipGenerator15);
        java.awt.Font font18 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer13.setSeriesItemLabelFont((int) (short) 0, font18, true);
        lineAndShapeRenderer2.setBaseLegendTextFont(font18);
        lineAndShapeRenderer2.setBaseSeriesVisible(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNotNull(font18);
    }

    @Test
    public void test111() throws Throwable {
printRuntimeMSG("---RegressionTest1:test111");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test111");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setForegroundAlpha((float) 100);
        org.jfree.chart.axis.AxisLocation axisLocation8 = null;
        try {
            categoryPlot2.setDomainAxisLocation((-1), axisLocation8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
    }

    @Test
    public void test112() throws Throwable {
printRuntimeMSG("---RegressionTest1:test112");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test112");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.clearCategoryLabelToolTips();
        boolean boolean17 = categoryAxis0.isTickMarksVisible();
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test113() throws Throwable {
printRuntimeMSG("---RegressionTest1:test113");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test113");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition2 = barRenderer0.getPositiveItemLabelPositionFallback();
        double double3 = barRenderer0.getMaximumBarWidth();
        java.awt.Shape shape4 = barRenderer0.getBaseShape();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator8 = barRenderer0.getToolTipGenerator(192, 4, false);
        java.awt.Paint paint10 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray11 = new java.awt.Paint[] { paint10 };
        java.awt.Color color12 = java.awt.Color.BLUE;
        java.awt.Color color13 = java.awt.Color.RED;
        java.awt.Paint paint14 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray15 = new java.awt.Paint[] { color12, color13, paint14 };
        java.awt.Color color16 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel17 = null;
        java.awt.Rectangle rectangle18 = null;
        java.awt.geom.Rectangle2D rectangle2D19 = null;
        java.awt.geom.AffineTransform affineTransform20 = null;
        java.awt.RenderingHints renderingHints21 = null;
        java.awt.PaintContext paintContext22 = color16.createContext(colorModel17, rectangle18, rectangle2D19, affineTransform20, renderingHints21);
        java.awt.Color color23 = java.awt.Color.WHITE;
        java.awt.Color color24 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel25 = null;
        java.awt.Rectangle rectangle26 = null;
        java.awt.geom.Rectangle2D rectangle2D27 = null;
        java.awt.geom.AffineTransform affineTransform28 = null;
        java.awt.RenderingHints renderingHints29 = null;
        java.awt.PaintContext paintContext30 = color24.createContext(colorModel25, rectangle26, rectangle2D27, affineTransform28, renderingHints29);
        java.awt.Color color31 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray32 = new java.awt.Paint[] { color16, color23, color24, color31 };
        java.awt.Stroke stroke33 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray38 = new java.awt.Stroke[] { stroke33, stroke34, stroke35, stroke36, stroke37 };
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot41 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke42 = categoryPlot41.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray43 = new java.awt.Stroke[] { stroke39, stroke40, stroke42 };
        java.awt.Shape shape44 = null;
        java.awt.Shape[] shapeArray45 = new java.awt.Shape[] { shape44 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier46 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray11, paintArray15, paintArray32, strokeArray38, strokeArray43, shapeArray45);
        java.awt.Paint paint47 = defaultDrawingSupplier46.getNextOutlinePaint();
        java.lang.Class<?> wildcardClass48 = paint47.getClass();
        barRenderer0.setSeriesFillPaint(0, paint47, false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(itemLabelPosition2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(shape4);
        org.junit.Assert.assertNull(categoryToolTipGenerator8);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(paintArray11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(paintArray15);
        org.junit.Assert.assertNotNull(color16);
        org.junit.Assert.assertNotNull(paintContext22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertNotNull(paintContext30);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(paintArray32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(strokeArray38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(strokeArray43);
        org.junit.Assert.assertNotNull(shapeArray45);
        org.junit.Assert.assertNotNull(paint47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test114() throws Throwable {
printRuntimeMSG("---RegressionTest1:test114");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test114");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        lineAndShapeRenderer2.setUseFillPaint(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
    }

    @Test
    public void test115() throws Throwable {
printRuntimeMSG("---RegressionTest1:test115");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test115");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        barRenderer0.setBaseSeriesVisibleInLegend(true);
        java.awt.Font font15 = barRenderer0.getLegendTextFont(128);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer19 = null;
        java.util.Collection collection20 = categoryPlot18.getDomainMarkers(layer19);
        java.awt.Paint paint21 = categoryPlot18.getRangeCrosshairPaint();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo23 = null;
        java.awt.geom.Point2D point2D24 = null;
        categoryPlot18.zoomRangeAxes(0.0d, plotRenderingInfo23, point2D24, false);
        org.jfree.chart.plot.CategoryPlot categoryPlot27 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke28 = categoryPlot27.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer29 = null;
        categoryPlot27.setRenderer(categoryItemRenderer29);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent31 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot27);
        categoryPlot27.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D34 = null;
        java.awt.geom.Rectangle2D rectangle2D35 = null;
        categoryPlot27.drawBackgroundImage(graphics2D34, rectangle2D35);
        org.jfree.chart.plot.Plot plot37 = categoryPlot27.getRootPlot();
        categoryPlot18.setParent((org.jfree.chart.plot.Plot) categoryPlot27);
        org.jfree.chart.plot.CategoryPlot categoryPlot39 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke40 = categoryPlot39.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation41 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation42 = axisLocation41.getOpposite();
        categoryPlot39.setDomainAxisLocation(axisLocation42, false);
        boolean boolean45 = categoryPlot39.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer49 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition51 = null;
        lineAndShapeRenderer49.setSeriesPositiveItemLabelPosition(0, itemLabelPosition51);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator53 = null;
        lineAndShapeRenderer49.setLegendItemToolTipGenerator(categorySeriesLabelGenerator53);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition55 = lineAndShapeRenderer49.getBasePositiveItemLabelPosition();
        boolean boolean56 = lineAndShapeRenderer49.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition57 = lineAndShapeRenderer49.getBasePositiveItemLabelPosition();
        java.lang.Object obj58 = lineAndShapeRenderer49.clone();
        categoryPlot39.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer49, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator61 = null;
        lineAndShapeRenderer49.setBaseURLGenerator(categoryURLGenerator61);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset63 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range64 = lineAndShapeRenderer49.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset63);
        int int66 = defaultCategoryDataset63.getColumnIndex((java.lang.Comparable) (-9.0d));
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo67 = null;
        try {
            org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState68 = barRenderer0.initialise(graphics2D16, rectangle2D17, categoryPlot18, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset63, plotRenderingInfo67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative 'index'.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNull(font15);
        org.junit.Assert.assertNull(collection20);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(plot37);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(axisLocation41);
        org.junit.Assert.assertNotNull(axisLocation42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNull(range64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test116() throws Throwable {
printRuntimeMSG("---RegressionTest1:test116");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test116");
        org.jfree.chart.util.ShapeList shapeList0 = new org.jfree.chart.util.ShapeList();
        org.jfree.chart.renderer.RenderAttributes renderAttributes6 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer10.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean13 = lineAndShapeRenderer10.getBaseLinesVisible();
        java.awt.Shape shape14 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer10.setBaseLegendShape(shape14);
        renderAttributes6.setSeriesShape((int) ' ', shape14);
        org.jfree.chart.entity.ChartEntity chartEntity18 = new org.jfree.chart.entity.ChartEntity(shape14, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint19 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color21 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color21);
        java.lang.String str23 = legendItem22.getToolTipText();
        java.awt.Stroke stroke24 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem22.setOutlineStroke(stroke24);
        java.awt.Shape shape30 = null;
        java.awt.Color color31 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color33 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape30, (java.awt.Paint) color31, stroke32, (java.awt.Paint) color33);
        java.lang.Class<?> wildcardClass35 = color31.getClass();
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape14, paint19, stroke24, (java.awt.Paint) color31);
        org.jfree.chart.entity.ChartEntity chartEntity37 = new org.jfree.chart.entity.ChartEntity(shape14);
        shapeList0.setShape((int) (short) 1, shape14);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer42 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator43 = lineAndShapeRenderer42.getBaseItemLabelGenerator();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition45 = lineAndShapeRenderer42.getSeriesNegativeItemLabelPosition(192);
        java.awt.Shape shape46 = lineAndShapeRenderer42.getBaseShape();
        shapeList0.setShape((int) (short) 10, shape46);
        java.lang.Object obj48 = shapeList0.clone();
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(shape14);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNull(categoryItemLabelGenerator43);
        org.junit.Assert.assertNotNull(itemLabelPosition45);
        org.junit.Assert.assertNotNull(shape46);
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test117() throws Throwable {
printRuntimeMSG("---RegressionTest1:test117");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test117");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = null;
        lineAndShapeRenderer6.setSeriesPositiveItemLabelPosition(0, itemLabelPosition8);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer6.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint15 = lineAndShapeRenderer6.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        double double16 = lineAndShapeRenderer6.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.RenderAttributes renderAttributes21 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean27 = lineAndShapeRenderer25.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean28 = lineAndShapeRenderer25.getBaseLinesVisible();
        java.awt.Shape shape29 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer25.setBaseLegendShape(shape29);
        renderAttributes21.setSeriesShape((int) ' ', shape29);
        org.jfree.chart.entity.ChartEntity chartEntity33 = new org.jfree.chart.entity.ChartEntity(shape29, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color36 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem37 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color36);
        java.lang.String str38 = legendItem37.getToolTipText();
        java.awt.Stroke stroke39 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem37.setOutlineStroke(stroke39);
        java.awt.Shape shape45 = null;
        java.awt.Color color46 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color48 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape45, (java.awt.Paint) color46, stroke47, (java.awt.Paint) color48);
        java.lang.Class<?> wildcardClass50 = color46.getClass();
        org.jfree.chart.LegendItem legendItem51 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape29, paint34, stroke39, (java.awt.Paint) color46);
        lineAndShapeRenderer6.setBaseLegendShape(shape29);
        java.awt.Paint paint53 = null;
        try {
            org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("", "PlotEntity: tooltip = ItemLabelAnchor.OUTSIDE9", "AxisLocation.BOTTOM_OR_RIGHT", "DatasetRenderingOrder.FORWARD", shape29, paint53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'fillPaint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.0d + "'", double16 == 2.0d);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(shape29);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test118() throws Throwable {
printRuntimeMSG("---RegressionTest1:test118");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test118");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        java.awt.Paint paint12 = lineAndShapeRenderer2.getLegendTextPaint(1);
        java.awt.Graphics2D graphics2D13 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke15 = categoryPlot14.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        categoryPlot14.setParent((org.jfree.chart.plot.Plot) categoryPlot16);
        categoryPlot16.setForegroundAlpha((float) 100);
        org.jfree.chart.axis.ValueAxis valueAxis21 = null;
        org.jfree.chart.plot.Marker marker22 = null;
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        lineAndShapeRenderer2.drawRangeMarker(graphics2D13, categoryPlot16, valueAxis21, marker22, rectangle2D23);
        java.awt.Shape shape26 = lineAndShapeRenderer2.getLegendShape(5);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNull(shape26);
    }

    @Test
    public void test119() throws Throwable {
printRuntimeMSG("---RegressionTest1:test119");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test119");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        categoryPlot2.mapDatasetToRangeAxis((int) 'a', (int) (short) 0);
        boolean boolean11 = categoryPlot2.isRangeCrosshairVisible();
        org.jfree.chart.plot.Marker marker13 = null;
        org.jfree.chart.util.Layer layer14 = null;
        try {
            boolean boolean16 = categoryPlot2.removeRangeMarker((int) '4', marker13, layer14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test120() throws Throwable {
printRuntimeMSG("---RegressionTest1:test120");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test120");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        categoryPlot2.mapDatasetToRangeAxis((int) 'a', (int) (short) 0);
        boolean boolean11 = categoryPlot2.isRangeCrosshairVisible();
        org.jfree.chart.util.RectangleEdge rectangleEdge13 = categoryPlot2.getDomainAxisEdge(0);
        float float14 = categoryPlot2.getBackgroundImageAlpha();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot2.zoomRangeAxes(0.2d, 0.2d, plotRenderingInfo17, point2D18);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(rectangleEdge13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.5f + "'", float14 == 0.5f);
    }

    @Test
    public void test121() throws Throwable {
printRuntimeMSG("---RegressionTest1:test121");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test121");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        org.jfree.chart.util.SortOrder sortOrder51 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer52 = categoryPlot0.getRenderer();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator56 = lineAndShapeRenderer55.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator57 = null;
        lineAndShapeRenderer55.setBaseToolTipGenerator(categoryToolTipGenerator57);
        java.awt.Font font60 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer55.setSeriesItemLabelFont((int) (short) 0, font60, true);
        lineAndShapeRenderer55.setUseSeriesOffset(true);
        boolean boolean66 = lineAndShapeRenderer55.isSeriesVisibleInLegend((int) (byte) 1);
        int int67 = categoryPlot0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer55);
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(sortOrder51);
        org.junit.Assert.assertNull(categoryItemRenderer52);
        org.junit.Assert.assertNull(categoryItemLabelGenerator56);
        org.junit.Assert.assertNotNull(font60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test122() throws Throwable {
printRuntimeMSG("---RegressionTest1:test122");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test122");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        barRenderer0.setMaximumBarWidth(0.0d);
        boolean boolean16 = barRenderer0.getIncludeBaseInRange();
        barRenderer0.setItemLabelAnchorOffset((double) (-8355712));
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test123() throws Throwable {
printRuntimeMSG("---RegressionTest1:test123");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test123");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean3 = lineAndShapeRenderer2.getUseOutlinePaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean8 = lineAndShapeRenderer6.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = lineAndShapeRenderer6.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        lineAndShapeRenderer2.setBasePositiveItemLabelPosition(itemLabelPosition12);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator15 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(255, categoryItemLabelGenerator15, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(itemLabelPosition12);
    }

    @Test
    public void test124() throws Throwable {
printRuntimeMSG("---RegressionTest1:test124");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test124");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent7 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent7);
        org.jfree.chart.plot.Marker marker10 = null;
        org.jfree.chart.util.Layer layer11 = null;
        try {
            boolean boolean13 = categoryPlot0.removeRangeMarker(255, marker10, layer11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
    }

    @Test
    public void test125() throws Throwable {
printRuntimeMSG("---RegressionTest1:test125");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test125");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        boolean boolean11 = categoryPlot0.isRangeCrosshairVisible();
        java.awt.Image image12 = categoryPlot0.getBackgroundImage();
        categoryPlot0.setNoDataMessage("");
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent15 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent15);
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) (-1.2566468E7d));
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(image12);
    }

    @Test
    public void test126() throws Throwable {
printRuntimeMSG("---RegressionTest1:test126");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test126");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        int int2 = keyedObjects2D0.getRowIndex((java.lang.Comparable) true);
        java.util.List list3 = keyedObjects2D0.getColumnKeys();
        try {
            keyedObjects2D0.removeColumn((java.lang.Comparable) "CategoryAnchor.START");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Column key (CategoryAnchor.START) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test127() throws Throwable {
printRuntimeMSG("---RegressionTest1:test127");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test127");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Graphics2D graphics2D6 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        java.awt.geom.Point2D point2D11 = null;
        categoryPlot7.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo10, point2D11);
        org.jfree.chart.axis.AxisSpace axisSpace13 = null;
        categoryPlot7.setFixedRangeAxisSpace(axisSpace13, true);
        org.jfree.chart.axis.ValueAxis valueAxis16 = null;
        org.jfree.chart.plot.Marker marker17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        lineAndShapeRenderer2.drawRangeMarker(graphics2D6, categoryPlot7, valueAxis16, marker17, rectangle2D18);
        categoryPlot7.setDomainCrosshairVisible(false);
        categoryPlot7.setDrawSharedDomainAxis(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test128() throws Throwable {
printRuntimeMSG("---RegressionTest1:test128");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test128");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.axis.AxisLocation axisLocation7 = categoryPlot0.getRangeAxisLocation();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(axisLocation7);
    }

    @Test
    public void test129() throws Throwable {
printRuntimeMSG("---RegressionTest1:test129");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test129");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator3 = null;
        try {
            barRenderer0.setSeriesURLGenerator((-16777216), categoryURLGenerator3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
    }

    @Test
    public void test130() throws Throwable {
printRuntimeMSG("---RegressionTest1:test130");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test130");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        double double3 = barRenderer0.getMinimumBarLength();
        org.jfree.chart.LegendItem legendItem6 = barRenderer0.getLegendItem(0, (int) (short) 100);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator10 = barRenderer0.getItemLabelGenerator((int) (short) 1, (-15935), true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNull(legendItem6);
        org.junit.Assert.assertNull(categoryItemLabelGenerator10);
    }

    @Test
    public void test131() throws Throwable {
printRuntimeMSG("---RegressionTest1:test131");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test131");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        float float3 = categoryAxis0.getMinorTickMarkInsideLength();
        categoryAxis0.setMinorTickMarkInsideLength(100.0f);
        java.awt.Paint paint6 = categoryAxis0.getTickMarkPaint();
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke13 = categoryPlot12.getRangeMinorGridlineStroke();
        categoryPlot10.setParent((org.jfree.chart.plot.Plot) categoryPlot12);
        categoryPlot12.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        categoryPlot12.mapDatasetToRangeAxis((int) 'a', (int) (short) 0);
        boolean boolean21 = categoryPlot12.isRangeCrosshairVisible();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot12.getDomainAxisEdge(0);
        try {
            double double24 = categoryAxis0.getCategoryStart(0, 5, rectangle2D9, rectangleEdge23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(rectangleEdge23);
    }

    @Test
    public void test132() throws Throwable {
printRuntimeMSG("---RegressionTest1:test132");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test132");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        categoryPlot2.mapDatasetToRangeAxis((int) 'a', (int) (short) 0);
        boolean boolean11 = categoryPlot2.isRangeCrosshairVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = null;
        lineAndShapeRenderer14.setSeriesPositiveItemLabelPosition(0, itemLabelPosition16);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer14.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint23 = lineAndShapeRenderer14.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition24 = lineAndShapeRenderer14.getBasePositiveItemLabelPosition();
        categoryPlot2.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer14);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(itemLabelPosition24);
    }

    @Test
    public void test133() throws Throwable {
printRuntimeMSG("---RegressionTest1:test133");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test133");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        java.util.List list5 = keyedObjects0.getKeys();
        java.util.List list6 = keyedObjects0.getKeys();
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test134() throws Throwable {
printRuntimeMSG("---RegressionTest1:test134");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test134");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator14 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
    }

    @Test
    public void test135() throws Throwable {
printRuntimeMSG("---RegressionTest1:test135");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test135");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.awt.color.ColorSpace colorSpace4 = color2.getColorSpace();
        keyedObjects2D0.addObject((java.lang.Object) colorSpace4, (java.lang.Comparable) (-4.0d), (java.lang.Comparable) (-4.0d));
        org.jfree.chart.plot.CategoryPlot categoryPlot8 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke9 = categoryPlot8.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer10 = null;
        categoryPlot8.setRenderer(categoryItemRenderer10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot8);
        categoryPlot8.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D15 = null;
        java.awt.geom.Rectangle2D rectangle2D16 = null;
        categoryPlot8.drawBackgroundImage(graphics2D15, rectangle2D16);
        org.jfree.chart.plot.Plot plot18 = categoryPlot8.getRootPlot();
        boolean boolean19 = keyedObjects2D0.equals((java.lang.Object) plot18);
        int int20 = keyedObjects2D0.getRowCount();
        try {
            java.lang.Object obj23 = keyedObjects2D0.getObject(192, (-8355712));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 192, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertNotNull(plot18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test136() throws Throwable {
printRuntimeMSG("---RegressionTest1:test136");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test136");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        double double11 = categoryAxis1.getFixedDimension();
        java.lang.Object obj12 = categoryAxis1.clone();
        categoryAxis1.setLabelToolTip("DatasetRenderingOrder.FORWARD");
        boolean boolean15 = categoryAxis1.isTickLabelsVisible();
        org.jfree.chart.JFreeChart jFreeChart16 = null;
        org.jfree.chart.event.ChartChangeEvent chartChangeEvent17 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object) boolean15, jFreeChart16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test137() throws Throwable {
printRuntimeMSG("---RegressionTest1:test137");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test137");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        double double1 = categoryAxis0.getUpperMargin();
        java.awt.Font font3 = categoryAxis0.getTickLabelFont((java.lang.Comparable) 3);
        categoryAxis0.setLabel("");
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset7 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis8.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis11 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator15 = lineAndShapeRenderer14.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot(categoryDataset7, categoryAxis8, valueAxis11, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer14);
        boolean boolean17 = categoryAxis8.isTickLabelsVisible();
        double double18 = categoryAxis8.getFixedDimension();
        java.awt.Paint paint20 = categoryAxis8.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis6.setTickLabelPaint(paint20);
        categoryAxis6.setTickMarkInsideLength((float) (-1L));
        categoryAxis6.setMinorTickMarkInsideLength((float) (-12566464));
        org.jfree.data.category.CategoryDataset categoryDataset26 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis27 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis27.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis30 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer33 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator34 = lineAndShapeRenderer33.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot35 = new org.jfree.chart.plot.CategoryPlot(categoryDataset26, categoryAxis27, valueAxis30, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer33);
        categoryAxis27.setVisible(false);
        java.lang.String str39 = categoryAxis27.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions40 = categoryAxis27.getCategoryLabelPositions();
        categoryAxis6.setCategoryLabelPositions(categoryLabelPositions40);
        categoryAxis0.setCategoryLabelPositions(categoryLabelPositions40);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.05d + "'", double1 == 0.05d);
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertNull(categoryItemLabelGenerator15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNull(categoryItemLabelGenerator34);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(categoryLabelPositions40);
    }

    @Test
    public void test138() throws Throwable {
printRuntimeMSG("---RegressionTest1:test138");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test138");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        float float3 = categoryAxis0.getMinorTickMarkInsideLength();
        org.jfree.chart.util.StrokeList strokeList5 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        java.awt.Paint paint11 = lineAndShapeRenderer8.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator13 = lineAndShapeRenderer8.getSeriesURLGenerator(0);
        boolean boolean14 = strokeList5.equals((java.lang.Object) categoryURLGenerator13);
        java.awt.Stroke stroke16 = strokeList5.getStroke((-12566464));
        java.awt.Stroke stroke18 = strokeList5.getStroke((-65536));
        org.jfree.chart.axis.CategoryAxis categoryAxis19 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint20 = categoryAxis19.getTickLabelPaint();
        categoryAxis19.setFixedDimension((double) 1);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_FONT;
        categoryAxis19.setTickLabelFont((java.lang.Comparable) (-12566464), font24);
        boolean boolean26 = strokeList5.equals((java.lang.Object) font24);
        categoryAxis0.setTickLabelFont((java.lang.Comparable) "ChartChangeEventType.NEW_DATASET", font24);
        java.awt.geom.Rectangle2D rectangle2D30 = null;
        org.jfree.data.category.CategoryDataset categoryDataset31 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis32 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis32.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis35 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer38 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator39 = lineAndShapeRenderer38.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot(categoryDataset31, categoryAxis32, valueAxis35, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer38);
        org.jfree.chart.plot.CategoryPlot categoryPlot41 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke42 = categoryPlot41.getRangeMinorGridlineStroke();
        boolean boolean43 = categoryPlot41.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D44 = null;
        java.awt.geom.Rectangle2D rectangle2D45 = null;
        categoryPlot41.drawBackgroundImage(graphics2D44, rectangle2D45);
        java.awt.Graphics2D graphics2D47 = null;
        java.awt.geom.Rectangle2D rectangle2D48 = null;
        categoryPlot41.drawBackgroundImage(graphics2D47, rectangle2D48);
        lineAndShapeRenderer38.setPlot(categoryPlot41);
        org.jfree.chart.plot.CategoryPlot categoryPlot51 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke52 = categoryPlot51.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer53 = null;
        categoryPlot51.setRenderer(categoryItemRenderer53);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent55 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot51);
        org.jfree.chart.util.SortOrder sortOrder56 = categoryPlot51.getColumnRenderingOrder();
        categoryPlot41.setColumnRenderingOrder(sortOrder56);
        org.jfree.chart.util.RectangleEdge rectangleEdge59 = categoryPlot41.getRangeAxisEdge((-65536));
        try {
            double double60 = categoryAxis0.getCategoryMiddle((int) ' ', (int) (byte) 1, rectangle2D30, rectangleEdge59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid category index: 32");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNull(categoryURLGenerator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(stroke16);
        org.junit.Assert.assertNull(stroke18);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator39);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(sortOrder56);
        org.junit.Assert.assertNotNull(rectangleEdge59);
    }

    @Test
    public void test139() throws Throwable {
printRuntimeMSG("---RegressionTest1:test139");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test139");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = null;
        lineAndShapeRenderer10.setSeriesPositiveItemLabelPosition(0, itemLabelPosition12);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator14 = null;
        lineAndShapeRenderer10.setLegendItemToolTipGenerator(categorySeriesLabelGenerator14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        boolean boolean17 = lineAndShapeRenderer10.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition18 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        java.lang.Object obj19 = lineAndShapeRenderer10.clone();
        categoryPlot0.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer10, true);
        lineAndShapeRenderer10.clearSeriesPaints(false);
        try {
            lineAndShapeRenderer10.setSeriesShapesVisible((int) (byte) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition18);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test140() throws Throwable {
printRuntimeMSG("---RegressionTest1:test140");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test140");
        java.lang.Number number0 = null;
        org.jfree.data.SelectableValue selectableValue1 = new org.jfree.data.SelectableValue(number0);
        selectableValue1.setSelected(true);
        selectableValue1.setSelected(true);
        boolean boolean6 = selectableValue1.isSelected();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test141() throws Throwable {
printRuntimeMSG("---RegressionTest1:test141");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test141");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        float float11 = categoryPlot0.getForegroundAlpha();
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 1.0f + "'", float11 == 1.0f);
    }

    @Test
    public void test142() throws Throwable {
printRuntimeMSG("---RegressionTest1:test142");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test142");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        barRenderer0.setMinimumBarLength((double) 0.0f);
        double double13 = barRenderer0.getMinimumBarLength();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test143() throws Throwable {
printRuntimeMSG("---RegressionTest1:test143");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test143");
        org.jfree.chart.util.RectangleInsets rectangleInsets4 = new org.jfree.chart.util.RectangleInsets((double) 1, (double) (short) 0, (double) (-12566464), 2.0d);
        double double6 = rectangleInsets4.calculateBottomOutset((double) '4');
        double double8 = rectangleInsets4.calculateRightOutset((double) (short) 0);
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        try {
            rectangleInsets4.trim(rectangle2D9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.2566464E7d) + "'", double6 == (-1.2566464E7d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.0d + "'", double8 == 2.0d);
    }

    @Test
    public void test144() throws Throwable {
printRuntimeMSG("---RegressionTest1:test144");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test144");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset3 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj4 = abstractCategoryDataset3.clone();
        java.lang.Object obj5 = abstractCategoryDataset3.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes14 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        java.awt.Shape shape22 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer18.setBaseLegendShape(shape22);
        renderAttributes14.setSeriesShape((int) ' ', shape22);
        org.jfree.chart.entity.ChartEntity chartEntity26 = new org.jfree.chart.entity.ChartEntity(shape22, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color29 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem30 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color29);
        java.lang.String str31 = legendItem30.getToolTipText();
        java.awt.Stroke stroke32 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem30.setOutlineStroke(stroke32);
        java.awt.Shape shape38 = null;
        java.awt.Color color39 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color41 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape38, (java.awt.Paint) color39, stroke40, (java.awt.Paint) color41);
        java.lang.Class<?> wildcardClass43 = color39.getClass();
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape22, paint27, stroke32, (java.awt.Paint) color39);
        org.jfree.chart.entity.ChartEntity chartEntity45 = new org.jfree.chart.entity.ChartEntity(shape22);
        java.awt.Color color46 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape22, (java.awt.Paint) color46);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset50 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity53 = new org.jfree.chart.entity.CategoryItemEntity(shape22, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset50, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset3.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        int int56 = defaultCategoryDataset50.getRowCount();
        org.jfree.data.general.DatasetGroup datasetGroup57 = defaultCategoryDataset50.getGroup();
        try {
            defaultCategoryDataset50.removeColumn(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(shape22);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(datasetGroup57);
    }

    @Test
    public void test145() throws Throwable {
printRuntimeMSG("---RegressionTest1:test145");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test145");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Shape shape9 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX;
        legendItem8.setLine(shape9);
        java.awt.Paint paint11 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        legendItem8.setLabelPaint(paint11);
        legendItem8.setDatasetIndex(100);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(shape9);
        org.junit.Assert.assertNotNull(paint11);
    }

    @Test
    public void test146() throws Throwable {
printRuntimeMSG("---RegressionTest1:test146");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test146");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setCategoryMargin((double) 10.0f);
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        categoryPlot3.setParent((org.jfree.chart.plot.Plot) categoryPlot5);
        org.jfree.chart.LegendItemCollection legendItemCollection8 = categoryPlot3.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier9 = categoryPlot3.getDrawingSupplier();
        java.awt.Stroke stroke10 = categoryPlot3.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list12 = categoryPlot3.getCategoriesForAxis(categoryAxis11);
        boolean boolean13 = categoryPlot3.isDomainZoomable();
        java.awt.Paint paint14 = categoryPlot3.getBackgroundPaint();
        boolean boolean15 = categoryAxis0.hasListener((java.util.EventListener) categoryPlot3);
        org.jfree.chart.plot.CategoryMarker categoryMarker17 = null;
        org.jfree.chart.util.Layer layer18 = null;
        try {
            categoryPlot3.addDomainMarker(175, categoryMarker17, layer18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' not permitted.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNull(legendItemCollection8);
        org.junit.Assert.assertNotNull(drawingSupplier9);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test147() throws Throwable {
printRuntimeMSG("---RegressionTest1:test147");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test147");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        categoryItemEntity47.setRowKey((java.lang.Comparable) "SortOrder.ASCENDING");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
    }

    @Test
    public void test148() throws Throwable {
printRuntimeMSG("---RegressionTest1:test148");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test148");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Color color10 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        java.awt.Color color11 = java.awt.Color.getColor("hi!", color10);
        legendItem8.setOutlinePaint((java.awt.Paint) color10);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator16 = lineAndShapeRenderer15.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator20 = lineAndShapeRenderer15.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer15.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        boolean boolean24 = legendItem8.equals((java.lang.Object) (byte) 100);
        legendItem8.setSeriesKey((java.lang.Comparable) "GradientPaintTransformType.CENTER_VERTICAL");
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(color10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNull(categoryItemLabelGenerator16);
        org.junit.Assert.assertNull(categoryToolTipGenerator20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test149() throws Throwable {
printRuntimeMSG("---RegressionTest1:test149");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test149");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.Comparable comparable50 = null;
        try {
            defaultCategoryDataset44.addValue(0.0d, (java.lang.Comparable) "java.awt.Color[r=192,g=192,b=192]", comparable50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'columnKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
    }

    @Test
    public void test150() throws Throwable {
printRuntimeMSG("---RegressionTest1:test150");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test150");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        int int7 = categoryPlot0.getWeight();
        org.jfree.chart.plot.PlotOrientation plotOrientation8 = categoryPlot0.getOrientation();
        boolean boolean9 = categoryPlot0.isRangeCrosshairLockedOnData();
        categoryPlot0.mapDatasetToDomainAxis((int) (short) 0, (int) (byte) 100);
        org.jfree.chart.util.Layer layer13 = null;
        java.util.Collection collection14 = categoryPlot0.getRangeMarkers(layer13);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(plotOrientation8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(collection14);
    }

    @Test
    public void test151() throws Throwable {
printRuntimeMSG("---RegressionTest1:test151");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test151");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Shape shape6 = renderAttributes0.getItemShape((int) 'a', (int) ' ');
        java.awt.Paint paint7 = renderAttributes0.getDefaultFillPaint();
        java.awt.Shape shape8 = renderAttributes0.getDefaultShape();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(shape6);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNull(shape8);
    }

    @Test
    public void test152() throws Throwable {
printRuntimeMSG("---RegressionTest1:test152");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test152");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.KeyedObjects keyedObjects6 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes9 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects6.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation13 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation14 = axisLocation13.getOpposite();
        categoryPlot11.setDomainAxisLocation(axisLocation14, false);
        boolean boolean17 = categoryPlot11.canSelectByRegion();
        categoryPlot11.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot20 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo23 = null;
        java.awt.geom.Point2D point2D24 = null;
        categoryPlot20.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo23, point2D24);
        categoryPlot20.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder28 = categoryPlot20.getRowRenderingOrder();
        categoryPlot11.setRowRenderingOrder(sortOrder28);
        boolean boolean31 = sortOrder28.equals((java.lang.Object) 4);
        keyedObjects6.sortByObjects(sortOrder28);
        java.util.List list33 = keyedObjects6.getKeys();
        try {
            categoryPlot0.mapDatasetToRangeAxes((int) (byte) 1, list33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Indices must be Integer instances.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(axisLocation13);
        org.junit.Assert.assertNotNull(axisLocation14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(sortOrder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(list33);
    }

    @Test
    public void test153() throws Throwable {
printRuntimeMSG("---RegressionTest1:test153");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test153");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        boolean boolean13 = lineAndShapeRenderer2.getBaseSeriesVisible();
        lineAndShapeRenderer2.setSeriesItemLabelsVisible(5, (java.lang.Boolean) true, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test154() throws Throwable {
printRuntimeMSG("---RegressionTest1:test154");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test154");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator12 = lineAndShapeRenderer2.getToolTipGenerator((-1), (int) ' ', false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(categoryToolTipGenerator12);
    }

    @Test
    public void test155() throws Throwable {
printRuntimeMSG("---RegressionTest1:test155");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test155");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setMaximumBarWidth((double) 0L);
        java.awt.Font font15 = barRenderer0.getSeriesItemLabelFont((-8355712));
        double double16 = barRenderer0.getBase();
        barRenderer0.removeAnnotations();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNull(font15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test156() throws Throwable {
printRuntimeMSG("---RegressionTest1:test156");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test156");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        java.awt.Paint paint3 = categoryPlot0.getDomainCrosshairPaint();
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNotNull(paint3);
    }

    @Test
    public void test157() throws Throwable {
printRuntimeMSG("---RegressionTest1:test157");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test157");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        org.jfree.chart.event.PlotChangeListener plotChangeListener51 = null;
        categoryPlot0.removeChangeListener(plotChangeListener51);
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
    }

    @Test
    public void test158() throws Throwable {
printRuntimeMSG("---RegressionTest1:test158");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test158");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        categoryPlot0.setForegroundAlpha((float) '#');
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean18 = lineAndShapeRenderer12.getUseFillPaint();
        java.lang.Boolean boolean20 = lineAndShapeRenderer12.getSeriesItemLabelsVisible(0);
        categoryPlot0.setRenderer(3, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12, false);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation23 = null;
        try {
            lineAndShapeRenderer12.addAnnotation(categoryAnnotation23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'annotation' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test159() throws Throwable {
printRuntimeMSG("---RegressionTest1:test159");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test159");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        lineAndShapeRenderer2.setBaseShapesVisible(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
    }

    @Test
    public void test160() throws Throwable {
printRuntimeMSG("---RegressionTest1:test160");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test160");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, 0, plotRenderingInfo10, categoryCrosshairState11);
        boolean boolean13 = categoryPlot0.isDomainCrosshairVisible();
        int int14 = categoryPlot0.getWeight();
        org.jfree.chart.axis.ValueAxis valueAxis15 = null;
        try {
            int int16 = categoryPlot0.getRangeAxisIndex(valueAxis15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'axis' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test161() throws Throwable {
printRuntimeMSG("---RegressionTest1:test161");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test161");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        boolean boolean4 = categoryPlot0.isDomainGridlinesVisible();
        categoryPlot0.setRangeCrosshairVisible(false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test162() throws Throwable {
printRuntimeMSG("---RegressionTest1:test162");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test162");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setSeriesIndex((int) (byte) 10);
        legendItem8.setShapeVisible(true);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
    }

    @Test
    public void test163() throws Throwable {
printRuntimeMSG("---RegressionTest1:test163");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test163");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        boolean boolean11 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint();
        lineAndShapeRenderer2.setAutoPopulateSeriesFillPaint(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint16 = lineAndShapeRenderer2.lookupSeriesPaint((-8355712));
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        lineAndShapeRenderer19.setUseSeriesOffset(true);
        boolean boolean30 = lineAndShapeRenderer19.isSeriesVisibleInLegend((int) (byte) 1);
        org.jfree.chart.plot.CategoryPlot categoryPlot31 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke32 = categoryPlot31.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer33 = null;
        categoryPlot31.setRenderer(categoryItemRenderer33);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent35 = null;
        categoryPlot31.datasetChanged(datasetChangeEvent35);
        java.awt.Paint paint37 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray38 = new java.awt.Paint[] { paint37 };
        java.awt.Color color39 = java.awt.Color.BLUE;
        java.awt.Color color40 = java.awt.Color.RED;
        java.awt.Paint paint41 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray42 = new java.awt.Paint[] { color39, color40, paint41 };
        java.awt.Color color43 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel44 = null;
        java.awt.Rectangle rectangle45 = null;
        java.awt.geom.Rectangle2D rectangle2D46 = null;
        java.awt.geom.AffineTransform affineTransform47 = null;
        java.awt.RenderingHints renderingHints48 = null;
        java.awt.PaintContext paintContext49 = color43.createContext(colorModel44, rectangle45, rectangle2D46, affineTransform47, renderingHints48);
        java.awt.Color color50 = java.awt.Color.WHITE;
        java.awt.Color color51 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel52 = null;
        java.awt.Rectangle rectangle53 = null;
        java.awt.geom.Rectangle2D rectangle2D54 = null;
        java.awt.geom.AffineTransform affineTransform55 = null;
        java.awt.RenderingHints renderingHints56 = null;
        java.awt.PaintContext paintContext57 = color51.createContext(colorModel52, rectangle53, rectangle2D54, affineTransform55, renderingHints56);
        java.awt.Color color58 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray59 = new java.awt.Paint[] { color43, color50, color51, color58 };
        java.awt.Stroke stroke60 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke61 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke62 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke63 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke64 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray65 = new java.awt.Stroke[] { stroke60, stroke61, stroke62, stroke63, stroke64 };
        java.awt.Stroke stroke66 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke67 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot68 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke69 = categoryPlot68.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray70 = new java.awt.Stroke[] { stroke66, stroke67, stroke69 };
        java.awt.Shape shape71 = null;
        java.awt.Shape[] shapeArray72 = new java.awt.Shape[] { shape71 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier73 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray38, paintArray42, paintArray59, strokeArray65, strokeArray70, shapeArray72);
        java.awt.Paint paint74 = defaultDrawingSupplier73.getNextOutlinePaint();
        java.lang.Object obj75 = defaultDrawingSupplier73.clone();
        java.awt.Paint paint76 = defaultDrawingSupplier73.getNextOutlinePaint();
        categoryPlot31.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier73);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo79 = null;
        java.awt.geom.Point2D point2D80 = null;
        categoryPlot31.panDomainAxes((double) 0, plotRenderingInfo79, point2D80);
        java.awt.Color color82 = org.jfree.chart.ChartColor.DARK_RED;
        categoryPlot31.setRangeZeroBaselinePaint((java.awt.Paint) color82);
        lineAndShapeRenderer19.setBaseItemLabelPaint((java.awt.Paint) color82, true);
        lineAndShapeRenderer2.setBaseItemLabelPaint((java.awt.Paint) color82);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNotNull(paint16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(paint37);
        org.junit.Assert.assertNotNull(paintArray38);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(paint41);
        org.junit.Assert.assertNotNull(paintArray42);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(paintContext49);
        org.junit.Assert.assertNotNull(color50);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(paintContext57);
        org.junit.Assert.assertNotNull(color58);
        org.junit.Assert.assertNotNull(paintArray59);
        org.junit.Assert.assertNotNull(stroke60);
        org.junit.Assert.assertNotNull(stroke61);
        org.junit.Assert.assertNotNull(stroke62);
        org.junit.Assert.assertNotNull(stroke63);
        org.junit.Assert.assertNotNull(stroke64);
        org.junit.Assert.assertNotNull(strokeArray65);
        org.junit.Assert.assertNotNull(stroke66);
        org.junit.Assert.assertNotNull(stroke67);
        org.junit.Assert.assertNotNull(stroke69);
        org.junit.Assert.assertNotNull(strokeArray70);
        org.junit.Assert.assertNotNull(shapeArray72);
        org.junit.Assert.assertNotNull(paint74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(paint76);
        org.junit.Assert.assertNotNull(color82);
    }

    @Test
    public void test164() throws Throwable {
printRuntimeMSG("---RegressionTest1:test164");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test164");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        categoryPlot0.setRangeCrosshairVisible(false);
        org.jfree.chart.axis.AxisSpace axisSpace5 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.chart.util.Layer layer7 = null;
        java.util.Collection collection8 = categoryPlot0.getDomainMarkers((int) (byte) 1, layer7);
        categoryPlot0.setRangeCrosshairLockedOnData(true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(axisSpace5);
        org.junit.Assert.assertNull(collection8);
    }

    @Test
    public void test165() throws Throwable {
printRuntimeMSG("---RegressionTest1:test165");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test165");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        boolean boolean9 = lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        java.lang.Object obj11 = lineAndShapeRenderer2.clone();
        double double12 = lineAndShapeRenderer2.getItemMargin();
        double double13 = lineAndShapeRenderer2.getItemMargin();
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test166() throws Throwable {
printRuntimeMSG("---RegressionTest1:test166");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test166");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator23 = lineAndShapeRenderer22.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator24 = null;
        lineAndShapeRenderer22.setBaseToolTipGenerator(categoryToolTipGenerator24);
        java.awt.Paint paint27 = lineAndShapeRenderer22.lookupSeriesOutlinePaint((int) (byte) 1);
        java.awt.Font font28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer22.setBaseLegendTextFont(font28);
        categoryPlot10.setNoDataMessageFont(font28);
        org.jfree.chart.plot.CategoryPlot categoryPlot32 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke33 = categoryPlot32.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer34 = null;
        categoryPlot32.setRenderer(categoryItemRenderer34);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent36 = null;
        categoryPlot32.datasetChanged(datasetChangeEvent36);
        int int38 = categoryPlot32.getRangeAxisCount();
        java.util.List list39 = categoryPlot32.getAnnotations();
        try {
            categoryPlot10.mapDatasetToRangeAxes((int) ' ', list39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty list not permitted.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator23);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(font28);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(list39);
    }

    @Test
    public void test167() throws Throwable {
printRuntimeMSG("---RegressionTest1:test167");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test167");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        java.awt.Shape shape8 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer4.setBaseLegendShape(shape8);
        renderAttributes0.setSeriesShape((int) ' ', shape8);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean16 = lineAndShapeRenderer13.getBaseLinesVisible();
        java.awt.Shape shape17 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer13.setBaseLegendShape(shape17);
        renderAttributes0.setDefaultShape(shape17);
        org.jfree.chart.entity.ChartEntity chartEntity21 = new org.jfree.chart.entity.ChartEntity(shape17, "PlotOrientation.VERTICAL");
        org.jfree.chart.imagemap.ToolTipTagFragmentGenerator toolTipTagFragmentGenerator22 = null;
        org.jfree.chart.imagemap.URLTagFragmentGenerator uRLTagFragmentGenerator23 = null;
        try {
            java.lang.String str24 = chartEntity21.getImageMapAreaTag(toolTipTagFragmentGenerator22, uRLTagFragmentGenerator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(shape8);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shape17);
    }

    @Test
    public void test168() throws Throwable {
printRuntimeMSG("---RegressionTest1:test168");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test168");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Paint paint7 = lineAndShapeRenderer2.lookupSeriesFillPaint(255);
        boolean boolean8 = lineAndShapeRenderer2.getBaseCreateEntities();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test169() throws Throwable {
printRuntimeMSG("---RegressionTest1:test169");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test169");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getRangeAxisLocation((-12566464));
        org.jfree.chart.util.RectangleInsets rectangleInsets7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str8 = rectangleInsets7.toString();
        double double9 = rectangleInsets7.getTop();
        categoryPlot0.setAxisOffset(rectangleInsets7);
        org.jfree.chart.util.RectangleInsets rectangleInsets11 = null;
        try {
            categoryPlot0.setInsets(rectangleInsets11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'insets' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(rectangleInsets7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str8.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.0d + "'", double9 == 2.0d);
    }

    @Test
    public void test170() throws Throwable {
printRuntimeMSG("---RegressionTest1:test170");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test170");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        renderAttributes0.setSeriesShape(1, shape18);
        org.jfree.chart.plot.CategoryPlot categoryPlot43 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke44 = categoryPlot43.getRangeMinorGridlineStroke();
        boolean boolean45 = categoryPlot43.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity48 = new org.jfree.chart.entity.PlotEntity(shape18, (org.jfree.chart.plot.Plot) categoryPlot43, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        java.lang.String str49 = plotEntity48.getURLText();
        java.awt.Shape shape50 = plotEntity48.getArea();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "org.jfree.chart.event.ChartChangeEvent[source=-16777216]" + "'", str49.equals("org.jfree.chart.event.ChartChangeEvent[source=-16777216]"));
        org.junit.Assert.assertNotNull(shape50);
    }

    @Test
    public void test171() throws Throwable {
printRuntimeMSG("---RegressionTest1:test171");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test171");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        double double1 = categoryAxis0.getUpperMargin();
        java.awt.Font font3 = categoryAxis0.getTickLabelFont((java.lang.Comparable) 3);
        categoryAxis0.setLabel("");
        org.jfree.chart.plot.CategoryPlot categoryPlot8 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke9 = categoryPlot8.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation10 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation11 = axisLocation10.getOpposite();
        categoryPlot8.setDomainAxisLocation(axisLocation11, false);
        boolean boolean14 = categoryPlot8.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition20 = null;
        lineAndShapeRenderer18.setSeriesPositiveItemLabelPosition(0, itemLabelPosition20);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator22 = null;
        lineAndShapeRenderer18.setLegendItemToolTipGenerator(categorySeriesLabelGenerator22);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition24 = lineAndShapeRenderer18.getBasePositiveItemLabelPosition();
        boolean boolean25 = lineAndShapeRenderer18.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition26 = lineAndShapeRenderer18.getBasePositiveItemLabelPosition();
        java.lang.Object obj27 = lineAndShapeRenderer18.clone();
        categoryPlot8.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer18, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator30 = null;
        lineAndShapeRenderer18.setBaseURLGenerator(categoryURLGenerator30);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset32 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range33 = lineAndShapeRenderer18.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset32);
        int int35 = defaultCategoryDataset32.getColumnIndex((java.lang.Comparable) (-9.0d));
        java.awt.geom.Rectangle2D rectangle2D37 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot38 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke39 = categoryPlot38.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        categoryPlot38.setParent((org.jfree.chart.plot.Plot) categoryPlot40);
        org.jfree.chart.LegendItemCollection legendItemCollection43 = categoryPlot38.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent44 = null;
        categoryPlot38.axisChanged(axisChangeEvent44);
        org.jfree.chart.axis.AxisSpace axisSpace46 = categoryPlot38.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset47 = null;
        categoryPlot38.setDataset(categoryDataset47);
        java.awt.Stroke stroke49 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot38.setDomainCrosshairStroke(stroke49);
        java.awt.Stroke stroke51 = categoryPlot38.getRangeGridlineStroke();
        org.jfree.chart.util.RectangleEdge rectangleEdge52 = categoryPlot38.getRangeAxisEdge();
        try {
            double double53 = categoryAxis0.getCategorySeriesMiddle((java.lang.Comparable) "", (java.lang.Comparable) "SortOrder.ASCENDING", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset32, (double) (-1L), rectangle2D37, rectangleEdge52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.05d + "'", double1 == 0.05d);
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertNotNull(axisLocation10);
        org.junit.Assert.assertNotNull(axisLocation11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNull(legendItemCollection43);
        org.junit.Assert.assertNull(axisSpace46);
        org.junit.Assert.assertNotNull(stroke49);
        org.junit.Assert.assertNotNull(stroke51);
        org.junit.Assert.assertNotNull(rectangleEdge52);
    }

    @Test
    public void test172() throws Throwable {
printRuntimeMSG("---RegressionTest1:test172");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test172");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setMinorTickMarkInsideLength((float) (-12566464));
        org.jfree.chart.axis.CategoryAnchor categoryAnchor20 = org.jfree.chart.axis.CategoryAnchor.START;
        java.lang.String str21 = categoryAnchor20.toString();
        java.awt.geom.Rectangle2D rectangle2D24 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke26 = categoryPlot25.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot27 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke28 = categoryPlot27.getRangeMinorGridlineStroke();
        categoryPlot25.setParent((org.jfree.chart.plot.Plot) categoryPlot27);
        org.jfree.chart.LegendItemCollection legendItemCollection30 = categoryPlot25.getFixedLegendItems();
        java.lang.Comparable comparable31 = categoryPlot25.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge32 = categoryPlot25.getRangeAxisEdge();
        try {
            double double33 = categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor20, (-8355712), 15, rectangle2D24, rectangleEdge32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(categoryAnchor20);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "CategoryAnchor.START" + "'", str21.equals("CategoryAnchor.START"));
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNull(legendItemCollection30);
        org.junit.Assert.assertNull(comparable31);
        org.junit.Assert.assertNotNull(rectangleEdge32);
    }

    @Test
    public void test173() throws Throwable {
printRuntimeMSG("---RegressionTest1:test173");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test173");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        java.awt.Font font11 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        categoryPlot0.setNoDataMessageFont(font11);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent13 = null;
        categoryPlot0.markerChanged(markerChangeEvent13);
        boolean boolean15 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(font11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test174() throws Throwable {
printRuntimeMSG("---RegressionTest1:test174");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test174");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        int int6 = categoryPlot0.getRangeAxisCount();
        java.util.List list7 = categoryPlot0.getAnnotations();
        categoryPlot0.setForegroundAlpha((float) 49);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(list7);
    }

    @Test
    public void test175() throws Throwable {
printRuntimeMSG("---RegressionTest1:test175");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test175");
        int int3 = java.awt.Color.HSBtoRGB((float) 3, (float) 100L, (float) '4');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-739) + "'", int3 == (-739));
    }

    @Test
    public void test176() throws Throwable {
printRuntimeMSG("---RegressionTest1:test176");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test176");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.awt.color.ColorSpace colorSpace4 = color2.getColorSpace();
        keyedObjects2D0.addObject((java.lang.Object) colorSpace4, (java.lang.Comparable) (-4.0d), (java.lang.Comparable) (-4.0d));
        org.jfree.chart.plot.CategoryPlot categoryPlot8 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke9 = categoryPlot8.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer10 = null;
        categoryPlot8.setRenderer(categoryItemRenderer10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot8);
        categoryPlot8.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D15 = null;
        java.awt.geom.Rectangle2D rectangle2D16 = null;
        categoryPlot8.drawBackgroundImage(graphics2D15, rectangle2D16);
        org.jfree.chart.plot.Plot plot18 = categoryPlot8.getRootPlot();
        boolean boolean19 = keyedObjects2D0.equals((java.lang.Object) plot18);
        java.awt.Shape shape24 = null;
        java.awt.Color color25 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color27 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem28 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape24, (java.awt.Paint) color25, stroke26, (java.awt.Paint) color27);
        java.awt.Paint paint29 = legendItem28.getLabelPaint();
        java.lang.String str30 = legendItem28.getURLText();
        java.awt.Shape shape31 = legendItem28.getShape();
        boolean boolean32 = legendItem28.isShapeOutlineVisible();
        legendItem28.setDatasetIndex((int) '4');
        keyedObjects2D0.addObject((java.lang.Object) '4', (java.lang.Comparable) 4.0d, (java.lang.Comparable) (short) 0);
        try {
            keyedObjects2D0.removeColumn((-16777216));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertNotNull(plot18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNull(paint29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str30.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNull(shape31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test177() throws Throwable {
printRuntimeMSG("---RegressionTest1:test177");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test177");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.calculateTopOutset((double) ' ');
        java.awt.geom.Rectangle2D rectangle2D5 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D6 = rectangleInsets0.createOutsetRectangle(rectangle2D5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.0d + "'", double4 == 2.0d);
    }

    @Test
    public void test178() throws Throwable {
printRuntimeMSG("---RegressionTest1:test178");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test178");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        categoryPlot0.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot9.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo12, point2D13);
        categoryPlot9.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder17 = categoryPlot9.getRowRenderingOrder();
        categoryPlot0.setRowRenderingOrder(sortOrder17);
        boolean boolean20 = sortOrder17.equals((java.lang.Object) 4);
        java.lang.String str21 = sortOrder17.toString();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "SortOrder.ASCENDING" + "'", str21.equals("SortOrder.ASCENDING"));
    }

    @Test
    public void test179() throws Throwable {
printRuntimeMSG("---RegressionTest1:test179");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test179");
        org.jfree.data.SelectableValue selectableValue1 = new org.jfree.data.SelectableValue((java.lang.Number) (short) -1);
        selectableValue1.setSelected(true);
    }

    @Test
    public void test180() throws Throwable {
printRuntimeMSG("---RegressionTest1:test180");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test180");
        java.awt.Stroke stroke0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_STROKE;
        org.junit.Assert.assertNotNull(stroke0);
    }

    @Test
    public void test181() throws Throwable {
printRuntimeMSG("---RegressionTest1:test181");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test181");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        java.awt.Paint paint9 = categoryPlot0.getRangeZeroBaselinePaint();
        categoryPlot0.setRangeCrosshairValue((double) (short) 0, true);
        categoryPlot0.setBackgroundImageAlpha((float) (byte) 1);
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertNotNull(paint9);
    }

    @Test
    public void test182() throws Throwable {
printRuntimeMSG("---RegressionTest1:test182");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test182");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        java.awt.Paint paint12 = lineAndShapeRenderer3.lookupSeriesOutlinePaint(0);
        org.jfree.chart.LegendItem legendItem13 = new org.jfree.chart.LegendItem("AxisLocation.BOTTOM_OR_RIGHT", paint12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(paint12);
    }

    @Test
    public void test183() throws Throwable {
printRuntimeMSG("---RegressionTest1:test183");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test183");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        lineAndShapeRenderer2.clearSeriesStrokes(false);
        int int10 = lineAndShapeRenderer2.getRowCount();
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false);
        java.awt.Stroke stroke13 = lineAndShapeRenderer2.getBaseStroke();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = null;
        lineAndShapeRenderer17.setSeriesPositiveItemLabelPosition(0, itemLabelPosition19);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator21 = null;
        lineAndShapeRenderer17.setLegendItemToolTipGenerator(categorySeriesLabelGenerator21);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition23 = lineAndShapeRenderer17.getBasePositiveItemLabelPosition();
        boolean boolean24 = lineAndShapeRenderer17.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition25 = lineAndShapeRenderer17.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition((int) (byte) 1, itemLabelPosition25);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(itemLabelPosition23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition25);
    }

    @Test
    public void test184() throws Throwable {
printRuntimeMSG("---RegressionTest1:test184");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test184");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Shape shape9 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX;
        legendItem8.setLine(shape9);
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer13 = null;
        categoryPlot11.setRenderer(categoryItemRenderer13);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent15 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot11);
        org.jfree.data.category.CategoryDataset categoryDataset16 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis17 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis17.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis20 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator24 = lineAndShapeRenderer23.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot(categoryDataset16, categoryAxis17, valueAxis20, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer23);
        java.util.List list26 = categoryPlot11.getCategoriesForAxis(categoryAxis17);
        java.awt.Color color27 = org.jfree.chart.ChartColor.DARK_GREEN;
        categoryAxis17.setTickMarkPaint((java.awt.Paint) color27);
        int int29 = color27.getAlpha();
        legendItem8.setOutlinePaint((java.awt.Paint) color27);
        int int31 = color27.getAlpha();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(shape9);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNull(categoryItemLabelGenerator24);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 255 + "'", int29 == 255);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 255 + "'", int31 == 255);
    }

    @Test
    public void test185() throws Throwable {
printRuntimeMSG("---RegressionTest1:test185");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test185");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint9 = lineAndShapeRenderer2.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent22 = null;
        categoryPlot16.axisChanged(axisChangeEvent22);
        org.jfree.chart.axis.AxisSpace axisSpace24 = categoryPlot16.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset25 = null;
        categoryPlot16.setDataset(categoryDataset25);
        java.awt.Stroke stroke27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot16.setDomainCrosshairStroke(stroke27);
        java.awt.Stroke stroke29 = categoryPlot16.getRangeGridlineStroke();
        lineAndShapeRenderer13.setBaseStroke(stroke29);
        lineAndShapeRenderer2.setBaseStroke(stroke29, false);
        java.lang.Boolean boolean34 = lineAndShapeRenderer2.getSeriesLinesVisible(0);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(axisSpace24);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNull(boolean34);
    }

    @Test
    public void test186() throws Throwable {
printRuntimeMSG("---RegressionTest1:test186");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test186");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        double double10 = barRenderer0.getMaximumBarWidth();
        java.awt.Paint paint11 = barRenderer0.getBaseItemLabelPaint();
        boolean boolean12 = barRenderer0.getDataBoundsIncludesVisibleSeriesOnly();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test187() throws Throwable {
printRuntimeMSG("---RegressionTest1:test187");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test187");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer2.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean12 = lineAndShapeRenderer2.getBaseShapesVisible();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-8355712));
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer17 = null;
        categoryPlot15.setRenderer(categoryItemRenderer17);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent19 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot15);
        org.jfree.data.category.CategoryDataset categoryDataset20 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis21 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis21.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis24 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator28 = lineAndShapeRenderer27.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot29 = new org.jfree.chart.plot.CategoryPlot(categoryDataset20, categoryAxis21, valueAxis24, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer27);
        java.util.List list30 = categoryPlot15.getCategoriesForAxis(categoryAxis21);
        lineAndShapeRenderer2.addChangeListener((org.jfree.chart.event.RendererChangeListener) categoryPlot15);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator33 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) (short) 10, categoryURLGenerator33);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition14);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator28);
        org.junit.Assert.assertNotNull(list30);
    }

    @Test
    public void test188() throws Throwable {
printRuntimeMSG("---RegressionTest1:test188");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test188");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE6;
        org.jfree.chart.text.TextAnchor textAnchor1 = org.jfree.chart.text.TextAnchor.TOP_CENTER;
        org.jfree.chart.text.TextAnchor textAnchor2 = org.jfree.chart.text.TextAnchor.TOP_CENTER;
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = new org.jfree.chart.labels.ItemLabelPosition(itemLabelAnchor0, textAnchor1, textAnchor2, (double) 100.0f);
        boolean boolean6 = itemLabelPosition4.equals((java.lang.Object) "DatasetRenderingOrder.FORWARD");
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
        org.junit.Assert.assertNotNull(textAnchor1);
        org.junit.Assert.assertNotNull(textAnchor2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test189() throws Throwable {
printRuntimeMSG("---RegressionTest1:test189");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test189");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        int int1 = defaultCategoryDataset0.getRowCount();
        try {
            defaultCategoryDataset0.removeRow((java.lang.Comparable) "");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key () not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test190() throws Throwable {
printRuntimeMSG("---RegressionTest1:test190");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test190");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets2 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double3 = rectangleInsets2.getRight();
        double double5 = rectangleInsets2.calculateTopInset(0.0d);
        categoryAxis0.setLabelInsets(rectangleInsets2, false);
        double double9 = rectangleInsets2.trimHeight((-9.0d));
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNotNull(rectangleInsets2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.0d + "'", double3 == 4.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-13.0d) + "'", double9 == (-13.0d));
    }

    @Test
    public void test191() throws Throwable {
printRuntimeMSG("---RegressionTest1:test191");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test191");
        try {
            java.awt.Color color1 = java.awt.Color.decode("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]\"");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test192() throws Throwable {
printRuntimeMSG("---RegressionTest1:test192");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test192");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_LIGHT_BLUE;
        org.junit.Assert.assertNotNull(color0);
    }

    @Test
    public void test193() throws Throwable {
printRuntimeMSG("---RegressionTest1:test193");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test193");
        org.jfree.data.SelectableValue selectableValue1 = new org.jfree.data.SelectableValue((java.lang.Number) (byte) -1);
        boolean boolean2 = selectableValue1.isSelected();
        java.lang.Number number3 = selectableValue1.getValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + number3 + "' != '" + (byte) -1 + "'", number3.equals((byte) -1));
    }

    @Test
    public void test194() throws Throwable {
printRuntimeMSG("---RegressionTest1:test194");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test194");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getLegendItems();
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier6 = new org.jfree.chart.plot.DefaultDrawingSupplier();
        categoryPlot0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier6, false);
        categoryPlot0.setOutlineVisible(true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(legendItemCollection5);
    }

    @Test
    public void test195() throws Throwable {
printRuntimeMSG("---RegressionTest1:test195");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test195");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent12 = null;
        lineAndShapeRenderer2.notifyListeners(rendererChangeEvent12);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator15 = null;
        try {
            lineAndShapeRenderer2.setSeriesURLGenerator((-12566464), categoryURLGenerator15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test196() throws Throwable {
printRuntimeMSG("---RegressionTest1:test196");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test196");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        int int6 = categoryPlot0.getRangeAxisCount();
        java.util.List list7 = categoryPlot0.getAnnotations();
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNull(axisSpace8);
    }

    @Test
    public void test197() throws Throwable {
printRuntimeMSG("---RegressionTest1:test197");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test197");
        org.jfree.chart.util.ObjectList objectList0 = new org.jfree.chart.util.ObjectList();
        java.lang.Object obj1 = objectList0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes6 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer10.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean13 = lineAndShapeRenderer10.getBaseLinesVisible();
        java.awt.Shape shape14 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer10.setBaseLegendShape(shape14);
        renderAttributes6.setSeriesShape((int) ' ', shape14);
        org.jfree.chart.entity.ChartEntity chartEntity18 = new org.jfree.chart.entity.ChartEntity(shape14, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint19 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color21 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color21);
        java.lang.String str23 = legendItem22.getToolTipText();
        java.awt.Stroke stroke24 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem22.setOutlineStroke(stroke24);
        java.awt.Shape shape30 = null;
        java.awt.Color color31 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color33 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape30, (java.awt.Paint) color31, stroke32, (java.awt.Paint) color33);
        java.lang.Class<?> wildcardClass35 = color31.getClass();
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape14, paint19, stroke24, (java.awt.Paint) color31);
        boolean boolean37 = objectList0.equals((java.lang.Object) "SortOrder.ASCENDING");
        java.lang.Object obj39 = objectList0.get((int) (byte) 100);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(shape14);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test198() throws Throwable {
printRuntimeMSG("---RegressionTest1:test198");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test198");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo13, point2D14);
        int int16 = categoryPlot0.getRangeAxisCount();
        boolean boolean17 = categoryPlot0.isRangeGridlinesVisible();
        float float18 = categoryPlot0.getForegroundAlpha();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
    }

    @Test
    public void test199() throws Throwable {
printRuntimeMSG("---RegressionTest1:test199");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test199");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.chart.plot.CategoryMarker categoryMarker6 = null;
        org.jfree.chart.util.Layer layer7 = null;
        try {
            categoryPlot0.addDomainMarker((-8355712), categoryMarker6, layer7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' not permitted.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test200() throws Throwable {
printRuntimeMSG("---RegressionTest1:test200");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test200");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        boolean boolean11 = defaultCategoryDataset0.equals((java.lang.Object) false);
        java.lang.Object obj12 = defaultCategoryDataset0.clone();
        defaultCategoryDataset0.fireSelectionEvent();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test201() throws Throwable {
printRuntimeMSG("---RegressionTest1:test201");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test201");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        org.jfree.chart.axis.AxisLocation axisLocation9 = categoryPlot2.getDomainAxisLocation(0);
        categoryPlot2.setRangeCrosshairValue(96.0d, true);
        org.jfree.chart.axis.AxisSpace axisSpace13 = null;
        categoryPlot2.setFixedRangeAxisSpace(axisSpace13);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(axisLocation9);
    }

    @Test
    public void test202() throws Throwable {
printRuntimeMSG("---RegressionTest1:test202");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test202");
        try {
            java.util.ResourceBundle resourceBundle1 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("AxisLocation.BOTTOM_OR_RIGHT");
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Can't find bundle for base name AxisLocation.BOTTOM_OR_RIGHT, locale en_US");
        } catch (java.util.MissingResourceException e) {
        }
    }

    @Test
    public void test203() throws Throwable {
printRuntimeMSG("---RegressionTest1:test203");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test203");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        boolean boolean11 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint();
        lineAndShapeRenderer2.setAutoPopulateSeriesFillPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        java.lang.Boolean boolean17 = lineAndShapeRenderer2.getSeriesItemLabelsVisible(5);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test204() throws Throwable {
printRuntimeMSG("---RegressionTest1:test204");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test204");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        double double14 = categoryAxis11.getLabelAngle();
        org.jfree.chart.util.RectangleInsets rectangleInsets15 = categoryAxis11.getLabelInsets();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(rectangleInsets15);
    }

    @Test
    public void test205() throws Throwable {
printRuntimeMSG("---RegressionTest1:test205");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test205");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.awt.Font font10 = lineAndShapeRenderer2.getSeriesItemLabelFont((int) (short) 1);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator11 = lineAndShapeRenderer2.getLegendItemLabelGenerator();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator13 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) ' ', categoryURLGenerator13, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(categorySeriesLabelGenerator11);
    }

    @Test
    public void test206() throws Throwable {
printRuntimeMSG("---RegressionTest1:test206");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test206");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        boolean boolean11 = categoryPlot0.isRangeCrosshairVisible();
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        org.jfree.chart.RenderingSource renderingSource15 = null;
        categoryPlot0.select((double) 0.5f, (double) (-1), rectangle2D14, renderingSource15);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test207() throws Throwable {
printRuntimeMSG("---RegressionTest1:test207");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test207");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.chart.plot.CategoryPlot categoryPlot6 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke7 = categoryPlot6.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis8 = null;
        categoryPlot6.setRangeAxis(valueAxis8);
        org.jfree.chart.util.RectangleEdge rectangleEdge10 = categoryPlot6.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation12 = categoryPlot6.getRangeAxisLocation((-12566464));
        categoryPlot0.setDomainAxisLocation(axisLocation12);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(rectangleEdge10);
        org.junit.Assert.assertNotNull(axisLocation12);
    }

    @Test
    public void test208() throws Throwable {
printRuntimeMSG("---RegressionTest1:test208");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test208");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator17 = lineAndShapeRenderer12.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer12.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer12.setBaseOutlinePaint(paint21);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition26 = lineAndShapeRenderer12.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer0.setBaseNegativeItemLabelPosition(itemLabelPosition26);
        double double28 = itemLabelPosition26.getAngle();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNull(categoryToolTipGenerator17);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(itemLabelPosition26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test209() throws Throwable {
printRuntimeMSG("---RegressionTest1:test209");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test209");
        org.jfree.chart.util.PaintList paintList0 = new org.jfree.chart.util.PaintList();
        java.awt.Paint paint2 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        paintList0.setPaint((int) (short) 10, paint2);
        org.junit.Assert.assertNotNull(paint2);
    }

    @Test
    public void test210() throws Throwable {
printRuntimeMSG("---RegressionTest1:test210");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test210");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        barRenderer0.setAutoPopulateSeriesOutlineStroke(true);
        barRenderer0.setShadowVisible(true);
        boolean boolean11 = barRenderer0.getAutoPopulateSeriesShape();
        org.jfree.chart.renderer.category.BarRenderer barRenderer12 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint13 = barRenderer12.getShadowPaint();
        boolean boolean14 = barRenderer12.getBaseSeriesVisible();
        double double15 = barRenderer12.getMinimumBarLength();
        org.jfree.chart.LegendItem legendItem18 = barRenderer12.getLegendItem(0, (int) (short) 100);
        org.jfree.chart.renderer.category.BarPainter barPainter19 = barRenderer12.getBarPainter();
        barRenderer0.setBarPainter(barPainter19);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNull(legendItem18);
        org.junit.Assert.assertNotNull(barPainter19);
    }

    @Test
    public void test211() throws Throwable {
printRuntimeMSG("---RegressionTest1:test211");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test211");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint2 = renderAttributes0.getSeriesPaint((int) (short) 0);
        java.awt.Paint paint3 = renderAttributes0.getDefaultLabelPaint();
        java.lang.Boolean boolean4 = renderAttributes0.getDefaultCreateEntity();
        org.junit.Assert.assertNull(paint2);
        org.junit.Assert.assertNull(paint3);
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test212() throws Throwable {
printRuntimeMSG("---RegressionTest1:test212");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test212");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        barRenderer0.setBaseItemLabelsVisible(true);
        java.awt.Paint paint5 = null;
        try {
            barRenderer0.setSeriesItemLabelPaint((int) (byte) -1, paint5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
    }

    @Test
    public void test213() throws Throwable {
printRuntimeMSG("---RegressionTest1:test213");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test213");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        categoryPlot0.setWeight((int) (byte) 1);
        org.jfree.data.category.CategoryDataset categoryDataset10 = null;
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = categoryPlot0.getRendererForDataset(categoryDataset10);
        org.jfree.chart.axis.AxisLocation axisLocation12 = categoryPlot0.getRangeAxisLocation();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier13 = categoryPlot0.getDrawingSupplier();
        org.junit.Assert.assertNull(categoryItemRenderer11);
        org.junit.Assert.assertNotNull(axisLocation12);
        org.junit.Assert.assertNotNull(drawingSupplier13);
    }

    @Test
    public void test214() throws Throwable {
printRuntimeMSG("---RegressionTest1:test214");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test214");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        barRenderer0.setBaseSeriesVisibleInLegend(true);
        double double14 = barRenderer0.getBase();
        barRenderer0.setShadowYOffset((double) 15);
        barRenderer0.setShadowVisible(true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test215() throws Throwable {
printRuntimeMSG("---RegressionTest1:test215");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test215");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        double double11 = categoryAxis1.getFixedDimension();
        java.lang.Object obj12 = categoryAxis1.clone();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        categoryPlot13.setParent((org.jfree.chart.plot.Plot) categoryPlot15);
        categoryAxis1.addChangeListener((org.jfree.chart.event.AxisChangeListener) categoryPlot15);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent19 = null;
        categoryPlot15.markerChanged(markerChangeEvent19);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(stroke16);
    }

    @Test
    public void test216() throws Throwable {
printRuntimeMSG("---RegressionTest1:test216");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test216");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType5 = plotChangeEvent4.getType();
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType6 = plotChangeEvent4.getType();
        org.jfree.chart.JFreeChart jFreeChart7 = plotChangeEvent4.getChart();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(chartChangeEventType5);
        org.junit.Assert.assertNotNull(chartChangeEventType6);
        org.junit.Assert.assertNull(jFreeChart7);
    }

    @Test
    public void test217() throws Throwable {
printRuntimeMSG("---RegressionTest1:test217");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test217");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.awt.Font font10 = lineAndShapeRenderer2.getSeriesItemLabelFont((int) (short) 1);
        org.jfree.chart.renderer.RenderAttributes renderAttributes16 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean22 = lineAndShapeRenderer20.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean23 = lineAndShapeRenderer20.getBaseLinesVisible();
        java.awt.Shape shape24 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer20.setBaseLegendShape(shape24);
        renderAttributes16.setSeriesShape((int) ' ', shape24);
        org.jfree.chart.entity.ChartEntity chartEntity28 = new org.jfree.chart.entity.ChartEntity(shape24, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color31 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem32 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color31);
        java.lang.String str33 = legendItem32.getToolTipText();
        java.awt.Stroke stroke34 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem32.setOutlineStroke(stroke34);
        java.awt.Shape shape40 = null;
        java.awt.Color color41 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke42 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color43 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape40, (java.awt.Paint) color41, stroke42, (java.awt.Paint) color43);
        java.lang.Class<?> wildcardClass45 = color41.getClass();
        org.jfree.chart.LegendItem legendItem46 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape24, paint29, stroke34, (java.awt.Paint) color41);
        lineAndShapeRenderer2.setSeriesFillPaint((int) (short) 100, (java.awt.Paint) color41, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shape24);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test218() throws Throwable {
printRuntimeMSG("---RegressionTest1:test218");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test218");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        java.awt.Graphics2D graphics2D11 = null;
        java.awt.geom.Rectangle2D rectangle2D12 = null;
        org.jfree.data.category.CategoryDataset categoryDataset13 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis14 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis14.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis17 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator21 = lineAndShapeRenderer20.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot22 = new org.jfree.chart.plot.CategoryPlot(categoryDataset13, categoryAxis14, valueAxis17, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer20);
        org.jfree.chart.axis.ValueAxis valueAxis23 = null;
        org.jfree.data.Range range24 = categoryPlot22.getDataRange(valueAxis23);
        categoryPlot22.setWeight((int) 'a');
        java.awt.Graphics2D graphics2D27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo30 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState31 = null;
        boolean boolean32 = categoryPlot22.render(graphics2D27, rectangle2D28, 0, plotRenderingInfo30, categoryCrosshairState31);
        org.jfree.chart.axis.CategoryAxis categoryAxis33 = null;
        org.jfree.chart.axis.ValueAxis valueAxis34 = null;
        org.jfree.data.category.CategoryDataset categoryDataset35 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer41 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator42 = lineAndShapeRenderer41.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator46 = lineAndShapeRenderer41.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font47 = lineAndShapeRenderer41.getBaseLegendTextFont();
        java.lang.Boolean boolean49 = lineAndShapeRenderer41.getSeriesShapesVisible((int) (short) 10);
        boolean boolean50 = lineAndShapeRenderer41.getAutoPopulateSeriesOutlinePaint();
        lineAndShapeRenderer41.setAutoPopulateSeriesFillPaint(false);
        java.awt.Graphics2D graphics2D53 = null;
        java.awt.geom.Rectangle2D rectangle2D54 = null;
        org.jfree.chart.util.UnitType unitType55 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot56 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke57 = categoryPlot56.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot58 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke59 = categoryPlot58.getRangeMinorGridlineStroke();
        categoryPlot56.setParent((org.jfree.chart.plot.Plot) categoryPlot58);
        org.jfree.chart.LegendItemCollection legendItemCollection61 = categoryPlot56.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier62 = categoryPlot56.getDrawingSupplier();
        java.awt.Stroke stroke63 = categoryPlot56.getOutlineStroke();
        boolean boolean64 = unitType55.equals((java.lang.Object) categoryPlot56);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset65 = new org.jfree.data.category.DefaultCategoryDataset();
        defaultCategoryDataset65.fireSelectionEvent();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo67 = null;
        org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState68 = lineAndShapeRenderer41.initialise(graphics2D53, rectangle2D54, categoryPlot56, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset65, plotRenderingInfo67);
        try {
            boolean boolean69 = lineAndShapeRenderer2.hitTest((-1.2566468E7d), 0.0d, graphics2D11, rectangle2D12, categoryPlot22, categoryAxis33, valueAxis34, categoryDataset35, 15, (int) (short) 0, false, categoryItemRendererState68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator21);
        org.junit.Assert.assertNull(range24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator42);
        org.junit.Assert.assertNull(categoryToolTipGenerator46);
        org.junit.Assert.assertNull(font47);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(unitType55);
        org.junit.Assert.assertNotNull(stroke57);
        org.junit.Assert.assertNotNull(stroke59);
        org.junit.Assert.assertNull(legendItemCollection61);
        org.junit.Assert.assertNotNull(drawingSupplier62);
        org.junit.Assert.assertNotNull(stroke63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(categoryItemRendererState68);
    }

    @Test
    public void test219() throws Throwable {
printRuntimeMSG("---RegressionTest1:test219");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test219");
        java.awt.Color color1 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem2 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color1);
        java.lang.String str3 = legendItem2.getDescription();
        java.awt.Color color5 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem6 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color5);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer7 = legendItem6.getFillPaintTransformer();
        legendItem2.setFillPaintTransformer(gradientPaintTransformer7);
        org.junit.Assert.assertNotNull(color1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(gradientPaintTransformer7);
    }

    @Test
    public void test220() throws Throwable {
printRuntimeMSG("---RegressionTest1:test220");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test220");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint11 = lineAndShapeRenderer2.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        lineAndShapeRenderer2.setDrawOutlines(true);
        org.jfree.chart.axis.AxisLocation axisLocation14 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator15 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        boolean boolean16 = axisLocation14.equals((java.lang.Object) standardCategorySeriesLabelGenerator15);
        lineAndShapeRenderer2.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator15);
        int int18 = lineAndShapeRenderer2.getDefaultEntityRadius();
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator19 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(axisLocation14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNull(categoryItemLabelGenerator19);
    }

    @Test
    public void test221() throws Throwable {
printRuntimeMSG("---RegressionTest1:test221");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test221");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        float float3 = categoryAxis0.getMinorTickMarkInsideLength();
        categoryAxis0.setMinorTickMarkInsideLength(100.0f);
        java.awt.Paint paint6 = categoryAxis0.getTickMarkPaint();
        org.jfree.chart.axis.CategoryAxis categoryAxis7 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint8 = categoryAxis7.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double10 = rectangleInsets9.getRight();
        double double12 = rectangleInsets9.calculateTopInset(0.0d);
        categoryAxis7.setLabelInsets(rectangleInsets9, false);
        java.lang.String str15 = rectangleInsets9.toString();
        categoryAxis0.setTickLabelInsets(rectangleInsets9);
        categoryAxis0.setLowerMargin((double) (-1L));
        float float19 = categoryAxis0.getMaximumCategoryLabelWidthRatio();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNotNull(paint8);
        org.junit.Assert.assertNotNull(rectangleInsets9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.0d + "'", double10 == 4.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2.0d + "'", double12 == 2.0d);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str15.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
    }

    @Test
    public void test222() throws Throwable {
printRuntimeMSG("---RegressionTest1:test222");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test222");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        categoryPlot0.setRangeZeroBaselineVisible(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = categoryPlot0.getRenderer((int) (byte) -1);
        java.awt.Color color12 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        categoryPlot0.setDomainCrosshairPaint((java.awt.Paint) color12);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean17 = lineAndShapeRenderer16.getUseOutlinePaint();
        categoryPlot0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer16);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation19 = null;
        boolean boolean20 = lineAndShapeRenderer16.removeAnnotation(categoryAnnotation19);
        org.jfree.chart.renderer.RenderAttributes renderAttributes22 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint23 = renderAttributes22.getDefaultLabelPaint();
        java.awt.Paint paint26 = renderAttributes22.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes32 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        java.awt.Shape shape40 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer36.setBaseLegendShape(shape40);
        renderAttributes32.setSeriesShape((int) ' ', shape40);
        org.jfree.chart.entity.ChartEntity chartEntity44 = new org.jfree.chart.entity.ChartEntity(shape40, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint45 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color47 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem48 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color47);
        java.lang.String str49 = legendItem48.getToolTipText();
        java.awt.Stroke stroke50 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem48.setOutlineStroke(stroke50);
        java.awt.Shape shape56 = null;
        java.awt.Color color57 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke58 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color59 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem60 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape56, (java.awt.Paint) color57, stroke58, (java.awt.Paint) color59);
        java.lang.Class<?> wildcardClass61 = color57.getClass();
        org.jfree.chart.LegendItem legendItem62 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape40, paint45, stroke50, (java.awt.Paint) color57);
        org.jfree.chart.entity.ChartEntity chartEntity63 = new org.jfree.chart.entity.ChartEntity(shape40);
        renderAttributes22.setSeriesShape(1, shape40);
        lineAndShapeRenderer16.setSeriesShape(5, shape40, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNull(categoryItemRenderer11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(paint23);
        org.junit.Assert.assertNull(paint26);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(shape40);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNotNull(color47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(color57);
        org.junit.Assert.assertNotNull(stroke58);
        org.junit.Assert.assertNotNull(color59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test223() throws Throwable {
printRuntimeMSG("---RegressionTest1:test223");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test223");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        java.awt.Font font12 = lineAndShapeRenderer2.getSeriesItemLabelFont(5);
        boolean boolean15 = lineAndShapeRenderer2.getItemShapeFilled((int) '4', (-15935));
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(font12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test224() throws Throwable {
printRuntimeMSG("---RegressionTest1:test224");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test224");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        double double10 = barRenderer0.getMaximumBarWidth();
        java.awt.Stroke stroke12 = barRenderer0.lookupSeriesStroke((-1));
        java.awt.Paint paint13 = barRenderer0.getShadowPaint();
        barRenderer0.setBaseItemLabelsVisible(false, false);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator17 = barRenderer0.getBaseToolTipGenerator();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNull(categoryToolTipGenerator17);
    }

    @Test
    public void test225() throws Throwable {
printRuntimeMSG("---RegressionTest1:test225");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test225");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        categoryPlot0.setForegroundAlpha((float) (-1));
        org.jfree.data.category.CategoryDataset categoryDataset16 = categoryPlot0.getDataset();
        java.awt.Paint paint17 = categoryPlot0.getDomainCrosshairPaint();
        org.jfree.chart.axis.ValueAxis valueAxis19 = null;
        categoryPlot0.setRangeAxis(4, valueAxis19);
        boolean boolean21 = categoryPlot0.isRangeCrosshairVisible();
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation22 = null;
        try {
            boolean boolean23 = categoryPlot0.removeAnnotation(categoryAnnotation22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'annotation' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(categoryDataset16);
        org.junit.Assert.assertNotNull(paint17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test226() throws Throwable {
printRuntimeMSG("---RegressionTest1:test226");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test226");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation14 = categoryPlot0.getRangeAxisLocation();
        java.awt.Paint paint15 = null;
        try {
            categoryPlot0.setDomainCrosshairPaint(paint15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'paint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(axisLocation14);
    }

    @Test
    public void test227() throws Throwable {
printRuntimeMSG("---RegressionTest1:test227");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test227");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        categoryPlot11.setParent((org.jfree.chart.plot.Plot) categoryPlot13);
        org.jfree.chart.plot.Plot plot16 = categoryPlot11.getParent();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer19.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint29 = lineAndShapeRenderer19.getBaseItemLabelPaint();
        categoryPlot11.setRangeMinorGridlinePaint(paint29);
        lineAndShapeRenderer2.removeChangeListener((org.jfree.chart.event.RendererChangeListener) categoryPlot11);
        int int32 = categoryPlot11.getCrosshairDatasetIndex();
        categoryPlot11.setRangeMinorGridlinesVisible(true);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(plot16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test228() throws Throwable {
printRuntimeMSG("---RegressionTest1:test228");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test228");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        org.jfree.chart.renderer.category.BarPainter barPainter11 = barRenderer0.getBarPainter();
        java.lang.Boolean boolean13 = barRenderer0.getSeriesVisibleInLegend(100);
        barRenderer0.setShadowVisible(false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(barPainter11);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test229() throws Throwable {
printRuntimeMSG("---RegressionTest1:test229");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test229");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        int int4 = color2.getTransparency();
        int int5 = color2.getGreen();
        java.awt.Color color6 = org.jfree.chart.ChartColor.LIGHT_YELLOW;
        java.awt.Color color7 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color8 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace9 = color8.getColorSpace();
        float[] floatArray16 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray17 = color7.getColorComponents(colorSpace9, floatArray16);
        float[] floatArray18 = color6.getComponents(floatArray16);
        float[] floatArray19 = color2.getComponents(floatArray16);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(color6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(colorSpace9);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray19);
    }

    @Test
    public void test230() throws Throwable {
printRuntimeMSG("---RegressionTest1:test230");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test230");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = barRenderer0.getPositiveItemLabelPositionFallback();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNull(itemLabelPosition12);
    }

    @Test
    public void test231() throws Throwable {
printRuntimeMSG("---RegressionTest1:test231");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test231");
        try {
            java.util.ResourceBundle resourceBundle1 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("NOID");
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Can't find bundle for base name NOID, locale en_US");
        } catch (java.util.MissingResourceException e) {
        }
    }

    @Test
    public void test232() throws Throwable {
printRuntimeMSG("---RegressionTest1:test232");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test232");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        double double12 = barRenderer0.getMinimumBarLength();
        double double13 = barRenderer0.getMinimumBarLength();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test233() throws Throwable {
printRuntimeMSG("---RegressionTest1:test233");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test233");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        categoryPlot0.setDrawSharedDomainAxis(true);
        org.jfree.chart.axis.ValueAxis valueAxis8 = categoryPlot0.getRangeAxis();
        org.jfree.chart.util.Layer layer10 = null;
        java.util.Collection collection11 = categoryPlot0.getDomainMarkers((int) (short) -1, layer10);
        org.jfree.chart.plot.Marker marker13 = null;
        org.jfree.chart.util.Layer layer14 = null;
        try {
            boolean boolean16 = categoryPlot0.removeRangeMarker((int) (byte) 1, marker13, layer14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(valueAxis8);
        org.junit.Assert.assertNull(collection11);
    }

    @Test
    public void test234() throws Throwable {
printRuntimeMSG("---RegressionTest1:test234");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test234");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        categoryAxis0.setFixedDimension((double) 1);
        categoryAxis0.setTickLabelsVisible(true);
        org.junit.Assert.assertNotNull(paint1);
    }

    @Test
    public void test235() throws Throwable {
printRuntimeMSG("---RegressionTest1:test235");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test235");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_DARK_BLUE;
        org.junit.Assert.assertNotNull(color0);
    }

    @Test
    public void test236() throws Throwable {
printRuntimeMSG("---RegressionTest1:test236");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test236");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        categoryPlot0.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot9.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo12, point2D13);
        categoryPlot9.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder17 = categoryPlot9.getRowRenderingOrder();
        categoryPlot0.setRowRenderingOrder(sortOrder17);
        double double19 = categoryPlot0.getRangeCrosshairValue();
        org.jfree.chart.util.SortOrder sortOrder20 = categoryPlot0.getColumnRenderingOrder();
        org.jfree.chart.plot.Marker marker21 = null;
        org.jfree.chart.util.Layer layer22 = null;
        try {
            categoryPlot0.addRangeMarker(marker21, layer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(sortOrder20);
    }

    @Test
    public void test237() throws Throwable {
printRuntimeMSG("---RegressionTest1:test237");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test237");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Graphics2D graphics2D6 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        java.awt.geom.Point2D point2D11 = null;
        categoryPlot7.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo10, point2D11);
        org.jfree.chart.axis.AxisSpace axisSpace13 = null;
        categoryPlot7.setFixedRangeAxisSpace(axisSpace13, true);
        org.jfree.chart.axis.ValueAxis valueAxis16 = null;
        org.jfree.chart.plot.Marker marker17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        lineAndShapeRenderer2.drawRangeMarker(graphics2D6, categoryPlot7, valueAxis16, marker17, rectangle2D18);
        categoryPlot7.setDomainCrosshairVisible(false);
        org.jfree.chart.util.Layer layer22 = null;
        java.util.Collection collection23 = categoryPlot7.getDomainMarkers(layer22);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(collection23);
    }

    @Test
    public void test238() throws Throwable {
printRuntimeMSG("---RegressionTest1:test238");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test238");
        java.awt.Paint paint0 = org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT;
        org.junit.Assert.assertNotNull(paint0);
    }

    @Test
    public void test239() throws Throwable {
printRuntimeMSG("---RegressionTest1:test239");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test239");
        org.jfree.chart.util.GradientPaintTransformType gradientPaintTransformType0 = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
        org.jfree.chart.util.StandardGradientPaintTransformer standardGradientPaintTransformer1 = new org.jfree.chart.util.StandardGradientPaintTransformer(gradientPaintTransformType0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer4.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        java.lang.Boolean boolean12 = lineAndShapeRenderer4.getSeriesShapesFilled((int) (short) 1);
        boolean boolean13 = standardGradientPaintTransformer1.equals((java.lang.Object) (short) 1);
        java.lang.Object obj14 = standardGradientPaintTransformer1.clone();
        java.lang.Object obj15 = standardGradientPaintTransformer1.clone();
        java.lang.Object obj16 = standardGradientPaintTransformer1.clone();
        org.junit.Assert.assertNotNull(gradientPaintTransformType0);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test240() throws Throwable {
printRuntimeMSG("---RegressionTest1:test240");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test240");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        org.jfree.chart.renderer.RenderAttributes renderAttributes15 = barRenderer0.getSelectedItemAttributes();
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer18 = null;
        categoryPlot16.setRenderer(categoryItemRenderer18);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent20 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot16);
        categoryPlot16.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D23 = null;
        java.awt.geom.Rectangle2D rectangle2D24 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo26 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState27 = null;
        boolean boolean28 = categoryPlot16.render(graphics2D23, rectangle2D24, 0, plotRenderingInfo26, categoryCrosshairState27);
        boolean boolean29 = categoryPlot16.isDomainCrosshairVisible();
        boolean boolean30 = barRenderer0.hasListener((java.util.EventListener) categoryPlot16);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(renderAttributes15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test241() throws Throwable {
printRuntimeMSG("---RegressionTest1:test241");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test241");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE1;
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
    }

    @Test
    public void test242() throws Throwable {
printRuntimeMSG("---RegressionTest1:test242");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test242");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        java.lang.Comparable comparable8 = null;
        categoryPlot2.setDomainCrosshairRowKey(comparable8, false);
        categoryPlot2.setDomainCrosshairVisible(false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
    }

    @Test
    public void test243() throws Throwable {
printRuntimeMSG("---RegressionTest1:test243");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test243");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, 0, plotRenderingInfo10, categoryCrosshairState11);
        boolean boolean13 = categoryPlot0.isDomainCrosshairVisible();
        int int14 = categoryPlot0.getWeight();
        java.awt.Paint paint15 = categoryPlot0.getRangeZeroBaselinePaint();
        float float16 = categoryPlot0.getBackgroundImageAlpha();
        try {
            org.jfree.chart.axis.ValueAxis valueAxis18 = categoryPlot0.getRangeAxisForDataset((-10));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative 'index'.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.5f + "'", float16 == 0.5f);
    }

    @Test
    public void test244() throws Throwable {
printRuntimeMSG("---RegressionTest1:test244");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test244");
        org.jfree.chart.util.ShapeList shapeList0 = new org.jfree.chart.util.ShapeList();
        org.jfree.chart.util.StrokeList strokeList1 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator5 = lineAndShapeRenderer4.getBaseItemLabelGenerator();
        java.awt.Paint paint7 = lineAndShapeRenderer4.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator9 = lineAndShapeRenderer4.getSeriesURLGenerator(0);
        boolean boolean10 = strokeList1.equals((java.lang.Object) categoryURLGenerator9);
        java.awt.Stroke stroke12 = strokeList1.getStroke((-12566464));
        strokeList1.clear();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        categoryPlot15.setParent((org.jfree.chart.plot.Plot) categoryPlot17);
        org.jfree.chart.LegendItemCollection legendItemCollection20 = categoryPlot15.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent21 = null;
        categoryPlot15.axisChanged(axisChangeEvent21);
        org.jfree.chart.axis.AxisSpace axisSpace23 = categoryPlot15.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset24 = null;
        categoryPlot15.setDataset(categoryDataset24);
        java.awt.Stroke stroke26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot15.setDomainCrosshairStroke(stroke26);
        java.awt.Stroke stroke28 = categoryPlot15.getRangeGridlineStroke();
        strokeList1.setStroke((int) '#', stroke28);
        boolean boolean30 = shapeList0.equals((java.lang.Object) '#');
        java.lang.Object obj31 = shapeList0.clone();
        org.junit.Assert.assertNull(categoryItemLabelGenerator5);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertNull(categoryURLGenerator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(stroke12);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertNull(legendItemCollection20);
        org.junit.Assert.assertNull(axisSpace23);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test245() throws Throwable {
printRuntimeMSG("---RegressionTest1:test245");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test245");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setCategoryMargin((double) 10.0f);
        java.awt.Stroke stroke4 = categoryAxis1.getAxisLineStroke();
        renderAttributes0.setDefaultStroke(stroke4);
        org.junit.Assert.assertNotNull(stroke4);
    }

    @Test
    public void test246() throws Throwable {
printRuntimeMSG("---RegressionTest1:test246");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test246");
        java.awt.Shape shape4 = null;
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Color color7 = java.awt.Color.RED;
        renderAttributes5.setDefaultOutlinePaint((java.awt.Paint) color7);
        int int9 = color7.getTransparency();
        int int10 = color7.getGreen();
        org.jfree.chart.LegendItem legendItem11 = new org.jfree.chart.LegendItem("RectangleInsets[t=1.0,l=1.0,b=1.0,r=1.0]", "DatasetRenderingOrder.FORWARD", "", "4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0", shape4, (java.awt.Paint) color7);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test247() throws Throwable {
printRuntimeMSG("---RegressionTest1:test247");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test247");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint12 = renderAttributes11.getDefaultLabelPaint();
        java.awt.Paint paint15 = renderAttributes11.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes21 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean27 = lineAndShapeRenderer25.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean28 = lineAndShapeRenderer25.getBaseLinesVisible();
        java.awt.Shape shape29 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer25.setBaseLegendShape(shape29);
        renderAttributes21.setSeriesShape((int) ' ', shape29);
        org.jfree.chart.entity.ChartEntity chartEntity33 = new org.jfree.chart.entity.ChartEntity(shape29, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color36 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem37 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color36);
        java.lang.String str38 = legendItem37.getToolTipText();
        java.awt.Stroke stroke39 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem37.setOutlineStroke(stroke39);
        java.awt.Shape shape45 = null;
        java.awt.Color color46 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color48 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape45, (java.awt.Paint) color46, stroke47, (java.awt.Paint) color48);
        java.lang.Class<?> wildcardClass50 = color46.getClass();
        org.jfree.chart.LegendItem legendItem51 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape29, paint34, stroke39, (java.awt.Paint) color46);
        org.jfree.chart.entity.ChartEntity chartEntity52 = new org.jfree.chart.entity.ChartEntity(shape29);
        renderAttributes11.setSeriesShape(1, shape29);
        org.jfree.chart.plot.CategoryPlot categoryPlot54 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke55 = categoryPlot54.getRangeMinorGridlineStroke();
        boolean boolean56 = categoryPlot54.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity59 = new org.jfree.chart.entity.PlotEntity(shape29, (org.jfree.chart.plot.Plot) categoryPlot54, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.chart.entity.PlotEntity plotEntity60 = new org.jfree.chart.entity.PlotEntity(shape10, (org.jfree.chart.plot.Plot) categoryPlot54);
        categoryPlot54.setRangeCrosshairVisible(true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNull(paint15);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(shape29);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test248() throws Throwable {
printRuntimeMSG("---RegressionTest1:test248");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test248");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition2 = barRenderer0.getPositiveItemLabelPositionFallback();
        org.jfree.chart.util.UnitType unitType4 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke8 = categoryPlot7.getRangeMinorGridlineStroke();
        categoryPlot5.setParent((org.jfree.chart.plot.Plot) categoryPlot7);
        org.jfree.chart.LegendItemCollection legendItemCollection10 = categoryPlot5.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier11 = categoryPlot5.getDrawingSupplier();
        java.awt.Stroke stroke12 = categoryPlot5.getOutlineStroke();
        boolean boolean13 = unitType4.equals((java.lang.Object) categoryPlot5);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo16 = null;
        java.awt.geom.Point2D point2D17 = null;
        categoryPlot5.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo16, point2D17);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean23 = lineAndShapeRenderer21.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean24 = lineAndShapeRenderer21.getBaseLinesVisible();
        java.awt.Shape shape25 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer21.setBaseLegendShape(shape25);
        java.awt.Color color27 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer21.setBaseOutlinePaint((java.awt.Paint) color27, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition34 = null;
        lineAndShapeRenderer32.setSeriesPositiveItemLabelPosition(0, itemLabelPosition34);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition37 = lineAndShapeRenderer32.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean38 = lineAndShapeRenderer32.getUseFillPaint();
        lineAndShapeRenderer32.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke41 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer32.setBaseStroke(stroke41, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray44 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer21, lineAndShapeRenderer32 };
        categoryPlot5.setRenderers(categoryItemRendererArray44);
        java.awt.Paint paint46 = categoryPlot5.getRangeZeroBaselinePaint();
        barRenderer0.setSeriesFillPaint(0, paint46, false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(itemLabelPosition2);
        org.junit.Assert.assertNotNull(unitType4);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNull(legendItemCollection10);
        org.junit.Assert.assertNotNull(drawingSupplier11);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(shape25);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(itemLabelPosition37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(categoryItemRendererArray44);
        org.junit.Assert.assertNotNull(paint46);
    }

    @Test
    public void test249() throws Throwable {
printRuntimeMSG("---RegressionTest1:test249");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test249");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.util.List list27 = keyedObjects0.getKeys();
        int int29 = keyedObjects0.getIndex((java.lang.Comparable) 0.0d);
        keyedObjects0.clear();
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test250() throws Throwable {
printRuntimeMSG("---RegressionTest1:test250");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test250");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.axis.ValueAxis valueAxis10 = null;
        org.jfree.data.Range range11 = categoryPlot9.getDataRange(valueAxis10);
        categoryPlot9.setWeight((int) 'a');
        java.awt.Graphics2D graphics2D14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState18 = null;
        boolean boolean19 = categoryPlot9.render(graphics2D14, rectangle2D15, 0, plotRenderingInfo17, categoryCrosshairState18);
        categoryPlot9.clearDomainMarkers();
        org.jfree.chart.axis.AxisLocation axisLocation21 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT;
        categoryPlot9.setDomainAxisLocation(axisLocation21, true);
        org.jfree.chart.axis.AxisSpace axisSpace24 = categoryPlot9.getFixedDomainAxisSpace();
        java.lang.Comparable comparable25 = categoryPlot9.getDomainCrosshairRowKey();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(axisLocation21);
        org.junit.Assert.assertNull(axisSpace24);
        org.junit.Assert.assertNull(comparable25);
    }

    @Test
    public void test251() throws Throwable {
printRuntimeMSG("---RegressionTest1:test251");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test251");
        org.jfree.chart.renderer.RenderAttributes renderAttributes1 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Stroke stroke2 = renderAttributes1.getDefaultOutlineStroke();
        java.awt.Shape shape5 = renderAttributes1.getItemShape((int) (byte) 1, (int) (byte) 1);
        java.awt.Paint paint6 = org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT;
        renderAttributes1.setDefaultPaint(paint6);
        java.awt.Paint paint9 = renderAttributes1.getSeriesPaint(100);
        org.junit.Assert.assertNull(stroke2);
        org.junit.Assert.assertNull(shape5);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNull(paint9);
    }

    @Test
    public void test252() throws Throwable {
printRuntimeMSG("---RegressionTest1:test252");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test252");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.plot.Plot plot5 = plotChangeEvent4.getPlot();
        java.awt.Graphics2D graphics2D6 = null;
        java.awt.geom.Rectangle2D rectangle2D7 = null;
        plot5.drawBackgroundImage(graphics2D6, rectangle2D7);
        java.awt.Image image9 = plot5.getBackgroundImage();
        java.awt.Graphics2D graphics2D10 = null;
        java.awt.geom.Rectangle2D rectangle2D11 = null;
        try {
            plot5.drawOutline(graphics2D10, rectangle2D11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plot5);
        org.junit.Assert.assertNull(image9);
    }

    @Test
    public void test253() throws Throwable {
printRuntimeMSG("---RegressionTest1:test253");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test253");
        java.awt.Shape shape0 = null;
        org.jfree.chart.plot.Plot plot1 = null;
        try {
            org.jfree.chart.entity.PlotEntity plotEntity4 = new org.jfree.chart.entity.PlotEntity(shape0, plot1, "", "ItemLabelAnchor.OUTSIDE9");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'area' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test254() throws Throwable {
printRuntimeMSG("---RegressionTest1:test254");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test254");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getRangeAxisLocation((-12566464));
        org.jfree.chart.util.RectangleInsets rectangleInsets7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str8 = rectangleInsets7.toString();
        double double9 = rectangleInsets7.getTop();
        categoryPlot0.setAxisOffset(rectangleInsets7);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot0.panRangeAxes((double) 128, plotRenderingInfo12, point2D13);
        categoryPlot0.setRangeCrosshairValue((double) (short) 1);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(rectangleInsets7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str8.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.0d + "'", double9 == 2.0d);
    }

    @Test
    public void test255() throws Throwable {
printRuntimeMSG("---RegressionTest1:test255");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test255");
        java.awt.Paint paint0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray1 = new java.awt.Paint[] { paint0 };
        java.awt.Color color2 = java.awt.Color.BLUE;
        java.awt.Color color3 = java.awt.Color.RED;
        java.awt.Paint paint4 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray5 = new java.awt.Paint[] { color2, color3, paint4 };
        java.awt.Color color6 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel7 = null;
        java.awt.Rectangle rectangle8 = null;
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        java.awt.geom.AffineTransform affineTransform10 = null;
        java.awt.RenderingHints renderingHints11 = null;
        java.awt.PaintContext paintContext12 = color6.createContext(colorModel7, rectangle8, rectangle2D9, affineTransform10, renderingHints11);
        java.awt.Color color13 = java.awt.Color.WHITE;
        java.awt.Color color14 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel15 = null;
        java.awt.Rectangle rectangle16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        java.awt.geom.AffineTransform affineTransform18 = null;
        java.awt.RenderingHints renderingHints19 = null;
        java.awt.PaintContext paintContext20 = color14.createContext(colorModel15, rectangle16, rectangle2D17, affineTransform18, renderingHints19);
        java.awt.Color color21 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray22 = new java.awt.Paint[] { color6, color13, color14, color21 };
        java.awt.Stroke stroke23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke24 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke25 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray28 = new java.awt.Stroke[] { stroke23, stroke24, stroke25, stroke26, stroke27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot31 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke32 = categoryPlot31.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray33 = new java.awt.Stroke[] { stroke29, stroke30, stroke32 };
        java.awt.Shape shape34 = null;
        java.awt.Shape[] shapeArray35 = new java.awt.Shape[] { shape34 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier36 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray1, paintArray5, paintArray22, strokeArray28, strokeArray33, shapeArray35);
        java.awt.Shape shape37 = defaultDrawingSupplier36.getNextShape();
        java.awt.Stroke stroke38 = defaultDrawingSupplier36.getNextOutlineStroke();
        java.awt.Paint paint39 = defaultDrawingSupplier36.getNextOutlinePaint();
        org.junit.Assert.assertNotNull(paint0);
        org.junit.Assert.assertNotNull(paintArray1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNotNull(paint4);
        org.junit.Assert.assertNotNull(paintArray5);
        org.junit.Assert.assertNotNull(color6);
        org.junit.Assert.assertNotNull(paintContext12);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertNotNull(paintContext20);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNotNull(paintArray22);
        org.junit.Assert.assertNotNull(stroke23);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(stroke25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(strokeArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(strokeArray33);
        org.junit.Assert.assertNotNull(shapeArray35);
        org.junit.Assert.assertNull(shape37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(paint39);
    }

    @Test
    public void test256() throws Throwable {
printRuntimeMSG("---RegressionTest1:test256");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test256");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setForegroundAlpha((float) 100);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        try {
            categoryPlot2.drawBackground(graphics2D7, rectangle2D8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
    }

    @Test
    public void test257() throws Throwable {
printRuntimeMSG("---RegressionTest1:test257");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test257");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        java.awt.Shape shape50 = null;
        java.awt.Color color51 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke52 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color53 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape50, (java.awt.Paint) color51, stroke52, (java.awt.Paint) color53);
        java.awt.Paint paint55 = legendItem54.getFillPaint();
        java.awt.Font font56 = legendItem54.getLabelFont();
        legendItem54.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer59 = legendItem54.getFillPaintTransformer();
        boolean boolean60 = plotEntity33.equals((java.lang.Object) legendItem54);
        java.lang.Object obj61 = plotEntity33.clone();
        java.lang.String str62 = plotEntity33.getToolTipText();
        java.lang.String str63 = plotEntity33.getShapeType();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(color53);
        org.junit.Assert.assertNotNull(paint55);
        org.junit.Assert.assertNull(font56);
        org.junit.Assert.assertNotNull(gradientPaintTransformer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "rect" + "'", str63.equals("rect"));
    }

    @Test
    public void test258() throws Throwable {
printRuntimeMSG("---RegressionTest1:test258");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test258");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        keyedObjects0.clear();
        int int6 = keyedObjects0.getItemCount();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test259() throws Throwable {
printRuntimeMSG("---RegressionTest1:test259");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test259");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint2 = renderAttributes0.getSeriesPaint(10);
        java.awt.Paint paint4 = renderAttributes0.getSeriesPaint((int) (byte) 1);
        java.lang.Boolean boolean5 = renderAttributes0.getDefaultLabelVisible();
        java.awt.Paint paint7 = renderAttributes0.getSeriesOutlinePaint((int) (byte) -1);
        org.junit.Assert.assertNull(paint2);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(paint7);
    }

    @Test
    public void test260() throws Throwable {
printRuntimeMSG("---RegressionTest1:test260");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test260");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.util.List list27 = keyedObjects0.getKeys();
        int int29 = keyedObjects0.getIndex((java.lang.Comparable) 0.0d);
        java.lang.Object obj30 = keyedObjects0.clone();
        try {
            java.lang.Object obj32 = keyedObjects0.getObject(49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 49, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test261() throws Throwable {
printRuntimeMSG("---RegressionTest1:test261");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test261");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        org.jfree.chart.axis.ValueAxis valueAxis7 = categoryPlot0.getRangeAxis();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo9 = null;
        java.awt.geom.Point2D point2D10 = null;
        categoryPlot0.panRangeAxes((double) 100L, plotRenderingInfo9, point2D10);
        java.awt.Stroke stroke12 = null;
        try {
            categoryPlot0.setDomainCrosshairStroke(stroke12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'stroke' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(valueAxis7);
    }

    @Test
    public void test262() throws Throwable {
printRuntimeMSG("---RegressionTest1:test262");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test262");
        java.awt.Color color0 = java.awt.Color.cyan;
        org.junit.Assert.assertNotNull(color0);
    }

    @Test
    public void test263() throws Throwable {
printRuntimeMSG("---RegressionTest1:test263");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test263");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        lineAndShapeRenderer7.setBaseShapesFilled(false);
        lineAndShapeRenderer7.setSeriesShapesVisible((int) (short) 0, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test264() throws Throwable {
printRuntimeMSG("---RegressionTest1:test264");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test264");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        java.awt.Font font7 = lineAndShapeRenderer2.getLegendTextFont((int) (short) 10);
        java.awt.Font font11 = lineAndShapeRenderer2.getItemLabelFont(0, (int) (short) 100, false);
        org.junit.Assert.assertNull(font7);
        org.junit.Assert.assertNotNull(font11);
    }

    @Test
    public void test265() throws Throwable {
printRuntimeMSG("---RegressionTest1:test265");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test265");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        java.awt.Paint paint3 = categoryPlot0.getRangeCrosshairPaint();
        categoryPlot0.setRangeZeroBaselineVisible(false);
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getDomainAxisLocation();
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertNotNull(axisLocation6);
    }

    @Test
    public void test266() throws Throwable {
printRuntimeMSG("---RegressionTest1:test266");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test266");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        java.lang.Boolean boolean9 = lineAndShapeRenderer2.getSeriesLinesVisible((int) (short) 100);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test267() throws Throwable {
printRuntimeMSG("---RegressionTest1:test267");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test267");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        defaultCategoryDataset47.addValue((java.lang.Number) (-8355712), (java.lang.Comparable) '4', (java.lang.Comparable) 2.0d);
        defaultCategoryDataset47.addValue((java.lang.Number) 100, (java.lang.Comparable) 100.0d, (java.lang.Comparable) 192);
        try {
            defaultCategoryDataset47.removeRow(128);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 128, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
    }

    @Test
    public void test268() throws Throwable {
printRuntimeMSG("---RegressionTest1:test268");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test268");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        int int10 = categoryPlot9.getWeight();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test269() throws Throwable {
printRuntimeMSG("---RegressionTest1:test269");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test269");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.lang.String str13 = categoryAxis1.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions14 = categoryAxis1.getCategoryLabelPositions();
        categoryAxis1.addCategoryLabelToolTip((java.lang.Comparable) (-4.0d), "DatasetRenderingOrder.FORWARD");
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(categoryLabelPositions14);
    }

    @Test
    public void test270() throws Throwable {
printRuntimeMSG("---RegressionTest1:test270");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test270");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset3 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj4 = abstractCategoryDataset3.clone();
        java.lang.Object obj5 = abstractCategoryDataset3.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes14 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        java.awt.Shape shape22 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer18.setBaseLegendShape(shape22);
        renderAttributes14.setSeriesShape((int) ' ', shape22);
        org.jfree.chart.entity.ChartEntity chartEntity26 = new org.jfree.chart.entity.ChartEntity(shape22, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color29 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem30 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color29);
        java.lang.String str31 = legendItem30.getToolTipText();
        java.awt.Stroke stroke32 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem30.setOutlineStroke(stroke32);
        java.awt.Shape shape38 = null;
        java.awt.Color color39 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color41 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape38, (java.awt.Paint) color39, stroke40, (java.awt.Paint) color41);
        java.lang.Class<?> wildcardClass43 = color39.getClass();
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape22, paint27, stroke32, (java.awt.Paint) color39);
        org.jfree.chart.entity.ChartEntity chartEntity45 = new org.jfree.chart.entity.ChartEntity(shape22);
        java.awt.Color color46 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape22, (java.awt.Paint) color46);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset50 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity53 = new org.jfree.chart.entity.CategoryItemEntity(shape22, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset50, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset3.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        int int56 = defaultCategoryDataset50.getRowCount();
        try {
            java.lang.Number number59 = defaultCategoryDataset50.getValue((-16777216), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(shape22);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test271() throws Throwable {
printRuntimeMSG("---RegressionTest1:test271");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test271");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowXOffset((double) '4');
        java.awt.Graphics2D graphics2D14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        categoryPlot18.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        org.jfree.chart.axis.AxisLocation axisLocation25 = categoryPlot18.getDomainAxisLocation(0);
        categoryPlot18.setRangeCrosshairValue(96.0d, true);
        categoryPlot18.setRangeZeroBaselineVisible(true);
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset31 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj32 = abstractCategoryDataset31.clone();
        java.lang.Object obj33 = abstractCategoryDataset31.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset34 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj35 = abstractCategoryDataset34.clone();
        java.lang.Object obj36 = abstractCategoryDataset34.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes45 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer49 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean51 = lineAndShapeRenderer49.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean52 = lineAndShapeRenderer49.getBaseLinesVisible();
        java.awt.Shape shape53 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer49.setBaseLegendShape(shape53);
        renderAttributes45.setSeriesShape((int) ' ', shape53);
        org.jfree.chart.entity.ChartEntity chartEntity57 = new org.jfree.chart.entity.ChartEntity(shape53, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint58 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color60 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem61 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color60);
        java.lang.String str62 = legendItem61.getToolTipText();
        java.awt.Stroke stroke63 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem61.setOutlineStroke(stroke63);
        java.awt.Shape shape69 = null;
        java.awt.Color color70 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke71 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color72 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem73 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape69, (java.awt.Paint) color70, stroke71, (java.awt.Paint) color72);
        java.lang.Class<?> wildcardClass74 = color70.getClass();
        org.jfree.chart.LegendItem legendItem75 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape53, paint58, stroke63, (java.awt.Paint) color70);
        org.jfree.chart.entity.ChartEntity chartEntity76 = new org.jfree.chart.entity.ChartEntity(shape53);
        java.awt.Color color77 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem78 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape53, (java.awt.Paint) color77);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset81 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity84 = new org.jfree.chart.entity.CategoryItemEntity(shape53, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset81, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset34.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset81);
        abstractCategoryDataset31.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset81);
        int int87 = defaultCategoryDataset81.getRowCount();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo88 = null;
        try {
            org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState89 = barRenderer0.initialise(graphics2D14, rectangle2D15, categoryPlot18, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset81, plotRenderingInfo88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative 'index'.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNotNull(axisLocation25);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(shape53);
        org.junit.Assert.assertNotNull(paint58);
        org.junit.Assert.assertNotNull(color60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(stroke63);
        org.junit.Assert.assertNotNull(color70);
        org.junit.Assert.assertNotNull(stroke71);
        org.junit.Assert.assertNotNull(color72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(color77);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test272() throws Throwable {
printRuntimeMSG("---RegressionTest1:test272");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test272");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        categoryPlot0.setNoDataMessage("");
        org.jfree.chart.axis.AxisLocation axisLocation7 = categoryPlot0.getDomainAxisLocation(128);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation7);
    }

    @Test
    public void test273() throws Throwable {
printRuntimeMSG("---RegressionTest1:test273");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test273");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition15 = null;
        lineAndShapeRenderer13.setSeriesPositiveItemLabelPosition(0, itemLabelPosition15);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator17 = null;
        lineAndShapeRenderer13.setLegendItemToolTipGenerator(categorySeriesLabelGenerator17);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer13.getBasePositiveItemLabelPosition();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition23 = lineAndShapeRenderer13.getNegativeItemLabelPosition((int) (short) -1, (int) (short) -1, false);
        lineAndShapeRenderer2.setBasePositiveItemLabelPosition(itemLabelPosition23);
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = lineAndShapeRenderer2.getPlot();
        org.jfree.chart.plot.CategoryPlot categoryPlot27 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke28 = categoryPlot27.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot29 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke30 = categoryPlot29.getRangeMinorGridlineStroke();
        categoryPlot27.setParent((org.jfree.chart.plot.Plot) categoryPlot29);
        org.jfree.chart.LegendItemCollection legendItemCollection32 = categoryPlot27.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent33 = null;
        categoryPlot27.axisChanged(axisChangeEvent33);
        org.jfree.chart.axis.AxisSpace axisSpace35 = categoryPlot27.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset36 = null;
        categoryPlot27.setDataset(categoryDataset36);
        java.awt.Font font38 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        categoryPlot27.setNoDataMessageFont(font38);
        try {
            lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) -1, font38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(itemLabelPosition23);
        org.junit.Assert.assertNull(categoryPlot25);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNull(legendItemCollection32);
        org.junit.Assert.assertNull(axisSpace35);
        org.junit.Assert.assertNotNull(font38);
    }

    @Test
    public void test274() throws Throwable {
printRuntimeMSG("---RegressionTest1:test274");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test274");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator4 = lineAndShapeRenderer3.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator8 = lineAndShapeRenderer3.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer3.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean13 = lineAndShapeRenderer3.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator15 = null;
        lineAndShapeRenderer3.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator15);
        java.awt.Color color18 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color19 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace20 = color19.getColorSpace();
        float[] floatArray27 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray28 = color18.getColorComponents(colorSpace20, floatArray27);
        int int29 = color18.getBlue();
        int int30 = color18.getAlpha();
        lineAndShapeRenderer3.setSeriesItemLabelPaint(1, (java.awt.Paint) color18);
        java.awt.Color color32 = java.awt.Color.getColor("ItemLabelAnchor.INSIDE5", color18);
        java.awt.color.ColorSpace colorSpace33 = color18.getColorSpace();
        org.junit.Assert.assertNull(categoryItemLabelGenerator4);
        org.junit.Assert.assertNull(categoryToolTipGenerator8);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(colorSpace20);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 128 + "'", int29 == 128);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 255 + "'", int30 == 255);
        org.junit.Assert.assertNotNull(color32);
        org.junit.Assert.assertNotNull(colorSpace33);
    }

    @Test
    public void test275() throws Throwable {
printRuntimeMSG("---RegressionTest1:test275");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test275");
        try {
            java.awt.Color color1 = java.awt.Color.decode("ChartChangeEventType.NEW_DATASET");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"ChartChangeEventType.NEW_DATASET\"");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test276() throws Throwable {
printRuntimeMSG("---RegressionTest1:test276");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test276");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getRangeAxisLocation((-12566464));
        org.jfree.chart.util.RectangleInsets rectangleInsets7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str8 = rectangleInsets7.toString();
        double double9 = rectangleInsets7.getTop();
        categoryPlot0.setAxisOffset(rectangleInsets7);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot0.panRangeAxes((double) 128, plotRenderingInfo12, point2D13);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer16 = categoryPlot0.getRenderer((-739));
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(rectangleInsets7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str8.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.0d + "'", double9 == 2.0d);
        org.junit.Assert.assertNull(categoryItemRenderer16);
    }

    @Test
    public void test277() throws Throwable {
printRuntimeMSG("---RegressionTest1:test277");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test277");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.calculateTopOutset((double) ' ');
        double double6 = rectangleInsets0.calculateRightOutset(100.0d);
        double double8 = rectangleInsets0.trimHeight((double) 4);
        double double10 = rectangleInsets0.calculateLeftOutset((double) (short) -1);
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.0d + "'", double4 == 2.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.0d + "'", double6 == 4.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.0d + "'", double10 == 4.0d);
    }

    @Test
    public void test278() throws Throwable {
printRuntimeMSG("---RegressionTest1:test278");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test278");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator14 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator14);
        java.awt.Color color17 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color18 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace19 = color18.getColorSpace();
        float[] floatArray26 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray27 = color17.getColorComponents(colorSpace19, floatArray26);
        int int28 = color17.getBlue();
        int int29 = color17.getAlpha();
        lineAndShapeRenderer2.setSeriesItemLabelPaint(1, (java.awt.Paint) color17);
        org.jfree.chart.LegendItem legendItem33 = lineAndShapeRenderer2.getLegendItem((-16777216), (-65536));
        lineAndShapeRenderer2.setBaseLinesVisible(true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(colorSpace19);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 128 + "'", int28 == 128);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 255 + "'", int29 == 255);
        org.junit.Assert.assertNull(legendItem33);
    }

    @Test
    public void test279() throws Throwable {
printRuntimeMSG("---RegressionTest1:test279");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test279");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator7 = lineAndShapeRenderer6.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator8 = null;
        lineAndShapeRenderer6.setBaseToolTipGenerator(categoryToolTipGenerator8);
        java.awt.Font font11 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer6.setSeriesItemLabelFont((int) (short) 0, font11, true);
        lineAndShapeRenderer6.setUseSeriesOffset(true);
        java.awt.Shape shape17 = lineAndShapeRenderer6.lookupLegendShape((-1));
        java.awt.Paint paint18 = null;
        try {
            org.jfree.chart.LegendItem legendItem19 = new org.jfree.chart.LegendItem("DatasetRenderingOrder.FORWARD", "TextAnchor.BOTTOM_LEFT", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape17, paint18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'fillPaint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator7);
        org.junit.Assert.assertNotNull(font11);
        org.junit.Assert.assertNotNull(shape17);
    }

    @Test
    public void test280() throws Throwable {
printRuntimeMSG("---RegressionTest1:test280");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test280");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator6 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float7 = defaultShadowGenerator6.getShadowOpacity();
        java.awt.Color color8 = defaultShadowGenerator6.getShadowColor();
        float[] floatArray13 = new float[] { (short) -1, 10.0f, (byte) 0, (-8355712) };
        float[] floatArray14 = color8.getRGBColorComponents(floatArray13);
        float[] floatArray15 = java.awt.Color.RGBtoHSB(10, 49, 4, floatArray14);
        float[] floatArray16 = java.awt.Color.RGBtoHSB((-65536), 15, (-15935), floatArray14);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 0.5f + "'", float7 == 0.5f);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray16);
    }

    @Test
    public void test281() throws Throwable {
printRuntimeMSG("---RegressionTest1:test281");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test281");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Shape shape6 = renderAttributes0.getItemShape((int) 'a', (int) ' ');
        java.awt.Paint paint7 = renderAttributes0.getDefaultFillPaint();
        java.lang.Boolean boolean8 = renderAttributes0.getDefaultCreateEntity();
        org.jfree.chart.renderer.RenderAttributes renderAttributes17 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean23 = lineAndShapeRenderer21.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean24 = lineAndShapeRenderer21.getBaseLinesVisible();
        java.awt.Shape shape25 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer21.setBaseLegendShape(shape25);
        renderAttributes17.setSeriesShape((int) ' ', shape25);
        org.jfree.chart.entity.ChartEntity chartEntity29 = new org.jfree.chart.entity.ChartEntity(shape25, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color32 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem33 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color32);
        java.lang.String str34 = legendItem33.getToolTipText();
        java.awt.Stroke stroke35 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem33.setOutlineStroke(stroke35);
        java.awt.Shape shape41 = null;
        java.awt.Color color42 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke43 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color44 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem45 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape41, (java.awt.Paint) color42, stroke43, (java.awt.Paint) color44);
        java.lang.Class<?> wildcardClass46 = color42.getClass();
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape25, paint30, stroke35, (java.awt.Paint) color42);
        org.jfree.chart.entity.ChartEntity chartEntity48 = new org.jfree.chart.entity.ChartEntity(shape25);
        java.awt.Color color49 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem50 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape25, (java.awt.Paint) color49);
        renderAttributes0.setDefaultPaint((java.awt.Paint) color49);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(shape6);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(shape25);
        org.junit.Assert.assertNotNull(paint30);
        org.junit.Assert.assertNotNull(color32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(color42);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(color49);
    }

    @Test
    public void test282() throws Throwable {
printRuntimeMSG("---RegressionTest1:test282");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test282");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType5 = plotChangeEvent4.getType();
        org.jfree.chart.JFreeChart jFreeChart6 = null;
        plotChangeEvent4.setChart(jFreeChart6);
        java.lang.Object obj8 = plotChangeEvent4.getSource();
        java.lang.String str9 = plotChangeEvent4.toString();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(chartChangeEventType5);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test283() throws Throwable {
printRuntimeMSG("---RegressionTest1:test283");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test283");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.lang.String str10 = legendItem8.getURLText();
        java.awt.Paint paint11 = legendItem8.getOutlinePaint();
        java.awt.Paint paint12 = legendItem8.getLabelPaint();
        java.lang.Object obj13 = legendItem8.clone();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str10.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test284() throws Throwable {
printRuntimeMSG("---RegressionTest1:test284");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test284");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.plot.Plot plot5 = plotChangeEvent4.getPlot();
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType6 = plotChangeEvent4.getType();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer9.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean12 = lineAndShapeRenderer9.getBaseLinesVisible();
        lineAndShapeRenderer9.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint16 = lineAndShapeRenderer9.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer9.getBasePositiveItemLabelPosition();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean23 = lineAndShapeRenderer21.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean24 = lineAndShapeRenderer21.getBaseLinesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator28 = lineAndShapeRenderer27.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator29 = null;
        lineAndShapeRenderer27.setBaseToolTipGenerator(categoryToolTipGenerator29);
        java.awt.Font font32 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer27.setSeriesItemLabelFont((int) (short) 0, font32, true);
        lineAndShapeRenderer21.setBaseLegendTextFont(font32);
        lineAndShapeRenderer9.setSeriesItemLabelFont(255, font32, true);
        java.awt.Stroke stroke39 = lineAndShapeRenderer9.getSeriesStroke(15);
        boolean boolean40 = chartChangeEventType6.equals((java.lang.Object) stroke39);
        java.lang.String str41 = chartChangeEventType6.toString();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plot5);
        org.junit.Assert.assertNotNull(chartChangeEventType6);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(paint16);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator28);
        org.junit.Assert.assertNotNull(font32);
        org.junit.Assert.assertNull(stroke39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "ChartChangeEventType.GENERAL" + "'", str41.equals("ChartChangeEventType.GENERAL"));
    }

    @Test
    public void test285() throws Throwable {
printRuntimeMSG("---RegressionTest1:test285");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test285");
        org.jfree.data.UnknownKeyException unknownKeyException1 = new org.jfree.data.UnknownKeyException("");
    }

    @Test
    public void test286() throws Throwable {
printRuntimeMSG("---RegressionTest1:test286");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test286");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = lineAndShapeRenderer10.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator12 = null;
        lineAndShapeRenderer10.setBaseToolTipGenerator(categoryToolTipGenerator12);
        java.awt.Paint paint15 = lineAndShapeRenderer10.lookupSeriesOutlinePaint((int) (byte) 1);
        categoryPlot0.setDomainCrosshairPaint(paint15);
        org.jfree.chart.axis.AxisLocation axisLocation17 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        categoryPlot0.setRangeAxisLocation(axisLocation17, true);
        org.jfree.chart.plot.CategoryPlot categoryPlot20 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke21 = categoryPlot20.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer22 = null;
        categoryPlot20.setRenderer(categoryItemRenderer22);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot20);
        categoryPlot20.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo30 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState31 = null;
        boolean boolean32 = categoryPlot20.render(graphics2D27, rectangle2D28, 0, plotRenderingInfo30, categoryCrosshairState31);
        boolean boolean33 = categoryPlot20.isDomainCrosshairVisible();
        int int34 = categoryPlot20.getWeight();
        java.awt.Paint paint35 = categoryPlot20.getRangeZeroBaselinePaint();
        boolean boolean36 = axisLocation17.equals((java.lang.Object) categoryPlot20);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(categoryItemLabelGenerator11);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertNotNull(axisLocation17);
        org.junit.Assert.assertNotNull(stroke21);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(paint35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test287() throws Throwable {
printRuntimeMSG("---RegressionTest1:test287");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test287");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        boolean boolean11 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint();
        lineAndShapeRenderer2.setAutoPopulateSeriesFillPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent16 = null;
        lineAndShapeRenderer2.notifyListeners(rendererChangeEvent16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test288() throws Throwable {
printRuntimeMSG("---RegressionTest1:test288");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test288");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        categoryPlot0.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot9.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo12, point2D13);
        categoryPlot9.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder17 = categoryPlot9.getRowRenderingOrder();
        categoryPlot0.setRowRenderingOrder(sortOrder17);
        double double19 = categoryPlot0.getRangeCrosshairValue();
        org.jfree.chart.util.SortOrder sortOrder20 = categoryPlot0.getColumnRenderingOrder();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent21 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.plot.Plot plot22 = plotChangeEvent21.getPlot();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(sortOrder20);
        org.junit.Assert.assertNotNull(plot22);
    }

    @Test
    public void test289() throws Throwable {
printRuntimeMSG("---RegressionTest1:test289");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test289");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.plot.Plot plot5 = categoryPlot0.getParent();
        java.awt.Paint paint6 = categoryPlot0.getOutlinePaint();
        org.jfree.data.general.DatasetGroup datasetGroup7 = categoryPlot0.getDatasetGroup();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(plot5);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNull(datasetGroup7);
    }

    @Test
    public void test290() throws Throwable {
printRuntimeMSG("---RegressionTest1:test290");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test290");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.awt.color.ColorSpace colorSpace4 = color2.getColorSpace();
        keyedObjects2D0.addObject((java.lang.Object) colorSpace4, (java.lang.Comparable) (-4.0d), (java.lang.Comparable) (-4.0d));
        java.lang.Object obj8 = keyedObjects2D0.clone();
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test291() throws Throwable {
printRuntimeMSG("---RegressionTest1:test291");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test291");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint11 = lineAndShapeRenderer2.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        boolean boolean13 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(itemLabelPosition12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test292() throws Throwable {
printRuntimeMSG("---RegressionTest1:test292");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test292");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list9 = categoryPlot0.getCategoriesForAxis(categoryAxis8);
        boolean boolean10 = categoryPlot0.isDomainZoomable();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer13.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator15 = null;
        lineAndShapeRenderer13.setBaseToolTipGenerator(categoryToolTipGenerator15);
        java.awt.Font font18 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer13.setSeriesItemLabelFont((int) (short) 0, font18, true);
        java.lang.Boolean boolean22 = lineAndShapeRenderer13.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint23 = lineAndShapeRenderer13.getBaseItemLabelPaint();
        categoryPlot0.setRangeMinorGridlinePaint(paint23);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNotNull(font18);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(paint23);
    }

    @Test
    public void test293() throws Throwable {
printRuntimeMSG("---RegressionTest1:test293");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test293");
        try {
            java.awt.Color color1 = java.awt.Color.decode("ChartEntity: tooltip = ");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"ChartEntity: tooltip = \"");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test294() throws Throwable {
printRuntimeMSG("---RegressionTest1:test294");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test294");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        org.jfree.chart.axis.AxisLocation axisLocation12 = categoryPlot0.getRangeAxisLocation((int) '#');
        double double13 = categoryPlot0.getRangeCrosshairValue();
        org.jfree.data.general.DatasetGroup datasetGroup14 = categoryPlot0.getDatasetGroup();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(axisLocation12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNull(datasetGroup14);
    }

    @Test
    public void test295() throws Throwable {
printRuntimeMSG("---RegressionTest1:test295");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test295");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Stroke stroke4 = renderAttributes0.getItemStroke((int) (byte) 10, (int) 'a');
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Paint paint9 = renderAttributes5.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes5.setDefaultStroke(stroke10);
        renderAttributes0.setDefaultOutlineStroke(stroke10);
        java.awt.Paint paint13 = renderAttributes0.getDefaultLabelPaint();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(stroke4);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNull(paint13);
    }

    @Test
    public void test296() throws Throwable {
printRuntimeMSG("---RegressionTest1:test296");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test296");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint3 = renderAttributes0.getItemOutlinePaint(1, (int) 'a');
        java.awt.Shape shape5 = renderAttributes0.getSeriesShape((int) (short) 0);
        java.awt.Paint paint7 = renderAttributes0.getSeriesPaint((int) ' ');
        org.jfree.chart.renderer.category.BarRenderer barRenderer8 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint9 = barRenderer8.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot10.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo13, point2D14);
        categoryPlot10.clearAnnotations();
        boolean boolean17 = barRenderer8.equals((java.lang.Object) categoryPlot10);
        java.awt.Paint paint18 = barRenderer8.getShadowPaint();
        java.awt.Shape shape19 = barRenderer8.getBaseShape();
        barRenderer8.setShadowYOffset(0.0d);
        double double22 = barRenderer8.getMaximumBarWidth();
        java.lang.Boolean boolean24 = barRenderer8.getSeriesCreateEntities(0);
        double double25 = barRenderer8.getMaximumBarWidth();
        java.awt.Color color26 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel27 = null;
        java.awt.Rectangle rectangle28 = null;
        java.awt.geom.Rectangle2D rectangle2D29 = null;
        java.awt.geom.AffineTransform affineTransform30 = null;
        java.awt.RenderingHints renderingHints31 = null;
        java.awt.PaintContext paintContext32 = color26.createContext(colorModel27, rectangle28, rectangle2D29, affineTransform30, renderingHints31);
        java.awt.Color color33 = java.awt.Color.RED;
        java.awt.Color color34 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace36 = color35.getColorSpace();
        float[] floatArray43 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray44 = color34.getColorComponents(colorSpace36, floatArray43);
        float[] floatArray45 = color33.getComponents(floatArray44);
        float[] floatArray46 = color26.getColorComponents(floatArray45);
        barRenderer8.setBasePaint((java.awt.Paint) color26);
        java.awt.Color color48 = color26.darker();
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color26);
        java.awt.Color color50 = color26.brighter();
        org.junit.Assert.assertNull(paint3);
        org.junit.Assert.assertNull(shape5);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(paint18);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(paintContext32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(colorSpace36);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(color50);
    }

    @Test
    public void test297() throws Throwable {
printRuntimeMSG("---RegressionTest1:test297");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test297");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke();
        lineAndShapeRenderer2.setSeriesShapesVisible((int) (byte) 1, (java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test298() throws Throwable {
printRuntimeMSG("---RegressionTest1:test298");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test298");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        java.awt.Shape shape8 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer4.setBaseLegendShape(shape8);
        renderAttributes0.setSeriesShape((int) ' ', shape8);
        org.jfree.chart.entity.ChartEntity chartEntity12 = new org.jfree.chart.entity.ChartEntity(shape8, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        chartEntity12.setToolTipText("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT");
        java.lang.String str15 = chartEntity12.getURLText();
        java.lang.String str16 = chartEntity12.toString();
        java.lang.String str17 = chartEntity12.getShapeType();
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(shape8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "ChartEntity: tooltip = org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str16.equals("ChartEntity: tooltip = org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "poly" + "'", str17.equals("poly"));
    }

    @Test
    public void test299() throws Throwable {
printRuntimeMSG("---RegressionTest1:test299");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test299");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint2 = renderAttributes0.getSeriesPaint((int) (short) 0);
        java.awt.Paint paint3 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Stroke stroke4 = renderAttributes0.getDefaultOutlineStroke();
        org.jfree.chart.util.RectangleInsets rectangleInsets6 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double7 = rectangleInsets6.getRight();
        java.awt.Color color8 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        boolean boolean9 = rectangleInsets6.equals((java.lang.Object) color8);
        try {
            renderAttributes0.setSeriesOutlinePaint((-8355712), (java.awt.Paint) color8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(paint2);
        org.junit.Assert.assertNull(paint3);
        org.junit.Assert.assertNull(stroke4);
        org.junit.Assert.assertNotNull(rectangleInsets6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 4.0d + "'", double7 == 4.0d);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test300() throws Throwable {
printRuntimeMSG("---RegressionTest1:test300");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test300");
        org.jfree.chart.util.UnitType unitType0 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        categoryPlot1.setParent((org.jfree.chart.plot.Plot) categoryPlot3);
        org.jfree.chart.LegendItemCollection legendItemCollection6 = categoryPlot1.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier7 = categoryPlot1.getDrawingSupplier();
        java.awt.Stroke stroke8 = categoryPlot1.getOutlineStroke();
        boolean boolean9 = unitType0.equals((java.lang.Object) categoryPlot1);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot1.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo12, point2D13);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean19 = lineAndShapeRenderer17.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean20 = lineAndShapeRenderer17.getBaseLinesVisible();
        java.awt.Shape shape21 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer17.setBaseLegendShape(shape21);
        java.awt.Color color23 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer17.setBaseOutlinePaint((java.awt.Paint) color23, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition30 = null;
        lineAndShapeRenderer28.setSeriesPositiveItemLabelPosition(0, itemLabelPosition30);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer28.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean34 = lineAndShapeRenderer28.getUseFillPaint();
        lineAndShapeRenderer28.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer28.setBaseStroke(stroke37, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray40 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer17, lineAndShapeRenderer28 };
        categoryPlot1.setRenderers(categoryItemRendererArray40);
        boolean boolean42 = categoryPlot1.isRangeCrosshairLockedOnData();
        java.awt.Paint paint43 = categoryPlot1.getOutlinePaint();
        org.jfree.chart.axis.ValueAxis valueAxis45 = categoryPlot1.getRangeAxis((int) (short) 100);
        int int46 = categoryPlot1.getDomainAxisCount();
        org.jfree.chart.plot.Marker marker48 = null;
        org.jfree.chart.util.Layer layer49 = null;
        boolean boolean51 = categoryPlot1.removeDomainMarker((int) (byte) 0, marker48, layer49, false);
        org.junit.Assert.assertNotNull(unitType0);
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNull(legendItemCollection6);
        org.junit.Assert.assertNotNull(drawingSupplier7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(shape21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(categoryItemRendererArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNull(valueAxis45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test301() throws Throwable {
printRuntimeMSG("---RegressionTest1:test301");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test301");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list9 = categoryPlot0.getCategoriesForAxis(categoryAxis8);
        boolean boolean10 = categoryPlot0.isDomainZoomable();
        boolean boolean11 = categoryPlot0.isRangePannable();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test302() throws Throwable {
printRuntimeMSG("---RegressionTest1:test302");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test302");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.util.SortOrder sortOrder7 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent8 = null;
        categoryPlot0.rendererChanged(rendererChangeEvent8);
        int int10 = categoryPlot0.getDomainAxisCount();
        java.awt.Paint paint11 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray12 = new java.awt.Paint[] { paint11 };
        java.awt.Color color13 = java.awt.Color.BLUE;
        java.awt.Color color14 = java.awt.Color.RED;
        java.awt.Paint paint15 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray16 = new java.awt.Paint[] { color13, color14, paint15 };
        java.awt.Color color17 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel18 = null;
        java.awt.Rectangle rectangle19 = null;
        java.awt.geom.Rectangle2D rectangle2D20 = null;
        java.awt.geom.AffineTransform affineTransform21 = null;
        java.awt.RenderingHints renderingHints22 = null;
        java.awt.PaintContext paintContext23 = color17.createContext(colorModel18, rectangle19, rectangle2D20, affineTransform21, renderingHints22);
        java.awt.Color color24 = java.awt.Color.WHITE;
        java.awt.Color color25 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel26 = null;
        java.awt.Rectangle rectangle27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        java.awt.geom.AffineTransform affineTransform29 = null;
        java.awt.RenderingHints renderingHints30 = null;
        java.awt.PaintContext paintContext31 = color25.createContext(colorModel26, rectangle27, rectangle2D28, affineTransform29, renderingHints30);
        java.awt.Color color32 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray33 = new java.awt.Paint[] { color17, color24, color25, color32 };
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray39 = new java.awt.Stroke[] { stroke34, stroke35, stroke36, stroke37, stroke38 };
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke41 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot42 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke43 = categoryPlot42.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray44 = new java.awt.Stroke[] { stroke40, stroke41, stroke43 };
        java.awt.Shape shape45 = null;
        java.awt.Shape[] shapeArray46 = new java.awt.Shape[] { shape45 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier47 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray12, paintArray16, paintArray33, strokeArray39, strokeArray44, shapeArray46);
        java.awt.Shape shape48 = defaultDrawingSupplier47.getNextShape();
        java.awt.Stroke stroke49 = defaultDrawingSupplier47.getNextOutlineStroke();
        java.awt.Stroke stroke50 = defaultDrawingSupplier47.getNextOutlineStroke();
        java.awt.Paint paint51 = defaultDrawingSupplier47.getNextFillPaint();
        categoryPlot0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier47, true);
        categoryPlot0.setWeight((int) (byte) 1);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(paintArray12);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertNotNull(paintArray16);
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(paintContext23);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(paintContext31);
        org.junit.Assert.assertNotNull(color32);
        org.junit.Assert.assertNotNull(paintArray33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(strokeArray39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(strokeArray44);
        org.junit.Assert.assertNotNull(shapeArray46);
        org.junit.Assert.assertNull(shape48);
        org.junit.Assert.assertNotNull(stroke49);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(paint51);
    }

    @Test
    public void test303() throws Throwable {
printRuntimeMSG("---RegressionTest1:test303");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test303");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        categoryPlot0.drawBackgroundImage(graphics2D3, rectangle2D4);
        categoryPlot0.clearAnnotations();
        categoryPlot0.configureDomainAxes();
        org.jfree.data.category.CategoryDataset categoryDataset9 = categoryPlot0.getDataset((-739));
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(categoryDataset9);
    }

    @Test
    public void test304() throws Throwable {
printRuntimeMSG("---RegressionTest1:test304");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test304");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.awt.Font font12 = categoryAxis1.getTickLabelFont();
        boolean boolean13 = categoryAxis1.isAxisLineVisible();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(font12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test305() throws Throwable {
printRuntimeMSG("---RegressionTest1:test305");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test305");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        org.jfree.chart.util.RectangleInsets rectangleInsets16 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str17 = rectangleInsets16.toString();
        double double18 = rectangleInsets16.getTop();
        double double20 = rectangleInsets16.calculateTopOutset((double) ' ');
        double double22 = rectangleInsets16.calculateRightOutset(100.0d);
        double double24 = rectangleInsets16.extendWidth((double) 10L);
        categoryAxis1.setLabelInsets(rectangleInsets16, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(rectangleInsets16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str17.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.0d + "'", double18 == 2.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2.0d + "'", double20 == 2.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.0d + "'", double22 == 4.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 18.0d + "'", double24 == 18.0d);
    }

    @Test
    public void test306() throws Throwable {
printRuntimeMSG("---RegressionTest1:test306");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test306");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent5 = null;
        categoryPlot2.annotationChanged(annotationChangeEvent5);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator10 = lineAndShapeRenderer9.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator11 = null;
        lineAndShapeRenderer9.setBaseToolTipGenerator(categoryToolTipGenerator11);
        java.awt.Paint paint14 = lineAndShapeRenderer9.lookupSeriesOutlinePaint((int) (byte) 1);
        categoryPlot2.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer9);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator17 = lineAndShapeRenderer9.getSeriesURLGenerator((-8355712));
        java.awt.Shape shape19 = null;
        lineAndShapeRenderer9.setSeriesShape(128, shape19);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(categoryItemLabelGenerator10);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNull(categoryURLGenerator17);
    }

    @Test
    public void test307() throws Throwable {
printRuntimeMSG("---RegressionTest1:test307");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test307");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        lineAndShapeRenderer2.setUseOutlinePaint(false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator17 = lineAndShapeRenderer16.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator18 = null;
        lineAndShapeRenderer16.setBaseToolTipGenerator(categoryToolTipGenerator18);
        java.awt.Font font21 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer16.setSeriesItemLabelFont((int) (short) 0, font21, true);
        lineAndShapeRenderer2.setSeriesItemLabelFont(2, font21, false);
        lineAndShapeRenderer2.setSeriesItemLabelsVisible(10, (java.lang.Boolean) false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
        org.junit.Assert.assertNull(categoryItemLabelGenerator17);
        org.junit.Assert.assertNotNull(font21);
    }

    @Test
    public void test308() throws Throwable {
printRuntimeMSG("---RegressionTest1:test308");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test308");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        int int7 = categoryPlot0.getWeight();
        org.jfree.chart.plot.PlotOrientation plotOrientation8 = categoryPlot0.getOrientation();
        boolean boolean9 = categoryPlot0.isRangeCrosshairLockedOnData();
        categoryPlot0.mapDatasetToDomainAxis((int) (short) 0, (int) (byte) 100);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo14 = null;
        java.awt.geom.Point2D point2D15 = null;
        categoryPlot0.zoomDomainAxes((double) 100.0f, plotRenderingInfo14, point2D15, true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(plotOrientation8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test309() throws Throwable {
printRuntimeMSG("---RegressionTest1:test309");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test309");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        java.awt.Graphics2D graphics2D10 = null;
        java.awt.geom.Rectangle2D rectangle2D11 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState14 = null;
        boolean boolean15 = categoryPlot9.render(graphics2D10, rectangle2D11, 0, plotRenderingInfo13, categoryCrosshairState14);
        org.jfree.chart.axis.CategoryAxis categoryAxis16 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis16.setMinorTickMarkOutsideLength((float) (short) 0);
        float float19 = categoryAxis16.getMinorTickMarkInsideLength();
        categoryAxis16.setMinorTickMarkInsideLength(100.0f);
        java.awt.Paint paint22 = categoryAxis16.getTickMarkPaint();
        org.jfree.chart.axis.CategoryAxis categoryAxis23 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint24 = categoryAxis23.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets25 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double26 = rectangleInsets25.getRight();
        double double28 = rectangleInsets25.calculateTopInset(0.0d);
        categoryAxis23.setLabelInsets(rectangleInsets25, false);
        java.lang.String str31 = rectangleInsets25.toString();
        categoryAxis16.setTickLabelInsets(rectangleInsets25);
        double double34 = rectangleInsets25.calculateRightInset((double) 10L);
        categoryPlot9.setInsets(rectangleInsets25, true);
        try {
            categoryPlot9.zoom((double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(paint22);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(rectangleInsets25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 4.0d + "'", double26 == 4.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.0d + "'", double28 == 2.0d);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str31.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 4.0d + "'", double34 == 4.0d);
    }

    @Test
    public void test310() throws Throwable {
printRuntimeMSG("---RegressionTest1:test310");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test310");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath11 = null;
        java.awt.geom.Rectangle2D rectangle2D12 = null;
        org.jfree.chart.RenderingSource renderingSource13 = null;
        categoryPlot0.select(generalPath11, rectangle2D12, renderingSource13);
        org.jfree.chart.util.ShadowGenerator shadowGenerator15 = null;
        categoryPlot0.setShadowGenerator(shadowGenerator15);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean21 = lineAndShapeRenderer19.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean22 = lineAndShapeRenderer19.getBaseLinesVisible();
        java.awt.Shape shape23 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer19.setBaseLegendShape(shape23);
        boolean boolean25 = lineAndShapeRenderer19.getAutoPopulateSeriesFillPaint();
        boolean boolean26 = categoryPlot0.equals((java.lang.Object) boolean25);
        java.lang.String str27 = categoryPlot0.getNoDataMessage();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shape23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test311() throws Throwable {
printRuntimeMSG("---RegressionTest1:test311");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test311");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.axis.ValueAxis valueAxis10 = null;
        org.jfree.data.Range range11 = categoryPlot9.getDataRange(valueAxis10);
        categoryPlot9.setWeight((int) 'a');
        java.awt.Graphics2D graphics2D14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState18 = null;
        boolean boolean19 = categoryPlot9.render(graphics2D14, rectangle2D15, 0, plotRenderingInfo17, categoryCrosshairState18);
        categoryPlot9.clearDomainMarkers();
        org.jfree.chart.axis.AxisLocation axisLocation21 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT;
        categoryPlot9.setDomainAxisLocation(axisLocation21, true);
        categoryPlot9.setBackgroundImageAlignment((-10));
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(axisLocation21);
    }

    @Test
    public void test312() throws Throwable {
printRuntimeMSG("---RegressionTest1:test312");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test312");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarksVisible(true);
    }

    @Test
    public void test313() throws Throwable {
printRuntimeMSG("---RegressionTest1:test313");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test313");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation14 = null;
        boolean boolean15 = barRenderer0.removeAnnotation(categoryAnnotation14);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test314() throws Throwable {
printRuntimeMSG("---RegressionTest1:test314");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test314");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        double double12 = barRenderer0.getMinimumBarLength();
        try {
            barRenderer0.setSeriesItemLabelsVisible((int) (byte) -1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test315() throws Throwable {
printRuntimeMSG("---RegressionTest1:test315");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test315");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        categoryPlot0.setForegroundAlpha((float) (-1));
        categoryPlot0.mapDatasetToDomainAxis((int) (short) 1, 8);
        java.awt.Stroke stroke19 = categoryPlot0.getRangeZeroBaselineStroke();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo21 = null;
        java.awt.geom.Point2D point2D22 = null;
        categoryPlot0.zoomDomainAxes((double) '#', plotRenderingInfo21, point2D22);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(stroke19);
    }

    @Test
    public void test316() throws Throwable {
printRuntimeMSG("---RegressionTest1:test316");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test316");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        try {
            categoryPlot9.mapDatasetToDomainAxis((-1), (-739));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires 'index' >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
    }

    @Test
    public void test317() throws Throwable {
printRuntimeMSG("---RegressionTest1:test317");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test317");
        org.jfree.chart.util.GradientPaintTransformType gradientPaintTransformType0 = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
        java.lang.String str1 = gradientPaintTransformType0.toString();
        java.lang.String str2 = gradientPaintTransformType0.toString();
        org.junit.Assert.assertNotNull(gradientPaintTransformType0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "GradientPaintTransformType.VERTICAL" + "'", str1.equals("GradientPaintTransformType.VERTICAL"));
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "GradientPaintTransformType.VERTICAL" + "'", str2.equals("GradientPaintTransformType.VERTICAL"));
    }

    @Test
    public void test318() throws Throwable {
printRuntimeMSG("---RegressionTest1:test318");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test318");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.awt.Paint paint11 = lineAndShapeRenderer2.getSeriesOutlinePaint((int) '4');
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset14 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj15 = abstractCategoryDataset14.clone();
        java.lang.Object obj16 = abstractCategoryDataset14.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes25 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean31 = lineAndShapeRenderer29.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean32 = lineAndShapeRenderer29.getBaseLinesVisible();
        java.awt.Shape shape33 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer29.setBaseLegendShape(shape33);
        renderAttributes25.setSeriesShape((int) ' ', shape33);
        org.jfree.chart.entity.ChartEntity chartEntity37 = new org.jfree.chart.entity.ChartEntity(shape33, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color40 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color40);
        java.lang.String str42 = legendItem41.getToolTipText();
        java.awt.Stroke stroke43 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem41.setOutlineStroke(stroke43);
        java.awt.Shape shape49 = null;
        java.awt.Color color50 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke51 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color52 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem53 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape49, (java.awt.Paint) color50, stroke51, (java.awt.Paint) color52);
        java.lang.Class<?> wildcardClass54 = color50.getClass();
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape33, paint38, stroke43, (java.awt.Paint) color50);
        org.jfree.chart.entity.ChartEntity chartEntity56 = new org.jfree.chart.entity.ChartEntity(shape33);
        java.awt.Color color57 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem58 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape33, (java.awt.Paint) color57);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset61 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity64 = new org.jfree.chart.entity.CategoryItemEntity(shape33, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset61, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset14.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset61);
        defaultCategoryDataset61.addValue((java.lang.Number) (-8355712), (java.lang.Comparable) '4', (java.lang.Comparable) 2.0d);
        org.jfree.data.category.CategoryDataset categoryDataset70 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis71 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis71.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis74 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer77 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator78 = lineAndShapeRenderer77.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot79 = new org.jfree.chart.plot.CategoryPlot(categoryDataset70, categoryAxis71, valueAxis74, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer77);
        boolean boolean80 = categoryAxis71.isTickLabelsVisible();
        categoryAxis71.setLabelToolTip("hi!");
        float float83 = categoryAxis71.getTickMarkInsideLength();
        float float84 = categoryAxis71.getTickMarkInsideLength();
        float float85 = categoryAxis71.getMinorTickMarkInsideLength();
        java.awt.geom.Rectangle2D rectangle2D86 = null;
        org.jfree.chart.util.RectangleEdge rectangleEdge87 = null;
        try {
            double double88 = lineAndShapeRenderer2.getItemMiddle((java.lang.Comparable) (byte) 0, (java.lang.Comparable) (-8355712), (org.jfree.data.category.CategoryDataset) defaultCategoryDataset61, categoryAxis71, rectangle2D86, rectangleEdge87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid category index: -1");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(paint11);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(shape33);
        org.junit.Assert.assertNotNull(paint38);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(color50);
        org.junit.Assert.assertNotNull(stroke51);
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(color57);
        org.junit.Assert.assertNull(categoryItemLabelGenerator78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 0.0f + "'", float83 == 0.0f);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.0f + "'", float84 == 0.0f);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.0f + "'", float85 == 0.0f);
    }

    @Test
    public void test319() throws Throwable {
printRuntimeMSG("---RegressionTest1:test319");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test319");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Graphics2D graphics2D6 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        java.awt.geom.Point2D point2D11 = null;
        categoryPlot7.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo10, point2D11);
        org.jfree.chart.axis.AxisSpace axisSpace13 = null;
        categoryPlot7.setFixedRangeAxisSpace(axisSpace13, true);
        org.jfree.chart.axis.ValueAxis valueAxis16 = null;
        org.jfree.chart.plot.Marker marker17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        lineAndShapeRenderer2.drawRangeMarker(graphics2D6, categoryPlot7, valueAxis16, marker17, rectangle2D18);
        org.jfree.chart.util.SortOrder sortOrder20 = categoryPlot7.getRowRenderingOrder();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(sortOrder20);
    }

    @Test
    public void test320() throws Throwable {
printRuntimeMSG("---RegressionTest1:test320");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test320");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Paint paint5 = renderAttributes0.getSeriesOutlinePaint((int) '#');
        java.awt.Font font6 = renderAttributes0.getDefaultLabelFont();
        java.awt.Paint paint7 = null;
        try {
            renderAttributes0.setDefaultLabelPaint(paint7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'paint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(paint5);
        org.junit.Assert.assertNull(font6);
    }

    @Test
    public void test321() throws Throwable {
printRuntimeMSG("---RegressionTest1:test321");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test321");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE2;
        java.lang.Object obj1 = null;
        boolean boolean2 = itemLabelAnchor0.equals(obj1);
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test322() throws Throwable {
printRuntimeMSG("---RegressionTest1:test322");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test322");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        double double11 = categoryAxis1.getFixedDimension();
        java.lang.Object obj12 = categoryAxis1.clone();
        java.awt.Paint paint13 = categoryAxis1.getLabelPaint();
        categoryAxis1.setFixedDimension((double) 8);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(paint13);
    }

    @Test
    public void test323() throws Throwable {
printRuntimeMSG("---RegressionTest1:test323");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test323");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double1 = rectangleInsets0.getRight();
        double double3 = rectangleInsets0.calculateRightOutset(0.05d);
        double double5 = rectangleInsets0.extendHeight((double) '4');
        double double7 = rectangleInsets0.extendHeight((double) (short) -1);
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.0d + "'", double3 == 4.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 56.0d + "'", double5 == 56.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.0d + "'", double7 == 3.0d);
    }

    @Test
    public void test324() throws Throwable {
printRuntimeMSG("---RegressionTest1:test324");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test324");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        double double11 = categoryAxis1.getFixedDimension();
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke13 = categoryPlot12.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke15 = categoryPlot14.getRangeMinorGridlineStroke();
        categoryPlot12.setParent((org.jfree.chart.plot.Plot) categoryPlot14);
        org.jfree.chart.LegendItemCollection legendItemCollection17 = categoryPlot12.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier18 = categoryPlot12.getDrawingSupplier();
        java.awt.Stroke stroke19 = categoryPlot12.getOutlineStroke();
        org.jfree.chart.axis.CategoryAnchor categoryAnchor20 = categoryPlot12.getDomainGridlinePosition();
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot24 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke25 = categoryPlot24.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis26 = null;
        categoryPlot24.setRangeAxis(valueAxis26);
        org.jfree.chart.util.RectangleEdge rectangleEdge28 = categoryPlot24.getRangeAxisEdge();
        try {
            double double29 = categoryAxis1.getCategoryJava2DCoordinate(categoryAnchor20, (-739), (-65536), rectangle2D23, rectangleEdge28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid category index: -739");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertNull(legendItemCollection17);
        org.junit.Assert.assertNotNull(drawingSupplier18);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNotNull(categoryAnchor20);
        org.junit.Assert.assertNotNull(stroke25);
        org.junit.Assert.assertNotNull(rectangleEdge28);
    }

    @Test
    public void test325() throws Throwable {
printRuntimeMSG("---RegressionTest1:test325");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test325");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        categoryPlot0.setCrosshairDatasetIndex((int) (byte) 1, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test326() throws Throwable {
printRuntimeMSG("---RegressionTest1:test326");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test326");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE8;
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
    }

    @Test
    public void test327() throws Throwable {
printRuntimeMSG("---RegressionTest1:test327");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test327");
        java.lang.Object obj0 = null;
        org.jfree.chart.JFreeChart jFreeChart1 = null;
        try {
            org.jfree.chart.event.ChartChangeEvent chartChangeEvent2 = new org.jfree.chart.event.ChartChangeEvent(obj0, jFreeChart1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null source");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test328() throws Throwable {
printRuntimeMSG("---RegressionTest1:test328");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test328");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition1 = barRenderer0.getNegativeItemLabelPositionFallback();
        boolean boolean2 = barRenderer0.getAutoPopulateSeriesPaint();
        org.junit.Assert.assertNull(itemLabelPosition1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test329() throws Throwable {
printRuntimeMSG("---RegressionTest1:test329");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test329");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color3 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem4 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color3);
        java.lang.String str5 = legendItem4.getToolTipText();
        java.awt.Stroke stroke6 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem4.setOutlineStroke(stroke6);
        legendItem1.setOutlineStroke(stroke6);
        java.lang.Object obj9 = legendItem1.clone();
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test330() throws Throwable {
printRuntimeMSG("---RegressionTest1:test330");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test330");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Color color9 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer2.setSeriesPaint(2, (java.awt.Paint) color9);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator12 = null;
        try {
            lineAndShapeRenderer2.setSeriesToolTipGenerator((-16777216), categoryToolTipGenerator12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(color9);
    }

    @Test
    public void test331() throws Throwable {
printRuntimeMSG("---RegressionTest1:test331");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test331");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset3 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj4 = abstractCategoryDataset3.clone();
        java.lang.Object obj5 = abstractCategoryDataset3.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes14 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        java.awt.Shape shape22 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer18.setBaseLegendShape(shape22);
        renderAttributes14.setSeriesShape((int) ' ', shape22);
        org.jfree.chart.entity.ChartEntity chartEntity26 = new org.jfree.chart.entity.ChartEntity(shape22, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color29 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem30 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color29);
        java.lang.String str31 = legendItem30.getToolTipText();
        java.awt.Stroke stroke32 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem30.setOutlineStroke(stroke32);
        java.awt.Shape shape38 = null;
        java.awt.Color color39 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color41 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape38, (java.awt.Paint) color39, stroke40, (java.awt.Paint) color41);
        java.lang.Class<?> wildcardClass43 = color39.getClass();
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape22, paint27, stroke32, (java.awt.Paint) color39);
        org.jfree.chart.entity.ChartEntity chartEntity45 = new org.jfree.chart.entity.ChartEntity(shape22);
        java.awt.Color color46 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape22, (java.awt.Paint) color46);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset50 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity53 = new org.jfree.chart.entity.CategoryItemEntity(shape22, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset50, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset3.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        defaultCategoryDataset50.setValue((double) (-1.0f), (java.lang.Comparable) "ChartEntity: tooltip = ", (java.lang.Comparable) (byte) 100);
        org.jfree.data.general.DatasetGroup datasetGroup60 = null;
        try {
            defaultCategoryDataset50.setGroup(datasetGroup60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'group' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(shape22);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(color46);
    }

    @Test
    public void test332() throws Throwable {
printRuntimeMSG("---RegressionTest1:test332");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test332");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        java.awt.Paint paint8 = categoryPlot0.getRangeZeroBaselinePaint();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(paint8);
    }

    @Test
    public void test333() throws Throwable {
printRuntimeMSG("---RegressionTest1:test333");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test333");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.plot.Plot.DEFAULT_INSETS;
        org.junit.Assert.assertNotNull(rectangleInsets0);
    }

    @Test
    public void test334() throws Throwable {
printRuntimeMSG("---RegressionTest1:test334");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test334");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.axis.AxisLocation axisLocation5 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation6 = axisLocation5.getOpposite();
        categoryPlot0.setDomainAxisLocation((int) (byte) 100, axisLocation6);
        java.lang.String str8 = axisLocation6.toString();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation5);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "AxisLocation.TOP_OR_LEFT" + "'", str8.equals("AxisLocation.TOP_OR_LEFT"));
    }

    @Test
    public void test335() throws Throwable {
printRuntimeMSG("---RegressionTest1:test335");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test335");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        categoryPlot0.setRangeZeroBaselineVisible(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = categoryPlot0.getRenderer((int) (byte) -1);
        java.awt.Color color12 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        categoryPlot0.setDomainCrosshairPaint((java.awt.Paint) color12);
        categoryPlot0.setCrosshairDatasetIndex((int) ' ', true);
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) "UnitType.ABSOLUTE");
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNull(categoryItemRenderer11);
        org.junit.Assert.assertNotNull(color12);
    }

    @Test
    public void test336() throws Throwable {
printRuntimeMSG("---RegressionTest1:test336");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test336");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.axis.AxisLocation axisLocation1 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation2 = axisLocation1.getOpposite();
        boolean boolean3 = itemLabelAnchor0.equals((java.lang.Object) axisLocation1);
        java.lang.String str4 = itemLabelAnchor0.toString();
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
        org.junit.Assert.assertNotNull(axisLocation1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "ItemLabelAnchor.INSIDE4" + "'", str4.equals("ItemLabelAnchor.INSIDE4"));
    }

    @Test
    public void test337() throws Throwable {
printRuntimeMSG("---RegressionTest1:test337");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test337");
        org.jfree.chart.util.PaintList paintList0 = new org.jfree.chart.util.PaintList();
        paintList0.clear();
    }

    @Test
    public void test338() throws Throwable {
printRuntimeMSG("---RegressionTest1:test338");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test338");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        boolean boolean11 = defaultCategoryDataset0.equals((java.lang.Object) false);
        java.lang.Object obj12 = defaultCategoryDataset0.clone();
        try {
            defaultCategoryDataset0.setSelected(0, 4, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test339() throws Throwable {
printRuntimeMSG("---RegressionTest1:test339");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test339");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.calculateTopOutset((double) ' ');
        double double6 = rectangleInsets0.trimWidth((double) (short) -1);
        double double8 = rectangleInsets0.calculateBottomInset((double) (byte) 1);
        double double10 = rectangleInsets0.trimHeight((double) (-15935));
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.0d + "'", double4 == 2.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9.0d) + "'", double6 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.0d + "'", double8 == 2.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-15939.0d) + "'", double10 == (-15939.0d));
    }

    @Test
    public void test340() throws Throwable {
printRuntimeMSG("---RegressionTest1:test340");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test340");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        lineAndShapeRenderer2.setBaseSeriesVisibleInLegend(true);
        boolean boolean6 = lineAndShapeRenderer2.getBaseSeriesVisibleInLegend();
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator((int) (short) 0, categoryItemLabelGenerator8, false);
        java.awt.Stroke stroke12 = lineAndShapeRenderer2.getSeriesOutlineStroke(0);
        boolean boolean13 = lineAndShapeRenderer2.getUseFillPaint();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(stroke12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test341() throws Throwable {
printRuntimeMSG("---RegressionTest1:test341");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test341");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        categoryPlot0.setRangeCrosshairVisible(false);
        org.jfree.chart.axis.AxisSpace axisSpace5 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent6 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent6);
        org.jfree.chart.plot.Marker marker8 = null;
        boolean boolean9 = categoryPlot0.removeDomainMarker(marker8);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(axisSpace5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test342() throws Throwable {
printRuntimeMSG("---RegressionTest1:test342");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test342");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = null;
        java.util.List list11 = categoryPlot0.getCategoriesForAxis(categoryAxis10);
        categoryPlot0.setWeight((int) (short) 1);
        java.awt.Shape shape18 = null;
        java.awt.Color color19 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke20 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color21 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, (java.awt.Paint) color19, stroke20, (java.awt.Paint) color21);
        java.awt.Paint paint23 = legendItem22.getLabelPaint();
        org.jfree.chart.LegendItem legendItem25 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer26 = legendItem25.getFillPaintTransformer();
        legendItem22.setFillPaintTransformer(gradientPaintTransformer26);
        java.lang.String str28 = legendItem22.getURLText();
        legendItem22.setLineVisible(false);
        java.awt.Paint paint31 = legendItem22.getOutlinePaint();
        categoryPlot0.setRangeGridlinePaint(paint31);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNull(paint23);
        org.junit.Assert.assertNotNull(gradientPaintTransformer26);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str28.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint31);
    }

    @Test
    public void test343() throws Throwable {
printRuntimeMSG("---RegressionTest1:test343");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test343");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        categoryPlot10.setRangeCrosshairValue(0.0d);
        org.jfree.chart.plot.PlotOrientation plotOrientation22 = categoryPlot10.getOrientation();
        categoryPlot10.setNoDataMessage("AxisLocation.TOP_OR_LEFT");
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(plotOrientation22);
    }

    @Test
    public void test344() throws Throwable {
printRuntimeMSG("---RegressionTest1:test344");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test344");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        int int1 = defaultCategoryDataset0.getRowCount();
        defaultCategoryDataset0.setValue((java.lang.Number) (-9.0d), (java.lang.Comparable) true, (java.lang.Comparable) (short) 1);
        org.jfree.chart.util.SortOrder sortOrder6 = org.jfree.chart.util.SortOrder.DESCENDING;
        boolean boolean7 = defaultCategoryDataset0.equals((java.lang.Object) sortOrder6);
        try {
            boolean boolean10 = defaultCategoryDataset0.isSelected(0, (-65536));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(sortOrder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test345() throws Throwable {
printRuntimeMSG("---RegressionTest1:test345");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test345");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        java.lang.String str17 = categoryAxis1.getCategoryLabelToolTip((java.lang.Comparable) (-1.2566468E7d));
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor24 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.axis.AxisLocation axisLocation25 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation26 = axisLocation25.getOpposite();
        boolean boolean27 = itemLabelAnchor24.equals((java.lang.Object) axisLocation25);
        org.jfree.chart.plot.CategoryPlot categoryPlot28 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke29 = categoryPlot28.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot30 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke31 = categoryPlot30.getRangeMinorGridlineStroke();
        categoryPlot28.setParent((org.jfree.chart.plot.Plot) categoryPlot30);
        org.jfree.chart.LegendItemCollection legendItemCollection33 = categoryPlot28.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent34 = null;
        categoryPlot28.axisChanged(axisChangeEvent34);
        org.jfree.chart.axis.AxisSpace axisSpace36 = categoryPlot28.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset37 = null;
        categoryPlot28.setDataset(categoryDataset37);
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot28.setDomainCrosshairStroke(stroke39);
        java.awt.Stroke stroke41 = categoryPlot28.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent42 = null;
        categoryPlot28.annotationChanged(annotationChangeEvent42);
        org.jfree.chart.plot.CategoryPlot categoryPlot44 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation45 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot44.setOrientation(plotOrientation45);
        categoryPlot28.setOrientation(plotOrientation45);
        org.jfree.chart.util.RectangleEdge rectangleEdge48 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(axisLocation25, plotOrientation45);
        try {
            double double49 = categoryAxis1.getCategorySeriesMiddle(2, 175, (int) '#', 175, (-9.0d), rectangle2D23, rectangleEdge48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(itemLabelAnchor24);
        org.junit.Assert.assertNotNull(axisLocation25);
        org.junit.Assert.assertNotNull(axisLocation26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNull(legendItemCollection33);
        org.junit.Assert.assertNull(axisSpace36);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(plotOrientation45);
        org.junit.Assert.assertNotNull(rectangleEdge48);
    }

    @Test
    public void test346() throws Throwable {
printRuntimeMSG("---RegressionTest1:test346");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test346");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent14 = null;
        categoryPlot9.markerChanged(markerChangeEvent14);
        org.jfree.chart.event.PlotChangeListener plotChangeListener16 = null;
        categoryPlot9.removeChangeListener(plotChangeListener16);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo20 = null;
        java.awt.geom.Point2D point2D21 = null;
        categoryPlot9.zoomRangeAxes(0.0d, (double) (-65536), plotRenderingInfo20, point2D21);
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor24 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.axis.AxisLocation axisLocation25 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation26 = axisLocation25.getOpposite();
        boolean boolean27 = itemLabelAnchor24.equals((java.lang.Object) axisLocation25);
        categoryPlot9.setDomainAxisLocation(5, axisLocation25, false);
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertNotNull(itemLabelAnchor24);
        org.junit.Assert.assertNotNull(axisLocation25);
        org.junit.Assert.assertNotNull(axisLocation26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test347() throws Throwable {
printRuntimeMSG("---RegressionTest1:test347");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test347");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer2.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean12 = lineAndShapeRenderer2.getBaseShapesVisible();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-8355712));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition15 = lineAndShapeRenderer2.getBaseNegativeItemLabelPosition();
        int int16 = lineAndShapeRenderer2.getColumnCount();
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = lineAndShapeRenderer2.getPlot();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition14);
        org.junit.Assert.assertNotNull(itemLabelPosition15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(categoryPlot17);
    }

    @Test
    public void test348() throws Throwable {
printRuntimeMSG("---RegressionTest1:test348");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test348");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.clearSelection();
        try {
            defaultCategoryDataset44.removeRow((-16777216));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
    }

    @Test
    public void test349() throws Throwable {
printRuntimeMSG("---RegressionTest1:test349");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test349");
        org.jfree.chart.LegendItemCollection legendItemCollection0 = new org.jfree.chart.LegendItemCollection();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean5 = lineAndShapeRenderer3.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean6 = lineAndShapeRenderer3.getBaseLinesVisible();
        lineAndShapeRenderer3.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer3.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator12 = null;
        lineAndShapeRenderer3.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator12, true);
        java.awt.Shape shape16 = lineAndShapeRenderer3.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        categoryPlot17.setParent((org.jfree.chart.plot.Plot) categoryPlot19);
        org.jfree.chart.LegendItemCollection legendItemCollection22 = categoryPlot17.getFixedLegendItems();
        java.lang.Comparable comparable23 = categoryPlot17.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge24 = categoryPlot17.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent25 = null;
        categoryPlot17.notifyListeners(plotChangeEvent25);
        boolean boolean27 = categoryPlot17.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath28 = null;
        java.awt.geom.Rectangle2D rectangle2D29 = null;
        org.jfree.chart.RenderingSource renderingSource30 = null;
        categoryPlot17.select(generalPath28, rectangle2D29, renderingSource30);
        org.jfree.chart.util.ShadowGenerator shadowGenerator32 = null;
        categoryPlot17.setShadowGenerator(shadowGenerator32);
        org.jfree.chart.entity.PlotEntity plotEntity34 = new org.jfree.chart.entity.PlotEntity(shape16, (org.jfree.chart.plot.Plot) categoryPlot17);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer37 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean39 = lineAndShapeRenderer37.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean40 = lineAndShapeRenderer37.getBaseLinesVisible();
        lineAndShapeRenderer37.setAutoPopulateSeriesPaint(false);
        boolean boolean43 = lineAndShapeRenderer37.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition44 = lineAndShapeRenderer37.getBasePositiveItemLabelPosition();
        boolean boolean45 = plotEntity34.equals((java.lang.Object) itemLabelPosition44);
        java.lang.Object obj46 = plotEntity34.clone();
        java.awt.Shape shape51 = null;
        java.awt.Color color52 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color54 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape51, (java.awt.Paint) color52, stroke53, (java.awt.Paint) color54);
        java.awt.Paint paint56 = legendItem55.getFillPaint();
        java.awt.Font font57 = legendItem55.getLabelFont();
        legendItem55.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer60 = legendItem55.getFillPaintTransformer();
        boolean boolean61 = plotEntity34.equals((java.lang.Object) legendItem55);
        legendItemCollection0.add(legendItem55);
        java.awt.Shape shape67 = null;
        java.awt.Color color68 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke69 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color70 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem71 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape67, (java.awt.Paint) color68, stroke69, (java.awt.Paint) color70);
        int int72 = legendItem71.getSeriesIndex();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer73 = legendItem71.getFillPaintTransformer();
        legendItem55.setFillPaintTransformer(gradientPaintTransformer73);
        java.awt.Paint paint75 = legendItem55.getLabelPaint();
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNull(legendItemCollection22);
        org.junit.Assert.assertNull(comparable23);
        org.junit.Assert.assertNotNull(rectangleEdge24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(color54);
        org.junit.Assert.assertNotNull(paint56);
        org.junit.Assert.assertNull(font57);
        org.junit.Assert.assertNotNull(gradientPaintTransformer60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(color68);
        org.junit.Assert.assertNotNull(stroke69);
        org.junit.Assert.assertNotNull(color70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(gradientPaintTransformer73);
        org.junit.Assert.assertNull(paint75);
    }

    @Test
    public void test350() throws Throwable {
printRuntimeMSG("---RegressionTest1:test350");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test350");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean8 = lineAndShapeRenderer2.getUseFillPaint();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesItemLabelsVisible(0);
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false);
        boolean boolean13 = lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly();
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test351() throws Throwable {
printRuntimeMSG("---RegressionTest1:test351");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test351");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        java.awt.Paint paint6 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray7 = new java.awt.Paint[] { paint6 };
        java.awt.Color color8 = java.awt.Color.BLUE;
        java.awt.Color color9 = java.awt.Color.RED;
        java.awt.Paint paint10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray11 = new java.awt.Paint[] { color8, color9, paint10 };
        java.awt.Color color12 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel13 = null;
        java.awt.Rectangle rectangle14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        java.awt.geom.AffineTransform affineTransform16 = null;
        java.awt.RenderingHints renderingHints17 = null;
        java.awt.PaintContext paintContext18 = color12.createContext(colorModel13, rectangle14, rectangle2D15, affineTransform16, renderingHints17);
        java.awt.Color color19 = java.awt.Color.WHITE;
        java.awt.Color color20 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel21 = null;
        java.awt.Rectangle rectangle22 = null;
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        java.awt.geom.AffineTransform affineTransform24 = null;
        java.awt.RenderingHints renderingHints25 = null;
        java.awt.PaintContext paintContext26 = color20.createContext(colorModel21, rectangle22, rectangle2D23, affineTransform24, renderingHints25);
        java.awt.Color color27 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray28 = new java.awt.Paint[] { color12, color19, color20, color27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray34 = new java.awt.Stroke[] { stroke29, stroke30, stroke31, stroke32, stroke33 };
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot37 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke38 = categoryPlot37.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray39 = new java.awt.Stroke[] { stroke35, stroke36, stroke38 };
        java.awt.Shape shape40 = null;
        java.awt.Shape[] shapeArray41 = new java.awt.Shape[] { shape40 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier42 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray7, paintArray11, paintArray28, strokeArray34, strokeArray39, shapeArray41);
        java.awt.Paint paint43 = defaultDrawingSupplier42.getNextOutlinePaint();
        java.lang.Object obj44 = defaultDrawingSupplier42.clone();
        java.awt.Paint paint45 = defaultDrawingSupplier42.getNextOutlinePaint();
        categoryPlot0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier42);
        java.awt.Shape shape47 = defaultDrawingSupplier42.getNextShape();
        java.lang.Object obj48 = defaultDrawingSupplier42.clone();
        java.awt.Shape shape49 = defaultDrawingSupplier42.getNextShape();
        java.awt.Paint paint50 = defaultDrawingSupplier42.getNextFillPaint();
        java.awt.Stroke stroke51 = defaultDrawingSupplier42.getNextStroke();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNotNull(paintArray7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(paintArray11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paintContext18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(paintContext26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(paintArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(strokeArray34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(strokeArray39);
        org.junit.Assert.assertNotNull(shapeArray41);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNull(shape47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNull(shape49);
        org.junit.Assert.assertNotNull(paint50);
        org.junit.Assert.assertNotNull(stroke51);
    }

    @Test
    public void test352() throws Throwable {
printRuntimeMSG("---RegressionTest1:test352");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test352");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Paint paint7 = lineAndShapeRenderer2.lookupSeriesOutlinePaint((int) (byte) 1);
        java.awt.Font font8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer2.setBaseLegendTextFont(font8);
        lineAndShapeRenderer2.setAutoPopulateSeriesOutlineStroke(false);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator13 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator(0, categoryURLGenerator13, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertNotNull(font8);
    }

    @Test
    public void test353() throws Throwable {
printRuntimeMSG("---RegressionTest1:test353");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test353");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean57 = lineAndShapeRenderer55.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean58 = lineAndShapeRenderer55.getBaseLinesVisible();
        lineAndShapeRenderer55.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer55.setAutoPopulateSeriesShape(false);
        boolean boolean63 = categoryItemEntity47.equals((java.lang.Object) lineAndShapeRenderer55);
        java.lang.String str64 = categoryItemEntity47.getShapeCoords();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0" + "'", str64.equals("4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0"));
    }

    @Test
    public void test354() throws Throwable {
printRuntimeMSG("---RegressionTest1:test354");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test354");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo13, point2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo19 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState20 = null;
        boolean boolean21 = categoryPlot0.render(graphics2D16, rectangle2D17, (int) (byte) 100, plotRenderingInfo19, categoryCrosshairState20);
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) (byte) 100);
        boolean boolean24 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo27 = null;
        java.awt.geom.Point2D point2D28 = null;
        categoryPlot0.zoomDomainAxes((double) 10.0f, (double) (byte) -1, plotRenderingInfo27, point2D28);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent30 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        int int31 = categoryPlot0.getRendererCount();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test355() throws Throwable {
printRuntimeMSG("---RegressionTest1:test355");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test355");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint5 = lineAndShapeRenderer2.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = lineAndShapeRenderer2.getSeriesURLGenerator(0);
        double double8 = lineAndShapeRenderer2.getItemMargin();
        java.awt.Stroke stroke10 = lineAndShapeRenderer2.lookupSeriesOutlineStroke(100);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer13.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        lineAndShapeRenderer13.setDefaultEntityRadius(3);
        java.awt.Font font23 = lineAndShapeRenderer13.lookupLegendTextFont((int) (short) 100);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer26.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean29 = lineAndShapeRenderer26.getBaseLinesVisible();
        lineAndShapeRenderer26.setAutoPopulateSeriesPaint(false);
        boolean boolean32 = lineAndShapeRenderer26.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator33 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer26.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator33);
        java.lang.Object obj35 = standardCategorySeriesLabelGenerator33.clone();
        lineAndShapeRenderer13.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator33);
        lineAndShapeRenderer2.setLegendItemLabelGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator33);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNull(categoryURLGenerator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNull(font23);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test356() throws Throwable {
printRuntimeMSG("---RegressionTest1:test356");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test356");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent5 = null;
        categoryPlot2.annotationChanged(annotationChangeEvent5);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator10 = lineAndShapeRenderer9.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator11 = null;
        lineAndShapeRenderer9.setBaseToolTipGenerator(categoryToolTipGenerator11);
        java.awt.Paint paint14 = lineAndShapeRenderer9.lookupSeriesOutlinePaint((int) (byte) 1);
        categoryPlot2.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer9);
        java.lang.Comparable comparable16 = categoryPlot2.getDomainCrosshairRowKey();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(categoryItemLabelGenerator10);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNull(comparable16);
    }

    @Test
    public void test357() throws Throwable {
printRuntimeMSG("---RegressionTest1:test357");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test357");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer1 = barRenderer0.getGradientPaintTransformer();
        org.junit.Assert.assertNotNull(gradientPaintTransformer1);
    }

    @Test
    public void test358() throws Throwable {
printRuntimeMSG("---RegressionTest1:test358");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test358");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        java.awt.Paint paint6 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray7 = new java.awt.Paint[] { paint6 };
        java.awt.Color color8 = java.awt.Color.BLUE;
        java.awt.Color color9 = java.awt.Color.RED;
        java.awt.Paint paint10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray11 = new java.awt.Paint[] { color8, color9, paint10 };
        java.awt.Color color12 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel13 = null;
        java.awt.Rectangle rectangle14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        java.awt.geom.AffineTransform affineTransform16 = null;
        java.awt.RenderingHints renderingHints17 = null;
        java.awt.PaintContext paintContext18 = color12.createContext(colorModel13, rectangle14, rectangle2D15, affineTransform16, renderingHints17);
        java.awt.Color color19 = java.awt.Color.WHITE;
        java.awt.Color color20 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel21 = null;
        java.awt.Rectangle rectangle22 = null;
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        java.awt.geom.AffineTransform affineTransform24 = null;
        java.awt.RenderingHints renderingHints25 = null;
        java.awt.PaintContext paintContext26 = color20.createContext(colorModel21, rectangle22, rectangle2D23, affineTransform24, renderingHints25);
        java.awt.Color color27 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray28 = new java.awt.Paint[] { color12, color19, color20, color27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray34 = new java.awt.Stroke[] { stroke29, stroke30, stroke31, stroke32, stroke33 };
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot37 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke38 = categoryPlot37.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray39 = new java.awt.Stroke[] { stroke35, stroke36, stroke38 };
        java.awt.Shape shape40 = null;
        java.awt.Shape[] shapeArray41 = new java.awt.Shape[] { shape40 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier42 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray7, paintArray11, paintArray28, strokeArray34, strokeArray39, shapeArray41);
        java.awt.Paint paint43 = defaultDrawingSupplier42.getNextOutlinePaint();
        java.lang.Object obj44 = defaultDrawingSupplier42.clone();
        java.awt.Paint paint45 = defaultDrawingSupplier42.getNextOutlinePaint();
        categoryPlot0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier42);
        categoryPlot0.setDomainGridlinesVisible(false);
        org.jfree.chart.axis.AxisSpace axisSpace49 = categoryPlot0.getFixedRangeAxisSpace();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNotNull(paintArray7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(paintArray11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paintContext18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(paintContext26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(paintArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(strokeArray34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(strokeArray39);
        org.junit.Assert.assertNotNull(shapeArray41);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNull(axisSpace49);
    }

    @Test
    public void test359() throws Throwable {
printRuntimeMSG("---RegressionTest1:test359");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test359");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes13 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean19 = lineAndShapeRenderer17.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean20 = lineAndShapeRenderer17.getBaseLinesVisible();
        java.awt.Shape shape21 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer17.setBaseLegendShape(shape21);
        renderAttributes13.setSeriesShape((int) ' ', shape21);
        org.jfree.chart.entity.ChartEntity chartEntity25 = new org.jfree.chart.entity.ChartEntity(shape21, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color28 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem29 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color28);
        java.lang.String str30 = legendItem29.getToolTipText();
        java.awt.Stroke stroke31 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem29.setOutlineStroke(stroke31);
        java.awt.Shape shape37 = null;
        java.awt.Color color38 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color40 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape37, (java.awt.Paint) color38, stroke39, (java.awt.Paint) color40);
        java.lang.Class<?> wildcardClass42 = color38.getClass();
        org.jfree.chart.LegendItem legendItem43 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape21, paint26, stroke31, (java.awt.Paint) color38);
        org.jfree.chart.entity.ChartEntity chartEntity44 = new org.jfree.chart.entity.ChartEntity(shape21);
        java.awt.Color color45 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem46 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape21, (java.awt.Paint) color45);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset49 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity52 = new org.jfree.chart.entity.CategoryItemEntity(shape21, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset49, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str53 = categoryItemEntity52.toString();
        java.awt.Shape shape54 = categoryItemEntity52.getArea();
        org.jfree.chart.entity.ChartEntity chartEntity56 = new org.jfree.chart.entity.ChartEntity(shape54, "");
        renderAttributes0.setDefaultShape(shape54);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(shape21);
        org.junit.Assert.assertNotNull(paint26);
        org.junit.Assert.assertNotNull(color28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(color45);
        org.junit.Assert.assertNotNull(shape54);
    }

    @Test
    public void test360() throws Throwable {
printRuntimeMSG("---RegressionTest1:test360");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test360");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean57 = lineAndShapeRenderer55.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean58 = lineAndShapeRenderer55.getBaseLinesVisible();
        lineAndShapeRenderer55.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer55.setAutoPopulateSeriesShape(false);
        boolean boolean63 = categoryItemEntity47.equals((java.lang.Object) lineAndShapeRenderer55);
        java.lang.String str64 = categoryItemEntity47.toString();
        org.jfree.data.category.CategoryDataset categoryDataset65 = categoryItemEntity47.getDataset();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(categoryDataset65);
    }

    @Test
    public void test361() throws Throwable {
printRuntimeMSG("---RegressionTest1:test361");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test361");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset52 = new org.jfree.data.category.AbstractCategoryDataset();
        org.jfree.data.general.DatasetGroup datasetGroup53 = new org.jfree.data.general.DatasetGroup();
        abstractCategoryDataset52.setGroup(datasetGroup53);
        defaultCategoryDataset47.setGroup(datasetGroup53);
        defaultCategoryDataset47.setValue((-9.0d), (java.lang.Comparable) '#', (java.lang.Comparable) "ChartEntity: tooltip = org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT");
        org.jfree.data.general.DatasetGroup datasetGroup60 = defaultCategoryDataset47.getGroup();
        try {
            defaultCategoryDataset47.setSelected(128, 0, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 128, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(datasetGroup60);
    }

    @Test
    public void test362() throws Throwable {
printRuntimeMSG("---RegressionTest1:test362");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test362");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, (int) (byte) 1, plotRenderingInfo10, categoryCrosshairState11);
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation15 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation16 = axisLocation15.getOpposite();
        categoryPlot13.setDomainAxisLocation(axisLocation16, false);
        boolean boolean19 = categoryPlot13.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition25 = null;
        lineAndShapeRenderer23.setSeriesPositiveItemLabelPosition(0, itemLabelPosition25);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator27 = null;
        lineAndShapeRenderer23.setLegendItemToolTipGenerator(categorySeriesLabelGenerator27);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition29 = lineAndShapeRenderer23.getBasePositiveItemLabelPosition();
        boolean boolean30 = lineAndShapeRenderer23.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition31 = lineAndShapeRenderer23.getBasePositiveItemLabelPosition();
        java.lang.Object obj32 = lineAndShapeRenderer23.clone();
        categoryPlot13.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer23, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator35 = null;
        lineAndShapeRenderer23.setBaseURLGenerator(categoryURLGenerator35);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset37 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range38 = lineAndShapeRenderer23.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset37);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer39 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset37);
        try {
            defaultCategoryDataset37.setSelected((int) (byte) -1, 0, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(axisLocation15);
        org.junit.Assert.assertNotNull(axisLocation16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNull(range38);
        org.junit.Assert.assertNull(categoryItemRenderer39);
    }

    @Test
    public void test363() throws Throwable {
printRuntimeMSG("---RegressionTest1:test363");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test363");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        boolean boolean14 = lineAndShapeRenderer2.getAutoPopulateSeriesStroke();
        try {
            lineAndShapeRenderer2.setSeriesCreateEntities((-8355712), (java.lang.Boolean) true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test364() throws Throwable {
printRuntimeMSG("---RegressionTest1:test364");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test364");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.util.List list27 = keyedObjects0.getKeys();
        int int29 = keyedObjects0.getIndex((java.lang.Comparable) 0.0d);
        try {
            java.lang.Comparable comparable31 = keyedObjects0.getKey((-739));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test365() throws Throwable {
printRuntimeMSG("---RegressionTest1:test365");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test365");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        defaultCategoryDataset47.addValue((java.lang.Number) (-8355712), (java.lang.Comparable) '4', (java.lang.Comparable) 2.0d);
        defaultCategoryDataset47.addValue((java.lang.Number) 100, (java.lang.Comparable) 100.0d, (java.lang.Comparable) 192);
        try {
            defaultCategoryDataset47.removeRow((java.lang.Comparable) (-13.0d));
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (-13.0) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
    }

    @Test
    public void test366() throws Throwable {
printRuntimeMSG("---RegressionTest1:test366");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test366");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        java.awt.Paint paint6 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray7 = new java.awt.Paint[] { paint6 };
        java.awt.Color color8 = java.awt.Color.BLUE;
        java.awt.Color color9 = java.awt.Color.RED;
        java.awt.Paint paint10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray11 = new java.awt.Paint[] { color8, color9, paint10 };
        java.awt.Color color12 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel13 = null;
        java.awt.Rectangle rectangle14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        java.awt.geom.AffineTransform affineTransform16 = null;
        java.awt.RenderingHints renderingHints17 = null;
        java.awt.PaintContext paintContext18 = color12.createContext(colorModel13, rectangle14, rectangle2D15, affineTransform16, renderingHints17);
        java.awt.Color color19 = java.awt.Color.WHITE;
        java.awt.Color color20 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel21 = null;
        java.awt.Rectangle rectangle22 = null;
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        java.awt.geom.AffineTransform affineTransform24 = null;
        java.awt.RenderingHints renderingHints25 = null;
        java.awt.PaintContext paintContext26 = color20.createContext(colorModel21, rectangle22, rectangle2D23, affineTransform24, renderingHints25);
        java.awt.Color color27 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray28 = new java.awt.Paint[] { color12, color19, color20, color27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray34 = new java.awt.Stroke[] { stroke29, stroke30, stroke31, stroke32, stroke33 };
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot37 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke38 = categoryPlot37.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray39 = new java.awt.Stroke[] { stroke35, stroke36, stroke38 };
        java.awt.Shape shape40 = null;
        java.awt.Shape[] shapeArray41 = new java.awt.Shape[] { shape40 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier42 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray7, paintArray11, paintArray28, strokeArray34, strokeArray39, shapeArray41);
        java.awt.Paint paint43 = defaultDrawingSupplier42.getNextOutlinePaint();
        java.lang.Object obj44 = defaultDrawingSupplier42.clone();
        java.awt.Paint paint45 = defaultDrawingSupplier42.getNextOutlinePaint();
        categoryPlot0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier42);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo48 = null;
        java.awt.geom.Point2D point2D49 = null;
        categoryPlot0.panDomainAxes((double) 0, plotRenderingInfo48, point2D49);
        java.awt.Color color51 = org.jfree.chart.ChartColor.DARK_RED;
        categoryPlot0.setRangeZeroBaselinePaint((java.awt.Paint) color51);
        java.awt.Stroke stroke53 = categoryPlot0.getRangeMinorGridlineStroke();
        java.lang.Comparable comparable54 = categoryPlot0.getDomainCrosshairColumnKey();
        categoryPlot0.setDomainCrosshairVisible(false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNotNull(paintArray7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(paintArray11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paintContext18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(paintContext26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(paintArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(strokeArray34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(strokeArray39);
        org.junit.Assert.assertNotNull(shapeArray41);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNull(comparable54);
    }

    @Test
    public void test367() throws Throwable {
printRuntimeMSG("---RegressionTest1:test367");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test367");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = null;
        lineAndShapeRenderer10.setSeriesPositiveItemLabelPosition(0, itemLabelPosition12);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator14 = null;
        lineAndShapeRenderer10.setLegendItemToolTipGenerator(categorySeriesLabelGenerator14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        boolean boolean17 = lineAndShapeRenderer10.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition18 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        java.lang.Object obj19 = lineAndShapeRenderer10.clone();
        categoryPlot0.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer10, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator22 = null;
        lineAndShapeRenderer10.setBaseURLGenerator(categoryURLGenerator22);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset24 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range25 = lineAndShapeRenderer10.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset24);
        java.lang.Object obj26 = defaultCategoryDataset24.clone();
        defaultCategoryDataset24.validateObject();
        defaultCategoryDataset24.validateObject();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test368() throws Throwable {
printRuntimeMSG("---RegressionTest1:test368");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test368");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.lang.Object obj6 = lineAndShapeRenderer2.clone();
        boolean boolean7 = lineAndShapeRenderer2.getAutoPopulateSeriesStroke();
        java.awt.Graphics2D graphics2D8 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = null;
        java.awt.geom.Rectangle2D rectangle2D10 = null;
        try {
            lineAndShapeRenderer2.drawBackground(graphics2D8, categoryPlot9, rectangle2D10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test369() throws Throwable {
printRuntimeMSG("---RegressionTest1:test369");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test369");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        int int10 = categoryPlot9.getRendererCount();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test370() throws Throwable {
printRuntimeMSG("---RegressionTest1:test370");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test370");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        categoryAxis11.setLowerMargin((double) 8);
        int int16 = categoryAxis11.getCategoryLabelPositionOffset();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test371() throws Throwable {
printRuntimeMSG("---RegressionTest1:test371");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test371");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint9 = lineAndShapeRenderer2.getLegendTextPaint((-1));
        java.lang.Object obj10 = lineAndShapeRenderer2.clone();
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (short) 1, (java.lang.Boolean) false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test372() throws Throwable {
printRuntimeMSG("---RegressionTest1:test372");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test372");
        org.jfree.chart.util.RectangleInsets rectangleInsets4 = new org.jfree.chart.util.RectangleInsets(10.0d, (double) 1.0f, (double) 10.0f, (double) (-1));
        double double6 = rectangleInsets4.calculateTopOutset((-4.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test373() throws Throwable {
printRuntimeMSG("---RegressionTest1:test373");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test373");
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator1 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator("hi!");
        java.lang.Object obj2 = standardCategorySeriesLabelGenerator1.clone();
        org.junit.Assert.assertNotNull(obj2);
    }

    @Test
    public void test374() throws Throwable {
printRuntimeMSG("---RegressionTest1:test374");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test374");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation4 = categoryPlot0.getOrientation();
        org.jfree.chart.renderer.category.BarRenderer barRenderer6 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint7 = barRenderer6.getShadowPaint();
        boolean boolean8 = barRenderer6.getBaseSeriesVisible();
        categoryPlot0.setRenderer((int) (short) 100, (org.jfree.chart.renderer.category.CategoryItemRenderer) barRenderer6);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke13 = categoryPlot12.getRangeMinorGridlineStroke();
        categoryPlot10.setParent((org.jfree.chart.plot.Plot) categoryPlot12);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent15 = null;
        categoryPlot12.annotationChanged(annotationChangeEvent15);
        org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder17 = org.jfree.chart.plot.DatasetRenderingOrder.FORWARD;
        categoryPlot12.setDatasetRenderingOrder(datasetRenderingOrder17);
        categoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder17);
        int int20 = categoryPlot0.getDomainAxisCount();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plotOrientation4);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(datasetRenderingOrder17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test375() throws Throwable {
printRuntimeMSG("---RegressionTest1:test375");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test375");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        java.lang.Comparable comparable9 = categoryPlot0.getDomainCrosshairRowKey();
        java.awt.Paint paint10 = categoryPlot0.getRangeGridlinePaint();
        categoryPlot0.setRangeCrosshairVisible(false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNull(comparable9);
        org.junit.Assert.assertNotNull(paint10);
    }

    @Test
    public void test376() throws Throwable {
printRuntimeMSG("---RegressionTest1:test376");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test376");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.isDomainGridlinesVisible();
        org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder7 = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;
        categoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder7);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datasetRenderingOrder7);
    }

    @Test
    public void test377() throws Throwable {
printRuntimeMSG("---RegressionTest1:test377");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test377");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint12 = lineAndShapeRenderer2.getBaseItemLabelPaint();
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator((int) (short) 0, categoryItemLabelGenerator14);
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator16 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float17 = defaultShadowGenerator16.getShadowOpacity();
        java.awt.Color color18 = defaultShadowGenerator16.getShadowColor();
        int int19 = defaultShadowGenerator16.getShadowSize();
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor20 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE6;
        org.jfree.chart.text.TextAnchor textAnchor21 = org.jfree.chart.text.TextAnchor.TOP_CENTER;
        org.jfree.chart.text.TextAnchor textAnchor22 = org.jfree.chart.text.TextAnchor.TOP_CENTER;
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition24 = new org.jfree.chart.labels.ItemLabelPosition(itemLabelAnchor20, textAnchor21, textAnchor22, (double) 100.0f);
        boolean boolean25 = defaultShadowGenerator16.equals((java.lang.Object) itemLabelPosition24);
        lineAndShapeRenderer2.setBaseNegativeItemLabelPosition(itemLabelPosition24, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(paint12);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.5f + "'", float17 == 0.5f);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(itemLabelAnchor20);
        org.junit.Assert.assertNotNull(textAnchor21);
        org.junit.Assert.assertNotNull(textAnchor22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test378() throws Throwable {
printRuntimeMSG("---RegressionTest1:test378");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test378");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        categoryPlot0.setNoDataMessage("");
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = null;
        java.util.List list7 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(list7);
    }

    @Test
    public void test379() throws Throwable {
printRuntimeMSG("---RegressionTest1:test379");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test379");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint11 = lineAndShapeRenderer2.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        java.awt.Color color13 = org.jfree.chart.ChartColor.DARK_BLUE;
        int int14 = color13.getBlue();
        try {
            lineAndShapeRenderer2.setSeriesOutlinePaint((-12566464), (java.awt.Paint) color13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 192 + "'", int14 == 192);
    }

    @Test
    public void test380() throws Throwable {
printRuntimeMSG("---RegressionTest1:test380");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test380");
        int int0 = java.awt.Transparency.TRANSLUCENT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test381() throws Throwable {
printRuntimeMSG("---RegressionTest1:test381");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test381");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getRangeAxisLocation((-12566464));
        org.jfree.chart.util.RectangleInsets rectangleInsets7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str8 = rectangleInsets7.toString();
        double double9 = rectangleInsets7.getTop();
        categoryPlot0.setAxisOffset(rectangleInsets7);
        categoryPlot0.mapDatasetToDomainAxis((int) (byte) 1, (-65536));
        org.jfree.chart.axis.CategoryAnchor categoryAnchor14 = categoryPlot0.getDomainGridlinePosition();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(rectangleInsets7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str8.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.0d + "'", double9 == 2.0d);
        org.junit.Assert.assertNotNull(categoryAnchor14);
    }

    @Test
    public void test382() throws Throwable {
printRuntimeMSG("---RegressionTest1:test382");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test382");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.clear();
        java.lang.Comparable comparable50 = null;
        try {
            defaultCategoryDataset44.incrementValue((-9.0d), comparable50, (java.lang.Comparable) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
    }

    @Test
    public void test383() throws Throwable {
printRuntimeMSG("---RegressionTest1:test383");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test383");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = null;
        java.util.List list11 = categoryPlot0.getCategoriesForAxis(categoryAxis10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = null;
        categoryPlot0.notifyListeners(plotChangeEvent12);
        boolean boolean14 = categoryPlot0.isDomainCrosshairVisible();
        categoryPlot0.clearRangeMarkers();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test384() throws Throwable {
printRuntimeMSG("---RegressionTest1:test384");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test384");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent14 = null;
        categoryPlot0.annotationChanged(annotationChangeEvent14);
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation17 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot16.setOrientation(plotOrientation17);
        categoryPlot0.setOrientation(plotOrientation17);
        org.jfree.data.category.CategoryDataset categoryDataset20 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis21 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis21.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis24 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator28 = lineAndShapeRenderer27.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot29 = new org.jfree.chart.plot.CategoryPlot(categoryDataset20, categoryAxis21, valueAxis24, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer27);
        boolean boolean30 = categoryAxis21.isTickLabelsVisible();
        double double31 = categoryAxis21.getFixedDimension();
        java.lang.Object obj32 = categoryAxis21.clone();
        java.awt.Paint paint33 = categoryAxis21.getLabelPaint();
        boolean boolean34 = plotOrientation17.equals((java.lang.Object) categoryAxis21);
        categoryAxis21.setTickMarksVisible(false);
        double double37 = categoryAxis21.getFixedDimension();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(plotOrientation17);
        org.junit.Assert.assertNull(categoryItemLabelGenerator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(paint33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test385() throws Throwable {
printRuntimeMSG("---RegressionTest1:test385");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test385");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        categoryPlot0.drawBackgroundImage(graphics2D3, rectangle2D4);
        java.awt.Graphics2D graphics2D6 = null;
        java.awt.geom.Rectangle2D rectangle2D7 = null;
        categoryPlot0.drawBackgroundImage(graphics2D6, rectangle2D7);
        org.jfree.chart.util.StrokeList strokeList9 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        java.awt.Paint paint15 = lineAndShapeRenderer12.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator17 = lineAndShapeRenderer12.getSeriesURLGenerator(0);
        boolean boolean18 = strokeList9.equals((java.lang.Object) categoryURLGenerator17);
        java.awt.Stroke stroke20 = strokeList9.getStroke((-12566464));
        strokeList9.clear();
        org.jfree.chart.plot.CategoryPlot categoryPlot23 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke24 = categoryPlot23.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke26 = categoryPlot25.getRangeMinorGridlineStroke();
        categoryPlot23.setParent((org.jfree.chart.plot.Plot) categoryPlot25);
        org.jfree.chart.LegendItemCollection legendItemCollection28 = categoryPlot23.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent29 = null;
        categoryPlot23.axisChanged(axisChangeEvent29);
        org.jfree.chart.axis.AxisSpace axisSpace31 = categoryPlot23.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset32 = null;
        categoryPlot23.setDataset(categoryDataset32);
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot23.setDomainCrosshairStroke(stroke34);
        java.awt.Stroke stroke36 = categoryPlot23.getRangeGridlineStroke();
        strokeList9.setStroke((int) '#', stroke36);
        categoryPlot0.setRangeMinorGridlineStroke(stroke36);
        categoryPlot0.setDomainGridlinesVisible(false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertNull(categoryURLGenerator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(stroke20);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNull(legendItemCollection28);
        org.junit.Assert.assertNull(axisSpace31);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke36);
    }

    @Test
    public void test386() throws Throwable {
printRuntimeMSG("---RegressionTest1:test386");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test386");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.lang.String str10 = legendItem8.getURLText();
        java.awt.Paint paint11 = legendItem8.getFillPaint();
        int int12 = legendItem8.getDatasetIndex();
        java.text.AttributedString attributedString13 = legendItem8.getAttributedLabel();
        java.lang.Comparable comparable14 = legendItem8.getSeriesKey();
        legendItem8.setDatasetIndex(5);
        java.lang.String str17 = legendItem8.getURLText();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str10.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(attributedString13);
        org.junit.Assert.assertNull(comparable14);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str17.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
    }

    @Test
    public void test387() throws Throwable {
printRuntimeMSG("---RegressionTest1:test387");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test387");
        org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder0 = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;
        java.lang.String str1 = datasetRenderingOrder0.toString();
        org.junit.Assert.assertNotNull(datasetRenderingOrder0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "DatasetRenderingOrder.REVERSE" + "'", str1.equals("DatasetRenderingOrder.REVERSE"));
    }

    @Test
    public void test388() throws Throwable {
printRuntimeMSG("---RegressionTest1:test388");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test388");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        org.jfree.chart.util.SortOrder sortOrder51 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer52 = categoryPlot0.getRenderer();
        categoryPlot0.clearRangeAxes();
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(sortOrder51);
        org.junit.Assert.assertNull(categoryItemRenderer52);
    }

    @Test
    public void test389() throws Throwable {
printRuntimeMSG("---RegressionTest1:test389");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test389");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        categoryPlot0.setRangePannable(true);
        boolean boolean12 = categoryPlot0.isDomainGridlinesVisible();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) 10);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test390() throws Throwable {
printRuntimeMSG("---RegressionTest1:test390");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test390");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = null;
        java.util.List list11 = categoryPlot0.getCategoriesForAxis(categoryAxis10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = null;
        categoryPlot0.notifyListeners(plotChangeEvent12);
        org.jfree.chart.event.PlotChangeListener plotChangeListener14 = null;
        categoryPlot0.addChangeListener(plotChangeListener14);
        org.jfree.chart.plot.Marker marker17 = null;
        org.jfree.chart.util.Layer layer18 = null;
        try {
            boolean boolean20 = categoryPlot0.removeRangeMarker((-739), marker17, layer18, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(list11);
    }

    @Test
    public void test391() throws Throwable {
printRuntimeMSG("---RegressionTest1:test391");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test391");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.util.List list1 = keyedObjects2D0.getColumnKeys();
        keyedObjects2D0.addObject((java.lang.Object) 255, (java.lang.Comparable) (-65536), (java.lang.Comparable) 0.2d);
        java.util.List list6 = keyedObjects2D0.getColumnKeys();
        try {
            keyedObjects2D0.removeColumn((java.lang.Comparable) ' ');
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Column key ( ) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test392() throws Throwable {
printRuntimeMSG("---RegressionTest1:test392");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test392");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        org.jfree.chart.event.PlotChangeListener plotChangeListener7 = null;
        categoryPlot0.addChangeListener(plotChangeListener7);
        java.awt.Stroke stroke9 = categoryPlot0.getRangeMinorGridlineStroke();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke9);
    }

    @Test
    public void test393() throws Throwable {
printRuntimeMSG("---RegressionTest1:test393");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test393");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        lineAndShapeRenderer2.setUseSeriesOffset(true);
        boolean boolean13 = lineAndShapeRenderer2.isSeriesVisibleInLegend((int) (byte) 1);
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke15 = categoryPlot14.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer16 = null;
        categoryPlot14.setRenderer(categoryItemRenderer16);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent18 = null;
        categoryPlot14.datasetChanged(datasetChangeEvent18);
        java.awt.Paint paint20 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray21 = new java.awt.Paint[] { paint20 };
        java.awt.Color color22 = java.awt.Color.BLUE;
        java.awt.Color color23 = java.awt.Color.RED;
        java.awt.Paint paint24 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray25 = new java.awt.Paint[] { color22, color23, paint24 };
        java.awt.Color color26 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel27 = null;
        java.awt.Rectangle rectangle28 = null;
        java.awt.geom.Rectangle2D rectangle2D29 = null;
        java.awt.geom.AffineTransform affineTransform30 = null;
        java.awt.RenderingHints renderingHints31 = null;
        java.awt.PaintContext paintContext32 = color26.createContext(colorModel27, rectangle28, rectangle2D29, affineTransform30, renderingHints31);
        java.awt.Color color33 = java.awt.Color.WHITE;
        java.awt.Color color34 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel35 = null;
        java.awt.Rectangle rectangle36 = null;
        java.awt.geom.Rectangle2D rectangle2D37 = null;
        java.awt.geom.AffineTransform affineTransform38 = null;
        java.awt.RenderingHints renderingHints39 = null;
        java.awt.PaintContext paintContext40 = color34.createContext(colorModel35, rectangle36, rectangle2D37, affineTransform38, renderingHints39);
        java.awt.Color color41 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray42 = new java.awt.Paint[] { color26, color33, color34, color41 };
        java.awt.Stroke stroke43 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke44 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke45 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke46 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray48 = new java.awt.Stroke[] { stroke43, stroke44, stroke45, stroke46, stroke47 };
        java.awt.Stroke stroke49 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke50 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot51 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke52 = categoryPlot51.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray53 = new java.awt.Stroke[] { stroke49, stroke50, stroke52 };
        java.awt.Shape shape54 = null;
        java.awt.Shape[] shapeArray55 = new java.awt.Shape[] { shape54 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier56 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray21, paintArray25, paintArray42, strokeArray48, strokeArray53, shapeArray55);
        java.awt.Paint paint57 = defaultDrawingSupplier56.getNextOutlinePaint();
        java.lang.Object obj58 = defaultDrawingSupplier56.clone();
        java.awt.Paint paint59 = defaultDrawingSupplier56.getNextOutlinePaint();
        categoryPlot14.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier56);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo62 = null;
        java.awt.geom.Point2D point2D63 = null;
        categoryPlot14.panDomainAxes((double) 0, plotRenderingInfo62, point2D63);
        java.awt.Color color65 = org.jfree.chart.ChartColor.DARK_RED;
        categoryPlot14.setRangeZeroBaselinePaint((java.awt.Paint) color65);
        lineAndShapeRenderer2.setBaseItemLabelPaint((java.awt.Paint) color65, true);
        java.awt.Shape shape70 = lineAndShapeRenderer2.lookupSeriesShape(0);
        boolean boolean74 = lineAndShapeRenderer2.isItemLabelVisible((int) (short) 10, 2, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(paintArray21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(paintArray25);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(paintContext32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNotNull(paintContext40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(paintArray42);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(stroke46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(strokeArray48);
        org.junit.Assert.assertNotNull(stroke49);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(strokeArray53);
        org.junit.Assert.assertNotNull(shapeArray55);
        org.junit.Assert.assertNotNull(paint57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(paint59);
        org.junit.Assert.assertNotNull(color65);
        org.junit.Assert.assertNotNull(shape70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test394() throws Throwable {
printRuntimeMSG("---RegressionTest1:test394");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test394");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        categoryPlot0.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot9.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo12, point2D13);
        categoryPlot9.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder17 = categoryPlot9.getRowRenderingOrder();
        categoryPlot0.setRowRenderingOrder(sortOrder17);
        double double19 = categoryPlot0.getRangeCrosshairValue();
        org.jfree.chart.util.SortOrder sortOrder20 = categoryPlot0.getColumnRenderingOrder();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent21 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.JFreeChart jFreeChart22 = null;
        plotChangeEvent21.setChart(jFreeChart22);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(sortOrder20);
    }

    @Test
    public void test395() throws Throwable {
printRuntimeMSG("---RegressionTest1:test395");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test395");
        org.jfree.chart.util.RectangleInsets rectangleInsets4 = new org.jfree.chart.util.RectangleInsets((double) (byte) 0, (double) 3, 0.0d, (-0.7853981633974483d));
    }

    @Test
    public void test396() throws Throwable {
printRuntimeMSG("---RegressionTest1:test396");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test396");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Paint paint7 = renderAttributes0.getItemFillPaint((-10), (-15935));
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
    }

    @Test
    public void test397() throws Throwable {
printRuntimeMSG("---RegressionTest1:test397");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test397");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        boolean boolean11 = barRenderer0.getBaseCreateEntities();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test398() throws Throwable {
printRuntimeMSG("---RegressionTest1:test398");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test398");
        org.jfree.chart.util.UnitType unitType0 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        categoryPlot1.setParent((org.jfree.chart.plot.Plot) categoryPlot3);
        org.jfree.chart.LegendItemCollection legendItemCollection6 = categoryPlot1.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier7 = categoryPlot1.getDrawingSupplier();
        java.awt.Stroke stroke8 = categoryPlot1.getOutlineStroke();
        boolean boolean9 = unitType0.equals((java.lang.Object) categoryPlot1);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot1.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo12, point2D13);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean19 = lineAndShapeRenderer17.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean20 = lineAndShapeRenderer17.getBaseLinesVisible();
        java.awt.Shape shape21 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer17.setBaseLegendShape(shape21);
        java.awt.Color color23 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer17.setBaseOutlinePaint((java.awt.Paint) color23, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition30 = null;
        lineAndShapeRenderer28.setSeriesPositiveItemLabelPosition(0, itemLabelPosition30);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer28.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean34 = lineAndShapeRenderer28.getUseFillPaint();
        lineAndShapeRenderer28.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer28.setBaseStroke(stroke37, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray40 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer17, lineAndShapeRenderer28 };
        categoryPlot1.setRenderers(categoryItemRendererArray40);
        categoryPlot1.setForegroundAlpha((float) 5);
        org.jfree.chart.event.PlotChangeListener plotChangeListener44 = null;
        categoryPlot1.addChangeListener(plotChangeListener44);
        categoryPlot1.setDomainGridlinesVisible(true);
        org.junit.Assert.assertNotNull(unitType0);
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNull(legendItemCollection6);
        org.junit.Assert.assertNotNull(drawingSupplier7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(shape21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(categoryItemRendererArray40);
    }

    @Test
    public void test399() throws Throwable {
printRuntimeMSG("---RegressionTest1:test399");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test399");
        java.text.AttributedString attributedString0 = null;
        org.jfree.chart.util.ShapeList shapeList4 = new org.jfree.chart.util.ShapeList();
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        shapeList4.setShape((int) (short) 1, shape18);
        java.awt.Color color44 = java.awt.Color.BLACK;
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator48 = new org.jfree.chart.util.DefaultShadowGenerator(3, color44, 1.0f, 100, 56.0d);
        try {
            org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem(attributedString0, "PlotOrientation.HORIZONTAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", "{0}", shape18, (java.awt.Paint) color44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'label' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(color44);
    }

    @Test
    public void test400() throws Throwable {
printRuntimeMSG("---RegressionTest1:test400");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test400");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        double double11 = categoryAxis1.getFixedDimension();
        java.lang.Object obj12 = categoryAxis1.clone();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        categoryPlot13.setParent((org.jfree.chart.plot.Plot) categoryPlot15);
        categoryAxis1.addChangeListener((org.jfree.chart.event.AxisChangeListener) categoryPlot15);
        java.awt.Color color19 = java.awt.Color.WHITE;
        categoryPlot15.setRangeCrosshairPaint((java.awt.Paint) color19);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo23 = null;
        java.awt.geom.Point2D point2D24 = null;
        categoryPlot15.zoomRangeAxes((double) (byte) -1, (double) 10.0f, plotRenderingInfo23, point2D24);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(color19);
    }

    @Test
    public void test401() throws Throwable {
printRuntimeMSG("---RegressionTest1:test401");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test401");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Color color7 = java.awt.Color.RED;
        renderAttributes5.setDefaultOutlinePaint((java.awt.Paint) color7);
        categoryPlot0.setDomainGridlinePaint((java.awt.Paint) color7);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean18 = lineAndShapeRenderer12.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator22 = lineAndShapeRenderer21.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator23 = null;
        lineAndShapeRenderer21.setBaseToolTipGenerator(categoryToolTipGenerator23);
        java.awt.Font font26 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer21.setSeriesItemLabelFont((int) (short) 0, font26, true);
        lineAndShapeRenderer12.setBaseLegendTextFont(font26);
        org.jfree.chart.LegendItemCollection legendItemCollection30 = lineAndShapeRenderer12.getLegendItems();
        categoryPlot0.setFixedLegendItems(legendItemCollection30);
        java.awt.Graphics2D graphics2D32 = null;
        java.awt.geom.Rectangle2D rectangle2D33 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo35 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState36 = null;
        boolean boolean37 = categoryPlot0.render(graphics2D32, rectangle2D33, (int) '#', plotRenderingInfo35, categoryCrosshairState36);
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor38 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.axis.AxisLocation axisLocation39 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation40 = axisLocation39.getOpposite();
        boolean boolean41 = itemLabelAnchor38.equals((java.lang.Object) axisLocation39);
        org.jfree.chart.plot.CategoryPlot categoryPlot42 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke43 = categoryPlot42.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot44 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke45 = categoryPlot44.getRangeMinorGridlineStroke();
        categoryPlot42.setParent((org.jfree.chart.plot.Plot) categoryPlot44);
        org.jfree.chart.LegendItemCollection legendItemCollection47 = categoryPlot42.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent48 = null;
        categoryPlot42.axisChanged(axisChangeEvent48);
        org.jfree.chart.axis.AxisSpace axisSpace50 = categoryPlot42.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset51 = null;
        categoryPlot42.setDataset(categoryDataset51);
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot42.setDomainCrosshairStroke(stroke53);
        java.awt.Stroke stroke55 = categoryPlot42.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent56 = null;
        categoryPlot42.annotationChanged(annotationChangeEvent56);
        org.jfree.chart.plot.CategoryPlot categoryPlot58 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation59 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot58.setOrientation(plotOrientation59);
        categoryPlot42.setOrientation(plotOrientation59);
        org.jfree.chart.util.RectangleEdge rectangleEdge62 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(axisLocation39, plotOrientation59);
        categoryPlot0.setRangeAxisLocation(axisLocation39);
        boolean boolean64 = categoryPlot0.canSelectByPoint();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator22);
        org.junit.Assert.assertNotNull(font26);
        org.junit.Assert.assertNotNull(legendItemCollection30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(itemLabelAnchor38);
        org.junit.Assert.assertNotNull(axisLocation39);
        org.junit.Assert.assertNotNull(axisLocation40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNull(legendItemCollection47);
        org.junit.Assert.assertNull(axisSpace50);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertNotNull(plotOrientation59);
        org.junit.Assert.assertNotNull(rectangleEdge62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test402() throws Throwable {
printRuntimeMSG("---RegressionTest1:test402");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test402");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.plot.Marker marker5 = null;
        try {
            boolean boolean6 = categoryPlot2.removeRangeMarker(marker5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
    }

    @Test
    public void test403() throws Throwable {
printRuntimeMSG("---RegressionTest1:test403");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test403");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath11 = null;
        java.awt.geom.Rectangle2D rectangle2D12 = null;
        org.jfree.chart.RenderingSource renderingSource13 = null;
        categoryPlot0.select(generalPath11, rectangle2D12, renderingSource13);
        org.jfree.chart.util.RectangleInsets rectangleInsets15 = categoryPlot0.getInsets();
        categoryPlot0.clearDomainMarkers();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(rectangleInsets15);
    }

    @Test
    public void test404() throws Throwable {
printRuntimeMSG("---RegressionTest1:test404");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test404");
        org.jfree.chart.util.ObjectList objectList1 = new org.jfree.chart.util.ObjectList((int) (byte) 10);
    }

    @Test
    public void test405() throws Throwable {
printRuntimeMSG("---RegressionTest1:test405");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test405");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        java.awt.Shape shape50 = null;
        java.awt.Color color51 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke52 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color53 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape50, (java.awt.Paint) color51, stroke52, (java.awt.Paint) color53);
        java.awt.Paint paint55 = legendItem54.getFillPaint();
        java.awt.Font font56 = legendItem54.getLabelFont();
        legendItem54.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer59 = legendItem54.getFillPaintTransformer();
        boolean boolean60 = plotEntity33.equals((java.lang.Object) legendItem54);
        java.lang.Object obj61 = plotEntity33.clone();
        org.jfree.chart.plot.Plot plot62 = plotEntity33.getPlot();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(color53);
        org.junit.Assert.assertNotNull(paint55);
        org.junit.Assert.assertNull(font56);
        org.junit.Assert.assertNotNull(gradientPaintTransformer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(plot62);
    }

    @Test
    public void test406() throws Throwable {
printRuntimeMSG("---RegressionTest1:test406");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test406");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.lang.String str13 = categoryAxis1.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions14 = categoryAxis1.getCategoryLabelPositions();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer17 = null;
        categoryPlot15.setRenderer(categoryItemRenderer17);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = null;
        categoryPlot15.datasetChanged(datasetChangeEvent19);
        org.jfree.data.category.CategoryDataset categoryDataset22 = categoryPlot15.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis23 = new org.jfree.chart.axis.CategoryAxis();
        double double24 = categoryAxis23.getUpperMargin();
        int int25 = categoryPlot15.getDomainAxisIndex(categoryAxis23);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        java.awt.geom.Point2D point2D29 = null;
        categoryPlot15.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo28, point2D29);
        boolean boolean31 = categoryPlot15.getDrawSharedDomainAxis();
        org.jfree.data.category.CategoryDataset categoryDataset32 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis33 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis33.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis36 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer39 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator40 = lineAndShapeRenderer39.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot41 = new org.jfree.chart.plot.CategoryPlot(categoryDataset32, categoryAxis33, valueAxis36, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer39);
        boolean boolean42 = categoryAxis33.isTickLabelsVisible();
        double double43 = categoryAxis33.getFixedDimension();
        java.awt.Paint paint45 = categoryAxis33.getTickLabelPaint((java.lang.Comparable) 4.0d);
        org.jfree.chart.util.RectangleInsets rectangleInsets46 = categoryAxis33.getTickLabelInsets();
        categoryPlot15.setAxisOffset(rectangleInsets46);
        categoryAxis1.setTickLabelInsets(rectangleInsets46);
        double double49 = rectangleInsets46.getBottom();
        double double51 = rectangleInsets46.calculateBottomInset((double) 8);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(categoryLabelPositions14);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNull(categoryDataset22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.05d + "'", double24 == 0.05d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNotNull(rectangleInsets46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2.0d + "'", double49 == 2.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 2.0d + "'", double51 == 2.0d);
    }

    @Test
    public void test407() throws Throwable {
printRuntimeMSG("---RegressionTest1:test407");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test407");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        renderAttributes0.setDefaultShape(shape16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer43 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator44 = lineAndShapeRenderer43.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator48 = lineAndShapeRenderer43.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer43.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean53 = lineAndShapeRenderer43.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint55 = lineAndShapeRenderer43.getSeriesItemLabelPaint((int) (byte) -1);
        java.awt.Paint paint59 = lineAndShapeRenderer43.getItemFillPaint((int) (byte) -1, (int) (byte) 0, true);
        renderAttributes0.setSeriesFillPaint((int) 'a', paint59);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNull(categoryItemLabelGenerator44);
        org.junit.Assert.assertNull(categoryToolTipGenerator48);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertNull(paint55);
        org.junit.Assert.assertNotNull(paint59);
    }

    @Test
    public void test408() throws Throwable {
printRuntimeMSG("---RegressionTest1:test408");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test408");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation4 = categoryPlot0.getOrientation();
        org.jfree.chart.renderer.category.BarRenderer barRenderer6 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint7 = barRenderer6.getShadowPaint();
        boolean boolean8 = barRenderer6.getBaseSeriesVisible();
        categoryPlot0.setRenderer((int) (short) 100, (org.jfree.chart.renderer.category.CategoryItemRenderer) barRenderer6);
        java.awt.Color color14 = java.awt.Color.getHSBColor((float) 0L, (float) (-10), (float) 100L);
        try {
            barRenderer6.setSeriesFillPaint((-12566464), (java.awt.Paint) color14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plotOrientation4);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(color14);
    }

    @Test
    public void test409() throws Throwable {
printRuntimeMSG("---RegressionTest1:test409");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test409");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        categoryPlot0.drawBackgroundImage(graphics2D3, rectangle2D4);
        categoryPlot0.clearAnnotations();
        boolean boolean7 = categoryPlot0.isRangeMinorGridlinesVisible();
        org.jfree.chart.axis.AxisLocation axisLocation9 = categoryPlot0.getRangeAxisLocation((int) '#');
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(axisLocation9);
    }

    @Test
    public void test410() throws Throwable {
printRuntimeMSG("---RegressionTest1:test410");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test410");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent14 = null;
        categoryPlot9.markerChanged(markerChangeEvent14);
        org.jfree.chart.event.PlotChangeListener plotChangeListener16 = null;
        categoryPlot9.removeChangeListener(plotChangeListener16);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo20 = null;
        java.awt.geom.Point2D point2D21 = null;
        categoryPlot9.zoomRangeAxes(0.0d, (double) (-65536), plotRenderingInfo20, point2D21);
        org.jfree.chart.LegendItemCollection legendItemCollection23 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.util.Layer layer25 = null;
        java.util.Collection collection26 = categoryPlot9.getDomainMarkers((int) '4', layer25);
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertNull(legendItemCollection23);
        org.junit.Assert.assertNull(collection26);
    }

    @Test
    public void test411() throws Throwable {
printRuntimeMSG("---RegressionTest1:test411");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test411");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean8 = lineAndShapeRenderer2.getUseFillPaint();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesItemLabelsVisible(0);
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false);
        lineAndShapeRenderer2.setBaseShapesVisible(false);
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test412() throws Throwable {
printRuntimeMSG("---RegressionTest1:test412");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test412");
        org.jfree.chart.util.StrokeList strokeList0 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator4 = lineAndShapeRenderer3.getBaseItemLabelGenerator();
        java.awt.Paint paint6 = lineAndShapeRenderer3.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator8 = lineAndShapeRenderer3.getSeriesURLGenerator(0);
        boolean boolean9 = strokeList0.equals((java.lang.Object) categoryURLGenerator8);
        java.awt.Stroke stroke11 = strokeList0.getStroke((-12566464));
        strokeList0.clear();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke15 = categoryPlot14.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        categoryPlot14.setParent((org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.LegendItemCollection legendItemCollection19 = categoryPlot14.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent20 = null;
        categoryPlot14.axisChanged(axisChangeEvent20);
        org.jfree.chart.axis.AxisSpace axisSpace22 = categoryPlot14.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset23 = null;
        categoryPlot14.setDataset(categoryDataset23);
        java.awt.Stroke stroke25 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot14.setDomainCrosshairStroke(stroke25);
        java.awt.Stroke stroke27 = categoryPlot14.getRangeGridlineStroke();
        strokeList0.setStroke((int) '#', stroke27);
        java.awt.Stroke stroke30 = null;
        strokeList0.setStroke((int) (short) 10, stroke30);
        java.lang.Object obj32 = strokeList0.clone();
        java.awt.Shape shape38 = null;
        java.awt.Color color39 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color41 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape38, (java.awt.Paint) color39, stroke40, (java.awt.Paint) color41);
        java.awt.Paint paint43 = legendItem42.getLabelPaint();
        java.lang.String str44 = legendItem42.getURLText();
        java.awt.Paint paint45 = legendItem42.getFillPaint();
        java.awt.Stroke stroke46 = legendItem42.getLineStroke();
        strokeList0.setStroke(192, stroke46);
        org.junit.Assert.assertNull(categoryItemLabelGenerator4);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNull(categoryURLGenerator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(stroke11);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNull(legendItemCollection19);
        org.junit.Assert.assertNull(axisSpace22);
        org.junit.Assert.assertNotNull(stroke25);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNull(paint43);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str44.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNotNull(stroke46);
    }

    @Test
    public void test413() throws Throwable {
printRuntimeMSG("---RegressionTest1:test413");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test413");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        org.jfree.chart.plot.CategoryPlot categoryPlot8 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke9 = categoryPlot8.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        categoryPlot8.setParent((org.jfree.chart.plot.Plot) categoryPlot10);
        org.jfree.chart.LegendItemCollection legendItemCollection13 = categoryPlot8.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier14 = categoryPlot8.getDrawingSupplier();
        java.awt.Stroke stroke15 = categoryPlot8.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis16 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list17 = categoryPlot8.getCategoriesForAxis(categoryAxis16);
        try {
            categoryPlot0.mapDatasetToRangeAxes(175, list17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty list not permitted.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNull(legendItemCollection13);
        org.junit.Assert.assertNotNull(drawingSupplier14);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertNotNull(list17);
    }

    @Test
    public void test414() throws Throwable {
printRuntimeMSG("---RegressionTest1:test414");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test414");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Color color7 = java.awt.Color.RED;
        renderAttributes5.setDefaultOutlinePaint((java.awt.Paint) color7);
        categoryPlot0.setDomainGridlinePaint((java.awt.Paint) color7);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean18 = lineAndShapeRenderer12.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator22 = lineAndShapeRenderer21.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator23 = null;
        lineAndShapeRenderer21.setBaseToolTipGenerator(categoryToolTipGenerator23);
        java.awt.Font font26 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer21.setSeriesItemLabelFont((int) (short) 0, font26, true);
        lineAndShapeRenderer12.setBaseLegendTextFont(font26);
        org.jfree.chart.LegendItemCollection legendItemCollection30 = lineAndShapeRenderer12.getLegendItems();
        categoryPlot0.setFixedLegendItems(legendItemCollection30);
        boolean boolean32 = categoryPlot0.isRangeGridlinesVisible();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator22);
        org.junit.Assert.assertNotNull(font26);
        org.junit.Assert.assertNotNull(legendItemCollection30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test415() throws Throwable {
printRuntimeMSG("---RegressionTest1:test415");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test415");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        boolean boolean4 = lineAndShapeRenderer2.getDrawOutlines();
        boolean boolean5 = lineAndShapeRenderer2.getBaseShapesFilled();
        lineAndShapeRenderer2.setBaseSeriesVisibleInLegend(false);
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint9 = renderAttributes8.getDefaultLabelPaint();
        java.awt.Paint paint12 = renderAttributes8.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.axis.CategoryAxis categoryAxis13 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis13.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font16 = categoryAxis13.getTickLabelFont();
        renderAttributes8.setDefaultLabelFont(font16);
        lineAndShapeRenderer2.setBaseItemLabelFont(font16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(font16);
    }

    @Test
    public void test416() throws Throwable {
printRuntimeMSG("---RegressionTest1:test416");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test416");
        java.awt.Color color0 = java.awt.Color.LIGHT_GRAY;
        java.awt.Color color1 = java.awt.Color.RED;
        java.awt.Color color2 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color3 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace4 = color3.getColorSpace();
        float[] floatArray11 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray12 = color2.getColorComponents(colorSpace4, floatArray11);
        float[] floatArray13 = color1.getComponents(floatArray12);
        float[] floatArray14 = color0.getRGBColorComponents(floatArray12);
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertNotNull(color1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
    }

    @Test
    public void test417() throws Throwable {
printRuntimeMSG("---RegressionTest1:test417");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test417");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition2 = barRenderer0.getPositiveItemLabelPositionFallback();
        double double3 = barRenderer0.getMaximumBarWidth();
        java.awt.Shape shape4 = barRenderer0.getBaseShape();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator8 = barRenderer0.getToolTipGenerator(192, 4, false);
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        categoryPlot9.setParent((org.jfree.chart.plot.Plot) categoryPlot11);
        org.jfree.chart.LegendItemCollection legendItemCollection14 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent15 = null;
        categoryPlot9.axisChanged(axisChangeEvent15);
        org.jfree.chart.axis.AxisSpace axisSpace17 = categoryPlot9.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset18 = null;
        categoryPlot9.setDataset(categoryDataset18);
        java.awt.Stroke stroke20 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot9.setDomainCrosshairStroke(stroke20);
        java.awt.Stroke stroke22 = categoryPlot9.getRangeGridlineStroke();
        categoryPlot9.setForegroundAlpha((float) (-1));
        org.jfree.data.category.CategoryDataset categoryDataset25 = categoryPlot9.getDataset();
        java.awt.Paint paint26 = categoryPlot9.getDomainCrosshairPaint();
        barRenderer0.setPlot(categoryPlot9);
        try {
            org.jfree.chart.LegendItem legendItem30 = barRenderer0.getLegendItem((-8355712), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(itemLabelPosition2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(shape4);
        org.junit.Assert.assertNull(categoryToolTipGenerator8);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNull(legendItemCollection14);
        org.junit.Assert.assertNull(axisSpace17);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNull(categoryDataset25);
        org.junit.Assert.assertNotNull(paint26);
    }

    @Test
    public void test418() throws Throwable {
printRuntimeMSG("---RegressionTest1:test418");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test418");
        java.awt.Color color1 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem2 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color1);
        boolean boolean3 = legendItem2.isShapeOutlineVisible();
        boolean boolean4 = legendItem2.isLineVisible();
        legendItem2.setDatasetIndex(0);
        org.junit.Assert.assertNotNull(color1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test419() throws Throwable {
printRuntimeMSG("---RegressionTest1:test419");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test419");
        org.jfree.chart.util.PaintList paintList0 = new org.jfree.chart.util.PaintList();
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo4 = null;
        java.awt.geom.Point2D point2D5 = null;
        categoryPlot1.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo4, point2D5);
        categoryPlot1.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder9 = categoryPlot1.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean11 = sortOrder9.equals((java.lang.Object) categoryPlot10);
        org.jfree.chart.axis.CategoryAxis categoryAxis12 = new org.jfree.chart.axis.CategoryAxis();
        double double13 = categoryAxis12.getUpperMargin();
        categoryPlot10.setDomainAxis(categoryAxis12);
        boolean boolean15 = paintList0.equals((java.lang.Object) categoryAxis12);
        org.jfree.chart.ChartColor chartColor20 = new org.jfree.chart.ChartColor((int) 'a', (int) (short) 100, 5);
        paintList0.setPaint(0, (java.awt.Paint) chartColor20);
        org.junit.Assert.assertNotNull(sortOrder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.05d + "'", double13 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test420() throws Throwable {
printRuntimeMSG("---RegressionTest1:test420");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test420");
        org.jfree.chart.renderer.RenderAttributes renderAttributes1 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Stroke stroke2 = renderAttributes1.getDefaultOutlineStroke();
        java.awt.Paint paint4 = renderAttributes1.getSeriesOutlinePaint(255);
        java.awt.Paint paint5 = renderAttributes1.getDefaultPaint();
        org.junit.Assert.assertNull(stroke2);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint5);
    }

    @Test
    public void test421() throws Throwable {
printRuntimeMSG("---RegressionTest1:test421");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test421");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        int int2 = defaultShadowGenerator0.getShadowSize();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
    }

    @Test
    public void test422() throws Throwable {
printRuntimeMSG("---RegressionTest1:test422");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test422");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double1 = rectangleInsets0.getRight();
        double double3 = rectangleInsets0.calculateTopInset(0.0d);
        double double5 = rectangleInsets0.calculateLeftOutset(0.0d);
        double double7 = rectangleInsets0.trimWidth((double) 10);
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2.0d + "'", double3 == 2.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.0d + "'", double5 == 4.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
    }

    @Test
    public void test423() throws Throwable {
printRuntimeMSG("---RegressionTest1:test423");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test423");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        java.awt.geom.Point2D point2D18 = null;
        org.jfree.chart.plot.PlotState plotState19 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo20 = null;
        try {
            categoryPlot0.draw(graphics2D16, rectangle2D17, point2D18, plotState19, plotRenderingInfo20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
    }

    @Test
    public void test424() throws Throwable {
printRuntimeMSG("---RegressionTest1:test424");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test424");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.data.category.CategoryDataset categoryDataset8 = categoryPlot0.getDataset((int) (short) 1);
        categoryPlot0.configureDomainAxes();
        boolean boolean10 = categoryPlot0.isRangePannable();
        org.jfree.chart.plot.Marker marker12 = null;
        org.jfree.chart.util.Layer layer13 = null;
        boolean boolean14 = categoryPlot0.removeDomainMarker((int) (short) 100, marker12, layer13);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNull(categoryDataset8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test425() throws Throwable {
printRuntimeMSG("---RegressionTest1:test425");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test425");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo52 = null;
        java.awt.geom.Point2D point2D53 = null;
        categoryPlot0.zoomRangeAxes((double) (short) -1, plotRenderingInfo52, point2D53, true);
        categoryPlot0.configureDomainAxes();
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
    }

    @Test
    public void test426() throws Throwable {
printRuntimeMSG("---RegressionTest1:test426");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test426");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        java.awt.Color color2 = defaultShadowGenerator0.getShadowColor();
        int int3 = defaultShadowGenerator0.getDistance();
        float float4 = defaultShadowGenerator0.getShadowOpacity();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.5f + "'", float4 == 0.5f);
    }

    @Test
    public void test427() throws Throwable {
printRuntimeMSG("---RegressionTest1:test427");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test427");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.image.ColorModel colorModel1 = null;
        java.awt.Rectangle rectangle2 = null;
        java.awt.geom.Rectangle2D rectangle2D3 = null;
        java.awt.geom.AffineTransform affineTransform4 = null;
        java.awt.RenderingHints renderingHints5 = null;
        java.awt.PaintContext paintContext6 = color0.createContext(colorModel1, rectangle2, rectangle2D3, affineTransform4, renderingHints5);
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertNotNull(paintContext6);
    }

    @Test
    public void test428() throws Throwable {
printRuntimeMSG("---RegressionTest1:test428");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test428");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setForegroundAlpha((float) 100);
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke8 = categoryPlot7.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation9 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation10 = axisLocation9.getOpposite();
        categoryPlot7.setDomainAxisLocation(axisLocation10, false);
        boolean boolean13 = categoryPlot7.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = null;
        lineAndShapeRenderer17.setSeriesPositiveItemLabelPosition(0, itemLabelPosition19);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator21 = null;
        lineAndShapeRenderer17.setLegendItemToolTipGenerator(categorySeriesLabelGenerator21);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition23 = lineAndShapeRenderer17.getBasePositiveItemLabelPosition();
        boolean boolean24 = lineAndShapeRenderer17.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition25 = lineAndShapeRenderer17.getBasePositiveItemLabelPosition();
        java.lang.Object obj26 = lineAndShapeRenderer17.clone();
        categoryPlot7.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer17, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator29 = null;
        lineAndShapeRenderer17.setBaseURLGenerator(categoryURLGenerator29);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset31 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range32 = lineAndShapeRenderer17.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset31);
        java.lang.Object obj33 = defaultCategoryDataset31.clone();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer34 = categoryPlot2.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset31);
        try {
            boolean boolean37 = defaultCategoryDataset31.isSelected((int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNotNull(axisLocation9);
        org.junit.Assert.assertNotNull(axisLocation10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(range32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNull(categoryItemRenderer34);
    }

    @Test
    public void test429() throws Throwable {
printRuntimeMSG("---RegressionTest1:test429");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test429");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        java.lang.Comparable comparable9 = categoryPlot0.getDomainCrosshairRowKey();
        java.awt.Paint paint10 = categoryPlot0.getRangeGridlinePaint();
        org.jfree.chart.axis.CategoryAnchor categoryAnchor11 = categoryPlot0.getDomainGridlinePosition();
        org.jfree.chart.util.RectangleEdge rectangleEdge13 = categoryPlot0.getDomainAxisEdge(2);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNull(comparable9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(categoryAnchor11);
        org.junit.Assert.assertNotNull(rectangleEdge13);
    }

    @Test
    public void test430() throws Throwable {
printRuntimeMSG("---RegressionTest1:test430");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test430");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Paint paint5 = renderAttributes0.getSeriesOutlinePaint((int) '#');
        java.awt.Font font6 = renderAttributes0.getDefaultLabelFont();
        java.lang.Boolean boolean7 = renderAttributes0.getDefaultCreateEntity();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(paint5);
        org.junit.Assert.assertNull(font6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test431() throws Throwable {
printRuntimeMSG("---RegressionTest1:test431");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test431");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        java.lang.Class<?> wildcardClass16 = categoryAxis6.getClass();
        java.awt.Font font17 = categoryAxis6.getLabelFont();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(font17);
    }

    @Test
    public void test432() throws Throwable {
printRuntimeMSG("---RegressionTest1:test432");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test432");
        java.awt.Color color1 = java.awt.Color.getColor("TextAnchor.CENTER");
        org.junit.Assert.assertNull(color1);
    }

    @Test
    public void test433() throws Throwable {
printRuntimeMSG("---RegressionTest1:test433");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test433");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint5 = lineAndShapeRenderer2.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = lineAndShapeRenderer2.getSeriesURLGenerator(0);
        double double8 = lineAndShapeRenderer2.getItemMargin();
        boolean boolean9 = lineAndShapeRenderer2.getBaseSeriesVisibleInLegend();
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation10 = null;
        boolean boolean11 = lineAndShapeRenderer2.removeAnnotation(categoryAnnotation10);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNull(categoryURLGenerator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test434() throws Throwable {
printRuntimeMSG("---RegressionTest1:test434");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test434");
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis("TextAnchor.HALF_ASCENT_LEFT");
        org.jfree.chart.renderer.category.BarRenderer barRenderer3 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint4 = barRenderer3.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo8 = null;
        java.awt.geom.Point2D point2D9 = null;
        categoryPlot5.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo8, point2D9);
        categoryPlot5.clearAnnotations();
        boolean boolean12 = barRenderer3.equals((java.lang.Object) categoryPlot5);
        java.awt.Paint paint13 = barRenderer3.getShadowPaint();
        java.awt.Shape shape14 = barRenderer3.getBaseShape();
        barRenderer3.setShadowYOffset(0.0d);
        double double17 = barRenderer3.getMaximumBarWidth();
        java.lang.Boolean boolean19 = barRenderer3.getSeriesCreateEntities(0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator23 = lineAndShapeRenderer22.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator27 = lineAndShapeRenderer22.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer22.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer22.setBaseOutlinePaint(paint31);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition36 = lineAndShapeRenderer22.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer3.setNegativeItemLabelPositionFallback(itemLabelPosition36);
        boolean boolean38 = barRenderer3.getIncludeBaseInRange();
        org.jfree.data.category.CategoryDataset categoryDataset39 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis40 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis40.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis43 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer46 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator47 = lineAndShapeRenderer46.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot48 = new org.jfree.chart.plot.CategoryPlot(categoryDataset39, categoryAxis40, valueAxis43, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer46);
        categoryAxis40.setVisible(false);
        java.awt.Font font51 = categoryAxis40.getTickLabelFont();
        barRenderer3.setBaseLegendTextFont(font51);
        categoryAxis1.setTickLabelFont((java.lang.Comparable) 0.2d, font51);
        double double54 = categoryAxis1.getUpperMargin();
        org.junit.Assert.assertNotNull(paint4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(shape14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(categoryItemLabelGenerator23);
        org.junit.Assert.assertNull(categoryToolTipGenerator27);
        org.junit.Assert.assertNotNull(paint31);
        org.junit.Assert.assertNotNull(itemLabelPosition36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator47);
        org.junit.Assert.assertNotNull(font51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.05d + "'", double54 == 0.05d);
    }

    @Test
    public void test435() throws Throwable {
printRuntimeMSG("---RegressionTest1:test435");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test435");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        java.awt.Graphics2D graphics2D14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        categoryPlot0.drawBackgroundImage(graphics2D14, rectangle2D15);
        categoryPlot0.setNotify(false);
        categoryPlot0.setForegroundAlpha((float) (short) 10);
        java.awt.Paint paint21 = categoryPlot0.getDomainCrosshairPaint();
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent22 = null;
        categoryPlot0.markerChanged(markerChangeEvent22);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(paint21);
    }

    @Test
    public void test436() throws Throwable {
printRuntimeMSG("---RegressionTest1:test436");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test436");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.clearCategoryLabelToolTips();
        categoryAxis0.setCategoryLabelPositionOffset((int) (short) 10);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
    }

    @Test
    public void test437() throws Throwable {
printRuntimeMSG("---RegressionTest1:test437");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test437");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearAnnotations();
        categoryPlot0.setCrosshairDatasetIndex(192, false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot10.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo13, point2D14);
        org.jfree.chart.plot.PlotOrientation plotOrientation16 = categoryPlot10.getOrientation();
        categoryPlot10.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint19 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray20 = new java.awt.Paint[] { paint19 };
        java.awt.Color color21 = java.awt.Color.BLUE;
        java.awt.Color color22 = java.awt.Color.RED;
        java.awt.Paint paint23 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray24 = new java.awt.Paint[] { color21, color22, paint23 };
        java.awt.Color color25 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel26 = null;
        java.awt.Rectangle rectangle27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        java.awt.geom.AffineTransform affineTransform29 = null;
        java.awt.RenderingHints renderingHints30 = null;
        java.awt.PaintContext paintContext31 = color25.createContext(colorModel26, rectangle27, rectangle2D28, affineTransform29, renderingHints30);
        java.awt.Color color32 = java.awt.Color.WHITE;
        java.awt.Color color33 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel34 = null;
        java.awt.Rectangle rectangle35 = null;
        java.awt.geom.Rectangle2D rectangle2D36 = null;
        java.awt.geom.AffineTransform affineTransform37 = null;
        java.awt.RenderingHints renderingHints38 = null;
        java.awt.PaintContext paintContext39 = color33.createContext(colorModel34, rectangle35, rectangle2D36, affineTransform37, renderingHints38);
        java.awt.Color color40 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray41 = new java.awt.Paint[] { color25, color32, color33, color40 };
        java.awt.Stroke stroke42 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke43 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke44 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke45 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke46 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray47 = new java.awt.Stroke[] { stroke42, stroke43, stroke44, stroke45, stroke46 };
        java.awt.Stroke stroke48 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke49 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot50 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke51 = categoryPlot50.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray52 = new java.awt.Stroke[] { stroke48, stroke49, stroke51 };
        java.awt.Shape shape53 = null;
        java.awt.Shape[] shapeArray54 = new java.awt.Shape[] { shape53 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier55 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray20, paintArray24, paintArray41, strokeArray47, strokeArray52, shapeArray54);
        java.awt.Shape shape56 = defaultDrawingSupplier55.getNextShape();
        java.awt.Stroke stroke57 = defaultDrawingSupplier55.getNextOutlineStroke();
        java.awt.Stroke stroke58 = defaultDrawingSupplier55.getNextOutlineStroke();
        categoryPlot10.setRangeCrosshairStroke(stroke58);
        java.awt.Stroke stroke60 = categoryPlot10.getRangeCrosshairStroke();
        org.jfree.chart.util.SortOrder sortOrder61 = categoryPlot10.getRowRenderingOrder();
        categoryPlot10.setNoDataMessage("poly");
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot10);
        org.junit.Assert.assertNotNull(plotOrientation16);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertNotNull(paintArray20);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(paintArray24);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(paintContext31);
        org.junit.Assert.assertNotNull(color32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(paintContext39);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(paintArray41);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(stroke46);
        org.junit.Assert.assertNotNull(strokeArray47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke49);
        org.junit.Assert.assertNotNull(stroke51);
        org.junit.Assert.assertNotNull(strokeArray52);
        org.junit.Assert.assertNotNull(shapeArray54);
        org.junit.Assert.assertNull(shape56);
        org.junit.Assert.assertNotNull(stroke57);
        org.junit.Assert.assertNotNull(stroke58);
        org.junit.Assert.assertNotNull(stroke60);
        org.junit.Assert.assertNotNull(sortOrder61);
    }

    @Test
    public void test438() throws Throwable {
printRuntimeMSG("---RegressionTest1:test438");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test438");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = null;
        lineAndShapeRenderer15.setSeriesPositiveItemLabelPosition(0, itemLabelPosition17);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator19 = null;
        lineAndShapeRenderer15.setLegendItemToolTipGenerator(categorySeriesLabelGenerator19);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition21 = lineAndShapeRenderer15.getBasePositiveItemLabelPosition();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition25 = lineAndShapeRenderer15.getNegativeItemLabelPosition((int) (short) -1, (int) (short) -1, false);
        boolean boolean26 = legendItem8.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(itemLabelPosition21);
        org.junit.Assert.assertNotNull(itemLabelPosition25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test439() throws Throwable {
printRuntimeMSG("---RegressionTest1:test439");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test439");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color3 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem4 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color3);
        java.lang.String str5 = legendItem4.getToolTipText();
        java.awt.Stroke stroke6 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem4.setOutlineStroke(stroke6);
        legendItem1.setOutlineStroke(stroke6);
        java.awt.Stroke stroke9 = legendItem1.getLineStroke();
        java.awt.Paint paint10 = legendItem1.getOutlinePaint();
        boolean boolean11 = legendItem1.isShapeVisible();
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test440() throws Throwable {
printRuntimeMSG("---RegressionTest1:test440");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test440");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setCategoryMargin((-4.0d));
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
    }

    @Test
    public void test441() throws Throwable {
printRuntimeMSG("---RegressionTest1:test441");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test441");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        categoryAxis0.setFixedDimension((double) 1);
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        categoryAxis0.setAxisLineStroke(stroke26);
        org.jfree.chart.util.RectangleInsets rectangleInsets40 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str41 = rectangleInsets40.toString();
        double double42 = rectangleInsets40.getTop();
        double double44 = rectangleInsets40.calculateTopOutset((double) ' ');
        double double46 = rectangleInsets40.trimWidth((double) (short) -1);
        categoryAxis0.setLabelInsets(rectangleInsets40, true);
        org.jfree.chart.plot.CategoryPlot categoryPlot50 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke51 = categoryPlot50.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer52 = null;
        categoryPlot50.setRenderer(categoryItemRenderer52);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent54 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot50);
        org.jfree.data.category.CategoryDataset categoryDataset55 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis56 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis56.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis59 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer62 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator63 = lineAndShapeRenderer62.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot64 = new org.jfree.chart.plot.CategoryPlot(categoryDataset55, categoryAxis56, valueAxis59, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer62);
        java.util.List list65 = categoryPlot50.getCategoriesForAxis(categoryAxis56);
        java.awt.geom.Rectangle2D rectangle2D66 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot67 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke68 = categoryPlot67.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot69 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke70 = categoryPlot69.getRangeMinorGridlineStroke();
        categoryPlot67.setParent((org.jfree.chart.plot.Plot) categoryPlot69);
        org.jfree.chart.LegendItemCollection legendItemCollection72 = categoryPlot67.getFixedLegendItems();
        java.lang.Comparable comparable73 = categoryPlot67.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge74 = categoryPlot67.getRangeAxisEdge();
        try {
            double double75 = categoryAxis0.getCategoryMiddle((java.lang.Comparable) (-65536), list65, rectangle2D66, rectangleEdge74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid category index: -1");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(rectangleInsets40);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str41.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2.0d + "'", double42 == 2.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.0d + "'", double44 == 2.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9.0d) + "'", double46 == (-9.0d));
        org.junit.Assert.assertNotNull(stroke51);
        org.junit.Assert.assertNull(categoryItemLabelGenerator63);
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(stroke68);
        org.junit.Assert.assertNotNull(stroke70);
        org.junit.Assert.assertNull(legendItemCollection72);
        org.junit.Assert.assertNull(comparable73);
        org.junit.Assert.assertNotNull(rectangleEdge74);
    }

    @Test
    public void test442() throws Throwable {
printRuntimeMSG("---RegressionTest1:test442");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test442");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer13 = legendItem8.getFillPaintTransformer();
        java.awt.Paint paint14 = legendItem8.getOutlinePaint();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(gradientPaintTransformer13);
        org.junit.Assert.assertNotNull(paint14);
    }

    @Test
    public void test443() throws Throwable {
printRuntimeMSG("---RegressionTest1:test443");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test443");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Color color9 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer2.setSeriesPaint(2, (java.awt.Paint) color9);
        java.awt.Paint paint12 = lineAndShapeRenderer2.lookupLegendTextPaint(2);
        double double13 = lineAndShapeRenderer2.getItemLabelAnchorOffset();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2.0d + "'", double13 == 2.0d);
    }

    @Test
    public void test444() throws Throwable {
printRuntimeMSG("---RegressionTest1:test444");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test444");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        java.awt.Paint paint12 = lineAndShapeRenderer2.getLegendTextPaint(1);
        java.awt.Graphics2D graphics2D13 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearAnnotations();
        java.lang.String str21 = categoryPlot14.getNoDataMessage();
        java.awt.Color color22 = java.awt.Color.pink;
        categoryPlot14.setBackgroundPaint((java.awt.Paint) color22);
        java.awt.geom.Rectangle2D rectangle2D24 = null;
        org.jfree.data.category.CategoryDataset categoryDataset26 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis27 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis27.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis30 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer33 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator34 = lineAndShapeRenderer33.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot35 = new org.jfree.chart.plot.CategoryPlot(categoryDataset26, categoryAxis27, valueAxis30, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer33);
        boolean boolean36 = categoryAxis27.isTickLabelsVisible();
        double double37 = categoryAxis27.getFixedDimension();
        java.lang.Object obj38 = categoryAxis27.clone();
        java.awt.Paint paint39 = categoryAxis27.getLabelPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer42 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator43 = lineAndShapeRenderer42.getBaseItemLabelGenerator();
        java.awt.Paint paint45 = lineAndShapeRenderer42.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator47 = lineAndShapeRenderer42.getSeriesURLGenerator(0);
        double double48 = lineAndShapeRenderer42.getItemMargin();
        java.awt.Stroke stroke50 = lineAndShapeRenderer42.lookupSeriesOutlineStroke(100);
        try {
            lineAndShapeRenderer2.drawDomainLine(graphics2D13, categoryPlot14, rectangle2D24, (double) 175, paint39, stroke50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNull(categoryItemLabelGenerator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(paint39);
        org.junit.Assert.assertNull(categoryItemLabelGenerator43);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNull(categoryURLGenerator47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(stroke50);
    }

    @Test
    public void test445() throws Throwable {
printRuntimeMSG("---RegressionTest1:test445");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test445");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.data.category.CategoryDataset categoryDataset8 = null;
        int int9 = categoryPlot0.indexOf(categoryDataset8);
        java.awt.Stroke stroke10 = categoryPlot0.getRangeGridlineStroke();
        java.lang.String str11 = categoryPlot0.getPlotType();
        org.jfree.chart.axis.AxisLocation axisLocation12 = categoryPlot0.getDomainAxisLocation();
        org.jfree.chart.plot.Marker marker14 = null;
        org.jfree.chart.util.Layer layer15 = null;
        try {
            categoryPlot0.addRangeMarker((int) (byte) 10, marker14, layer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Category Plot" + "'", str11.equals("Category Plot"));
        org.junit.Assert.assertNotNull(axisLocation12);
    }

    @Test
    public void test446() throws Throwable {
printRuntimeMSG("---RegressionTest1:test446");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test446");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator49 = lineAndShapeRenderer48.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator50 = null;
        lineAndShapeRenderer48.setBaseToolTipGenerator(categoryToolTipGenerator50);
        lineAndShapeRenderer48.setAutoPopulateSeriesOutlinePaint(false);
        boolean boolean54 = plotEntity33.equals((java.lang.Object) lineAndShapeRenderer48);
        java.lang.String str55 = plotEntity33.toString();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(categoryItemLabelGenerator49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "PlotEntity: tooltip = null" + "'", str55.equals("PlotEntity: tooltip = null"));
    }

    @Test
    public void test447() throws Throwable {
printRuntimeMSG("---RegressionTest1:test447");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test447");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType5 = plotChangeEvent4.getType();
        org.jfree.chart.JFreeChart jFreeChart6 = null;
        plotChangeEvent4.setChart(jFreeChart6);
        java.lang.Object obj8 = plotChangeEvent4.getSource();
        org.jfree.chart.plot.Plot plot9 = plotChangeEvent4.getPlot();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(chartChangeEventType5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(plot9);
    }

    @Test
    public void test448() throws Throwable {
printRuntimeMSG("---RegressionTest1:test448");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test448");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition15 = barRenderer0.getNegativeItemLabelPositionFallback();
        barRenderer0.setShadowXOffset((double) (short) -1);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNull(itemLabelPosition15);
    }

    @Test
    public void test449() throws Throwable {
printRuntimeMSG("---RegressionTest1:test449");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test449");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.data.category.CategoryDataset categoryDataset53 = categoryItemEntity47.getDataset();
        java.lang.String str54 = categoryItemEntity47.toString();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNotNull(categoryDataset53);
    }

    @Test
    public void test450() throws Throwable {
printRuntimeMSG("---RegressionTest1:test450");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test450");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator7 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator("PlotOrientation.HORIZONTAL");
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator7);
        boolean boolean9 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test451() throws Throwable {
printRuntimeMSG("---RegressionTest1:test451");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test451");
        org.jfree.chart.util.ObjectList objectList0 = new org.jfree.chart.util.ObjectList();
        java.lang.Object obj1 = objectList0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes6 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer10.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean13 = lineAndShapeRenderer10.getBaseLinesVisible();
        java.awt.Shape shape14 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer10.setBaseLegendShape(shape14);
        renderAttributes6.setSeriesShape((int) ' ', shape14);
        org.jfree.chart.entity.ChartEntity chartEntity18 = new org.jfree.chart.entity.ChartEntity(shape14, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint19 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color21 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color21);
        java.lang.String str23 = legendItem22.getToolTipText();
        java.awt.Stroke stroke24 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem22.setOutlineStroke(stroke24);
        java.awt.Shape shape30 = null;
        java.awt.Color color31 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color33 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape30, (java.awt.Paint) color31, stroke32, (java.awt.Paint) color33);
        java.lang.Class<?> wildcardClass35 = color31.getClass();
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape14, paint19, stroke24, (java.awt.Paint) color31);
        boolean boolean37 = objectList0.equals((java.lang.Object) "SortOrder.ASCENDING");
        org.jfree.chart.plot.CategoryPlot categoryPlot38 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke39 = categoryPlot38.getRangeMinorGridlineStroke();
        categoryPlot38.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation42 = categoryPlot38.getOrientation();
        java.awt.Paint paint43 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray44 = new java.awt.Paint[] { paint43 };
        java.awt.Color color45 = java.awt.Color.BLUE;
        java.awt.Color color46 = java.awt.Color.RED;
        java.awt.Paint paint47 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray48 = new java.awt.Paint[] { color45, color46, paint47 };
        java.awt.Color color49 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel50 = null;
        java.awt.Rectangle rectangle51 = null;
        java.awt.geom.Rectangle2D rectangle2D52 = null;
        java.awt.geom.AffineTransform affineTransform53 = null;
        java.awt.RenderingHints renderingHints54 = null;
        java.awt.PaintContext paintContext55 = color49.createContext(colorModel50, rectangle51, rectangle2D52, affineTransform53, renderingHints54);
        java.awt.Color color56 = java.awt.Color.WHITE;
        java.awt.Color color57 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel58 = null;
        java.awt.Rectangle rectangle59 = null;
        java.awt.geom.Rectangle2D rectangle2D60 = null;
        java.awt.geom.AffineTransform affineTransform61 = null;
        java.awt.RenderingHints renderingHints62 = null;
        java.awt.PaintContext paintContext63 = color57.createContext(colorModel58, rectangle59, rectangle2D60, affineTransform61, renderingHints62);
        java.awt.Color color64 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray65 = new java.awt.Paint[] { color49, color56, color57, color64 };
        java.awt.Stroke stroke66 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke67 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke68 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke69 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke70 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray71 = new java.awt.Stroke[] { stroke66, stroke67, stroke68, stroke69, stroke70 };
        java.awt.Stroke stroke72 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke73 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot74 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke75 = categoryPlot74.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray76 = new java.awt.Stroke[] { stroke72, stroke73, stroke75 };
        java.awt.Shape shape77 = null;
        java.awt.Shape[] shapeArray78 = new java.awt.Shape[] { shape77 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier79 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray44, paintArray48, paintArray65, strokeArray71, strokeArray76, shapeArray78);
        java.awt.Shape shape80 = defaultDrawingSupplier79.getNextShape();
        java.awt.Stroke stroke81 = defaultDrawingSupplier79.getNextOutlineStroke();
        categoryPlot38.setDomainGridlineStroke(stroke81);
        boolean boolean83 = objectList0.equals((java.lang.Object) stroke81);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(shape14);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(plotOrientation42);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNotNull(paintArray44);
        org.junit.Assert.assertNotNull(color45);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(paint47);
        org.junit.Assert.assertNotNull(paintArray48);
        org.junit.Assert.assertNotNull(color49);
        org.junit.Assert.assertNotNull(paintContext55);
        org.junit.Assert.assertNotNull(color56);
        org.junit.Assert.assertNotNull(color57);
        org.junit.Assert.assertNotNull(paintContext63);
        org.junit.Assert.assertNotNull(color64);
        org.junit.Assert.assertNotNull(paintArray65);
        org.junit.Assert.assertNotNull(stroke66);
        org.junit.Assert.assertNotNull(stroke67);
        org.junit.Assert.assertNotNull(stroke68);
        org.junit.Assert.assertNotNull(stroke69);
        org.junit.Assert.assertNotNull(stroke70);
        org.junit.Assert.assertNotNull(strokeArray71);
        org.junit.Assert.assertNotNull(stroke72);
        org.junit.Assert.assertNotNull(stroke73);
        org.junit.Assert.assertNotNull(stroke75);
        org.junit.Assert.assertNotNull(strokeArray76);
        org.junit.Assert.assertNotNull(shapeArray78);
        org.junit.Assert.assertNull(shape80);
        org.junit.Assert.assertNotNull(stroke81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test452() throws Throwable {
printRuntimeMSG("---RegressionTest1:test452");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test452");
        java.awt.Paint paint0 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_PAINT;
        org.junit.Assert.assertNotNull(paint0);
    }

    @Test
    public void test453() throws Throwable {
printRuntimeMSG("---RegressionTest1:test453");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test453");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent14 = null;
        categoryPlot0.annotationChanged(annotationChangeEvent14);
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation17 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot16.setOrientation(plotOrientation17);
        categoryPlot0.setOrientation(plotOrientation17);
        org.jfree.data.category.CategoryDataset categoryDataset20 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis21 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis21.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis24 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator28 = lineAndShapeRenderer27.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot29 = new org.jfree.chart.plot.CategoryPlot(categoryDataset20, categoryAxis21, valueAxis24, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer27);
        boolean boolean30 = categoryAxis21.isTickLabelsVisible();
        double double31 = categoryAxis21.getFixedDimension();
        java.lang.Object obj32 = categoryAxis21.clone();
        java.awt.Paint paint33 = categoryAxis21.getLabelPaint();
        boolean boolean34 = plotOrientation17.equals((java.lang.Object) categoryAxis21);
        org.jfree.chart.plot.CategoryPlot categoryPlot35 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke36 = categoryPlot35.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation37 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation38 = axisLocation37.getOpposite();
        categoryPlot35.setDomainAxisLocation(axisLocation38, false);
        boolean boolean41 = categoryPlot35.canSelectByRegion();
        categoryPlot35.setForegroundAlpha((float) '#');
        categoryAxis21.removeChangeListener((org.jfree.chart.event.AxisChangeListener) categoryPlot35);
        java.awt.Paint paint45 = null;
        try {
            categoryAxis21.setLabelPaint(paint45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'paint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(plotOrientation17);
        org.junit.Assert.assertNull(categoryItemLabelGenerator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(paint33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(axisLocation37);
        org.junit.Assert.assertNotNull(axisLocation38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test454() throws Throwable {
printRuntimeMSG("---RegressionTest1:test454");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test454");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo6 = null;
        java.awt.geom.Point2D point2D7 = null;
        categoryPlot0.panRangeAxes((double) 192, plotRenderingInfo6, point2D7);
        org.jfree.chart.plot.Plot plot9 = categoryPlot0.getParent();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(plot9);
    }

    @Test
    public void test455() throws Throwable {
printRuntimeMSG("---RegressionTest1:test455");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test455");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        java.awt.Paint paint3 = categoryPlot0.getRangeCrosshairPaint();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot0.zoomRangeAxes(0.0d, plotRenderingInfo5, point2D6, false);
        org.jfree.chart.plot.Marker marker9 = null;
        org.jfree.chart.util.Layer layer10 = null;
        boolean boolean11 = categoryPlot0.removeDomainMarker(marker9, layer10);
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test456() throws Throwable {
printRuntimeMSG("---RegressionTest1:test456");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test456");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        java.awt.Color color8 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer2.setBaseOutlinePaint((java.awt.Paint) color8, false);
        java.awt.Paint paint11 = lineAndShapeRenderer2.getBaseLegendTextPaint();
        java.awt.Paint paint13 = lineAndShapeRenderer2.lookupLegendTextPaint(10);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNull(paint11);
        org.junit.Assert.assertNull(paint13);
    }

    @Test
    public void test457() throws Throwable {
printRuntimeMSG("---RegressionTest1:test457");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test457");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        lineAndShapeRenderer2.setSeriesCreateEntities((int) (byte) 10, (java.lang.Boolean) true, true);
        java.awt.Graphics2D graphics2D13 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator17 = lineAndShapeRenderer16.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = lineAndShapeRenderer16.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font22 = lineAndShapeRenderer16.getBaseLegendTextFont();
        java.lang.Boolean boolean24 = lineAndShapeRenderer16.getSeriesShapesVisible((int) (short) 10);
        boolean boolean25 = lineAndShapeRenderer16.getAutoPopulateSeriesOutlinePaint();
        lineAndShapeRenderer16.setAutoPopulateSeriesFillPaint(false);
        java.awt.Graphics2D graphics2D28 = null;
        java.awt.geom.Rectangle2D rectangle2D29 = null;
        org.jfree.chart.util.UnitType unitType30 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot31 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke32 = categoryPlot31.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot33 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke34 = categoryPlot33.getRangeMinorGridlineStroke();
        categoryPlot31.setParent((org.jfree.chart.plot.Plot) categoryPlot33);
        org.jfree.chart.LegendItemCollection legendItemCollection36 = categoryPlot31.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier37 = categoryPlot31.getDrawingSupplier();
        java.awt.Stroke stroke38 = categoryPlot31.getOutlineStroke();
        boolean boolean39 = unitType30.equals((java.lang.Object) categoryPlot31);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset40 = new org.jfree.data.category.DefaultCategoryDataset();
        defaultCategoryDataset40.fireSelectionEvent();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo42 = null;
        org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState43 = lineAndShapeRenderer16.initialise(graphics2D28, rectangle2D29, categoryPlot31, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset40, plotRenderingInfo42);
        java.awt.geom.Rectangle2D rectangle2D44 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot45 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo48 = null;
        java.awt.geom.Point2D point2D49 = null;
        categoryPlot45.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo48, point2D49);
        org.jfree.chart.plot.PlotOrientation plotOrientation51 = categoryPlot45.getOrientation();
        categoryPlot45.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        boolean boolean54 = categoryPlot45.getDrawSharedDomainAxis();
        org.jfree.chart.axis.CategoryAxis categoryAxis55 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint56 = categoryAxis55.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets57 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double58 = rectangleInsets57.getRight();
        double double60 = rectangleInsets57.calculateTopInset(0.0d);
        categoryAxis55.setLabelInsets(rectangleInsets57, false);
        org.jfree.chart.axis.ValueAxis valueAxis63 = null;
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset64 = new org.jfree.data.category.DefaultCategoryDataset();
        int int65 = defaultCategoryDataset64.getRowCount();
        org.jfree.data.category.CategoryDatasetSelectionState categoryDatasetSelectionState66 = null;
        defaultCategoryDataset64.setSelectionState(categoryDatasetSelectionState66);
        try {
            lineAndShapeRenderer2.drawItem(graphics2D13, categoryItemRendererState43, rectangle2D44, categoryPlot45, categoryAxis55, valueAxis63, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset64, (-15935), (int) ' ', true, (-65536));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(categoryItemLabelGenerator17);
        org.junit.Assert.assertNull(categoryToolTipGenerator21);
        org.junit.Assert.assertNull(font22);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(unitType30);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNull(legendItemCollection36);
        org.junit.Assert.assertNotNull(drawingSupplier37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(categoryItemRendererState43);
        org.junit.Assert.assertNotNull(plotOrientation51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(paint56);
        org.junit.Assert.assertNotNull(rectangleInsets57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 4.0d + "'", double58 == 4.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 2.0d + "'", double60 == 2.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test458() throws Throwable {
printRuntimeMSG("---RegressionTest1:test458");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test458");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition9 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setBaseSeriesVisibleInLegend(true);
        org.jfree.chart.renderer.RenderAttributes renderAttributes20 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean26 = lineAndShapeRenderer24.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean27 = lineAndShapeRenderer24.getBaseLinesVisible();
        java.awt.Shape shape28 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer24.setBaseLegendShape(shape28);
        renderAttributes20.setSeriesShape((int) ' ', shape28);
        org.jfree.chart.entity.ChartEntity chartEntity32 = new org.jfree.chart.entity.ChartEntity(shape28, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint33 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color35 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color35);
        java.lang.String str37 = legendItem36.getToolTipText();
        java.awt.Stroke stroke38 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem36.setOutlineStroke(stroke38);
        java.awt.Shape shape44 = null;
        java.awt.Color color45 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke46 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color47 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem48 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape44, (java.awt.Paint) color45, stroke46, (java.awt.Paint) color47);
        java.lang.Class<?> wildcardClass49 = color45.getClass();
        org.jfree.chart.LegendItem legendItem50 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape28, paint33, stroke38, (java.awt.Paint) color45);
        org.jfree.chart.entity.ChartEntity chartEntity51 = new org.jfree.chart.entity.ChartEntity(shape28);
        java.awt.Color color52 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem53 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape28, (java.awt.Paint) color52);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset56 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity59 = new org.jfree.chart.entity.CategoryItemEntity(shape28, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset56, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset56.addValue((java.lang.Number) (-1), (java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", (java.lang.Comparable) "SortOrder.ASCENDING");
        defaultCategoryDataset56.clearSelection();
        defaultCategoryDataset56.removeColumn((java.lang.Comparable) "SortOrder.ASCENDING");
        org.jfree.data.Range range67 = lineAndShapeRenderer2.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset56);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition9);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(shape28);
        org.junit.Assert.assertNotNull(paint33);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(color45);
        org.junit.Assert.assertNotNull(stroke46);
        org.junit.Assert.assertNotNull(color47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNull(range67);
    }

    @Test
    public void test459() throws Throwable {
printRuntimeMSG("---RegressionTest1:test459");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test459");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        double double1 = categoryAxis0.getUpperMargin();
        java.awt.Font font3 = categoryAxis0.getTickLabelFont((java.lang.Comparable) 3);
        org.jfree.chart.plot.Plot plot4 = categoryAxis0.getPlot();
        org.jfree.chart.util.RectangleInsets rectangleInsets5 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str6 = rectangleInsets5.toString();
        double double7 = rectangleInsets5.getTop();
        double double9 = rectangleInsets5.calculateTopOutset((double) ' ');
        double double11 = rectangleInsets5.trimWidth((double) (short) -1);
        double double13 = rectangleInsets5.calculateBottomInset((double) (byte) 1);
        double double15 = rectangleInsets5.trimHeight((double) 192);
        categoryAxis0.setTickLabelInsets(rectangleInsets5);
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D18 = rectangleInsets5.createOutsetRectangle(rectangle2D17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.05d + "'", double1 == 0.05d);
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertNull(plot4);
        org.junit.Assert.assertNotNull(rectangleInsets5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str6.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.0d + "'", double9 == 2.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-9.0d) + "'", double11 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2.0d + "'", double13 == 2.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 188.0d + "'", double15 == 188.0d);
    }

    @Test
    public void test460() throws Throwable {
printRuntimeMSG("---RegressionTest1:test460");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test460");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.lang.String str13 = categoryAxis1.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions14 = categoryAxis1.getCategoryLabelPositions();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer17 = null;
        categoryPlot15.setRenderer(categoryItemRenderer17);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent19 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot15);
        categoryPlot15.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D22 = null;
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        categoryPlot15.drawBackgroundImage(graphics2D22, rectangle2D23);
        java.awt.Color color25 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        categoryPlot15.setRangeZeroBaselinePaint((java.awt.Paint) color25);
        org.jfree.chart.axis.CategoryAxis categoryAxis27 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint28 = categoryAxis27.getTickLabelPaint();
        categoryPlot15.setDomainGridlinePaint(paint28);
        categoryAxis1.setPlot((org.jfree.chart.plot.Plot) categoryPlot15);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(categoryLabelPositions14);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(paint28);
    }

    @Test
    public void test461() throws Throwable {
printRuntimeMSG("---RegressionTest1:test461");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test461");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        java.awt.Paint paint12 = lineAndShapeRenderer2.getLegendTextPaint(1);
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        boolean boolean17 = categoryPlot15.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D18 = null;
        java.awt.geom.Rectangle2D rectangle2D19 = null;
        categoryPlot15.drawBackgroundImage(graphics2D18, rectangle2D19);
        java.awt.Graphics2D graphics2D21 = null;
        java.awt.geom.Rectangle2D rectangle2D22 = null;
        categoryPlot15.drawBackgroundImage(graphics2D21, rectangle2D22);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset24 = new org.jfree.data.category.DefaultCategoryDataset();
        int int25 = defaultCategoryDataset24.getRowCount();
        org.jfree.data.category.CategoryDatasetSelectionState categoryDatasetSelectionState26 = null;
        defaultCategoryDataset24.setSelectionState(categoryDatasetSelectionState26);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState29 = lineAndShapeRenderer2.initialise(graphics2D13, rectangle2D14, categoryPlot15, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset24, plotRenderingInfo28);
        try {
            defaultCategoryDataset24.removeColumn(192);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 192, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(categoryItemRendererState29);
    }

    @Test
    public void test462() throws Throwable {
printRuntimeMSG("---RegressionTest1:test462");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test462");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        int int7 = categoryPlot0.getWeight();
        org.jfree.chart.plot.PlotOrientation plotOrientation8 = categoryPlot0.getOrientation();
        java.lang.String str9 = plotOrientation8.toString();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(plotOrientation8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "PlotOrientation.VERTICAL" + "'", str9.equals("PlotOrientation.VERTICAL"));
    }

    @Test
    public void test463() throws Throwable {
printRuntimeMSG("---RegressionTest1:test463");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test463");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("GradientPaintTransformType.CENTER_VERTICAL");
    }

    @Test
    public void test464() throws Throwable {
printRuntimeMSG("---RegressionTest1:test464");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test464");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition15 = null;
        lineAndShapeRenderer13.setSeriesPositiveItemLabelPosition(0, itemLabelPosition15);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator17 = null;
        lineAndShapeRenderer13.setLegendItemToolTipGenerator(categorySeriesLabelGenerator17);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer13.getBasePositiveItemLabelPosition();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition23 = lineAndShapeRenderer13.getNegativeItemLabelPosition((int) (short) -1, (int) (short) -1, false);
        lineAndShapeRenderer2.setBasePositiveItemLabelPosition(itemLabelPosition23);
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke26 = categoryPlot25.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis27 = null;
        categoryPlot25.setRangeAxis(valueAxis27);
        org.jfree.chart.util.RectangleEdge rectangleEdge29 = categoryPlot25.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation31 = categoryPlot25.getRangeAxisLocation((-12566464));
        boolean boolean32 = itemLabelPosition23.equals((java.lang.Object) categoryPlot25);
        org.jfree.chart.axis.AxisSpace axisSpace33 = categoryPlot25.getFixedRangeAxisSpace();
        categoryPlot25.setNotify(true);
        org.jfree.chart.axis.AxisLocation axisLocation37 = categoryPlot25.getRangeAxisLocation(49);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(itemLabelPosition23);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(rectangleEdge29);
        org.junit.Assert.assertNotNull(axisLocation31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(axisSpace33);
        org.junit.Assert.assertNotNull(axisLocation37);
    }

    @Test
    public void test465() throws Throwable {
printRuntimeMSG("---RegressionTest1:test465");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test465");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        categoryPlot0.setWeight((int) (byte) 1);
        categoryPlot0.setDomainGridlinesVisible(false);
        categoryPlot0.clearRangeMarkers();
    }

    @Test
    public void test466() throws Throwable {
printRuntimeMSG("---RegressionTest1:test466");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test466");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        double double11 = barRenderer0.getBase();
        java.awt.Graphics2D graphics2D12 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        try {
            barRenderer0.drawBackground(graphics2D12, categoryPlot13, rectangle2D14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test467() throws Throwable {
printRuntimeMSG("---RegressionTest1:test467");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test467");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.util.SortOrder sortOrder7 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent8 = null;
        categoryPlot0.rendererChanged(rendererChangeEvent8);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer12 = null;
        categoryPlot10.setRenderer(categoryItemRenderer12);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = null;
        categoryPlot10.datasetChanged(datasetChangeEvent14);
        org.jfree.data.category.CategoryDataset categoryDataset17 = categoryPlot10.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis18 = new org.jfree.chart.axis.CategoryAxis();
        double double19 = categoryAxis18.getUpperMargin();
        int int20 = categoryPlot10.getDomainAxisIndex(categoryAxis18);
        java.awt.Paint paint21 = categoryAxis18.getLabelPaint();
        java.awt.Color color22 = java.awt.Color.gray;
        categoryAxis18.setTickLabelPaint((java.awt.Paint) color22);
        categoryPlot0.setRangeGridlinePaint((java.awt.Paint) color22);
        org.jfree.data.category.CategoryDataset categoryDataset25 = categoryPlot0.getDataset();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder7);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNull(categoryDataset17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.05d + "'", double19 == 0.05d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNull(categoryDataset25);
    }

    @Test
    public void test468() throws Throwable {
printRuntimeMSG("---RegressionTest1:test468");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test468");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint5 = lineAndShapeRenderer2.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = lineAndShapeRenderer2.getSeriesURLGenerator(0);
        double double8 = lineAndShapeRenderer2.getItemMargin();
        boolean boolean9 = lineAndShapeRenderer2.getBaseSeriesVisibleInLegend();
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesVisible(192);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator13 = lineAndShapeRenderer2.getSeriesToolTipGenerator(49);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNull(categoryURLGenerator7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(categoryToolTipGenerator13);
    }

    @Test
    public void test469() throws Throwable {
printRuntimeMSG("---RegressionTest1:test469");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test469");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setLabelToolTip("hi!");
        java.awt.Font font19 = categoryAxis0.getTickLabelFont((java.lang.Comparable) "{0}");
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(font19);
    }

    @Test
    public void test470() throws Throwable {
printRuntimeMSG("---RegressionTest1:test470");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test470");
        java.lang.Object obj0 = null;
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset1 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj2 = abstractCategoryDataset1.clone();
        java.lang.Object obj3 = abstractCategoryDataset1.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes12 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean18 = lineAndShapeRenderer16.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean19 = lineAndShapeRenderer16.getBaseLinesVisible();
        java.awt.Shape shape20 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer16.setBaseLegendShape(shape20);
        renderAttributes12.setSeriesShape((int) ' ', shape20);
        org.jfree.chart.entity.ChartEntity chartEntity24 = new org.jfree.chart.entity.ChartEntity(shape20, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint25 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color27 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem28 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color27);
        java.lang.String str29 = legendItem28.getToolTipText();
        java.awt.Stroke stroke30 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem28.setOutlineStroke(stroke30);
        java.awt.Shape shape36 = null;
        java.awt.Color color37 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color39 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape36, (java.awt.Paint) color37, stroke38, (java.awt.Paint) color39);
        java.lang.Class<?> wildcardClass41 = color37.getClass();
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape20, paint25, stroke30, (java.awt.Paint) color37);
        org.jfree.chart.entity.ChartEntity chartEntity43 = new org.jfree.chart.entity.ChartEntity(shape20);
        java.awt.Color color44 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem45 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape20, (java.awt.Paint) color44);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset48 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity51 = new org.jfree.chart.entity.CategoryItemEntity(shape20, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset48, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset1.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset48);
        int int53 = defaultCategoryDataset48.getColumnCount();
        java.util.List list54 = defaultCategoryDataset48.getColumnKeys();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo55 = null;
        try {
            org.jfree.data.event.DatasetChangeEvent datasetChangeEvent56 = new org.jfree.data.event.DatasetChangeEvent(obj0, (org.jfree.data.general.Dataset) defaultCategoryDataset48, datasetChangeInfo55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null source");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(shape20);
        org.junit.Assert.assertNotNull(paint25);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(list54);
    }

    @Test
    public void test471() throws Throwable {
printRuntimeMSG("---RegressionTest1:test471");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test471");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.awt.Color color27 = java.awt.Color.yellow;
        boolean boolean28 = keyedObjects0.equals((java.lang.Object) color27);
        java.lang.Comparable comparable29 = null;
        org.jfree.data.category.CategoryDataset categoryDataset30 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis31 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis31.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis34 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer37 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator38 = lineAndShapeRenderer37.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot39 = new org.jfree.chart.plot.CategoryPlot(categoryDataset30, categoryAxis31, valueAxis34, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer37);
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        boolean boolean42 = categoryPlot40.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D43 = null;
        java.awt.geom.Rectangle2D rectangle2D44 = null;
        categoryPlot40.drawBackgroundImage(graphics2D43, rectangle2D44);
        java.awt.Graphics2D graphics2D46 = null;
        java.awt.geom.Rectangle2D rectangle2D47 = null;
        categoryPlot40.drawBackgroundImage(graphics2D46, rectangle2D47);
        lineAndShapeRenderer37.setPlot(categoryPlot40);
        categoryPlot40.setRangeCrosshairValue(0.0d);
        org.jfree.chart.plot.PlotOrientation plotOrientation52 = categoryPlot40.getOrientation();
        java.awt.Paint paint53 = categoryPlot40.getRangeMinorGridlinePaint();
        try {
            keyedObjects0.setObject(comparable29, (java.lang.Object) categoryPlot40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator38);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(plotOrientation52);
        org.junit.Assert.assertNotNull(paint53);
    }

    @Test
    public void test472() throws Throwable {
printRuntimeMSG("---RegressionTest1:test472");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test472");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition6 = barRenderer0.getBaseNegativeItemLabelPosition();
        org.jfree.chart.renderer.category.BarPainter barPainter7 = barRenderer0.getBarPainter();
        java.awt.Paint paint8 = null;
        try {
            barRenderer0.setBaseItemLabelPaint(paint8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'paint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNotNull(itemLabelPosition6);
        org.junit.Assert.assertNotNull(barPainter7);
    }

    @Test
    public void test473() throws Throwable {
printRuntimeMSG("---RegressionTest1:test473");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test473");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        barRenderer0.setSeriesItemLabelsVisible((int) (short) 0, (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test474() throws Throwable {
printRuntimeMSG("---RegressionTest1:test474");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test474");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setCategoryMargin((double) 10.0f);
        float float3 = categoryAxis0.getTickMarkInsideLength();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
    }

    @Test
    public void test475() throws Throwable {
printRuntimeMSG("---RegressionTest1:test475");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test475");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        boolean boolean9 = lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setUseFillPaint(false);
        boolean boolean15 = lineAndShapeRenderer2.getItemLineVisible((int) (byte) 0, (-10));
        org.jfree.chart.util.StrokeList strokeList17 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator21 = lineAndShapeRenderer20.getBaseItemLabelGenerator();
        java.awt.Paint paint23 = lineAndShapeRenderer20.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator25 = lineAndShapeRenderer20.getSeriesURLGenerator(0);
        boolean boolean26 = strokeList17.equals((java.lang.Object) categoryURLGenerator25);
        java.awt.Stroke stroke28 = strokeList17.getStroke((-12566464));
        java.awt.Stroke stroke30 = strokeList17.getStroke((-65536));
        org.jfree.chart.axis.CategoryAxis categoryAxis31 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint32 = categoryAxis31.getTickLabelPaint();
        categoryAxis31.setFixedDimension((double) 1);
        java.awt.Font font36 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_FONT;
        categoryAxis31.setTickLabelFont((java.lang.Comparable) (-12566464), font36);
        boolean boolean38 = strokeList17.equals((java.lang.Object) font36);
        try {
            lineAndShapeRenderer2.setLegendTextFont((-65536), font36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator21);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNull(categoryURLGenerator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(stroke28);
        org.junit.Assert.assertNull(stroke30);
        org.junit.Assert.assertNotNull(paint32);
        org.junit.Assert.assertNotNull(font36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test476() throws Throwable {
printRuntimeMSG("---RegressionTest1:test476");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test476");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color3 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem4 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color3);
        java.lang.String str5 = legendItem4.getToolTipText();
        java.awt.Stroke stroke6 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem4.setOutlineStroke(stroke6);
        legendItem1.setOutlineStroke(stroke6);
        legendItem1.setLineVisible(false);
        java.awt.Stroke stroke11 = legendItem1.getOutlineStroke();
        legendItem1.setURLText("");
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(stroke11);
    }

    @Test
    public void test477() throws Throwable {
printRuntimeMSG("---RegressionTest1:test477");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test477");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        categoryAxis0.setFixedDimension((double) 1);
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        categoryAxis0.setAxisLineStroke(stroke26);
        org.jfree.chart.util.RectangleInsets rectangleInsets40 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str41 = rectangleInsets40.toString();
        double double42 = rectangleInsets40.getTop();
        double double44 = rectangleInsets40.calculateTopOutset((double) ' ');
        double double46 = rectangleInsets40.trimWidth((double) (short) -1);
        categoryAxis0.setLabelInsets(rectangleInsets40, true);
        boolean boolean49 = categoryAxis0.isAxisLineVisible();
        float float50 = categoryAxis0.getMinorTickMarkOutsideLength();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(rectangleInsets40);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str41.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2.0d + "'", double42 == 2.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.0d + "'", double44 == 2.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9.0d) + "'", double46 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 2.0f + "'", float50 == 2.0f);
    }

    @Test
    public void test478() throws Throwable {
printRuntimeMSG("---RegressionTest1:test478");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test478");
        double double0 = org.jfree.chart.axis.CategoryAxis.DEFAULT_CATEGORY_MARGIN;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 0.2d + "'", double0 == 0.2d);
    }

    @Test
    public void test479() throws Throwable {
printRuntimeMSG("---RegressionTest1:test479");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test479");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        boolean boolean11 = categoryPlot0.isRangeCrosshairVisible();
        java.lang.Object obj12 = null;
        boolean boolean13 = categoryPlot0.equals(obj12);
        categoryPlot0.clearAnnotations();
        java.awt.Stroke stroke15 = categoryPlot0.getRangeCrosshairStroke();
        boolean boolean16 = categoryPlot0.isRangeMinorGridlinesVisible();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test480() throws Throwable {
printRuntimeMSG("---RegressionTest1:test480");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test480");
        org.jfree.chart.util.StrokeList strokeList0 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator4 = lineAndShapeRenderer3.getBaseItemLabelGenerator();
        java.awt.Paint paint6 = lineAndShapeRenderer3.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator8 = lineAndShapeRenderer3.getSeriesURLGenerator(0);
        boolean boolean9 = strokeList0.equals((java.lang.Object) categoryURLGenerator8);
        java.awt.Stroke stroke11 = strokeList0.getStroke((-12566464));
        java.awt.Stroke stroke13 = strokeList0.getStroke((-65536));
        org.jfree.chart.axis.CategoryAxis categoryAxis14 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint15 = categoryAxis14.getTickLabelPaint();
        categoryAxis14.setFixedDimension((double) 1);
        java.awt.Font font19 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_FONT;
        categoryAxis14.setTickLabelFont((java.lang.Comparable) (-12566464), font19);
        boolean boolean21 = strokeList0.equals((java.lang.Object) font19);
        java.awt.Stroke stroke23 = strokeList0.getStroke(128);
        org.junit.Assert.assertNull(categoryItemLabelGenerator4);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNull(categoryURLGenerator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(stroke11);
        org.junit.Assert.assertNull(stroke13);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertNotNull(font19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(stroke23);
    }

    @Test
    public void test481() throws Throwable {
printRuntimeMSG("---RegressionTest1:test481");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test481");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setLabelToolTip("hi!");
        double double18 = categoryAxis0.getCategoryMargin();
        java.lang.String str19 = categoryAxis0.getLabelToolTip();
        categoryAxis0.setTickMarksVisible(true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
    }

    @Test
    public void test482() throws Throwable {
printRuntimeMSG("---RegressionTest1:test482");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test482");
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType0 = org.jfree.chart.event.ChartChangeEventType.GENERAL;
        org.junit.Assert.assertNotNull(chartChangeEventType0);
    }

    @Test
    public void test483() throws Throwable {
printRuntimeMSG("---RegressionTest1:test483");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test483");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font3 = categoryAxis0.getTickLabelFont();
        categoryAxis0.setMaximumCategoryLabelWidthRatio(0.0f);
        org.junit.Assert.assertNotNull(font3);
    }

    @Test
    public void test484() throws Throwable {
printRuntimeMSG("---RegressionTest1:test484");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test484");
        org.jfree.chart.util.UnitType unitType0 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.util.RectangleInsets rectangleInsets5 = new org.jfree.chart.util.RectangleInsets(unitType0, (double) 2.0f, (double) 100, 100.0d, (double) ' ');
        java.lang.Class<?> wildcardClass6 = unitType0.getClass();
        org.junit.Assert.assertNotNull(unitType0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test485() throws Throwable {
printRuntimeMSG("---RegressionTest1:test485");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test485");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        categoryPlot0.setRangeZeroBaselineVisible(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = categoryPlot0.getRenderer((int) (byte) -1);
        java.awt.Color color12 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        categoryPlot0.setDomainCrosshairPaint((java.awt.Paint) color12);
        categoryPlot0.clearDomainAxes();
        int int15 = categoryPlot0.getRendererCount();
        org.jfree.chart.axis.ValueAxis valueAxis16 = null;
        try {
            int int17 = categoryPlot0.getRangeAxisIndex(valueAxis16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'axis' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNull(categoryItemRenderer11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test486() throws Throwable {
printRuntimeMSG("---RegressionTest1:test486");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test486");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean8 = lineAndShapeRenderer2.getUseFillPaint();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesItemLabelsVisible(0);
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false);
        boolean boolean13 = lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint();
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false);
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test487() throws Throwable {
printRuntimeMSG("---RegressionTest1:test487");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test487");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        categoryPlot0.drawBackgroundImage(graphics2D7, rectangle2D8);
        org.jfree.chart.plot.Marker marker10 = null;
        org.jfree.chart.util.Layer layer11 = null;
        boolean boolean12 = categoryPlot0.removeDomainMarker(marker10, layer11);
        org.jfree.chart.plot.Marker marker14 = null;
        org.jfree.chart.util.Layer layer15 = null;
        boolean boolean16 = categoryPlot0.removeDomainMarker((int) '4', marker14, layer15);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test488() throws Throwable {
printRuntimeMSG("---RegressionTest1:test488");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test488");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        int int7 = categoryPlot0.getBackgroundImageAlignment();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test489() throws Throwable {
printRuntimeMSG("---RegressionTest1:test489");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test489");
        try {
            java.awt.Color color1 = java.awt.Color.decode("ItemLabelAnchor.INSIDE4");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"ItemLabelAnchor.INSIDE4\"");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test490() throws Throwable {
printRuntimeMSG("---RegressionTest1:test490");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test490");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double1 = rectangleInsets0.getRight();
        double double3 = rectangleInsets0.calculateRightOutset(0.05d);
        double double5 = rectangleInsets0.extendHeight((double) '4');
        double double7 = rectangleInsets0.calculateBottomInset((-0.7853981633974483d));
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.0d + "'", double3 == 4.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 56.0d + "'", double5 == 56.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
    }

    @Test
    public void test491() throws Throwable {
printRuntimeMSG("---RegressionTest1:test491");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test491");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset53 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean57 = lineAndShapeRenderer56.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator58 = null;
        lineAndShapeRenderer56.setBaseURLGenerator(categoryURLGenerator58);
        java.awt.Paint paint63 = lineAndShapeRenderer56.getItemLabelPaint((-65536), 0, false);
        boolean boolean64 = defaultCategoryDataset53.equals((java.lang.Object) false);
        java.lang.Object obj65 = defaultCategoryDataset53.clone();
        categoryItemEntity47.setDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset53);
        try {
            defaultCategoryDataset53.setSelected((int) (byte) 1, 1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(paint63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test492() throws Throwable {
printRuntimeMSG("---RegressionTest1:test492");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test492");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        double double14 = categoryAxis11.getLabelAngle();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        categoryPlot17.setParent((org.jfree.chart.plot.Plot) categoryPlot19);
        org.jfree.chart.LegendItemCollection legendItemCollection22 = categoryPlot17.getFixedLegendItems();
        java.lang.Comparable comparable23 = categoryPlot17.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge24 = categoryPlot17.getRangeAxisEdge();
        categoryPlot17.setRangeZeroBaselineVisible(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer28 = categoryPlot17.getRenderer((int) (byte) -1);
        org.jfree.chart.entity.PlotEntity plotEntity29 = new org.jfree.chart.entity.PlotEntity(shape16, (org.jfree.chart.plot.Plot) categoryPlot17);
        int int30 = categoryPlot17.getCrosshairDatasetIndex();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo33 = null;
        java.awt.geom.Point2D point2D34 = null;
        categoryPlot17.zoomDomainAxes((double) 15, (double) ' ', plotRenderingInfo33, point2D34);
        java.util.List list36 = categoryPlot17.getAnnotations();
        java.awt.geom.Rectangle2D rectangle2D37 = null;
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor38 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.axis.AxisLocation axisLocation39 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation40 = axisLocation39.getOpposite();
        boolean boolean41 = itemLabelAnchor38.equals((java.lang.Object) axisLocation39);
        org.jfree.chart.plot.CategoryPlot categoryPlot42 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke43 = categoryPlot42.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot44 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke45 = categoryPlot44.getRangeMinorGridlineStroke();
        categoryPlot42.setParent((org.jfree.chart.plot.Plot) categoryPlot44);
        org.jfree.chart.LegendItemCollection legendItemCollection47 = categoryPlot42.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent48 = null;
        categoryPlot42.axisChanged(axisChangeEvent48);
        org.jfree.chart.axis.AxisSpace axisSpace50 = categoryPlot42.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset51 = null;
        categoryPlot42.setDataset(categoryDataset51);
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot42.setDomainCrosshairStroke(stroke53);
        java.awt.Stroke stroke55 = categoryPlot42.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent56 = null;
        categoryPlot42.annotationChanged(annotationChangeEvent56);
        org.jfree.chart.plot.CategoryPlot categoryPlot58 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation59 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot58.setOrientation(plotOrientation59);
        categoryPlot42.setOrientation(plotOrientation59);
        org.jfree.chart.util.RectangleEdge rectangleEdge62 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(axisLocation39, plotOrientation59);
        try {
            double double63 = categoryAxis11.getCategoryMiddle((java.lang.Comparable) "TextAnchor.BASELINE_RIGHT", list36, rectangle2D37, rectangleEdge62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid category index: -1");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNull(legendItemCollection22);
        org.junit.Assert.assertNull(comparable23);
        org.junit.Assert.assertNotNull(rectangleEdge24);
        org.junit.Assert.assertNull(categoryItemRenderer28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(itemLabelAnchor38);
        org.junit.Assert.assertNotNull(axisLocation39);
        org.junit.Assert.assertNotNull(axisLocation40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNull(legendItemCollection47);
        org.junit.Assert.assertNull(axisSpace50);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertNotNull(plotOrientation59);
        org.junit.Assert.assertNotNull(rectangleEdge62);
    }

    @Test
    public void test493() throws Throwable {
printRuntimeMSG("---RegressionTest1:test493");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test493");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator49 = lineAndShapeRenderer48.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator50 = null;
        lineAndShapeRenderer48.setBaseToolTipGenerator(categoryToolTipGenerator50);
        lineAndShapeRenderer48.setAutoPopulateSeriesOutlinePaint(false);
        boolean boolean54 = plotEntity33.equals((java.lang.Object) lineAndShapeRenderer48);
        java.lang.String str55 = plotEntity33.getToolTipText();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(categoryItemLabelGenerator49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test494() throws Throwable {
printRuntimeMSG("---RegressionTest1:test494");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test494");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setSeriesVisible((int) (short) 10, (java.lang.Boolean) true, false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test495() throws Throwable {
printRuntimeMSG("---RegressionTest1:test495");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test495");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.data.category.CategoryDataset categoryDataset2 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis3 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis3.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis6 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator10 = lineAndShapeRenderer9.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot(categoryDataset2, categoryAxis3, valueAxis6, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer9);
        categoryAxis3.setVisible(false);
        java.awt.Font font14 = categoryAxis3.getTickLabelFont();
        try {
            renderAttributes0.setSeriesLabelFont((int) (short) 10, font14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator10);
        org.junit.Assert.assertNotNull(font14);
    }

    @Test
    public void test496() throws Throwable {
printRuntimeMSG("---RegressionTest1:test496");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test496");
        try {
            org.jfree.chart.ChartColor chartColor3 = new org.jfree.chart.ChartColor((-16777216), 192, 128);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Color parameter outside of expected range: Red");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test497() throws Throwable {
printRuntimeMSG("---RegressionTest1:test497");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test497");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        java.awt.Color color1 = color0.brighter();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertNotNull(color1);
    }

    @Test
    public void test498() throws Throwable {
printRuntimeMSG("---RegressionTest1:test498");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test498");
        org.jfree.chart.axis.CategoryAnchor categoryAnchor0 = org.jfree.chart.axis.CategoryAnchor.START;
        java.lang.Object obj1 = null;
        boolean boolean2 = categoryAnchor0.equals(obj1);
        java.lang.String str3 = categoryAnchor0.toString();
        org.jfree.data.category.CategoryDataset categoryDataset4 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis5 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis5.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis8 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator12 = lineAndShapeRenderer11.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot(categoryDataset4, categoryAxis5, valueAxis8, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer11);
        org.jfree.chart.axis.ValueAxis valueAxis14 = null;
        org.jfree.data.Range range15 = categoryPlot13.getDataRange(valueAxis14);
        categoryPlot13.setWeight((int) 'a');
        boolean boolean18 = categoryAnchor0.equals((java.lang.Object) 'a');
        org.jfree.chart.renderer.RenderAttributes renderAttributes19 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean25 = lineAndShapeRenderer23.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean26 = lineAndShapeRenderer23.getBaseLinesVisible();
        java.awt.Shape shape27 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer23.setBaseLegendShape(shape27);
        renderAttributes19.setSeriesShape((int) ' ', shape27);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean34 = lineAndShapeRenderer32.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean35 = lineAndShapeRenderer32.getBaseLinesVisible();
        java.awt.Shape shape36 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer32.setBaseLegendShape(shape36);
        renderAttributes19.setDefaultShape(shape36);
        java.awt.Paint paint39 = renderAttributes19.getDefaultFillPaint();
        boolean boolean40 = categoryAnchor0.equals((java.lang.Object) renderAttributes19);
        org.junit.Assert.assertNotNull(categoryAnchor0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "CategoryAnchor.START" + "'", str3.equals("CategoryAnchor.START"));
        org.junit.Assert.assertNull(categoryItemLabelGenerator12);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(shape27);
        org.junit.Assert.assertNull(boolean34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(shape36);
        org.junit.Assert.assertNull(paint39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test499() throws Throwable {
printRuntimeMSG("---RegressionTest1:test499");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test499");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
    }

    @Test
    public void test500() throws Throwable {
printRuntimeMSG("---RegressionTest1:test500");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test500");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Color color7 = java.awt.Color.RED;
        renderAttributes5.setDefaultOutlinePaint((java.awt.Paint) color7);
        categoryPlot0.setDomainGridlinePaint((java.awt.Paint) color7);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean18 = lineAndShapeRenderer12.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator22 = lineAndShapeRenderer21.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator23 = null;
        lineAndShapeRenderer21.setBaseToolTipGenerator(categoryToolTipGenerator23);
        java.awt.Font font26 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer21.setSeriesItemLabelFont((int) (short) 0, font26, true);
        lineAndShapeRenderer12.setBaseLegendTextFont(font26);
        org.jfree.chart.LegendItemCollection legendItemCollection30 = lineAndShapeRenderer12.getLegendItems();
        categoryPlot0.setFixedLegendItems(legendItemCollection30);
        java.awt.Graphics2D graphics2D32 = null;
        java.awt.geom.Rectangle2D rectangle2D33 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo35 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState36 = null;
        boolean boolean37 = categoryPlot0.render(graphics2D32, rectangle2D33, (int) '#', plotRenderingInfo35, categoryCrosshairState36);
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor38 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.axis.AxisLocation axisLocation39 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation40 = axisLocation39.getOpposite();
        boolean boolean41 = itemLabelAnchor38.equals((java.lang.Object) axisLocation39);
        org.jfree.chart.plot.CategoryPlot categoryPlot42 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke43 = categoryPlot42.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot44 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke45 = categoryPlot44.getRangeMinorGridlineStroke();
        categoryPlot42.setParent((org.jfree.chart.plot.Plot) categoryPlot44);
        org.jfree.chart.LegendItemCollection legendItemCollection47 = categoryPlot42.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent48 = null;
        categoryPlot42.axisChanged(axisChangeEvent48);
        org.jfree.chart.axis.AxisSpace axisSpace50 = categoryPlot42.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset51 = null;
        categoryPlot42.setDataset(categoryDataset51);
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot42.setDomainCrosshairStroke(stroke53);
        java.awt.Stroke stroke55 = categoryPlot42.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent56 = null;
        categoryPlot42.annotationChanged(annotationChangeEvent56);
        org.jfree.chart.plot.CategoryPlot categoryPlot58 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation59 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot58.setOrientation(plotOrientation59);
        categoryPlot42.setOrientation(plotOrientation59);
        org.jfree.chart.util.RectangleEdge rectangleEdge62 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(axisLocation39, plotOrientation59);
        categoryPlot0.setRangeAxisLocation(axisLocation39);
        org.jfree.chart.axis.AxisLocation axisLocation64 = axisLocation39.getOpposite();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator22);
        org.junit.Assert.assertNotNull(font26);
        org.junit.Assert.assertNotNull(legendItemCollection30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(itemLabelAnchor38);
        org.junit.Assert.assertNotNull(axisLocation39);
        org.junit.Assert.assertNotNull(axisLocation40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNull(legendItemCollection47);
        org.junit.Assert.assertNull(axisSpace50);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertNotNull(plotOrientation59);
        org.junit.Assert.assertNotNull(rectangleEdge62);
        org.junit.Assert.assertNotNull(axisLocation64);
    }
}

