import java.io.IOException; 
import java.io.RandomAccessFile;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    
static boolean flag__lxy=false;
static public void printRuntimeMSG (String printMSG)
{
if(flag__lxy)return;
flag__lxy=true;
	try {
	RandomAccessFile randomFile = new RandomAccessFile("/Users/sophie/Documents/xiongyingfei/DefectRepairing/tool/source/tmp_aChart1Patch1get_randoop_coverage", "rw");
	long fileLength = randomFile.length();
	randomFile.seek(fileLength);
	randomFile.writeBytes(printMSG+"\n");
	randomFile.close();
	} catch (IOException e__e__e) {
	e__e__e.printStackTrace();

	}
flag__lxy=false;
}
public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
printRuntimeMSG("---RegressionTest2:test001");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test001");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        boolean boolean14 = categoryAxis11.isVisible();
        categoryAxis11.setVisible(true);
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test002() throws Throwable {
printRuntimeMSG("---RegressionTest2:test002");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test002");
        org.jfree.chart.util.ObjectList objectList0 = new org.jfree.chart.util.ObjectList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.awt.Shape shape5 = lineAndShapeRenderer4.getBaseLegendShape();
        objectList0.set((int) (short) 0, (java.lang.Object) lineAndShapeRenderer4);
        org.junit.Assert.assertNull(shape5);
    }

    @Test
    public void test003() throws Throwable {
printRuntimeMSG("---RegressionTest2:test003");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test003");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        boolean boolean11 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint();
        org.jfree.chart.renderer.RenderAttributes renderAttributes12 = lineAndShapeRenderer2.getSelectedItemAttributes();
        java.lang.Boolean boolean14 = lineAndShapeRenderer2.getSeriesLinesVisible((int) '4');
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(renderAttributes12);
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test004() throws Throwable {
printRuntimeMSG("---RegressionTest2:test004");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test004");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        boolean boolean11 = defaultCategoryDataset0.equals((java.lang.Object) false);
        defaultCategoryDataset0.setValue((double) 100L, (java.lang.Comparable) 0.2d, (java.lang.Comparable) "Category Plot");
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo19 = null;
        java.awt.geom.Point2D point2D20 = null;
        categoryPlot16.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo19, point2D20);
        categoryPlot16.clearAnnotations();
        java.lang.String str23 = categoryPlot16.getNoDataMessage();
        defaultCategoryDataset0.addChangeListener((org.jfree.data.event.DatasetChangeListener) categoryPlot16);
        java.util.List list25 = defaultCategoryDataset0.getColumnKeys();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test005() throws Throwable {
printRuntimeMSG("---RegressionTest2:test005");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test005");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        categoryPlot0.setRangePannable(true);
        categoryPlot0.clearDomainMarkers();
        categoryPlot0.clearSelection();
        org.jfree.chart.util.RectangleInsets rectangleInsets14 = categoryPlot0.getInsets();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(rectangleInsets14);
    }

    @Test
    public void test006() throws Throwable {
printRuntimeMSG("---RegressionTest2:test006");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test006");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint5 = lineAndShapeRenderer2.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = lineAndShapeRenderer2.getSeriesURLGenerator(0);
        lineAndShapeRenderer2.setItemLabelAnchorOffset((double) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke13 = categoryPlot12.getRangeMinorGridlineStroke();
        categoryPlot10.setParent((org.jfree.chart.plot.Plot) categoryPlot12);
        org.jfree.chart.LegendItemCollection legendItemCollection15 = categoryPlot10.getFixedLegendItems();
        java.lang.Comparable comparable16 = categoryPlot10.getDomainCrosshairRowKey();
        org.jfree.data.category.CategoryDataset categoryDataset18 = categoryPlot10.getDataset((int) (short) 1);
        categoryPlot10.setRangeCrosshairLockedOnData(false);
        categoryPlot10.setBackgroundImageAlignment(1);
        org.jfree.chart.renderer.RenderAttributes renderAttributes23 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint24 = renderAttributes23.getDefaultLabelPaint();
        java.awt.Stroke stroke27 = renderAttributes23.getItemStroke((int) (byte) 10, (int) 'a');
        org.jfree.chart.renderer.RenderAttributes renderAttributes28 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint29 = renderAttributes28.getDefaultLabelPaint();
        java.awt.Paint paint32 = renderAttributes28.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke33 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes28.setDefaultStroke(stroke33);
        renderAttributes23.setDefaultOutlineStroke(stroke33);
        categoryPlot10.setDomainCrosshairStroke(stroke33);
        lineAndShapeRenderer2.setBaseOutlineStroke(stroke33, false);
        boolean boolean41 = lineAndShapeRenderer2.getItemShapeFilled((int) (byte) 100, (int) ' ');
        boolean boolean45 = lineAndShapeRenderer2.getItemCreateEntity(0, (int) (short) 1, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNull(categoryURLGenerator7);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(legendItemCollection15);
        org.junit.Assert.assertNull(comparable16);
        org.junit.Assert.assertNull(categoryDataset18);
        org.junit.Assert.assertNull(paint24);
        org.junit.Assert.assertNull(stroke27);
        org.junit.Assert.assertNull(paint29);
        org.junit.Assert.assertNull(paint32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test007() throws Throwable {
printRuntimeMSG("---RegressionTest2:test007");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test007");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font3 = categoryAxis0.getTickLabelFont();
        float float4 = categoryAxis0.getMaximumCategoryLabelWidthRatio();
        categoryAxis0.addCategoryLabelToolTip((java.lang.Comparable) (-1.2566468E7d), "Category Plot");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator12 = lineAndShapeRenderer11.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator13 = null;
        lineAndShapeRenderer11.setBaseToolTipGenerator(categoryToolTipGenerator13);
        java.awt.Font font16 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer11.setSeriesItemLabelFont((int) (short) 0, font16, true);
        categoryAxis0.setTickLabelFont((java.lang.Comparable) 100.0f, font16);
        java.lang.Comparable comparable20 = null;
        try {
            java.awt.Font font21 = categoryAxis0.getTickLabelFont(comparable20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'category' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNull(categoryItemLabelGenerator12);
        org.junit.Assert.assertNotNull(font16);
    }

    @Test
    public void test008() throws Throwable {
printRuntimeMSG("---RegressionTest2:test008");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test008");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) "TextAnchor.HALF_ASCENT_LEFT");
        org.jfree.chart.axis.CategoryAxis categoryAxis54 = categoryPlot0.getDomainAxis((int) (byte) -1);
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNull(categoryAxis54);
    }

    @Test
    public void test009() throws Throwable {
printRuntimeMSG("---RegressionTest2:test009");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test009");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setCategoryMargin((double) (byte) 100);
        java.awt.Paint paint20 = categoryAxis0.getTickLabelPaint();
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color24 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem25 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color24);
        java.lang.String str26 = legendItem25.getToolTipText();
        java.awt.Stroke stroke27 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem25.setOutlineStroke(stroke27);
        legendItem22.setOutlineStroke(stroke27);
        categoryAxis0.setTickMarkStroke(stroke27);
        boolean boolean31 = categoryAxis0.isAxisLineVisible();
        categoryAxis0.setMaximumCategoryLabelLines(49);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test010() throws Throwable {
printRuntimeMSG("---RegressionTest2:test010");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test010");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        boolean boolean5 = categoryPlot2.isRangeMinorGridlinesVisible();
        org.jfree.chart.util.RectangleInsets rectangleInsets6 = categoryPlot2.getAxisOffset();
        java.awt.geom.Rectangle2D rectangle2D7 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D8 = rectangleInsets6.createInsetRectangle(rectangle2D7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(rectangleInsets6);
    }

    @Test
    public void test011() throws Throwable {
printRuntimeMSG("---RegressionTest2:test011");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test011");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.plot.Plot plot5 = plotChangeEvent4.getPlot();
        java.lang.Object obj6 = plotChangeEvent4.getSource();
        org.jfree.chart.JFreeChart jFreeChart7 = null;
        plotChangeEvent4.setChart(jFreeChart7);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plot5);
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test012() throws Throwable {
printRuntimeMSG("---RegressionTest2:test012");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test012");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        java.awt.Shape shape8 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer4.setBaseLegendShape(shape8);
        renderAttributes0.setSeriesShape((int) ' ', shape8);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean16 = lineAndShapeRenderer13.getBaseLinesVisible();
        java.awt.Shape shape17 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer13.setBaseLegendShape(shape17);
        renderAttributes0.setDefaultShape(shape17);
        org.jfree.chart.entity.ChartEntity chartEntity21 = new org.jfree.chart.entity.ChartEntity(shape17, "PlotOrientation.VERTICAL");
        org.jfree.chart.plot.CategoryPlot categoryPlot22 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo25 = null;
        java.awt.geom.Point2D point2D26 = null;
        categoryPlot22.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo25, point2D26);
        categoryPlot22.clearDomainMarkers((int) (short) 0);
        categoryPlot22.setWeight((int) (byte) 1);
        org.jfree.data.category.CategoryDataset categoryDataset32 = null;
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer33 = categoryPlot22.getRendererForDataset(categoryDataset32);
        boolean boolean34 = chartEntity21.equals((java.lang.Object) categoryPlot22);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(shape8);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shape17);
        org.junit.Assert.assertNull(categoryItemRenderer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test013() throws Throwable {
printRuntimeMSG("---RegressionTest2:test013");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test013");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets2 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double3 = rectangleInsets2.getRight();
        double double5 = rectangleInsets2.calculateTopInset(0.0d);
        categoryAxis0.setLabelInsets(rectangleInsets2, false);
        java.awt.Shape shape12 = null;
        java.awt.Color color13 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke14 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color15 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem16 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape12, (java.awt.Paint) color13, stroke14, (java.awt.Paint) color15);
        java.awt.Shape shape17 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX;
        legendItem16.setLine(shape17);
        java.awt.Paint paint19 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        legendItem16.setLabelPaint(paint19);
        categoryAxis0.setTickLabelPaint(paint19);
        boolean boolean22 = categoryAxis0.isAxisLineVisible();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNotNull(rectangleInsets2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.0d + "'", double3 == 4.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(shape17);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test014() throws Throwable {
printRuntimeMSG("---RegressionTest2:test014");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test014");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getRangeAxisLocation((-12566464));
        org.jfree.chart.plot.Marker marker8 = null;
        org.jfree.chart.util.Layer layer9 = null;
        try {
            categoryPlot0.addRangeMarker((int) (short) 100, marker8, layer9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertNotNull(axisLocation6);
    }

    @Test
    public void test015() throws Throwable {
printRuntimeMSG("---RegressionTest2:test015");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test015");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        org.jfree.chart.util.RectangleInsets rectangleInsets16 = org.jfree.chart.util.RectangleInsets.ZERO_INSETS;
        categoryAxis6.setLabelInsets(rectangleInsets16, true);
        categoryAxis6.setVisible(true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(rectangleInsets16);
    }

    @Test
    public void test016() throws Throwable {
printRuntimeMSG("---RegressionTest2:test016");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test016");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.lang.Object obj9 = legendItem8.clone();
        java.awt.Paint paint10 = legendItem8.getOutlinePaint();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(paint10);
    }

    @Test
    public void test017() throws Throwable {
printRuntimeMSG("---RegressionTest2:test017");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test017");
        java.awt.Color color0 = java.awt.Color.orange;
        java.awt.color.ColorSpace colorSpace1 = color0.getColorSpace();
        int int2 = color0.getGreen();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertNotNull(colorSpace1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 200 + "'", int2 == 200);
    }

    @Test
    public void test018() throws Throwable {
printRuntimeMSG("---RegressionTest2:test018");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test018");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint12 = renderAttributes11.getDefaultLabelPaint();
        java.awt.Paint paint15 = renderAttributes11.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes21 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean27 = lineAndShapeRenderer25.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean28 = lineAndShapeRenderer25.getBaseLinesVisible();
        java.awt.Shape shape29 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer25.setBaseLegendShape(shape29);
        renderAttributes21.setSeriesShape((int) ' ', shape29);
        org.jfree.chart.entity.ChartEntity chartEntity33 = new org.jfree.chart.entity.ChartEntity(shape29, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color36 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem37 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color36);
        java.lang.String str38 = legendItem37.getToolTipText();
        java.awt.Stroke stroke39 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem37.setOutlineStroke(stroke39);
        java.awt.Shape shape45 = null;
        java.awt.Color color46 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color48 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape45, (java.awt.Paint) color46, stroke47, (java.awt.Paint) color48);
        java.lang.Class<?> wildcardClass50 = color46.getClass();
        org.jfree.chart.LegendItem legendItem51 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape29, paint34, stroke39, (java.awt.Paint) color46);
        org.jfree.chart.entity.ChartEntity chartEntity52 = new org.jfree.chart.entity.ChartEntity(shape29);
        renderAttributes11.setSeriesShape(1, shape29);
        org.jfree.chart.plot.CategoryPlot categoryPlot54 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke55 = categoryPlot54.getRangeMinorGridlineStroke();
        boolean boolean56 = categoryPlot54.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity59 = new org.jfree.chart.entity.PlotEntity(shape29, (org.jfree.chart.plot.Plot) categoryPlot54, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.chart.entity.PlotEntity plotEntity60 = new org.jfree.chart.entity.PlotEntity(shape10, (org.jfree.chart.plot.Plot) categoryPlot54);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo63 = null;
        java.awt.geom.Point2D point2D64 = null;
        categoryPlot54.zoomDomainAxes(2.0d, (double) (-16777216), plotRenderingInfo63, point2D64);
        try {
            categoryPlot54.zoom((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNull(paint15);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(shape29);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test019() throws Throwable {
printRuntimeMSG("---RegressionTest2:test019");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test019");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.chart.util.ShadowGenerator shadowGenerator9 = null;
        categoryPlot0.setShadowGenerator(shadowGenerator9);
        org.jfree.chart.renderer.RenderAttributes renderAttributes19 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean25 = lineAndShapeRenderer23.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean26 = lineAndShapeRenderer23.getBaseLinesVisible();
        java.awt.Shape shape27 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer23.setBaseLegendShape(shape27);
        renderAttributes19.setSeriesShape((int) ' ', shape27);
        org.jfree.chart.entity.ChartEntity chartEntity31 = new org.jfree.chart.entity.ChartEntity(shape27, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color34 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem35 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color34);
        java.lang.String str36 = legendItem35.getToolTipText();
        java.awt.Stroke stroke37 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem35.setOutlineStroke(stroke37);
        java.awt.Shape shape43 = null;
        java.awt.Color color44 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke45 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color46 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape43, (java.awt.Paint) color44, stroke45, (java.awt.Paint) color46);
        java.lang.Class<?> wildcardClass48 = color44.getClass();
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape27, paint32, stroke37, (java.awt.Paint) color44);
        org.jfree.chart.entity.ChartEntity chartEntity50 = new org.jfree.chart.entity.ChartEntity(shape27);
        java.awt.Color color51 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem52 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape27, (java.awt.Paint) color51);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset55 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity58 = new org.jfree.chart.entity.CategoryItemEntity(shape27, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset55, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset55.addValue((java.lang.Number) (-1), (java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", (java.lang.Comparable) "SortOrder.ASCENDING");
        defaultCategoryDataset55.clearSelection();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer64 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset55);
        defaultCategoryDataset55.clearSelection();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(shape27);
        org.junit.Assert.assertNotNull(paint32);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNull(categoryItemRenderer64);
    }

    @Test
    public void test020() throws Throwable {
printRuntimeMSG("---RegressionTest2:test020");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test020");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowXOffset((double) '4');
        barRenderer0.setBase((double) 3);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
    }

    @Test
    public void test021() throws Throwable {
printRuntimeMSG("---RegressionTest2:test021");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test021");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomRangeAxes(0.0d, (double) (-8355712), plotRenderingInfo13, point2D14);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot0.zoomDomainAxes((double) 2, plotRenderingInfo17, point2D18, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test022() throws Throwable {
printRuntimeMSG("---RegressionTest2:test022");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test022");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        lineAndShapeRenderer2.setAutoPopulateSeriesOutlinePaint(true);
        int int15 = lineAndShapeRenderer2.getDefaultEntityRadius();
        java.awt.Shape shape19 = lineAndShapeRenderer2.getItemShape((-10), (-739), true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(shape19);
    }

    @Test
    public void test023() throws Throwable {
printRuntimeMSG("---RegressionTest2:test023");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test023");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Shape shape6 = renderAttributes0.getItemShape((int) 'a', (int) ' ');
        java.awt.Paint paint7 = renderAttributes0.getDefaultFillPaint();
        java.lang.Boolean boolean8 = renderAttributes0.getDefaultCreateEntity();
        java.awt.Stroke stroke11 = renderAttributes0.getItemStroke(0, (int) ' ');
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(shape6);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(stroke11);
    }

    @Test
    public void test024() throws Throwable {
printRuntimeMSG("---RegressionTest2:test024");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test024");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        renderAttributes0.setSeriesShape(1, shape18);
        org.jfree.chart.plot.CategoryPlot categoryPlot43 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke44 = categoryPlot43.getRangeMinorGridlineStroke();
        boolean boolean45 = categoryPlot43.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity48 = new org.jfree.chart.entity.PlotEntity(shape18, (org.jfree.chart.plot.Plot) categoryPlot43, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.chart.plot.CategoryPlot categoryPlot49 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke50 = categoryPlot49.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis51 = null;
        categoryPlot49.setRangeAxis(valueAxis51);
        org.jfree.chart.util.RectangleEdge rectangleEdge53 = categoryPlot49.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation55 = categoryPlot49.getRangeAxisLocation((-12566464));
        org.jfree.chart.util.RectangleInsets rectangleInsets56 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str57 = rectangleInsets56.toString();
        double double58 = rectangleInsets56.getTop();
        categoryPlot49.setAxisOffset(rectangleInsets56);
        categoryPlot49.mapDatasetToDomainAxis((int) (byte) 1, (-65536));
        double double63 = categoryPlot49.getAnchorValue();
        org.jfree.chart.entity.PlotEntity plotEntity64 = new org.jfree.chart.entity.PlotEntity(shape18, (org.jfree.chart.plot.Plot) categoryPlot49);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(rectangleEdge53);
        org.junit.Assert.assertNotNull(axisLocation55);
        org.junit.Assert.assertNotNull(rectangleInsets56);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str57.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2.0d + "'", double58 == 2.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test025() throws Throwable {
printRuntimeMSG("---RegressionTest2:test025");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test025");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        float float3 = categoryAxis0.getMinorTickMarkInsideLength();
        java.awt.Stroke stroke4 = categoryAxis0.getTickMarkStroke();
        float float5 = categoryAxis0.getMaximumCategoryLabelWidthRatio();
        categoryAxis0.setMinorTickMarksVisible(false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 0.0f + "'", float3 == 0.0f);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
    }

    @Test
    public void test026() throws Throwable {
printRuntimeMSG("---RegressionTest2:test026");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test026");
        org.jfree.chart.renderer.RenderAttributes renderAttributes1 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Stroke stroke2 = renderAttributes1.getDefaultOutlineStroke();
        java.awt.Paint paint4 = renderAttributes1.getSeriesOutlinePaint(255);
        java.awt.Color color6 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel7 = null;
        java.awt.Rectangle rectangle8 = null;
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        java.awt.geom.AffineTransform affineTransform10 = null;
        java.awt.RenderingHints renderingHints11 = null;
        java.awt.PaintContext paintContext12 = color6.createContext(colorModel7, rectangle8, rectangle2D9, affineTransform10, renderingHints11);
        java.awt.Color color13 = java.awt.Color.RED;
        java.awt.Color color14 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color15 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace16 = color15.getColorSpace();
        float[] floatArray23 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray24 = color14.getColorComponents(colorSpace16, floatArray23);
        float[] floatArray25 = color13.getComponents(floatArray24);
        float[] floatArray26 = color6.getColorComponents(floatArray25);
        renderAttributes1.setSeriesOutlinePaint((int) '4', (java.awt.Paint) color6);
        try {
            java.lang.Boolean boolean30 = renderAttributes1.isLabelVisible(2, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(stroke2);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNotNull(color6);
        org.junit.Assert.assertNotNull(paintContext12);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(colorSpace16);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertNotNull(floatArray26);
    }

    @Test
    public void test027() throws Throwable {
printRuntimeMSG("---RegressionTest2:test027");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test027");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.axis.AxisLocation axisLocation5 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation6 = axisLocation5.getOpposite();
        categoryPlot0.setDomainAxisLocation((int) (byte) 100, axisLocation6);
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset8 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj9 = abstractCategoryDataset8.clone();
        java.lang.Object obj10 = abstractCategoryDataset8.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset11 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj12 = abstractCategoryDataset11.clone();
        java.lang.Object obj13 = abstractCategoryDataset11.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes22 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer26.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean29 = lineAndShapeRenderer26.getBaseLinesVisible();
        java.awt.Shape shape30 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer26.setBaseLegendShape(shape30);
        renderAttributes22.setSeriesShape((int) ' ', shape30);
        org.jfree.chart.entity.ChartEntity chartEntity34 = new org.jfree.chart.entity.ChartEntity(shape30, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color37 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color37);
        java.lang.String str39 = legendItem38.getToolTipText();
        java.awt.Stroke stroke40 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem38.setOutlineStroke(stroke40);
        java.awt.Shape shape46 = null;
        java.awt.Color color47 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke48 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color49 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem50 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape46, (java.awt.Paint) color47, stroke48, (java.awt.Paint) color49);
        java.lang.Class<?> wildcardClass51 = color47.getClass();
        org.jfree.chart.LegendItem legendItem52 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape30, paint35, stroke40, (java.awt.Paint) color47);
        org.jfree.chart.entity.ChartEntity chartEntity53 = new org.jfree.chart.entity.ChartEntity(shape30);
        java.awt.Color color54 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape30, (java.awt.Paint) color54);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset58 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity61 = new org.jfree.chart.entity.CategoryItemEntity(shape30, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset58, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset11.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset58);
        abstractCategoryDataset8.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset58);
        defaultCategoryDataset58.setValue((double) (-1.0f), (java.lang.Comparable) "ChartEntity: tooltip = ", (java.lang.Comparable) (byte) 100);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer68 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset58);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer69 = categoryPlot0.getRenderer();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation5);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(shape30);
        org.junit.Assert.assertNotNull(paint35);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(color49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(color54);
        org.junit.Assert.assertNull(categoryItemRenderer68);
        org.junit.Assert.assertNull(categoryItemRenderer69);
    }

    @Test
    public void test028() throws Throwable {
printRuntimeMSG("---RegressionTest2:test028");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test028");
        java.awt.Paint paint0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray1 = new java.awt.Paint[] { paint0 };
        java.awt.Color color2 = java.awt.Color.BLUE;
        java.awt.Color color3 = java.awt.Color.RED;
        java.awt.Paint paint4 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray5 = new java.awt.Paint[] { color2, color3, paint4 };
        java.awt.Color color6 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel7 = null;
        java.awt.Rectangle rectangle8 = null;
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        java.awt.geom.AffineTransform affineTransform10 = null;
        java.awt.RenderingHints renderingHints11 = null;
        java.awt.PaintContext paintContext12 = color6.createContext(colorModel7, rectangle8, rectangle2D9, affineTransform10, renderingHints11);
        java.awt.Color color13 = java.awt.Color.WHITE;
        java.awt.Color color14 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel15 = null;
        java.awt.Rectangle rectangle16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        java.awt.geom.AffineTransform affineTransform18 = null;
        java.awt.RenderingHints renderingHints19 = null;
        java.awt.PaintContext paintContext20 = color14.createContext(colorModel15, rectangle16, rectangle2D17, affineTransform18, renderingHints19);
        java.awt.Color color21 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray22 = new java.awt.Paint[] { color6, color13, color14, color21 };
        java.awt.Stroke stroke23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke24 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke25 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray28 = new java.awt.Stroke[] { stroke23, stroke24, stroke25, stroke26, stroke27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot31 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke32 = categoryPlot31.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray33 = new java.awt.Stroke[] { stroke29, stroke30, stroke32 };
        java.awt.Shape shape34 = null;
        java.awt.Shape[] shapeArray35 = new java.awt.Shape[] { shape34 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier36 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray1, paintArray5, paintArray22, strokeArray28, strokeArray33, shapeArray35);
        java.awt.Stroke stroke37 = defaultDrawingSupplier36.getNextOutlineStroke();
        java.lang.Object obj38 = null;
        boolean boolean39 = defaultDrawingSupplier36.equals(obj38);
        org.junit.Assert.assertNotNull(paint0);
        org.junit.Assert.assertNotNull(paintArray1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNotNull(paint4);
        org.junit.Assert.assertNotNull(paintArray5);
        org.junit.Assert.assertNotNull(color6);
        org.junit.Assert.assertNotNull(paintContext12);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertNotNull(paintContext20);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNotNull(paintArray22);
        org.junit.Assert.assertNotNull(stroke23);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(stroke25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(strokeArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(strokeArray33);
        org.junit.Assert.assertNotNull(shapeArray35);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test029() throws Throwable {
printRuntimeMSG("---RegressionTest2:test029");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test029");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer2.setBaseOutlinePaint(paint11);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = lineAndShapeRenderer2.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        java.awt.Paint paint18 = lineAndShapeRenderer2.getSeriesOutlinePaint((int) '4');
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
        org.junit.Assert.assertNull(paint18);
    }

    @Test
    public void test030() throws Throwable {
printRuntimeMSG("---RegressionTest2:test030");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test030");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset53 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean57 = lineAndShapeRenderer56.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator58 = null;
        lineAndShapeRenderer56.setBaseURLGenerator(categoryURLGenerator58);
        java.awt.Paint paint63 = lineAndShapeRenderer56.getItemLabelPaint((-65536), 0, false);
        boolean boolean64 = defaultCategoryDataset53.equals((java.lang.Object) false);
        java.lang.Object obj65 = defaultCategoryDataset53.clone();
        categoryItemEntity47.setDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset53);
        java.lang.Comparable comparable67 = categoryItemEntity47.getRowKey();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(paint63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + comparable67 + "' != '" + "ChartChangeEventType.GENERAL" + "'", comparable67.equals("ChartChangeEventType.GENERAL"));
    }

    @Test
    public void test031() throws Throwable {
printRuntimeMSG("---RegressionTest2:test031");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test031");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        java.awt.Shape shape8 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer4.setBaseLegendShape(shape8);
        renderAttributes0.setSeriesShape((int) ' ', shape8);
        java.awt.Font font12 = null;
        try {
            renderAttributes0.setSeriesLabelFont(5, font12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(shape8);
    }

    @Test
    public void test032() throws Throwable {
printRuntimeMSG("---RegressionTest2:test032");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test032");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) "TextAnchor.HALF_ASCENT_LEFT");
        categoryPlot0.configureDomainAxes();
        boolean boolean54 = categoryPlot0.isRangeZeroBaselineVisible();
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test033() throws Throwable {
printRuntimeMSG("---RegressionTest2:test033");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test033");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        java.awt.Color color16 = org.jfree.chart.ChartColor.DARK_GREEN;
        categoryAxis6.setTickMarkPaint((java.awt.Paint) color16);
        categoryAxis6.setLabelURL("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT");
        float float20 = categoryAxis6.getMaximumCategoryLabelWidthRatio();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(color16);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
    }

    @Test
    public void test034() throws Throwable {
printRuntimeMSG("---RegressionTest2:test034");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test034");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        categoryPlot0.setWeight((int) (byte) 1);
        boolean boolean10 = categoryPlot0.isRangePannable();
        java.awt.Paint paint11 = categoryPlot0.getRangeGridlinePaint();
        org.jfree.chart.plot.Marker marker12 = null;
        org.jfree.chart.util.Layer layer13 = null;
        boolean boolean14 = categoryPlot0.removeDomainMarker(marker12, layer13);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test035() throws Throwable {
printRuntimeMSG("---RegressionTest2:test035");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test035");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        lineAndShapeRenderer2.setBaseLinesVisible(true);
        int int7 = lineAndShapeRenderer2.getPassCount();
        java.awt.Graphics2D graphics2D8 = null;
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        org.jfree.data.category.CategoryDataset categoryDataset10 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis11.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis14 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator18 = lineAndShapeRenderer17.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot(categoryDataset10, categoryAxis11, valueAxis14, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer17);
        categoryAxis11.setVisible(false);
        java.lang.String str23 = categoryAxis11.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions24 = categoryAxis11.getCategoryLabelPositions();
        categoryAxis11.setAxisLineVisible(false);
        categoryAxis11.setVisible(true);
        org.jfree.chart.axis.ValueAxis valueAxis29 = null;
        org.jfree.chart.util.Layer layer30 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo31 = null;
        try {
            lineAndShapeRenderer2.drawAnnotations(graphics2D8, rectangle2D9, categoryAxis11, valueAxis29, layer30, plotRenderingInfo31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNull(categoryItemLabelGenerator18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(categoryLabelPositions24);
    }

    @Test
    public void test036() throws Throwable {
printRuntimeMSG("---RegressionTest2:test036");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test036");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Shape shape6 = renderAttributes0.getItemShape((int) 'a', (int) ' ');
        java.awt.Paint paint8 = renderAttributes0.getSeriesPaint(0);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(shape6);
        org.junit.Assert.assertNull(paint8);
    }

    @Test
    public void test037() throws Throwable {
printRuntimeMSG("---RegressionTest2:test037");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test037");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.awt.Paint paint12 = categoryAxis1.getTickMarkPaint();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(paint12);
    }

    @Test
    public void test038() throws Throwable {
printRuntimeMSG("---RegressionTest2:test038");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test038");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator10 = null;
        lineAndShapeRenderer8.setBaseToolTipGenerator(categoryToolTipGenerator10);
        java.awt.Font font13 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer8.setSeriesItemLabelFont((int) (short) 0, font13, true);
        lineAndShapeRenderer2.setBaseLegendTextFont(font13);
        lineAndShapeRenderer2.setAutoPopulateSeriesStroke(false);
        lineAndShapeRenderer2.setSeriesShapesFilled(10, (java.lang.Boolean) false);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator22 = null;
        lineAndShapeRenderer2.setBaseURLGenerator(categoryURLGenerator22);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator25 = null;
        lineAndShapeRenderer2.setSeriesToolTipGenerator(192, categoryToolTipGenerator25);
        lineAndShapeRenderer2.setUseFillPaint(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertNotNull(font13);
    }

    @Test
    public void test039() throws Throwable {
printRuntimeMSG("---RegressionTest2:test039");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test039");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        boolean boolean11 = defaultCategoryDataset0.equals((java.lang.Object) false);
        defaultCategoryDataset0.setValue((double) 100L, (java.lang.Comparable) 0.2d, (java.lang.Comparable) "Category Plot");
        try {
            boolean boolean18 = defaultCategoryDataset0.isSelected(0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test040() throws Throwable {
printRuntimeMSG("---RegressionTest2:test040");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test040");
        org.jfree.chart.LegendItemCollection legendItemCollection0 = new org.jfree.chart.LegendItemCollection();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean5 = lineAndShapeRenderer3.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean6 = lineAndShapeRenderer3.getBaseLinesVisible();
        lineAndShapeRenderer3.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer3.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator12 = null;
        lineAndShapeRenderer3.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator12, true);
        java.awt.Shape shape16 = lineAndShapeRenderer3.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        categoryPlot17.setParent((org.jfree.chart.plot.Plot) categoryPlot19);
        org.jfree.chart.LegendItemCollection legendItemCollection22 = categoryPlot17.getFixedLegendItems();
        java.lang.Comparable comparable23 = categoryPlot17.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge24 = categoryPlot17.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent25 = null;
        categoryPlot17.notifyListeners(plotChangeEvent25);
        boolean boolean27 = categoryPlot17.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath28 = null;
        java.awt.geom.Rectangle2D rectangle2D29 = null;
        org.jfree.chart.RenderingSource renderingSource30 = null;
        categoryPlot17.select(generalPath28, rectangle2D29, renderingSource30);
        org.jfree.chart.util.ShadowGenerator shadowGenerator32 = null;
        categoryPlot17.setShadowGenerator(shadowGenerator32);
        org.jfree.chart.entity.PlotEntity plotEntity34 = new org.jfree.chart.entity.PlotEntity(shape16, (org.jfree.chart.plot.Plot) categoryPlot17);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer37 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean39 = lineAndShapeRenderer37.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean40 = lineAndShapeRenderer37.getBaseLinesVisible();
        lineAndShapeRenderer37.setAutoPopulateSeriesPaint(false);
        boolean boolean43 = lineAndShapeRenderer37.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition44 = lineAndShapeRenderer37.getBasePositiveItemLabelPosition();
        boolean boolean45 = plotEntity34.equals((java.lang.Object) itemLabelPosition44);
        java.lang.Object obj46 = plotEntity34.clone();
        java.awt.Shape shape51 = null;
        java.awt.Color color52 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color54 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape51, (java.awt.Paint) color52, stroke53, (java.awt.Paint) color54);
        java.awt.Paint paint56 = legendItem55.getFillPaint();
        java.awt.Font font57 = legendItem55.getLabelFont();
        legendItem55.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer60 = legendItem55.getFillPaintTransformer();
        boolean boolean61 = plotEntity34.equals((java.lang.Object) legendItem55);
        legendItemCollection0.add(legendItem55);
        java.awt.Shape shape67 = null;
        java.awt.Color color68 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke69 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color70 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem71 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape67, (java.awt.Paint) color68, stroke69, (java.awt.Paint) color70);
        int int72 = legendItem71.getSeriesIndex();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer73 = legendItem71.getFillPaintTransformer();
        legendItem55.setFillPaintTransformer(gradientPaintTransformer73);
        java.awt.Color color75 = org.jfree.chart.ChartColor.VERY_DARK_RED;
        legendItem55.setOutlinePaint((java.awt.Paint) color75);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNull(legendItemCollection22);
        org.junit.Assert.assertNull(comparable23);
        org.junit.Assert.assertNotNull(rectangleEdge24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(color54);
        org.junit.Assert.assertNotNull(paint56);
        org.junit.Assert.assertNull(font57);
        org.junit.Assert.assertNotNull(gradientPaintTransformer60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(color68);
        org.junit.Assert.assertNotNull(stroke69);
        org.junit.Assert.assertNotNull(color70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(gradientPaintTransformer73);
        org.junit.Assert.assertNotNull(color75);
    }

    @Test
    public void test041() throws Throwable {
printRuntimeMSG("---RegressionTest2:test041");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test041");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition15 = null;
        lineAndShapeRenderer13.setSeriesPositiveItemLabelPosition(0, itemLabelPosition15);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator17 = null;
        lineAndShapeRenderer13.setLegendItemToolTipGenerator(categorySeriesLabelGenerator17);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer13.getBasePositiveItemLabelPosition();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition23 = lineAndShapeRenderer13.getNegativeItemLabelPosition((int) (short) -1, (int) (short) -1, false);
        lineAndShapeRenderer2.setBasePositiveItemLabelPosition(itemLabelPosition23);
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = lineAndShapeRenderer2.getPlot();
        lineAndShapeRenderer2.setSeriesItemLabelsVisible(0, (java.lang.Boolean) false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(itemLabelPosition23);
        org.junit.Assert.assertNull(categoryPlot25);
    }

    @Test
    public void test042() throws Throwable {
printRuntimeMSG("---RegressionTest2:test042");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test042");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Graphics2D graphics2D6 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        java.awt.geom.Point2D point2D11 = null;
        categoryPlot7.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo10, point2D11);
        org.jfree.chart.axis.AxisSpace axisSpace13 = null;
        categoryPlot7.setFixedRangeAxisSpace(axisSpace13, true);
        org.jfree.chart.axis.ValueAxis valueAxis16 = null;
        org.jfree.chart.plot.Marker marker17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        lineAndShapeRenderer2.drawRangeMarker(graphics2D6, categoryPlot7, valueAxis16, marker17, rectangle2D18);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent20 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot7);
        java.awt.Paint paint21 = categoryPlot7.getRangeMinorGridlinePaint();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(paint21);
    }

    @Test
    public void test043() throws Throwable {
printRuntimeMSG("---RegressionTest2:test043");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test043");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean57 = lineAndShapeRenderer55.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean58 = lineAndShapeRenderer55.getBaseLinesVisible();
        lineAndShapeRenderer55.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer55.setAutoPopulateSeriesShape(false);
        boolean boolean63 = categoryItemEntity47.equals((java.lang.Object) lineAndShapeRenderer55);
        org.jfree.chart.renderer.RenderAttributes renderAttributes64 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint65 = renderAttributes64.getDefaultLabelPaint();
        java.awt.Paint paint68 = renderAttributes64.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke69 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes64.setDefaultStroke(stroke69);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer73 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean75 = lineAndShapeRenderer73.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean76 = lineAndShapeRenderer73.getBaseLinesVisible();
        java.awt.Shape shape77 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer73.setBaseLegendShape(shape77);
        renderAttributes64.setDefaultShape(shape77);
        java.awt.Shape shape82 = renderAttributes64.getItemShape((int) (byte) 0, 0);
        categoryItemEntity47.setArea(shape82);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(paint65);
        org.junit.Assert.assertNull(paint68);
        org.junit.Assert.assertNotNull(stroke69);
        org.junit.Assert.assertNull(boolean75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(shape77);
        org.junit.Assert.assertNotNull(shape82);
    }

    @Test
    public void test044() throws Throwable {
printRuntimeMSG("---RegressionTest2:test044");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test044");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        lineAndShapeRenderer2.setLegendShape(0, shape19);
        lineAndShapeRenderer2.setSeriesVisible(4, (java.lang.Boolean) true);
        java.awt.Color color47 = java.awt.Color.GRAY;
        try {
            lineAndShapeRenderer2.setSeriesItemLabelPaint((-15935), (java.awt.Paint) color47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color47);
    }

    @Test
    public void test045() throws Throwable {
printRuntimeMSG("---RegressionTest2:test045");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test045");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        renderAttributes0.setSeriesShape(1, shape18);
        org.jfree.chart.plot.CategoryPlot categoryPlot43 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke44 = categoryPlot43.getRangeMinorGridlineStroke();
        boolean boolean45 = categoryPlot43.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity48 = new org.jfree.chart.entity.PlotEntity(shape18, (org.jfree.chart.plot.Plot) categoryPlot43, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset51 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean55 = lineAndShapeRenderer54.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator56 = null;
        lineAndShapeRenderer54.setBaseURLGenerator(categoryURLGenerator56);
        java.awt.Paint paint61 = lineAndShapeRenderer54.getItemLabelPaint((-65536), 0, false);
        boolean boolean62 = defaultCategoryDataset51.equals((java.lang.Object) false);
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity65 = new org.jfree.chart.entity.CategoryItemEntity(shape18, "AxisLocation.BOTTOM_OR_RIGHT", "ChartEntity: tooltip = ", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset51, (java.lang.Comparable) 1.0f, (java.lang.Comparable) (short) 0);
        try {
            defaultCategoryDataset51.removeRow((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(paint61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test046() throws Throwable {
printRuntimeMSG("---RegressionTest2:test046");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test046");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent14 = null;
        categoryPlot9.markerChanged(markerChangeEvent14);
        org.jfree.chart.event.PlotChangeListener plotChangeListener16 = null;
        categoryPlot9.removeChangeListener(plotChangeListener16);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo20 = null;
        java.awt.geom.Point2D point2D21 = null;
        categoryPlot9.zoomRangeAxes(0.0d, (double) (-65536), plotRenderingInfo20, point2D21);
        org.jfree.chart.LegendItemCollection legendItemCollection23 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.plot.Marker marker24 = null;
        org.jfree.chart.util.Layer layer25 = null;
        try {
            boolean boolean26 = categoryPlot9.removeRangeMarker(marker24, layer25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertNull(legendItemCollection23);
    }

    @Test
    public void test047() throws Throwable {
printRuntimeMSG("---RegressionTest2:test047");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test047");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Stroke stroke4 = renderAttributes0.getDefaultStroke();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(stroke4);
    }

    @Test
    public void test048() throws Throwable {
printRuntimeMSG("---RegressionTest2:test048");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test048");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        java.awt.Color color2 = defaultShadowGenerator0.getShadowColor();
        int int3 = defaultShadowGenerator0.getShadowSize();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator7 = lineAndShapeRenderer6.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator11 = lineAndShapeRenderer6.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer6.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer6.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint18 = lineAndShapeRenderer6.getSeriesItemLabelPaint((int) (byte) -1);
        boolean boolean19 = defaultShadowGenerator0.equals((java.lang.Object) lineAndShapeRenderer6);
        java.awt.Paint paint21 = lineAndShapeRenderer6.getSeriesFillPaint(175);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNull(categoryItemLabelGenerator7);
        org.junit.Assert.assertNull(categoryToolTipGenerator11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(paint18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(paint21);
    }

    @Test
    public void test049() throws Throwable {
printRuntimeMSG("---RegressionTest2:test049");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test049");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        categoryAxis0.setTickLabelsVisible(false);
        org.jfree.chart.util.RectangleInsets rectangleInsets4 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double5 = rectangleInsets4.getRight();
        double double7 = rectangleInsets4.calculateTopInset(0.0d);
        categoryAxis0.setTickLabelInsets(rectangleInsets4);
        double double10 = rectangleInsets4.extendWidth((double) 0);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNotNull(rectangleInsets4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.0d + "'", double5 == 4.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 8.0d + "'", double10 == 8.0d);
    }

    @Test
    public void test050() throws Throwable {
printRuntimeMSG("---RegressionTest2:test050");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test050");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setCategoryMargin((double) (byte) 100);
        java.awt.Paint paint20 = categoryAxis0.getTickLabelPaint();
        boolean boolean21 = categoryAxis0.isVisible();
        org.jfree.chart.axis.CategoryAnchor categoryAnchor22 = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        java.awt.geom.Rectangle2D rectangle2D25 = null;
        org.jfree.chart.util.RectangleEdge rectangleEdge26 = null;
        try {
            double double27 = categoryAxis0.getCategoryJava2DCoordinate(categoryAnchor22, (-10), (int) ' ', rectangle2D25, rectangleEdge26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid category index: -10");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(categoryAnchor22);
    }

    @Test
    public void test051() throws Throwable {
printRuntimeMSG("---RegressionTest2:test051");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test051");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        java.awt.Shape shape50 = null;
        java.awt.Color color51 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke52 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color53 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape50, (java.awt.Paint) color51, stroke52, (java.awt.Paint) color53);
        java.awt.Paint paint55 = legendItem54.getFillPaint();
        java.awt.Font font56 = legendItem54.getLabelFont();
        legendItem54.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer59 = legendItem54.getFillPaintTransformer();
        boolean boolean60 = plotEntity33.equals((java.lang.Object) legendItem54);
        java.lang.String str61 = plotEntity33.getToolTipText();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(color53);
        org.junit.Assert.assertNotNull(paint55);
        org.junit.Assert.assertNull(font56);
        org.junit.Assert.assertNotNull(gradientPaintTransformer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test052() throws Throwable {
printRuntimeMSG("---RegressionTest2:test052");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test052");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.lang.String str13 = categoryAxis1.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.data.category.CategoryDataset categoryDataset14 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis15 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis15.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis18 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator22 = lineAndShapeRenderer21.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot23 = new org.jfree.chart.plot.CategoryPlot(categoryDataset14, categoryAxis15, valueAxis18, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer21);
        boolean boolean24 = categoryAxis15.isTickLabelsVisible();
        double double25 = categoryAxis15.getFixedDimension();
        java.awt.Paint paint27 = categoryAxis15.getTickLabelPaint((java.lang.Comparable) 4.0d);
        org.jfree.chart.util.RectangleInsets rectangleInsets28 = categoryAxis15.getTickLabelInsets();
        categoryAxis1.setLabelInsets(rectangleInsets28);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(categoryItemLabelGenerator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(rectangleInsets28);
    }

    @Test
    public void test053() throws Throwable {
printRuntimeMSG("---RegressionTest2:test053");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test053");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo6 = null;
        java.awt.geom.Point2D point2D7 = null;
        categoryPlot0.panRangeAxes((double) 192, plotRenderingInfo6, point2D7);
        categoryPlot0.clearRangeMarkers(128);
        org.junit.Assert.assertNotNull(stroke1);
    }

    @Test
    public void test054() throws Throwable {
printRuntimeMSG("---RegressionTest2:test054");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test054");
        org.jfree.chart.util.StrokeList strokeList0 = new org.jfree.chart.util.StrokeList();
        java.lang.Object obj1 = strokeList0.clone();
        java.lang.Object obj2 = strokeList0.clone();
        java.lang.Class<?> wildcardClass3 = strokeList0.getClass();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test055() throws Throwable {
printRuntimeMSG("---RegressionTest2:test055");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test055");
        java.awt.Color color3 = java.awt.Color.getHSBColor((float) 4, 0.0f, 10.0f);
        org.junit.Assert.assertNotNull(color3);
    }

    @Test
    public void test056() throws Throwable {
printRuntimeMSG("---RegressionTest2:test056");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test056");
        java.awt.Shape shape0 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        categoryPlot1.setParent((org.jfree.chart.plot.Plot) categoryPlot3);
        org.jfree.chart.LegendItemCollection legendItemCollection6 = categoryPlot1.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent7 = null;
        categoryPlot1.axisChanged(axisChangeEvent7);
        org.jfree.chart.axis.AxisSpace axisSpace9 = categoryPlot1.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset10 = null;
        categoryPlot1.setDataset(categoryDataset10);
        java.awt.Stroke stroke12 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot1.setDomainCrosshairStroke(stroke12);
        java.awt.Stroke stroke14 = categoryPlot1.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent15 = null;
        categoryPlot1.annotationChanged(annotationChangeEvent15);
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation18 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot17.setOrientation(plotOrientation18);
        categoryPlot1.setOrientation(plotOrientation18);
        org.jfree.data.category.CategoryDataset categoryDataset21 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis22 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis22.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis25 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator29 = lineAndShapeRenderer28.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot30 = new org.jfree.chart.plot.CategoryPlot(categoryDataset21, categoryAxis22, valueAxis25, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer28);
        boolean boolean31 = categoryAxis22.isTickLabelsVisible();
        double double32 = categoryAxis22.getFixedDimension();
        java.lang.Object obj33 = categoryAxis22.clone();
        java.awt.Paint paint34 = categoryAxis22.getLabelPaint();
        boolean boolean35 = plotOrientation18.equals((java.lang.Object) categoryAxis22);
        org.jfree.chart.plot.CategoryPlot categoryPlot36 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke37 = categoryPlot36.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation38 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation39 = axisLocation38.getOpposite();
        categoryPlot36.setDomainAxisLocation(axisLocation39, false);
        boolean boolean42 = categoryPlot36.canSelectByRegion();
        categoryPlot36.setForegroundAlpha((float) '#');
        categoryAxis22.removeChangeListener((org.jfree.chart.event.AxisChangeListener) categoryPlot36);
        try {
            org.jfree.chart.entity.PlotEntity plotEntity48 = new org.jfree.chart.entity.PlotEntity(shape0, (org.jfree.chart.plot.Plot) categoryPlot36, "ItemLabelAnchor.OUTSIDE4", "{0}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'area' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNull(legendItemCollection6);
        org.junit.Assert.assertNull(axisSpace9);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(plotOrientation18);
        org.junit.Assert.assertNull(categoryItemLabelGenerator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(axisLocation38);
        org.junit.Assert.assertNotNull(axisLocation39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test057() throws Throwable {
printRuntimeMSG("---RegressionTest2:test057");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test057");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        boolean boolean11 = categoryPlot0.isRangeCrosshairVisible();
        boolean boolean12 = categoryPlot0.isRangePannable();
        float float13 = categoryPlot0.getForegroundAlpha();
        categoryPlot0.setDomainCrosshairVisible(true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
    }

    @Test
    public void test058() throws Throwable {
printRuntimeMSG("---RegressionTest2:test058");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test058");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.axis.ValueAxis valueAxis10 = null;
        org.jfree.data.Range range11 = categoryPlot9.getDataRange(valueAxis10);
        categoryPlot9.setWeight((int) 'a');
        java.awt.Graphics2D graphics2D14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState18 = null;
        boolean boolean19 = categoryPlot9.render(graphics2D14, rectangle2D15, 0, plotRenderingInfo17, categoryCrosshairState18);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent20 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot9);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test059() throws Throwable {
printRuntimeMSG("---RegressionTest2:test059");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test059");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        java.awt.Paint paint16 = categoryAxis6.getTickLabelPaint();
        categoryAxis6.setCategoryLabelPositionOffset(0);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(paint16);
    }

    @Test
    public void test060() throws Throwable {
printRuntimeMSG("---RegressionTest2:test060");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test060");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        defaultCategoryDataset47.addValue((java.lang.Number) (-8355712), (java.lang.Comparable) '4', (java.lang.Comparable) 2.0d);
        defaultCategoryDataset47.addValue((java.lang.Number) 100, (java.lang.Comparable) 100.0d, (java.lang.Comparable) 192);
        java.lang.Comparable comparable61 = null;
        java.lang.Comparable comparable62 = null;
        try {
            defaultCategoryDataset47.setValue(0.0d, comparable61, comparable62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
    }

    @Test
    public void test061() throws Throwable {
printRuntimeMSG("---RegressionTest2:test061");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test061");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        barRenderer0.setShadowXOffset((double) (-16777216));
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator10 = null;
        barRenderer0.setSeriesURLGenerator(0, categoryURLGenerator10);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
    }

    @Test
    public void test062() throws Throwable {
printRuntimeMSG("---RegressionTest2:test062");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test062");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        int int52 = defaultCategoryDataset47.getColumnCount();
        java.util.List list53 = defaultCategoryDataset47.getColumnKeys();
        try {
            java.lang.Number number56 = defaultCategoryDataset47.getValue((java.lang.Comparable) "PlotEntity: tooltip = null", (java.lang.Comparable) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (PlotEntity: tooltip = null) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test063() throws Throwable {
printRuntimeMSG("---RegressionTest2:test063");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test063");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.calculateTopOutset((double) ' ');
        double double6 = rectangleInsets0.trimWidth((double) (short) -1);
        double double8 = rectangleInsets0.calculateBottomInset((double) (byte) 1);
        double double10 = rectangleInsets0.calculateRightInset((-1.2566464E7d));
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.0d + "'", double4 == 2.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9.0d) + "'", double6 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.0d + "'", double8 == 2.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.0d + "'", double10 == 4.0d);
    }

    @Test
    public void test064() throws Throwable {
printRuntimeMSG("---RegressionTest2:test064");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test064");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        java.awt.Shape shape8 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer4.setBaseLegendShape(shape8);
        renderAttributes0.setSeriesShape((int) ' ', shape8);
        java.awt.Paint paint11 = renderAttributes0.getDefaultPaint();
        java.awt.Paint paint12 = renderAttributes0.getDefaultLabelPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        categoryPlot13.setParent((org.jfree.chart.plot.Plot) categoryPlot15);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent18 = null;
        categoryPlot15.annotationChanged(annotationChangeEvent18);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator23 = lineAndShapeRenderer22.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator24 = null;
        lineAndShapeRenderer22.setBaseToolTipGenerator(categoryToolTipGenerator24);
        java.awt.Paint paint27 = lineAndShapeRenderer22.lookupSeriesOutlinePaint((int) (byte) 1);
        categoryPlot15.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer22);
        java.awt.Paint paint30 = lineAndShapeRenderer22.lookupSeriesFillPaint(192);
        renderAttributes0.setDefaultFillPaint(paint30);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(shape8);
        org.junit.Assert.assertNull(paint11);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator23);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(paint30);
    }

    @Test
    public void test065() throws Throwable {
printRuntimeMSG("---RegressionTest2:test065");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test065");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        lineAndShapeRenderer2.setUseSeriesOffset(true);
        java.awt.Shape shape13 = lineAndShapeRenderer2.lookupLegendShape((-1));
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke15 = categoryPlot14.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        categoryPlot14.setParent((org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.LegendItemCollection legendItemCollection19 = categoryPlot14.getFixedLegendItems();
        java.lang.Comparable comparable20 = categoryPlot14.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge21 = categoryPlot14.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent22 = null;
        categoryPlot14.notifyListeners(plotChangeEvent22);
        org.jfree.chart.axis.CategoryAxis categoryAxis24 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis24.setMinorTickMarkOutsideLength((float) (short) 0);
        float float27 = categoryAxis24.getMinorTickMarkInsideLength();
        java.util.List list28 = categoryPlot14.getCategoriesForAxis(categoryAxis24);
        org.jfree.chart.entity.PlotEntity plotEntity31 = new org.jfree.chart.entity.PlotEntity(shape13, (org.jfree.chart.plot.Plot) categoryPlot14, "", "PlotOrientation.HORIZONTAL");
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNotNull(shape13);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNull(legendItemCollection19);
        org.junit.Assert.assertNull(comparable20);
        org.junit.Assert.assertNotNull(rectangleEdge21);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.0f + "'", float27 == 0.0f);
        org.junit.Assert.assertNotNull(list28);
    }

    @Test
    public void test066() throws Throwable {
printRuntimeMSG("---RegressionTest2:test066");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test066");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.lang.Object obj9 = legendItem8.clone();
        java.text.AttributedString attributedString10 = legendItem8.getAttributedLabel();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNull(attributedString10);
    }

    @Test
    public void test067() throws Throwable {
printRuntimeMSG("---RegressionTest2:test067");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test067");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.lang.Object obj9 = legendItem8.clone();
        boolean boolean10 = legendItem8.isLineVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint12 = renderAttributes11.getDefaultLabelPaint();
        java.awt.Color color13 = java.awt.Color.RED;
        renderAttributes11.setDefaultOutlinePaint((java.awt.Paint) color13);
        int int15 = color13.getTransparency();
        legendItem8.setLabelPaint((java.awt.Paint) color13);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test068() throws Throwable {
printRuntimeMSG("---RegressionTest2:test068");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test068");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        int int7 = categoryPlot0.getWeight();
        org.jfree.chart.plot.PlotOrientation plotOrientation8 = categoryPlot0.getOrientation();
        org.jfree.chart.renderer.category.BarRenderer barRenderer9 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint10 = barRenderer9.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo14 = null;
        java.awt.geom.Point2D point2D15 = null;
        categoryPlot11.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo14, point2D15);
        categoryPlot11.clearAnnotations();
        boolean boolean18 = barRenderer9.equals((java.lang.Object) categoryPlot11);
        java.awt.Paint paint19 = barRenderer9.getShadowPaint();
        java.awt.Shape shape20 = barRenderer9.getBaseShape();
        barRenderer9.setShadowYOffset(0.0d);
        barRenderer9.setMaximumBarWidth(0.0d);
        boolean boolean25 = plotOrientation8.equals((java.lang.Object) barRenderer9);
        barRenderer9.setShadowYOffset((double) 255);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator29 = null;
        barRenderer9.setSeriesToolTipGenerator((int) '4', categoryToolTipGenerator29, true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(plotOrientation8);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertNotNull(shape20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test069() throws Throwable {
printRuntimeMSG("---RegressionTest2:test069");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test069");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        java.awt.Shape shape50 = null;
        java.awt.Color color51 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke52 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color53 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape50, (java.awt.Paint) color51, stroke52, (java.awt.Paint) color53);
        java.awt.Paint paint55 = legendItem54.getFillPaint();
        java.awt.Font font56 = legendItem54.getLabelFont();
        legendItem54.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer59 = legendItem54.getFillPaintTransformer();
        boolean boolean60 = plotEntity33.equals((java.lang.Object) legendItem54);
        java.lang.String str61 = plotEntity33.getURLText();
        java.lang.Object obj62 = plotEntity33.clone();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(color53);
        org.junit.Assert.assertNotNull(paint55);
        org.junit.Assert.assertNull(font56);
        org.junit.Assert.assertNotNull(gradientPaintTransformer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test070() throws Throwable {
printRuntimeMSG("---RegressionTest2:test070");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test070");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator7 = lineAndShapeRenderer6.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator8 = null;
        lineAndShapeRenderer6.setBaseToolTipGenerator(categoryToolTipGenerator8);
        java.awt.Font font11 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer6.setSeriesItemLabelFont((int) (short) 0, font11, true);
        java.awt.Color color14 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        boolean boolean15 = lineAndShapeRenderer6.equals((java.lang.Object) color14);
        org.jfree.chart.renderer.RenderAttributes renderAttributes16 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean22 = lineAndShapeRenderer20.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean23 = lineAndShapeRenderer20.getBaseLinesVisible();
        java.awt.Shape shape24 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer20.setBaseLegendShape(shape24);
        renderAttributes16.setSeriesShape((int) ' ', shape24);
        org.jfree.chart.entity.ChartEntity chartEntity28 = new org.jfree.chart.entity.ChartEntity(shape24, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        lineAndShapeRenderer6.setBaseShape(shape24, true);
        org.jfree.chart.entity.ChartEntity chartEntity31 = new org.jfree.chart.entity.ChartEntity(shape24);
        org.jfree.chart.plot.CategoryPlot categoryPlot32 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke33 = categoryPlot32.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation34 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation35 = axisLocation34.getOpposite();
        categoryPlot32.setDomainAxisLocation(axisLocation35, false);
        boolean boolean38 = categoryPlot32.canSelectByRegion();
        java.awt.Stroke stroke39 = categoryPlot32.getRangeGridlineStroke();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.lang.String str42 = legendItem41.getDescription();
        java.awt.Paint paint43 = legendItem41.getFillPaint();
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("", "ItemLabelAnchor.INSIDE5", "ItemLabelAnchor.OUTSIDE4", "CategoryAnchor.START", shape24, stroke39, paint43);
        org.junit.Assert.assertNull(categoryItemLabelGenerator7);
        org.junit.Assert.assertNotNull(font11);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shape24);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(axisLocation34);
        org.junit.Assert.assertNotNull(axisLocation35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(paint43);
    }

    @Test
    public void test071() throws Throwable {
printRuntimeMSG("---RegressionTest2:test071");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test071");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list9 = categoryPlot0.getCategoriesForAxis(categoryAxis8);
        boolean boolean10 = categoryPlot0.isDomainZoomable();
        categoryPlot0.configureRangeAxes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator15 = lineAndShapeRenderer14.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator16 = null;
        lineAndShapeRenderer14.setBaseToolTipGenerator(categoryToolTipGenerator16);
        java.awt.Font font19 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer14.setSeriesItemLabelFont((int) (short) 0, font19, true);
        java.awt.Color color22 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        boolean boolean23 = lineAndShapeRenderer14.equals((java.lang.Object) color22);
        categoryPlot0.setRangeCrosshairPaint((java.awt.Paint) color22);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator15);
        org.junit.Assert.assertNotNull(font19);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test072() throws Throwable {
printRuntimeMSG("---RegressionTest2:test072");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test072");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double1 = rectangleInsets0.getRight();
        double double3 = rectangleInsets0.calculateTopInset(0.0d);
        double double5 = rectangleInsets0.calculateLeftOutset(0.0d);
        double double7 = rectangleInsets0.calculateTopOutset((double) 0L);
        double double9 = rectangleInsets0.calculateRightInset((double) 2.0f);
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2.0d + "'", double3 == 2.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.0d + "'", double5 == 4.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 4.0d + "'", double9 == 4.0d);
    }

    @Test
    public void test073() throws Throwable {
printRuntimeMSG("---RegressionTest2:test073");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test073");
        org.jfree.chart.util.ObjectList objectList1 = new org.jfree.chart.util.ObjectList(0);
        org.jfree.chart.renderer.RenderAttributes renderAttributes2 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint3 = renderAttributes2.getDefaultLabelPaint();
        java.awt.Color color4 = java.awt.Color.RED;
        renderAttributes2.setDefaultOutlinePaint((java.awt.Paint) color4);
        java.awt.Paint paint7 = renderAttributes2.getSeriesOutlinePaint((int) '#');
        boolean boolean8 = objectList1.equals((java.lang.Object) '#');
        org.junit.Assert.assertNull(paint3);
        org.junit.Assert.assertNotNull(color4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test074() throws Throwable {
printRuntimeMSG("---RegressionTest2:test074");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test074");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        boolean boolean7 = barRenderer0.getIncludeBaseInRange();
        java.awt.Shape shape9 = barRenderer0.getSeriesShape((int) (byte) 10);
        org.jfree.chart.JFreeChart jFreeChart10 = null;
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType11 = org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED;
        try {
            org.jfree.chart.event.ChartChangeEvent chartChangeEvent12 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object) shape9, jFreeChart10, chartChangeEventType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null source");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(shape9);
        org.junit.Assert.assertNotNull(chartChangeEventType11);
    }

    @Test
    public void test075() throws Throwable {
printRuntimeMSG("---RegressionTest2:test075");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test075");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Paint paint7 = lineAndShapeRenderer2.lookupSeriesOutlinePaint((int) (byte) 1);
        java.awt.Font font8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer2.setBaseLegendTextFont(font8);
        java.awt.Paint paint13 = lineAndShapeRenderer2.getItemLabelPaint((int) (byte) 1, (int) (byte) -1, false);
        lineAndShapeRenderer2.setSeriesVisible(15, (java.lang.Boolean) false, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertNotNull(font8);
        org.junit.Assert.assertNotNull(paint13);
    }

    @Test
    public void test076() throws Throwable {
printRuntimeMSG("---RegressionTest2:test076");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test076");
        org.jfree.chart.util.UnitType unitType0 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.util.RectangleInsets rectangleInsets5 = new org.jfree.chart.util.RectangleInsets(unitType0, (double) 2.0f, (double) 100, 100.0d, (double) ' ');
        java.lang.String str6 = unitType0.toString();
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor7 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE10;
        org.jfree.chart.text.TextAnchor textAnchor8 = org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT;
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition9 = new org.jfree.chart.labels.ItemLabelPosition(itemLabelAnchor7, textAnchor8);
        boolean boolean10 = unitType0.equals((java.lang.Object) textAnchor8);
        org.junit.Assert.assertNotNull(unitType0);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "UnitType.ABSOLUTE" + "'", str6.equals("UnitType.ABSOLUTE"));
        org.junit.Assert.assertNotNull(itemLabelAnchor7);
        org.junit.Assert.assertNotNull(textAnchor8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test077() throws Throwable {
printRuntimeMSG("---RegressionTest2:test077");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test077");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.clearSelection();
        java.lang.Comparable comparable49 = null;
        try {
            int int50 = defaultCategoryDataset44.getColumnIndex(comparable49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
    }

    @Test
    public void test078() throws Throwable {
printRuntimeMSG("---RegressionTest2:test078");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test078");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Graphics2D graphics2D6 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        java.awt.geom.Point2D point2D11 = null;
        categoryPlot7.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo10, point2D11);
        org.jfree.chart.axis.AxisSpace axisSpace13 = null;
        categoryPlot7.setFixedRangeAxisSpace(axisSpace13, true);
        org.jfree.chart.axis.ValueAxis valueAxis16 = null;
        org.jfree.chart.plot.Marker marker17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        lineAndShapeRenderer2.drawRangeMarker(graphics2D6, categoryPlot7, valueAxis16, marker17, rectangle2D18);
        org.jfree.chart.plot.CategoryPlot categoryPlot21 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke22 = categoryPlot21.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer23 = null;
        categoryPlot21.setRenderer(categoryItemRenderer23);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent25 = null;
        categoryPlot21.datasetChanged(datasetChangeEvent25);
        org.jfree.data.category.CategoryDataset categoryDataset28 = categoryPlot21.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis29 = new org.jfree.chart.axis.CategoryAxis();
        double double30 = categoryAxis29.getUpperMargin();
        int int31 = categoryPlot21.getDomainAxisIndex(categoryAxis29);
        java.awt.Paint paint32 = categoryAxis29.getLabelPaint();
        int int33 = categoryAxis29.getCategoryLabelPositionOffset();
        categoryPlot7.setDomainAxis(128, categoryAxis29, false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNull(categoryDataset28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.05d + "'", double30 == 0.05d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(paint32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test079() throws Throwable {
printRuntimeMSG("---RegressionTest2:test079");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test079");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = null;
        lineAndShapeRenderer10.setSeriesPositiveItemLabelPosition(0, itemLabelPosition12);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator14 = null;
        lineAndShapeRenderer10.setLegendItemToolTipGenerator(categorySeriesLabelGenerator14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        boolean boolean17 = lineAndShapeRenderer10.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition18 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        java.lang.Object obj19 = lineAndShapeRenderer10.clone();
        categoryPlot0.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer10, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator22 = null;
        lineAndShapeRenderer10.setBaseURLGenerator(categoryURLGenerator22);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset24 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range25 = lineAndShapeRenderer10.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset24);
        java.lang.Boolean boolean27 = lineAndShapeRenderer10.getSeriesShapesVisible(0);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(boolean27);
    }

    @Test
    public void test080() throws Throwable {
printRuntimeMSG("---RegressionTest2:test080");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test080");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.data.category.CategoryDataset categoryDataset53 = categoryItemEntity47.getDataset();
        java.lang.String str54 = categoryItemEntity47.getShapeCoords();
        categoryItemEntity47.setColumnKey((java.lang.Comparable) "rect");
        org.jfree.chart.plot.CategoryPlot categoryPlot57 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke58 = categoryPlot57.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot59 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke60 = categoryPlot59.getRangeMinorGridlineStroke();
        categoryPlot57.setParent((org.jfree.chart.plot.Plot) categoryPlot59);
        categoryPlot59.setForegroundAlpha((float) 100);
        org.jfree.chart.plot.CategoryPlot categoryPlot64 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke65 = categoryPlot64.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation66 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation67 = axisLocation66.getOpposite();
        categoryPlot64.setDomainAxisLocation(axisLocation67, false);
        boolean boolean70 = categoryPlot64.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer74 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition76 = null;
        lineAndShapeRenderer74.setSeriesPositiveItemLabelPosition(0, itemLabelPosition76);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator78 = null;
        lineAndShapeRenderer74.setLegendItemToolTipGenerator(categorySeriesLabelGenerator78);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition80 = lineAndShapeRenderer74.getBasePositiveItemLabelPosition();
        boolean boolean81 = lineAndShapeRenderer74.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition82 = lineAndShapeRenderer74.getBasePositiveItemLabelPosition();
        java.lang.Object obj83 = lineAndShapeRenderer74.clone();
        categoryPlot64.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer74, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator86 = null;
        lineAndShapeRenderer74.setBaseURLGenerator(categoryURLGenerator86);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset88 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range89 = lineAndShapeRenderer74.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset88);
        java.lang.Object obj90 = defaultCategoryDataset88.clone();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer91 = categoryPlot59.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset88);
        categoryItemEntity47.setDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset88);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0" + "'", str54.equals("4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0"));
        org.junit.Assert.assertNotNull(stroke58);
        org.junit.Assert.assertNotNull(stroke60);
        org.junit.Assert.assertNotNull(stroke65);
        org.junit.Assert.assertNotNull(axisLocation66);
        org.junit.Assert.assertNotNull(axisLocation67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNull(range89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNull(categoryItemRenderer91);
    }

    @Test
    public void test081() throws Throwable {
printRuntimeMSG("---RegressionTest2:test081");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test081");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        java.awt.Paint paint11 = categoryAxis8.getLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets12 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str13 = rectangleInsets12.toString();
        java.lang.String str14 = rectangleInsets12.toString();
        categoryAxis8.setLabelInsets(rectangleInsets12, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(rectangleInsets12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str13.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str14.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
    }

    @Test
    public void test082() throws Throwable {
printRuntimeMSG("---RegressionTest2:test082");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test082");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        java.awt.Shape shape50 = null;
        java.awt.Color color51 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke52 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color53 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape50, (java.awt.Paint) color51, stroke52, (java.awt.Paint) color53);
        java.awt.Paint paint55 = legendItem54.getFillPaint();
        java.awt.Font font56 = legendItem54.getLabelFont();
        legendItem54.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer59 = legendItem54.getFillPaintTransformer();
        boolean boolean60 = plotEntity33.equals((java.lang.Object) legendItem54);
        java.lang.Object obj61 = plotEntity33.clone();
        java.lang.Object obj62 = null;
        boolean boolean63 = plotEntity33.equals(obj62);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(color53);
        org.junit.Assert.assertNotNull(paint55);
        org.junit.Assert.assertNull(font56);
        org.junit.Assert.assertNotNull(gradientPaintTransformer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test083() throws Throwable {
printRuntimeMSG("---RegressionTest2:test083");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test083");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Paint paint7 = lineAndShapeRenderer2.lookupSeriesOutlinePaint((int) (byte) 1);
        java.awt.Font font8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer2.setBaseLegendTextFont(font8);
        double double10 = lineAndShapeRenderer2.getItemMargin();
        java.awt.Paint paint12 = lineAndShapeRenderer2.getLegendTextPaint((int) (short) 1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertNotNull(font8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNull(paint12);
    }

    @Test
    public void test084() throws Throwable {
printRuntimeMSG("---RegressionTest2:test084");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test084");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setCategoryMargin((double) 10.0f);
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        categoryPlot3.setParent((org.jfree.chart.plot.Plot) categoryPlot5);
        org.jfree.chart.LegendItemCollection legendItemCollection8 = categoryPlot3.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier9 = categoryPlot3.getDrawingSupplier();
        java.awt.Stroke stroke10 = categoryPlot3.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list12 = categoryPlot3.getCategoriesForAxis(categoryAxis11);
        boolean boolean13 = categoryPlot3.isDomainZoomable();
        java.awt.Paint paint14 = categoryPlot3.getBackgroundPaint();
        boolean boolean15 = categoryAxis0.hasListener((java.util.EventListener) categoryPlot3);
        org.jfree.chart.util.RectangleEdge rectangleEdge16 = categoryPlot3.getRangeAxisEdge();
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNull(legendItemCollection8);
        org.junit.Assert.assertNotNull(drawingSupplier9);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(rectangleEdge16);
    }

    @Test
    public void test085() throws Throwable {
printRuntimeMSG("---RegressionTest2:test085");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test085");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean8 = lineAndShapeRenderer2.getUseFillPaint();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesLinesVisible(0);
        java.awt.Paint paint11 = lineAndShapeRenderer2.getBaseFillPaint();
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(paint11);
    }

    @Test
    public void test086() throws Throwable {
printRuntimeMSG("---RegressionTest2:test086");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test086");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        java.awt.Color color13 = java.awt.Color.WHITE;
        barRenderer0.setSeriesItemLabelPaint(0, (java.awt.Paint) color13);
        barRenderer0.setMaximumBarWidth((double) (-1.0f));
        org.jfree.chart.renderer.RenderAttributes renderAttributes25 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean31 = lineAndShapeRenderer29.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean32 = lineAndShapeRenderer29.getBaseLinesVisible();
        java.awt.Shape shape33 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer29.setBaseLegendShape(shape33);
        renderAttributes25.setSeriesShape((int) ' ', shape33);
        org.jfree.chart.entity.ChartEntity chartEntity37 = new org.jfree.chart.entity.ChartEntity(shape33, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color40 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color40);
        java.lang.String str42 = legendItem41.getToolTipText();
        java.awt.Stroke stroke43 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem41.setOutlineStroke(stroke43);
        java.awt.Shape shape49 = null;
        java.awt.Color color50 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke51 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color52 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem53 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape49, (java.awt.Paint) color50, stroke51, (java.awt.Paint) color52);
        java.lang.Class<?> wildcardClass54 = color50.getClass();
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape33, paint38, stroke43, (java.awt.Paint) color50);
        org.jfree.chart.entity.ChartEntity chartEntity56 = new org.jfree.chart.entity.ChartEntity(shape33);
        java.awt.Color color57 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem58 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape33, (java.awt.Paint) color57);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset61 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity64 = new org.jfree.chart.entity.CategoryItemEntity(shape33, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset61, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset61.addValue((java.lang.Number) (-1), (java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", (java.lang.Comparable) "SortOrder.ASCENDING");
        java.util.List list69 = defaultCategoryDataset61.getRowKeys();
        org.jfree.data.general.DatasetGroup datasetGroup70 = defaultCategoryDataset61.getGroup();
        org.jfree.data.Range range72 = barRenderer0.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset61, true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(shape33);
        org.junit.Assert.assertNotNull(paint38);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(color50);
        org.junit.Assert.assertNotNull(stroke51);
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(color57);
        org.junit.Assert.assertNotNull(list69);
        org.junit.Assert.assertNotNull(datasetGroup70);
        org.junit.Assert.assertNotNull(range72);
    }

    @Test
    public void test087() throws Throwable {
printRuntimeMSG("---RegressionTest2:test087");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test087");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        java.awt.Stroke stroke10 = lineAndShapeRenderer2.getSeriesOutlineStroke(192);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator15 = lineAndShapeRenderer14.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator19 = lineAndShapeRenderer14.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font20 = lineAndShapeRenderer14.getBaseLegendTextFont();
        java.awt.Font font21 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer14.setBaseLegendTextFont(font21);
        try {
            lineAndShapeRenderer2.setSeriesItemLabelFont((-65536), font21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertNull(stroke10);
        org.junit.Assert.assertNull(categoryItemLabelGenerator15);
        org.junit.Assert.assertNull(categoryToolTipGenerator19);
        org.junit.Assert.assertNull(font20);
        org.junit.Assert.assertNotNull(font21);
    }

    @Test
    public void test088() throws Throwable {
printRuntimeMSG("---RegressionTest2:test088");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test088");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = null;
        java.util.List list11 = categoryPlot0.getCategoriesForAxis(categoryAxis10);
        org.jfree.chart.util.Layer layer13 = null;
        java.util.Collection collection14 = categoryPlot0.getDomainMarkers(2, layer13);
        int int15 = categoryPlot0.getCrosshairDatasetIndex();
        boolean boolean16 = categoryPlot0.getDrawSharedDomainAxis();
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation19 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation20 = axisLocation19.getOpposite();
        categoryPlot17.setDomainAxisLocation(axisLocation20, false);
        org.jfree.chart.axis.CategoryAnchor categoryAnchor23 = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        categoryPlot17.setDomainGridlinePosition(categoryAnchor23);
        org.jfree.data.SelectableValue selectableValue26 = new org.jfree.data.SelectableValue((java.lang.Number) 1.0f);
        boolean boolean27 = categoryAnchor23.equals((java.lang.Object) 1.0f);
        categoryPlot0.setDomainGridlinePosition(categoryAnchor23);
        int int29 = categoryPlot0.getWeight();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(collection14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertNotNull(axisLocation19);
        org.junit.Assert.assertNotNull(axisLocation20);
        org.junit.Assert.assertNotNull(categoryAnchor23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test089() throws Throwable {
printRuntimeMSG("---RegressionTest2:test089");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test089");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        boolean boolean14 = categoryAxis11.isVisible();
        org.jfree.chart.util.RectangleInsets rectangleInsets15 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double16 = rectangleInsets15.getRight();
        java.awt.Color color17 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        boolean boolean18 = rectangleInsets15.equals((java.lang.Object) color17);
        categoryAxis11.setLabelInsets(rectangleInsets15, false);
        org.jfree.chart.util.UnitType unitType21 = rectangleInsets15.getUnitType();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(rectangleInsets15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4.0d + "'", double16 == 4.0d);
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(unitType21);
    }

    @Test
    public void test090() throws Throwable {
printRuntimeMSG("---RegressionTest2:test090");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test090");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        java.awt.Color color20 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer7.setBaseLegendTextPaint((java.awt.Paint) color20);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator23 = lineAndShapeRenderer7.getSeriesItemLabelGenerator((-12566464));
        lineAndShapeRenderer7.setBaseCreateEntities(true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNull(categoryItemLabelGenerator23);
    }

    @Test
    public void test091() throws Throwable {
printRuntimeMSG("---RegressionTest2:test091");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test091");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Color color7 = java.awt.Color.RED;
        renderAttributes5.setDefaultOutlinePaint((java.awt.Paint) color7);
        categoryPlot0.setDomainGridlinePaint((java.awt.Paint) color7);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean18 = lineAndShapeRenderer12.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator22 = lineAndShapeRenderer21.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator23 = null;
        lineAndShapeRenderer21.setBaseToolTipGenerator(categoryToolTipGenerator23);
        java.awt.Font font26 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer21.setSeriesItemLabelFont((int) (short) 0, font26, true);
        lineAndShapeRenderer12.setBaseLegendTextFont(font26);
        org.jfree.chart.LegendItemCollection legendItemCollection30 = lineAndShapeRenderer12.getLegendItems();
        categoryPlot0.setFixedLegendItems(legendItemCollection30);
        int int32 = categoryPlot0.getBackgroundImageAlignment();
        boolean boolean33 = categoryPlot0.isRangeZoomable();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator22);
        org.junit.Assert.assertNotNull(font26);
        org.junit.Assert.assertNotNull(legendItemCollection30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test092() throws Throwable {
printRuntimeMSG("---RegressionTest2:test092");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test092");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint12 = renderAttributes11.getDefaultLabelPaint();
        java.awt.Paint paint15 = renderAttributes11.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes21 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean27 = lineAndShapeRenderer25.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean28 = lineAndShapeRenderer25.getBaseLinesVisible();
        java.awt.Shape shape29 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer25.setBaseLegendShape(shape29);
        renderAttributes21.setSeriesShape((int) ' ', shape29);
        org.jfree.chart.entity.ChartEntity chartEntity33 = new org.jfree.chart.entity.ChartEntity(shape29, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color36 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem37 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color36);
        java.lang.String str38 = legendItem37.getToolTipText();
        java.awt.Stroke stroke39 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem37.setOutlineStroke(stroke39);
        java.awt.Shape shape45 = null;
        java.awt.Color color46 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color48 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape45, (java.awt.Paint) color46, stroke47, (java.awt.Paint) color48);
        java.lang.Class<?> wildcardClass50 = color46.getClass();
        org.jfree.chart.LegendItem legendItem51 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape29, paint34, stroke39, (java.awt.Paint) color46);
        org.jfree.chart.entity.ChartEntity chartEntity52 = new org.jfree.chart.entity.ChartEntity(shape29);
        renderAttributes11.setSeriesShape(1, shape29);
        org.jfree.chart.plot.CategoryPlot categoryPlot54 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke55 = categoryPlot54.getRangeMinorGridlineStroke();
        boolean boolean56 = categoryPlot54.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity59 = new org.jfree.chart.entity.PlotEntity(shape29, (org.jfree.chart.plot.Plot) categoryPlot54, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.chart.entity.PlotEntity plotEntity60 = new org.jfree.chart.entity.PlotEntity(shape10, (org.jfree.chart.plot.Plot) categoryPlot54);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo63 = null;
        java.awt.geom.Point2D point2D64 = null;
        categoryPlot54.zoomDomainAxes(2.0d, (double) (-16777216), plotRenderingInfo63, point2D64);
        org.jfree.chart.axis.AxisLocation axisLocation67 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation68 = axisLocation67.getOpposite();
        org.jfree.chart.axis.AxisLocation axisLocation69 = axisLocation68.getOpposite();
        categoryPlot54.setRangeAxisLocation((int) (short) 10, axisLocation69);
        org.jfree.chart.axis.AxisLocation axisLocation72 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        categoryPlot54.setRangeAxisLocation(5, axisLocation72, false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNull(paint15);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(shape29);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(axisLocation67);
        org.junit.Assert.assertNotNull(axisLocation68);
        org.junit.Assert.assertNotNull(axisLocation69);
        org.junit.Assert.assertNotNull(axisLocation72);
    }

    @Test
    public void test093() throws Throwable {
printRuntimeMSG("---RegressionTest2:test093");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test093");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setMinorTickMarkInsideLength((float) (-12566464));
        categoryAxis0.setLowerMargin((-0.7853981633974483d));
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
    }

    @Test
    public void test094() throws Throwable {
printRuntimeMSG("---RegressionTest2:test094");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test094");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font3 = categoryAxis0.getTickLabelFont();
        float float4 = categoryAxis0.getMaximumCategoryLabelWidthRatio();
        categoryAxis0.addCategoryLabelToolTip((java.lang.Comparable) (-1.2566468E7d), "Category Plot");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator12 = lineAndShapeRenderer11.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator13 = null;
        lineAndShapeRenderer11.setBaseToolTipGenerator(categoryToolTipGenerator13);
        java.awt.Font font16 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer11.setSeriesItemLabelFont((int) (short) 0, font16, true);
        categoryAxis0.setTickLabelFont((java.lang.Comparable) 100.0f, font16);
        categoryAxis0.setTickMarkInsideLength((float) (-15935));
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNull(categoryItemLabelGenerator12);
        org.junit.Assert.assertNotNull(font16);
    }

    @Test
    public void test095() throws Throwable {
printRuntimeMSG("---RegressionTest2:test095");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test095");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        lineAndShapeRenderer2.setLegendShape(0, shape19);
        lineAndShapeRenderer2.setSeriesVisible(4, (java.lang.Boolean) true);
        java.awt.Shape shape46 = lineAndShapeRenderer2.getBaseLegendShape();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNull(shape46);
    }

    @Test
    public void test096() throws Throwable {
printRuntimeMSG("---RegressionTest2:test096");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test096");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint11 = lineAndShapeRenderer2.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        java.awt.Graphics2D graphics2D13 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearAnnotations();
        java.awt.Image image21 = categoryPlot14.getBackgroundImage();
        float float22 = categoryPlot14.getBackgroundImageAlpha();
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        java.awt.Color color25 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Stroke stroke26 = null;
        try {
            lineAndShapeRenderer2.drawDomainLine(graphics2D13, categoryPlot14, rectangle2D23, (double) 'a', (java.awt.Paint) color25, stroke26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'stroke' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(itemLabelPosition12);
        org.junit.Assert.assertNull(image21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.5f + "'", float22 == 0.5f);
        org.junit.Assert.assertNotNull(color25);
    }

    @Test
    public void test097() throws Throwable {
printRuntimeMSG("---RegressionTest2:test097");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test097");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer13 = legendItem8.getFillPaintTransformer();
        java.lang.Object obj14 = legendItem8.clone();
        org.jfree.chart.axis.CategoryAxis categoryAxis15 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Font font16 = categoryAxis15.getTickLabelFont();
        legendItem8.setLabelFont(font16);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(gradientPaintTransformer13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(font16);
    }

    @Test
    public void test098() throws Throwable {
printRuntimeMSG("---RegressionTest2:test098");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test098");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation14 = categoryPlot0.getRangeAxisLocation();
        categoryPlot0.clearRangeMarkers();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(axisLocation14);
    }

    @Test
    public void test099() throws Throwable {
printRuntimeMSG("---RegressionTest2:test099");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test099");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.lang.String str10 = legendItem8.getURLText();
        java.awt.Paint paint11 = legendItem8.getFillPaint();
        int int12 = legendItem8.getDatasetIndex();
        java.text.AttributedString attributedString13 = legendItem8.getAttributedLabel();
        java.awt.Color color14 = java.awt.Color.MAGENTA;
        legendItem8.setFillPaint((java.awt.Paint) color14);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str10.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(attributedString13);
        org.junit.Assert.assertNotNull(color14);
    }

    @Test
    public void test100() throws Throwable {
printRuntimeMSG("---RegressionTest2:test100");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test100");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator14 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator14);
        java.awt.Color color17 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color18 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace19 = color18.getColorSpace();
        float[] floatArray26 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray27 = color17.getColorComponents(colorSpace19, floatArray26);
        int int28 = color17.getBlue();
        int int29 = color17.getAlpha();
        lineAndShapeRenderer2.setSeriesItemLabelPaint(1, (java.awt.Paint) color17);
        org.jfree.chart.renderer.category.BarRenderer barRenderer31 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint32 = barRenderer31.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot33 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo36 = null;
        java.awt.geom.Point2D point2D37 = null;
        categoryPlot33.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo36, point2D37);
        categoryPlot33.clearAnnotations();
        boolean boolean40 = barRenderer31.equals((java.lang.Object) categoryPlot33);
        java.awt.Paint paint41 = barRenderer31.getShadowPaint();
        java.awt.Shape shape42 = barRenderer31.getBaseShape();
        org.jfree.chart.plot.CategoryPlot categoryPlot43 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke44 = categoryPlot43.getRangeMinorGridlineStroke();
        categoryPlot43.setBackgroundImageAlignment((int) (byte) -1);
        int int47 = categoryPlot43.getDatasetCount();
        java.awt.Paint paint48 = categoryPlot43.getDomainCrosshairPaint();
        barRenderer31.setBasePaint(paint48, false);
        boolean boolean51 = lineAndShapeRenderer2.equals((java.lang.Object) barRenderer31);
        barRenderer31.setShadowYOffset((double) (-739));
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(colorSpace19);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 128 + "'", int28 == 128);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 255 + "'", int29 == 255);
        org.junit.Assert.assertNotNull(paint32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(paint41);
        org.junit.Assert.assertNotNull(shape42);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(paint48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test101() throws Throwable {
printRuntimeMSG("---RegressionTest2:test101");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test101");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        java.awt.Color color2 = defaultShadowGenerator0.getShadowColor();
        int int3 = defaultShadowGenerator0.getShadowSize();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator7 = lineAndShapeRenderer6.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator11 = lineAndShapeRenderer6.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer6.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer6.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint18 = lineAndShapeRenderer6.getSeriesItemLabelPaint((int) (byte) -1);
        boolean boolean19 = defaultShadowGenerator0.equals((java.lang.Object) lineAndShapeRenderer6);
        org.jfree.chart.plot.CategoryPlot categoryPlot20 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke21 = categoryPlot20.getRangeMinorGridlineStroke();
        boolean boolean22 = categoryPlot20.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D23 = null;
        java.awt.geom.Rectangle2D rectangle2D24 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo26 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState27 = null;
        boolean boolean28 = categoryPlot20.render(graphics2D23, rectangle2D24, (int) (short) 10, plotRenderingInfo26, categoryCrosshairState27);
        org.jfree.chart.plot.Marker marker29 = null;
        boolean boolean30 = categoryPlot20.removeDomainMarker(marker29);
        boolean boolean31 = defaultShadowGenerator0.equals((java.lang.Object) boolean30);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNull(categoryItemLabelGenerator7);
        org.junit.Assert.assertNull(categoryToolTipGenerator11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(paint18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(stroke21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test102() throws Throwable {
printRuntimeMSG("---RegressionTest2:test102");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test102");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = lineAndShapeRenderer2.getDrawingSupplier();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator10 = lineAndShapeRenderer2.getToolTipGenerator((-16777216), 3, false);
        boolean boolean11 = lineAndShapeRenderer2.getAutoPopulateSeriesFillPaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator13 = null;
        try {
            lineAndShapeRenderer2.setSeriesURLGenerator((-65536), categoryURLGenerator13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(drawingSupplier6);
        org.junit.Assert.assertNull(categoryToolTipGenerator10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test103() throws Throwable {
printRuntimeMSG("---RegressionTest2:test103");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test103");
        org.jfree.chart.util.PaintList paintList0 = new org.jfree.chart.util.PaintList();
        java.awt.Color color2 = java.awt.Color.black;
        try {
            paintList0.setPaint((int) (short) -1, (java.awt.Paint) color2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(color2);
    }

    @Test
    public void test104() throws Throwable {
printRuntimeMSG("---RegressionTest2:test104");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test104");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        int int2 = keyedObjects2D0.getRowIndex((java.lang.Comparable) true);
        java.lang.Object obj3 = keyedObjects2D0.clone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test105() throws Throwable {
printRuntimeMSG("---RegressionTest2:test105");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test105");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        renderAttributes0.setDefaultShape(shape16);
        try {
            java.awt.Stroke stroke41 = renderAttributes0.getSeriesOutlineStroke((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test106() throws Throwable {
printRuntimeMSG("---RegressionTest2:test106");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test106");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo8 = null;
        java.awt.geom.Point2D point2D9 = null;
        categoryPlot5.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo8, point2D9);
        categoryPlot5.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder13 = categoryPlot5.getRowRenderingOrder();
        java.awt.Paint paint14 = categoryPlot5.getRangeZeroBaselinePaint();
        boolean boolean15 = categoryPlot5.isSubplot();
        org.jfree.chart.event.PlotChangeListener plotChangeListener16 = null;
        categoryPlot5.removeChangeListener(plotChangeListener16);
        boolean boolean18 = keyedObjects0.equals((java.lang.Object) categoryPlot5);
        org.jfree.chart.axis.ValueAxis valueAxis20 = null;
        categoryPlot5.setRangeAxis((int) (byte) 100, valueAxis20, false);
        org.junit.Assert.assertNotNull(sortOrder13);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test107() throws Throwable {
printRuntimeMSG("---RegressionTest2:test107");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test107");
        org.jfree.chart.axis.AxisLocation axisLocation0 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation1 = axisLocation0.getOpposite();
        org.jfree.chart.axis.AxisLocation axisLocation2 = axisLocation1.getOpposite();
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor3 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE3;
        boolean boolean4 = axisLocation2.equals((java.lang.Object) itemLabelAnchor3);
        org.jfree.data.KeyedObjects2D keyedObjects2D5 = new org.jfree.data.KeyedObjects2D();
        org.jfree.chart.plot.CategoryPlot categoryPlot6 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke7 = categoryPlot6.getRangeMinorGridlineStroke();
        categoryPlot6.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation10 = categoryPlot6.getOrientation();
        keyedObjects2D5.setObject((java.lang.Object) plotOrientation10, (java.lang.Comparable) "TextAnchor.BOTTOM_LEFT", (java.lang.Comparable) 4.0d);
        org.jfree.chart.util.RectangleEdge rectangleEdge14 = org.jfree.chart.plot.Plot.resolveDomainAxisLocation(axisLocation2, plotOrientation10);
        org.junit.Assert.assertNotNull(axisLocation0);
        org.junit.Assert.assertNotNull(axisLocation1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(itemLabelAnchor3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(plotOrientation10);
        org.junit.Assert.assertNotNull(rectangleEdge14);
    }

    @Test
    public void test108() throws Throwable {
printRuntimeMSG("---RegressionTest2:test108");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test108");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.data.category.CategoryDataset categoryDataset8 = null;
        int int9 = categoryPlot0.indexOf(categoryDataset8);
        java.awt.Stroke stroke10 = categoryPlot0.getRangeGridlineStroke();
        categoryPlot0.setNoDataMessage("rect");
        int int13 = categoryPlot0.getRendererCount();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test109() throws Throwable {
printRuntimeMSG("---RegressionTest2:test109");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test109");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        barRenderer0.setMaximumBarWidth(0.0d);
        boolean boolean16 = barRenderer0.getIncludeBaseInRange();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition21 = null;
        lineAndShapeRenderer19.setSeriesPositiveItemLabelPosition(0, itemLabelPosition21);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition24 = lineAndShapeRenderer19.getSeriesPositiveItemLabelPosition((-1));
        barRenderer0.setBasePositiveItemLabelPosition(itemLabelPosition24);
        double double26 = itemLabelPosition24.getAngle();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test110() throws Throwable {
printRuntimeMSG("---RegressionTest2:test110");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test110");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        int int6 = lineAndShapeRenderer2.getPassCount();
        lineAndShapeRenderer2.setBaseSeriesVisible(false);
        java.awt.Graphics2D graphics2D9 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke13 = categoryPlot12.getRangeMinorGridlineStroke();
        categoryPlot10.setParent((org.jfree.chart.plot.Plot) categoryPlot12);
        boolean boolean15 = categoryPlot12.isRangeMinorGridlinesVisible();
        org.jfree.chart.axis.ValueAxis valueAxis16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        java.awt.Color color19 = org.jfree.chart.ChartColor.DARK_CYAN;
        org.jfree.chart.LegendItem legendItem21 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        legendItem21.setOutlineStroke(stroke26);
        try {
            lineAndShapeRenderer2.drawRangeLine(graphics2D9, categoryPlot12, valueAxis16, rectangle2D17, 0.05d, (java.awt.Paint) color19, stroke26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
    }

    @Test
    public void test111() throws Throwable {
printRuntimeMSG("---RegressionTest2:test111");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test111");
        org.jfree.chart.util.ObjectList objectList1 = new org.jfree.chart.util.ObjectList((int) (short) 0);
    }

    @Test
    public void test112() throws Throwable {
printRuntimeMSG("---RegressionTest2:test112");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test112");
        org.jfree.chart.util.StrokeList strokeList0 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        lineAndShapeRenderer4.setAutoPopulateSeriesPaint(false);
        boolean boolean10 = lineAndShapeRenderer4.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator11 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer4.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator11);
        java.awt.Color color14 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        lineAndShapeRenderer4.setSeriesFillPaint((int) '4', (java.awt.Paint) color14);
        java.awt.Shape shape21 = null;
        java.awt.Color color22 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color24 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem25 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape21, (java.awt.Paint) color22, stroke23, (java.awt.Paint) color24);
        java.awt.Paint paint26 = legendItem25.getLabelPaint();
        java.lang.String str27 = legendItem25.getURLText();
        java.awt.Paint paint28 = legendItem25.getFillPaint();
        java.awt.Stroke stroke29 = legendItem25.getLineStroke();
        lineAndShapeRenderer4.setSeriesOutlineStroke(100, stroke29, true);
        strokeList0.setStroke(0, stroke29);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(stroke23);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertNull(paint26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str27.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint28);
        org.junit.Assert.assertNotNull(stroke29);
    }

    @Test
    public void test113() throws Throwable {
printRuntimeMSG("---RegressionTest2:test113");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test113");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesShapesVisible((int) 'a');
        boolean boolean13 = lineAndShapeRenderer2.getBaseCreateEntities();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test114() throws Throwable {
printRuntimeMSG("---RegressionTest2:test114");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test114");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator4 = lineAndShapeRenderer3.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator8 = lineAndShapeRenderer3.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer3.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean13 = lineAndShapeRenderer3.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator15 = null;
        lineAndShapeRenderer3.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator15);
        java.awt.Color color18 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color19 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace20 = color19.getColorSpace();
        float[] floatArray27 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray28 = color18.getColorComponents(colorSpace20, floatArray27);
        int int29 = color18.getBlue();
        int int30 = color18.getAlpha();
        lineAndShapeRenderer3.setSeriesItemLabelPaint(1, (java.awt.Paint) color18);
        java.awt.Color color32 = java.awt.Color.getColor("ItemLabelAnchor.INSIDE5", color18);
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color34 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace35 = color34.getColorSpace();
        float[] floatArray42 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray43 = color33.getColorComponents(colorSpace35, floatArray42);
        float[] floatArray44 = color32.getRGBComponents(floatArray42);
        org.junit.Assert.assertNull(categoryItemLabelGenerator4);
        org.junit.Assert.assertNull(categoryToolTipGenerator8);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(colorSpace20);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 128 + "'", int29 == 128);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 255 + "'", int30 == 255);
        org.junit.Assert.assertNotNull(color32);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNotNull(colorSpace35);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertNotNull(floatArray44);
    }

    @Test
    public void test115() throws Throwable {
printRuntimeMSG("---RegressionTest2:test115");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test115");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        org.jfree.chart.renderer.RenderAttributes renderAttributes15 = barRenderer0.getSelectedItemAttributes();
        java.awt.Color color17 = java.awt.Color.GRAY;
        try {
            renderAttributes15.setSeriesFillPaint((-1), (java.awt.Paint) color17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(renderAttributes15);
        org.junit.Assert.assertNotNull(color17);
    }

    @Test
    public void test116() throws Throwable {
printRuntimeMSG("---RegressionTest2:test116");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test116");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition6 = barRenderer0.getBaseNegativeItemLabelPosition();
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator7 = barRenderer0.getLegendItemToolTipGenerator();
        java.awt.Stroke stroke8 = barRenderer0.getBaseStroke();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNotNull(itemLabelPosition6);
        org.junit.Assert.assertNull(categorySeriesLabelGenerator7);
        org.junit.Assert.assertNotNull(stroke8);
    }

    @Test
    public void test117() throws Throwable {
printRuntimeMSG("---RegressionTest2:test117");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test117");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        java.awt.Stroke stroke11 = lineAndShapeRenderer7.lookupSeriesStroke(128);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
    }

    @Test
    public void test118() throws Throwable {
printRuntimeMSG("---RegressionTest2:test118");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test118");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_LIGHT_RED;
        float[] floatArray2 = new float[] { (-1) };
        try {
            float[] floatArray3 = color0.getRGBColorComponents(floatArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertNotNull(floatArray2);
    }

    @Test
    public void test119() throws Throwable {
printRuntimeMSG("---RegressionTest2:test119");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test119");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        java.awt.color.ColorSpace colorSpace1 = color0.getColorSpace();
        int int2 = color0.getTransparency();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertNotNull(colorSpace1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test120() throws Throwable {
printRuntimeMSG("---RegressionTest2:test120");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test120");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomRangeAxes(0.0d, (double) (-8355712), plotRenderingInfo13, point2D14);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation16 = null;
        try {
            categoryPlot0.addAnnotation(categoryAnnotation16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'annotation' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test121() throws Throwable {
printRuntimeMSG("---RegressionTest2:test121");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test121");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        boolean boolean9 = lineAndShapeRenderer2.getBaseCreateEntities();
        java.awt.Color color11 = org.jfree.chart.ChartColor.VERY_DARK_CYAN;
        lineAndShapeRenderer2.setSeriesPaint((int) '4', (java.awt.Paint) color11, true);
        lineAndShapeRenderer2.setSeriesLinesVisible(192, false);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator17 = lineAndShapeRenderer2.getLegendItemURLGenerator();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNull(categorySeriesLabelGenerator17);
    }

    @Test
    public void test122() throws Throwable {
printRuntimeMSG("---RegressionTest2:test122");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test122");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        try {
            java.lang.Comparable comparable28 = keyedObjects0.getKey((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test123() throws Throwable {
printRuntimeMSG("---RegressionTest2:test123");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test123");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        java.awt.Paint paint11 = categoryAxis8.getLabelPaint();
        java.awt.Color color12 = java.awt.Color.gray;
        categoryAxis8.setTickLabelPaint((java.awt.Paint) color12);
        categoryAxis8.setMinorTickMarkInsideLength(0.0f);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(color12);
    }

    @Test
    public void test124() throws Throwable {
printRuntimeMSG("---RegressionTest2:test124");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test124");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        java.awt.Color color12 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        lineAndShapeRenderer2.setSeriesFillPaint((int) '4', (java.awt.Paint) color12);
        java.awt.Shape shape19 = null;
        java.awt.Color color20 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color22 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem23 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, (java.awt.Paint) color20, stroke21, (java.awt.Paint) color22);
        java.awt.Paint paint24 = legendItem23.getLabelPaint();
        java.lang.String str25 = legendItem23.getURLText();
        java.awt.Paint paint26 = legendItem23.getFillPaint();
        java.awt.Stroke stroke27 = legendItem23.getLineStroke();
        lineAndShapeRenderer2.setSeriesOutlineStroke(100, stroke27, true);
        org.jfree.chart.plot.CategoryPlot categoryPlot30 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke31 = categoryPlot30.getRangeMinorGridlineStroke();
        categoryPlot30.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation34 = categoryPlot30.getOrientation();
        java.awt.Paint paint35 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray36 = new java.awt.Paint[] { paint35 };
        java.awt.Color color37 = java.awt.Color.BLUE;
        java.awt.Color color38 = java.awt.Color.RED;
        java.awt.Paint paint39 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray40 = new java.awt.Paint[] { color37, color38, paint39 };
        java.awt.Color color41 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel42 = null;
        java.awt.Rectangle rectangle43 = null;
        java.awt.geom.Rectangle2D rectangle2D44 = null;
        java.awt.geom.AffineTransform affineTransform45 = null;
        java.awt.RenderingHints renderingHints46 = null;
        java.awt.PaintContext paintContext47 = color41.createContext(colorModel42, rectangle43, rectangle2D44, affineTransform45, renderingHints46);
        java.awt.Color color48 = java.awt.Color.WHITE;
        java.awt.Color color49 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel50 = null;
        java.awt.Rectangle rectangle51 = null;
        java.awt.geom.Rectangle2D rectangle2D52 = null;
        java.awt.geom.AffineTransform affineTransform53 = null;
        java.awt.RenderingHints renderingHints54 = null;
        java.awt.PaintContext paintContext55 = color49.createContext(colorModel50, rectangle51, rectangle2D52, affineTransform53, renderingHints54);
        java.awt.Color color56 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray57 = new java.awt.Paint[] { color41, color48, color49, color56 };
        java.awt.Stroke stroke58 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke59 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke60 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke61 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke62 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray63 = new java.awt.Stroke[] { stroke58, stroke59, stroke60, stroke61, stroke62 };
        java.awt.Stroke stroke64 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke65 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot66 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke67 = categoryPlot66.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray68 = new java.awt.Stroke[] { stroke64, stroke65, stroke67 };
        java.awt.Shape shape69 = null;
        java.awt.Shape[] shapeArray70 = new java.awt.Shape[] { shape69 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier71 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray36, paintArray40, paintArray57, strokeArray63, strokeArray68, shapeArray70);
        java.awt.Shape shape72 = defaultDrawingSupplier71.getNextShape();
        java.awt.Stroke stroke73 = defaultDrawingSupplier71.getNextOutlineStroke();
        categoryPlot30.setDomainGridlineStroke(stroke73);
        lineAndShapeRenderer2.setBaseOutlineStroke(stroke73, true);
        int int77 = lineAndShapeRenderer2.getDefaultEntityRadius();
        boolean boolean79 = lineAndShapeRenderer2.isSeriesVisible(0);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(stroke21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNull(paint24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str25.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint26);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(plotOrientation34);
        org.junit.Assert.assertNotNull(paint35);
        org.junit.Assert.assertNotNull(paintArray36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(paint39);
        org.junit.Assert.assertNotNull(paintArray40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(paintContext47);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(color49);
        org.junit.Assert.assertNotNull(paintContext55);
        org.junit.Assert.assertNotNull(color56);
        org.junit.Assert.assertNotNull(paintArray57);
        org.junit.Assert.assertNotNull(stroke58);
        org.junit.Assert.assertNotNull(stroke59);
        org.junit.Assert.assertNotNull(stroke60);
        org.junit.Assert.assertNotNull(stroke61);
        org.junit.Assert.assertNotNull(stroke62);
        org.junit.Assert.assertNotNull(strokeArray63);
        org.junit.Assert.assertNotNull(stroke64);
        org.junit.Assert.assertNotNull(stroke65);
        org.junit.Assert.assertNotNull(stroke67);
        org.junit.Assert.assertNotNull(strokeArray68);
        org.junit.Assert.assertNotNull(shapeArray70);
        org.junit.Assert.assertNull(shape72);
        org.junit.Assert.assertNotNull(stroke73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test125() throws Throwable {
printRuntimeMSG("---RegressionTest2:test125");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test125");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        categoryPlot0.setRangeCrosshairVisible(true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
    }

    @Test
    public void test126() throws Throwable {
printRuntimeMSG("---RegressionTest2:test126");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test126");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.util.List list1 = keyedObjects2D0.getColumnKeys();
        org.jfree.chart.renderer.category.BarRenderer barRenderer2 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint3 = barRenderer2.getShadowPaint();
        boolean boolean4 = barRenderer2.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Paint paint9 = renderAttributes5.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes5.setDefaultStroke(stroke10);
        barRenderer2.setBaseStroke(stroke10, true);
        boolean boolean14 = keyedObjects2D0.equals((java.lang.Object) stroke10);
        keyedObjects2D0.clear();
        try {
            keyedObjects2D0.removeColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test127() throws Throwable {
printRuntimeMSG("---RegressionTest2:test127");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test127");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        org.jfree.chart.event.PlotChangeListener plotChangeListener7 = null;
        categoryPlot0.addChangeListener(plotChangeListener7);
        boolean boolean9 = categoryPlot0.isDomainCrosshairVisible();
        java.awt.geom.Rectangle2D rectangle2D12 = null;
        org.jfree.chart.RenderingSource renderingSource13 = null;
        categoryPlot0.select((double) (-1L), (double) '4', rectangle2D12, renderingSource13);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test128() throws Throwable {
printRuntimeMSG("---RegressionTest2:test128");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test128");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.awt.Graphics2D graphics2D3 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot4 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke5 = categoryPlot4.getRangeMinorGridlineStroke();
        boolean boolean6 = categoryPlot4.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        categoryPlot4.drawBackgroundImage(graphics2D7, rectangle2D8);
        categoryPlot4.clearAnnotations();
        java.lang.Object obj11 = categoryPlot4.clone();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent12 = null;
        categoryPlot4.axisChanged(axisChangeEvent12);
        org.jfree.chart.axis.CategoryAxis categoryAxis14 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint15 = categoryAxis14.getTickLabelPaint();
        categoryAxis14.setFixedDimension((double) 1);
        java.lang.String str18 = categoryAxis14.getLabel();
        org.jfree.chart.plot.CategoryMarker categoryMarker19 = null;
        java.awt.geom.Rectangle2D rectangle2D20 = null;
        try {
            lineAndShapeRenderer2.drawDomainMarker(graphics2D3, categoryPlot4, categoryAxis14, categoryMarker19, rectangle2D20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test129() throws Throwable {
printRuntimeMSG("---RegressionTest2:test129");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test129");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, 0, plotRenderingInfo10, categoryCrosshairState11);
        boolean boolean13 = categoryPlot0.isDomainCrosshairVisible();
        int int14 = categoryPlot0.getWeight();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        categoryPlot15.setParent((org.jfree.chart.plot.Plot) categoryPlot17);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent20 = null;
        categoryPlot17.annotationChanged(annotationChangeEvent20);
        categoryPlot17.setCrosshairDatasetIndex((int) (byte) -1, false);
        boolean boolean25 = categoryPlot0.equals((java.lang.Object) categoryPlot17);
        org.jfree.chart.plot.Marker marker27 = null;
        org.jfree.chart.util.Layer layer28 = null;
        boolean boolean30 = categoryPlot17.removeDomainMarker(100, marker27, layer28, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test130() throws Throwable {
printRuntimeMSG("---RegressionTest2:test130");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test130");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setMaximumBarWidth((double) 0L);
        java.awt.Font font15 = barRenderer0.getSeriesItemLabelFont((-8355712));
        java.awt.Stroke stroke17 = barRenderer0.lookupSeriesOutlineStroke((int) (byte) 10);
        barRenderer0.setShadowYOffset(0.0d);
        org.jfree.chart.LegendItem legendItem22 = barRenderer0.getLegendItem((int) ' ', (-16777216));
        java.awt.Paint paint24 = barRenderer0.lookupSeriesFillPaint((-8355712));
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNull(font15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNull(legendItem22);
        org.junit.Assert.assertNotNull(paint24);
    }

    @Test
    public void test131() throws Throwable {
printRuntimeMSG("---RegressionTest2:test131");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test131");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        lineAndShapeRenderer7.setBaseShapesFilled(false);
        lineAndShapeRenderer7.setUseOutlinePaint(false);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition27 = lineAndShapeRenderer7.getPositiveItemLabelPosition((int) '4', 175, false);
        lineAndShapeRenderer7.setSeriesCreateEntities(2, (java.lang.Boolean) false);
        java.awt.Graphics2D graphics2D31 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot32 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke33 = categoryPlot32.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer34 = null;
        categoryPlot32.setRenderer(categoryItemRenderer34);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent36 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot32);
        categoryPlot32.setRangeMinorGridlinesVisible(true);
        org.jfree.chart.axis.ValueAxis valueAxis39 = categoryPlot32.getRangeAxis();
        org.jfree.chart.LegendItemCollection legendItemCollection40 = categoryPlot32.getFixedLegendItems();
        java.awt.geom.Rectangle2D rectangle2D41 = null;
        try {
            lineAndShapeRenderer7.drawBackground(graphics2D31, categoryPlot32, rectangle2D41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition27);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNull(valueAxis39);
        org.junit.Assert.assertNull(legendItemCollection40);
    }

    @Test
    public void test132() throws Throwable {
printRuntimeMSG("---RegressionTest2:test132");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test132");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        double double9 = lineAndShapeRenderer2.getItemMargin();
        try {
            lineAndShapeRenderer2.setSeriesLinesVisible((-1), (java.lang.Boolean) true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test133() throws Throwable {
printRuntimeMSG("---RegressionTest2:test133");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test133");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.util.SortOrder sortOrder5 = categoryPlot0.getColumnRenderingOrder();
        java.lang.String str6 = sortOrder5.toString();
        java.lang.String str7 = sortOrder5.toString();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(sortOrder5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "SortOrder.ASCENDING" + "'", str6.equals("SortOrder.ASCENDING"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "SortOrder.ASCENDING" + "'", str7.equals("SortOrder.ASCENDING"));
    }

    @Test
    public void test134() throws Throwable {
printRuntimeMSG("---RegressionTest2:test134");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test134");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint14 = lineAndShapeRenderer2.getSeriesItemLabelPaint((int) (byte) -1);
        boolean boolean15 = lineAndShapeRenderer2.getBaseShapesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean21 = lineAndShapeRenderer19.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean22 = lineAndShapeRenderer19.getBaseLinesVisible();
        java.awt.Shape shape23 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer19.setBaseLegendShape(shape23);
        lineAndShapeRenderer2.setLegendShape((int) (short) 10, shape23);
        lineAndShapeRenderer2.setItemLabelAnchorOffset((double) 15);
        java.awt.Paint paint29 = lineAndShapeRenderer2.getSeriesItemLabelPaint((int) (byte) 100);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(paint14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shape23);
        org.junit.Assert.assertNull(paint29);
    }

    @Test
    public void test135() throws Throwable {
printRuntimeMSG("---RegressionTest2:test135");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test135");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        org.jfree.chart.axis.CategoryAnchor categoryAnchor6 = org.jfree.chart.axis.CategoryAnchor.MIDDLE;
        categoryPlot0.setDomainGridlinePosition(categoryAnchor6);
        org.jfree.chart.plot.Marker marker8 = null;
        org.jfree.chart.util.Layer layer9 = null;
        try {
            categoryPlot0.addRangeMarker(marker8, layer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertNotNull(categoryAnchor6);
    }

    @Test
    public void test136() throws Throwable {
printRuntimeMSG("---RegressionTest2:test136");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test136");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        java.lang.String str8 = categoryPlot0.getPlotType();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Category Plot" + "'", str8.equals("Category Plot"));
    }

    @Test
    public void test137() throws Throwable {
printRuntimeMSG("---RegressionTest2:test137");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test137");
        java.awt.Color color0 = org.jfree.chart.ChartColor.VERY_LIGHT_MAGENTA;
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator4 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float5 = defaultShadowGenerator4.getShadowOpacity();
        java.awt.Color color6 = defaultShadowGenerator4.getShadowColor();
        float[] floatArray11 = new float[] { (short) -1, 10.0f, (byte) 0, (-8355712) };
        float[] floatArray12 = color6.getRGBColorComponents(floatArray11);
        float[] floatArray13 = java.awt.Color.RGBtoHSB(10, 49, 4, floatArray12);
        float[] floatArray14 = color0.getColorComponents(floatArray12);
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.5f + "'", float5 == 0.5f);
        org.junit.Assert.assertNotNull(color6);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
    }

    @Test
    public void test138() throws Throwable {
printRuntimeMSG("---RegressionTest2:test138");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test138");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint11 = lineAndShapeRenderer2.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        double double12 = lineAndShapeRenderer2.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.RenderAttributes renderAttributes17 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean23 = lineAndShapeRenderer21.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean24 = lineAndShapeRenderer21.getBaseLinesVisible();
        java.awt.Shape shape25 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer21.setBaseLegendShape(shape25);
        renderAttributes17.setSeriesShape((int) ' ', shape25);
        org.jfree.chart.entity.ChartEntity chartEntity29 = new org.jfree.chart.entity.ChartEntity(shape25, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color32 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem33 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color32);
        java.lang.String str34 = legendItem33.getToolTipText();
        java.awt.Stroke stroke35 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem33.setOutlineStroke(stroke35);
        java.awt.Shape shape41 = null;
        java.awt.Color color42 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke43 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color44 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem45 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape41, (java.awt.Paint) color42, stroke43, (java.awt.Paint) color44);
        java.lang.Class<?> wildcardClass46 = color42.getClass();
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape25, paint30, stroke35, (java.awt.Paint) color42);
        lineAndShapeRenderer2.setBaseLegendShape(shape25);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator49 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 2.0d + "'", double12 == 2.0d);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(shape25);
        org.junit.Assert.assertNotNull(paint30);
        org.junit.Assert.assertNotNull(color32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(color42);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNull(categoryItemLabelGenerator49);
    }

    @Test
    public void test139() throws Throwable {
printRuntimeMSG("---RegressionTest2:test139");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test139");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = lineAndShapeRenderer2.getDrawingSupplier();
        java.awt.Stroke stroke10 = lineAndShapeRenderer2.getItemStroke(3, 5, false);
        boolean boolean14 = lineAndShapeRenderer2.getItemCreateEntity((-10), (-15935), true);
        org.junit.Assert.assertNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test140() throws Throwable {
printRuntimeMSG("---RegressionTest2:test140");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test140");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Paint paint3 = categoryPlot0.getBackgroundPaint();
        org.jfree.chart.util.Layer layer5 = null;
        java.util.Collection collection6 = categoryPlot0.getRangeMarkers((int) (byte) 0, layer5);
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke8 = categoryPlot7.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        categoryPlot7.setParent((org.jfree.chart.plot.Plot) categoryPlot9);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent12 = null;
        categoryPlot9.annotationChanged(annotationChangeEvent12);
        org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder14 = org.jfree.chart.plot.DatasetRenderingOrder.FORWARD;
        categoryPlot9.setDatasetRenderingOrder(datasetRenderingOrder14);
        java.lang.String str16 = datasetRenderingOrder14.toString();
        categoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder14);
        org.jfree.chart.axis.AxisLocation axisLocation19 = categoryPlot0.getDomainAxisLocation((int) (short) 1);
        categoryPlot0.setAnchorValue(56.0d, true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertNull(collection6);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(datasetRenderingOrder14);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "DatasetRenderingOrder.FORWARD" + "'", str16.equals("DatasetRenderingOrder.FORWARD"));
        org.junit.Assert.assertNotNull(axisLocation19);
    }

    @Test
    public void test141() throws Throwable {
printRuntimeMSG("---RegressionTest2:test141");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test141");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(stroke7);
    }

    @Test
    public void test142() throws Throwable {
printRuntimeMSG("---RegressionTest2:test142");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test142");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent12 = null;
        lineAndShapeRenderer2.notifyListeners(rendererChangeEvent12);
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = lineAndShapeRenderer2.getPlot();
        lineAndShapeRenderer2.setBaseLinesVisible(false);
        org.jfree.chart.renderer.RenderAttributes renderAttributes21 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean27 = lineAndShapeRenderer25.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean28 = lineAndShapeRenderer25.getBaseLinesVisible();
        java.awt.Shape shape29 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer25.setBaseLegendShape(shape29);
        renderAttributes21.setSeriesShape((int) ' ', shape29);
        org.jfree.chart.entity.ChartEntity chartEntity33 = new org.jfree.chart.entity.ChartEntity(shape29, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color36 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem37 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color36);
        java.lang.String str38 = legendItem37.getToolTipText();
        java.awt.Stroke stroke39 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem37.setOutlineStroke(stroke39);
        java.awt.Shape shape45 = null;
        java.awt.Color color46 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color48 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape45, (java.awt.Paint) color46, stroke47, (java.awt.Paint) color48);
        java.lang.Class<?> wildcardClass50 = color46.getClass();
        org.jfree.chart.LegendItem legendItem51 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape29, paint34, stroke39, (java.awt.Paint) color46);
        int int52 = color46.getTransparency();
        lineAndShapeRenderer2.setBaseOutlinePaint((java.awt.Paint) color46, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(categoryPlot14);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(shape29);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test143() throws Throwable {
printRuntimeMSG("---RegressionTest2:test143");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test143");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Color color7 = java.awt.Color.RED;
        renderAttributes5.setDefaultOutlinePaint((java.awt.Paint) color7);
        categoryPlot0.setDomainGridlinePaint((java.awt.Paint) color7);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean18 = lineAndShapeRenderer12.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator22 = lineAndShapeRenderer21.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator23 = null;
        lineAndShapeRenderer21.setBaseToolTipGenerator(categoryToolTipGenerator23);
        java.awt.Font font26 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer21.setSeriesItemLabelFont((int) (short) 0, font26, true);
        lineAndShapeRenderer12.setBaseLegendTextFont(font26);
        org.jfree.chart.LegendItemCollection legendItemCollection30 = lineAndShapeRenderer12.getLegendItems();
        categoryPlot0.setFixedLegendItems(legendItemCollection30);
        int int32 = categoryPlot0.getBackgroundImageAlignment();
        categoryPlot0.setRangePannable(false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator22);
        org.junit.Assert.assertNotNull(font26);
        org.junit.Assert.assertNotNull(legendItemCollection30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
    }

    @Test
    public void test144() throws Throwable {
printRuntimeMSG("---RegressionTest2:test144");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test144");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        java.awt.Color color20 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer7.setBaseLegendTextPaint((java.awt.Paint) color20);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator23 = lineAndShapeRenderer7.getSeriesItemLabelGenerator((-12566464));
        lineAndShapeRenderer7.setUseOutlinePaint(true);
        try {
            java.awt.Paint paint27 = lineAndShapeRenderer7.lookupSeriesPaint((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNull(categoryItemLabelGenerator23);
    }

    @Test
    public void test145() throws Throwable {
printRuntimeMSG("---RegressionTest2:test145");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test145");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.util.List list1 = keyedObjects2D0.getColumnKeys();
        org.jfree.chart.renderer.category.BarRenderer barRenderer2 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint3 = barRenderer2.getShadowPaint();
        boolean boolean4 = barRenderer2.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Paint paint9 = renderAttributes5.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes5.setDefaultStroke(stroke10);
        barRenderer2.setBaseStroke(stroke10, true);
        boolean boolean14 = keyedObjects2D0.equals((java.lang.Object) stroke10);
        keyedObjects2D0.clear();
        try {
            keyedObjects2D0.removeColumn((-10));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test146() throws Throwable {
printRuntimeMSG("---RegressionTest2:test146");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test146");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        java.awt.Color color2 = defaultShadowGenerator0.getShadowColor();
        int int3 = defaultShadowGenerator0.getShadowSize();
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor4 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE6;
        org.jfree.chart.text.TextAnchor textAnchor5 = org.jfree.chart.text.TextAnchor.TOP_CENTER;
        org.jfree.chart.text.TextAnchor textAnchor6 = org.jfree.chart.text.TextAnchor.TOP_CENTER;
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = new org.jfree.chart.labels.ItemLabelPosition(itemLabelAnchor4, textAnchor5, textAnchor6, (double) 100.0f);
        boolean boolean9 = defaultShadowGenerator0.equals((java.lang.Object) itemLabelPosition8);
        float float10 = defaultShadowGenerator0.getShadowOpacity();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(itemLabelAnchor4);
        org.junit.Assert.assertNotNull(textAnchor5);
        org.junit.Assert.assertNotNull(textAnchor6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.5f + "'", float10 == 0.5f);
    }

    @Test
    public void test147() throws Throwable {
printRuntimeMSG("---RegressionTest2:test147");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test147");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        renderAttributes0.setSeriesShape(1, shape18);
        org.jfree.chart.plot.CategoryPlot categoryPlot43 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke44 = categoryPlot43.getRangeMinorGridlineStroke();
        boolean boolean45 = categoryPlot43.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity48 = new org.jfree.chart.entity.PlotEntity(shape18, (org.jfree.chart.plot.Plot) categoryPlot43, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset51 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean55 = lineAndShapeRenderer54.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator56 = null;
        lineAndShapeRenderer54.setBaseURLGenerator(categoryURLGenerator56);
        java.awt.Paint paint61 = lineAndShapeRenderer54.getItemLabelPaint((-65536), 0, false);
        boolean boolean62 = defaultCategoryDataset51.equals((java.lang.Object) false);
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity65 = new org.jfree.chart.entity.CategoryItemEntity(shape18, "AxisLocation.BOTTOM_OR_RIGHT", "ChartEntity: tooltip = ", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset51, (java.lang.Comparable) 1.0f, (java.lang.Comparable) (short) 0);
        java.lang.Object obj66 = categoryItemEntity65.clone();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(paint61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test148() throws Throwable {
printRuntimeMSG("---RegressionTest2:test148");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test148");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        boolean boolean5 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer9.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean12 = lineAndShapeRenderer9.getBaseLinesVisible();
        lineAndShapeRenderer9.setAutoPopulateSeriesPaint(false);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation15 = null;
        boolean boolean16 = lineAndShapeRenderer9.removeAnnotation(categoryAnnotation15);
        try {
            categoryPlot0.setRenderer((-16777216), (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test149() throws Throwable {
printRuntimeMSG("---RegressionTest2:test149");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test149");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        java.awt.Color color6 = org.jfree.chart.ChartColor.LIGHT_BLUE;
        lineAndShapeRenderer2.setSeriesPaint(0, (java.awt.Paint) color6);
        lineAndShapeRenderer2.setBaseSeriesVisible(true);
        java.lang.Object obj10 = lineAndShapeRenderer2.clone();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(color6);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test150() throws Throwable {
printRuntimeMSG("---RegressionTest2:test150");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test150");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.calculateTopOutset((double) ' ');
        double double6 = rectangleInsets0.trimWidth((double) (short) -1);
        double double8 = rectangleInsets0.calculateBottomInset((double) (byte) 1);
        double double9 = rectangleInsets0.getTop();
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.0d + "'", double4 == 2.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9.0d) + "'", double6 == (-9.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.0d + "'", double8 == 2.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.0d + "'", double9 == 2.0d);
    }

    @Test
    public void test151() throws Throwable {
printRuntimeMSG("---RegressionTest2:test151");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test151");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        boolean boolean7 = barRenderer0.getIncludeBaseInRange();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = barRenderer0.getNegativeItemLabelPositionFallback();
        java.awt.Font font9 = barRenderer0.getBaseLegendTextFont();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(itemLabelPosition8);
        org.junit.Assert.assertNull(font9);
    }

    @Test
    public void test152() throws Throwable {
printRuntimeMSG("---RegressionTest2:test152");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test152");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        lineAndShapeRenderer2.setBaseSeriesVisibleInLegend(false, true);
        java.awt.Stroke stroke16 = lineAndShapeRenderer2.getItemStroke(4, 2, false);
        org.jfree.chart.renderer.category.BarRenderer barRenderer18 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint19 = barRenderer18.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot20 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo23 = null;
        java.awt.geom.Point2D point2D24 = null;
        categoryPlot20.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo23, point2D24);
        categoryPlot20.clearAnnotations();
        boolean boolean27 = barRenderer18.equals((java.lang.Object) categoryPlot20);
        java.awt.Paint paint28 = barRenderer18.getShadowPaint();
        java.awt.Shape shape29 = barRenderer18.getBaseShape();
        barRenderer18.setShadowYOffset(0.0d);
        double double32 = barRenderer18.getMaximumBarWidth();
        java.lang.Boolean boolean34 = barRenderer18.getSeriesCreateEntities(0);
        double double35 = barRenderer18.getMaximumBarWidth();
        java.awt.Color color36 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel37 = null;
        java.awt.Rectangle rectangle38 = null;
        java.awt.geom.Rectangle2D rectangle2D39 = null;
        java.awt.geom.AffineTransform affineTransform40 = null;
        java.awt.RenderingHints renderingHints41 = null;
        java.awt.PaintContext paintContext42 = color36.createContext(colorModel37, rectangle38, rectangle2D39, affineTransform40, renderingHints41);
        java.awt.Color color43 = java.awt.Color.RED;
        java.awt.Color color44 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color45 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace46 = color45.getColorSpace();
        float[] floatArray53 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray54 = color44.getColorComponents(colorSpace46, floatArray53);
        float[] floatArray55 = color43.getComponents(floatArray54);
        float[] floatArray56 = color36.getColorComponents(floatArray55);
        barRenderer18.setBasePaint((java.awt.Paint) color36);
        java.awt.Color color58 = color36.darker();
        lineAndShapeRenderer2.setSeriesFillPaint(175, (java.awt.Paint) color36, true);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(paint19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(paint28);
        org.junit.Assert.assertNotNull(shape29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNull(boolean34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(paintContext42);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNotNull(color45);
        org.junit.Assert.assertNotNull(colorSpace46);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertNotNull(color58);
    }

    @Test
    public void test153() throws Throwable {
printRuntimeMSG("---RegressionTest2:test153");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test153");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Color color2 = java.awt.Color.RED;
        renderAttributes0.setDefaultOutlinePaint((java.awt.Paint) color2);
        java.awt.Stroke stroke6 = renderAttributes0.getItemStroke((-1), 100);
        java.awt.Stroke stroke7 = renderAttributes0.getDefaultStroke();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(stroke6);
        org.junit.Assert.assertNull(stroke7);
    }

    @Test
    public void test154() throws Throwable {
printRuntimeMSG("---RegressionTest2:test154");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test154");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer13 = legendItem8.getFillPaintTransformer();
        boolean boolean14 = legendItem8.isShapeVisible();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(gradientPaintTransformer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test155() throws Throwable {
printRuntimeMSG("---RegressionTest2:test155");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test155");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        java.awt.Paint paint6 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray7 = new java.awt.Paint[] { paint6 };
        java.awt.Color color8 = java.awt.Color.BLUE;
        java.awt.Color color9 = java.awt.Color.RED;
        java.awt.Paint paint10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray11 = new java.awt.Paint[] { color8, color9, paint10 };
        java.awt.Color color12 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel13 = null;
        java.awt.Rectangle rectangle14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        java.awt.geom.AffineTransform affineTransform16 = null;
        java.awt.RenderingHints renderingHints17 = null;
        java.awt.PaintContext paintContext18 = color12.createContext(colorModel13, rectangle14, rectangle2D15, affineTransform16, renderingHints17);
        java.awt.Color color19 = java.awt.Color.WHITE;
        java.awt.Color color20 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel21 = null;
        java.awt.Rectangle rectangle22 = null;
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        java.awt.geom.AffineTransform affineTransform24 = null;
        java.awt.RenderingHints renderingHints25 = null;
        java.awt.PaintContext paintContext26 = color20.createContext(colorModel21, rectangle22, rectangle2D23, affineTransform24, renderingHints25);
        java.awt.Color color27 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray28 = new java.awt.Paint[] { color12, color19, color20, color27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray34 = new java.awt.Stroke[] { stroke29, stroke30, stroke31, stroke32, stroke33 };
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot37 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke38 = categoryPlot37.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray39 = new java.awt.Stroke[] { stroke35, stroke36, stroke38 };
        java.awt.Shape shape40 = null;
        java.awt.Shape[] shapeArray41 = new java.awt.Shape[] { shape40 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier42 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray7, paintArray11, paintArray28, strokeArray34, strokeArray39, shapeArray41);
        java.awt.Paint paint43 = defaultDrawingSupplier42.getNextOutlinePaint();
        java.lang.Object obj44 = defaultDrawingSupplier42.clone();
        java.awt.Paint paint45 = defaultDrawingSupplier42.getNextOutlinePaint();
        categoryPlot0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier42);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo48 = null;
        java.awt.geom.Point2D point2D49 = null;
        categoryPlot0.panDomainAxes((double) 0, plotRenderingInfo48, point2D49);
        java.awt.Color color51 = org.jfree.chart.ChartColor.DARK_RED;
        categoryPlot0.setRangeZeroBaselinePaint((java.awt.Paint) color51);
        java.awt.Stroke stroke53 = categoryPlot0.getRangeMinorGridlineStroke();
        java.lang.Class<?> wildcardClass54 = stroke53.getClass();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNotNull(paintArray7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(paintArray11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paintContext18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(paintContext26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(paintArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(strokeArray34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(strokeArray39);
        org.junit.Assert.assertNotNull(shapeArray41);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test156() throws Throwable {
printRuntimeMSG("---RegressionTest2:test156");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test156");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.awt.color.ColorSpace colorSpace4 = color2.getColorSpace();
        keyedObjects2D0.addObject((java.lang.Object) colorSpace4, (java.lang.Comparable) (-4.0d), (java.lang.Comparable) (-4.0d));
        java.lang.Object obj8 = null;
        boolean boolean9 = keyedObjects2D0.equals(obj8);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint21 = lineAndShapeRenderer12.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        lineAndShapeRenderer12.setDrawOutlines(true);
        org.jfree.chart.axis.AxisLocation axisLocation24 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator25 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        boolean boolean26 = axisLocation24.equals((java.lang.Object) standardCategorySeriesLabelGenerator25);
        lineAndShapeRenderer12.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator25);
        boolean boolean28 = lineAndShapeRenderer12.getAutoPopulateSeriesPaint();
        boolean boolean29 = lineAndShapeRenderer12.getAutoPopulateSeriesOutlinePaint();
        java.lang.Comparable comparable31 = null;
        try {
            keyedObjects2D0.setObject((java.lang.Object) boolean29, (java.lang.Comparable) "SortOrder.ASCENDING", comparable31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'columnKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(axisLocation24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test157() throws Throwable {
printRuntimeMSG("---RegressionTest2:test157");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test157");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo13, point2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo19 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState20 = null;
        boolean boolean21 = categoryPlot0.render(graphics2D16, rectangle2D17, (int) (byte) 100, plotRenderingInfo19, categoryCrosshairState20);
        boolean boolean22 = categoryPlot0.isNotify();
        org.jfree.chart.util.SortOrder sortOrder23 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.axis.AxisLocation axisLocation25 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation26 = axisLocation25.getOpposite();
        org.jfree.chart.axis.AxisLocation axisLocation27 = axisLocation26.getOpposite();
        try {
            categoryPlot0.setDomainAxisLocation((-12566464), axisLocation26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(sortOrder23);
        org.junit.Assert.assertNotNull(axisLocation25);
        org.junit.Assert.assertNotNull(axisLocation26);
        org.junit.Assert.assertNotNull(axisLocation27);
    }

    @Test
    public void test158() throws Throwable {
printRuntimeMSG("---RegressionTest2:test158");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test158");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        org.jfree.chart.entity.ChartEntity chartEntity12 = new org.jfree.chart.entity.ChartEntity(shape10, "GradientPaintTransformType.VERTICAL");
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
    }

    @Test
    public void test159() throws Throwable {
printRuntimeMSG("---RegressionTest2:test159");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test159");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition5 = lineAndShapeRenderer2.getSeriesNegativeItemLabelPosition(192);
        java.awt.Shape shape6 = lineAndShapeRenderer2.getBaseShape();
        lineAndShapeRenderer2.setBaseSeriesVisible(true, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(itemLabelPosition5);
        org.junit.Assert.assertNotNull(shape6);
    }

    @Test
    public void test160() throws Throwable {
printRuntimeMSG("---RegressionTest2:test160");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test160");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        java.awt.Color color2 = defaultShadowGenerator0.getShadowColor();
        int int3 = defaultShadowGenerator0.getShadowSize();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator7 = lineAndShapeRenderer6.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator11 = lineAndShapeRenderer6.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer6.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer6.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint18 = lineAndShapeRenderer6.getSeriesItemLabelPaint((int) (byte) -1);
        boolean boolean19 = defaultShadowGenerator0.equals((java.lang.Object) lineAndShapeRenderer6);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator21 = lineAndShapeRenderer6.getSeriesURLGenerator(8);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNull(categoryItemLabelGenerator7);
        org.junit.Assert.assertNull(categoryToolTipGenerator11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(paint18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(categoryURLGenerator21);
    }

    @Test
    public void test161() throws Throwable {
printRuntimeMSG("---RegressionTest2:test161");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test161");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint2 = renderAttributes0.getSeriesPaint((int) (short) 0);
        java.awt.Paint paint3 = renderAttributes0.getDefaultPaint();
        org.junit.Assert.assertNull(paint2);
        org.junit.Assert.assertNull(paint3);
    }

    @Test
    public void test162() throws Throwable {
printRuntimeMSG("---RegressionTest2:test162");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test162");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        categoryPlot0.setRangeCrosshairStroke(stroke48);
        java.awt.Stroke stroke50 = categoryPlot0.getRangeCrosshairStroke();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo52 = null;
        java.awt.geom.Point2D point2D53 = null;
        categoryPlot0.zoomRangeAxes((double) (short) -1, plotRenderingInfo52, point2D53, true);
        org.jfree.chart.axis.AxisLocation axisLocation57 = categoryPlot0.getDomainAxisLocation((int) (short) 10);
        org.jfree.chart.plot.CategoryPlot categoryPlot58 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke59 = categoryPlot58.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis60 = null;
        categoryPlot58.setRangeAxis(valueAxis60);
        org.jfree.chart.util.RectangleEdge rectangleEdge62 = categoryPlot58.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation64 = categoryPlot58.getRangeAxisLocation((-12566464));
        org.jfree.chart.util.RectangleInsets rectangleInsets65 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str66 = rectangleInsets65.toString();
        double double67 = rectangleInsets65.getTop();
        categoryPlot58.setAxisOffset(rectangleInsets65);
        categoryPlot0.setInsets(rectangleInsets65, true);
        categoryPlot0.setBackgroundImageAlignment((int) (short) 0);
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertNotNull(axisLocation57);
        org.junit.Assert.assertNotNull(stroke59);
        org.junit.Assert.assertNotNull(rectangleEdge62);
        org.junit.Assert.assertNotNull(axisLocation64);
        org.junit.Assert.assertNotNull(rectangleInsets65);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str66.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2.0d + "'", double67 == 2.0d);
    }

    @Test
    public void test163() throws Throwable {
printRuntimeMSG("---RegressionTest2:test163");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test163");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator10 = null;
        lineAndShapeRenderer8.setBaseToolTipGenerator(categoryToolTipGenerator10);
        java.awt.Font font13 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer8.setSeriesItemLabelFont((int) (short) 0, font13, true);
        lineAndShapeRenderer2.setBaseLegendTextFont(font13);
        lineAndShapeRenderer2.setAutoPopulateSeriesStroke(false);
        lineAndShapeRenderer2.setItemLabelAnchorOffset(0.0d);
        lineAndShapeRenderer2.setSeriesLinesVisible(15, true);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertNotNull(font13);
    }

    @Test
    public void test164() throws Throwable {
printRuntimeMSG("---RegressionTest2:test164");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test164");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.util.List list27 = keyedObjects0.getKeys();
        org.jfree.chart.event.ChartChangeEvent chartChangeEvent28 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object) keyedObjects0);
        int int30 = keyedObjects0.getIndex((java.lang.Comparable) "Category Plot");
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test165() throws Throwable {
printRuntimeMSG("---RegressionTest2:test165");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test165");
        org.jfree.chart.renderer.RenderAttributes renderAttributes4 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean10 = lineAndShapeRenderer8.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean11 = lineAndShapeRenderer8.getBaseLinesVisible();
        java.awt.Shape shape12 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer8.setBaseLegendShape(shape12);
        renderAttributes4.setSeriesShape((int) ' ', shape12);
        org.jfree.chart.entity.ChartEntity chartEntity16 = new org.jfree.chart.entity.ChartEntity(shape12, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint17 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color19 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem20 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color19);
        java.lang.String str21 = legendItem20.getToolTipText();
        java.awt.Stroke stroke22 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem20.setOutlineStroke(stroke22);
        java.awt.Shape shape28 = null;
        java.awt.Color color29 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color31 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem32 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape28, (java.awt.Paint) color29, stroke30, (java.awt.Paint) color31);
        java.lang.Class<?> wildcardClass33 = color29.getClass();
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape12, paint17, stroke22, (java.awt.Paint) color29);
        org.jfree.chart.entity.ChartEntity chartEntity35 = new org.jfree.chart.entity.ChartEntity(shape12);
        java.lang.String str36 = chartEntity35.getShapeCoords();
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(shape12);
        org.junit.Assert.assertNotNull(paint17);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0" + "'", str36.equals("4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0"));
    }

    @Test
    public void test166() throws Throwable {
printRuntimeMSG("---RegressionTest2:test166");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test166");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        boolean boolean14 = categoryPlot9.isRangeZeroBaselineVisible();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test167() throws Throwable {
printRuntimeMSG("---RegressionTest2:test167");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test167");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent5 = null;
        categoryPlot2.annotationChanged(annotationChangeEvent5);
        categoryPlot2.setCrosshairDatasetIndex((int) (byte) -1, false);
        org.jfree.chart.util.SortOrder sortOrder10 = org.jfree.chart.util.SortOrder.ASCENDING;
        categoryPlot2.setColumnRenderingOrder(sortOrder10);
        boolean boolean12 = categoryPlot2.canSelectByRegion();
        categoryPlot2.setRangeCrosshairVisible(true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(sortOrder10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test168() throws Throwable {
printRuntimeMSG("---RegressionTest2:test168");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test168");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        int int2 = keyedObjects2D0.getRowIndex((java.lang.Comparable) true);
        java.util.List list3 = keyedObjects2D0.getColumnKeys();
        try {
            java.lang.Object obj6 = keyedObjects2D0.getObject((java.lang.Comparable) "{0}", (java.lang.Comparable) 2);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key ({0}) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test169() throws Throwable {
printRuntimeMSG("---RegressionTest2:test169");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test169");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        java.lang.Boolean boolean16 = barRenderer0.getSeriesCreateEntities(0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator24 = lineAndShapeRenderer19.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer19.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint28 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer19.setBaseOutlinePaint(paint28);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer19.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition33);
        boolean boolean35 = barRenderer0.getIncludeBaseInRange();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer36 = barRenderer0.getGradientPaintTransformer();
        barRenderer0.setMinimumBarLength((double) 1L);
        boolean boolean39 = barRenderer0.getIncludeBaseInRange();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNull(categoryToolTipGenerator24);
        org.junit.Assert.assertNotNull(paint28);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(gradientPaintTransformer36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test170() throws Throwable {
printRuntimeMSG("---RegressionTest2:test170");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test170");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        categoryAxis1.clearCategoryLabelToolTips();
        boolean boolean17 = categoryAxis1.isMinorTickMarksVisible();
        categoryAxis1.configure();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test171() throws Throwable {
printRuntimeMSG("---RegressionTest2:test171");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test171");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color3 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem4 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color3);
        java.lang.String str5 = legendItem4.getToolTipText();
        java.awt.Stroke stroke6 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem4.setOutlineStroke(stroke6);
        legendItem1.setOutlineStroke(stroke6);
        java.awt.Paint paint9 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { paint9 };
        java.awt.Color color11 = java.awt.Color.BLUE;
        java.awt.Color color12 = java.awt.Color.RED;
        java.awt.Paint paint13 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray14 = new java.awt.Paint[] { color11, color12, paint13 };
        java.awt.Color color15 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel16 = null;
        java.awt.Rectangle rectangle17 = null;
        java.awt.geom.Rectangle2D rectangle2D18 = null;
        java.awt.geom.AffineTransform affineTransform19 = null;
        java.awt.RenderingHints renderingHints20 = null;
        java.awt.PaintContext paintContext21 = color15.createContext(colorModel16, rectangle17, rectangle2D18, affineTransform19, renderingHints20);
        java.awt.Color color22 = java.awt.Color.WHITE;
        java.awt.Color color23 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel24 = null;
        java.awt.Rectangle rectangle25 = null;
        java.awt.geom.Rectangle2D rectangle2D26 = null;
        java.awt.geom.AffineTransform affineTransform27 = null;
        java.awt.RenderingHints renderingHints28 = null;
        java.awt.PaintContext paintContext29 = color23.createContext(colorModel24, rectangle25, rectangle2D26, affineTransform27, renderingHints28);
        java.awt.Color color30 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray31 = new java.awt.Paint[] { color15, color22, color23, color30 };
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray37 = new java.awt.Stroke[] { stroke32, stroke33, stroke34, stroke35, stroke36 };
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray42 = new java.awt.Stroke[] { stroke38, stroke39, stroke41 };
        java.awt.Shape shape43 = null;
        java.awt.Shape[] shapeArray44 = new java.awt.Shape[] { shape43 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier45 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray10, paintArray14, paintArray31, strokeArray37, strokeArray42, shapeArray44);
        java.awt.Shape shape46 = defaultDrawingSupplier45.getNextShape();
        java.awt.Stroke stroke47 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Stroke stroke48 = defaultDrawingSupplier45.getNextOutlineStroke();
        java.awt.Paint paint49 = defaultDrawingSupplier45.getNextFillPaint();
        legendItem1.setOutlinePaint(paint49);
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paint13);
        org.junit.Assert.assertNotNull(paintArray14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertNotNull(paintContext21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(paintContext29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintArray31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(strokeArray37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(strokeArray42);
        org.junit.Assert.assertNotNull(shapeArray44);
        org.junit.Assert.assertNull(shape46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(paint49);
    }

    @Test
    public void test172() throws Throwable {
printRuntimeMSG("---RegressionTest2:test172");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test172");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        categoryPlot0.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot9.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo12, point2D13);
        categoryPlot9.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder17 = categoryPlot9.getRowRenderingOrder();
        categoryPlot0.setRowRenderingOrder(sortOrder17);
        double double19 = categoryPlot0.getRangeCrosshairValue();
        org.jfree.chart.util.SortOrder sortOrder20 = categoryPlot0.getColumnRenderingOrder();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent21 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.event.ChartChangeEventType chartChangeEventType22 = plotChangeEvent21.getType();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(sortOrder20);
        org.junit.Assert.assertNotNull(chartChangeEventType22);
    }

    @Test
    public void test173() throws Throwable {
printRuntimeMSG("---RegressionTest2:test173");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test173");
        org.jfree.chart.util.PaintList paintList0 = new org.jfree.chart.util.PaintList();
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo4 = null;
        java.awt.geom.Point2D point2D5 = null;
        categoryPlot1.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo4, point2D5);
        categoryPlot1.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder9 = categoryPlot1.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean11 = sortOrder9.equals((java.lang.Object) categoryPlot10);
        org.jfree.chart.axis.CategoryAxis categoryAxis12 = new org.jfree.chart.axis.CategoryAxis();
        double double13 = categoryAxis12.getUpperMargin();
        categoryPlot10.setDomainAxis(categoryAxis12);
        boolean boolean15 = paintList0.equals((java.lang.Object) categoryAxis12);
        java.awt.Paint paint17 = paintList0.getPaint(1);
        java.awt.Color color19 = java.awt.Color.orange;
        java.awt.color.ColorSpace colorSpace20 = color19.getColorSpace();
        paintList0.setPaint(2, (java.awt.Paint) color19);
        java.awt.Paint paint23 = paintList0.getPaint((int) (short) 10);
        org.junit.Assert.assertNotNull(sortOrder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.05d + "'", double13 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(paint17);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(colorSpace20);
        org.junit.Assert.assertNull(paint23);
    }

    @Test
    public void test174() throws Throwable {
printRuntimeMSG("---RegressionTest2:test174");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test174");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        categoryAxis0.setLowerMargin((double) (short) 0);
        float float5 = categoryAxis0.getMinorTickMarkOutsideLength();
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.0f + "'", float5 == 0.0f);
    }

    @Test
    public void test175() throws Throwable {
printRuntimeMSG("---RegressionTest2:test175");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test175");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        boolean boolean5 = categoryPlot2.isRangeMinorGridlinesVisible();
        org.jfree.chart.util.RectangleInsets rectangleInsets6 = categoryPlot2.getAxisOffset();
        int int7 = categoryPlot2.getWeight();
        java.awt.Stroke stroke8 = categoryPlot2.getDomainCrosshairStroke();
        org.jfree.chart.plot.Marker marker10 = null;
        org.jfree.chart.util.Layer layer11 = null;
        try {
            categoryPlot2.addRangeMarker((int) (short) 10, marker10, layer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(rectangleInsets6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(stroke8);
    }

    @Test
    public void test176() throws Throwable {
printRuntimeMSG("---RegressionTest2:test176");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test176");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        org.jfree.data.category.CategoryDataset categoryDataset16 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis17 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis17.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis20 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator24 = lineAndShapeRenderer23.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot(categoryDataset16, categoryAxis17, valueAxis20, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer23);
        categoryAxis17.setVisible(false);
        java.lang.String str29 = categoryAxis17.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions30 = categoryAxis17.getCategoryLabelPositions();
        categoryAxis17.setAxisLineVisible(false);
        org.jfree.chart.util.RectangleInsets rectangleInsets33 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str34 = rectangleInsets33.toString();
        double double35 = rectangleInsets33.getTop();
        categoryAxis17.setTickLabelInsets(rectangleInsets33);
        categoryAxis1.setTickLabelInsets(rectangleInsets33);
        categoryAxis1.setVisible(false);
        categoryAxis1.setUpperMargin((double) 255);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(categoryLabelPositions30);
        org.junit.Assert.assertNotNull(rectangleInsets33);
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str34.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2.0d + "'", double35 == 2.0d);
    }

    @Test
    public void test177() throws Throwable {
printRuntimeMSG("---RegressionTest2:test177");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test177");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = null;
        java.util.List list11 = categoryPlot0.getCategoriesForAxis(categoryAxis10);
        org.jfree.chart.util.Layer layer13 = null;
        java.util.Collection collection14 = categoryPlot0.getDomainMarkers(2, layer13);
        int int15 = categoryPlot0.getCrosshairDatasetIndex();
        boolean boolean16 = categoryPlot0.getDrawSharedDomainAxis();
        org.jfree.chart.event.PlotChangeListener plotChangeListener17 = null;
        categoryPlot0.addChangeListener(plotChangeListener17);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(collection14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test178() throws Throwable {
printRuntimeMSG("---RegressionTest2:test178");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test178");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        double double1 = categoryAxis0.getUpperMargin();
        java.awt.Font font3 = categoryAxis0.getTickLabelFont((java.lang.Comparable) 3);
        categoryAxis0.setLabel("");
        categoryAxis0.setMaximumCategoryLabelWidthRatio((float) (short) 1);
        boolean boolean8 = categoryAxis0.isVisible();
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.05d + "'", double1 == 0.05d);
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test179() throws Throwable {
printRuntimeMSG("---RegressionTest2:test179");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test179");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.util.List list27 = keyedObjects0.getKeys();
        keyedObjects0.clear();
        try {
            keyedObjects0.removeValue((java.lang.Comparable) 100L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key (100) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list27);
    }

    @Test
    public void test180() throws Throwable {
printRuntimeMSG("---RegressionTest2:test180");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test180");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.lang.Object obj1 = keyedObjects2D0.clone();
        org.junit.Assert.assertNotNull(obj1);
    }

    @Test
    public void test181() throws Throwable {
printRuntimeMSG("---RegressionTest2:test181");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test181");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        barRenderer0.setBaseSeriesVisibleInLegend(true);
        java.awt.Font font15 = barRenderer0.getLegendTextFont(128);
        java.awt.Paint paint16 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        barRenderer0.setShadowPaint(paint16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean23 = lineAndShapeRenderer21.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean24 = lineAndShapeRenderer21.getBaseLinesVisible();
        java.awt.Shape shape25 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer21.setBaseLegendShape(shape25);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition30 = lineAndShapeRenderer21.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean31 = lineAndShapeRenderer21.getBaseShapesVisible();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer21.getSeriesPositiveItemLabelPosition((-8355712));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition34 = lineAndShapeRenderer21.getBaseNegativeItemLabelPosition();
        barRenderer0.setSeriesNegativeItemLabelPosition((int) (byte) 1, itemLabelPosition34, false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNull(font15);
        org.junit.Assert.assertNotNull(paint16);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(shape25);
        org.junit.Assert.assertNotNull(itemLabelPosition30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertNotNull(itemLabelPosition34);
    }

    @Test
    public void test182() throws Throwable {
printRuntimeMSG("---RegressionTest2:test182");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test182");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        java.awt.Paint paint6 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray7 = new java.awt.Paint[] { paint6 };
        java.awt.Color color8 = java.awt.Color.BLUE;
        java.awt.Color color9 = java.awt.Color.RED;
        java.awt.Paint paint10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray11 = new java.awt.Paint[] { color8, color9, paint10 };
        java.awt.Color color12 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel13 = null;
        java.awt.Rectangle rectangle14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        java.awt.geom.AffineTransform affineTransform16 = null;
        java.awt.RenderingHints renderingHints17 = null;
        java.awt.PaintContext paintContext18 = color12.createContext(colorModel13, rectangle14, rectangle2D15, affineTransform16, renderingHints17);
        java.awt.Color color19 = java.awt.Color.WHITE;
        java.awt.Color color20 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel21 = null;
        java.awt.Rectangle rectangle22 = null;
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        java.awt.geom.AffineTransform affineTransform24 = null;
        java.awt.RenderingHints renderingHints25 = null;
        java.awt.PaintContext paintContext26 = color20.createContext(colorModel21, rectangle22, rectangle2D23, affineTransform24, renderingHints25);
        java.awt.Color color27 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray28 = new java.awt.Paint[] { color12, color19, color20, color27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke33 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray34 = new java.awt.Stroke[] { stroke29, stroke30, stroke31, stroke32, stroke33 };
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot37 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke38 = categoryPlot37.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray39 = new java.awt.Stroke[] { stroke35, stroke36, stroke38 };
        java.awt.Shape shape40 = null;
        java.awt.Shape[] shapeArray41 = new java.awt.Shape[] { shape40 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier42 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray7, paintArray11, paintArray28, strokeArray34, strokeArray39, shapeArray41);
        java.awt.Paint paint43 = defaultDrawingSupplier42.getNextOutlinePaint();
        java.lang.Object obj44 = defaultDrawingSupplier42.clone();
        java.awt.Paint paint45 = defaultDrawingSupplier42.getNextOutlinePaint();
        categoryPlot0.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier) defaultDrawingSupplier42);
        categoryPlot0.setDomainGridlinesVisible(false);
        boolean boolean49 = categoryPlot0.isRangeMinorGridlinesVisible();
        java.awt.Graphics2D graphics2D50 = null;
        java.awt.geom.Rectangle2D rectangle2D51 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo53 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState54 = null;
        boolean boolean55 = categoryPlot0.render(graphics2D50, rectangle2D51, (int) (byte) 1, plotRenderingInfo53, categoryCrosshairState54);
        java.lang.String str56 = categoryPlot0.getNoDataMessage();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertNotNull(paintArray7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(paintArray11);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paintContext18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(paintContext26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(paintArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(stroke33);
        org.junit.Assert.assertNotNull(strokeArray34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(strokeArray39);
        org.junit.Assert.assertNotNull(shapeArray41);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(paint45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test183() throws Throwable {
printRuntimeMSG("---RegressionTest2:test183");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test183");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setMaximumBarWidth((double) 0L);
        java.awt.Font font15 = barRenderer0.getSeriesItemLabelFont((-8355712));
        java.awt.Stroke stroke17 = barRenderer0.lookupSeriesOutlineStroke((int) (byte) 10);
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation21 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation22 = axisLocation21.getOpposite();
        categoryPlot19.setDomainAxisLocation(axisLocation22, false);
        boolean boolean25 = categoryPlot19.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition31 = null;
        lineAndShapeRenderer29.setSeriesPositiveItemLabelPosition(0, itemLabelPosition31);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator33 = null;
        lineAndShapeRenderer29.setLegendItemToolTipGenerator(categorySeriesLabelGenerator33);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition35 = lineAndShapeRenderer29.getBasePositiveItemLabelPosition();
        boolean boolean36 = lineAndShapeRenderer29.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition37 = lineAndShapeRenderer29.getBasePositiveItemLabelPosition();
        java.lang.Object obj38 = lineAndShapeRenderer29.clone();
        categoryPlot19.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer29, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition42 = lineAndShapeRenderer29.getSeriesPositiveItemLabelPosition(100);
        barRenderer0.setSeriesPositiveItemLabelPosition(49, itemLabelPosition42, false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNull(font15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNotNull(axisLocation21);
        org.junit.Assert.assertNotNull(axisLocation22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(itemLabelPosition42);
    }

    @Test
    public void test184() throws Throwable {
printRuntimeMSG("---RegressionTest2:test184");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test184");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent14 = null;
        categoryPlot0.annotationChanged(annotationChangeEvent14);
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation17 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot16.setOrientation(plotOrientation17);
        categoryPlot0.setOrientation(plotOrientation17);
        org.jfree.data.category.CategoryDataset categoryDataset20 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis21 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis21.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis24 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator28 = lineAndShapeRenderer27.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot29 = new org.jfree.chart.plot.CategoryPlot(categoryDataset20, categoryAxis21, valueAxis24, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer27);
        boolean boolean30 = categoryAxis21.isTickLabelsVisible();
        double double31 = categoryAxis21.getFixedDimension();
        java.lang.Object obj32 = categoryAxis21.clone();
        java.awt.Paint paint33 = categoryAxis21.getLabelPaint();
        boolean boolean34 = plotOrientation17.equals((java.lang.Object) categoryAxis21);
        org.jfree.data.category.CategoryDataset categoryDataset35 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis36 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis36.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis39 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer42 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator43 = lineAndShapeRenderer42.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot44 = new org.jfree.chart.plot.CategoryPlot(categoryDataset35, categoryAxis36, valueAxis39, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer42);
        boolean boolean45 = categoryAxis36.isTickLabelsVisible();
        categoryAxis36.setLabelToolTip("hi!");
        boolean boolean48 = categoryAxis36.isVisible();
        categoryAxis36.setMaximumCategoryLabelWidthRatio((float) 10L);
        java.lang.String str52 = categoryAxis36.getCategoryLabelToolTip((java.lang.Comparable) (-1.2566468E7d));
        boolean boolean53 = plotOrientation17.equals((java.lang.Object) str52);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(plotOrientation17);
        org.junit.Assert.assertNull(categoryItemLabelGenerator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(paint33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test185() throws Throwable {
printRuntimeMSG("---RegressionTest2:test185");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test185");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset3 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj4 = abstractCategoryDataset3.clone();
        java.lang.Object obj5 = abstractCategoryDataset3.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes14 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        java.awt.Shape shape22 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer18.setBaseLegendShape(shape22);
        renderAttributes14.setSeriesShape((int) ' ', shape22);
        org.jfree.chart.entity.ChartEntity chartEntity26 = new org.jfree.chart.entity.ChartEntity(shape22, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color29 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem30 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color29);
        java.lang.String str31 = legendItem30.getToolTipText();
        java.awt.Stroke stroke32 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem30.setOutlineStroke(stroke32);
        java.awt.Shape shape38 = null;
        java.awt.Color color39 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color41 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape38, (java.awt.Paint) color39, stroke40, (java.awt.Paint) color41);
        java.lang.Class<?> wildcardClass43 = color39.getClass();
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape22, paint27, stroke32, (java.awt.Paint) color39);
        org.jfree.chart.entity.ChartEntity chartEntity45 = new org.jfree.chart.entity.ChartEntity(shape22);
        java.awt.Color color46 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape22, (java.awt.Paint) color46);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset50 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity53 = new org.jfree.chart.entity.CategoryItemEntity(shape22, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset50, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset3.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset50);
        int int56 = defaultCategoryDataset50.getRowCount();
        try {
            defaultCategoryDataset50.removeValue((java.lang.Comparable) 0.0d, (java.lang.Comparable) (-4.0d));
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (0.0) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(shape22);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test186() throws Throwable {
printRuntimeMSG("---RegressionTest2:test186");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test186");
        org.jfree.chart.util.UnitType unitType0 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        categoryPlot1.setParent((org.jfree.chart.plot.Plot) categoryPlot3);
        org.jfree.chart.LegendItemCollection legendItemCollection6 = categoryPlot1.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier7 = categoryPlot1.getDrawingSupplier();
        java.awt.Stroke stroke8 = categoryPlot1.getOutlineStroke();
        boolean boolean9 = unitType0.equals((java.lang.Object) categoryPlot1);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot1.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo12, point2D13);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean19 = lineAndShapeRenderer17.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean20 = lineAndShapeRenderer17.getBaseLinesVisible();
        java.awt.Shape shape21 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer17.setBaseLegendShape(shape21);
        java.awt.Color color23 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer17.setBaseOutlinePaint((java.awt.Paint) color23, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition30 = null;
        lineAndShapeRenderer28.setSeriesPositiveItemLabelPosition(0, itemLabelPosition30);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer28.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean34 = lineAndShapeRenderer28.getUseFillPaint();
        lineAndShapeRenderer28.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer28.setBaseStroke(stroke37, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray40 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer17, lineAndShapeRenderer28 };
        categoryPlot1.setRenderers(categoryItemRendererArray40);
        categoryPlot1.setForegroundAlpha((float) 5);
        org.jfree.chart.event.PlotChangeListener plotChangeListener44 = null;
        categoryPlot1.addChangeListener(plotChangeListener44);
        categoryPlot1.clearDomainMarkers((-739));
        org.junit.Assert.assertNotNull(unitType0);
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNull(legendItemCollection6);
        org.junit.Assert.assertNotNull(drawingSupplier7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(shape21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(categoryItemRendererArray40);
    }

    @Test
    public void test187() throws Throwable {
printRuntimeMSG("---RegressionTest2:test187");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test187");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        java.awt.Paint paint7 = null;
        try {
            categoryPlot0.setRangeMinorGridlinePaint(paint7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'paint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test188() throws Throwable {
printRuntimeMSG("---RegressionTest2:test188");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test188");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setCategoryMargin((double) (byte) 100);
        java.awt.Paint paint20 = categoryAxis0.getTickLabelPaint();
        java.awt.geom.Rectangle2D rectangle2D23 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot24 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke25 = categoryPlot24.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot26 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke27 = categoryPlot26.getRangeMinorGridlineStroke();
        categoryPlot24.setParent((org.jfree.chart.plot.Plot) categoryPlot26);
        categoryPlot26.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        categoryPlot26.mapDatasetToRangeAxis((int) 'a', (int) (short) 0);
        boolean boolean35 = categoryPlot26.isRangeCrosshairVisible();
        org.jfree.chart.util.RectangleEdge rectangleEdge37 = categoryPlot26.getDomainAxisEdge(0);
        try {
            double double38 = categoryAxis0.getCategoryEnd(49, 128, rectangle2D23, rectangleEdge37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(stroke25);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(rectangleEdge37);
    }

    @Test
    public void test189() throws Throwable {
printRuntimeMSG("---RegressionTest2:test189");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test189");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        java.awt.Graphics2D graphics2D20 = null;
        java.awt.geom.Rectangle2D rectangle2D21 = null;
        java.awt.geom.Point2D point2D22 = null;
        org.jfree.chart.plot.PlotState plotState23 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo24 = null;
        try {
            categoryPlot10.draw(graphics2D20, rectangle2D21, point2D22, plotState23, plotRenderingInfo24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test190() throws Throwable {
printRuntimeMSG("---RegressionTest2:test190");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test190");
        int int3 = java.awt.Color.HSBtoRGB((float) 10, (float) (short) 1, (float) 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-196608) + "'", int3 == (-196608));
    }

    @Test
    public void test191() throws Throwable {
printRuntimeMSG("---RegressionTest2:test191");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test191");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        barRenderer0.setDrawBarOutline(false);
        barRenderer0.setSeriesVisibleInLegend((int) (short) 10, (java.lang.Boolean) false, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean10 = lineAndShapeRenderer9.getUseOutlinePaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer13.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        lineAndShapeRenderer9.setBasePositiveItemLabelPosition(itemLabelPosition19);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer24 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator25 = lineAndShapeRenderer24.getBaseItemLabelGenerator();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition27 = lineAndShapeRenderer24.getSeriesNegativeItemLabelPosition(192);
        lineAndShapeRenderer9.setSeriesNegativeItemLabelPosition((int) (short) 10, itemLabelPosition27, false);
        barRenderer0.setPositiveItemLabelPositionFallback(itemLabelPosition27);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNull(categoryItemLabelGenerator25);
        org.junit.Assert.assertNotNull(itemLabelPosition27);
    }

    @Test
    public void test192() throws Throwable {
printRuntimeMSG("---RegressionTest2:test192");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test192");
        org.jfree.chart.util.PaintList paintList0 = new org.jfree.chart.util.PaintList();
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo4 = null;
        java.awt.geom.Point2D point2D5 = null;
        categoryPlot1.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo4, point2D5);
        categoryPlot1.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder9 = categoryPlot1.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean11 = sortOrder9.equals((java.lang.Object) categoryPlot10);
        org.jfree.chart.axis.CategoryAxis categoryAxis12 = new org.jfree.chart.axis.CategoryAxis();
        double double13 = categoryAxis12.getUpperMargin();
        categoryPlot10.setDomainAxis(categoryAxis12);
        boolean boolean15 = paintList0.equals((java.lang.Object) categoryAxis12);
        java.awt.Paint paint17 = paintList0.getPaint(1);
        java.awt.Paint paint19 = paintList0.getPaint((int) (byte) 10);
        org.junit.Assert.assertNotNull(sortOrder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.05d + "'", double13 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(paint17);
        org.junit.Assert.assertNull(paint19);
    }

    @Test
    public void test193() throws Throwable {
printRuntimeMSG("---RegressionTest2:test193");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test193");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        barRenderer0.setShadowXOffset((double) (-16777216));
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator9 = barRenderer0.getLegendItemLabelGenerator();
        double double10 = barRenderer0.getItemMargin();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertNotNull(categorySeriesLabelGenerator9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
    }

    @Test
    public void test194() throws Throwable {
printRuntimeMSG("---RegressionTest2:test194");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test194");
        org.jfree.data.SelectableValue selectableValue1 = new org.jfree.data.SelectableValue((java.lang.Number) 4);
    }

    @Test
    public void test195() throws Throwable {
printRuntimeMSG("---RegressionTest2:test195");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test195");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        lineAndShapeRenderer2.clearSeriesStrokes(false);
        lineAndShapeRenderer2.setDrawOutlines(true);
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotOrientation plotOrientation13 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        categoryPlot12.setOrientation(plotOrientation13);
        categoryPlot12.setBackgroundImageAlpha(0.0f);
        categoryPlot12.setDomainCrosshairRowKey((java.lang.Comparable) true);
        categoryPlot12.clearDomainMarkers((int) ' ');
        lineAndShapeRenderer2.setPlot(categoryPlot12);
        boolean boolean22 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlineStroke();
        org.junit.Assert.assertNotNull(plotOrientation13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test196() throws Throwable {
printRuntimeMSG("---RegressionTest2:test196");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test196");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font3 = categoryAxis0.getTickLabelFont();
        java.lang.String str5 = categoryAxis0.getCategoryLabelToolTip((java.lang.Comparable) (-1L));
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test197() throws Throwable {
printRuntimeMSG("---RegressionTest2:test197");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test197");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.clear();
        java.lang.Comparable comparable51 = null;
        try {
            defaultCategoryDataset44.setValue((java.lang.Number) 1.0d, (java.lang.Comparable) 3.0d, comparable51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'columnKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
    }

    @Test
    public void test198() throws Throwable {
printRuntimeMSG("---RegressionTest2:test198");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test198");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean57 = lineAndShapeRenderer55.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean58 = lineAndShapeRenderer55.getBaseLinesVisible();
        lineAndShapeRenderer55.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer55.setAutoPopulateSeriesShape(false);
        boolean boolean63 = categoryItemEntity47.equals((java.lang.Object) lineAndShapeRenderer55);
        categoryItemEntity47.setRowKey((java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test199() throws Throwable {
printRuntimeMSG("---RegressionTest2:test199");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test199");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        java.awt.Paint paint3 = categoryPlot0.getRangeCrosshairPaint();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot0.zoomRangeAxes(0.0d, plotRenderingInfo5, point2D6, false);
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = null;
        categoryPlot9.setRenderer(categoryItemRenderer11);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot9);
        categoryPlot9.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot9.drawBackgroundImage(graphics2D16, rectangle2D17);
        org.jfree.chart.plot.Plot plot19 = categoryPlot9.getRootPlot();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot9);
        java.lang.String str21 = categoryPlot0.getNoDataMessage();
        categoryPlot0.setBackgroundAlpha((float) 1);
        categoryPlot0.configureDomainAxes();
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(plot19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test200() throws Throwable {
printRuntimeMSG("---RegressionTest2:test200");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test200");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint11 = lineAndShapeRenderer2.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        lineAndShapeRenderer2.setDrawOutlines(true);
        org.jfree.chart.axis.AxisLocation axisLocation14 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator15 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        boolean boolean16 = axisLocation14.equals((java.lang.Object) standardCategorySeriesLabelGenerator15);
        lineAndShapeRenderer2.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator15);
        int int18 = lineAndShapeRenderer2.getDefaultEntityRadius();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation21 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation22 = axisLocation21.getOpposite();
        categoryPlot19.setDomainAxisLocation(axisLocation22, false);
        boolean boolean25 = categoryPlot19.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean30 = lineAndShapeRenderer28.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean31 = lineAndShapeRenderer28.getBaseLinesVisible();
        lineAndShapeRenderer28.setAutoPopulateSeriesPaint(false);
        java.awt.Color color35 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer28.setSeriesPaint(2, (java.awt.Paint) color35);
        categoryPlot19.setRangeZeroBaselinePaint((java.awt.Paint) color35);
        categoryPlot19.clearDomainAxes();
        boolean boolean39 = lineAndShapeRenderer2.hasListener((java.util.EventListener) categoryPlot19);
        org.jfree.chart.axis.AxisLocation axisLocation41 = categoryPlot19.getRangeAxisLocation((int) (short) 1);
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(axisLocation14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNotNull(axisLocation21);
        org.junit.Assert.assertNotNull(axisLocation22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(axisLocation41);
    }

    @Test
    public void test201() throws Throwable {
printRuntimeMSG("---RegressionTest2:test201");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test201");
        java.awt.Color color1 = java.awt.Color.getColor("java.awt.Color[r=192,g=192,b=192]");
        org.junit.Assert.assertNull(color1);
    }

    @Test
    public void test202() throws Throwable {
printRuntimeMSG("---RegressionTest2:test202");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test202");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint9 = lineAndShapeRenderer2.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator21 = lineAndShapeRenderer20.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator22 = null;
        lineAndShapeRenderer20.setBaseToolTipGenerator(categoryToolTipGenerator22);
        java.awt.Font font25 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer20.setSeriesItemLabelFont((int) (short) 0, font25, true);
        lineAndShapeRenderer14.setBaseLegendTextFont(font25);
        lineAndShapeRenderer2.setSeriesItemLabelFont(255, font25, true);
        java.lang.Object obj31 = lineAndShapeRenderer2.clone();
        lineAndShapeRenderer2.setBaseCreateEntities(true);
        java.lang.Boolean boolean35 = lineAndShapeRenderer2.getSeriesShapesFilled(175);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator21);
        org.junit.Assert.assertNotNull(font25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNull(boolean35);
    }

    @Test
    public void test203() throws Throwable {
printRuntimeMSG("---RegressionTest2:test203");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test203");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        boolean boolean14 = categoryAxis11.isVisible();
        org.jfree.chart.util.RectangleInsets rectangleInsets15 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double16 = rectangleInsets15.getRight();
        java.awt.Color color17 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        boolean boolean18 = rectangleInsets15.equals((java.lang.Object) color17);
        categoryAxis11.setLabelInsets(rectangleInsets15, false);
        double double21 = rectangleInsets15.getLeft();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(rectangleInsets15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 4.0d + "'", double16 == 4.0d);
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 4.0d + "'", double21 == 4.0d);
    }

    @Test
    public void test204() throws Throwable {
printRuntimeMSG("---RegressionTest2:test204");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test204");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Color color9 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer2.setSeriesPaint(2, (java.awt.Paint) color9);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer13.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator15 = null;
        lineAndShapeRenderer13.setBaseToolTipGenerator(categoryToolTipGenerator15);
        java.awt.Font font18 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer13.setSeriesItemLabelFont((int) (short) 0, font18, true);
        lineAndShapeRenderer2.setBaseLegendTextFont(font18);
        java.awt.Font font22 = lineAndShapeRenderer2.getBaseItemLabelFont();
        lineAndShapeRenderer2.setAutoPopulateSeriesFillPaint(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator25 = null;
        lineAndShapeRenderer2.setBaseItemLabelGenerator(categoryItemLabelGenerator25, false);
        lineAndShapeRenderer2.setSeriesShapesVisible(192, false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNotNull(font18);
        org.junit.Assert.assertNotNull(font22);
    }

    @Test
    public void test205() throws Throwable {
printRuntimeMSG("---RegressionTest2:test205");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test205");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        java.awt.Color color42 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem43 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape18, (java.awt.Paint) color42);
        legendItem1.setLabelPaint((java.awt.Paint) color42);
        java.awt.Font font45 = legendItem1.getLabelFont();
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(color42);
        org.junit.Assert.assertNull(font45);
    }

    @Test
    public void test206() throws Throwable {
printRuntimeMSG("---RegressionTest2:test206");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test206");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        java.awt.Shape shape50 = null;
        java.awt.Color color51 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke52 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color53 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem54 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape50, (java.awt.Paint) color51, stroke52, (java.awt.Paint) color53);
        java.awt.Paint paint55 = legendItem54.getFillPaint();
        java.awt.Font font56 = legendItem54.getLabelFont();
        legendItem54.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer59 = legendItem54.getFillPaintTransformer();
        boolean boolean60 = plotEntity33.equals((java.lang.Object) legendItem54);
        java.awt.Color color62 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem63 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color62);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer64 = legendItem63.getFillPaintTransformer();
        legendItem54.setFillPaintTransformer(gradientPaintTransformer64);
        java.text.AttributedString attributedString66 = legendItem54.getAttributedLabel();
        boolean boolean67 = legendItem54.isShapeVisible();
        boolean boolean68 = legendItem54.isShapeVisible();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNotNull(stroke52);
        org.junit.Assert.assertNotNull(color53);
        org.junit.Assert.assertNotNull(paint55);
        org.junit.Assert.assertNull(font56);
        org.junit.Assert.assertNotNull(gradientPaintTransformer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(color62);
        org.junit.Assert.assertNotNull(gradientPaintTransformer64);
        org.junit.Assert.assertNull(attributedString66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test207() throws Throwable {
printRuntimeMSG("---RegressionTest2:test207");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test207");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getRangeAxisLocation((-12566464));
        org.jfree.chart.util.RectangleInsets rectangleInsets7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str8 = rectangleInsets7.toString();
        double double9 = rectangleInsets7.getTop();
        categoryPlot0.setAxisOffset(rectangleInsets7);
        categoryPlot0.mapDatasetToDomainAxis((int) (byte) 1, (-65536));
        double double14 = categoryPlot0.getAnchorValue();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        lineAndShapeRenderer18.setAutoPopulateSeriesPaint(false);
        boolean boolean24 = lineAndShapeRenderer18.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator25 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer18.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator25);
        categoryPlot0.setRenderer(128, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer18);
        lineAndShapeRenderer18.removeAnnotations();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(rectangleInsets7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str8.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 2.0d + "'", double9 == 2.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test208() throws Throwable {
printRuntimeMSG("---RegressionTest2:test208");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test208");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        org.jfree.chart.renderer.category.BarPainter barPainter11 = barRenderer0.getBarPainter();
        org.jfree.chart.LegendItem legendItem14 = barRenderer0.getLegendItem((int) (byte) 1, 8);
        boolean boolean15 = barRenderer0.getShadowsVisible();
        boolean boolean16 = barRenderer0.getShadowsVisible();
        barRenderer0.setSeriesVisible(0, (java.lang.Boolean) true, true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(barPainter11);
        org.junit.Assert.assertNull(legendItem14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test209() throws Throwable {
printRuntimeMSG("---RegressionTest2:test209");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test209");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.awt.color.ColorSpace colorSpace4 = color2.getColorSpace();
        keyedObjects2D0.addObject((java.lang.Object) colorSpace4, (java.lang.Comparable) (-4.0d), (java.lang.Comparable) (-4.0d));
        org.jfree.chart.plot.CategoryPlot categoryPlot8 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke9 = categoryPlot8.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer10 = null;
        categoryPlot8.setRenderer(categoryItemRenderer10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot8);
        categoryPlot8.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D15 = null;
        java.awt.geom.Rectangle2D rectangle2D16 = null;
        categoryPlot8.drawBackgroundImage(graphics2D15, rectangle2D16);
        org.jfree.chart.plot.Plot plot18 = categoryPlot8.getRootPlot();
        boolean boolean19 = keyedObjects2D0.equals((java.lang.Object) plot18);
        java.awt.Shape shape24 = null;
        java.awt.Color color25 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color27 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem28 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape24, (java.awt.Paint) color25, stroke26, (java.awt.Paint) color27);
        java.awt.Paint paint29 = legendItem28.getLabelPaint();
        java.lang.String str30 = legendItem28.getURLText();
        java.awt.Shape shape31 = legendItem28.getShape();
        boolean boolean32 = legendItem28.isShapeOutlineVisible();
        legendItem28.setDatasetIndex((int) '4');
        keyedObjects2D0.addObject((java.lang.Object) '4', (java.lang.Comparable) 4.0d, (java.lang.Comparable) (short) 0);
        int int39 = keyedObjects2D0.getColumnIndex((java.lang.Comparable) "PlotEntity: tooltip = null");
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertNotNull(plot18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNull(paint29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str30.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNull(shape31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test210() throws Throwable {
printRuntimeMSG("---RegressionTest2:test210");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test210");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        lineAndShapeRenderer2.setUseSeriesOffset(true);
        boolean boolean13 = lineAndShapeRenderer2.isSeriesVisibleInLegend((int) (byte) 1);
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke15 = categoryPlot14.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer16 = null;
        categoryPlot14.setRenderer(categoryItemRenderer16);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent18 = null;
        categoryPlot14.datasetChanged(datasetChangeEvent18);
        boolean boolean20 = lineAndShapeRenderer2.equals((java.lang.Object) datasetChangeEvent18);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(stroke15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test211() throws Throwable {
printRuntimeMSG("---RegressionTest2:test211");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test211");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        categoryAxis0.setLowerMargin((double) (short) 0);
        categoryAxis0.clearCategoryLabelToolTips();
        java.awt.Paint paint6 = categoryAxis0.getAxisLinePaint();
        boolean boolean7 = categoryAxis0.isTickMarksVisible();
        org.jfree.chart.util.RectangleInsets rectangleInsets8 = categoryAxis0.getLabelInsets();
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D12 = rectangleInsets8.createInsetRectangle(rectangle2D9, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(rectangleInsets8);
    }

    @Test
    public void test212() throws Throwable {
printRuntimeMSG("---RegressionTest2:test212");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test212");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation4 = categoryPlot0.getOrientation();
        org.jfree.chart.axis.AxisSpace axisSpace5 = null;
        categoryPlot0.setFixedDomainAxisSpace(axisSpace5);
        org.jfree.chart.axis.ValueAxis valueAxis7 = categoryPlot0.getRangeAxis();
        int int8 = categoryPlot0.getRendererCount();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plotOrientation4);
        org.junit.Assert.assertNull(valueAxis7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test213() throws Throwable {
printRuntimeMSG("---RegressionTest2:test213");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test213");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        boolean boolean11 = categoryPlot0.isRangeCrosshairVisible();
        boolean boolean12 = categoryPlot0.isRangePannable();
        float float13 = categoryPlot0.getForegroundAlpha();
        org.jfree.chart.axis.ValueAxis valueAxis14 = categoryPlot0.getRangeAxis();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNull(valueAxis14);
    }

    @Test
    public void test214() throws Throwable {
printRuntimeMSG("---RegressionTest2:test214");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test214");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font3 = categoryAxis0.getTickLabelFont();
        float float4 = categoryAxis0.getMaximumCategoryLabelWidthRatio();
        double double5 = categoryAxis0.getLabelAngle();
        categoryAxis0.addCategoryLabelToolTip((java.lang.Comparable) "AxisLocation.BOTTOM_OR_RIGHT", "ItemLabelAnchor.INSIDE5");
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test215() throws Throwable {
printRuntimeMSG("---RegressionTest2:test215");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test215");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo13, point2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo19 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState20 = null;
        boolean boolean21 = categoryPlot0.render(graphics2D16, rectangle2D17, (int) (byte) 100, plotRenderingInfo19, categoryCrosshairState20);
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator22 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float23 = defaultShadowGenerator22.getShadowOpacity();
        java.awt.Color color24 = defaultShadowGenerator22.getShadowColor();
        int int25 = defaultShadowGenerator22.getShadowSize();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator29 = lineAndShapeRenderer28.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator33 = lineAndShapeRenderer28.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer28.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer28.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint40 = lineAndShapeRenderer28.getSeriesItemLabelPaint((int) (byte) -1);
        boolean boolean41 = defaultShadowGenerator22.equals((java.lang.Object) lineAndShapeRenderer28);
        categoryPlot0.setShadowGenerator((org.jfree.chart.util.ShadowGenerator) defaultShadowGenerator22);
        float float43 = defaultShadowGenerator22.getShadowOpacity();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.5f + "'", float23 == 0.5f);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNull(categoryItemLabelGenerator29);
        org.junit.Assert.assertNull(categoryToolTipGenerator33);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNull(paint40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.5f + "'", float43 == 0.5f);
    }

    @Test
    public void test216() throws Throwable {
printRuntimeMSG("---RegressionTest2:test216");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test216");
        org.jfree.chart.renderer.category.BarRenderer barRenderer1 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint2 = barRenderer1.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo6 = null;
        java.awt.geom.Point2D point2D7 = null;
        categoryPlot3.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo6, point2D7);
        categoryPlot3.clearAnnotations();
        boolean boolean10 = barRenderer1.equals((java.lang.Object) categoryPlot3);
        java.awt.Paint paint11 = barRenderer1.getShadowPaint();
        org.jfree.chart.renderer.category.BarPainter barPainter12 = barRenderer1.getBarPainter();
        java.lang.Boolean boolean14 = barRenderer1.getSeriesVisibleInLegend(100);
        java.awt.Color color15 = java.awt.Color.GRAY;
        int int16 = color15.getRGB();
        barRenderer1.setShadowPaint((java.awt.Paint) color15);
        org.jfree.chart.LegendItem legendItem18 = new org.jfree.chart.LegendItem("TextAnchor.HALF_ASCENT_LEFT", (java.awt.Paint) color15);
        java.awt.Paint paint19 = legendItem18.getLabelPaint();
        org.junit.Assert.assertNotNull(paint2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(barPainter12);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(color15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-8355712) + "'", int16 == (-8355712));
        org.junit.Assert.assertNull(paint19);
    }

    @Test
    public void test217() throws Throwable {
printRuntimeMSG("---RegressionTest2:test217");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test217");
        org.jfree.chart.util.RectangleInsets rectangleInsets4 = new org.jfree.chart.util.RectangleInsets((double) 1, (double) (byte) 100, (double) 100, 1.0d);
        double double6 = rectangleInsets4.calculateTopOutset(0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test218() throws Throwable {
printRuntimeMSG("---RegressionTest2:test218");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test218");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        categoryAxis0.setFixedDimension((double) 1);
        java.awt.Font font5 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_FONT;
        categoryAxis0.setTickLabelFont((java.lang.Comparable) (-12566464), font5);
        java.awt.Stroke stroke7 = categoryAxis0.getTickMarkStroke();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNotNull(font5);
        org.junit.Assert.assertNotNull(stroke7);
    }

    @Test
    public void test219() throws Throwable {
printRuntimeMSG("---RegressionTest2:test219");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test219");
        java.awt.Shape shape0 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        categoryPlot1.setParent((org.jfree.chart.plot.Plot) categoryPlot3);
        org.jfree.chart.LegendItemCollection legendItemCollection6 = categoryPlot1.getFixedLegendItems();
        java.lang.Comparable comparable7 = categoryPlot1.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge8 = categoryPlot1.getRangeAxisEdge();
        categoryPlot1.setRangeZeroBaselineVisible(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer12 = categoryPlot1.getRenderer((int) (byte) -1);
        org.jfree.chart.entity.PlotEntity plotEntity13 = new org.jfree.chart.entity.PlotEntity(shape0, (org.jfree.chart.plot.Plot) categoryPlot1);
        org.jfree.chart.util.ShadowGenerator shadowGenerator14 = null;
        categoryPlot1.setShadowGenerator(shadowGenerator14);
        categoryPlot1.setCrosshairDatasetIndex((int) (byte) 10);
        org.junit.Assert.assertNotNull(shape0);
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNull(legendItemCollection6);
        org.junit.Assert.assertNull(comparable7);
        org.junit.Assert.assertNotNull(rectangleEdge8);
        org.junit.Assert.assertNull(categoryItemRenderer12);
    }

    @Test
    public void test220() throws Throwable {
printRuntimeMSG("---RegressionTest2:test220");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test220");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Paint paint7 = lineAndShapeRenderer2.lookupSeriesOutlinePaint((int) (byte) 1);
        java.awt.Font font8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer2.setBaseLegendTextFont(font8);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(4, categoryItemLabelGenerator11, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertNotNull(font8);
    }

    @Test
    public void test221() throws Throwable {
printRuntimeMSG("---RegressionTest2:test221");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test221");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.axis.CategoryAxis categoryAxis5 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis5.setMinorTickMarkOutsideLength((float) (short) 0);
        java.awt.Font font8 = categoryAxis5.getTickLabelFont();
        renderAttributes0.setDefaultLabelFont(font8);
        renderAttributes0.setDefaultCreateEntity((java.lang.Boolean) true);
        renderAttributes0.setDefaultCreateEntity((java.lang.Boolean) true);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNotNull(font8);
    }

    @Test
    public void test222() throws Throwable {
printRuntimeMSG("---RegressionTest2:test222");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test222");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent12 = null;
        lineAndShapeRenderer2.notifyListeners(rendererChangeEvent12);
        lineAndShapeRenderer2.setUseOutlinePaint(true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test223() throws Throwable {
printRuntimeMSG("---RegressionTest2:test223");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test223");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset52 = new org.jfree.data.category.AbstractCategoryDataset();
        org.jfree.data.general.DatasetGroup datasetGroup53 = new org.jfree.data.general.DatasetGroup();
        abstractCategoryDataset52.setGroup(datasetGroup53);
        defaultCategoryDataset47.setGroup(datasetGroup53);
        org.jfree.chart.plot.CategoryPlot categoryPlot56 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke57 = categoryPlot56.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot58 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke59 = categoryPlot58.getRangeMinorGridlineStroke();
        categoryPlot56.setParent((org.jfree.chart.plot.Plot) categoryPlot58);
        org.jfree.chart.LegendItemCollection legendItemCollection61 = categoryPlot56.getFixedLegendItems();
        java.lang.Comparable comparable62 = categoryPlot56.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge63 = categoryPlot56.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent64 = null;
        categoryPlot56.notifyListeners(plotChangeEvent64);
        org.jfree.chart.axis.CategoryAxis categoryAxis66 = null;
        java.util.List list67 = categoryPlot56.getCategoriesForAxis(categoryAxis66);
        org.jfree.chart.axis.ValueAxis valueAxis69 = categoryPlot56.getRangeAxis(1);
        categoryPlot56.setDomainCrosshairRowKey((java.lang.Comparable) "SortOrder.ASCENDING", true);
        org.jfree.chart.axis.AxisSpace axisSpace73 = null;
        categoryPlot56.setFixedRangeAxisSpace(axisSpace73);
        org.jfree.chart.util.Layer layer75 = null;
        java.util.Collection collection76 = categoryPlot56.getDomainMarkers(layer75);
        boolean boolean77 = defaultCategoryDataset47.hasListener((java.util.EventListener) categoryPlot56);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(stroke57);
        org.junit.Assert.assertNotNull(stroke59);
        org.junit.Assert.assertNull(legendItemCollection61);
        org.junit.Assert.assertNull(comparable62);
        org.junit.Assert.assertNotNull(rectangleEdge63);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNull(valueAxis69);
        org.junit.Assert.assertNull(collection76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test224() throws Throwable {
printRuntimeMSG("---RegressionTest2:test224");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test224");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setLabelToolTip("hi!");
        double double18 = categoryAxis0.getCategoryMargin();
        java.lang.String str19 = categoryAxis0.getLabelToolTip();
        categoryAxis0.setMaximumCategoryLabelLines((-16777216));
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!" + "'", str19.equals("hi!"));
    }

    @Test
    public void test225() throws Throwable {
printRuntimeMSG("---RegressionTest2:test225");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test225");
        java.util.Locale locale1 = null;
        try {
            java.util.ResourceBundle resourceBundle2 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("PlotEntity: tooltip = ItemLabelAnchor.OUTSIDE9", locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test226() throws Throwable {
printRuntimeMSG("---RegressionTest2:test226");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test226");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        lineAndShapeRenderer2.setBaseLinesVisible(true);
        int int7 = lineAndShapeRenderer2.getPassCount();
        java.awt.Paint paint9 = lineAndShapeRenderer2.getSeriesItemLabelPaint(1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNull(paint9);
    }

    @Test
    public void test227() throws Throwable {
printRuntimeMSG("---RegressionTest2:test227");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test227");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        categoryAxis0.setLowerMargin((double) (short) 0);
        categoryAxis0.clearCategoryLabelToolTips();
        java.awt.Paint paint6 = categoryAxis0.getAxisLinePaint();
        boolean boolean7 = categoryAxis0.isTickMarksVisible();
        org.jfree.chart.util.RectangleInsets rectangleInsets8 = categoryAxis0.getLabelInsets();
        org.jfree.chart.util.StrokeList strokeList9 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        java.awt.Paint paint15 = lineAndShapeRenderer12.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator17 = lineAndShapeRenderer12.getSeriesURLGenerator(0);
        boolean boolean18 = strokeList9.equals((java.lang.Object) categoryURLGenerator17);
        java.awt.Stroke stroke20 = strokeList9.getStroke((-12566464));
        strokeList9.clear();
        org.jfree.chart.plot.CategoryPlot categoryPlot23 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke24 = categoryPlot23.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke26 = categoryPlot25.getRangeMinorGridlineStroke();
        categoryPlot23.setParent((org.jfree.chart.plot.Plot) categoryPlot25);
        org.jfree.chart.LegendItemCollection legendItemCollection28 = categoryPlot23.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent29 = null;
        categoryPlot23.axisChanged(axisChangeEvent29);
        org.jfree.chart.axis.AxisSpace axisSpace31 = categoryPlot23.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset32 = null;
        categoryPlot23.setDataset(categoryDataset32);
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot23.setDomainCrosshairStroke(stroke34);
        java.awt.Stroke stroke36 = categoryPlot23.getRangeGridlineStroke();
        strokeList9.setStroke((int) '#', stroke36);
        categoryAxis0.setTickMarkStroke(stroke36);
        org.junit.Assert.assertNotNull(paint6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(rectangleInsets8);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertNull(categoryURLGenerator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(stroke20);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNull(legendItemCollection28);
        org.junit.Assert.assertNull(axisSpace31);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke36);
    }

    @Test
    public void test228() throws Throwable {
printRuntimeMSG("---RegressionTest2:test228");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test228");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        java.lang.Boolean boolean16 = barRenderer0.getSeriesCreateEntities(0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator24 = lineAndShapeRenderer19.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer19.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint28 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer19.setBaseOutlinePaint(paint28);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer19.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer0.setNegativeItemLabelPositionFallback(itemLabelPosition33);
        boolean boolean35 = barRenderer0.getIncludeBaseInRange();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer36 = barRenderer0.getGradientPaintTransformer();
        barRenderer0.setMinimumBarLength((double) 1L);
        barRenderer0.setItemLabelAnchorOffset((double) 10.0f);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNull(categoryToolTipGenerator24);
        org.junit.Assert.assertNotNull(paint28);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(gradientPaintTransformer36);
    }

    @Test
    public void test229() throws Throwable {
printRuntimeMSG("---RegressionTest2:test229");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test229");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        barRenderer0.setBaseSeriesVisibleInLegend(true);
        java.awt.Font font15 = barRenderer0.getLegendTextFont(128);
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent16 = null;
        barRenderer0.notifyListeners(rendererChangeEvent16);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNull(font15);
    }

    @Test
    public void test230() throws Throwable {
printRuntimeMSG("---RegressionTest2:test230");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test230");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo13, point2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo19 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState20 = null;
        boolean boolean21 = categoryPlot0.render(graphics2D16, rectangle2D17, (int) (byte) 100, plotRenderingInfo19, categoryCrosshairState20);
        int int22 = categoryPlot0.getRendererCount();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test231() throws Throwable {
printRuntimeMSG("---RegressionTest2:test231");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test231");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis0.setMinorTickMarkOutsideLength((float) (short) 0);
        categoryAxis0.setLowerMargin((double) (short) 0);
        categoryAxis0.setCategoryMargin((double) 'a');
    }

    @Test
    public void test232() throws Throwable {
printRuntimeMSG("---RegressionTest2:test232");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test232");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent14 = null;
        categoryPlot0.annotationChanged(annotationChangeEvent14);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes27 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean33 = lineAndShapeRenderer31.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean34 = lineAndShapeRenderer31.getBaseLinesVisible();
        java.awt.Shape shape35 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer31.setBaseLegendShape(shape35);
        renderAttributes27.setSeriesShape((int) ' ', shape35);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape35, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color42 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem43 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color42);
        java.lang.String str44 = legendItem43.getToolTipText();
        java.awt.Stroke stroke45 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem43.setOutlineStroke(stroke45);
        java.awt.Shape shape51 = null;
        java.awt.Color color52 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color54 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape51, (java.awt.Paint) color52, stroke53, (java.awt.Paint) color54);
        java.lang.Class<?> wildcardClass56 = color52.getClass();
        org.jfree.chart.LegendItem legendItem57 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, paint40, stroke45, (java.awt.Paint) color52);
        lineAndShapeRenderer18.setLegendShape(0, shape35);
        org.jfree.chart.renderer.category.BarRenderer barRenderer59 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint60 = barRenderer59.getShadowPaint();
        lineAndShapeRenderer18.setBasePaint(paint60, true);
        int int63 = categoryPlot0.getIndexOf((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer18);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(shape35);
        org.junit.Assert.assertNotNull(paint40);
        org.junit.Assert.assertNotNull(color42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(color54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(paint60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test233() throws Throwable {
printRuntimeMSG("---RegressionTest2:test233");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test233");
        org.jfree.chart.util.RectangleInsets rectangleInsets4 = new org.jfree.chart.util.RectangleInsets((double) 1, (double) (short) 0, (double) (-12566464), 2.0d);
        double double6 = rectangleInsets4.calculateBottomOutset((double) '4');
        double double8 = rectangleInsets4.calculateRightOutset((double) (short) 0);
        double double9 = rectangleInsets4.getLeft();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.2566464E7d) + "'", double6 == (-1.2566464E7d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.0d + "'", double8 == 2.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test234() throws Throwable {
printRuntimeMSG("---RegressionTest2:test234");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test234");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator23 = lineAndShapeRenderer22.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator24 = null;
        lineAndShapeRenderer22.setBaseToolTipGenerator(categoryToolTipGenerator24);
        java.awt.Paint paint27 = lineAndShapeRenderer22.lookupSeriesOutlinePaint((int) (byte) 1);
        java.awt.Font font28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer22.setBaseLegendTextFont(font28);
        categoryPlot10.setNoDataMessageFont(font28);
        try {
            categoryPlot10.zoom((double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator23);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(font28);
    }

    @Test
    public void test235() throws Throwable {
printRuntimeMSG("---RegressionTest2:test235");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test235");
        java.util.Locale locale1 = null;
        try {
            java.util.ResourceBundle resourceBundle2 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("java.awt.Color[r=192,g=192,b=192]", locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test236() throws Throwable {
printRuntimeMSG("---RegressionTest2:test236");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test236");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearAnnotations();
        java.awt.Image image7 = categoryPlot0.getBackgroundImage();
        float float8 = categoryPlot0.getBackgroundImageAlpha();
        org.jfree.chart.util.RectangleInsets rectangleInsets9 = new org.jfree.chart.util.RectangleInsets();
        double double11 = rectangleInsets9.calculateBottomInset(100.0d);
        boolean boolean12 = categoryPlot0.equals((java.lang.Object) 100.0d);
        org.jfree.chart.axis.AxisLocation axisLocation13 = null;
        try {
            categoryPlot0.setRangeAxisLocation(axisLocation13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'location' for index 0 not permitted.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(image7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.5f + "'", float8 == 0.5f);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test237() throws Throwable {
printRuntimeMSG("---RegressionTest2:test237");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test237");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean8 = lineAndShapeRenderer2.getUseFillPaint();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesItemLabelsVisible(0);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesItemLabelsVisible(255);
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test238() throws Throwable {
printRuntimeMSG("---RegressionTest2:test238");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test238");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer2.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean12 = lineAndShapeRenderer2.getBaseShapesVisible();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-8355712));
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator16 = lineAndShapeRenderer2.getSeriesItemLabelGenerator(2);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition14);
        org.junit.Assert.assertNull(categoryItemLabelGenerator16);
    }

    @Test
    public void test239() throws Throwable {
printRuntimeMSG("---RegressionTest2:test239");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test239");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.imagemap.ToolTipTagFragmentGenerator toolTipTagFragmentGenerator34 = null;
        org.jfree.chart.imagemap.URLTagFragmentGenerator uRLTagFragmentGenerator35 = null;
        java.lang.String str36 = plotEntity33.getImageMapAreaTag(toolTipTagFragmentGenerator34, uRLTagFragmentGenerator35);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "" + "'", str36.equals(""));
    }

    @Test
    public void test240() throws Throwable {
printRuntimeMSG("---RegressionTest2:test240");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test240");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset52 = new org.jfree.data.category.AbstractCategoryDataset();
        org.jfree.data.general.DatasetGroup datasetGroup53 = new org.jfree.data.general.DatasetGroup();
        abstractCategoryDataset52.setGroup(datasetGroup53);
        defaultCategoryDataset47.setGroup(datasetGroup53);
        java.lang.String str56 = datasetGroup53.getID();
        java.lang.String str57 = datasetGroup53.getID();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "NOID" + "'", str56.equals("NOID"));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "NOID" + "'", str57.equals("NOID"));
    }

    @Test
    public void test241() throws Throwable {
printRuntimeMSG("---RegressionTest2:test241");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test241");
        java.awt.Color color1 = java.awt.Color.getColor("ItemLabelAnchor.OUTSIDE9");
        org.junit.Assert.assertNull(color1);
    }

    @Test
    public void test242() throws Throwable {
printRuntimeMSG("---RegressionTest2:test242");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test242");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        org.jfree.chart.text.TextAnchor textAnchor9 = itemLabelPosition8.getRotationAnchor();
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor10 = itemLabelPosition8.getItemLabelAnchor();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertNotNull(textAnchor9);
        org.junit.Assert.assertNotNull(itemLabelAnchor10);
    }

    @Test
    public void test243() throws Throwable {
printRuntimeMSG("---RegressionTest2:test243");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test243");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.util.SortOrder sortOrder7 = categoryPlot0.getRowRenderingOrder();
        java.lang.String str8 = sortOrder7.toString();
        java.lang.String str9 = sortOrder7.toString();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "SortOrder.ASCENDING" + "'", str8.equals("SortOrder.ASCENDING"));
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "SortOrder.ASCENDING" + "'", str9.equals("SortOrder.ASCENDING"));
    }

    @Test
    public void test244() throws Throwable {
printRuntimeMSG("---RegressionTest2:test244");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test244");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo6 = null;
        java.awt.geom.Point2D point2D7 = null;
        categoryPlot0.panRangeAxes((double) 192, plotRenderingInfo6, point2D7);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo11 = null;
        try {
            categoryPlot0.handleClick(175, (int) (byte) 1, plotRenderingInfo11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
    }

    @Test
    public void test245() throws Throwable {
printRuntimeMSG("---RegressionTest2:test245");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test245");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.awt.Font font10 = lineAndShapeRenderer2.getSeriesItemLabelFont((int) (short) 1);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator11 = null;
        lineAndShapeRenderer2.setBaseURLGenerator(categoryURLGenerator11, false);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer2.getNegativeItemLabelPosition((int) (short) 100, (-1), false);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition21 = lineAndShapeRenderer2.getPositiveItemLabelPosition((int) (byte) -1, (int) (short) -1, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertNotNull(itemLabelPosition21);
    }

    @Test
    public void test246() throws Throwable {
printRuntimeMSG("---RegressionTest2:test246");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test246");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        org.jfree.chart.renderer.RenderAttributes renderAttributes15 = barRenderer0.getSelectedItemAttributes();
        java.awt.Stroke stroke16 = barRenderer0.getBaseOutlineStroke();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(renderAttributes15);
        org.junit.Assert.assertNotNull(stroke16);
    }

    @Test
    public void test247() throws Throwable {
printRuntimeMSG("---RegressionTest2:test247");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test247");
        java.lang.Number number0 = null;
        org.jfree.data.SelectableValue selectableValue2 = new org.jfree.data.SelectableValue(number0, true);
        boolean boolean3 = selectableValue2.isSelected();
        boolean boolean4 = selectableValue2.isSelected();
        java.lang.Number number5 = selectableValue2.getValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(number5);
    }

    @Test
    public void test248() throws Throwable {
printRuntimeMSG("---RegressionTest2:test248");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test248");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        org.jfree.chart.entity.ChartEntity chartEntity14 = new org.jfree.chart.entity.ChartEntity(shape11, "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", "AxisLocation.BOTTOM_OR_RIGHT");
        java.lang.Object obj15 = chartEntity14.clone();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test249() throws Throwable {
printRuntimeMSG("---RegressionTest2:test249");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test249");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.lang.Object obj6 = lineAndShapeRenderer2.clone();
        boolean boolean7 = lineAndShapeRenderer2.getAutoPopulateSeriesStroke();
        boolean boolean11 = lineAndShapeRenderer2.getItemCreateEntity((int) '#', 0, true);
        java.awt.Paint paint12 = lineAndShapeRenderer2.getBaseItemLabelPaint();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(paint12);
    }

    @Test
    public void test250() throws Throwable {
printRuntimeMSG("---RegressionTest2:test250");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test250");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        categoryPlot10.setRangeCrosshairValue(0.0d);
        org.jfree.chart.axis.ValueAxis valueAxis22 = null;
        try {
            int int23 = categoryPlot10.getRangeAxisIndex(valueAxis22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'axis' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test251() throws Throwable {
printRuntimeMSG("---RegressionTest2:test251");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test251");
        java.awt.Color color1 = java.awt.Color.BLACK;
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator5 = new org.jfree.chart.util.DefaultShadowGenerator(3, color1, 1.0f, 100, 56.0d);
        int int6 = defaultShadowGenerator5.getShadowSize();
        float float7 = defaultShadowGenerator5.getShadowOpacity();
        float float8 = defaultShadowGenerator5.getShadowOpacity();
        org.junit.Assert.assertNotNull(color1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
    }

    @Test
    public void test252() throws Throwable {
printRuntimeMSG("---RegressionTest2:test252");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test252");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        java.awt.Stroke stroke10 = lineAndShapeRenderer2.getSeriesOutlineStroke(192);
        java.awt.Font font12 = lineAndShapeRenderer2.getLegendTextFont((int) (short) 1);
        java.lang.Boolean boolean14 = lineAndShapeRenderer2.getSeriesVisibleInLegend((int) '#');
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertNull(stroke10);
        org.junit.Assert.assertNull(font12);
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test253() throws Throwable {
printRuntimeMSG("---RegressionTest2:test253");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test253");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = null;
        lineAndShapeRenderer10.setSeriesPositiveItemLabelPosition(0, itemLabelPosition12);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator14 = null;
        lineAndShapeRenderer10.setLegendItemToolTipGenerator(categorySeriesLabelGenerator14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        boolean boolean17 = lineAndShapeRenderer10.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition18 = lineAndShapeRenderer10.getBasePositiveItemLabelPosition();
        java.lang.Object obj19 = lineAndShapeRenderer10.clone();
        categoryPlot0.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer10, true);
        lineAndShapeRenderer10.clearSeriesPaints(false);
        org.jfree.chart.renderer.RenderAttributes renderAttributes24 = lineAndShapeRenderer10.getSelectedItemAttributes();
        boolean boolean25 = lineAndShapeRenderer10.getUseSeriesOffset();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(renderAttributes24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test254() throws Throwable {
printRuntimeMSG("---RegressionTest2:test254");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test254");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint3 = renderAttributes0.getItemOutlinePaint(1, (int) 'a');
        java.awt.Shape shape5 = renderAttributes0.getSeriesShape((int) (short) 0);
        java.awt.Paint paint7 = renderAttributes0.getSeriesPaint((int) ' ');
        java.awt.Shape shape8 = renderAttributes0.getDefaultShape();
        org.junit.Assert.assertNull(paint3);
        org.junit.Assert.assertNull(shape5);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNull(shape8);
    }

    @Test
    public void test255() throws Throwable {
printRuntimeMSG("---RegressionTest2:test255");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test255");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setMaximumBarWidth((double) 0L);
        java.awt.Font font15 = barRenderer0.getSeriesItemLabelFont((-8355712));
        java.awt.Stroke stroke17 = barRenderer0.lookupSeriesOutlineStroke((int) (byte) 10);
        barRenderer0.setShadowYOffset(0.0d);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        barRenderer0.setSeriesToolTipGenerator(100, categoryToolTipGenerator21);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNull(font15);
        org.junit.Assert.assertNotNull(stroke17);
    }

    @Test
    public void test256() throws Throwable {
printRuntimeMSG("---RegressionTest2:test256");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test256");
        java.awt.Color color0 = java.awt.Color.magenta;
        org.junit.Assert.assertNotNull(color0);
    }

    @Test
    public void test257() throws Throwable {
printRuntimeMSG("---RegressionTest2:test257");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test257");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent5 = null;
        categoryPlot2.annotationChanged(annotationChangeEvent5);
        categoryPlot2.setCrosshairDatasetIndex((int) (byte) -1, false);
        org.jfree.chart.util.SortOrder sortOrder10 = org.jfree.chart.util.SortOrder.ASCENDING;
        categoryPlot2.setColumnRenderingOrder(sortOrder10);
        org.jfree.chart.axis.AxisSpace axisSpace12 = null;
        categoryPlot2.setFixedRangeAxisSpace(axisSpace12);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(sortOrder10);
    }

    @Test
    public void test258() throws Throwable {
printRuntimeMSG("---RegressionTest2:test258");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test258");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.data.category.CategoryDataset categoryDataset8 = null;
        int int9 = categoryPlot0.indexOf(categoryDataset8);
        categoryPlot0.clearRangeAxes();
        int int11 = categoryPlot0.getDomainAxisCount();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test259() throws Throwable {
printRuntimeMSG("---RegressionTest2:test259");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test259");
        org.jfree.chart.renderer.RenderAttributes renderAttributes1 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Shape shape4 = renderAttributes1.getItemShape((int) '4', (int) (byte) 100);
        java.awt.Stroke stroke7 = renderAttributes1.getItemStroke(2, (-12566464));
        java.awt.Stroke stroke8 = renderAttributes1.getDefaultOutlineStroke();
        org.junit.Assert.assertNull(shape4);
        org.junit.Assert.assertNull(stroke7);
        org.junit.Assert.assertNull(stroke8);
    }

    @Test
    public void test260() throws Throwable {
printRuntimeMSG("---RegressionTest2:test260");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test260");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.util.List list1 = keyedObjects2D0.getColumnKeys();
        org.jfree.chart.renderer.category.BarRenderer barRenderer2 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint3 = barRenderer2.getShadowPaint();
        boolean boolean4 = barRenderer2.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Paint paint9 = renderAttributes5.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke10 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes5.setDefaultStroke(stroke10);
        barRenderer2.setBaseStroke(stroke10, true);
        boolean boolean14 = keyedObjects2D0.equals((java.lang.Object) stroke10);
        try {
            java.lang.Object obj17 = keyedObjects2D0.getObject((-739), 175);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test261() throws Throwable {
printRuntimeMSG("---RegressionTest2:test261");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test261");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getLegendItems();
        try {
            org.jfree.chart.LegendItem legendItem7 = legendItemCollection5.get(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(legendItemCollection5);
    }

    @Test
    public void test262() throws Throwable {
printRuntimeMSG("---RegressionTest2:test262");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test262");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        categoryAxis0.setFixedDimension((double) 1);
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        categoryAxis0.setAxisLineStroke(stroke26);
        org.jfree.chart.util.RectangleInsets rectangleInsets40 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str41 = rectangleInsets40.toString();
        double double42 = rectangleInsets40.getTop();
        double double44 = rectangleInsets40.calculateTopOutset((double) ' ');
        double double46 = rectangleInsets40.trimWidth((double) (short) -1);
        categoryAxis0.setLabelInsets(rectangleInsets40, true);
        boolean boolean49 = categoryAxis0.isVisible();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(rectangleInsets40);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str41.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2.0d + "'", double42 == 2.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.0d + "'", double44 == 2.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-9.0d) + "'", double46 == (-9.0d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test263() throws Throwable {
printRuntimeMSG("---RegressionTest2:test263");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test263");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        int int1 = defaultCategoryDataset0.getRowCount();
        try {
            defaultCategoryDataset0.removeRow(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test264() throws Throwable {
printRuntimeMSG("---RegressionTest2:test264");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test264");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        int int5 = categoryPlot0.getRendererCount();
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        java.awt.geom.Point2D point2D11 = null;
        categoryPlot7.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo10, point2D11);
        org.jfree.chart.plot.PlotOrientation plotOrientation13 = categoryPlot7.getOrientation();
        categoryPlot7.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        java.awt.Paint paint16 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray17 = new java.awt.Paint[] { paint16 };
        java.awt.Color color18 = java.awt.Color.BLUE;
        java.awt.Color color19 = java.awt.Color.RED;
        java.awt.Paint paint20 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray21 = new java.awt.Paint[] { color18, color19, paint20 };
        java.awt.Color color22 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel23 = null;
        java.awt.Rectangle rectangle24 = null;
        java.awt.geom.Rectangle2D rectangle2D25 = null;
        java.awt.geom.AffineTransform affineTransform26 = null;
        java.awt.RenderingHints renderingHints27 = null;
        java.awt.PaintContext paintContext28 = color22.createContext(colorModel23, rectangle24, rectangle2D25, affineTransform26, renderingHints27);
        java.awt.Color color29 = java.awt.Color.WHITE;
        java.awt.Color color30 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel31 = null;
        java.awt.Rectangle rectangle32 = null;
        java.awt.geom.Rectangle2D rectangle2D33 = null;
        java.awt.geom.AffineTransform affineTransform34 = null;
        java.awt.RenderingHints renderingHints35 = null;
        java.awt.PaintContext paintContext36 = color30.createContext(colorModel31, rectangle32, rectangle2D33, affineTransform34, renderingHints35);
        java.awt.Color color37 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray38 = new java.awt.Paint[] { color22, color29, color30, color37 };
        java.awt.Stroke stroke39 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke40 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke41 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke42 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke43 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray44 = new java.awt.Stroke[] { stroke39, stroke40, stroke41, stroke42, stroke43 };
        java.awt.Stroke stroke45 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke46 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot47 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke48 = categoryPlot47.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray49 = new java.awt.Stroke[] { stroke45, stroke46, stroke48 };
        java.awt.Shape shape50 = null;
        java.awt.Shape[] shapeArray51 = new java.awt.Shape[] { shape50 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier52 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray17, paintArray21, paintArray38, strokeArray44, strokeArray49, shapeArray51);
        java.awt.Shape shape53 = defaultDrawingSupplier52.getNextShape();
        java.awt.Stroke stroke54 = defaultDrawingSupplier52.getNextOutlineStroke();
        java.awt.Stroke stroke55 = defaultDrawingSupplier52.getNextOutlineStroke();
        categoryPlot7.setRangeCrosshairStroke(stroke55);
        java.awt.Stroke stroke57 = categoryPlot7.getRangeCrosshairStroke();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo59 = null;
        java.awt.geom.Point2D point2D60 = null;
        categoryPlot7.zoomRangeAxes((double) (short) -1, plotRenderingInfo59, point2D60, true);
        org.jfree.chart.axis.AxisLocation axisLocation64 = categoryPlot7.getDomainAxisLocation((int) (short) 10);
        categoryPlot0.setDomainAxisLocation(1, axisLocation64, true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(plotOrientation13);
        org.junit.Assert.assertNotNull(paint16);
        org.junit.Assert.assertNotNull(paintArray17);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(paintArray21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(paintContext28);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(paintContext36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(paintArray38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(strokeArray44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(stroke46);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(strokeArray49);
        org.junit.Assert.assertNotNull(shapeArray51);
        org.junit.Assert.assertNull(shape53);
        org.junit.Assert.assertNotNull(stroke54);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertNotNull(stroke57);
        org.junit.Assert.assertNotNull(axisLocation64);
    }

    @Test
    public void test265() throws Throwable {
printRuntimeMSG("---RegressionTest2:test265");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test265");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double1 = rectangleInsets0.getRight();
        double double3 = rectangleInsets0.calculateTopInset(0.0d);
        double double5 = rectangleInsets0.calculateLeftOutset(0.0d);
        double double7 = rectangleInsets0.calculateTopOutset((double) 0L);
        java.lang.String str8 = rectangleInsets0.toString();
        double double9 = rectangleInsets0.getRight();
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2.0d + "'", double3 == 2.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.0d + "'", double5 == 4.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str8.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 4.0d + "'", double9 == 4.0d);
    }

    @Test
    public void test266() throws Throwable {
printRuntimeMSG("---RegressionTest2:test266");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test266");
        java.text.AttributedString attributedString0 = null;
        org.jfree.chart.renderer.RenderAttributes renderAttributes4 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint5 = renderAttributes4.getDefaultLabelPaint();
        java.awt.Paint paint8 = renderAttributes4.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes14 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer18 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean20 = lineAndShapeRenderer18.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean21 = lineAndShapeRenderer18.getBaseLinesVisible();
        java.awt.Shape shape22 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer18.setBaseLegendShape(shape22);
        renderAttributes14.setSeriesShape((int) ' ', shape22);
        org.jfree.chart.entity.ChartEntity chartEntity26 = new org.jfree.chart.entity.ChartEntity(shape22, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color29 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem30 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color29);
        java.lang.String str31 = legendItem30.getToolTipText();
        java.awt.Stroke stroke32 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem30.setOutlineStroke(stroke32);
        java.awt.Shape shape38 = null;
        java.awt.Color color39 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color41 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape38, (java.awt.Paint) color39, stroke40, (java.awt.Paint) color41);
        java.lang.Class<?> wildcardClass43 = color39.getClass();
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape22, paint27, stroke32, (java.awt.Paint) color39);
        org.jfree.chart.entity.ChartEntity chartEntity45 = new org.jfree.chart.entity.ChartEntity(shape22);
        renderAttributes4.setSeriesShape(1, shape22);
        org.jfree.chart.plot.CategoryPlot categoryPlot47 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke48 = categoryPlot47.getRangeMinorGridlineStroke();
        boolean boolean49 = categoryPlot47.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity52 = new org.jfree.chart.entity.PlotEntity(shape22, (org.jfree.chart.plot.Plot) categoryPlot47, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        java.awt.Color color53 = java.awt.Color.RED;
        java.awt.Color color54 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color55 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace56 = color55.getColorSpace();
        float[] floatArray63 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray64 = color54.getColorComponents(colorSpace56, floatArray63);
        float[] floatArray65 = color53.getComponents(floatArray64);
        org.jfree.chart.plot.CategoryPlot categoryPlot66 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke67 = categoryPlot66.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer68 = null;
        categoryPlot66.setRenderer(categoryItemRenderer68);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent70 = null;
        categoryPlot66.datasetChanged(datasetChangeEvent70);
        org.jfree.data.category.CategoryDataset categoryDataset73 = categoryPlot66.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis74 = new org.jfree.chart.axis.CategoryAxis();
        double double75 = categoryAxis74.getUpperMargin();
        int int76 = categoryPlot66.getDomainAxisIndex(categoryAxis74);
        java.awt.Stroke stroke77 = categoryAxis74.getAxisLineStroke();
        java.awt.Paint paint78 = null;
        try {
            org.jfree.chart.LegendItem legendItem79 = new org.jfree.chart.LegendItem(attributedString0, "", "ItemLabelAnchor.INSIDE4", "TextAnchor.BASELINE_RIGHT", shape22, (java.awt.Paint) color53, stroke77, paint78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'label' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(paint5);
        org.junit.Assert.assertNull(paint8);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(shape22);
        org.junit.Assert.assertNotNull(paint27);
        org.junit.Assert.assertNotNull(color29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(color53);
        org.junit.Assert.assertNotNull(color54);
        org.junit.Assert.assertNotNull(color55);
        org.junit.Assert.assertNotNull(colorSpace56);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertNotNull(stroke67);
        org.junit.Assert.assertNull(categoryDataset73);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.05d + "'", double75 == 0.05d);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(stroke77);
    }

    @Test
    public void test267() throws Throwable {
printRuntimeMSG("---RegressionTest2:test267");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test267");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        barRenderer0.setBaseSeriesVisibleInLegend(true);
        java.awt.Font font15 = barRenderer0.getLegendTextFont(128);
        barRenderer0.setBaseItemLabelsVisible(true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNull(font15);
    }

    @Test
    public void test268() throws Throwable {
printRuntimeMSG("---RegressionTest2:test268");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test268");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.data.category.CategoryDataset categoryDataset8 = null;
        int int9 = categoryPlot0.indexOf(categoryDataset8);
        java.awt.Stroke stroke10 = categoryPlot0.getRangeGridlineStroke();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean16 = lineAndShapeRenderer13.getBaseLinesVisible();
        lineAndShapeRenderer13.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer13.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot21 = lineAndShapeRenderer13.getPlot();
        java.awt.Paint paint23 = lineAndShapeRenderer13.getLegendTextPaint(1);
        categoryPlot0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer13);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(categoryPlot21);
        org.junit.Assert.assertNull(paint23);
    }

    @Test
    public void test269() throws Throwable {
printRuntimeMSG("---RegressionTest2:test269");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test269");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis10.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis13 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator17 = lineAndShapeRenderer16.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot(categoryDataset9, categoryAxis10, valueAxis13, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer16);
        boolean boolean19 = categoryAxis10.isTickLabelsVisible();
        double double20 = categoryAxis10.getFixedDimension();
        java.awt.Paint paint22 = categoryAxis10.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis8.setTickLabelPaint(paint22);
        categoryAxis8.setTickMarkInsideLength((float) (-1L));
        categoryAxis8.setMinorTickMarkInsideLength((float) (-12566464));
        categoryPlot0.setDomainAxis(192, categoryAxis8, true);
        categoryPlot0.clearRangeMarkers();
        org.jfree.data.category.CategoryDataset categoryDataset32 = categoryPlot0.getDataset((int) (byte) 10);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNull(categoryItemLabelGenerator17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(paint22);
        org.junit.Assert.assertNull(categoryDataset32);
    }

    @Test
    public void test270() throws Throwable {
printRuntimeMSG("---RegressionTest2:test270");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test270");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        barRenderer0.setMaximumBarWidth(0.0d);
        boolean boolean16 = barRenderer0.getIncludeBaseInRange();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition21 = null;
        lineAndShapeRenderer19.setSeriesPositiveItemLabelPosition(0, itemLabelPosition21);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition24 = lineAndShapeRenderer19.getSeriesPositiveItemLabelPosition((-1));
        barRenderer0.setBasePositiveItemLabelPosition(itemLabelPosition24);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition26 = barRenderer0.getNegativeItemLabelPositionFallback();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition24);
        org.junit.Assert.assertNull(itemLabelPosition26);
    }

    @Test
    public void test271() throws Throwable {
printRuntimeMSG("---RegressionTest2:test271");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test271");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        boolean boolean13 = lineAndShapeRenderer2.getBaseSeriesVisible();
        java.awt.Paint paint15 = lineAndShapeRenderer2.getSeriesFillPaint(10);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(paint15);
    }

    @Test
    public void test272() throws Throwable {
printRuntimeMSG("---RegressionTest2:test272");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test272");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        java.awt.image.BufferedImage bufferedImage2 = null;
        try {
            java.awt.image.BufferedImage bufferedImage3 = defaultShadowGenerator0.createDropShadow(bufferedImage2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
    }

    @Test
    public void test273() throws Throwable {
printRuntimeMSG("---RegressionTest2:test273");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test273");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        java.lang.Comparable comparable9 = categoryPlot0.getDomainCrosshairRowKey();
        java.awt.Paint paint10 = categoryPlot0.getRangeGridlinePaint();
        org.jfree.chart.axis.CategoryAnchor categoryAnchor11 = categoryPlot0.getDomainGridlinePosition();
        org.jfree.chart.renderer.RenderAttributes renderAttributes16 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean22 = lineAndShapeRenderer20.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean23 = lineAndShapeRenderer20.getBaseLinesVisible();
        java.awt.Shape shape24 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer20.setBaseLegendShape(shape24);
        renderAttributes16.setSeriesShape((int) ' ', shape24);
        org.jfree.chart.entity.ChartEntity chartEntity28 = new org.jfree.chart.entity.ChartEntity(shape24, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color31 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem32 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color31);
        java.lang.String str33 = legendItem32.getToolTipText();
        java.awt.Stroke stroke34 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem32.setOutlineStroke(stroke34);
        java.awt.Shape shape40 = null;
        java.awt.Color color41 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke42 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color43 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape40, (java.awt.Paint) color41, stroke42, (java.awt.Paint) color43);
        java.lang.Class<?> wildcardClass45 = color41.getClass();
        org.jfree.chart.LegendItem legendItem46 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape24, paint29, stroke34, (java.awt.Paint) color41);
        java.awt.Color color47 = color41.brighter();
        categoryPlot0.setDomainGridlinePaint((java.awt.Paint) color47);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNull(comparable9);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(categoryAnchor11);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shape24);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(color47);
    }

    @Test
    public void test274() throws Throwable {
printRuntimeMSG("---RegressionTest2:test274");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test274");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        java.lang.String str16 = categoryAxis0.getLabelURL();
        categoryAxis0.setLabelAngle(0.05d);
        categoryAxis0.setUpperMargin(0.0d);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test275() throws Throwable {
printRuntimeMSG("---RegressionTest2:test275");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test275");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        java.lang.String str11 = legendItem8.getLabel();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
    }

    @Test
    public void test276() throws Throwable {
printRuntimeMSG("---RegressionTest2:test276");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test276");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesFilled((int) (short) 1);
        lineAndShapeRenderer2.setSeriesShapesFilled(128, false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
    }

    @Test
    public void test277() throws Throwable {
printRuntimeMSG("---RegressionTest2:test277");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test277");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo6 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState7 = null;
        boolean boolean8 = categoryPlot0.render(graphics2D3, rectangle2D4, (int) (short) 10, plotRenderingInfo6, categoryCrosshairState7);
        org.jfree.chart.plot.Marker marker9 = null;
        boolean boolean10 = categoryPlot0.removeDomainMarker(marker9);
        org.jfree.chart.util.Layer layer12 = null;
        java.util.Collection collection13 = categoryPlot0.getDomainMarkers(200, layer12);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(collection13);
    }

    @Test
    public void test278() throws Throwable {
printRuntimeMSG("---RegressionTest2:test278");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test278");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesFilled((int) (short) 1);
        java.awt.Paint paint11 = lineAndShapeRenderer2.getBaseOutlinePaint();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(paint11);
    }

    @Test
    public void test279() throws Throwable {
printRuntimeMSG("---RegressionTest2:test279");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test279");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setMaximumCategoryLabelWidthRatio((float) 100);
        double double18 = categoryAxis0.getFixedDimension();
        java.awt.Font font19 = categoryAxis0.getLabelFont();
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(font19);
    }

    @Test
    public void test280() throws Throwable {
printRuntimeMSG("---RegressionTest2:test280");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test280");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesShapesVisible((int) 'a');
        lineAndShapeRenderer2.setSeriesVisibleInLegend(2, (java.lang.Boolean) false, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test281() throws Throwable {
printRuntimeMSG("---RegressionTest2:test281");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test281");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.util.SortOrder sortOrder7 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent8 = null;
        categoryPlot0.rendererChanged(rendererChangeEvent8);
        int int10 = categoryPlot0.getDomainAxisCount();
        categoryPlot0.clearRangeMarkers(2);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test282() throws Throwable {
printRuntimeMSG("---RegressionTest2:test282");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test282");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        java.lang.Class<?> wildcardClass16 = categoryAxis6.getClass();
        categoryAxis6.setMinorTickMarkInsideLength(0.0f);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test283() throws Throwable {
printRuntimeMSG("---RegressionTest2:test283");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test283");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        java.awt.Paint paint5 = lineAndShapeRenderer2.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = lineAndShapeRenderer2.getSeriesURLGenerator(0);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator8 = lineAndShapeRenderer2.getLegendItemURLGenerator();
        java.awt.Stroke stroke9 = lineAndShapeRenderer2.getBaseOutlineStroke();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNull(categoryURLGenerator7);
        org.junit.Assert.assertNull(categorySeriesLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke9);
    }

    @Test
    public void test284() throws Throwable {
printRuntimeMSG("---RegressionTest2:test284");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test284");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        categoryPlot11.setParent((org.jfree.chart.plot.Plot) categoryPlot13);
        org.jfree.chart.plot.Plot plot16 = categoryPlot11.getParent();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer19.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint29 = lineAndShapeRenderer19.getBaseItemLabelPaint();
        categoryPlot11.setRangeMinorGridlinePaint(paint29);
        lineAndShapeRenderer2.removeChangeListener((org.jfree.chart.event.RendererChangeListener) categoryPlot11);
        java.awt.Stroke stroke35 = lineAndShapeRenderer2.getItemOutlineStroke((int) 'a', 192, true);
        org.jfree.chart.plot.CategoryPlot categoryPlot36 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke37 = categoryPlot36.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis38 = null;
        categoryPlot36.setRangeAxis(valueAxis38);
        boolean boolean40 = categoryPlot36.isDomainGridlinesVisible();
        boolean boolean41 = lineAndShapeRenderer2.hasListener((java.util.EventListener) categoryPlot36);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(plot16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test285() throws Throwable {
printRuntimeMSG("---RegressionTest2:test285");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test285");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        boolean boolean11 = defaultCategoryDataset0.equals((java.lang.Object) false);
        defaultCategoryDataset0.setValue((double) 100L, (java.lang.Comparable) 0.2d, (java.lang.Comparable) "Category Plot");
        defaultCategoryDataset0.setValue(10.0d, (java.lang.Comparable) "PlotEntity: tooltip = ItemLabelAnchor.OUTSIDE9", (java.lang.Comparable) (-1.2566464E7d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test286() throws Throwable {
printRuntimeMSG("---RegressionTest2:test286");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test286");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        boolean boolean9 = categoryPlot0.getDrawSharedDomainAxis();
        org.jfree.chart.util.SortOrder sortOrder10 = null;
        try {
            categoryPlot0.setColumnRenderingOrder(sortOrder10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'order' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test287() throws Throwable {
printRuntimeMSG("---RegressionTest2:test287");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test287");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        boolean boolean9 = lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        java.lang.Object obj11 = lineAndShapeRenderer2.clone();
        double double12 = lineAndShapeRenderer2.getItemMargin();
        java.awt.Shape shape13 = lineAndShapeRenderer2.getBaseShape();
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(shape13);
    }

    @Test
    public void test288() throws Throwable {
printRuntimeMSG("---RegressionTest2:test288");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test288");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.data.category.CategoryDataset categoryDataset8 = null;
        int int9 = categoryPlot0.indexOf(categoryDataset8);
        java.awt.Stroke stroke10 = categoryPlot0.getRangeGridlineStroke();
        double double11 = categoryPlot0.getRangeCrosshairValue();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test289() throws Throwable {
printRuntimeMSG("---RegressionTest2:test289");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test289");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setDomainCrosshairRowKey((java.lang.Comparable) 4, true);
        org.jfree.chart.plot.Marker marker6 = null;
        org.jfree.chart.util.Layer layer7 = null;
        boolean boolean8 = categoryPlot0.removeDomainMarker(2, marker6, layer7);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test290() throws Throwable {
printRuntimeMSG("---RegressionTest2:test290");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test290");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        barRenderer0.setShadowXOffset((double) (-16777216));
        int int9 = barRenderer0.getDefaultEntityRadius();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test291() throws Throwable {
printRuntimeMSG("---RegressionTest2:test291");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test291");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        org.jfree.chart.renderer.RenderAttributes renderAttributes12 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean18 = lineAndShapeRenderer16.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean19 = lineAndShapeRenderer16.getBaseLinesVisible();
        java.awt.Shape shape20 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer16.setBaseLegendShape(shape20);
        renderAttributes12.setSeriesShape((int) ' ', shape20);
        org.jfree.chart.entity.ChartEntity chartEntity24 = new org.jfree.chart.entity.ChartEntity(shape20, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint25 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color27 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem28 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color27);
        java.lang.String str29 = legendItem28.getToolTipText();
        java.awt.Stroke stroke30 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem28.setOutlineStroke(stroke30);
        java.awt.Shape shape36 = null;
        java.awt.Color color37 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color39 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape36, (java.awt.Paint) color37, stroke38, (java.awt.Paint) color39);
        java.lang.Class<?> wildcardClass41 = color37.getClass();
        org.jfree.chart.LegendItem legendItem42 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape20, paint25, stroke30, (java.awt.Paint) color37);
        org.jfree.chart.entity.ChartEntity chartEntity43 = new org.jfree.chart.entity.ChartEntity(shape20);
        java.awt.Color color44 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem45 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape20, (java.awt.Paint) color44);
        legendItem3.setLabelPaint((java.awt.Paint) color44);
        barRenderer0.setBaseLegendTextPaint((java.awt.Paint) color44);
        double double48 = barRenderer0.getMinimumBarLength();
        java.awt.Paint paint52 = barRenderer0.getItemOutlinePaint(5, (int) (short) -1, true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(shape20);
        org.junit.Assert.assertNotNull(paint25);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(paint52);
    }

    @Test
    public void test292() throws Throwable {
printRuntimeMSG("---RegressionTest2:test292");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test292");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        categoryPlot1.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation5 = categoryPlot1.getOrientation();
        keyedObjects2D0.setObject((java.lang.Object) plotOrientation5, (java.lang.Comparable) "TextAnchor.BOTTOM_LEFT", (java.lang.Comparable) 4.0d);
        int int9 = keyedObjects2D0.getRowCount();
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(plotOrientation5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test293() throws Throwable {
printRuntimeMSG("---RegressionTest2:test293");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test293");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.trimHeight((double) 100);
        double double5 = rectangleInsets0.getRight();
        java.awt.geom.Rectangle2D rectangle2D6 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D9 = rectangleInsets0.createOutsetRectangle(rectangle2D6, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 96.0d + "'", double4 == 96.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.0d + "'", double5 == 4.0d);
    }

    @Test
    public void test294() throws Throwable {
printRuntimeMSG("---RegressionTest2:test294");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test294");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) '4');
        java.lang.String str52 = categoryItemEntity47.getShapeType();
        org.jfree.chart.plot.CategoryPlot categoryPlot53 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke54 = categoryPlot53.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer55 = null;
        categoryPlot53.setRenderer(categoryItemRenderer55);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent57 = null;
        categoryPlot53.datasetChanged(datasetChangeEvent57);
        org.jfree.data.category.CategoryDataset categoryDataset60 = categoryPlot53.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis61 = new org.jfree.chart.axis.CategoryAxis();
        double double62 = categoryAxis61.getUpperMargin();
        int int63 = categoryPlot53.getDomainAxisIndex(categoryAxis61);
        java.awt.Paint paint64 = categoryAxis61.getLabelPaint();
        int int65 = categoryAxis61.getCategoryLabelPositionOffset();
        boolean boolean66 = categoryItemEntity47.equals((java.lang.Object) categoryAxis61);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "poly" + "'", str52.equals("poly"));
        org.junit.Assert.assertNotNull(stroke54);
        org.junit.Assert.assertNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.05d + "'", double62 == 0.05d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(paint64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test295() throws Throwable {
printRuntimeMSG("---RegressionTest2:test295");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test295");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.lang.String str10 = legendItem8.getURLText();
        java.awt.Paint paint11 = legendItem8.getOutlinePaint();
        java.awt.Paint paint12 = legendItem8.getFillPaint();
        java.awt.Stroke stroke13 = legendItem8.getOutlineStroke();
        java.awt.Font font14 = legendItem8.getLabelFont();
        boolean boolean15 = legendItem8.isLineVisible();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str10.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNotNull(paint12);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(font14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test296() throws Throwable {
printRuntimeMSG("---RegressionTest2:test296");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test296");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent12 = null;
        lineAndShapeRenderer2.notifyListeners(rendererChangeEvent12);
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = lineAndShapeRenderer2.getPlot();
        lineAndShapeRenderer2.setBaseLinesVisible(false);
        lineAndShapeRenderer2.setDefaultEntityRadius((int) (byte) 0);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(categoryPlot14);
    }

    @Test
    public void test297() throws Throwable {
printRuntimeMSG("---RegressionTest2:test297");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test297");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        categoryPlot0.drawBackgroundImage(graphics2D3, rectangle2D4);
        categoryPlot0.clearAnnotations();
        categoryPlot0.configureDomainAxes();
        java.awt.Stroke stroke8 = categoryPlot0.getRangeGridlineStroke();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(stroke8);
    }

    @Test
    public void test298() throws Throwable {
printRuntimeMSG("---RegressionTest2:test298");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test298");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        java.lang.String str10 = categoryAxis1.getLabelToolTip();
        categoryAxis1.setTickMarkOutsideLength(0.0f);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test299() throws Throwable {
printRuntimeMSG("---RegressionTest2:test299");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test299");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        int int2 = keyedObjects2D0.getRowIndex((java.lang.Comparable) true);
        java.util.List list3 = keyedObjects2D0.getColumnKeys();
        java.lang.Object obj4 = null;
        boolean boolean5 = keyedObjects2D0.equals(obj4);
        org.jfree.data.UnknownKeyException unknownKeyException7 = new org.jfree.data.UnknownKeyException("TextAnchor.HALF_ASCENT_LEFT");
        java.lang.Throwable[] throwableArray8 = unknownKeyException7.getSuppressed();
        java.lang.String str9 = unknownKeyException7.toString();
        java.lang.Throwable[] throwableArray10 = unknownKeyException7.getSuppressed();
        keyedObjects2D0.setObject((java.lang.Object) unknownKeyException7, (java.lang.Comparable) "Category Plot", (java.lang.Comparable) "PlotOrientation.VERTICAL");
        java.lang.String str14 = unknownKeyException7.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str9.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str14.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
    }

    @Test
    public void test300() throws Throwable {
printRuntimeMSG("---RegressionTest2:test300");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test300");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.INSIDE4;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean5 = lineAndShapeRenderer3.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean6 = lineAndShapeRenderer3.getBaseLinesVisible();
        lineAndShapeRenderer3.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer3.getBasePositiveItemLabelPosition();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        categoryPlot17.setParent((org.jfree.chart.plot.Plot) categoryPlot19);
        org.jfree.chart.LegendItemCollection legendItemCollection22 = categoryPlot17.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent23 = null;
        categoryPlot17.axisChanged(axisChangeEvent23);
        org.jfree.chart.axis.AxisSpace axisSpace25 = categoryPlot17.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset26 = null;
        categoryPlot17.setDataset(categoryDataset26);
        java.awt.Stroke stroke28 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot17.setDomainCrosshairStroke(stroke28);
        java.awt.Stroke stroke30 = categoryPlot17.getRangeGridlineStroke();
        lineAndShapeRenderer14.setBaseStroke(stroke30);
        lineAndShapeRenderer3.setBaseStroke(stroke30, false);
        lineAndShapeRenderer3.setAutoPopulateSeriesOutlinePaint(false);
        boolean boolean36 = itemLabelAnchor0.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(paint10);
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNull(legendItemCollection22);
        org.junit.Assert.assertNull(axisSpace25);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test301() throws Throwable {
printRuntimeMSG("---RegressionTest2:test301");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test301");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.chart.util.ShadowGenerator shadowGenerator9 = null;
        categoryPlot0.setShadowGenerator(shadowGenerator9);
        org.jfree.chart.renderer.RenderAttributes renderAttributes19 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean25 = lineAndShapeRenderer23.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean26 = lineAndShapeRenderer23.getBaseLinesVisible();
        java.awt.Shape shape27 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer23.setBaseLegendShape(shape27);
        renderAttributes19.setSeriesShape((int) ' ', shape27);
        org.jfree.chart.entity.ChartEntity chartEntity31 = new org.jfree.chart.entity.ChartEntity(shape27, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color34 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem35 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color34);
        java.lang.String str36 = legendItem35.getToolTipText();
        java.awt.Stroke stroke37 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem35.setOutlineStroke(stroke37);
        java.awt.Shape shape43 = null;
        java.awt.Color color44 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke45 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color46 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape43, (java.awt.Paint) color44, stroke45, (java.awt.Paint) color46);
        java.lang.Class<?> wildcardClass48 = color44.getClass();
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape27, paint32, stroke37, (java.awt.Paint) color44);
        org.jfree.chart.entity.ChartEntity chartEntity50 = new org.jfree.chart.entity.ChartEntity(shape27);
        java.awt.Color color51 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem52 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape27, (java.awt.Paint) color51);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset55 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity58 = new org.jfree.chart.entity.CategoryItemEntity(shape27, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset55, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset55.addValue((java.lang.Number) (-1), (java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", (java.lang.Comparable) "SortOrder.ASCENDING");
        defaultCategoryDataset55.clearSelection();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer64 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset55);
        java.lang.Object obj65 = defaultCategoryDataset55.clone();
        try {
            defaultCategoryDataset55.setSelected(4, (-8355712), true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(shape27);
        org.junit.Assert.assertNotNull(paint32);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNull(categoryItemRenderer64);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test302() throws Throwable {
printRuntimeMSG("---RegressionTest2:test302");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test302");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent12 = null;
        lineAndShapeRenderer2.notifyListeners(rendererChangeEvent12);
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = lineAndShapeRenderer2.getPlot();
        lineAndShapeRenderer2.setBaseShapesVisible(false);
        java.awt.Font font17 = lineAndShapeRenderer2.getBaseLegendTextFont();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNull(categoryPlot14);
        org.junit.Assert.assertNull(font17);
    }

    @Test
    public void test303() throws Throwable {
printRuntimeMSG("---RegressionTest2:test303");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test303");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        int int1 = defaultShadowGenerator0.getDistance();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
    }

    @Test
    public void test304() throws Throwable {
printRuntimeMSG("---RegressionTest2:test304");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test304");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = null;
        lineAndShapeRenderer14.setSeriesPositiveItemLabelPosition(0, itemLabelPosition16);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer14.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean20 = lineAndShapeRenderer14.getUseFillPaint();
        java.lang.Boolean boolean22 = lineAndShapeRenderer14.getSeriesItemLabelsVisible(0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean26 = lineAndShapeRenderer25.getUseOutlinePaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean31 = lineAndShapeRenderer29.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition35 = lineAndShapeRenderer29.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        lineAndShapeRenderer25.setBasePositiveItemLabelPosition(itemLabelPosition35);
        lineAndShapeRenderer14.setBaseNegativeItemLabelPosition(itemLabelPosition35);
        org.jfree.chart.text.TextAnchor textAnchor38 = itemLabelPosition35.getTextAnchor();
        lineAndShapeRenderer2.setSeriesNegativeItemLabelPosition(2, itemLabelPosition35);
        java.awt.Stroke stroke41 = lineAndShapeRenderer2.lookupSeriesStroke(8);
        java.awt.Graphics2D graphics2D42 = null;
        java.awt.geom.Rectangle2D rectangle2D43 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis44 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis44.setMinorTickMarkOutsideLength((float) (short) 0);
        categoryAxis44.setLabel("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        org.jfree.chart.axis.ValueAxis valueAxis49 = null;
        org.jfree.chart.util.Layer layer50 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo51 = null;
        try {
            lineAndShapeRenderer2.drawAnnotations(graphics2D42, rectangle2D43, categoryAxis44, valueAxis49, layer50, plotRenderingInfo51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(itemLabelPosition35);
        org.junit.Assert.assertNotNull(textAnchor38);
        org.junit.Assert.assertNotNull(stroke41);
    }

    @Test
    public void test305() throws Throwable {
printRuntimeMSG("---RegressionTest2:test305");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test305");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        java.awt.Paint paint12 = lineAndShapeRenderer2.getLegendTextPaint(1);
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        boolean boolean17 = categoryPlot15.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D18 = null;
        java.awt.geom.Rectangle2D rectangle2D19 = null;
        categoryPlot15.drawBackgroundImage(graphics2D18, rectangle2D19);
        java.awt.Graphics2D graphics2D21 = null;
        java.awt.geom.Rectangle2D rectangle2D22 = null;
        categoryPlot15.drawBackgroundImage(graphics2D21, rectangle2D22);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset24 = new org.jfree.data.category.DefaultCategoryDataset();
        int int25 = defaultCategoryDataset24.getRowCount();
        org.jfree.data.category.CategoryDatasetSelectionState categoryDatasetSelectionState26 = null;
        defaultCategoryDataset24.setSelectionState(categoryDatasetSelectionState26);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState29 = lineAndShapeRenderer2.initialise(graphics2D13, rectangle2D14, categoryPlot15, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset24, plotRenderingInfo28);
        lineAndShapeRenderer2.setBaseCreateEntities(true, false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(categoryItemRendererState29);
    }

    @Test
    public void test306() throws Throwable {
printRuntimeMSG("---RegressionTest2:test306");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test306");
        org.jfree.chart.util.DefaultShadowGenerator defaultShadowGenerator0 = new org.jfree.chart.util.DefaultShadowGenerator();
        float float1 = defaultShadowGenerator0.getShadowOpacity();
        java.awt.Color color2 = defaultShadowGenerator0.getShadowColor();
        int int3 = defaultShadowGenerator0.getShadowSize();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator7 = lineAndShapeRenderer6.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator11 = lineAndShapeRenderer6.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer6.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer6.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint18 = lineAndShapeRenderer6.getSeriesItemLabelPaint((int) (byte) -1);
        boolean boolean19 = defaultShadowGenerator0.equals((java.lang.Object) lineAndShapeRenderer6);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator23 = lineAndShapeRenderer6.getToolTipGenerator((int) (byte) -1, 0, false);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.5f + "'", float1 == 0.5f);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNull(categoryItemLabelGenerator7);
        org.junit.Assert.assertNull(categoryToolTipGenerator11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(paint18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(categoryToolTipGenerator23);
    }

    @Test
    public void test307() throws Throwable {
printRuntimeMSG("---RegressionTest2:test307");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test307");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        int int27 = keyedObjects0.getItemCount();
        int int29 = keyedObjects0.getIndex((java.lang.Comparable) (short) 1);
        int int30 = keyedObjects0.getItemCount();
        org.jfree.chart.renderer.category.BarRenderer barRenderer31 = new org.jfree.chart.renderer.category.BarRenderer();
        boolean boolean32 = keyedObjects0.equals((java.lang.Object) barRenderer31);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test308() throws Throwable {
printRuntimeMSG("---RegressionTest2:test308");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test308");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, (int) (byte) 1, plotRenderingInfo10, categoryCrosshairState11);
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation15 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation16 = axisLocation15.getOpposite();
        categoryPlot13.setDomainAxisLocation(axisLocation16, false);
        boolean boolean19 = categoryPlot13.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition25 = null;
        lineAndShapeRenderer23.setSeriesPositiveItemLabelPosition(0, itemLabelPosition25);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator27 = null;
        lineAndShapeRenderer23.setLegendItemToolTipGenerator(categorySeriesLabelGenerator27);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition29 = lineAndShapeRenderer23.getBasePositiveItemLabelPosition();
        boolean boolean30 = lineAndShapeRenderer23.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition31 = lineAndShapeRenderer23.getBasePositiveItemLabelPosition();
        java.lang.Object obj32 = lineAndShapeRenderer23.clone();
        categoryPlot13.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer23, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator35 = null;
        lineAndShapeRenderer23.setBaseURLGenerator(categoryURLGenerator35);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset37 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range38 = lineAndShapeRenderer23.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset37);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer39 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset37);
        categoryPlot0.setBackgroundAlpha((float) '#');
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(axisLocation15);
        org.junit.Assert.assertNotNull(axisLocation16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNull(range38);
        org.junit.Assert.assertNull(categoryItemRenderer39);
    }

    @Test
    public void test309() throws Throwable {
printRuntimeMSG("---RegressionTest2:test309");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test309");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickMarkPaint();
        org.junit.Assert.assertNotNull(paint1);
    }

    @Test
    public void test310() throws Throwable {
printRuntimeMSG("---RegressionTest2:test310");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test310");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        java.awt.Paint paint3 = categoryPlot0.getRangeCrosshairPaint();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot0.zoomRangeAxes(0.0d, plotRenderingInfo5, point2D6, false);
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = null;
        categoryPlot9.setRenderer(categoryItemRenderer11);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot9);
        categoryPlot9.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot9.drawBackgroundImage(graphics2D16, rectangle2D17);
        org.jfree.chart.plot.Plot plot19 = categoryPlot9.getRootPlot();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot9);
        boolean boolean21 = categoryPlot0.isRangeZoomable();
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(plot19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test311() throws Throwable {
printRuntimeMSG("---RegressionTest2:test311");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test311");
        org.jfree.data.UnknownKeyException unknownKeyException1 = new org.jfree.data.UnknownKeyException("TextAnchor.HALF_ASCENT_LEFT");
        java.lang.Throwable[] throwableArray2 = unknownKeyException1.getSuppressed();
        java.lang.String str3 = unknownKeyException1.toString();
        java.lang.Throwable[] throwableArray4 = unknownKeyException1.getSuppressed();
        java.lang.Throwable[] throwableArray5 = unknownKeyException1.getSuppressed();
        org.jfree.data.UnknownKeyException unknownKeyException7 = new org.jfree.data.UnknownKeyException("TextAnchor.HALF_ASCENT_LEFT");
        java.lang.Throwable[] throwableArray8 = unknownKeyException7.getSuppressed();
        java.lang.String str9 = unknownKeyException7.toString();
        unknownKeyException1.addSuppressed((java.lang.Throwable) unknownKeyException7);
        java.lang.Throwable[] throwableArray11 = unknownKeyException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str3.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str9.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test312() throws Throwable {
printRuntimeMSG("---RegressionTest2:test312");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test312");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        categoryPlot0.drawBackgroundImage(graphics2D7, rectangle2D8);
        java.awt.Color color10 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        categoryPlot0.setRangeZeroBaselinePaint((java.awt.Paint) color10);
        categoryPlot0.setRangeMinorGridlinesVisible(false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(color10);
    }

    @Test
    public void test313() throws Throwable {
printRuntimeMSG("---RegressionTest2:test313");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test313");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        java.awt.Paint paint9 = categoryPlot0.getRangeGridlinePaint();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertNotNull(paint9);
    }

    @Test
    public void test314() throws Throwable {
printRuntimeMSG("---RegressionTest2:test314");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test314");
        java.awt.Paint[] paintArray0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
        java.awt.Paint[] paintArray1 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE;
        java.awt.Paint[] paintArray2 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE;
        java.awt.Stroke[] strokeArray3 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE;
        java.awt.Stroke[] strokeArray4 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE;
        java.awt.Paint paint5 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray6 = new java.awt.Paint[] { paint5 };
        java.awt.Color color7 = java.awt.Color.BLUE;
        java.awt.Color color8 = java.awt.Color.RED;
        java.awt.Paint paint9 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { color7, color8, paint9 };
        java.awt.Color color11 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel12 = null;
        java.awt.Rectangle rectangle13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        java.awt.geom.AffineTransform affineTransform15 = null;
        java.awt.RenderingHints renderingHints16 = null;
        java.awt.PaintContext paintContext17 = color11.createContext(colorModel12, rectangle13, rectangle2D14, affineTransform15, renderingHints16);
        java.awt.Color color18 = java.awt.Color.WHITE;
        java.awt.Color color19 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel20 = null;
        java.awt.Rectangle rectangle21 = null;
        java.awt.geom.Rectangle2D rectangle2D22 = null;
        java.awt.geom.AffineTransform affineTransform23 = null;
        java.awt.RenderingHints renderingHints24 = null;
        java.awt.PaintContext paintContext25 = color19.createContext(colorModel20, rectangle21, rectangle2D22, affineTransform23, renderingHints24);
        java.awt.Color color26 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray27 = new java.awt.Paint[] { color11, color18, color19, color26 };
        java.awt.Stroke stroke28 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke29 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray33 = new java.awt.Stroke[] { stroke28, stroke29, stroke30, stroke31, stroke32 };
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot36 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke37 = categoryPlot36.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray38 = new java.awt.Stroke[] { stroke34, stroke35, stroke37 };
        java.awt.Shape shape39 = null;
        java.awt.Shape[] shapeArray40 = new java.awt.Shape[] { shape39 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier41 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray6, paintArray10, paintArray27, strokeArray33, strokeArray38, shapeArray40);
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier42 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray0, paintArray1, paintArray2, strokeArray3, strokeArray4, shapeArray40);
        java.awt.Shape shape43 = defaultDrawingSupplier42.getNextShape();
        org.junit.Assert.assertNotNull(paintArray0);
        org.junit.Assert.assertNotNull(paintArray1);
        org.junit.Assert.assertNotNull(paintArray2);
        org.junit.Assert.assertNotNull(strokeArray3);
        org.junit.Assert.assertNotNull(strokeArray4);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNotNull(paintArray6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(paintContext17);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(paintContext25);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(paintArray27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(strokeArray33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(strokeArray38);
        org.junit.Assert.assertNotNull(shapeArray40);
        org.junit.Assert.assertNull(shape43);
    }

    @Test
    public void test315() throws Throwable {
printRuntimeMSG("---RegressionTest2:test315");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test315");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        barRenderer0.setBaseSeriesVisibleInLegend(true);
        double double14 = barRenderer0.getBase();
        boolean boolean15 = barRenderer0.isDrawBarOutline();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test316() throws Throwable {
printRuntimeMSG("---RegressionTest2:test316");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test316");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint2 = categoryAxis1.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets3 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double4 = rectangleInsets3.getRight();
        double double6 = rectangleInsets3.calculateTopInset(0.0d);
        categoryAxis1.setLabelInsets(rectangleInsets3, false);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation12 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation13 = axisLocation12.getOpposite();
        categoryPlot10.setDomainAxisLocation(axisLocation13, false);
        boolean boolean16 = categoryPlot10.canSelectByRegion();
        categoryPlot10.setForegroundAlpha((float) '#');
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition24 = null;
        lineAndShapeRenderer22.setSeriesPositiveItemLabelPosition(0, itemLabelPosition24);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition27 = lineAndShapeRenderer22.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean28 = lineAndShapeRenderer22.getUseFillPaint();
        java.lang.Boolean boolean30 = lineAndShapeRenderer22.getSeriesItemLabelsVisible(0);
        categoryPlot10.setRenderer(3, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer22, false);
        java.lang.Boolean boolean34 = lineAndShapeRenderer22.getSeriesLinesVisible((-1));
        org.jfree.chart.plot.CategoryPlot categoryPlot35 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer22);
        org.jfree.chart.event.AxisChangeListener axisChangeListener36 = null;
        categoryAxis1.addChangeListener(axisChangeListener36);
        org.junit.Assert.assertNotNull(paint2);
        org.junit.Assert.assertNotNull(rectangleInsets3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.0d + "'", double4 == 4.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.0d + "'", double6 == 2.0d);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(axisLocation12);
        org.junit.Assert.assertNotNull(axisLocation13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(boolean34);
    }

    @Test
    public void test317() throws Throwable {
printRuntimeMSG("---RegressionTest2:test317");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test317");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        java.awt.Font font11 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        categoryPlot0.setNoDataMessageFont(font11);
        java.awt.Font font13 = categoryPlot0.getNoDataMessageFont();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo15 = null;
        java.awt.geom.Point2D point2D16 = null;
        categoryPlot0.panRangeAxes((double) (byte) 10, plotRenderingInfo15, point2D16);
        java.awt.Stroke stroke18 = categoryPlot0.getRangeGridlineStroke();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(font11);
        org.junit.Assert.assertNotNull(font13);
        org.junit.Assert.assertNotNull(stroke18);
    }

    @Test
    public void test318() throws Throwable {
printRuntimeMSG("---RegressionTest2:test318");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test318");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.chart.util.RectangleInsets rectangleInsets8 = categoryPlot0.getInsets();
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D10 = rectangleInsets8.createInsetRectangle(rectangle2D9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(rectangleInsets8);
    }

    @Test
    public void test319() throws Throwable {
printRuntimeMSG("---RegressionTest2:test319");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test319");
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor0 = org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE3;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition5 = null;
        lineAndShapeRenderer3.setSeriesPositiveItemLabelPosition(0, itemLabelPosition5);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer3.getSeriesPositiveItemLabelPosition((-1));
        org.jfree.chart.labels.ItemLabelAnchor itemLabelAnchor9 = itemLabelPosition8.getItemLabelAnchor();
        org.jfree.chart.text.TextAnchor textAnchor10 = itemLabelPosition8.getRotationAnchor();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer13.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator18 = lineAndShapeRenderer13.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer13.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint22 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer13.setBaseOutlinePaint(paint22);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition27 = lineAndShapeRenderer13.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        org.jfree.chart.text.TextAnchor textAnchor28 = itemLabelPosition27.getTextAnchor();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition30 = new org.jfree.chart.labels.ItemLabelPosition(itemLabelAnchor0, textAnchor10, textAnchor28, (double) 1);
        org.junit.Assert.assertNotNull(itemLabelAnchor0);
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertNotNull(itemLabelAnchor9);
        org.junit.Assert.assertNotNull(textAnchor10);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNull(categoryToolTipGenerator18);
        org.junit.Assert.assertNotNull(paint22);
        org.junit.Assert.assertNotNull(itemLabelPosition27);
        org.junit.Assert.assertNotNull(textAnchor28);
    }

    @Test
    public void test320() throws Throwable {
printRuntimeMSG("---RegressionTest2:test320");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test320");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo6 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState7 = null;
        boolean boolean8 = categoryPlot0.render(graphics2D3, rectangle2D4, (int) (short) 10, plotRenderingInfo6, categoryCrosshairState7);
        boolean boolean9 = categoryPlot0.isDomainPannable();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test321() throws Throwable {
printRuntimeMSG("---RegressionTest2:test321");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test321");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setForegroundAlpha((float) 100);
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke8 = categoryPlot7.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation9 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation10 = axisLocation9.getOpposite();
        categoryPlot7.setDomainAxisLocation(axisLocation10, false);
        boolean boolean13 = categoryPlot7.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = null;
        lineAndShapeRenderer17.setSeriesPositiveItemLabelPosition(0, itemLabelPosition19);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator21 = null;
        lineAndShapeRenderer17.setLegendItemToolTipGenerator(categorySeriesLabelGenerator21);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition23 = lineAndShapeRenderer17.getBasePositiveItemLabelPosition();
        boolean boolean24 = lineAndShapeRenderer17.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition25 = lineAndShapeRenderer17.getBasePositiveItemLabelPosition();
        java.lang.Object obj26 = lineAndShapeRenderer17.clone();
        categoryPlot7.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer17, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator29 = null;
        lineAndShapeRenderer17.setBaseURLGenerator(categoryURLGenerator29);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset31 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range32 = lineAndShapeRenderer17.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset31);
        java.lang.Object obj33 = defaultCategoryDataset31.clone();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer34 = categoryPlot2.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset31);
        java.lang.String str35 = categoryPlot2.getPlotType();
        java.awt.Color color36 = java.awt.Color.black;
        categoryPlot2.setNoDataMessagePaint((java.awt.Paint) color36);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNotNull(axisLocation9);
        org.junit.Assert.assertNotNull(axisLocation10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(range32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNull(categoryItemRenderer34);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Category Plot" + "'", str35.equals("Category Plot"));
        org.junit.Assert.assertNotNull(color36);
    }

    @Test
    public void test322() throws Throwable {
printRuntimeMSG("---RegressionTest2:test322");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test322");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.axis.AxisLocation axisLocation10 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation11 = axisLocation10.getOpposite();
        categoryPlot0.setDomainAxisLocation((int) (byte) 1, axisLocation10);
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertNotNull(axisLocation10);
        org.junit.Assert.assertNotNull(axisLocation11);
    }

    @Test
    public void test323() throws Throwable {
printRuntimeMSG("---RegressionTest2:test323");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test323");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        lineAndShapeRenderer2.setUseSeriesOffset(true);
        boolean boolean13 = lineAndShapeRenderer2.isSeriesVisibleInLegend((int) (byte) 1);
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test324() throws Throwable {
printRuntimeMSG("---RegressionTest2:test324");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test324");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition15 = null;
        lineAndShapeRenderer13.setSeriesPositiveItemLabelPosition(0, itemLabelPosition15);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator17 = null;
        lineAndShapeRenderer13.setLegendItemToolTipGenerator(categorySeriesLabelGenerator17);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer13.getBasePositiveItemLabelPosition();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition23 = lineAndShapeRenderer13.getNegativeItemLabelPosition((int) (short) -1, (int) (short) -1, false);
        lineAndShapeRenderer2.setBasePositiveItemLabelPosition(itemLabelPosition23);
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke26 = categoryPlot25.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis27 = null;
        categoryPlot25.setRangeAxis(valueAxis27);
        org.jfree.chart.util.RectangleEdge rectangleEdge29 = categoryPlot25.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation31 = categoryPlot25.getRangeAxisLocation((-12566464));
        boolean boolean32 = itemLabelPosition23.equals((java.lang.Object) categoryPlot25);
        org.jfree.chart.axis.AxisSpace axisSpace33 = categoryPlot25.getFixedRangeAxisSpace();
        categoryPlot25.setNotify(true);
        categoryPlot25.setNotify(false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(itemLabelPosition23);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(rectangleEdge29);
        org.junit.Assert.assertNotNull(axisLocation31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(axisSpace33);
    }

    @Test
    public void test325() throws Throwable {
printRuntimeMSG("---RegressionTest2:test325");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test325");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.chart.plot.CategoryPlot categoryPlot42 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke43 = categoryPlot42.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot44 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke45 = categoryPlot44.getRangeMinorGridlineStroke();
        categoryPlot42.setParent((org.jfree.chart.plot.Plot) categoryPlot44);
        org.jfree.chart.LegendItemCollection legendItemCollection47 = categoryPlot42.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent48 = null;
        categoryPlot42.axisChanged(axisChangeEvent48);
        org.jfree.chart.axis.AxisSpace axisSpace50 = categoryPlot42.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset51 = null;
        categoryPlot42.setDataset(categoryDataset51);
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot42.setDomainCrosshairStroke(stroke53);
        org.jfree.chart.entity.PlotEntity plotEntity56 = new org.jfree.chart.entity.PlotEntity(shape16, (org.jfree.chart.plot.Plot) categoryPlot42, "TextAnchor.BOTTOM_LEFT");
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(stroke43);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNull(legendItemCollection47);
        org.junit.Assert.assertNull(axisSpace50);
        org.junit.Assert.assertNotNull(stroke53);
    }

    @Test
    public void test326() throws Throwable {
printRuntimeMSG("---RegressionTest2:test326");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test326");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        java.awt.Font font11 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        categoryPlot0.setNoDataMessageFont(font11);
        java.awt.Font font13 = categoryPlot0.getNoDataMessageFont();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo15 = null;
        java.awt.geom.Point2D point2D16 = null;
        categoryPlot0.panRangeAxes((double) (byte) 10, plotRenderingInfo15, point2D16);
        org.jfree.chart.util.Layer layer19 = null;
        java.util.Collection collection20 = categoryPlot0.getDomainMarkers((int) ' ', layer19);
        org.jfree.chart.plot.Marker marker21 = null;
        boolean boolean22 = categoryPlot0.removeDomainMarker(marker21);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(font11);
        org.junit.Assert.assertNotNull(font13);
        org.junit.Assert.assertNull(collection20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test327() throws Throwable {
printRuntimeMSG("---RegressionTest2:test327");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test327");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        categoryPlot0.drawBackgroundImage(graphics2D3, rectangle2D4);
        categoryPlot0.clearAnnotations();
        categoryPlot0.configureDomainAxes();
        categoryPlot0.configureRangeAxes();
        boolean boolean9 = categoryPlot0.isRangePannable();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test328() throws Throwable {
printRuntimeMSG("---RegressionTest2:test328");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test328");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        java.awt.Paint paint9 = categoryPlot0.getRangeZeroBaselinePaint();
        boolean boolean10 = categoryPlot0.isSubplot();
        org.jfree.chart.event.PlotChangeListener plotChangeListener11 = null;
        categoryPlot0.removeChangeListener(plotChangeListener11);
        categoryPlot0.clearDomainMarkers(0);
        org.jfree.chart.axis.CategoryAxis categoryAxis16 = categoryPlot0.getDomainAxisForDataset(255);
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(categoryAxis16);
    }

    @Test
    public void test329() throws Throwable {
printRuntimeMSG("---RegressionTest2:test329");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test329");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        java.lang.Boolean boolean16 = barRenderer0.getSeriesCreateEntities(0);
        double double17 = barRenderer0.getMaximumBarWidth();
        java.awt.Color color18 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel19 = null;
        java.awt.Rectangle rectangle20 = null;
        java.awt.geom.Rectangle2D rectangle2D21 = null;
        java.awt.geom.AffineTransform affineTransform22 = null;
        java.awt.RenderingHints renderingHints23 = null;
        java.awt.PaintContext paintContext24 = color18.createContext(colorModel19, rectangle20, rectangle2D21, affineTransform22, renderingHints23);
        java.awt.Color color25 = java.awt.Color.RED;
        java.awt.Color color26 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color27 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace28 = color27.getColorSpace();
        float[] floatArray35 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray36 = color26.getColorComponents(colorSpace28, floatArray35);
        float[] floatArray37 = color25.getComponents(floatArray36);
        float[] floatArray38 = color18.getColorComponents(floatArray37);
        barRenderer0.setBasePaint((java.awt.Paint) color18);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator41 = null;
        barRenderer0.setSeriesURLGenerator(0, categoryURLGenerator41);
        double double43 = barRenderer0.getMinimumBarLength();
        java.lang.Boolean boolean45 = barRenderer0.getSeriesCreateEntities(8);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(paintContext24);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(colorSpace28);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNull(boolean45);
    }

    @Test
    public void test330() throws Throwable {
printRuntimeMSG("---RegressionTest2:test330");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test330");
        java.awt.Paint[] paintArray0 = org.jfree.chart.ChartColor.createDefaultPaintArray();
        java.awt.Paint[] paintArray1 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE;
        java.awt.Paint[] paintArray2 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE;
        java.awt.Stroke[] strokeArray3 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE;
        java.awt.Stroke[] strokeArray4 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE;
        java.awt.Paint paint5 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray6 = new java.awt.Paint[] { paint5 };
        java.awt.Color color7 = java.awt.Color.BLUE;
        java.awt.Color color8 = java.awt.Color.RED;
        java.awt.Paint paint9 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray10 = new java.awt.Paint[] { color7, color8, paint9 };
        java.awt.Color color11 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel12 = null;
        java.awt.Rectangle rectangle13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        java.awt.geom.AffineTransform affineTransform15 = null;
        java.awt.RenderingHints renderingHints16 = null;
        java.awt.PaintContext paintContext17 = color11.createContext(colorModel12, rectangle13, rectangle2D14, affineTransform15, renderingHints16);
        java.awt.Color color18 = java.awt.Color.WHITE;
        java.awt.Color color19 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel20 = null;
        java.awt.Rectangle rectangle21 = null;
        java.awt.geom.Rectangle2D rectangle2D22 = null;
        java.awt.geom.AffineTransform affineTransform23 = null;
        java.awt.RenderingHints renderingHints24 = null;
        java.awt.PaintContext paintContext25 = color19.createContext(colorModel20, rectangle21, rectangle2D22, affineTransform23, renderingHints24);
        java.awt.Color color26 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray27 = new java.awt.Paint[] { color11, color18, color19, color26 };
        java.awt.Stroke stroke28 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke29 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray33 = new java.awt.Stroke[] { stroke28, stroke29, stroke30, stroke31, stroke32 };
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot36 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke37 = categoryPlot36.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray38 = new java.awt.Stroke[] { stroke34, stroke35, stroke37 };
        java.awt.Shape shape39 = null;
        java.awt.Shape[] shapeArray40 = new java.awt.Shape[] { shape39 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier41 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray6, paintArray10, paintArray27, strokeArray33, strokeArray38, shapeArray40);
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier42 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray0, paintArray1, paintArray2, strokeArray3, strokeArray4, shapeArray40);
        org.jfree.chart.renderer.RenderAttributes renderAttributes51 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer55 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean57 = lineAndShapeRenderer55.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean58 = lineAndShapeRenderer55.getBaseLinesVisible();
        java.awt.Shape shape59 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer55.setBaseLegendShape(shape59);
        renderAttributes51.setSeriesShape((int) ' ', shape59);
        org.jfree.chart.entity.ChartEntity chartEntity63 = new org.jfree.chart.entity.ChartEntity(shape59, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint64 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color66 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem67 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color66);
        java.lang.String str68 = legendItem67.getToolTipText();
        java.awt.Stroke stroke69 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem67.setOutlineStroke(stroke69);
        java.awt.Shape shape75 = null;
        java.awt.Color color76 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke77 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color78 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem79 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape75, (java.awt.Paint) color76, stroke77, (java.awt.Paint) color78);
        java.lang.Class<?> wildcardClass80 = color76.getClass();
        org.jfree.chart.LegendItem legendItem81 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape59, paint64, stroke69, (java.awt.Paint) color76);
        org.jfree.chart.entity.ChartEntity chartEntity82 = new org.jfree.chart.entity.ChartEntity(shape59);
        java.awt.Color color83 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem84 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape59, (java.awt.Paint) color83);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset87 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity90 = new org.jfree.chart.entity.CategoryItemEntity(shape59, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset87, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset87.addValue((java.lang.Number) (-1), (java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", (java.lang.Comparable) "SortOrder.ASCENDING");
        defaultCategoryDataset87.clearSelection();
        defaultCategoryDataset87.removeColumn((java.lang.Comparable) "SortOrder.ASCENDING");
        boolean boolean98 = defaultDrawingSupplier42.equals((java.lang.Object) defaultCategoryDataset87);
        org.junit.Assert.assertNotNull(paintArray0);
        org.junit.Assert.assertNotNull(paintArray1);
        org.junit.Assert.assertNotNull(paintArray2);
        org.junit.Assert.assertNotNull(strokeArray3);
        org.junit.Assert.assertNotNull(strokeArray4);
        org.junit.Assert.assertNotNull(paint5);
        org.junit.Assert.assertNotNull(paintArray6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNotNull(paintArray10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(paintContext17);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(paintContext25);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(paintArray27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(strokeArray33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke35);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(strokeArray38);
        org.junit.Assert.assertNotNull(shapeArray40);
        org.junit.Assert.assertNull(boolean57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(shape59);
        org.junit.Assert.assertNotNull(paint64);
        org.junit.Assert.assertNotNull(color66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(stroke69);
        org.junit.Assert.assertNotNull(color76);
        org.junit.Assert.assertNotNull(stroke77);
        org.junit.Assert.assertNotNull(color78);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(color83);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test331() throws Throwable {
printRuntimeMSG("---RegressionTest2:test331");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test331");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setCategoryMargin((double) (byte) 100);
        java.awt.Paint paint20 = categoryAxis0.getTickLabelPaint();
        int int21 = categoryAxis0.getMaximumCategoryLabelLines();
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test332() throws Throwable {
printRuntimeMSG("---RegressionTest2:test332");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test332");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        boolean boolean4 = lineAndShapeRenderer2.getDrawOutlines();
        boolean boolean5 = lineAndShapeRenderer2.getBaseShapesFilled();
        lineAndShapeRenderer2.setBaseSeriesVisibleInLegend(false);
        boolean boolean10 = lineAndShapeRenderer2.getItemShapeVisible((int) (short) -1, (int) (byte) -1);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation11 = null;
        boolean boolean12 = lineAndShapeRenderer2.removeAnnotation(categoryAnnotation11);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test333() throws Throwable {
printRuntimeMSG("---RegressionTest2:test333");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test333");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.axis.AxisLocation axisLocation5 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation6 = axisLocation5.getOpposite();
        categoryPlot0.setDomainAxisLocation((int) (byte) 100, axisLocation6);
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset8 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj9 = abstractCategoryDataset8.clone();
        java.lang.Object obj10 = abstractCategoryDataset8.clone();
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset11 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj12 = abstractCategoryDataset11.clone();
        java.lang.Object obj13 = abstractCategoryDataset11.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes22 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer26.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean29 = lineAndShapeRenderer26.getBaseLinesVisible();
        java.awt.Shape shape30 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer26.setBaseLegendShape(shape30);
        renderAttributes22.setSeriesShape((int) ' ', shape30);
        org.jfree.chart.entity.ChartEntity chartEntity34 = new org.jfree.chart.entity.ChartEntity(shape30, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint35 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color37 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color37);
        java.lang.String str39 = legendItem38.getToolTipText();
        java.awt.Stroke stroke40 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem38.setOutlineStroke(stroke40);
        java.awt.Shape shape46 = null;
        java.awt.Color color47 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke48 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color49 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem50 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape46, (java.awt.Paint) color47, stroke48, (java.awt.Paint) color49);
        java.lang.Class<?> wildcardClass51 = color47.getClass();
        org.jfree.chart.LegendItem legendItem52 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape30, paint35, stroke40, (java.awt.Paint) color47);
        org.jfree.chart.entity.ChartEntity chartEntity53 = new org.jfree.chart.entity.ChartEntity(shape30);
        java.awt.Color color54 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape30, (java.awt.Paint) color54);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset58 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity61 = new org.jfree.chart.entity.CategoryItemEntity(shape30, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset58, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset11.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset58);
        abstractCategoryDataset8.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset58);
        defaultCategoryDataset58.setValue((double) (-1.0f), (java.lang.Comparable) "ChartEntity: tooltip = ", (java.lang.Comparable) (byte) 100);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer68 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset58);
        try {
            java.lang.Comparable comparable70 = defaultCategoryDataset58.getColumnKey(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation5);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(shape30);
        org.junit.Assert.assertNotNull(paint35);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(color47);
        org.junit.Assert.assertNotNull(stroke48);
        org.junit.Assert.assertNotNull(color49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(color54);
        org.junit.Assert.assertNull(categoryItemRenderer68);
    }

    @Test
    public void test334() throws Throwable {
printRuntimeMSG("---RegressionTest2:test334");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test334");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        java.awt.Paint paint12 = lineAndShapeRenderer2.getLegendTextPaint(1);
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        boolean boolean17 = categoryPlot15.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D18 = null;
        java.awt.geom.Rectangle2D rectangle2D19 = null;
        categoryPlot15.drawBackgroundImage(graphics2D18, rectangle2D19);
        java.awt.Graphics2D graphics2D21 = null;
        java.awt.geom.Rectangle2D rectangle2D22 = null;
        categoryPlot15.drawBackgroundImage(graphics2D21, rectangle2D22);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset24 = new org.jfree.data.category.DefaultCategoryDataset();
        int int25 = defaultCategoryDataset24.getRowCount();
        org.jfree.data.category.CategoryDatasetSelectionState categoryDatasetSelectionState26 = null;
        defaultCategoryDataset24.setSelectionState(categoryDatasetSelectionState26);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState29 = lineAndShapeRenderer2.initialise(graphics2D13, rectangle2D14, categoryPlot15, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset24, plotRenderingInfo28);
        int int31 = defaultCategoryDataset24.getColumnIndex((java.lang.Comparable) 0.0f);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(categoryItemRendererState29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test335() throws Throwable {
printRuntimeMSG("---RegressionTest2:test335");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test335");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        categoryPlot0.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot9.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo12, point2D13);
        categoryPlot9.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder17 = categoryPlot9.getRowRenderingOrder();
        categoryPlot0.setRowRenderingOrder(sortOrder17);
        boolean boolean20 = sortOrder17.equals((java.lang.Object) 4);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator24 = lineAndShapeRenderer23.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator28 = lineAndShapeRenderer23.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer23.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean33 = lineAndShapeRenderer23.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint35 = lineAndShapeRenderer23.getSeriesItemLabelPaint((int) (byte) -1);
        java.awt.Paint paint39 = lineAndShapeRenderer23.getItemFillPaint((int) (byte) -1, (int) (byte) 0, true);
        boolean boolean40 = sortOrder17.equals((java.lang.Object) lineAndShapeRenderer23);
        java.awt.Paint paint44 = lineAndShapeRenderer23.getItemFillPaint((int) (byte) 100, 3, true);
        lineAndShapeRenderer23.setSeriesLinesVisible(192, (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(sortOrder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator24);
        org.junit.Assert.assertNull(categoryToolTipGenerator28);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNull(paint35);
        org.junit.Assert.assertNotNull(paint39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(paint44);
    }

    @Test
    public void test336() throws Throwable {
printRuntimeMSG("---RegressionTest2:test336");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test336");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        int int7 = categoryPlot0.getWeight();
        org.jfree.chart.plot.PlotOrientation plotOrientation8 = categoryPlot0.getOrientation();
        int int9 = categoryPlot0.getWeight();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo11 = null;
        java.awt.geom.Point2D point2D12 = null;
        categoryPlot0.zoomDomainAxes(0.0d, plotRenderingInfo11, point2D12, true);
        boolean boolean15 = categoryPlot0.canSelectByPoint();
        java.awt.Image image16 = null;
        categoryPlot0.setBackgroundImage(image16);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(plotOrientation8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test337() throws Throwable {
printRuntimeMSG("---RegressionTest2:test337");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test337");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setForegroundAlpha((float) 100);
        categoryPlot2.setNotify(true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
    }

    @Test
    public void test338() throws Throwable {
printRuntimeMSG("---RegressionTest2:test338");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test338");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.util.List list1 = keyedObjects2D0.getColumnKeys();
        keyedObjects2D0.addObject((java.lang.Object) 255, (java.lang.Comparable) (-65536), (java.lang.Comparable) 0.2d);
        java.util.List list6 = keyedObjects2D0.getColumnKeys();
        org.jfree.data.category.CategoryDataset categoryDataset7 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis8.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis11 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator15 = lineAndShapeRenderer14.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot(categoryDataset7, categoryAxis8, valueAxis11, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer14);
        java.lang.String str17 = categoryAxis8.getLabelToolTip();
        int int18 = categoryAxis8.getMaximumCategoryLabelLines();
        keyedObjects2D0.setObject((java.lang.Object) categoryAxis8, (java.lang.Comparable) 1.0d, (java.lang.Comparable) 2);
        try {
            keyedObjects2D0.removeObject((java.lang.Comparable) "PlotEntity: tooltip = null", (java.lang.Comparable) 100);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (PlotEntity: tooltip = null) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(list1);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNull(categoryItemLabelGenerator15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test339() throws Throwable {
printRuntimeMSG("---RegressionTest2:test339");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test339");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        categoryPlot0.setWeight((int) (byte) 1);
        boolean boolean10 = categoryPlot0.isRangePannable();
        int int11 = categoryPlot0.getRangeAxisCount();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Graphics2D graphics2D18 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo22 = null;
        java.awt.geom.Point2D point2D23 = null;
        categoryPlot19.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo22, point2D23);
        org.jfree.chart.axis.AxisSpace axisSpace25 = null;
        categoryPlot19.setFixedRangeAxisSpace(axisSpace25, true);
        org.jfree.chart.axis.ValueAxis valueAxis28 = null;
        org.jfree.chart.plot.Marker marker29 = null;
        java.awt.geom.Rectangle2D rectangle2D30 = null;
        lineAndShapeRenderer14.drawRangeMarker(graphics2D18, categoryPlot19, valueAxis28, marker29, rectangle2D30);
        categoryPlot19.setDomainCrosshairVisible(false);
        org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder34 = org.jfree.chart.plot.DatasetRenderingOrder.REVERSE;
        categoryPlot19.setDatasetRenderingOrder(datasetRenderingOrder34);
        categoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder34);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(datasetRenderingOrder34);
    }

    @Test
    public void test340() throws Throwable {
printRuntimeMSG("---RegressionTest2:test340");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test340");
        org.jfree.chart.axis.AxisLocation axisLocation0 = org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT;
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.lang.String str4 = legendItem3.getDescription();
        boolean boolean5 = axisLocation0.equals((java.lang.Object) legendItem3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes7 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Stroke stroke8 = renderAttributes7.getDefaultOutlineStroke();
        java.awt.Paint paint10 = renderAttributes7.getSeriesOutlinePaint(255);
        java.awt.Color color12 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel13 = null;
        java.awt.Rectangle rectangle14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        java.awt.geom.AffineTransform affineTransform16 = null;
        java.awt.RenderingHints renderingHints17 = null;
        java.awt.PaintContext paintContext18 = color12.createContext(colorModel13, rectangle14, rectangle2D15, affineTransform16, renderingHints17);
        java.awt.Color color19 = java.awt.Color.RED;
        java.awt.Color color20 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color21 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace22 = color21.getColorSpace();
        float[] floatArray29 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray30 = color20.getColorComponents(colorSpace22, floatArray29);
        float[] floatArray31 = color19.getComponents(floatArray30);
        float[] floatArray32 = color12.getColorComponents(floatArray31);
        renderAttributes7.setSeriesOutlinePaint((int) '4', (java.awt.Paint) color12);
        boolean boolean34 = axisLocation0.equals((java.lang.Object) '4');
        org.junit.Assert.assertNotNull(axisLocation0);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(stroke8);
        org.junit.Assert.assertNull(paint10);
        org.junit.Assert.assertNotNull(color12);
        org.junit.Assert.assertNotNull(paintContext18);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNotNull(colorSpace22);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test341() throws Throwable {
printRuntimeMSG("---RegressionTest2:test341");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test341");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.lang.String str10 = legendItem8.getURLText();
        java.awt.Paint paint11 = legendItem8.getOutlinePaint();
        java.awt.Paint paint12 = legendItem8.getLabelPaint();
        java.awt.Stroke stroke13 = legendItem8.getOutlineStroke();
        java.lang.Object obj14 = legendItem8.clone();
        java.awt.Paint paint15 = legendItem8.getOutlinePaint();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str10.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(paint15);
    }

    @Test
    public void test342() throws Throwable {
printRuntimeMSG("---RegressionTest2:test342");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test342");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        java.awt.Font font11 = categoryAxis8.getTickLabelFont();
        float float12 = categoryAxis8.getTickMarkInsideLength();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(font11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.0f + "'", float12 == 0.0f);
    }

    @Test
    public void test343() throws Throwable {
printRuntimeMSG("---RegressionTest2:test343");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test343");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator11 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator11, true);
        java.awt.Shape shape15 = lineAndShapeRenderer2.lookupSeriesShape((int) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot18 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke19 = categoryPlot18.getRangeMinorGridlineStroke();
        categoryPlot16.setParent((org.jfree.chart.plot.Plot) categoryPlot18);
        org.jfree.chart.LegendItemCollection legendItemCollection21 = categoryPlot16.getFixedLegendItems();
        java.lang.Comparable comparable22 = categoryPlot16.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge23 = categoryPlot16.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = null;
        categoryPlot16.notifyListeners(plotChangeEvent24);
        boolean boolean26 = categoryPlot16.isOutlineVisible();
        java.awt.geom.GeneralPath generalPath27 = null;
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        org.jfree.chart.RenderingSource renderingSource29 = null;
        categoryPlot16.select(generalPath27, rectangle2D28, renderingSource29);
        org.jfree.chart.util.ShadowGenerator shadowGenerator31 = null;
        categoryPlot16.setShadowGenerator(shadowGenerator31);
        org.jfree.chart.entity.PlotEntity plotEntity33 = new org.jfree.chart.entity.PlotEntity(shape15, (org.jfree.chart.plot.Plot) categoryPlot16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean38 = lineAndShapeRenderer36.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean39 = lineAndShapeRenderer36.getBaseLinesVisible();
        lineAndShapeRenderer36.setAutoPopulateSeriesPaint(false);
        boolean boolean42 = lineAndShapeRenderer36.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean44 = plotEntity33.equals((java.lang.Object) itemLabelPosition43);
        java.lang.Object obj45 = plotEntity33.clone();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator49 = lineAndShapeRenderer48.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator50 = null;
        lineAndShapeRenderer48.setBaseToolTipGenerator(categoryToolTipGenerator50);
        lineAndShapeRenderer48.setAutoPopulateSeriesOutlinePaint(false);
        boolean boolean54 = plotEntity33.equals((java.lang.Object) lineAndShapeRenderer48);
        lineAndShapeRenderer48.setBaseShapesVisible(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape15);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(stroke19);
        org.junit.Assert.assertNull(legendItemCollection21);
        org.junit.Assert.assertNull(comparable22);
        org.junit.Assert.assertNotNull(rectangleEdge23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(categoryItemLabelGenerator49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test344() throws Throwable {
printRuntimeMSG("---RegressionTest2:test344");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test344");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        float float13 = categoryAxis1.getTickMarkInsideLength();
        float float14 = categoryAxis1.getMinorTickMarkOutsideLength();
        categoryAxis1.addCategoryLabelToolTip((java.lang.Comparable) 1, "ChartEntity: tooltip = org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT");
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
    }

    @Test
    public void test345() throws Throwable {
printRuntimeMSG("---RegressionTest2:test345");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test345");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent5 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent5);
        float float7 = categoryPlot0.getBackgroundAlpha();
        org.jfree.chart.axis.AxisLocation axisLocation9 = null;
        try {
            categoryPlot0.setDomainAxisLocation((-1), axisLocation9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
    }

    @Test
    public void test346() throws Throwable {
printRuntimeMSG("---RegressionTest2:test346");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test346");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        barRenderer0.setMaximumBarWidth(0.0d);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator17 = null;
        barRenderer0.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator17);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
    }

    @Test
    public void test347() throws Throwable {
printRuntimeMSG("---RegressionTest2:test347");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test347");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.awt.color.ColorSpace colorSpace4 = color2.getColorSpace();
        keyedObjects2D0.addObject((java.lang.Object) colorSpace4, (java.lang.Comparable) (-4.0d), (java.lang.Comparable) (-4.0d));
        java.lang.Object obj8 = null;
        boolean boolean9 = keyedObjects2D0.equals(obj8);
        try {
            keyedObjects2D0.removeColumn((java.lang.Comparable) (-1.0d));
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Column key (-1.0) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test348() throws Throwable {
printRuntimeMSG("---RegressionTest2:test348");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test348");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list9 = categoryPlot0.getCategoriesForAxis(categoryAxis8);
        boolean boolean10 = categoryPlot0.isDomainZoomable();
        categoryPlot0.setRangeCrosshairValue((double) 100L, false);
        org.jfree.chart.axis.CategoryAxis categoryAxis14 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis14.setMinorTickMarkOutsideLength((float) (short) 0);
        categoryAxis14.setLowerMargin((double) (short) 0);
        categoryAxis14.clearCategoryLabelToolTips();
        java.awt.Paint paint20 = categoryAxis14.getAxisLinePaint();
        categoryPlot0.setDomainCrosshairPaint(paint20);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(paint20);
    }

    @Test
    public void test349() throws Throwable {
printRuntimeMSG("---RegressionTest2:test349");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test349");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener3 = null;
        categoryPlot0.removeChangeListener(plotChangeListener3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes5 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint6 = renderAttributes5.getDefaultLabelPaint();
        java.awt.Color color7 = java.awt.Color.RED;
        renderAttributes5.setDefaultOutlinePaint((java.awt.Paint) color7);
        categoryPlot0.setDomainGridlinePaint((java.awt.Paint) color7);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer12.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean18 = lineAndShapeRenderer12.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator22 = lineAndShapeRenderer21.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator23 = null;
        lineAndShapeRenderer21.setBaseToolTipGenerator(categoryToolTipGenerator23);
        java.awt.Font font26 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer21.setSeriesItemLabelFont((int) (short) 0, font26, true);
        lineAndShapeRenderer12.setBaseLegendTextFont(font26);
        org.jfree.chart.LegendItemCollection legendItemCollection30 = lineAndShapeRenderer12.getLegendItems();
        categoryPlot0.setFixedLegendItems(legendItemCollection30);
        int int32 = legendItemCollection30.getItemCount();
        java.lang.Object obj33 = legendItemCollection30.clone();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator22);
        org.junit.Assert.assertNotNull(font26);
        org.junit.Assert.assertNotNull(legendItemCollection30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test350() throws Throwable {
printRuntimeMSG("---RegressionTest2:test350");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test350");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer3 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean4 = lineAndShapeRenderer3.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator5 = null;
        lineAndShapeRenderer3.setBaseURLGenerator(categoryURLGenerator5);
        java.awt.Paint paint10 = lineAndShapeRenderer3.getItemLabelPaint((-65536), 0, false);
        boolean boolean11 = defaultCategoryDataset0.equals((java.lang.Object) false);
        java.lang.Object obj12 = defaultCategoryDataset0.clone();
        java.lang.Object obj13 = null;
        boolean boolean14 = defaultCategoryDataset0.equals(obj13);
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        categoryPlot15.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation19 = categoryPlot15.getOrientation();
        org.jfree.chart.axis.AxisSpace axisSpace20 = null;
        categoryPlot15.setFixedDomainAxisSpace(axisSpace20);
        java.awt.Image image22 = null;
        categoryPlot15.setBackgroundImage(image22);
        boolean boolean24 = defaultCategoryDataset0.hasListener((java.util.EventListener) categoryPlot15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(plotOrientation19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test351() throws Throwable {
printRuntimeMSG("---RegressionTest2:test351");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test351");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        java.awt.Stroke stroke13 = lineAndShapeRenderer2.getItemStroke((int) 'a', (int) (short) 0, false);
        boolean boolean14 = lineAndShapeRenderer2.getBaseItemLabelsVisible();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test352() throws Throwable {
printRuntimeMSG("---RegressionTest2:test352");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test352");
        java.awt.Color color1 = java.awt.Color.getColor("GradientPaintTransformType.VERTICAL");
        org.junit.Assert.assertNull(color1);
    }

    @Test
    public void test353() throws Throwable {
printRuntimeMSG("---RegressionTest2:test353");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test353");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        lineAndShapeRenderer2.setBaseSeriesVisibleInLegend(true);
        boolean boolean6 = lineAndShapeRenderer2.getBaseSeriesVisibleInLegend();
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator((int) (short) 0, categoryItemLabelGenerator8, false);
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator12 = null;
        try {
            lineAndShapeRenderer2.setSeriesToolTipGenerator((-739), categoryToolTipGenerator12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test354() throws Throwable {
printRuntimeMSG("---RegressionTest2:test354");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test354");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.lang.String str10 = legendItem8.getURLText();
        java.awt.Shape shape11 = legendItem8.getShape();
        boolean boolean12 = legendItem8.isShapeOutlineVisible();
        legendItem8.setDatasetIndex((int) '4');
        legendItem8.setSeriesIndex((int) (short) -1);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str10.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNull(shape11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test355() throws Throwable {
printRuntimeMSG("---RegressionTest2:test355");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test355");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        java.lang.Class<?> wildcardClass16 = categoryAxis6.getClass();
        java.awt.Stroke stroke17 = categoryAxis6.getTickMarkStroke();
        java.lang.Object obj18 = categoryAxis6.clone();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test356() throws Throwable {
printRuntimeMSG("---RegressionTest2:test356");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test356");
        org.jfree.chart.renderer.RenderAttributes renderAttributes1 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Stroke stroke2 = renderAttributes1.getDefaultOutlineStroke();
        java.awt.Font font3 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        renderAttributes1.setDefaultLabelFont(font3);
        org.jfree.chart.renderer.RenderAttributes renderAttributes6 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint7 = renderAttributes6.getDefaultLabelPaint();
        java.awt.Paint paint10 = renderAttributes6.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes16 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean22 = lineAndShapeRenderer20.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean23 = lineAndShapeRenderer20.getBaseLinesVisible();
        java.awt.Shape shape24 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer20.setBaseLegendShape(shape24);
        renderAttributes16.setSeriesShape((int) ' ', shape24);
        org.jfree.chart.entity.ChartEntity chartEntity28 = new org.jfree.chart.entity.ChartEntity(shape24, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color31 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem32 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color31);
        java.lang.String str33 = legendItem32.getToolTipText();
        java.awt.Stroke stroke34 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem32.setOutlineStroke(stroke34);
        java.awt.Shape shape40 = null;
        java.awt.Color color41 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke42 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color43 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape40, (java.awt.Paint) color41, stroke42, (java.awt.Paint) color43);
        java.lang.Class<?> wildcardClass45 = color41.getClass();
        org.jfree.chart.LegendItem legendItem46 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape24, paint29, stroke34, (java.awt.Paint) color41);
        org.jfree.chart.entity.ChartEntity chartEntity47 = new org.jfree.chart.entity.ChartEntity(shape24);
        renderAttributes6.setSeriesShape(1, shape24);
        org.jfree.chart.plot.CategoryPlot categoryPlot49 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke50 = categoryPlot49.getRangeMinorGridlineStroke();
        boolean boolean51 = categoryPlot49.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity54 = new org.jfree.chart.entity.PlotEntity(shape24, (org.jfree.chart.plot.Plot) categoryPlot49, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset57 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer60 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean61 = lineAndShapeRenderer60.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator62 = null;
        lineAndShapeRenderer60.setBaseURLGenerator(categoryURLGenerator62);
        java.awt.Paint paint67 = lineAndShapeRenderer60.getItemLabelPaint((-65536), 0, false);
        boolean boolean68 = defaultCategoryDataset57.equals((java.lang.Object) false);
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity71 = new org.jfree.chart.entity.CategoryItemEntity(shape24, "AxisLocation.BOTTOM_OR_RIGHT", "ChartEntity: tooltip = ", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset57, (java.lang.Comparable) 1.0f, (java.lang.Comparable) (short) 0);
        renderAttributes1.setSeriesShape((int) 'a', shape24);
        org.junit.Assert.assertNull(stroke2);
        org.junit.Assert.assertNotNull(font3);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNull(paint10);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shape24);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color41);
        org.junit.Assert.assertNotNull(stroke42);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(stroke50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(paint67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test357() throws Throwable {
printRuntimeMSG("---RegressionTest2:test357");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test357");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        boolean boolean11 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint();
        boolean boolean14 = lineAndShapeRenderer2.getItemLineVisible((int) (byte) 10, 0);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test358() throws Throwable {
printRuntimeMSG("---RegressionTest2:test358");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test358");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo13, point2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo19 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState20 = null;
        boolean boolean21 = categoryPlot0.render(graphics2D16, rectangle2D17, (int) (byte) 100, plotRenderingInfo19, categoryCrosshairState20);
        boolean boolean22 = categoryPlot0.isNotify();
        boolean boolean23 = categoryPlot0.isOutlineVisible();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo25 = null;
        java.awt.geom.Point2D point2D26 = null;
        categoryPlot0.zoomRangeAxes(2.0d, plotRenderingInfo25, point2D26);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test359() throws Throwable {
printRuntimeMSG("---RegressionTest2:test359");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test359");
        java.awt.Color color0 = java.awt.Color.darkGray;
        int int1 = color0.getRGB();
        org.junit.Assert.assertNotNull(color0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-12566464) + "'", int1 == (-12566464));
    }

    @Test
    public void test360() throws Throwable {
printRuntimeMSG("---RegressionTest2:test360");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test360");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        boolean boolean9 = lineAndShapeRenderer2.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setUseFillPaint(false);
        try {
            lineAndShapeRenderer2.setSeriesVisibleInLegend((-12566464), (java.lang.Boolean) true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelPosition8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
    }

    @Test
    public void test361() throws Throwable {
printRuntimeMSG("---RegressionTest2:test361");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test361");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.axis.ValueAxis valueAxis10 = null;
        org.jfree.data.Range range11 = categoryPlot9.getDataRange(valueAxis10);
        categoryPlot9.setWeight((int) 'a');
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo15 = null;
        java.awt.geom.Point2D point2D16 = null;
        categoryPlot9.zoomDomainAxes((-4.0d), plotRenderingInfo15, point2D16, true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test362() throws Throwable {
printRuntimeMSG("---RegressionTest2:test362");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test362");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str1 = rectangleInsets0.toString();
        double double2 = rectangleInsets0.getTop();
        double double4 = rectangleInsets0.trimHeight((double) 100);
        double double5 = rectangleInsets0.getRight();
        double double7 = rectangleInsets0.calculateBottomOutset((double) (-196608));
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str1.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0d + "'", double2 == 2.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 96.0d + "'", double4 == 96.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.0d + "'", double5 == 4.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
    }

    @Test
    public void test363() throws Throwable {
printRuntimeMSG("---RegressionTest2:test363");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test363");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        categoryPlot0.drawBackgroundImage(graphics2D7, rectangle2D8);
        org.jfree.chart.util.UnitType unitType10 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        categoryPlot11.setParent((org.jfree.chart.plot.Plot) categoryPlot13);
        org.jfree.chart.LegendItemCollection legendItemCollection16 = categoryPlot11.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier17 = categoryPlot11.getDrawingSupplier();
        java.awt.Stroke stroke18 = categoryPlot11.getOutlineStroke();
        boolean boolean19 = unitType10.equals((java.lang.Object) categoryPlot11);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo22 = null;
        java.awt.geom.Point2D point2D23 = null;
        categoryPlot11.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo22, point2D23);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean29 = lineAndShapeRenderer27.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean30 = lineAndShapeRenderer27.getBaseLinesVisible();
        java.awt.Shape shape31 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer27.setBaseLegendShape(shape31);
        java.awt.Color color33 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer27.setBaseOutlinePaint((java.awt.Paint) color33, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer38 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition40 = null;
        lineAndShapeRenderer38.setSeriesPositiveItemLabelPosition(0, itemLabelPosition40);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer38.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean44 = lineAndShapeRenderer38.getUseFillPaint();
        lineAndShapeRenderer38.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer38.setBaseStroke(stroke47, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray50 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer27, lineAndShapeRenderer38 };
        categoryPlot11.setRenderers(categoryItemRendererArray50);
        java.awt.Paint paint52 = categoryPlot11.getRangeZeroBaselinePaint();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot11);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent54 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        boolean boolean55 = categoryPlot0.canSelectByPoint();
        org.jfree.chart.util.SortOrder sortOrder56 = categoryPlot0.getColumnRenderingOrder();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(unitType10);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNull(legendItemCollection16);
        org.junit.Assert.assertNotNull(drawingSupplier17);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(shape31);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(categoryItemRendererArray50);
        org.junit.Assert.assertNotNull(paint52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(sortOrder56);
    }

    @Test
    public void test364() throws Throwable {
printRuntimeMSG("---RegressionTest2:test364");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test364");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearAnnotations();
        org.jfree.chart.plot.Marker marker7 = null;
        try {
            boolean boolean8 = categoryPlot0.removeRangeMarker(marker7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test365() throws Throwable {
printRuntimeMSG("---RegressionTest2:test365");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test365");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        categoryAxis1.clearCategoryLabelToolTips();
        float float17 = categoryAxis1.getMaximumCategoryLabelWidthRatio();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 10.0f + "'", float17 == 10.0f);
    }

    @Test
    public void test366() throws Throwable {
printRuntimeMSG("---RegressionTest2:test366");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test366");
        java.awt.Color color0 = java.awt.Color.white;
        org.junit.Assert.assertNotNull(color0);
    }

    @Test
    public void test367() throws Throwable {
printRuntimeMSG("---RegressionTest2:test367");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test367");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent14 = null;
        categoryPlot9.markerChanged(markerChangeEvent14);
        org.jfree.chart.event.PlotChangeListener plotChangeListener16 = null;
        categoryPlot9.removeChangeListener(plotChangeListener16);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo20 = null;
        java.awt.geom.Point2D point2D21 = null;
        categoryPlot9.zoomRangeAxes(0.0d, (double) (-65536), plotRenderingInfo20, point2D21);
        org.jfree.chart.LegendItemCollection legendItemCollection23 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.axis.AxisLocation axisLocation25 = categoryPlot9.getRangeAxisLocation((-16777216));
        boolean boolean26 = categoryPlot9.isDomainCrosshairVisible();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertNull(legendItemCollection23);
        org.junit.Assert.assertNotNull(axisLocation25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test368() throws Throwable {
printRuntimeMSG("---RegressionTest2:test368");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test368");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setCategoryMargin((double) (byte) 100);
        java.awt.Paint paint20 = categoryAxis0.getTickLabelPaint();
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color24 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem25 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color24);
        java.lang.String str26 = legendItem25.getToolTipText();
        java.awt.Stroke stroke27 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem25.setOutlineStroke(stroke27);
        legendItem22.setOutlineStroke(stroke27);
        categoryAxis0.setTickMarkStroke(stroke27);
        categoryAxis0.setLowerMargin((double) 200);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(stroke27);
    }

    @Test
    public void test369() throws Throwable {
printRuntimeMSG("---RegressionTest2:test369");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test369");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setSeriesIndex((int) (byte) 10);
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer13 = legendItem8.getFillPaintTransformer();
        java.lang.Object obj14 = legendItem8.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes15 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean21 = lineAndShapeRenderer19.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean22 = lineAndShapeRenderer19.getBaseLinesVisible();
        java.awt.Shape shape23 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer19.setBaseLegendShape(shape23);
        renderAttributes15.setSeriesShape((int) ' ', shape23);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean30 = lineAndShapeRenderer28.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean31 = lineAndShapeRenderer28.getBaseLinesVisible();
        java.awt.Shape shape32 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer28.setBaseLegendShape(shape32);
        renderAttributes15.setDefaultShape(shape32);
        org.jfree.chart.entity.ChartEntity chartEntity36 = new org.jfree.chart.entity.ChartEntity(shape32, "PlotOrientation.VERTICAL");
        legendItem8.setShape(shape32);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(gradientPaintTransformer13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shape23);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(shape32);
    }

    @Test
    public void test370() throws Throwable {
printRuntimeMSG("---RegressionTest2:test370");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test370");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        boolean boolean9 = lineAndShapeRenderer2.getBaseCreateEntities();
        lineAndShapeRenderer2.setAutoPopulateSeriesStroke(true);
        lineAndShapeRenderer2.setBaseShapesFilled(true);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test371() throws Throwable {
printRuntimeMSG("---RegressionTest2:test371");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test371");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        java.lang.Boolean boolean16 = barRenderer0.getSeriesCreateEntities(0);
        double double17 = barRenderer0.getMaximumBarWidth();
        java.awt.Color color18 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel19 = null;
        java.awt.Rectangle rectangle20 = null;
        java.awt.geom.Rectangle2D rectangle2D21 = null;
        java.awt.geom.AffineTransform affineTransform22 = null;
        java.awt.RenderingHints renderingHints23 = null;
        java.awt.PaintContext paintContext24 = color18.createContext(colorModel19, rectangle20, rectangle2D21, affineTransform22, renderingHints23);
        java.awt.Color color25 = java.awt.Color.RED;
        java.awt.Color color26 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color27 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace28 = color27.getColorSpace();
        float[] floatArray35 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray36 = color26.getColorComponents(colorSpace28, floatArray35);
        float[] floatArray37 = color25.getComponents(floatArray36);
        float[] floatArray38 = color18.getColorComponents(floatArray37);
        barRenderer0.setBasePaint((java.awt.Paint) color18);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator41 = null;
        barRenderer0.setSeriesURLGenerator(0, categoryURLGenerator41);
        double double43 = barRenderer0.getMinimumBarLength();
        barRenderer0.setIncludeBaseInRange(false);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(paintContext24);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(colorSpace28);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test372() throws Throwable {
printRuntimeMSG("---RegressionTest2:test372");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test372");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition31 = null;
        lineAndShapeRenderer29.setSeriesPositiveItemLabelPosition(0, itemLabelPosition31);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition34 = lineAndShapeRenderer29.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean35 = lineAndShapeRenderer29.getUseFillPaint();
        lineAndShapeRenderer29.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke38 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer29.setBaseStroke(stroke38, false);
        boolean boolean41 = lineAndShapeRenderer29.getDataBoundsIncludesVisibleSeriesOnly();
        boolean boolean42 = keyedObjects0.equals((java.lang.Object) lineAndShapeRenderer29);
        org.jfree.data.KeyedObjects2D keyedObjects2D43 = new org.jfree.data.KeyedObjects2D();
        java.util.List list44 = keyedObjects2D43.getColumnKeys();
        keyedObjects2D43.addObject((java.lang.Object) 255, (java.lang.Comparable) (-65536), (java.lang.Comparable) 0.2d);
        java.util.List list49 = keyedObjects2D43.getColumnKeys();
        boolean boolean50 = keyedObjects0.equals((java.lang.Object) list49);
        org.jfree.chart.util.SortOrder sortOrder51 = org.jfree.chart.util.SortOrder.ASCENDING;
        keyedObjects0.sortByObjects(sortOrder51);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(sortOrder51);
    }

    @Test
    public void test373() throws Throwable {
printRuntimeMSG("---RegressionTest2:test373");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test373");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        org.jfree.chart.axis.CategoryAxis categoryAxis9 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset10 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis11.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis14 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator18 = lineAndShapeRenderer17.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot(categoryDataset10, categoryAxis11, valueAxis14, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer17);
        boolean boolean20 = categoryAxis11.isTickLabelsVisible();
        double double21 = categoryAxis11.getFixedDimension();
        java.awt.Paint paint23 = categoryAxis11.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis9.setTickLabelPaint(paint23);
        categoryAxis9.setLabelToolTip("hi!");
        int int27 = categoryAxis9.getCategoryLabelPositionOffset();
        categoryAxis9.setVisible(false);
        categoryPlot0.setDomainAxis(categoryAxis9);
        categoryAxis9.setUpperMargin((double) 0L);
        java.awt.Font font33 = categoryAxis9.getLabelFont();
        java.lang.Comparable comparable34 = null;
        try {
            java.awt.Font font35 = categoryAxis9.getTickLabelFont(comparable34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'category' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNull(categoryItemLabelGenerator18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(font33);
    }

    @Test
    public void test374() throws Throwable {
printRuntimeMSG("---RegressionTest2:test374");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test374");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint1 = categoryAxis0.getTickLabelPaint();
        org.jfree.chart.util.RectangleInsets rectangleInsets2 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double3 = rectangleInsets2.getRight();
        double double5 = rectangleInsets2.calculateTopInset(0.0d);
        categoryAxis0.setLabelInsets(rectangleInsets2, false);
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.util.LengthAdjustmentType lengthAdjustmentType9 = null;
        org.jfree.chart.util.LengthAdjustmentType lengthAdjustmentType10 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D11 = rectangleInsets2.createAdjustedRectangle(rectangle2D8, lengthAdjustmentType9, lengthAdjustmentType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNotNull(rectangleInsets2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.0d + "'", double3 == 4.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
    }

    @Test
    public void test375() throws Throwable {
printRuntimeMSG("---RegressionTest2:test375");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test375");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = null;
        lineAndShapeRenderer14.setSeriesPositiveItemLabelPosition(0, itemLabelPosition16);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer14.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean20 = lineAndShapeRenderer14.getUseFillPaint();
        java.lang.Boolean boolean22 = lineAndShapeRenderer14.getSeriesItemLabelsVisible(0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean26 = lineAndShapeRenderer25.getUseOutlinePaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer29 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean31 = lineAndShapeRenderer29.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition35 = lineAndShapeRenderer29.getNegativeItemLabelPosition((int) '4', (int) '4', false);
        lineAndShapeRenderer25.setBasePositiveItemLabelPosition(itemLabelPosition35);
        lineAndShapeRenderer14.setBaseNegativeItemLabelPosition(itemLabelPosition35);
        org.jfree.chart.text.TextAnchor textAnchor38 = itemLabelPosition35.getTextAnchor();
        lineAndShapeRenderer2.setSeriesNegativeItemLabelPosition(2, itemLabelPosition35);
        org.jfree.chart.plot.CategoryPlot categoryPlot40 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke41 = categoryPlot40.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer42 = null;
        categoryPlot40.setRenderer(categoryItemRenderer42);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent44 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot40);
        categoryPlot40.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D47 = null;
        java.awt.geom.Rectangle2D rectangle2D48 = null;
        categoryPlot40.drawBackgroundImage(graphics2D47, rectangle2D48);
        java.awt.Color color50 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        categoryPlot40.setRangeZeroBaselinePaint((java.awt.Paint) color50);
        lineAndShapeRenderer2.setBasePaint((java.awt.Paint) color50);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(itemLabelPosition35);
        org.junit.Assert.assertNotNull(textAnchor38);
        org.junit.Assert.assertNotNull(stroke41);
        org.junit.Assert.assertNotNull(color50);
    }

    @Test
    public void test376() throws Throwable {
printRuntimeMSG("---RegressionTest2:test376");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test376");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        categoryPlot0.drawBackgroundImage(graphics2D7, rectangle2D8);
        org.jfree.chart.util.UnitType unitType10 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        categoryPlot11.setParent((org.jfree.chart.plot.Plot) categoryPlot13);
        org.jfree.chart.LegendItemCollection legendItemCollection16 = categoryPlot11.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier17 = categoryPlot11.getDrawingSupplier();
        java.awt.Stroke stroke18 = categoryPlot11.getOutlineStroke();
        boolean boolean19 = unitType10.equals((java.lang.Object) categoryPlot11);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo22 = null;
        java.awt.geom.Point2D point2D23 = null;
        categoryPlot11.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo22, point2D23);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer27 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean29 = lineAndShapeRenderer27.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean30 = lineAndShapeRenderer27.getBaseLinesVisible();
        java.awt.Shape shape31 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer27.setBaseLegendShape(shape31);
        java.awt.Color color33 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer27.setBaseOutlinePaint((java.awt.Paint) color33, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer38 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition40 = null;
        lineAndShapeRenderer38.setSeriesPositiveItemLabelPosition(0, itemLabelPosition40);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition43 = lineAndShapeRenderer38.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean44 = lineAndShapeRenderer38.getUseFillPaint();
        lineAndShapeRenderer38.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer38.setBaseStroke(stroke47, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray50 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer27, lineAndShapeRenderer38 };
        categoryPlot11.setRenderers(categoryItemRendererArray50);
        java.awt.Paint paint52 = categoryPlot11.getRangeZeroBaselinePaint();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot11);
        org.jfree.chart.LegendItemCollection legendItemCollection54 = categoryPlot11.getLegendItems();
        categoryPlot11.setDomainCrosshairColumnKey((java.lang.Comparable) 2, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(unitType10);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNull(legendItemCollection16);
        org.junit.Assert.assertNotNull(drawingSupplier17);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(shape31);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(itemLabelPosition43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(categoryItemRendererArray50);
        org.junit.Assert.assertNotNull(paint52);
        org.junit.Assert.assertNotNull(legendItemCollection54);
    }

    @Test
    public void test377() throws Throwable {
printRuntimeMSG("---RegressionTest2:test377");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test377");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.chart.util.ShadowGenerator shadowGenerator9 = null;
        categoryPlot0.setShadowGenerator(shadowGenerator9);
        org.jfree.chart.renderer.RenderAttributes renderAttributes19 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean25 = lineAndShapeRenderer23.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean26 = lineAndShapeRenderer23.getBaseLinesVisible();
        java.awt.Shape shape27 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer23.setBaseLegendShape(shape27);
        renderAttributes19.setSeriesShape((int) ' ', shape27);
        org.jfree.chart.entity.ChartEntity chartEntity31 = new org.jfree.chart.entity.ChartEntity(shape27, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint32 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color34 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem35 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color34);
        java.lang.String str36 = legendItem35.getToolTipText();
        java.awt.Stroke stroke37 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem35.setOutlineStroke(stroke37);
        java.awt.Shape shape43 = null;
        java.awt.Color color44 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke45 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color46 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem47 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape43, (java.awt.Paint) color44, stroke45, (java.awt.Paint) color46);
        java.lang.Class<?> wildcardClass48 = color44.getClass();
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape27, paint32, stroke37, (java.awt.Paint) color44);
        org.jfree.chart.entity.ChartEntity chartEntity50 = new org.jfree.chart.entity.ChartEntity(shape27);
        java.awt.Color color51 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem52 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape27, (java.awt.Paint) color51);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset55 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity58 = new org.jfree.chart.entity.CategoryItemEntity(shape27, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset55, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset55.addValue((java.lang.Number) (-1), (java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", (java.lang.Comparable) "SortOrder.ASCENDING");
        defaultCategoryDataset55.clearSelection();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer64 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset55);
        try {
            defaultCategoryDataset55.removeColumn((java.lang.Comparable) "");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Column key () not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(shape27);
        org.junit.Assert.assertNotNull(paint32);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(color51);
        org.junit.Assert.assertNull(categoryItemRenderer64);
    }

    @Test
    public void test378() throws Throwable {
printRuntimeMSG("---RegressionTest2:test378");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test378");
        java.text.AttributedString attributedString0 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer6 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = null;
        lineAndShapeRenderer6.setSeriesPositiveItemLabelPosition(0, itemLabelPosition8);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer6.getSeriesPositiveItemLabelPosition((-1));
        java.awt.Paint paint15 = lineAndShapeRenderer6.getItemOutlinePaint((int) (short) 10, (int) (byte) 10, false);
        double double16 = lineAndShapeRenderer6.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.RenderAttributes renderAttributes21 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean27 = lineAndShapeRenderer25.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean28 = lineAndShapeRenderer25.getBaseLinesVisible();
        java.awt.Shape shape29 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer25.setBaseLegendShape(shape29);
        renderAttributes21.setSeriesShape((int) ' ', shape29);
        org.jfree.chart.entity.ChartEntity chartEntity33 = new org.jfree.chart.entity.ChartEntity(shape29, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color36 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem37 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color36);
        java.lang.String str38 = legendItem37.getToolTipText();
        java.awt.Stroke stroke39 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem37.setOutlineStroke(stroke39);
        java.awt.Shape shape45 = null;
        java.awt.Color color46 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke47 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color48 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem49 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape45, (java.awt.Paint) color46, stroke47, (java.awt.Paint) color48);
        java.lang.Class<?> wildcardClass50 = color46.getClass();
        org.jfree.chart.LegendItem legendItem51 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape29, paint34, stroke39, (java.awt.Paint) color46);
        lineAndShapeRenderer6.setBaseLegendShape(shape29);
        java.awt.Shape shape53 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX;
        lineAndShapeRenderer6.setBaseShape(shape53, false);
        java.awt.Shape shape60 = null;
        java.awt.Color color61 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke62 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color63 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem64 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape60, (java.awt.Paint) color61, stroke62, (java.awt.Paint) color63);
        int int65 = legendItem64.getSeriesIndex();
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer66 = legendItem64.getFillPaintTransformer();
        org.jfree.chart.plot.CategoryPlot categoryPlot67 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke68 = categoryPlot67.getRangeMinorGridlineStroke();
        boolean boolean69 = categoryPlot67.isRangeCrosshairLockedOnData();
        java.awt.Paint paint70 = categoryPlot67.getBackgroundPaint();
        legendItem64.setFillPaint(paint70);
        try {
            org.jfree.chart.LegendItem legendItem72 = new org.jfree.chart.LegendItem(attributedString0, "NOID", "AxisLocation.BOTTOM_OR_RIGHT", "TextAnchor.BASELINE_RIGHT", shape53, paint70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'label' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.0d + "'", double16 == 2.0d);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(shape29);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(stroke39);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(stroke47);
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(shape53);
        org.junit.Assert.assertNotNull(color61);
        org.junit.Assert.assertNotNull(stroke62);
        org.junit.Assert.assertNotNull(color63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(gradientPaintTransformer66);
        org.junit.Assert.assertNotNull(stroke68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(paint70);
    }

    @Test
    public void test379() throws Throwable {
printRuntimeMSG("---RegressionTest2:test379");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test379");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition2 = barRenderer0.getPositiveItemLabelPositionFallback();
        double double3 = barRenderer0.getMaximumBarWidth();
        java.awt.Shape shape4 = barRenderer0.getBaseShape();
        boolean boolean6 = barRenderer0.isSeriesItemLabelsVisible(175);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(itemLabelPosition2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(shape4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test380() throws Throwable {
printRuntimeMSG("---RegressionTest2:test380");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test380");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setForegroundAlpha((float) 100);
        boolean boolean7 = categoryPlot2.isDomainZoomable();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test381() throws Throwable {
printRuntimeMSG("---RegressionTest2:test381");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test381");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator14 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator14);
        java.awt.Color color17 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color18 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace19 = color18.getColorSpace();
        float[] floatArray26 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray27 = color17.getColorComponents(colorSpace19, floatArray26);
        int int28 = color17.getBlue();
        int int29 = color17.getAlpha();
        lineAndShapeRenderer2.setSeriesItemLabelPaint(1, (java.awt.Paint) color17);
        org.jfree.chart.LegendItem legendItem33 = lineAndShapeRenderer2.getLegendItem((-16777216), (-65536));
        java.awt.Stroke stroke35 = lineAndShapeRenderer2.getSeriesStroke(8);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(colorSpace19);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 128 + "'", int28 == 128);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 255 + "'", int29 == 255);
        org.junit.Assert.assertNull(legendItem33);
        org.junit.Assert.assertNull(stroke35);
    }

    @Test
    public void test382() throws Throwable {
printRuntimeMSG("---RegressionTest2:test382");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test382");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.ValueAxis valueAxis2 = null;
        categoryPlot0.setRangeAxis(valueAxis2);
        org.jfree.chart.util.RectangleEdge rectangleEdge4 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.axis.AxisLocation axisLocation6 = categoryPlot0.getRangeAxisLocation((-12566464));
        java.awt.Image image7 = categoryPlot0.getBackgroundImage();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer10 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition12 = null;
        lineAndShapeRenderer10.setSeriesPositiveItemLabelPosition(0, itemLabelPosition12);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition15 = lineAndShapeRenderer10.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean16 = lineAndShapeRenderer10.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        lineAndShapeRenderer10.setBaseLegendTextFont(font24);
        org.jfree.chart.LegendItemCollection legendItemCollection28 = lineAndShapeRenderer10.getLegendItems();
        categoryPlot0.setFixedLegendItems(legendItemCollection28);
        org.jfree.chart.plot.DrawingSupplier drawingSupplier30 = categoryPlot0.getDrawingSupplier();
        java.awt.Paint paint31 = categoryPlot0.getDomainCrosshairPaint();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(rectangleEdge4);
        org.junit.Assert.assertNotNull(axisLocation6);
        org.junit.Assert.assertNull(image7);
        org.junit.Assert.assertNotNull(itemLabelPosition15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNotNull(legendItemCollection28);
        org.junit.Assert.assertNotNull(drawingSupplier30);
        org.junit.Assert.assertNotNull(paint31);
    }

    @Test
    public void test383() throws Throwable {
printRuntimeMSG("---RegressionTest2:test383");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test383");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.util.List list27 = keyedObjects0.getKeys();
        org.jfree.chart.event.ChartChangeEvent chartChangeEvent28 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object) keyedObjects0);
        org.jfree.chart.JFreeChart jFreeChart29 = null;
        chartChangeEvent28.setChart(jFreeChart29);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list27);
    }

    @Test
    public void test384() throws Throwable {
printRuntimeMSG("---RegressionTest2:test384");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test384");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.lang.String str10 = legendItem8.getURLText();
        java.awt.Paint paint11 = legendItem8.getOutlinePaint();
        java.awt.Paint paint12 = legendItem8.getLabelPaint();
        java.awt.Paint paint13 = legendItem8.getLabelPaint();
        int int14 = legendItem8.getSeriesIndex();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str10.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNull(paint13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test385() throws Throwable {
printRuntimeMSG("---RegressionTest2:test385");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test385");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setTickMarkInsideLength((float) (-1L));
        categoryAxis0.setCategoryMargin((double) (byte) 100);
        java.awt.Paint paint20 = categoryAxis0.getTickLabelPaint();
        org.jfree.chart.LegendItem legendItem22 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color24 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem25 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color24);
        java.lang.String str26 = legendItem25.getToolTipText();
        java.awt.Stroke stroke27 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem25.setOutlineStroke(stroke27);
        legendItem22.setOutlineStroke(stroke27);
        categoryAxis0.setTickMarkStroke(stroke27);
        boolean boolean31 = categoryAxis0.isAxisLineVisible();
        java.awt.Font font33 = categoryAxis0.getTickLabelFont((java.lang.Comparable) (-13.0d));
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(font33);
    }

    @Test
    public void test386() throws Throwable {
printRuntimeMSG("---RegressionTest2:test386");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test386");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke13 = categoryPlot12.getRangeMinorGridlineStroke();
        categoryPlot12.setBackgroundImageAlignment((int) (byte) -1);
        int int16 = categoryPlot12.getDatasetCount();
        java.awt.Paint paint17 = categoryPlot12.getDomainCrosshairPaint();
        barRenderer0.setBasePaint(paint17, false);
        double double20 = barRenderer0.getBase();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(paint17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test387() throws Throwable {
printRuntimeMSG("---RegressionTest2:test387");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test387");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition6 = barRenderer0.getBaseNegativeItemLabelPosition();
        barRenderer0.setBaseCreateEntities(false);
        java.lang.Boolean boolean10 = barRenderer0.getSeriesCreateEntities(0);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNotNull(itemLabelPosition6);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test388() throws Throwable {
printRuntimeMSG("---RegressionTest2:test388");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test388");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        boolean boolean2 = categoryPlot0.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D3 = null;
        java.awt.geom.Rectangle2D rectangle2D4 = null;
        categoryPlot0.drawBackgroundImage(graphics2D3, rectangle2D4);
        java.awt.Graphics2D graphics2D6 = null;
        java.awt.geom.Rectangle2D rectangle2D7 = null;
        categoryPlot0.drawBackgroundImage(graphics2D6, rectangle2D7);
        org.jfree.chart.util.StrokeList strokeList9 = new org.jfree.chart.util.StrokeList();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        java.awt.Paint paint15 = lineAndShapeRenderer12.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator17 = lineAndShapeRenderer12.getSeriesURLGenerator(0);
        boolean boolean18 = strokeList9.equals((java.lang.Object) categoryURLGenerator17);
        java.awt.Stroke stroke20 = strokeList9.getStroke((-12566464));
        strokeList9.clear();
        org.jfree.chart.plot.CategoryPlot categoryPlot23 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke24 = categoryPlot23.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke26 = categoryPlot25.getRangeMinorGridlineStroke();
        categoryPlot23.setParent((org.jfree.chart.plot.Plot) categoryPlot25);
        org.jfree.chart.LegendItemCollection legendItemCollection28 = categoryPlot23.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent29 = null;
        categoryPlot23.axisChanged(axisChangeEvent29);
        org.jfree.chart.axis.AxisSpace axisSpace31 = categoryPlot23.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset32 = null;
        categoryPlot23.setDataset(categoryDataset32);
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot23.setDomainCrosshairStroke(stroke34);
        java.awt.Stroke stroke36 = categoryPlot23.getRangeGridlineStroke();
        strokeList9.setStroke((int) '#', stroke36);
        categoryPlot0.setRangeMinorGridlineStroke(stroke36);
        org.jfree.chart.plot.Marker marker40 = null;
        org.jfree.chart.util.Layer layer41 = null;
        try {
            categoryPlot0.addRangeMarker((-1), marker40, layer41, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(paint15);
        org.junit.Assert.assertNull(categoryURLGenerator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(stroke20);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNull(legendItemCollection28);
        org.junit.Assert.assertNull(axisSpace31);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(stroke36);
    }

    @Test
    public void test389() throws Throwable {
printRuntimeMSG("---RegressionTest2:test389");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test389");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Color color10 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        java.awt.Color color11 = java.awt.Color.getColor("hi!", color10);
        legendItem8.setOutlinePaint((java.awt.Paint) color10);
        int int13 = color10.getRed();
        java.awt.Color color14 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace15 = color14.getColorSpace();
        java.awt.Color color16 = org.jfree.chart.ChartColor.VERY_DARK_RED;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer19.getSeriesCreateEntities((int) 'a');
        java.awt.Color color30 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        int int31 = color30.getTransparency();
        lineAndShapeRenderer19.setSeriesFillPaint(175, (java.awt.Paint) color30);
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color34 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace35 = color34.getColorSpace();
        float[] floatArray42 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray43 = color33.getColorComponents(colorSpace35, floatArray42);
        java.awt.Color color44 = org.jfree.chart.ChartColor.LIGHT_YELLOW;
        java.awt.Color color45 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color46 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace47 = color46.getColorSpace();
        float[] floatArray54 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray55 = color45.getColorComponents(colorSpace47, floatArray54);
        float[] floatArray56 = color44.getComponents(floatArray54);
        float[] floatArray57 = color30.getComponents(colorSpace35, floatArray54);
        float[] floatArray58 = color16.getColorComponents(floatArray57);
        float[] floatArray59 = color10.getComponents(colorSpace15, floatArray58);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(color10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 128 + "'", int13 == 128);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertNotNull(colorSpace15);
        org.junit.Assert.assertNotNull(color16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNotNull(colorSpace35);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNotNull(color45);
        org.junit.Assert.assertNotNull(color46);
        org.junit.Assert.assertNotNull(colorSpace47);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertNotNull(floatArray59);
    }

    @Test
    public void test390() throws Throwable {
printRuntimeMSG("---RegressionTest2:test390");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test390");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition7 = lineAndShapeRenderer2.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean8 = lineAndShapeRenderer2.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = null;
        lineAndShapeRenderer12.setSeriesPositiveItemLabelPosition(0, itemLabelPosition14);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator16 = null;
        lineAndShapeRenderer12.setLegendItemToolTipGenerator(categorySeriesLabelGenerator16);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition18 = lineAndShapeRenderer12.getBasePositiveItemLabelPosition();
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition((int) (byte) 0, itemLabelPosition18, false);
        org.jfree.chart.text.TextAnchor textAnchor21 = itemLabelPosition18.getRotationAnchor();
        org.jfree.chart.renderer.RenderAttributes renderAttributes22 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint23 = renderAttributes22.getDefaultLabelPaint();
        java.awt.Stroke stroke26 = renderAttributes22.getItemStroke((int) (byte) 10, (int) 'a');
        org.jfree.chart.renderer.RenderAttributes renderAttributes27 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint28 = renderAttributes27.getDefaultLabelPaint();
        java.awt.Paint paint31 = renderAttributes27.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke32 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes27.setDefaultStroke(stroke32);
        renderAttributes22.setDefaultOutlineStroke(stroke32);
        boolean boolean35 = itemLabelPosition18.equals((java.lang.Object) stroke32);
        org.junit.Assert.assertNotNull(itemLabelPosition7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(itemLabelPosition18);
        org.junit.Assert.assertNotNull(textAnchor21);
        org.junit.Assert.assertNull(paint23);
        org.junit.Assert.assertNull(stroke26);
        org.junit.Assert.assertNull(paint28);
        org.junit.Assert.assertNull(paint31);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test391() throws Throwable {
printRuntimeMSG("---RegressionTest2:test391");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test391");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        java.awt.Color color6 = org.jfree.chart.ChartColor.LIGHT_BLUE;
        lineAndShapeRenderer2.setSeriesPaint(0, (java.awt.Paint) color6);
        lineAndShapeRenderer2.setDrawOutlines(false);
        java.awt.Paint paint10 = null;
        try {
            lineAndShapeRenderer2.setBaseOutlinePaint(paint10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'paint' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(color6);
    }

    @Test
    public void test392() throws Throwable {
printRuntimeMSG("---RegressionTest2:test392");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test392");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.clearSelection();
        java.util.List list49 = defaultCategoryDataset44.getColumnKeys();
        defaultCategoryDataset44.addValue((double) 100, (java.lang.Comparable) "ChartChangeEventType.GENERAL", (java.lang.Comparable) "UnitType.ABSOLUTE");
        try {
            java.lang.Number number56 = defaultCategoryDataset44.getValue((-196608), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(list49);
    }

    @Test
    public void test393() throws Throwable {
printRuntimeMSG("---RegressionTest2:test393");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test393");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator7 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) (short) 0, categoryURLGenerator7, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
    }

    @Test
    public void test394() throws Throwable {
printRuntimeMSG("---RegressionTest2:test394");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test394");
        java.awt.Color color1 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem2 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color1);
        boolean boolean3 = legendItem2.isLineVisible();
        org.junit.Assert.assertNotNull(color1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test395() throws Throwable {
printRuntimeMSG("---RegressionTest2:test395");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test395");
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation3 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation4 = axisLocation3.getOpposite();
        categoryPlot1.setDomainAxisLocation(axisLocation4, false);
        boolean boolean7 = categoryPlot1.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition13 = null;
        lineAndShapeRenderer11.setSeriesPositiveItemLabelPosition(0, itemLabelPosition13);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator15 = null;
        lineAndShapeRenderer11.setLegendItemToolTipGenerator(categorySeriesLabelGenerator15);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition17 = lineAndShapeRenderer11.getBasePositiveItemLabelPosition();
        boolean boolean18 = lineAndShapeRenderer11.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer11.getBasePositiveItemLabelPosition();
        java.lang.Object obj20 = lineAndShapeRenderer11.clone();
        categoryPlot1.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer11, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator23 = null;
        lineAndShapeRenderer11.setBaseURLGenerator(categoryURLGenerator23);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset25 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range26 = lineAndShapeRenderer11.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset25);
        java.lang.Object obj27 = defaultCategoryDataset25.clone();
        defaultCategoryDataset25.validateObject();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) "SortOrder.ASCENDING", (org.jfree.data.general.Dataset) defaultCategoryDataset25, datasetChangeInfo29);
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertNotNull(axisLocation4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test396() throws Throwable {
printRuntimeMSG("---RegressionTest2:test396");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test396");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        java.lang.String str9 = sortOrder8.toString();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "SortOrder.ASCENDING" + "'", str9.equals("SortOrder.ASCENDING"));
    }

    @Test
    public void test397() throws Throwable {
printRuntimeMSG("---RegressionTest2:test397");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test397");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, (int) (byte) 1, plotRenderingInfo10, categoryCrosshairState11);
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation15 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation16 = axisLocation15.getOpposite();
        categoryPlot13.setDomainAxisLocation(axisLocation16, false);
        boolean boolean19 = categoryPlot13.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition25 = null;
        lineAndShapeRenderer23.setSeriesPositiveItemLabelPosition(0, itemLabelPosition25);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator27 = null;
        lineAndShapeRenderer23.setLegendItemToolTipGenerator(categorySeriesLabelGenerator27);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition29 = lineAndShapeRenderer23.getBasePositiveItemLabelPosition();
        boolean boolean30 = lineAndShapeRenderer23.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition31 = lineAndShapeRenderer23.getBasePositiveItemLabelPosition();
        java.lang.Object obj32 = lineAndShapeRenderer23.clone();
        categoryPlot13.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer23, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator35 = null;
        lineAndShapeRenderer23.setBaseURLGenerator(categoryURLGenerator35);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset37 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range38 = lineAndShapeRenderer23.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset37);
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer39 = categoryPlot0.getRendererForDataset((org.jfree.data.category.CategoryDataset) defaultCategoryDataset37);
        org.jfree.chart.axis.CategoryAxis categoryAxis41 = new org.jfree.chart.axis.CategoryAxis("TextAnchor.HALF_ASCENT_LEFT");
        org.jfree.chart.renderer.category.BarRenderer barRenderer43 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint44 = barRenderer43.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot45 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo48 = null;
        java.awt.geom.Point2D point2D49 = null;
        categoryPlot45.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo48, point2D49);
        categoryPlot45.clearAnnotations();
        boolean boolean52 = barRenderer43.equals((java.lang.Object) categoryPlot45);
        java.awt.Paint paint53 = barRenderer43.getShadowPaint();
        java.awt.Shape shape54 = barRenderer43.getBaseShape();
        barRenderer43.setShadowYOffset(0.0d);
        double double57 = barRenderer43.getMaximumBarWidth();
        java.lang.Boolean boolean59 = barRenderer43.getSeriesCreateEntities(0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer62 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator63 = lineAndShapeRenderer62.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator67 = lineAndShapeRenderer62.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer62.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint71 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer62.setBaseOutlinePaint(paint71);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition76 = lineAndShapeRenderer62.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer43.setNegativeItemLabelPositionFallback(itemLabelPosition76);
        boolean boolean78 = barRenderer43.getIncludeBaseInRange();
        org.jfree.data.category.CategoryDataset categoryDataset79 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis80 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis80.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis83 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer86 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator87 = lineAndShapeRenderer86.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot88 = new org.jfree.chart.plot.CategoryPlot(categoryDataset79, categoryAxis80, valueAxis83, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer86);
        categoryAxis80.setVisible(false);
        java.awt.Font font91 = categoryAxis80.getTickLabelFont();
        barRenderer43.setBaseLegendTextFont(font91);
        categoryAxis41.setTickLabelFont((java.lang.Comparable) 0.2d, font91);
        java.util.List list94 = categoryPlot0.getCategoriesForAxis(categoryAxis41);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(axisLocation15);
        org.junit.Assert.assertNotNull(axisLocation16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNull(range38);
        org.junit.Assert.assertNull(categoryItemRenderer39);
        org.junit.Assert.assertNotNull(paint44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(paint53);
        org.junit.Assert.assertNotNull(shape54);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNull(boolean59);
        org.junit.Assert.assertNull(categoryItemLabelGenerator63);
        org.junit.Assert.assertNull(categoryToolTipGenerator67);
        org.junit.Assert.assertNotNull(paint71);
        org.junit.Assert.assertNotNull(itemLabelPosition76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator87);
        org.junit.Assert.assertNotNull(font91);
        org.junit.Assert.assertNotNull(list94);
    }

    @Test
    public void test398() throws Throwable {
printRuntimeMSG("---RegressionTest2:test398");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test398");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        lineAndShapeRenderer2.setUseSeriesOffset(true);
        int int12 = lineAndShapeRenderer2.getDefaultEntityRadius();
        java.awt.Paint paint13 = lineAndShapeRenderer2.getBaseLegendTextPaint();
        lineAndShapeRenderer2.setSeriesLinesVisible(100, (java.lang.Boolean) false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNull(paint13);
    }

    @Test
    public void test399() throws Throwable {
printRuntimeMSG("---RegressionTest2:test399");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test399");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        categoryAxis1.setVisible(false);
        java.lang.String str13 = categoryAxis1.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions14 = categoryAxis1.getCategoryLabelPositions();
        categoryAxis1.setAxisLineVisible(false);
        org.jfree.chart.util.RectangleInsets rectangleInsets17 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str18 = rectangleInsets17.toString();
        double double19 = rectangleInsets17.getTop();
        categoryAxis1.setTickLabelInsets(rectangleInsets17);
        categoryAxis1.addCategoryLabelToolTip((java.lang.Comparable) "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", "");
        org.jfree.chart.plot.CategoryPlot categoryPlot26 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke27 = categoryPlot26.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation28 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation29 = axisLocation28.getOpposite();
        categoryPlot26.setDomainAxisLocation(axisLocation29, false);
        boolean boolean32 = categoryPlot26.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer36 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition38 = null;
        lineAndShapeRenderer36.setSeriesPositiveItemLabelPosition(0, itemLabelPosition38);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator40 = null;
        lineAndShapeRenderer36.setLegendItemToolTipGenerator(categorySeriesLabelGenerator40);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition42 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        boolean boolean43 = lineAndShapeRenderer36.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition44 = lineAndShapeRenderer36.getBasePositiveItemLabelPosition();
        java.lang.Object obj45 = lineAndShapeRenderer36.clone();
        categoryPlot26.setRenderer((int) (short) 1, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer36, true);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator48 = null;
        lineAndShapeRenderer36.setBaseURLGenerator(categoryURLGenerator48);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset50 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.data.Range range51 = lineAndShapeRenderer36.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset50);
        java.awt.geom.Rectangle2D rectangle2D53 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot54 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke55 = categoryPlot54.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot56 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke57 = categoryPlot56.getRangeMinorGridlineStroke();
        categoryPlot54.setParent((org.jfree.chart.plot.Plot) categoryPlot56);
        org.jfree.chart.LegendItemCollection legendItemCollection59 = categoryPlot54.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent60 = null;
        categoryPlot54.axisChanged(axisChangeEvent60);
        org.jfree.chart.axis.AxisSpace axisSpace62 = categoryPlot54.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset63 = null;
        categoryPlot54.setDataset(categoryDataset63);
        java.awt.Stroke stroke65 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot54.setDomainCrosshairStroke(stroke65);
        java.awt.Stroke stroke67 = categoryPlot54.getRangeGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation68 = categoryPlot54.getRangeAxisLocation();
        org.jfree.chart.util.RectangleEdge rectangleEdge69 = categoryPlot54.getDomainAxisEdge();
        try {
            double double70 = categoryAxis1.getCategorySeriesMiddle((java.lang.Comparable) (-9.0d), (java.lang.Comparable) 0, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset50, (double) 0.0f, rectangle2D53, rectangleEdge69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(categoryLabelPositions14);
        org.junit.Assert.assertNotNull(rectangleInsets17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str18.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2.0d + "'", double19 == 2.0d);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(axisLocation28);
        org.junit.Assert.assertNotNull(axisLocation29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(range51);
        org.junit.Assert.assertNotNull(stroke55);
        org.junit.Assert.assertNotNull(stroke57);
        org.junit.Assert.assertNull(legendItemCollection59);
        org.junit.Assert.assertNull(axisSpace62);
        org.junit.Assert.assertNotNull(stroke65);
        org.junit.Assert.assertNotNull(stroke67);
        org.junit.Assert.assertNotNull(axisLocation68);
        org.junit.Assert.assertNotNull(rectangleEdge69);
    }

    @Test
    public void test400() throws Throwable {
printRuntimeMSG("---RegressionTest2:test400");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test400");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean3 = lineAndShapeRenderer2.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator4 = null;
        lineAndShapeRenderer2.setBaseURLGenerator(categoryURLGenerator4);
        java.lang.Boolean boolean7 = lineAndShapeRenderer2.getSeriesCreateEntities((-16777216));
        boolean boolean8 = lineAndShapeRenderer2.getDrawOutlines();
        org.jfree.chart.renderer.category.BarRenderer barRenderer10 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint11 = barRenderer10.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot12 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo15 = null;
        java.awt.geom.Point2D point2D16 = null;
        categoryPlot12.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo15, point2D16);
        categoryPlot12.clearAnnotations();
        boolean boolean19 = barRenderer10.equals((java.lang.Object) categoryPlot12);
        java.awt.Paint paint20 = barRenderer10.getShadowPaint();
        java.awt.Shape shape21 = barRenderer10.getBaseShape();
        lineAndShapeRenderer2.setSeriesShape(15, shape21);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(paint20);
        org.junit.Assert.assertNotNull(shape21);
    }

    @Test
    public void test401() throws Throwable {
printRuntimeMSG("---RegressionTest2:test401");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test401");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.data.category.CategoryDataset categoryDataset53 = categoryItemEntity47.getDataset();
        categoryItemEntity47.setRowKey((java.lang.Comparable) 10);
        java.lang.String str56 = categoryItemEntity47.getToolTipText();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "ItemLabelAnchor.OUTSIDE9" + "'", str56.equals("ItemLabelAnchor.OUTSIDE9"));
    }

    @Test
    public void test402() throws Throwable {
printRuntimeMSG("---RegressionTest2:test402");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test402");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        java.awt.Color color42 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem43 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape18, (java.awt.Paint) color42);
        legendItem1.setLabelPaint((java.awt.Paint) color42);
        legendItem1.setToolTipText("ItemLabelAnchor.OUTSIDE9");
        java.lang.String str47 = legendItem1.getURLText();
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(color42);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test403() throws Throwable {
printRuntimeMSG("---RegressionTest2:test403");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test403");
        org.jfree.chart.plot.PlotOrientation plotOrientation0 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        java.lang.String str1 = plotOrientation0.toString();
        java.lang.String str2 = plotOrientation0.toString();
        org.junit.Assert.assertNotNull(plotOrientation0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "PlotOrientation.HORIZONTAL" + "'", str1.equals("PlotOrientation.HORIZONTAL"));
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "PlotOrientation.HORIZONTAL" + "'", str2.equals("PlotOrientation.HORIZONTAL"));
    }

    @Test
    public void test404() throws Throwable {
printRuntimeMSG("---RegressionTest2:test404");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test404");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        categoryPlot0.setWeight((int) (byte) 1);
        boolean boolean10 = categoryPlot0.isRangePannable();
        java.awt.Paint paint11 = categoryPlot0.getRangeGridlinePaint();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomRangeAxes((double) 1, plotRenderingInfo13, point2D14, true);
        categoryPlot0.setCrosshairDatasetIndex(0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(paint11);
    }

    @Test
    public void test405() throws Throwable {
printRuntimeMSG("---RegressionTest2:test405");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test405");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        org.jfree.chart.LegendItem legendItem11 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        org.jfree.chart.util.GradientPaintTransformer gradientPaintTransformer12 = legendItem11.getFillPaintTransformer();
        legendItem8.setFillPaintTransformer(gradientPaintTransformer12);
        java.lang.String str14 = legendItem8.getURLText();
        legendItem8.setLineVisible(false);
        java.awt.Color color17 = java.awt.Color.GRAY;
        legendItem8.setLabelPaint((java.awt.Paint) color17);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer21 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean23 = lineAndShapeRenderer21.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean24 = lineAndShapeRenderer21.getBaseLinesVisible();
        lineAndShapeRenderer21.setAutoPopulateSeriesPaint(false);
        java.awt.Color color28 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer21.setSeriesPaint(2, (java.awt.Paint) color28);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator33 = lineAndShapeRenderer32.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator34 = null;
        lineAndShapeRenderer32.setBaseToolTipGenerator(categoryToolTipGenerator34);
        java.awt.Font font37 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer32.setSeriesItemLabelFont((int) (short) 0, font37, true);
        lineAndShapeRenderer21.setBaseLegendTextFont(font37);
        java.awt.Font font41 = lineAndShapeRenderer21.getBaseItemLabelFont();
        legendItem8.setLabelFont(font41);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(gradientPaintTransformer12);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str14.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(color28);
        org.junit.Assert.assertNull(categoryItemLabelGenerator33);
        org.junit.Assert.assertNotNull(font37);
        org.junit.Assert.assertNotNull(font41);
    }

    @Test
    public void test406() throws Throwable {
printRuntimeMSG("---RegressionTest2:test406");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test406");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator20 = lineAndShapeRenderer7.getLegendItemToolTipGenerator();
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(categorySeriesLabelGenerator20);
    }

    @Test
    public void test407() throws Throwable {
printRuntimeMSG("---RegressionTest2:test407");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test407");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        int int2 = keyedObjects2D0.getRowIndex((java.lang.Comparable) true);
        java.util.List list3 = keyedObjects2D0.getColumnKeys();
        java.lang.Object obj4 = null;
        boolean boolean5 = keyedObjects2D0.equals(obj4);
        org.jfree.data.UnknownKeyException unknownKeyException7 = new org.jfree.data.UnknownKeyException("TextAnchor.HALF_ASCENT_LEFT");
        java.lang.Throwable[] throwableArray8 = unknownKeyException7.getSuppressed();
        java.lang.String str9 = unknownKeyException7.toString();
        java.lang.Throwable[] throwableArray10 = unknownKeyException7.getSuppressed();
        keyedObjects2D0.setObject((java.lang.Object) unknownKeyException7, (java.lang.Comparable) "Category Plot", (java.lang.Comparable) "PlotOrientation.VERTICAL");
        java.lang.Object obj14 = keyedObjects2D0.clone();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str9.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test408() throws Throwable {
printRuntimeMSG("---RegressionTest2:test408");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test408");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setMaximumBarWidth((double) 0L);
        java.awt.Font font15 = barRenderer0.getSeriesItemLabelFont((-8355712));
        java.awt.Stroke stroke17 = barRenderer0.lookupSeriesOutlineStroke((int) (byte) 10);
        barRenderer0.setShadowYOffset(0.0d);
        org.jfree.chart.annotations.CategoryAnnotation categoryAnnotation20 = null;
        org.jfree.chart.util.Layer layer21 = null;
        try {
            barRenderer0.addAnnotation(categoryAnnotation20, layer21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'annotation' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertNull(font15);
        org.junit.Assert.assertNotNull(stroke17);
    }

    @Test
    public void test409() throws Throwable {
printRuntimeMSG("---RegressionTest2:test409");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test409");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Paint paint7 = lineAndShapeRenderer2.lookupSeriesOutlinePaint((int) (byte) 1);
        java.awt.Font font8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer2.setBaseLegendTextFont(font8);
        lineAndShapeRenderer2.setBaseCreateEntities(false);
        java.awt.Shape shape13 = lineAndShapeRenderer2.getLegendShape(128);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertNotNull(font8);
        org.junit.Assert.assertNull(shape13);
    }

    @Test
    public void test410() throws Throwable {
printRuntimeMSG("---RegressionTest2:test410");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test410");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        categoryPlot0.drawBackgroundImage(graphics2D7, rectangle2D8);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition21 = lineAndShapeRenderer12.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean22 = lineAndShapeRenderer12.getBaseShapesVisible();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator24 = null;
        lineAndShapeRenderer12.setSeriesURLGenerator((int) (byte) 0, categoryURLGenerator24, false);
        categoryPlot0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        lineAndShapeRenderer12.clearSeriesStrokes(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator30 = null;
        lineAndShapeRenderer12.setBaseItemLabelGenerator(categoryItemLabelGenerator30, false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(itemLabelPosition21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test411() throws Throwable {
printRuntimeMSG("---RegressionTest2:test411");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test411");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes10 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean16 = lineAndShapeRenderer14.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean17 = lineAndShapeRenderer14.getBaseLinesVisible();
        java.awt.Shape shape18 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer14.setBaseLegendShape(shape18);
        renderAttributes10.setSeriesShape((int) ' ', shape18);
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape18, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color25 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem26 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color25);
        java.lang.String str27 = legendItem26.getToolTipText();
        java.awt.Stroke stroke28 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem26.setOutlineStroke(stroke28);
        java.awt.Shape shape34 = null;
        java.awt.Color color35 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke36 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color37 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape34, (java.awt.Paint) color35, stroke36, (java.awt.Paint) color37);
        java.lang.Class<?> wildcardClass39 = color35.getClass();
        org.jfree.chart.LegendItem legendItem40 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape18, paint23, stroke28, (java.awt.Paint) color35);
        org.jfree.chart.entity.ChartEntity chartEntity41 = new org.jfree.chart.entity.ChartEntity(shape18);
        renderAttributes0.setSeriesShape(1, shape18);
        org.jfree.chart.plot.CategoryPlot categoryPlot43 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke44 = categoryPlot43.getRangeMinorGridlineStroke();
        boolean boolean45 = categoryPlot43.isRangeCrosshairLockedOnData();
        org.jfree.chart.entity.PlotEntity plotEntity48 = new org.jfree.chart.entity.PlotEntity(shape18, (org.jfree.chart.plot.Plot) categoryPlot43, "ItemLabelAnchor.OUTSIDE9", "org.jfree.chart.event.ChartChangeEvent[source=-16777216]");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset51 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer54 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        boolean boolean55 = lineAndShapeRenderer54.getUseOutlinePaint();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator56 = null;
        lineAndShapeRenderer54.setBaseURLGenerator(categoryURLGenerator56);
        java.awt.Paint paint61 = lineAndShapeRenderer54.getItemLabelPaint((-65536), 0, false);
        boolean boolean62 = defaultCategoryDataset51.equals((java.lang.Object) false);
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity65 = new org.jfree.chart.entity.CategoryItemEntity(shape18, "AxisLocation.BOTTOM_OR_RIGHT", "ChartEntity: tooltip = ", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset51, (java.lang.Comparable) 1.0f, (java.lang.Comparable) (short) 0);
        try {
            java.lang.Number number68 = defaultCategoryDataset51.getValue(49, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 49, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(shape18);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(stroke28);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(paint61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test412() throws Throwable {
printRuntimeMSG("---RegressionTest2:test412");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test412");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        barRenderer0.setMaximumBarWidth(0.0d);
        barRenderer0.setShadowYOffset(0.0d);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
    }

    @Test
    public void test413() throws Throwable {
printRuntimeMSG("---RegressionTest2:test413");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test413");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        lineAndShapeRenderer2.clearSeriesStrokes(false);
        int int10 = lineAndShapeRenderer2.getRowCount();
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        boolean boolean13 = categoryPlot11.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D14 = null;
        java.awt.geom.Rectangle2D rectangle2D15 = null;
        categoryPlot11.drawBackgroundImage(graphics2D14, rectangle2D15);
        categoryPlot11.clearAnnotations();
        categoryPlot11.configureDomainAxes();
        lineAndShapeRenderer2.setPlot(categoryPlot11);
        java.lang.Object obj20 = categoryPlot11.clone();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test414() throws Throwable {
printRuntimeMSG("---RegressionTest2:test414");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test414");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        org.jfree.chart.plot.CategoryPlot categoryPlot20 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke21 = categoryPlot20.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer22 = null;
        categoryPlot20.setRenderer(categoryItemRenderer22);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent24 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot20);
        org.jfree.chart.util.SortOrder sortOrder25 = categoryPlot20.getColumnRenderingOrder();
        categoryPlot10.setColumnRenderingOrder(sortOrder25);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        java.awt.geom.Point2D point2D29 = null;
        categoryPlot10.zoomRangeAxes(0.0d, plotRenderingInfo28, point2D29);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo32 = null;
        java.awt.geom.Point2D point2D33 = null;
        categoryPlot10.zoomRangeAxes((-4.0d), plotRenderingInfo32, point2D33);
        java.awt.Graphics2D graphics2D35 = null;
        java.awt.geom.Rectangle2D rectangle2D36 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo38 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState39 = null;
        boolean boolean40 = categoryPlot10.render(graphics2D35, rectangle2D36, 0, plotRenderingInfo38, categoryCrosshairState39);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(stroke21);
        org.junit.Assert.assertNotNull(sortOrder25);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test415() throws Throwable {
printRuntimeMSG("---RegressionTest2:test415");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test415");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer9.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean12 = lineAndShapeRenderer9.getBaseLinesVisible();
        lineAndShapeRenderer9.setAutoPopulateSeriesPaint(false);
        java.awt.Color color16 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer9.setSeriesPaint(2, (java.awt.Paint) color16);
        categoryPlot0.setRangeZeroBaselinePaint((java.awt.Paint) color16);
        org.jfree.chart.axis.AxisLocation axisLocation19 = categoryPlot0.getRangeAxisLocation();
        java.awt.Paint paint20 = categoryPlot0.getRangeCrosshairPaint();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(color16);
        org.junit.Assert.assertNotNull(axisLocation19);
        org.junit.Assert.assertNotNull(paint20);
    }

    @Test
    public void test416() throws Throwable {
printRuntimeMSG("---RegressionTest2:test416");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test416");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        java.awt.Font font12 = lineAndShapeRenderer2.getSeriesItemLabelFont(5);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator14 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator(1, categoryURLGenerator14, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(font12);
    }

    @Test
    public void test417() throws Throwable {
printRuntimeMSG("---RegressionTest2:test417");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test417");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) -1);
        java.awt.Paint paint4 = categoryPlot0.getOutlinePaint();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(paint4);
    }

    @Test
    public void test418() throws Throwable {
printRuntimeMSG("---RegressionTest2:test418");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test418");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator9 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator9);
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot13 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke14 = categoryPlot13.getRangeMinorGridlineStroke();
        categoryPlot11.setParent((org.jfree.chart.plot.Plot) categoryPlot13);
        org.jfree.chart.plot.Plot plot16 = categoryPlot11.getParent();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator20 = lineAndShapeRenderer19.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator21 = null;
        lineAndShapeRenderer19.setBaseToolTipGenerator(categoryToolTipGenerator21);
        java.awt.Font font24 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer19.setSeriesItemLabelFont((int) (short) 0, font24, true);
        java.lang.Boolean boolean28 = lineAndShapeRenderer19.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint29 = lineAndShapeRenderer19.getBaseItemLabelPaint();
        categoryPlot11.setRangeMinorGridlinePaint(paint29);
        lineAndShapeRenderer2.removeChangeListener((org.jfree.chart.event.RendererChangeListener) categoryPlot11);
        org.jfree.chart.axis.AxisLocation axisLocation32 = categoryPlot11.getDomainAxisLocation();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNotNull(stroke14);
        org.junit.Assert.assertNotNull(plot16);
        org.junit.Assert.assertNull(categoryItemLabelGenerator20);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(paint29);
        org.junit.Assert.assertNotNull(axisLocation32);
    }

    @Test
    public void test419() throws Throwable {
printRuntimeMSG("---RegressionTest2:test419");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test419");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = null;
        categoryPlot0.datasetChanged(datasetChangeEvent4);
        org.jfree.data.category.CategoryDataset categoryDataset7 = categoryPlot0.getDataset((int) '4');
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        double double9 = categoryAxis8.getUpperMargin();
        int int10 = categoryPlot0.getDomainAxisIndex(categoryAxis8);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo13 = null;
        java.awt.geom.Point2D point2D14 = null;
        categoryPlot0.zoomDomainAxes((double) (short) -1, 2.0d, plotRenderingInfo13, point2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo19 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState20 = null;
        boolean boolean21 = categoryPlot0.render(graphics2D16, rectangle2D17, (int) (byte) 100, plotRenderingInfo19, categoryCrosshairState20);
        categoryPlot0.setDomainCrosshairColumnKey((java.lang.Comparable) (byte) 100);
        org.jfree.chart.renderer.category.BarRenderer barRenderer25 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint26 = barRenderer25.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot27 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo30 = null;
        java.awt.geom.Point2D point2D31 = null;
        categoryPlot27.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo30, point2D31);
        categoryPlot27.clearAnnotations();
        boolean boolean34 = barRenderer25.equals((java.lang.Object) categoryPlot27);
        double double35 = barRenderer25.getMaximumBarWidth();
        java.awt.Stroke stroke37 = barRenderer25.lookupSeriesStroke((-1));
        java.awt.Paint paint38 = barRenderer25.getShadowPaint();
        barRenderer25.setBaseItemLabelsVisible(false, false);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset42 = new org.jfree.data.category.DefaultCategoryDataset();
        defaultCategoryDataset42.fireSelectionEvent();
        org.jfree.data.Range range44 = barRenderer25.findRangeBounds((org.jfree.data.category.CategoryDataset) defaultCategoryDataset42);
        categoryPlot0.setRenderer((int) (short) 0, (org.jfree.chart.renderer.category.CategoryItemRenderer) barRenderer25, true);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.05d + "'", double9 == 0.05d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(paint26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(paint38);
        org.junit.Assert.assertNull(range44);
    }

    @Test
    public void test420() throws Throwable {
printRuntimeMSG("---RegressionTest2:test420");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test420");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        java.awt.Paint paint3 = categoryPlot0.getRangeCrosshairPaint();
        categoryPlot0.setRangeZeroBaselineVisible(false);
        categoryPlot0.setRangeGridlinesVisible(false);
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNotNull(paint3);
    }

    @Test
    public void test421() throws Throwable {
printRuntimeMSG("---RegressionTest2:test421");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test421");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects0.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation7 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation8 = axisLocation7.getOpposite();
        categoryPlot5.setDomainAxisLocation(axisLocation8, false);
        boolean boolean11 = categoryPlot5.canSelectByRegion();
        categoryPlot5.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo17 = null;
        java.awt.geom.Point2D point2D18 = null;
        categoryPlot14.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo17, point2D18);
        categoryPlot14.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder22 = categoryPlot14.getRowRenderingOrder();
        categoryPlot5.setRowRenderingOrder(sortOrder22);
        boolean boolean25 = sortOrder22.equals((java.lang.Object) 4);
        keyedObjects0.sortByObjects(sortOrder22);
        java.util.List list27 = keyedObjects0.getKeys();
        keyedObjects0.clear();
        java.lang.Object obj30 = null;
        keyedObjects0.addObject((java.lang.Comparable) (-1.0d), obj30);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(axisLocation7);
        org.junit.Assert.assertNotNull(axisLocation8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(sortOrder22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(list27);
    }

    @Test
    public void test422() throws Throwable {
printRuntimeMSG("---RegressionTest2:test422");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test422");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition2 = barRenderer0.getPositiveItemLabelPositionFallback();
        double double3 = barRenderer0.getMaximumBarWidth();
        java.awt.Shape shape4 = barRenderer0.getBaseShape();
        org.jfree.chart.entity.ChartEntity chartEntity5 = new org.jfree.chart.entity.ChartEntity(shape4);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(itemLabelPosition2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(shape4);
    }

    @Test
    public void test423() throws Throwable {
printRuntimeMSG("---RegressionTest2:test423");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test423");
        org.jfree.chart.plot.PlotOrientation plotOrientation0 = org.jfree.chart.plot.PlotOrientation.HORIZONTAL;
        java.lang.Object obj1 = null;
        boolean boolean2 = plotOrientation0.equals(obj1);
        org.junit.Assert.assertNotNull(plotOrientation0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test424() throws Throwable {
printRuntimeMSG("---RegressionTest2:test424");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test424");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        org.jfree.chart.util.Layer layer13 = null;
        java.util.Collection collection14 = categoryPlot0.getRangeMarkers(layer13);
        org.jfree.chart.plot.DatasetRenderingOrder datasetRenderingOrder15 = categoryPlot0.getDatasetRenderingOrder();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNull(collection14);
        org.junit.Assert.assertNotNull(datasetRenderingOrder15);
    }

    @Test
    public void test425() throws Throwable {
printRuntimeMSG("---RegressionTest2:test425");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test425");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        org.jfree.chart.axis.CategoryAxis categoryAxis10 = null;
        java.util.List list11 = categoryPlot0.getCategoriesForAxis(categoryAxis10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = null;
        categoryPlot0.notifyListeners(plotChangeEvent12);
        org.jfree.chart.event.PlotChangeListener plotChangeListener14 = null;
        categoryPlot0.addChangeListener(plotChangeListener14);
        org.jfree.data.category.CategoryDataset categoryDataset17 = categoryPlot0.getDataset(4);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(categoryDataset17);
    }

    @Test
    public void test426() throws Throwable {
printRuntimeMSG("---RegressionTest2:test426");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test426");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        org.jfree.data.KeyedObjects keyedObjects11 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.renderer.RenderAttributes renderAttributes14 = new org.jfree.chart.renderer.RenderAttributes(true);
        keyedObjects11.setObject((java.lang.Comparable) true, (java.lang.Object) true);
        org.jfree.chart.plot.CategoryPlot categoryPlot16 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke17 = categoryPlot16.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation18 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation19 = axisLocation18.getOpposite();
        categoryPlot16.setDomainAxisLocation(axisLocation19, false);
        boolean boolean22 = categoryPlot16.canSelectByRegion();
        categoryPlot16.setForegroundAlpha((float) '#');
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        java.awt.geom.Point2D point2D29 = null;
        categoryPlot25.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo28, point2D29);
        categoryPlot25.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder33 = categoryPlot25.getRowRenderingOrder();
        categoryPlot16.setRowRenderingOrder(sortOrder33);
        boolean boolean36 = sortOrder33.equals((java.lang.Object) 4);
        keyedObjects11.sortByObjects(sortOrder33);
        java.util.List list38 = keyedObjects11.getKeys();
        org.jfree.chart.event.ChartChangeEvent chartChangeEvent39 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object) keyedObjects11);
        boolean boolean40 = legendItem8.equals((java.lang.Object) keyedObjects11);
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
        org.junit.Assert.assertNotNull(stroke17);
        org.junit.Assert.assertNotNull(axisLocation18);
        org.junit.Assert.assertNotNull(axisLocation19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(sortOrder33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test427() throws Throwable {
printRuntimeMSG("---RegressionTest2:test427");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test427");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition4 = null;
        lineAndShapeRenderer2.setSeriesPositiveItemLabelPosition(0, itemLabelPosition4);
        org.jfree.chart.labels.CategorySeriesLabelGenerator categorySeriesLabelGenerator6 = null;
        lineAndShapeRenderer2.setLegendItemToolTipGenerator(categorySeriesLabelGenerator6);
        lineAndShapeRenderer2.clearSeriesStrokes(false);
        int int10 = lineAndShapeRenderer2.getRowCount();
        lineAndShapeRenderer2.setBaseItemLabelsVisible(false);
        java.awt.Stroke stroke13 = lineAndShapeRenderer2.getBaseStroke();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean19 = lineAndShapeRenderer17.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean20 = lineAndShapeRenderer17.getBaseLinesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator24 = lineAndShapeRenderer23.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator25 = null;
        lineAndShapeRenderer23.setBaseToolTipGenerator(categoryToolTipGenerator25);
        java.awt.Font font28 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer23.setSeriesItemLabelFont((int) (short) 0, font28, true);
        lineAndShapeRenderer17.setBaseLegendTextFont(font28);
        lineAndShapeRenderer2.setLegendTextFont(8, font28);
        java.awt.Paint paint33 = lineAndShapeRenderer2.getBaseFillPaint();
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator34 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator24);
        org.junit.Assert.assertNotNull(font28);
        org.junit.Assert.assertNotNull(paint33);
        org.junit.Assert.assertNull(categoryItemLabelGenerator34);
    }

    @Test
    public void test428() throws Throwable {
printRuntimeMSG("---RegressionTest2:test428");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test428");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint9 = lineAndShapeRenderer2.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition10 = lineAndShapeRenderer2.getBasePositiveItemLabelPosition();
        java.awt.Paint paint11 = lineAndShapeRenderer2.getBaseOutlinePaint();
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 0, false);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator15 = lineAndShapeRenderer2.getBaseURLGenerator();
        java.awt.Font font16 = lineAndShapeRenderer2.getBaseItemLabelFont();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(itemLabelPosition10);
        org.junit.Assert.assertNotNull(paint11);
        org.junit.Assert.assertNull(categoryURLGenerator15);
        org.junit.Assert.assertNotNull(font16);
    }

    @Test
    public void test429() throws Throwable {
printRuntimeMSG("---RegressionTest2:test429");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test429");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        categoryPlot2.setDomainCrosshairColumnKey((java.lang.Comparable) (-1L), true);
        categoryPlot2.mapDatasetToRangeAxis((int) 'a', (int) (short) 0);
        boolean boolean11 = categoryPlot2.isRangeCrosshairVisible();
        org.jfree.chart.util.RectangleEdge rectangleEdge13 = categoryPlot2.getDomainAxisEdge(0);
        float float14 = categoryPlot2.getBackgroundImageAlpha();
        org.jfree.chart.plot.CategoryMarker categoryMarker15 = null;
        try {
            categoryPlot2.addDomainMarker(categoryMarker15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' not permitted.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(rectangleEdge13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.5f + "'", float14 == 0.5f);
    }

    @Test
    public void test430() throws Throwable {
printRuntimeMSG("---RegressionTest2:test430");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test430");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        org.jfree.chart.plot.CategoryPlot categoryPlot5 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke6 = categoryPlot5.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot7 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke8 = categoryPlot7.getRangeMinorGridlineStroke();
        categoryPlot5.setParent((org.jfree.chart.plot.Plot) categoryPlot7);
        org.jfree.chart.LegendItemCollection legendItemCollection10 = categoryPlot5.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent11 = null;
        categoryPlot5.axisChanged(axisChangeEvent11);
        org.jfree.chart.axis.AxisSpace axisSpace13 = categoryPlot5.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset14 = null;
        categoryPlot5.setDataset(categoryDataset14);
        java.awt.Stroke stroke16 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot5.setDomainCrosshairStroke(stroke16);
        java.awt.Stroke stroke18 = categoryPlot5.getRangeGridlineStroke();
        lineAndShapeRenderer2.setBaseStroke(stroke18);
        boolean boolean23 = lineAndShapeRenderer2.getItemCreateEntity((int) 'a', (-1), false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer26 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator27 = lineAndShapeRenderer26.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator28 = null;
        lineAndShapeRenderer26.setBaseToolTipGenerator(categoryToolTipGenerator28);
        java.awt.Font font31 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer26.setSeriesItemLabelFont((int) (short) 0, font31, true);
        java.lang.Boolean boolean35 = lineAndShapeRenderer26.getSeriesCreateEntities((int) 'a');
        org.jfree.chart.event.RendererChangeEvent rendererChangeEvent36 = null;
        lineAndShapeRenderer26.notifyListeners(rendererChangeEvent36);
        org.jfree.chart.plot.CategoryPlot categoryPlot38 = lineAndShapeRenderer26.getPlot();
        int int39 = lineAndShapeRenderer26.getRowCount();
        org.jfree.chart.renderer.RenderAttributes renderAttributes40 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint41 = renderAttributes40.getDefaultLabelPaint();
        java.awt.Paint paint44 = renderAttributes40.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke45 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes40.setDefaultStroke(stroke45);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer49 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean51 = lineAndShapeRenderer49.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean52 = lineAndShapeRenderer49.getBaseLinesVisible();
        java.awt.Shape shape53 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer49.setBaseLegendShape(shape53);
        renderAttributes40.setDefaultShape(shape53);
        lineAndShapeRenderer26.setBaseShape(shape53, true);
        lineAndShapeRenderer2.setBaseShape(shape53);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNull(legendItemCollection10);
        org.junit.Assert.assertNull(axisSpace13);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator27);
        org.junit.Assert.assertNotNull(font31);
        org.junit.Assert.assertNull(boolean35);
        org.junit.Assert.assertNull(categoryPlot38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(paint41);
        org.junit.Assert.assertNull(paint44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(shape53);
    }

    @Test
    public void test431() throws Throwable {
printRuntimeMSG("---RegressionTest2:test431");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test431");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke11 = categoryPlot10.getRangeMinorGridlineStroke();
        boolean boolean12 = categoryPlot10.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        categoryPlot10.drawBackgroundImage(graphics2D13, rectangle2D14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot10.drawBackgroundImage(graphics2D16, rectangle2D17);
        lineAndShapeRenderer7.setPlot(categoryPlot10);
        categoryPlot10.setRangeCrosshairValue(0.0d);
        org.jfree.chart.plot.PlotOrientation plotOrientation22 = categoryPlot10.getOrientation();
        java.awt.Paint paint23 = categoryPlot10.getRangeMinorGridlinePaint();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo25 = null;
        java.awt.geom.Point2D point2D26 = null;
        categoryPlot10.zoomRangeAxes((double) 0.5f, plotRenderingInfo25, point2D26, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(plotOrientation22);
        org.junit.Assert.assertNotNull(paint23);
    }

    @Test
    public void test432() throws Throwable {
printRuntimeMSG("---RegressionTest2:test432");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test432");
        org.jfree.data.KeyedObjects2D keyedObjects2D0 = new org.jfree.data.KeyedObjects2D();
        java.awt.Color color2 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem3 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color2);
        java.awt.color.ColorSpace colorSpace4 = color2.getColorSpace();
        keyedObjects2D0.addObject((java.lang.Object) colorSpace4, (java.lang.Comparable) (-4.0d), (java.lang.Comparable) (-4.0d));
        org.jfree.chart.plot.CategoryPlot categoryPlot8 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke9 = categoryPlot8.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer10 = null;
        categoryPlot8.setRenderer(categoryItemRenderer10);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent12 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot8);
        categoryPlot8.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D15 = null;
        java.awt.geom.Rectangle2D rectangle2D16 = null;
        categoryPlot8.drawBackgroundImage(graphics2D15, rectangle2D16);
        org.jfree.chart.plot.Plot plot18 = categoryPlot8.getRootPlot();
        boolean boolean19 = keyedObjects2D0.equals((java.lang.Object) plot18);
        java.awt.Shape shape24 = null;
        java.awt.Color color25 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color27 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem28 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape24, (java.awt.Paint) color25, stroke26, (java.awt.Paint) color27);
        java.awt.Paint paint29 = legendItem28.getLabelPaint();
        java.lang.String str30 = legendItem28.getURLText();
        java.awt.Shape shape31 = legendItem28.getShape();
        boolean boolean32 = legendItem28.isShapeOutlineVisible();
        legendItem28.setDatasetIndex((int) '4');
        keyedObjects2D0.addObject((java.lang.Object) '4', (java.lang.Comparable) 4.0d, (java.lang.Comparable) (short) 0);
        java.lang.Object obj38 = keyedObjects2D0.clone();
        try {
            java.lang.Comparable comparable40 = keyedObjects2D0.getRowKey((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(colorSpace4);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertNotNull(plot18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNull(paint29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT" + "'", str30.equals("org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT"));
        org.junit.Assert.assertNull(shape31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test433() throws Throwable {
printRuntimeMSG("---RegressionTest2:test433");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test433");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setAutoPopulateSeriesShape(false);
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = lineAndShapeRenderer2.getPlot();
        java.awt.Paint paint12 = lineAndShapeRenderer2.getLegendTextPaint(1);
        java.awt.Graphics2D graphics2D13 = null;
        java.awt.geom.Rectangle2D rectangle2D14 = null;
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        boolean boolean17 = categoryPlot15.isRangeCrosshairLockedOnData();
        java.awt.Graphics2D graphics2D18 = null;
        java.awt.geom.Rectangle2D rectangle2D19 = null;
        categoryPlot15.drawBackgroundImage(graphics2D18, rectangle2D19);
        java.awt.Graphics2D graphics2D21 = null;
        java.awt.geom.Rectangle2D rectangle2D22 = null;
        categoryPlot15.drawBackgroundImage(graphics2D21, rectangle2D22);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset24 = new org.jfree.data.category.DefaultCategoryDataset();
        int int25 = defaultCategoryDataset24.getRowCount();
        org.jfree.data.category.CategoryDatasetSelectionState categoryDatasetSelectionState26 = null;
        defaultCategoryDataset24.setSelectionState(categoryDatasetSelectionState26);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        org.jfree.chart.renderer.category.CategoryItemRendererState categoryItemRendererState29 = lineAndShapeRenderer2.initialise(graphics2D13, rectangle2D14, categoryPlot15, (org.jfree.data.category.CategoryDataset) defaultCategoryDataset24, plotRenderingInfo28);
        org.jfree.chart.axis.AxisLocation axisLocation31 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation32 = axisLocation31.getOpposite();
        categoryPlot15.setRangeAxisLocation((int) (byte) 0, axisLocation31, false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(categoryPlot10);
        org.junit.Assert.assertNull(paint12);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(categoryItemRendererState29);
        org.junit.Assert.assertNotNull(axisLocation31);
        org.junit.Assert.assertNotNull(axisLocation32);
    }

    @Test
    public void test434() throws Throwable {
printRuntimeMSG("---RegressionTest2:test434");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test434");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.plot.PlotOrientation plotOrientation6 = categoryPlot0.getOrientation();
        categoryPlot0.setNoDataMessage("TextAnchor.HALF_ASCENT_LEFT");
        org.jfree.chart.axis.CategoryAxis categoryAxis9 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset10 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis11.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis14 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator18 = lineAndShapeRenderer17.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot(categoryDataset10, categoryAxis11, valueAxis14, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer17);
        boolean boolean20 = categoryAxis11.isTickLabelsVisible();
        double double21 = categoryAxis11.getFixedDimension();
        java.awt.Paint paint23 = categoryAxis11.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis9.setTickLabelPaint(paint23);
        categoryAxis9.setLabelToolTip("hi!");
        int int27 = categoryAxis9.getCategoryLabelPositionOffset();
        categoryAxis9.setVisible(false);
        categoryPlot0.setDomainAxis(categoryAxis9);
        boolean boolean31 = categoryAxis9.isTickMarksVisible();
        org.junit.Assert.assertNotNull(plotOrientation6);
        org.junit.Assert.assertNull(categoryItemLabelGenerator18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test435() throws Throwable {
printRuntimeMSG("---RegressionTest2:test435");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test435");
        org.jfree.data.SelectableValue selectableValue2 = new org.jfree.data.SelectableValue((java.lang.Number) 8, false);
        selectableValue2.setSelected(false);
    }

    @Test
    public void test436() throws Throwable {
printRuntimeMSG("---RegressionTest2:test436");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test436");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition13 = null;
        lineAndShapeRenderer11.setSeriesPositiveItemLabelPosition(0, itemLabelPosition13);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = lineAndShapeRenderer11.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean17 = lineAndShapeRenderer11.getUseFillPaint();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator21 = lineAndShapeRenderer20.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator22 = null;
        lineAndShapeRenderer20.setBaseToolTipGenerator(categoryToolTipGenerator22);
        java.awt.Font font25 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer20.setSeriesItemLabelFont((int) (short) 0, font25, true);
        lineAndShapeRenderer11.setBaseLegendTextFont(font25);
        lineAndShapeRenderer2.setBaseItemLabelFont(font25, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator21);
        org.junit.Assert.assertNotNull(font25);
    }

    @Test
    public void test437() throws Throwable {
printRuntimeMSG("---RegressionTest2:test437");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test437");
        org.jfree.chart.renderer.RenderAttributes renderAttributes1 = new org.jfree.chart.renderer.RenderAttributes(true);
        java.awt.Shape shape4 = renderAttributes1.getItemShape((int) '4', (int) (byte) 100);
        java.awt.Stroke stroke6 = renderAttributes1.getSeriesStroke((int) (short) 0);
        java.awt.Stroke stroke7 = renderAttributes1.getDefaultOutlineStroke();
        java.awt.Stroke stroke8 = renderAttributes1.getDefaultOutlineStroke();
        boolean boolean9 = renderAttributes1.getAllowNull();
        org.junit.Assert.assertNull(shape4);
        org.junit.Assert.assertNull(stroke6);
        org.junit.Assert.assertNull(stroke7);
        org.junit.Assert.assertNull(stroke8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test438() throws Throwable {
printRuntimeMSG("---RegressionTest2:test438");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test438");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        boolean boolean13 = lineAndShapeRenderer2.getBaseSeriesVisible();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition14 = lineAndShapeRenderer2.getBaseNegativeItemLabelPosition();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(itemLabelPosition14);
    }

    @Test
    public void test439() throws Throwable {
printRuntimeMSG("---RegressionTest2:test439");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test439");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Shape shape10 = barRenderer0.getBaseShape();
        boolean boolean11 = barRenderer0.getBaseCreateEntities();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shape10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test440() throws Throwable {
printRuntimeMSG("---RegressionTest2:test440");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test440");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation4 = categoryPlot0.getOrientation();
        org.jfree.chart.renderer.category.BarRenderer barRenderer6 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint7 = barRenderer6.getShadowPaint();
        boolean boolean8 = barRenderer6.getBaseSeriesVisible();
        categoryPlot0.setRenderer((int) (short) 100, (org.jfree.chart.renderer.category.CategoryItemRenderer) barRenderer6);
        double double10 = barRenderer6.getShadowXOffset();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer14 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator15 = lineAndShapeRenderer14.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator19 = lineAndShapeRenderer14.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer14.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer14.setBaseOutlinePaint(paint23);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition28 = lineAndShapeRenderer14.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer6.setSeriesNegativeItemLabelPosition(0, itemLabelPosition28);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer32 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator33 = lineAndShapeRenderer32.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator37 = lineAndShapeRenderer32.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer32.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.awt.Paint paint41 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
        lineAndShapeRenderer32.setBaseOutlinePaint(paint41);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition46 = lineAndShapeRenderer32.getNegativeItemLabelPosition((int) (byte) 10, (int) (short) 100, true);
        barRenderer6.setNegativeItemLabelPositionFallback(itemLabelPosition46);
        org.jfree.chart.text.TextAnchor textAnchor48 = itemLabelPosition46.getTextAnchor();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plotOrientation4);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.0d + "'", double10 == 4.0d);
        org.junit.Assert.assertNull(categoryItemLabelGenerator15);
        org.junit.Assert.assertNull(categoryToolTipGenerator19);
        org.junit.Assert.assertNotNull(paint23);
        org.junit.Assert.assertNotNull(itemLabelPosition28);
        org.junit.Assert.assertNull(categoryItemLabelGenerator33);
        org.junit.Assert.assertNull(categoryToolTipGenerator37);
        org.junit.Assert.assertNotNull(paint41);
        org.junit.Assert.assertNotNull(itemLabelPosition46);
        org.junit.Assert.assertNotNull(textAnchor48);
    }

    @Test
    public void test441() throws Throwable {
printRuntimeMSG("---RegressionTest2:test441");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test441");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        java.awt.Font font8 = lineAndShapeRenderer2.getBaseLegendTextFont();
        java.lang.Boolean boolean10 = lineAndShapeRenderer2.getSeriesShapesVisible((int) (short) 10);
        boolean boolean11 = lineAndShapeRenderer2.getAutoPopulateSeriesOutlinePaint();
        lineAndShapeRenderer2.setAutoPopulateSeriesFillPaint(true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(font8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test442() throws Throwable {
printRuntimeMSG("---RegressionTest2:test442");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test442");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.clearCategoryLabelToolTips();
        org.jfree.chart.plot.Plot plot17 = categoryAxis0.getPlot();
        java.awt.Paint paint18 = categoryAxis0.getTickLabelPaint();
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertNull(plot17);
        org.junit.Assert.assertNotNull(paint18);
    }

    @Test
    public void test443() throws Throwable {
printRuntimeMSG("---RegressionTest2:test443");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test443");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Paint paint4 = renderAttributes0.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke5 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes0.setDefaultStroke(stroke5);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer9 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer9.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean12 = lineAndShapeRenderer9.getBaseLinesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes18 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer22 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean24 = lineAndShapeRenderer22.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean25 = lineAndShapeRenderer22.getBaseLinesVisible();
        java.awt.Shape shape26 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer22.setBaseLegendShape(shape26);
        renderAttributes18.setSeriesShape((int) ' ', shape26);
        org.jfree.chart.entity.ChartEntity chartEntity30 = new org.jfree.chart.entity.ChartEntity(shape26, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint31 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color33 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem34 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color33);
        java.lang.String str35 = legendItem34.getToolTipText();
        java.awt.Stroke stroke36 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem34.setOutlineStroke(stroke36);
        java.awt.Shape shape42 = null;
        java.awt.Color color43 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke44 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color45 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem46 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape42, (java.awt.Paint) color43, stroke44, (java.awt.Paint) color45);
        java.lang.Class<?> wildcardClass47 = color43.getClass();
        org.jfree.chart.LegendItem legendItem48 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape26, paint31, stroke36, (java.awt.Paint) color43);
        lineAndShapeRenderer9.setLegendShape(0, shape26);
        lineAndShapeRenderer9.setSeriesVisible(4, (java.lang.Boolean) true);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer56 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator57 = lineAndShapeRenderer56.getBaseItemLabelGenerator();
        java.awt.Paint paint59 = lineAndShapeRenderer56.lookupSeriesFillPaint((int) (short) 100);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator61 = lineAndShapeRenderer56.getSeriesURLGenerator(0);
        lineAndShapeRenderer56.setItemLabelAnchorOffset((double) '4');
        org.jfree.chart.plot.CategoryPlot categoryPlot64 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke65 = categoryPlot64.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot66 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke67 = categoryPlot66.getRangeMinorGridlineStroke();
        categoryPlot64.setParent((org.jfree.chart.plot.Plot) categoryPlot66);
        org.jfree.chart.LegendItemCollection legendItemCollection69 = categoryPlot64.getFixedLegendItems();
        java.lang.Comparable comparable70 = categoryPlot64.getDomainCrosshairRowKey();
        org.jfree.data.category.CategoryDataset categoryDataset72 = categoryPlot64.getDataset((int) (short) 1);
        categoryPlot64.setRangeCrosshairLockedOnData(false);
        categoryPlot64.setBackgroundImageAlignment(1);
        org.jfree.chart.renderer.RenderAttributes renderAttributes77 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint78 = renderAttributes77.getDefaultLabelPaint();
        java.awt.Stroke stroke81 = renderAttributes77.getItemStroke((int) (byte) 10, (int) 'a');
        org.jfree.chart.renderer.RenderAttributes renderAttributes82 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint83 = renderAttributes82.getDefaultLabelPaint();
        java.awt.Paint paint86 = renderAttributes82.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke87 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes82.setDefaultStroke(stroke87);
        renderAttributes77.setDefaultOutlineStroke(stroke87);
        categoryPlot64.setDomainCrosshairStroke(stroke87);
        lineAndShapeRenderer56.setBaseOutlineStroke(stroke87, false);
        lineAndShapeRenderer9.setSeriesOutlineStroke(3, stroke87, false);
        renderAttributes0.setDefaultStroke(stroke87);
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNotNull(stroke5);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(shape26);
        org.junit.Assert.assertNotNull(paint31);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(stroke36);
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(stroke44);
        org.junit.Assert.assertNotNull(color45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(categoryItemLabelGenerator57);
        org.junit.Assert.assertNotNull(paint59);
        org.junit.Assert.assertNull(categoryURLGenerator61);
        org.junit.Assert.assertNotNull(stroke65);
        org.junit.Assert.assertNotNull(stroke67);
        org.junit.Assert.assertNull(legendItemCollection69);
        org.junit.Assert.assertNull(comparable70);
        org.junit.Assert.assertNull(categoryDataset72);
        org.junit.Assert.assertNull(paint78);
        org.junit.Assert.assertNull(stroke81);
        org.junit.Assert.assertNull(paint83);
        org.junit.Assert.assertNull(paint86);
        org.junit.Assert.assertNotNull(stroke87);
    }

    @Test
    public void test444() throws Throwable {
printRuntimeMSG("---RegressionTest2:test444");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test444");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        org.jfree.data.category.CategoryDataset categoryDataset5 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis6 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis6.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator13 = lineAndShapeRenderer12.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot14 = new org.jfree.chart.plot.CategoryPlot(categoryDataset5, categoryAxis6, valueAxis9, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        java.util.List list15 = categoryPlot0.getCategoriesForAxis(categoryAxis6);
        java.awt.Paint paint16 = categoryAxis6.getTickLabelPaint();
        categoryAxis6.setFixedDimension(3.0d);
        float float19 = categoryAxis6.getMinorTickMarkInsideLength();
        categoryAxis6.setLabelURL("ChartChangeEventType.NEW_DATASET");
        int int22 = categoryAxis6.getCategoryLabelPositionOffset();
        java.awt.Paint paint23 = categoryAxis6.getLabelPaint();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(categoryItemLabelGenerator13);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(paint16);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(paint23);
    }

    @Test
    public void test445() throws Throwable {
printRuntimeMSG("---RegressionTest2:test445");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test445");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.lang.Boolean boolean11 = lineAndShapeRenderer2.getSeriesCreateEntities((int) 'a');
        java.awt.Paint paint12 = lineAndShapeRenderer2.getBaseItemLabelPaint();
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = null;
        lineAndShapeRenderer2.setSeriesItemLabelGenerator((int) (short) 0, categoryItemLabelGenerator14);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis18 = new org.jfree.chart.axis.CategoryAxis();
        double double19 = categoryAxis18.getUpperMargin();
        categoryAxis18.addCategoryLabelToolTip((java.lang.Comparable) 'a', "");
        double double23 = categoryAxis18.getLabelAngle();
        org.jfree.chart.axis.ValueAxis valueAxis24 = null;
        org.jfree.chart.util.Layer layer25 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo26 = null;
        try {
            lineAndShapeRenderer2.drawAnnotations(graphics2D16, rectangle2D17, categoryAxis18, valueAxis24, layer25, plotRenderingInfo26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(paint12);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.05d + "'", double19 == 0.05d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test446() throws Throwable {
printRuntimeMSG("---RegressionTest2:test446");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test446");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint1 = renderAttributes0.getDefaultLabelPaint();
        java.awt.Stroke stroke4 = renderAttributes0.getItemStroke((int) (byte) 10, (int) 'a');
        java.awt.Paint paint7 = renderAttributes0.getItemOutlinePaint((-16777216), 0);
        java.awt.Stroke stroke10 = renderAttributes0.getItemStroke((int) (short) 10, (int) (short) -1);
        java.awt.Paint paint11 = renderAttributes0.getDefaultOutlinePaint();
        org.junit.Assert.assertNull(paint1);
        org.junit.Assert.assertNull(stroke4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNull(stroke10);
        org.junit.Assert.assertNull(paint11);
    }

    @Test
    public void test447() throws Throwable {
printRuntimeMSG("---RegressionTest2:test447");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test447");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        lineAndShapeRenderer2.setUseSeriesOffset(true);
        boolean boolean12 = lineAndShapeRenderer2.getBaseShapesFilled();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test448() throws Throwable {
printRuntimeMSG("---RegressionTest2:test448");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test448");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot2.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo5, point2D6);
        categoryPlot2.clearAnnotations();
        boolean boolean9 = barRenderer0.equals((java.lang.Object) categoryPlot2);
        java.awt.Paint paint10 = barRenderer0.getShadowPaint();
        java.awt.Shape shape11 = barRenderer0.getBaseShape();
        barRenderer0.setShadowYOffset(0.0d);
        double double14 = barRenderer0.getMaximumBarWidth();
        java.lang.Boolean boolean16 = barRenderer0.getSeriesCreateEntities(0);
        double double17 = barRenderer0.getMaximumBarWidth();
        java.awt.Color color18 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel19 = null;
        java.awt.Rectangle rectangle20 = null;
        java.awt.geom.Rectangle2D rectangle2D21 = null;
        java.awt.geom.AffineTransform affineTransform22 = null;
        java.awt.RenderingHints renderingHints23 = null;
        java.awt.PaintContext paintContext24 = color18.createContext(colorModel19, rectangle20, rectangle2D21, affineTransform22, renderingHints23);
        java.awt.Color color25 = java.awt.Color.RED;
        java.awt.Color color26 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color27 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace28 = color27.getColorSpace();
        float[] floatArray35 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray36 = color26.getColorComponents(colorSpace28, floatArray35);
        float[] floatArray37 = color25.getComponents(floatArray36);
        float[] floatArray38 = color18.getColorComponents(floatArray37);
        barRenderer0.setBasePaint((java.awt.Paint) color18);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator41 = null;
        barRenderer0.setSeriesURLGenerator(0, categoryURLGenerator41);
        java.awt.Paint paint44 = barRenderer0.lookupSeriesFillPaint(1);
        int int45 = barRenderer0.getRowCount();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(paint10);
        org.junit.Assert.assertNotNull(shape11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertNotNull(paintContext24);
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(color27);
        org.junit.Assert.assertNotNull(colorSpace28);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertNotNull(paint44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test449() throws Throwable {
printRuntimeMSG("---RegressionTest2:test449");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test449");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.awt.Paint paint11 = lineAndShapeRenderer2.getSeriesOutlinePaint((int) '4');
        lineAndShapeRenderer2.setSeriesShapesFilled((int) (short) 100, true);
        java.awt.Stroke stroke16 = lineAndShapeRenderer2.getSeriesStroke((-739));
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNull(paint11);
        org.junit.Assert.assertNull(stroke16);
    }

    @Test
    public void test450() throws Throwable {
printRuntimeMSG("---RegressionTest2:test450");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test450");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        org.jfree.chart.renderer.RenderAttributes renderAttributes3 = new org.jfree.chart.renderer.RenderAttributes();
        java.awt.Paint paint4 = renderAttributes3.getDefaultLabelPaint();
        java.awt.Paint paint7 = renderAttributes3.getItemPaint((int) (short) 1, (int) (byte) 10);
        java.awt.Stroke stroke8 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        renderAttributes3.setDefaultStroke(stroke8);
        barRenderer0.setBaseStroke(stroke8, true);
        java.awt.Color color13 = java.awt.Color.WHITE;
        barRenderer0.setSeriesItemLabelPaint(0, (java.awt.Paint) color13);
        int int15 = barRenderer0.getColumnCount();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(paint4);
        org.junit.Assert.assertNull(paint7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test451() throws Throwable {
printRuntimeMSG("---RegressionTest2:test451");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test451");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer2.setSeriesShapesFilled((int) (short) 0, false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test452() throws Throwable {
printRuntimeMSG("---RegressionTest2:test452");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test452");
        org.jfree.chart.renderer.RenderAttributes renderAttributes0 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer4 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean6 = lineAndShapeRenderer4.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean7 = lineAndShapeRenderer4.getBaseLinesVisible();
        java.awt.Shape shape8 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer4.setBaseLegendShape(shape8);
        renderAttributes0.setSeriesShape((int) ' ', shape8);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean15 = lineAndShapeRenderer13.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean16 = lineAndShapeRenderer13.getBaseLinesVisible();
        java.awt.Shape shape17 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer13.setBaseLegendShape(shape17);
        renderAttributes0.setDefaultShape(shape17);
        org.jfree.chart.entity.ChartEntity chartEntity21 = new org.jfree.chart.entity.ChartEntity(shape17, "PlotOrientation.VERTICAL");
        org.jfree.chart.entity.ChartEntity chartEntity22 = new org.jfree.chart.entity.ChartEntity(shape17);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(shape8);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shape17);
    }

    @Test
    public void test453() throws Throwable {
printRuntimeMSG("---RegressionTest2:test453");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test453");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        java.awt.Paint paint14 = lineAndShapeRenderer2.getSeriesItemLabelPaint((int) (byte) -1);
        boolean boolean15 = lineAndShapeRenderer2.getBaseShapesVisible();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer19 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean21 = lineAndShapeRenderer19.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean22 = lineAndShapeRenderer19.getBaseLinesVisible();
        java.awt.Shape shape23 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer19.setBaseLegendShape(shape23);
        lineAndShapeRenderer2.setLegendShape((int) (short) 10, shape23);
        lineAndShapeRenderer2.setItemLabelAnchorOffset((double) 15);
        java.awt.Stroke stroke28 = lineAndShapeRenderer2.getBaseStroke();
        try {
            lineAndShapeRenderer2.setSeriesVisibleInLegend((int) (short) -1, (java.lang.Boolean) false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(paint14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shape23);
        org.junit.Assert.assertNotNull(stroke28);
    }

    @Test
    public void test454() throws Throwable {
printRuntimeMSG("---RegressionTest2:test454");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test454");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Color color9 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer2.setSeriesPaint(2, (java.awt.Paint) color9);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer13.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator15 = null;
        lineAndShapeRenderer13.setBaseToolTipGenerator(categoryToolTipGenerator15);
        java.awt.Font font18 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer13.setSeriesItemLabelFont((int) (short) 0, font18, true);
        lineAndShapeRenderer2.setBaseLegendTextFont(font18);
        java.awt.Shape shape23 = lineAndShapeRenderer2.getLegendShape(100);
        java.awt.Font font24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer2.setBaseLegendTextFont(font24);
        java.awt.Shape shape27 = lineAndShapeRenderer2.getLegendShape(15);
        lineAndShapeRenderer2.setAutoPopulateSeriesOutlinePaint(false);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNotNull(font18);
        org.junit.Assert.assertNull(shape23);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(shape27);
    }

    @Test
    public void test455() throws Throwable {
printRuntimeMSG("---RegressionTest2:test455");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test455");
        org.jfree.chart.axis.CategoryAxis categoryAxis0 = new org.jfree.chart.axis.CategoryAxis();
        org.jfree.data.category.CategoryDataset categoryDataset1 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis2 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis2.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis5 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer8 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator9 = lineAndShapeRenderer8.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot10 = new org.jfree.chart.plot.CategoryPlot(categoryDataset1, categoryAxis2, valueAxis5, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer8);
        boolean boolean11 = categoryAxis2.isTickLabelsVisible();
        double double12 = categoryAxis2.getFixedDimension();
        java.awt.Paint paint14 = categoryAxis2.getTickLabelPaint((java.lang.Comparable) 4.0d);
        categoryAxis0.setTickLabelPaint(paint14);
        categoryAxis0.setLabelToolTip("hi!");
        double double18 = categoryAxis0.getCategoryMargin();
        org.jfree.chart.plot.CategoryPlot categoryPlot19 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke20 = categoryPlot19.getRangeMinorGridlineStroke();
        boolean boolean21 = categoryPlot19.isRangeCrosshairLockedOnData();
        org.jfree.chart.event.PlotChangeListener plotChangeListener22 = null;
        categoryPlot19.removeChangeListener(plotChangeListener22);
        boolean boolean24 = categoryPlot19.isRangeCrosshairLockedOnData();
        categoryAxis0.removeChangeListener((org.jfree.chart.event.AxisChangeListener) categoryPlot19);
        org.junit.Assert.assertNull(categoryItemLabelGenerator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(paint14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test456() throws Throwable {
printRuntimeMSG("---RegressionTest2:test456");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test456");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        java.awt.Color color9 = org.jfree.chart.ChartColor.DARK_GREEN;
        lineAndShapeRenderer2.setSeriesPaint(2, (java.awt.Paint) color9);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer13 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator14 = lineAndShapeRenderer13.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator15 = null;
        lineAndShapeRenderer13.setBaseToolTipGenerator(categoryToolTipGenerator15);
        java.awt.Font font18 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer13.setSeriesItemLabelFont((int) (short) 0, font18, true);
        lineAndShapeRenderer2.setBaseLegendTextFont(font18);
        java.awt.Shape shape23 = lineAndShapeRenderer2.getLegendShape(100);
        java.awt.Font font24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
        lineAndShapeRenderer2.setBaseLegendTextFont(font24);
        java.awt.Shape shape27 = lineAndShapeRenderer2.getLegendShape(15);
        java.awt.Paint paint29 = lineAndShapeRenderer2.getSeriesPaint((-739));
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNull(categoryItemLabelGenerator14);
        org.junit.Assert.assertNotNull(font18);
        org.junit.Assert.assertNull(shape23);
        org.junit.Assert.assertNotNull(font24);
        org.junit.Assert.assertNull(shape27);
        org.junit.Assert.assertNull(paint29);
    }

    @Test
    public void test457() throws Throwable {
printRuntimeMSG("---RegressionTest2:test457");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test457");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset44.clearSelection();
        java.util.EventListener eventListener49 = null;
        boolean boolean50 = defaultCategoryDataset44.hasListener(eventListener49);
        defaultCategoryDataset44.validateObject();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test458() throws Throwable {
printRuntimeMSG("---RegressionTest2:test458");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test458");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        boolean boolean7 = barRenderer0.getIncludeBaseInRange();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition8 = barRenderer0.getNegativeItemLabelPositionFallback();
        java.awt.Stroke stroke10 = barRenderer0.lookupSeriesOutlineStroke(8);
        barRenderer0.setAutoPopulateSeriesOutlineStroke(true);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(itemLabelPosition8);
        org.junit.Assert.assertNotNull(stroke10);
    }

    @Test
    public void test459() throws Throwable {
printRuntimeMSG("---RegressionTest2:test459");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test459");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        java.awt.Paint paint3 = categoryPlot0.getRangeCrosshairPaint();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo5 = null;
        java.awt.geom.Point2D point2D6 = null;
        categoryPlot0.zoomRangeAxes(0.0d, plotRenderingInfo5, point2D6, false);
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer11 = null;
        categoryPlot9.setRenderer(categoryItemRenderer11);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot9);
        categoryPlot9.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        categoryPlot9.drawBackgroundImage(graphics2D16, rectangle2D17);
        org.jfree.chart.plot.Plot plot19 = categoryPlot9.getRootPlot();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot9);
        java.lang.String str21 = categoryPlot0.getNoDataMessage();
        categoryPlot0.setBackgroundAlpha((float) 1);
        org.jfree.chart.axis.CategoryAxis categoryAxis24 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis24.setMinorTickMarkOutsideLength((float) (short) 0);
        categoryAxis24.setLowerMargin((double) (short) 0);
        categoryAxis24.clearCategoryLabelToolTips();
        java.awt.Paint paint30 = categoryAxis24.getAxisLinePaint();
        boolean boolean31 = categoryAxis24.isTickMarksVisible();
        categoryPlot0.setDomainAxis(categoryAxis24);
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertNotNull(paint3);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(plot19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(paint30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test460() throws Throwable {
printRuntimeMSG("---RegressionTest2:test460");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test460");
        org.jfree.chart.util.BooleanList booleanList0 = new org.jfree.chart.util.BooleanList();
        int int1 = booleanList0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test461() throws Throwable {
printRuntimeMSG("---RegressionTest2:test461");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test461");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator4 = null;
        lineAndShapeRenderer2.setBaseToolTipGenerator(categoryToolTipGenerator4);
        java.awt.Font font7 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT;
        lineAndShapeRenderer2.setSeriesItemLabelFont((int) (short) 0, font7, true);
        java.awt.Color color10 = org.jfree.chart.ChartColor.VERY_LIGHT_CYAN;
        boolean boolean11 = lineAndShapeRenderer2.equals((java.lang.Object) color10);
        org.jfree.chart.renderer.RenderAttributes renderAttributes12 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer16 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean18 = lineAndShapeRenderer16.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean19 = lineAndShapeRenderer16.getBaseLinesVisible();
        java.awt.Shape shape20 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer16.setBaseLegendShape(shape20);
        renderAttributes12.setSeriesShape((int) ' ', shape20);
        org.jfree.chart.entity.ChartEntity chartEntity24 = new org.jfree.chart.entity.ChartEntity(shape20, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        lineAndShapeRenderer2.setBaseShape(shape20, true);
        java.awt.Stroke stroke27 = lineAndShapeRenderer2.getBaseOutlineStroke();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(font7);
        org.junit.Assert.assertNotNull(color10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(shape20);
        org.junit.Assert.assertNotNull(stroke27);
    }

    @Test
    public void test462() throws Throwable {
printRuntimeMSG("---RegressionTest2:test462");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test462");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        org.jfree.chart.axis.AxisSpace axisSpace6 = null;
        categoryPlot0.setFixedRangeAxisSpace(axisSpace6, true);
        java.awt.Paint paint9 = categoryPlot0.getRangeZeroBaselinePaint();
        org.junit.Assert.assertNotNull(paint9);
    }

    @Test
    public void test463() throws Throwable {
printRuntimeMSG("---RegressionTest2:test463");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test463");
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset0 = new org.jfree.data.category.AbstractCategoryDataset();
        java.lang.Object obj1 = abstractCategoryDataset0.clone();
        java.lang.Object obj2 = abstractCategoryDataset0.clone();
        org.jfree.chart.renderer.RenderAttributes renderAttributes11 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean17 = lineAndShapeRenderer15.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean18 = lineAndShapeRenderer15.getBaseLinesVisible();
        java.awt.Shape shape19 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer15.setBaseLegendShape(shape19);
        renderAttributes11.setSeriesShape((int) ' ', shape19);
        org.jfree.chart.entity.ChartEntity chartEntity23 = new org.jfree.chart.entity.ChartEntity(shape19, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint24 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color26 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem27 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color26);
        java.lang.String str28 = legendItem27.getToolTipText();
        java.awt.Stroke stroke29 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem27.setOutlineStroke(stroke29);
        java.awt.Shape shape35 = null;
        java.awt.Color color36 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color38 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem39 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, (java.awt.Paint) color36, stroke37, (java.awt.Paint) color38);
        java.lang.Class<?> wildcardClass40 = color36.getClass();
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, paint24, stroke29, (java.awt.Paint) color36);
        org.jfree.chart.entity.ChartEntity chartEntity42 = new org.jfree.chart.entity.ChartEntity(shape19);
        java.awt.Color color43 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem44 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape19, (java.awt.Paint) color43);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset47 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity50 = new org.jfree.chart.entity.CategoryItemEntity(shape19, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset47, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        abstractCategoryDataset0.setSelectionState((org.jfree.data.category.CategoryDatasetSelectionState) defaultCategoryDataset47);
        org.jfree.data.category.AbstractCategoryDataset abstractCategoryDataset52 = new org.jfree.data.category.AbstractCategoryDataset();
        org.jfree.data.general.DatasetGroup datasetGroup53 = new org.jfree.data.general.DatasetGroup();
        abstractCategoryDataset52.setGroup(datasetGroup53);
        defaultCategoryDataset47.setGroup(datasetGroup53);
        try {
            java.lang.Number number58 = defaultCategoryDataset47.getValue((-12566464), 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(shape19);
        org.junit.Assert.assertNotNull(paint24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(color36);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(color38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(color43);
    }

    @Test
    public void test464() throws Throwable {
printRuntimeMSG("---RegressionTest2:test464");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test464");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        categoryAxis1.clearCategoryLabelToolTips();
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        categoryPlot17.setBackgroundImageAlignment((int) (byte) -1);
        int int21 = categoryPlot17.getDatasetCount();
        java.awt.Paint paint22 = categoryPlot17.getDomainCrosshairPaint();
        boolean boolean23 = categoryAxis1.hasListener((java.util.EventListener) categoryPlot17);
        int int24 = categoryPlot17.getRangeAxisCount();
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo28 = null;
        java.awt.geom.Point2D point2D29 = null;
        categoryPlot25.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo28, point2D29);
        categoryPlot25.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder33 = categoryPlot25.getRowRenderingOrder();
        java.awt.Paint paint34 = categoryPlot25.getRangeZeroBaselinePaint();
        categoryPlot25.setRangeCrosshairValue((double) (short) 0, true);
        org.jfree.chart.axis.AxisLocation axisLocation39 = categoryPlot25.getDomainAxisLocation(49);
        categoryPlot17.setRangeAxisLocation(axisLocation39, true);
        org.jfree.chart.util.Layer layer42 = null;
        java.util.Collection collection43 = categoryPlot17.getRangeMarkers(layer42);
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(paint22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(sortOrder33);
        org.junit.Assert.assertNotNull(paint34);
        org.junit.Assert.assertNotNull(axisLocation39);
        org.junit.Assert.assertNull(collection43);
    }

    @Test
    public void test465() throws Throwable {
printRuntimeMSG("---RegressionTest2:test465");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test465");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        categoryPlot0.configureDomainAxes();
        boolean boolean10 = categoryPlot0.isRangeGridlinesVisible();
        int int11 = categoryPlot0.getDatasetCount();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test466() throws Throwable {
printRuntimeMSG("---RegressionTest2:test466");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test466");
        java.awt.Paint[] paintArray0 = new java.awt.Paint[] {};
        java.awt.Paint[] paintArray1 = org.jfree.chart.ChartColor.createDefaultPaintArray();
        java.awt.Stroke[] strokeArray2 = org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE;
        java.awt.Stroke[] strokeArray3 = null;
        java.awt.Shape[] shapeArray4 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier5 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray0, paintArray1, strokeArray2, strokeArray3, shapeArray4);
        org.junit.Assert.assertNotNull(paintArray0);
        org.junit.Assert.assertNotNull(paintArray1);
        org.junit.Assert.assertNotNull(strokeArray2);
        org.junit.Assert.assertNotNull(shapeArray4);
    }

    @Test
    public void test467() throws Throwable {
printRuntimeMSG("---RegressionTest2:test467");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test467");
        org.jfree.chart.renderer.RenderAttributes renderAttributes8 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        renderAttributes8.setSeriesShape((int) ' ', shape16);
        org.jfree.chart.entity.ChartEntity chartEntity20 = new org.jfree.chart.entity.ChartEntity(shape16, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color23 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem24 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color23);
        java.lang.String str25 = legendItem24.getToolTipText();
        java.awt.Stroke stroke26 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem24.setOutlineStroke(stroke26);
        java.awt.Shape shape32 = null;
        java.awt.Color color33 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke34 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color35 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem36 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape32, (java.awt.Paint) color33, stroke34, (java.awt.Paint) color35);
        java.lang.Class<?> wildcardClass37 = color33.getClass();
        org.jfree.chart.LegendItem legendItem38 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape16, paint21, stroke26, (java.awt.Paint) color33);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape16);
        java.awt.Color color40 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem41 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape16, (java.awt.Paint) color40);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset44 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity47 = new org.jfree.chart.entity.CategoryItemEntity(shape16, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset44, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        java.lang.String str48 = categoryItemEntity47.toString();
        java.awt.Shape shape49 = categoryItemEntity47.getArea();
        categoryItemEntity47.setRowKey((java.lang.Comparable) "ChartChangeEventType.GENERAL");
        org.jfree.data.category.CategoryDataset categoryDataset52 = categoryItemEntity47.getDataset();
        org.jfree.data.category.CategoryDataset categoryDataset53 = categoryItemEntity47.getDataset();
        java.lang.String str54 = categoryItemEntity47.getShapeCoords();
        categoryItemEntity47.setColumnKey((java.lang.Comparable) "rect");
        java.lang.String str57 = categoryItemEntity47.getShapeCoords();
        java.lang.String str58 = categoryItemEntity47.toString();
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(paint21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(stroke34);
        org.junit.Assert.assertNotNull(color35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(shape49);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0" + "'", str54.equals("4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0"));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0" + "'", str57.equals("4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0"));
    }

    @Test
    public void test468() throws Throwable {
printRuntimeMSG("---RegressionTest2:test468");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test468");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator7 = lineAndShapeRenderer2.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer2.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean12 = lineAndShapeRenderer2.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator14 = null;
        lineAndShapeRenderer2.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator14);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer2.getNegativeItemLabelPosition(128, (int) (short) 1, false);
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNull(categoryToolTipGenerator7);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
    }

    @Test
    public void test469() throws Throwable {
printRuntimeMSG("---RegressionTest2:test469");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test469");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator6 = barRenderer0.getBaseURLGenerator();
        barRenderer0.setShadowXOffset((double) (-16777216));
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer11 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean13 = lineAndShapeRenderer11.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean14 = lineAndShapeRenderer11.getBaseLinesVisible();
        lineAndShapeRenderer11.setAutoPopulateSeriesPaint(false);
        java.awt.Paint paint18 = lineAndShapeRenderer11.getLegendTextPaint((-1));
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition19 = lineAndShapeRenderer11.getBasePositiveItemLabelPosition();
        java.awt.Paint paint20 = lineAndShapeRenderer11.getBaseOutlinePaint();
        barRenderer0.setShadowPaint(paint20);
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNull(categoryURLGenerator6);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(paint18);
        org.junit.Assert.assertNotNull(itemLabelPosition19);
        org.junit.Assert.assertNotNull(paint20);
    }

    @Test
    public void test470() throws Throwable {
printRuntimeMSG("---RegressionTest2:test470");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test470");
        org.jfree.chart.util.UnitType unitType0 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot1 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke2 = categoryPlot1.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot3 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke4 = categoryPlot3.getRangeMinorGridlineStroke();
        categoryPlot1.setParent((org.jfree.chart.plot.Plot) categoryPlot3);
        org.jfree.chart.LegendItemCollection legendItemCollection6 = categoryPlot1.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier7 = categoryPlot1.getDrawingSupplier();
        java.awt.Stroke stroke8 = categoryPlot1.getOutlineStroke();
        boolean boolean9 = unitType0.equals((java.lang.Object) categoryPlot1);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo12 = null;
        java.awt.geom.Point2D point2D13 = null;
        categoryPlot1.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo12, point2D13);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer17 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean19 = lineAndShapeRenderer17.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean20 = lineAndShapeRenderer17.getBaseLinesVisible();
        java.awt.Shape shape21 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer17.setBaseLegendShape(shape21);
        java.awt.Color color23 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer17.setBaseOutlinePaint((java.awt.Paint) color23, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer28 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition30 = null;
        lineAndShapeRenderer28.setSeriesPositiveItemLabelPosition(0, itemLabelPosition30);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = lineAndShapeRenderer28.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean34 = lineAndShapeRenderer28.getUseFillPaint();
        lineAndShapeRenderer28.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke37 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer28.setBaseStroke(stroke37, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray40 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer17, lineAndShapeRenderer28 };
        categoryPlot1.setRenderers(categoryItemRendererArray40);
        boolean boolean42 = categoryPlot1.isRangeCrosshairLockedOnData();
        java.awt.Paint paint43 = categoryPlot1.getOutlinePaint();
        org.jfree.chart.axis.ValueAxis valueAxis45 = categoryPlot1.getRangeAxis((int) (short) 100);
        org.jfree.data.category.CategoryDataset categoryDataset46 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis47 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis47.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis50 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer53 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator54 = lineAndShapeRenderer53.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot55 = new org.jfree.chart.plot.CategoryPlot(categoryDataset46, categoryAxis47, valueAxis50, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer53);
        categoryAxis47.setVisible(false);
        java.lang.String str59 = categoryAxis47.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions60 = categoryAxis47.getCategoryLabelPositions();
        categoryAxis47.setAxisLineVisible(false);
        org.jfree.chart.util.RectangleInsets rectangleInsets63 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str64 = rectangleInsets63.toString();
        double double65 = rectangleInsets63.getTop();
        categoryAxis47.setTickLabelInsets(rectangleInsets63);
        double double68 = rectangleInsets63.calculateLeftOutset((double) (-65536));
        categoryPlot1.setAxisOffset(rectangleInsets63);
        org.jfree.chart.plot.Plot plot70 = categoryPlot1.getRootPlot();
        org.junit.Assert.assertNotNull(unitType0);
        org.junit.Assert.assertNotNull(stroke2);
        org.junit.Assert.assertNotNull(stroke4);
        org.junit.Assert.assertNull(legendItemCollection6);
        org.junit.Assert.assertNotNull(drawingSupplier7);
        org.junit.Assert.assertNotNull(stroke8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(shape21);
        org.junit.Assert.assertNotNull(color23);
        org.junit.Assert.assertNotNull(itemLabelPosition33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(stroke37);
        org.junit.Assert.assertNotNull(categoryItemRendererArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(paint43);
        org.junit.Assert.assertNull(valueAxis45);
        org.junit.Assert.assertNull(categoryItemLabelGenerator54);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(categoryLabelPositions60);
        org.junit.Assert.assertNotNull(rectangleInsets63);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str64.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2.0d + "'", double65 == 2.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 4.0d + "'", double68 == 4.0d);
        org.junit.Assert.assertNotNull(plot70);
    }

    @Test
    public void test471() throws Throwable {
printRuntimeMSG("---RegressionTest2:test471");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test471");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        categoryPlot0.drawBackgroundImage(graphics2D7, rectangle2D8);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer12 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean14 = lineAndShapeRenderer12.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean15 = lineAndShapeRenderer12.getBaseLinesVisible();
        java.awt.Shape shape16 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer12.setBaseLegendShape(shape16);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition21 = lineAndShapeRenderer12.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean22 = lineAndShapeRenderer12.getBaseShapesVisible();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator24 = null;
        lineAndShapeRenderer12.setSeriesURLGenerator((int) (byte) 0, categoryURLGenerator24, false);
        categoryPlot0.setRenderer((org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer12);
        lineAndShapeRenderer12.setSeriesShapesFilled(175, (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shape16);
        org.junit.Assert.assertNotNull(itemLabelPosition21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test472() throws Throwable {
printRuntimeMSG("---RegressionTest2:test472");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test472");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        java.awt.Shape shape6 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer2.setBaseLegendShape(shape6);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition11 = lineAndShapeRenderer2.getNegativeItemLabelPosition(0, 0, true);
        boolean boolean12 = lineAndShapeRenderer2.getBaseShapesVisible();
        int int13 = lineAndShapeRenderer2.getPassCount();
        java.awt.Paint paint14 = lineAndShapeRenderer2.getBaseFillPaint();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(shape6);
        org.junit.Assert.assertNotNull(itemLabelPosition11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(paint14);
    }

    @Test
    public void test473() throws Throwable {
printRuntimeMSG("---RegressionTest2:test473");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test473");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        double double14 = categoryAxis11.getLabelAngle();
        java.awt.Shape shape19 = null;
        java.awt.Color color20 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke21 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color22 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem23 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape19, (java.awt.Paint) color20, stroke21, (java.awt.Paint) color22);
        java.awt.Paint paint24 = legendItem23.getFillPaint();
        categoryAxis11.setAxisLinePaint(paint24);
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(color20);
        org.junit.Assert.assertNotNull(stroke21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(paint24);
    }

    @Test
    public void test474() throws Throwable {
printRuntimeMSG("---RegressionTest2:test474");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test474");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier6 = categoryPlot0.getDrawingSupplier();
        java.awt.Stroke stroke7 = categoryPlot0.getOutlineStroke();
        org.jfree.chart.axis.CategoryAxis categoryAxis8 = new org.jfree.chart.axis.CategoryAxis();
        java.util.List list9 = categoryPlot0.getCategoriesForAxis(categoryAxis8);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = categoryPlot0.getDomainAxisForDataset(0);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer15 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator16 = lineAndShapeRenderer15.getBaseItemLabelGenerator();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator20 = lineAndShapeRenderer15.getToolTipGenerator((int) (short) 100, (-1), false);
        lineAndShapeRenderer15.setSeriesLinesVisible((int) (byte) 100, (java.lang.Boolean) true);
        java.lang.Boolean boolean25 = lineAndShapeRenderer15.getSeriesCreateEntities((int) (short) 10);
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator27 = null;
        lineAndShapeRenderer15.setSeriesURLGenerator((int) (byte) 10, categoryURLGenerator27);
        java.awt.Color color30 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.Color color31 = org.jfree.chart.ChartColor.VERY_DARK_MAGENTA;
        java.awt.color.ColorSpace colorSpace32 = color31.getColorSpace();
        float[] floatArray39 = new float[] { 100.0f, (-8355712), 'a', 'a', (-1), (short) 1 };
        float[] floatArray40 = color30.getColorComponents(colorSpace32, floatArray39);
        int int41 = color30.getBlue();
        int int42 = color30.getAlpha();
        lineAndShapeRenderer15.setSeriesItemLabelPaint(1, (java.awt.Paint) color30);
        java.awt.Color color44 = java.awt.Color.getColor("ItemLabelAnchor.INSIDE5", color30);
        categoryPlot0.setRangeCrosshairPaint((java.awt.Paint) color30);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer48 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean50 = lineAndShapeRenderer48.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean51 = lineAndShapeRenderer48.getBaseLinesVisible();
        lineAndShapeRenderer48.setAutoPopulateSeriesPaint(false);
        lineAndShapeRenderer48.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator57 = null;
        lineAndShapeRenderer48.setSeriesItemLabelGenerator(2, categoryItemLabelGenerator57, true);
        java.awt.Shape shape61 = lineAndShapeRenderer48.lookupSeriesShape((int) '4');
        boolean boolean62 = lineAndShapeRenderer48.getUseFillPaint();
        org.jfree.chart.plot.CategoryPlot categoryPlot64 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke65 = categoryPlot64.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer66 = null;
        categoryPlot64.setRenderer(categoryItemRenderer66);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent68 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot64);
        categoryPlot64.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D71 = null;
        java.awt.geom.Rectangle2D rectangle2D72 = null;
        categoryPlot64.drawBackgroundImage(graphics2D71, rectangle2D72);
        java.awt.Color color74 = org.jfree.chart.ChartColor.DARK_MAGENTA;
        categoryPlot64.setRangeZeroBaselinePaint((java.awt.Paint) color74);
        org.jfree.chart.axis.CategoryAxis categoryAxis76 = new org.jfree.chart.axis.CategoryAxis();
        java.awt.Paint paint77 = categoryAxis76.getTickLabelPaint();
        categoryPlot64.setDomainGridlinePaint(paint77);
        lineAndShapeRenderer48.setSeriesItemLabelPaint((int) '#', paint77, false);
        categoryPlot0.setRangeMinorGridlinePaint(paint77);
        org.jfree.chart.plot.Marker marker82 = null;
        org.jfree.chart.util.Layer layer83 = null;
        try {
            boolean boolean84 = categoryPlot0.removeRangeMarker(marker82, layer83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'marker' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNotNull(drawingSupplier6);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(categoryAxis11);
        org.junit.Assert.assertNull(categoryItemLabelGenerator16);
        org.junit.Assert.assertNull(categoryToolTipGenerator20);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNotNull(color30);
        org.junit.Assert.assertNotNull(color31);
        org.junit.Assert.assertNotNull(colorSpace32);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 128 + "'", int41 == 128);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 255 + "'", int42 == 255);
        org.junit.Assert.assertNotNull(color44);
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(shape61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(stroke65);
        org.junit.Assert.assertNotNull(color74);
        org.junit.Assert.assertNotNull(paint77);
    }

    @Test
    public void test475() throws Throwable {
printRuntimeMSG("---RegressionTest2:test475");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test475");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        java.lang.Comparable comparable6 = categoryPlot0.getDomainCrosshairRowKey();
        org.jfree.chart.util.RectangleEdge rectangleEdge7 = categoryPlot0.getRangeAxisEdge();
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent8 = null;
        categoryPlot0.notifyListeners(plotChangeEvent8);
        boolean boolean10 = categoryPlot0.isOutlineVisible();
        java.awt.Font font11 = org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
        categoryPlot0.setNoDataMessageFont(font11);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent13 = null;
        categoryPlot0.markerChanged(markerChangeEvent13);
        categoryPlot0.setCrosshairDatasetIndex(3);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(comparable6);
        org.junit.Assert.assertNotNull(rectangleEdge7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(font11);
    }

    @Test
    public void test476() throws Throwable {
printRuntimeMSG("---RegressionTest2:test476");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test476");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getFillPaint();
        java.awt.Font font10 = legendItem8.getLabelFont();
        legendItem8.setSeriesIndex((int) (byte) 10);
        legendItem8.setURLText("4,0,2,2,0,4,-2,2,-4,0,-2,-2,0,-4,2,-2,4,0,4,0");
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(paint9);
        org.junit.Assert.assertNull(font10);
    }

    @Test
    public void test477() throws Throwable {
printRuntimeMSG("---RegressionTest2:test477");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test477");
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset0 = new org.jfree.data.category.DefaultCategoryDataset();
        int int1 = defaultCategoryDataset0.getRowCount();
        defaultCategoryDataset0.setValue((java.lang.Number) (-9.0d), (java.lang.Comparable) true, (java.lang.Comparable) (short) 1);
        java.lang.Object obj6 = defaultCategoryDataset0.clone();
        try {
            defaultCategoryDataset0.setSelected(2, 192, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test478() throws Throwable {
printRuntimeMSG("---RegressionTest2:test478");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test478");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.axis.AxisLocation axisLocation8 = categoryPlot0.getRangeAxisLocation(192);
        org.jfree.chart.axis.ValueAxis valueAxis9 = null;
        categoryPlot0.setRangeAxis(valueAxis9);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(axisLocation8);
    }

    @Test
    public void test479() throws Throwable {
printRuntimeMSG("---RegressionTest2:test479");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test479");
        java.awt.Paint paint0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT;
        java.awt.Paint[] paintArray1 = new java.awt.Paint[] { paint0 };
        java.awt.Color color2 = java.awt.Color.BLUE;
        java.awt.Color color3 = java.awt.Color.RED;
        java.awt.Paint paint4 = org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT;
        java.awt.Paint[] paintArray5 = new java.awt.Paint[] { color2, color3, paint4 };
        java.awt.Color color6 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel7 = null;
        java.awt.Rectangle rectangle8 = null;
        java.awt.geom.Rectangle2D rectangle2D9 = null;
        java.awt.geom.AffineTransform affineTransform10 = null;
        java.awt.RenderingHints renderingHints11 = null;
        java.awt.PaintContext paintContext12 = color6.createContext(colorModel7, rectangle8, rectangle2D9, affineTransform10, renderingHints11);
        java.awt.Color color13 = java.awt.Color.WHITE;
        java.awt.Color color14 = java.awt.Color.MAGENTA;
        java.awt.image.ColorModel colorModel15 = null;
        java.awt.Rectangle rectangle16 = null;
        java.awt.geom.Rectangle2D rectangle2D17 = null;
        java.awt.geom.AffineTransform affineTransform18 = null;
        java.awt.RenderingHints renderingHints19 = null;
        java.awt.PaintContext paintContext20 = color14.createContext(colorModel15, rectangle16, rectangle2D17, affineTransform18, renderingHints19);
        java.awt.Color color21 = org.jfree.chart.ChartColor.LIGHT_RED;
        java.awt.Paint[] paintArray22 = new java.awt.Paint[] { color6, color13, color14, color21 };
        java.awt.Stroke stroke23 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke24 = org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE;
        java.awt.Stroke stroke25 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke26 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke27 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke[] strokeArray28 = new java.awt.Stroke[] { stroke23, stroke24, stroke25, stroke26, stroke27 };
        java.awt.Stroke stroke29 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Stroke stroke30 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        org.jfree.chart.plot.CategoryPlot categoryPlot31 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke32 = categoryPlot31.getRangeMinorGridlineStroke();
        java.awt.Stroke[] strokeArray33 = new java.awt.Stroke[] { stroke29, stroke30, stroke32 };
        java.awt.Shape shape34 = null;
        java.awt.Shape[] shapeArray35 = new java.awt.Shape[] { shape34 };
        org.jfree.chart.plot.DefaultDrawingSupplier defaultDrawingSupplier36 = new org.jfree.chart.plot.DefaultDrawingSupplier(paintArray1, paintArray5, paintArray22, strokeArray28, strokeArray33, shapeArray35);
        java.awt.Paint paint37 = defaultDrawingSupplier36.getNextOutlinePaint();
        java.awt.Stroke stroke38 = defaultDrawingSupplier36.getNextStroke();
        java.lang.Object obj39 = defaultDrawingSupplier36.clone();
        org.junit.Assert.assertNotNull(paint0);
        org.junit.Assert.assertNotNull(paintArray1);
        org.junit.Assert.assertNotNull(color2);
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNotNull(paint4);
        org.junit.Assert.assertNotNull(paintArray5);
        org.junit.Assert.assertNotNull(color6);
        org.junit.Assert.assertNotNull(paintContext12);
        org.junit.Assert.assertNotNull(color13);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertNotNull(paintContext20);
        org.junit.Assert.assertNotNull(color21);
        org.junit.Assert.assertNotNull(paintArray22);
        org.junit.Assert.assertNotNull(stroke23);
        org.junit.Assert.assertNotNull(stroke24);
        org.junit.Assert.assertNotNull(stroke25);
        org.junit.Assert.assertNotNull(stroke26);
        org.junit.Assert.assertNotNull(stroke27);
        org.junit.Assert.assertNotNull(strokeArray28);
        org.junit.Assert.assertNotNull(stroke29);
        org.junit.Assert.assertNotNull(stroke30);
        org.junit.Assert.assertNotNull(stroke32);
        org.junit.Assert.assertNotNull(strokeArray33);
        org.junit.Assert.assertNotNull(shapeArray35);
        org.junit.Assert.assertNotNull(paint37);
        org.junit.Assert.assertNotNull(stroke38);
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test480() throws Throwable {
printRuntimeMSG("---RegressionTest2:test480");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test480");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        barRenderer0.setIncludeBaseInRange(true);
        java.awt.Color color5 = java.awt.Color.GREEN;
        try {
            barRenderer0.setSeriesOutlinePaint((-12566464), (java.awt.Paint) color5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNotNull(color5);
    }

    @Test
    public void test481() throws Throwable {
printRuntimeMSG("---RegressionTest2:test481");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test481");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        double double1 = rectangleInsets0.getRight();
        double double3 = rectangleInsets0.calculateTopInset(0.0d);
        double double5 = rectangleInsets0.calculateLeftOutset(0.0d);
        double double7 = rectangleInsets0.calculateTopOutset((double) 0L);
        java.lang.String str8 = rectangleInsets0.toString();
        double double10 = rectangleInsets0.trimHeight((double) (short) -1);
        org.junit.Assert.assertNotNull(rectangleInsets0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2.0d + "'", double3 == 2.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.0d + "'", double5 == 4.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.0d + "'", double7 == 2.0d);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str8.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-5.0d) + "'", double10 == (-5.0d));
    }

    @Test
    public void test482() throws Throwable {
printRuntimeMSG("---RegressionTest2:test482");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test482");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        int int2 = legendItem1.getDatasetIndex();
        org.jfree.chart.util.UnitType unitType3 = org.jfree.chart.util.UnitType.ABSOLUTE;
        org.jfree.chart.plot.CategoryPlot categoryPlot4 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke5 = categoryPlot4.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot6 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke7 = categoryPlot6.getRangeMinorGridlineStroke();
        categoryPlot4.setParent((org.jfree.chart.plot.Plot) categoryPlot6);
        org.jfree.chart.LegendItemCollection legendItemCollection9 = categoryPlot4.getFixedLegendItems();
        org.jfree.chart.plot.DrawingSupplier drawingSupplier10 = categoryPlot4.getDrawingSupplier();
        java.awt.Stroke stroke11 = categoryPlot4.getOutlineStroke();
        boolean boolean12 = unitType3.equals((java.lang.Object) categoryPlot4);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo15 = null;
        java.awt.geom.Point2D point2D16 = null;
        categoryPlot4.zoomRangeAxes(0.0d, (double) (byte) -1, plotRenderingInfo15, point2D16);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer20 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean22 = lineAndShapeRenderer20.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean23 = lineAndShapeRenderer20.getBaseLinesVisible();
        java.awt.Shape shape24 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer20.setBaseLegendShape(shape24);
        java.awt.Color color26 = org.jfree.chart.ChartColor.LIGHT_MAGENTA;
        lineAndShapeRenderer20.setBaseOutlinePaint((java.awt.Paint) color26, false);
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition33 = null;
        lineAndShapeRenderer31.setSeriesPositiveItemLabelPosition(0, itemLabelPosition33);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition36 = lineAndShapeRenderer31.getSeriesPositiveItemLabelPosition((-1));
        boolean boolean37 = lineAndShapeRenderer31.getUseFillPaint();
        lineAndShapeRenderer31.setDataBoundsIncludesVisibleSeriesOnly(true);
        java.awt.Stroke stroke40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        lineAndShapeRenderer31.setBaseStroke(stroke40, false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] categoryItemRendererArray43 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { lineAndShapeRenderer20, lineAndShapeRenderer31 };
        categoryPlot4.setRenderers(categoryItemRendererArray43);
        java.awt.Paint paint45 = categoryPlot4.getRangeZeroBaselinePaint();
        legendItem1.setLabelPaint(paint45);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(unitType3);
        org.junit.Assert.assertNotNull(stroke5);
        org.junit.Assert.assertNotNull(stroke7);
        org.junit.Assert.assertNull(legendItemCollection9);
        org.junit.Assert.assertNotNull(drawingSupplier10);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(shape24);
        org.junit.Assert.assertNotNull(color26);
        org.junit.Assert.assertNotNull(itemLabelPosition36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(stroke40);
        org.junit.Assert.assertNotNull(categoryItemRendererArray43);
        org.junit.Assert.assertNotNull(paint45);
    }

    @Test
    public void test483() throws Throwable {
printRuntimeMSG("---RegressionTest2:test483");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test483");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        categoryAxis11.setLowerMargin((double) 8);
        boolean boolean16 = categoryAxis11.isVisible();
        categoryAxis11.configure();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test484() throws Throwable {
printRuntimeMSG("---RegressionTest2:test484");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test484");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        boolean boolean2 = barRenderer0.getBaseSeriesVisible();
        barRenderer0.setBaseItemLabelsVisible(false);
        double double5 = barRenderer0.getItemMargin();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition6 = barRenderer0.getBaseNegativeItemLabelPosition();
        barRenderer0.setBaseCreateEntities(false);
        int int9 = barRenderer0.getPassCount();
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNotNull(itemLabelPosition6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test485() throws Throwable {
printRuntimeMSG("---RegressionTest2:test485");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test485");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo3 = null;
        java.awt.geom.Point2D point2D4 = null;
        categoryPlot0.zoomRangeAxes((double) (-16777216), (double) (short) 1, plotRenderingInfo3, point2D4);
        categoryPlot0.clearDomainMarkers((int) (short) 0);
        org.jfree.chart.util.SortOrder sortOrder8 = categoryPlot0.getRowRenderingOrder();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        boolean boolean10 = sortOrder8.equals((java.lang.Object) categoryPlot9);
        org.jfree.chart.axis.CategoryAxis categoryAxis11 = new org.jfree.chart.axis.CategoryAxis();
        double double12 = categoryAxis11.getUpperMargin();
        categoryPlot9.setDomainAxis(categoryAxis11);
        org.jfree.chart.event.MarkerChangeEvent markerChangeEvent14 = null;
        categoryPlot9.markerChanged(markerChangeEvent14);
        org.jfree.chart.event.PlotChangeListener plotChangeListener16 = null;
        categoryPlot9.removeChangeListener(plotChangeListener16);
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo20 = null;
        java.awt.geom.Point2D point2D21 = null;
        categoryPlot9.zoomRangeAxes(0.0d, (double) (-65536), plotRenderingInfo20, point2D21);
        org.jfree.chart.LegendItemCollection legendItemCollection23 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.axis.AxisLocation axisLocation25 = categoryPlot9.getRangeAxisLocation((-16777216));
        java.lang.String str26 = axisLocation25.toString();
        org.junit.Assert.assertNotNull(sortOrder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.05d + "'", double12 == 0.05d);
        org.junit.Assert.assertNull(legendItemCollection23);
        org.junit.Assert.assertNotNull(axisLocation25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "AxisLocation.BOTTOM_OR_RIGHT" + "'", str26.equals("AxisLocation.BOTTOM_OR_RIGHT"));
    }

    @Test
    public void test486() throws Throwable {
printRuntimeMSG("---RegressionTest2:test486");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test486");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator3 = lineAndShapeRenderer2.getBaseItemLabelGenerator();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition5 = lineAndShapeRenderer2.getSeriesNegativeItemLabelPosition(192);
        double double6 = itemLabelPosition5.getAngle();
        org.junit.Assert.assertNull(categoryItemLabelGenerator3);
        org.junit.Assert.assertNotNull(itemLabelPosition5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test487() throws Throwable {
printRuntimeMSG("---RegressionTest2:test487");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test487");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        org.jfree.chart.labels.StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator10 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator("");
        lineAndShapeRenderer2.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator10);
        java.awt.Shape shape12 = lineAndShapeRenderer2.getBaseShape();
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(shape12);
    }

    @Test
    public void test488() throws Throwable {
printRuntimeMSG("---RegressionTest2:test488");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test488");
        org.jfree.chart.LegendItem legendItem1 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9");
        java.awt.Color color3 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem4 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color3);
        java.lang.String str5 = legendItem4.getToolTipText();
        java.awt.Stroke stroke6 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem4.setOutlineStroke(stroke6);
        legendItem1.setOutlineStroke(stroke6);
        java.awt.Stroke stroke9 = legendItem1.getLineStroke();
        boolean boolean11 = legendItem1.equals((java.lang.Object) (-16777216));
        legendItem1.setDescription("ChartEntity: tooltip = org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT");
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(stroke9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test489() throws Throwable {
printRuntimeMSG("---RegressionTest2:test489");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test489");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.util.Layer layer1 = null;
        java.util.Collection collection2 = categoryPlot0.getDomainMarkers(layer1);
        boolean boolean3 = categoryPlot0.canSelectByPoint();
        categoryPlot0.setRangeCrosshairValue(2.0d, false);
        org.junit.Assert.assertNull(collection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test490() throws Throwable {
printRuntimeMSG("---RegressionTest2:test490");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test490");
        org.jfree.chart.util.RectangleInsets rectangleInsets0 = new org.jfree.chart.util.RectangleInsets();
        double double2 = rectangleInsets0.calculateBottomInset(100.0d);
        java.lang.String str3 = rectangleInsets0.toString();
        double double5 = rectangleInsets0.calculateLeftInset(188.0d);
        java.awt.geom.Rectangle2D rectangle2D6 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D9 = rectangleInsets0.createInsetRectangle(rectangle2D6, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "RectangleInsets[t=1.0,l=1.0,b=1.0,r=1.0]" + "'", str3.equals("RectangleInsets[t=1.0,l=1.0,b=1.0,r=1.0]"));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test491() throws Throwable {
printRuntimeMSG("---RegressionTest2:test491");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test491");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation4 = categoryPlot0.getOrientation();
        org.jfree.chart.renderer.category.BarRenderer barRenderer6 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint7 = barRenderer6.getShadowPaint();
        boolean boolean8 = barRenderer6.getBaseSeriesVisible();
        categoryPlot0.setRenderer((int) (short) 100, (org.jfree.chart.renderer.category.CategoryItemRenderer) barRenderer6);
        double double10 = barRenderer6.getShadowXOffset();
        org.jfree.chart.urls.CategoryURLGenerator categoryURLGenerator14 = barRenderer6.getURLGenerator((int) (short) 0, (-16777216), true);
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition16 = barRenderer6.getSeriesNegativeItemLabelPosition(15);
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plotOrientation4);
        org.junit.Assert.assertNotNull(paint7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.0d + "'", double10 == 4.0d);
        org.junit.Assert.assertNull(categoryURLGenerator14);
        org.junit.Assert.assertNotNull(itemLabelPosition16);
    }

    @Test
    public void test492() throws Throwable {
printRuntimeMSG("---RegressionTest2:test492");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test492");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.axis.AxisLocation axisLocation2 = org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT;
        org.jfree.chart.axis.AxisLocation axisLocation3 = axisLocation2.getOpposite();
        categoryPlot0.setDomainAxisLocation(axisLocation3, false);
        boolean boolean6 = categoryPlot0.canSelectByRegion();
        org.jfree.chart.LegendItemCollection legendItemCollection7 = categoryPlot0.getLegendItems();
        try {
            org.jfree.chart.LegendItem legendItem9 = legendItemCollection7.get((-16777216));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(axisLocation2);
        org.junit.Assert.assertNotNull(axisLocation3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(legendItemCollection7);
    }

    @Test
    public void test493() throws Throwable {
printRuntimeMSG("---RegressionTest2:test493");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test493");
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer2 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean4 = lineAndShapeRenderer2.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean5 = lineAndShapeRenderer2.getBaseLinesVisible();
        lineAndShapeRenderer2.setAutoPopulateSeriesPaint(false);
        boolean boolean8 = lineAndShapeRenderer2.getAutoPopulateSeriesPaint();
        boolean boolean9 = lineAndShapeRenderer2.getBaseCreateEntities();
        java.awt.Color color11 = org.jfree.chart.ChartColor.VERY_DARK_CYAN;
        lineAndShapeRenderer2.setSeriesPaint((int) '4', (java.awt.Paint) color11, true);
        lineAndShapeRenderer2.setSeriesLinesVisible(192, false);
        java.awt.Graphics2D graphics2D17 = null;
        org.jfree.data.category.CategoryDataset categoryDataset18 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis19 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis19.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis22 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer25 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator26 = lineAndShapeRenderer25.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot27 = new org.jfree.chart.plot.CategoryPlot(categoryDataset18, categoryAxis19, valueAxis22, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer25);
        java.awt.geom.Rectangle2D rectangle2D28 = null;
        try {
            lineAndShapeRenderer2.drawBackground(graphics2D17, categoryPlot27, rectangle2D28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNull(categoryItemLabelGenerator26);
    }

    @Test
    public void test494() throws Throwable {
printRuntimeMSG("---RegressionTest2:test494");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test494");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot2 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke3 = categoryPlot2.getRangeMinorGridlineStroke();
        categoryPlot0.setParent((org.jfree.chart.plot.Plot) categoryPlot2);
        org.jfree.chart.LegendItemCollection legendItemCollection5 = categoryPlot0.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent6 = null;
        categoryPlot0.axisChanged(axisChangeEvent6);
        org.jfree.chart.axis.AxisSpace axisSpace8 = categoryPlot0.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset9 = null;
        categoryPlot0.setDataset(categoryDataset9);
        java.awt.Stroke stroke11 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot0.setDomainCrosshairStroke(stroke11);
        java.awt.Stroke stroke13 = categoryPlot0.getRangeGridlineStroke();
        categoryPlot0.setForegroundAlpha((float) (-1));
        org.jfree.data.category.CategoryDataset categoryDataset16 = categoryPlot0.getDataset();
        java.awt.Paint paint17 = categoryPlot0.getDomainCrosshairPaint();
        java.awt.Stroke stroke18 = categoryPlot0.getRangeZeroBaselineStroke();
        org.jfree.chart.renderer.RenderAttributes renderAttributes27 = new org.jfree.chart.renderer.RenderAttributes();
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer31 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        java.lang.Boolean boolean33 = lineAndShapeRenderer31.getSeriesItemLabelsVisible((int) (short) 100);
        boolean boolean34 = lineAndShapeRenderer31.getBaseLinesVisible();
        java.awt.Shape shape35 = org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
        lineAndShapeRenderer31.setBaseLegendShape(shape35);
        renderAttributes27.setSeriesShape((int) ' ', shape35);
        org.jfree.chart.entity.ChartEntity chartEntity39 = new org.jfree.chart.entity.ChartEntity(shape35, "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]");
        java.awt.Paint paint40 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        java.awt.Color color42 = java.awt.Color.orange;
        org.jfree.chart.LegendItem legendItem43 = new org.jfree.chart.LegendItem("", (java.awt.Paint) color42);
        java.lang.String str44 = legendItem43.getToolTipText();
        java.awt.Stroke stroke45 = org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
        legendItem43.setOutlineStroke(stroke45);
        java.awt.Shape shape51 = null;
        java.awt.Color color52 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke53 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color54 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem55 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape51, (java.awt.Paint) color52, stroke53, (java.awt.Paint) color54);
        java.lang.Class<?> wildcardClass56 = color52.getClass();
        org.jfree.chart.LegendItem legendItem57 = new org.jfree.chart.LegendItem("ItemLabelAnchor.OUTSIDE9", "SortOrder.ASCENDING", "GradientPaintTransformType.CENTER_VERTICAL", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape35, paint40, stroke45, (java.awt.Paint) color52);
        org.jfree.chart.entity.ChartEntity chartEntity58 = new org.jfree.chart.entity.ChartEntity(shape35);
        java.awt.Color color59 = org.jfree.chart.ChartColor.DARK_RED;
        org.jfree.chart.LegendItem legendItem60 = new org.jfree.chart.LegendItem("hi!", "GradientPaintTransformType.CENTER_VERTICAL", "", "", shape35, (java.awt.Paint) color59);
        org.jfree.data.category.DefaultCategoryDataset defaultCategoryDataset63 = new org.jfree.data.category.DefaultCategoryDataset();
        org.jfree.chart.entity.CategoryItemEntity categoryItemEntity66 = new org.jfree.chart.entity.CategoryItemEntity(shape35, "ItemLabelAnchor.OUTSIDE9", "", (org.jfree.data.category.CategoryDataset) defaultCategoryDataset63, (java.lang.Comparable) (-12566464), (java.lang.Comparable) (byte) 100);
        defaultCategoryDataset63.addValue((java.lang.Number) (-1), (java.lang.Comparable) "org.jfree.chart.event.ChartChangeEvent[source=-16777216]", (java.lang.Comparable) "SortOrder.ASCENDING");
        defaultCategoryDataset63.clearSelection();
        defaultCategoryDataset63.removeColumn((java.lang.Comparable) "SortOrder.ASCENDING");
        defaultCategoryDataset63.addValue((-1.0d), (java.lang.Comparable) (byte) 0, (java.lang.Comparable) 8);
        int int78 = categoryPlot0.indexOf((org.jfree.data.category.CategoryDataset) defaultCategoryDataset63);
        java.lang.Object obj79 = categoryPlot0.clone();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(stroke3);
        org.junit.Assert.assertNull(legendItemCollection5);
        org.junit.Assert.assertNull(axisSpace8);
        org.junit.Assert.assertNotNull(stroke11);
        org.junit.Assert.assertNotNull(stroke13);
        org.junit.Assert.assertNull(categoryDataset16);
        org.junit.Assert.assertNotNull(paint17);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(shape35);
        org.junit.Assert.assertNotNull(paint40);
        org.junit.Assert.assertNotNull(color42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(stroke45);
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNotNull(stroke53);
        org.junit.Assert.assertNotNull(color54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(color59);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(obj79);
    }

    @Test
    public void test495() throws Throwable {
printRuntimeMSG("---RegressionTest2:test495");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test495");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        org.jfree.chart.renderer.category.CategoryItemRenderer categoryItemRenderer2 = null;
        categoryPlot0.setRenderer(categoryItemRenderer2);
        org.jfree.chart.event.PlotChangeEvent plotChangeEvent4 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot) categoryPlot0);
        categoryPlot0.setRangeMinorGridlinesVisible(true);
        java.awt.Graphics2D graphics2D7 = null;
        java.awt.geom.Rectangle2D rectangle2D8 = null;
        org.jfree.chart.plot.PlotRenderingInfo plotRenderingInfo10 = null;
        org.jfree.chart.plot.CategoryCrosshairState categoryCrosshairState11 = null;
        boolean boolean12 = categoryPlot0.render(graphics2D7, rectangle2D8, 0, plotRenderingInfo10, categoryCrosshairState11);
        boolean boolean13 = categoryPlot0.isDomainCrosshairVisible();
        int int14 = categoryPlot0.getWeight();
        org.jfree.chart.plot.CategoryPlot categoryPlot15 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke16 = categoryPlot15.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot17 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke18 = categoryPlot17.getRangeMinorGridlineStroke();
        categoryPlot15.setParent((org.jfree.chart.plot.Plot) categoryPlot17);
        org.jfree.chart.event.AnnotationChangeEvent annotationChangeEvent20 = null;
        categoryPlot17.annotationChanged(annotationChangeEvent20);
        categoryPlot17.setCrosshairDatasetIndex((int) (byte) -1, false);
        boolean boolean25 = categoryPlot0.equals((java.lang.Object) categoryPlot17);
        int int26 = categoryPlot17.getCrosshairDatasetIndex();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(stroke16);
        org.junit.Assert.assertNotNull(stroke18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test496() throws Throwable {
printRuntimeMSG("---RegressionTest2:test496");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test496");
        org.jfree.data.KeyedObjects keyedObjects0 = new org.jfree.data.KeyedObjects();
        try {
            keyedObjects0.removeValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test497() throws Throwable {
printRuntimeMSG("---RegressionTest2:test497");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test497");
        java.awt.Shape shape4 = null;
        java.awt.Color color5 = org.jfree.chart.ChartColor.VERY_DARK_GREEN;
        java.awt.Stroke stroke6 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        java.awt.Color color7 = java.awt.Color.RED;
        org.jfree.chart.LegendItem legendItem8 = new org.jfree.chart.LegendItem("", "", "", "org.jfree.data.UnknownKeyException: TextAnchor.HALF_ASCENT_LEFT", shape4, (java.awt.Paint) color5, stroke6, (java.awt.Paint) color7);
        java.awt.Paint paint9 = legendItem8.getLabelPaint();
        java.awt.Stroke stroke10 = legendItem8.getOutlineStroke();
        org.junit.Assert.assertNotNull(color5);
        org.junit.Assert.assertNotNull(stroke6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNull(paint9);
        org.junit.Assert.assertNotNull(stroke10);
    }

    @Test
    public void test498() throws Throwable {
printRuntimeMSG("---RegressionTest2:test498");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test498");
        org.jfree.chart.plot.CategoryPlot categoryPlot0 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke1 = categoryPlot0.getRangeMinorGridlineStroke();
        categoryPlot0.setBackgroundImageAlignment((int) (byte) -1);
        org.jfree.chart.plot.PlotOrientation plotOrientation4 = categoryPlot0.getOrientation();
        org.jfree.chart.axis.AxisSpace axisSpace5 = null;
        categoryPlot0.setFixedDomainAxisSpace(axisSpace5);
        categoryPlot0.clearRangeMarkers();
        org.junit.Assert.assertNotNull(stroke1);
        org.junit.Assert.assertNotNull(plotOrientation4);
    }

    @Test
    public void test499() throws Throwable {
printRuntimeMSG("---RegressionTest2:test499");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test499");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis1 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis1.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis4 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer7 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator8 = lineAndShapeRenderer7.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot(categoryDataset0, categoryAxis1, valueAxis4, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer7);
        boolean boolean10 = categoryAxis1.isTickLabelsVisible();
        categoryAxis1.setLabelToolTip("hi!");
        boolean boolean13 = categoryAxis1.isVisible();
        categoryAxis1.setMaximumCategoryLabelWidthRatio((float) 10L);
        org.jfree.data.category.CategoryDataset categoryDataset16 = null;
        org.jfree.chart.axis.CategoryAxis categoryAxis17 = new org.jfree.chart.axis.CategoryAxis();
        categoryAxis17.setMinorTickMarkOutsideLength((float) (short) 0);
        org.jfree.chart.axis.ValueAxis valueAxis20 = null;
        org.jfree.chart.renderer.category.LineAndShapeRenderer lineAndShapeRenderer23 = new org.jfree.chart.renderer.category.LineAndShapeRenderer(true, true);
        org.jfree.chart.labels.CategoryItemLabelGenerator categoryItemLabelGenerator24 = lineAndShapeRenderer23.getBaseItemLabelGenerator();
        org.jfree.chart.plot.CategoryPlot categoryPlot25 = new org.jfree.chart.plot.CategoryPlot(categoryDataset16, categoryAxis17, valueAxis20, (org.jfree.chart.renderer.category.CategoryItemRenderer) lineAndShapeRenderer23);
        categoryAxis17.setVisible(false);
        java.lang.String str29 = categoryAxis17.getCategoryLabelToolTip((java.lang.Comparable) 0);
        org.jfree.chart.axis.CategoryLabelPositions categoryLabelPositions30 = categoryAxis17.getCategoryLabelPositions();
        categoryAxis17.setAxisLineVisible(false);
        org.jfree.chart.util.RectangleInsets rectangleInsets33 = org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS;
        java.lang.String str34 = rectangleInsets33.toString();
        double double35 = rectangleInsets33.getTop();
        categoryAxis17.setTickLabelInsets(rectangleInsets33);
        categoryAxis1.setTickLabelInsets(rectangleInsets33);
        java.awt.geom.Rectangle2D rectangle2D38 = null;
        org.jfree.chart.util.LengthAdjustmentType lengthAdjustmentType39 = null;
        org.jfree.chart.util.LengthAdjustmentType lengthAdjustmentType40 = null;
        try {
            java.awt.geom.Rectangle2D rectangle2D41 = rectangleInsets33.createAdjustedRectangle(rectangle2D38, lengthAdjustmentType39, lengthAdjustmentType40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'base' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(categoryItemLabelGenerator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(categoryItemLabelGenerator24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(categoryLabelPositions30);
        org.junit.Assert.assertNotNull(rectangleInsets33);
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]" + "'", str34.equals("RectangleInsets[t=2.0,l=4.0,b=2.0,r=4.0]"));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2.0d + "'", double35 == 2.0d);
    }

    @Test
    public void test500() throws Throwable {
printRuntimeMSG("---RegressionTest2:test500");

        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test500");
        org.jfree.chart.renderer.category.BarRenderer barRenderer0 = new org.jfree.chart.renderer.category.BarRenderer();
        java.awt.Paint paint1 = barRenderer0.getShadowPaint();
        org.jfree.chart.labels.ItemLabelPosition itemLabelPosition2 = barRenderer0.getPositiveItemLabelPositionFallback();
        double double3 = barRenderer0.getMaximumBarWidth();
        java.awt.Shape shape4 = barRenderer0.getBaseShape();
        org.jfree.chart.labels.CategoryToolTipGenerator categoryToolTipGenerator8 = barRenderer0.getToolTipGenerator(192, 4, false);
        org.jfree.chart.plot.CategoryPlot categoryPlot9 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke10 = categoryPlot9.getRangeMinorGridlineStroke();
        org.jfree.chart.plot.CategoryPlot categoryPlot11 = new org.jfree.chart.plot.CategoryPlot();
        java.awt.Stroke stroke12 = categoryPlot11.getRangeMinorGridlineStroke();
        categoryPlot9.setParent((org.jfree.chart.plot.Plot) categoryPlot11);
        org.jfree.chart.LegendItemCollection legendItemCollection14 = categoryPlot9.getFixedLegendItems();
        org.jfree.chart.event.AxisChangeEvent axisChangeEvent15 = null;
        categoryPlot9.axisChanged(axisChangeEvent15);
        org.jfree.chart.axis.AxisSpace axisSpace17 = categoryPlot9.getFixedRangeAxisSpace();
        org.jfree.data.category.CategoryDataset categoryDataset18 = null;
        categoryPlot9.setDataset(categoryDataset18);
        java.awt.Stroke stroke20 = org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE;
        categoryPlot9.setDomainCrosshairStroke(stroke20);
        java.awt.Stroke stroke22 = categoryPlot9.getRangeGridlineStroke();
        categoryPlot9.setForegroundAlpha((float) (-1));
        org.jfree.data.category.CategoryDataset categoryDataset25 = categoryPlot9.getDataset();
        java.awt.Paint paint26 = categoryPlot9.getDomainCrosshairPaint();
        barRenderer0.setPlot(categoryPlot9);
        java.awt.Paint paint29 = null;
        try {
            barRenderer0.setSeriesFillPaint((-1), paint29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires index >= 0.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(paint1);
        org.junit.Assert.assertNull(itemLabelPosition2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(shape4);
        org.junit.Assert.assertNull(categoryToolTipGenerator8);
        org.junit.Assert.assertNotNull(stroke10);
        org.junit.Assert.assertNotNull(stroke12);
        org.junit.Assert.assertNull(legendItemCollection14);
        org.junit.Assert.assertNull(axisSpace17);
        org.junit.Assert.assertNotNull(stroke20);
        org.junit.Assert.assertNotNull(stroke22);
        org.junit.Assert.assertNull(categoryDataset25);
        org.junit.Assert.assertNotNull(paint26);
    }
}

