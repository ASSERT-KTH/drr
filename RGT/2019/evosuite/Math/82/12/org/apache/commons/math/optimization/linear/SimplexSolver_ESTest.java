/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 07:02:36 GMT 2019
 */

package org.apache.commons.math.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.Consumer;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexSolver;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class SimplexSolver_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, 100);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 100);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, arrayRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
      doReturn((double)100, (double)100, (double)100, (double)100).when(linearConstraint0).getValue();
      linkedList0.add(linearConstraint0);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, 100);
      simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
      assertEquals(1, simplexSolver0.getIterations());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, 100);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 100);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Relationship relationship0 = Relationship.EQ;
      Relationship relationship1 = Relationship.EQ;
      Relationship relationship2 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(arrayRealVector0, (RealVector) null).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship1, relationship0, relationship2).when(linearConstraint0).getRelationship();
      doReturn((double)100, 1.0, 0.0, 0.0).when(linearConstraint0).getValue();
      Consumer<LinearConstraint> consumer0 = (Consumer<LinearConstraint>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.offer(linearConstraint0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1749.8049967));
      simplexSolver0.isOptimal(simplexTableau0);
      Relationship relationship3 = Relationship.LEQ;
      Relationship relationship4 = Relationship.GEQ;
      LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0).when(linearConstraint1).getCoefficients();
      doReturn(relationship3, relationship3, relationship3, relationship4, relationship3).when(linearConstraint1).getRelationship();
      doReturn(1.0E-12, 1.0E-12).when(linearConstraint1).getValue();
      linkedList0.add(linearConstraint1);
      LinearConstraint linearConstraint2 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0).when(linearConstraint2).getCoefficients();
      doReturn(relationship3, relationship3, relationship3, relationship3, relationship4).when(linearConstraint2).getRelationship();
      doReturn(1.0E-12, (double)100).when(linearConstraint2).getValue();
      linkedList0.add(linearConstraint2);
      GoalType goalType1 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau1 = null;
      try {
        simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, true, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(100, 100);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(arrayRealVector0, 100);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      Relationship relationship0 = Relationship.LEQ;
      Relationship relationship1 = Relationship.LEQ;
      Relationship relationship2 = Relationship.GEQ;
      Relationship relationship3 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, (RealVector) null).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship1, relationship2, relationship3).when(linearConstraint0).getRelationship();
      doReturn(1.0E-12, 1.0E-12, 0.0, 0.0).when(linearConstraint0).getValue();
      linkedList0.add(linearConstraint0);
      Relationship relationship4 = Relationship.LEQ;
      Relationship relationship5 = Relationship.LEQ;
      LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, (RealVector) null).when(linearConstraint1).getCoefficients();
      doReturn(relationship4, relationship0, relationship0, relationship0, relationship5).when(linearConstraint1).getRelationship();
      doReturn(0.0, (double)100, 0.0, 0.0).when(linearConstraint1).getValue();
      linkedList0.add(linearConstraint1);
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100);
      simplexSolver0.doIteration(simplexTableau0);
      // Undeclared exception!
      try { 
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.linear.SimplexTableau", e);
      }
  }
}
