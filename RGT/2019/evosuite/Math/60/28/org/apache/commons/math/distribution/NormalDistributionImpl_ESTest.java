/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:01:53 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class NormalDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.5, 0.5, 0.5);
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(0.5, double0, 0.01);
      assertEquals(0.5, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.5, 0.5, 0.5);
      double double0 = normalDistributionImpl0.density(8.251545029714408E-9);
      assertEquals(0.4839414570248161, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.5, 0.5, 0.5);
      normalDistributionImpl0.sample(121);
      assertEquals(0.5, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.5, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.5, 0.5, 0.5);
      double double0 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(0.5, double0, 0.01);
      assertEquals(0.5, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.5, 0.5, 0.5);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.5);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = null;
      try {
        normalDistributionImpl0 = new NormalDistributionImpl((-178.7125), (-178.7125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -178.713 is smaller than, or equal to, the minimum (0): standard deviation (-178.713)
         //
         verifyException("org.apache.commons.math.distribution.NormalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.5, 0.5, 0.5);
      normalDistributionImpl0.cumulativeProbability((double) 121, (double) 121);
      assertEquals(0.5, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.5, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(2205.0454, 27.929568325286404, 27.929568325286404);
      double double0 = normalDistributionImpl0.cumulativeProbability(2.100771432507);
      assertEquals(27.929568325286404, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(253.0, 253.0, 253.0);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(1);
      assertEquals(253.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(253.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.036);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals((-1.799118106368136), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.5772156649015329);
      assertEquals(0.19477554205358072, double0, 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }
}
