/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 15:27:11 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class EigenDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(13, 13);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-258.67));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(13, 13);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-258.67));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 822
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 57.600959880428604;
      doubleArray0[1] = 4.881385886630139E-25;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.5);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 2.320366121466577E-13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(6, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      eigenDecompositionImpl0.getD();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-5275.979105794129));
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      eigenDecompositionImpl0.getVT();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertTrue(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(13, 13);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-258.67));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix0);
      
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.5654571800259873E-9;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-5275.979105794129));
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 4988.426843;
      doubleArray0[4] = 2805.66924164966;
      double[] doubleArray1 = new double[6];
      doubleArray0[5] = 2805.66924164966;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-5275.979105794129));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 4988.426843;
      doubleArray0[2] = 1101.33634496;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1040.777513735062);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-5275.979105794129));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[0] = 7.916422755854953;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 7.916422755854953;
      doubleArray1[1] = 7.916422755854953;
      doubleArray1[2] = 7.916422755854953;
      doubleArray1[3] = 7.916422755854953;
      doubleArray1[4] = 7.916422755854953;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-5.74034217699652E7), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 3034.706;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.5654571800259873E-9;
      doubleArray1[1] = 3034.706;
      doubleArray1[2] = 2.5654571800259873E-9;
      doubleArray1[3] = 2.5654571800259873E-9;
      doubleArray1[4] = 2.5654571800259873E-9;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-37.812168012713116);
      doubleArray0[1] = (-1838.0);
      doubleArray0[2] = (-1838.0);
      doubleArray0[3] = (-1838.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = (-1838.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1780.2359019464811));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[2] = 658.459679183;
      doubleArray0[0] = 3034.706;
      doubleArray0[4] = 658.459679183;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[2] = 658.459679183;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-1809.2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(1.0002588561312475, realVector0.getL1Norm(), 0.01);
      assertEquals(1.1089563611382261E21, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[2] = 658.459679183;
      doubleArray0[3] = 3034.706;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-37.812168012713116);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-37.812168012713116);
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[2] = (-1838.343695882739);
      doubleArray0[3] = 3034.706;
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = (-1838.343695882739);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = 2805.66924164966;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-5275.979105794129));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 4989.66180865864;
      doubleArray0[4] = 2805.66924164966;
      doubleArray0[5] = 2805.66924164966;
      doubleArray0[6] = 2805.66924164966;
      double[] doubleArray1 = new double[6];
      doubleArray1[5] = 2805.66924164966;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-5275.979105794129));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = (-37.812168012713116);
      doubleArray1[3] = 7.85934036535267;
      doubleArray1[4] = 7.85934036535267;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-37.812168012713116);
      doubleArray0[1] = (-1838.0);
      doubleArray0[2] = (-1838.0);
      doubleArray0[3] = (-1838.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = (-1838.0);
      doubleArray1[3] = (-21.082544524552397);
      doubleArray1[4] = (-1780.2359019464811);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1780.2359019464811));
      assertEquals(6.4887105653511936E17, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 2.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 2.5654571800259873E-9;
      doubleArray1[3] = 2.5654571800259873E-9;
      doubleArray1[4] = 2.5654571800259873E-9;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 2.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.5654571800259873E-9;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 2.5654571800259873E-9;
      doubleArray1[3] = 2.5654571800259873E-9;
      doubleArray1[4] = 2.5654571800259873E-9;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-37.812168012713116);
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[2] = 658.459679183;
      doubleArray0[3] = 3034.706;
      doubleArray0[5] = (-1809.2);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = 658.459679183;
      doubleArray1[3] = 658.459679183;
      doubleArray1[4] = (-1809.2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals((-3.2059318144883693E17), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 2.5654571800259873E-9;
      doubleArray0[4] = 2.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 2.5654571800259873E-9;
      doubleArray1[3] = 2.5654571800259873E-9;
      doubleArray1[4] = 2.5654571800259873E-9;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1838.343695882739);
      doubleArray0[3] = 75494.41224494437;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1809.2);
      doubleArray1[1] = (-1838.343695882739);
      doubleArray1[2] = (-37.812168012713116);
      doubleArray1[3] = (-1809.2);
      doubleArray1[4] = (-37.812168012713116);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals((-6.4950471565304192E17), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[3] = 3034.706;
      doubleArray0[5] = (-1809.2);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = 658.459679183;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-1809.2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals((-1.631794792942071E20), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-37.812168012713116);
      doubleArray0[2] = 658.459679183;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = 658.459679183;
      doubleArray1[3] = 658.459679183;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-37.812168012713116);
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[2] = 658.459679183;
      doubleArray0[3] = 3034.706;
      doubleArray0[5] = (-1809.2);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = 658.459679183;
      doubleArray1[3] = 658.459679183;
      doubleArray1[4] = (-1809.2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals((-3.2057476162618925E17), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1838.343695882739);
      doubleArray0[2] = (-1838.343695882739);
      doubleArray0[3] = 3034.706;
      doubleArray0[4] = 3034.706;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1838.343695882739);
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = (-1838.343695882739);
      doubleArray1[3] = (-1838.343695882739);
      doubleArray1[4] = (-1809.2);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals((-9.909554464053846E19), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1843.750707765415);
      doubleArray0[2] = 658.459679183;
      doubleArray0[3] = 658.459679183;
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = (-1843.750707765415);
      doubleArray1[3] = (-1843.750707765415);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-37.812168012713116);
      doubleArray0[3] = (-1838.343695882739);
      doubleArray0[4] = 8.128608897095546E-11;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 8.128608897095546E-11;
      doubleArray1[1] = (-37.812168012713116);
      doubleArray1[2] = (-37.812168012713116);
      doubleArray1[3] = 8.128608897095546E-11;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1809.2));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 2.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3034.706;
      doubleArray1[1] = 3034.706;
      doubleArray1[2] = 2.5654571800259873E-9;
      doubleArray1[3] = 2.5654571800259873E-9;
      doubleArray1[4] = 2.5654571800259873E-9;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      assertEquals((-2.204914776636748E-22), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1646.014290516994);
      doubleArray0[3] = 3034.706;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 8.128608897095546E-11;
      doubleArray1[1] = (-37.8122);
      doubleArray1[2] = (-37.8122);
      doubleArray1[3] = 8.128608897095546E-11;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-37.8122));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 2.5654571800259873E-9;
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 2.5654571800259873E-9);
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(13, 13);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-258.67));
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(13, realMatrix0.getColumnDimension());
  }
}
