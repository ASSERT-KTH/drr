/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 15:56:39 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class EigenDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1902.4050934633535));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1902.4050934633535));
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1902.4050934633535));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1902.4050934633535));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-601.1624997));
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-2216.186);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.1102230246251565E-14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-601.1624997));
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1902.4050934633535));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1902.4050934633535));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertNotNull(realMatrix1);
      
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getV();
      assertTrue(realMatrix2.equals((Object)realMatrix1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1902.4050934633535));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1902.4050934633535));
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getD();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getD();
      assertSame(realMatrix2, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(7, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-601.1624997));
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1902.4050934633535));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1902.4050934633535));
      eigenDecompositionImpl0.getVT();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertFalse(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(Double.NaN, realVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1277.20569233702));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1902.4050934633535));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1902.4050934633535));
      eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (-601.1624997);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 0.25;
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = 0.25;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.25;
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = 0.25;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-601.1624997);
      doubleArray0[1] = (-601.1624997);
      doubleArray0[2] = (-3.311940778552542);
      doubleArray0[3] = 2770.837542021761;
      doubleArray0[6] = 2293.341724;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-3.311940778552542);
      doubleArray1[2] = (-0.1769775411682822);
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-3.311940778552542);
      doubleArray1[5] = (-601.1624997);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3.311940778552542));
      assertEquals(8.607810526315046E14, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 2.2250738585072014E-308;
      doubleArray1[3] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-3776.86013433087);
      doubleArray0[3] = (-3776.86013433087);
      doubleArray0[5] = 2305.222;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-601.1624997);
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-601.1624997);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-3776.86013433087);
      doubleArray0[3] = 2772.0453329334;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-601.1624997);
      doubleArray1[2] = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 6.283185307179586;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-601.1624997);
      doubleArray0[1] = (-3776.86013433087);
      doubleArray0[2] = (-3.311940778552542);
      doubleArray0[3] = 2770.837542021761;
      doubleArray0[5] = (-3776.86013433087);
      doubleArray0[6] = 2293.341724;
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-3.311940778552542);
      doubleArray1[5] = (-3776.86013433087);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3.311940778552542));
      assertEquals((-1.9569690429008946E22), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-601.1624997);
      doubleArray0[1] = (-601.1624997);
      doubleArray0[3] = 2772.0453329334;
      doubleArray0[6] = (-601.1624997);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-601.1624997);
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-601.1624997);
      doubleArray1[5] = (-601.1624997);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(1.5921881592863883E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 2772.0453329334;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(2771.0453329334073, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-601.1624997);
      doubleArray0[1] = (-3776.86013433087);
      doubleArray0[6] = (-3776.86013433087);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-3776.86013433087);
      doubleArray1[2] = (-3776.86013433087);
      doubleArray1[3] = (-3776.86013433087);
      doubleArray1[4] = (-3.311940778552542);
      doubleArray1[5] = (-601.1624997);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-601.1624997));
      assertEquals(1.1202217971119749E21, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-601.1624997);
      doubleArray0[1] = (-3776.86013433087);
      doubleArray0[3] = 2772.0453329334;
      doubleArray0[5] = 2305.222;
      doubleArray0[6] = 2293.341724;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-601.1624997);
      doubleArray1[2] = 0.8248640814673778;
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-601.1624997);
      doubleArray1[5] = (-3776.86013433087);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(2.0577352844752224E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-601.1624997);
      doubleArray0[5] = 2305.222;
      doubleArray0[6] = (-3776.86013433087);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-601.1624997);
      doubleArray1[2] = 0.4331196978490085;
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-601.1624997);
      doubleArray1[5] = (-3776.86013433087);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-1.1043603553579637E22), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-601.1624997);
      doubleArray0[1] = (-3776.86013433087);
      doubleArray0[3] = 2772.0453329334;
      doubleArray0[5] = 2305.222;
      doubleArray0[6] = 2293.341724;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-601.1624997);
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-601.1624997);
      doubleArray1[5] = (-3776.86013433087);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(2.0577245186247115E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-601.1624997);
      doubleArray0[1] = (-601.1624997);
      doubleArray0[5] = 2305.222;
      doubleArray0[6] = 2293.341724;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-601.1624997);
      doubleArray1[2] = 0.4331196978490085;
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-601.1624997);
      doubleArray1[5] = (-3776.86013433087);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(7.049195020298233E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-1933.917561105515);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 1.0953279611466118;
      doubleArray1[3] = 1.0953279611466118;
      doubleArray1[4] = 6.283185307179586;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 6.283185307179586);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-1933.70527021579);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 1.0953279611466118;
      doubleArray1[3] = 1.0953279611466118;
      doubleArray1[4] = 6.283185307179586;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-3776.86013433087);
      doubleArray0[3] = 2772.0453329334;
      doubleArray0[5] = 2305.222;
      doubleArray0[6] = 2293.341724;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-601.1624997);
      doubleArray1[1] = (-3776.86013433087);
      doubleArray1[2] = (-3776.86013433087);
      doubleArray1[3] = (-601.1624997);
      doubleArray1[4] = (-3776.86013433087);
      doubleArray1[5] = (-3776.86013433087);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-1.6864603871274575E23), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1277.20569233702);
      doubleArray0[6] = 211.148;
      doubleArray0[3] = (-1277.20569233702);
      doubleArray0[4] = (-1277.20569233702);
      doubleArray0[7] = (-432.2097135);
      doubleArray0[8] = (-4485.78414);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1277.20569233702);
      doubleArray0[6] = 212.2093379573834;
      doubleArray0[3] = 212.2093379573834;
      doubleArray0[7] = (-432.2097135);
      doubleArray0[8] = (-4485.78414);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1277.20569233702);
      doubleArray0[6] = 211.148;
      doubleArray0[3] = (-1277.20569233702);
      doubleArray0[7] = (-432.2097135);
      doubleArray0[8] = (-4485.78414);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1277.20569233702));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1902.4050934633535);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1902.4050934633535));
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, (-1902.4050934633535));
      eigenDecompositionImpl0.getVT();
      assertEquals(3619145.139635311, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-601.1624997);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(realMatrix0);
  }
}
