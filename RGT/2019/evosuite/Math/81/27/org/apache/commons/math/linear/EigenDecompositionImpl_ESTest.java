/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 16:41:18 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class EigenDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(12, 12);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 12);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0);
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0);
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2273.075170385218);
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 1.8365510501272553E-11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertFalse(realMatrix1.equals((Object)realMatrix0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.7566947595832351));
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector((-2618));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2618
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      try { 
        eigenDecompositionImpl0.getEigenvector((-2618));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2618
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getSubMatrix(0, 0, 0, 0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1611.847615);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getVT();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1611.847615);
      doubleArray1[1] = (-1.1107017369392893);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-2011.4611);
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.758855827680097E-6;
      doubleArray1[2] = 4.758855827680097E-6;
      doubleArray0[2] = 4.758855827680097E-6;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1611.847615);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = 1.4779288903810084E-11;
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = 1.4779288903810084E-11;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (-2011.4611);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.758855827680097E-6;
      doubleArray1[2] = 4.758855827680097E-6;
      doubleArray1[3] = 4.758855827680097E-6;
      doubleArray1[4] = 1007.99445802836;
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-16.94513642872734);
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.758855827680097E-6;
      doubleArray1[2] = 4.758855827680097E-6;
      doubleArray1[3] = 4.758855827680097E-6;
      doubleArray1[4] = 1007.99445802836;
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-16.94513642872734));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-2011.4611);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = 1.4779288903810084E-11;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-7.0471536201295635);
      doubleArray0[1] = (-7.0471536201295635);
      doubleArray0[2] = (-7.0471536201295635);
      doubleArray0[3] = (-7.0471536201295635);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1611.847615);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-7.0471536201295635));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2011.4611);
      doubleArray0[3] = (-1639.5866817323363);
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-1639.5866817323363);
      doubleArray1[3] = (-203.7673);
      doubleArray1[4] = (-0.7566947595832351);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.7566947595832351));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1611.0843110002966);
      doubleArray0[4] = (-203.7673);
      doubleArray0[5] = 4.758855827680097E-6;
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.758855827680097E-6;
      doubleArray1[2] = 4.758855827680097E-6;
      doubleArray1[0] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.08170467551569605));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2011.4611);
      doubleArray0[3] = (-1639.5866817323363);
      doubleArray0[4] = (-203.7673);
      doubleArray0[5] = (-2011.4611);
      doubleArray0[6] = (-2011.4611);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1639.5866817323363);
      doubleArray1[1] = (-1639.5866817323363);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.7566947595832351));
      assertEquals(2.3021420905749003E23, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1611.0843110002966);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1611.0843110002966);
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-1.1107017369392893);
      doubleArray1[4] = (-2011.4611);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (-203.7673);
      doubleArray0[5] = 4.758855827680097E-6;
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.758855827680097E-6;
      doubleArray1[2] = 4.758855827680097E-6;
      doubleArray1[3] = 4.758855827680097E-6;
      doubleArray1[4] = 4.758855827680097E-6;
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1611.0843110002966);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.1107017369);
      doubleArray1[1] = (-1.1107017369);
      doubleArray1[2] = (-1.1107017369);
      doubleArray1[3] = (-216.1233867596554);
      doubleArray1[4] = (-1.1107017369);
      doubleArray1[5] = (-216.1233867596554);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-5.816227882493657E11), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1609.5742380060713);
      doubleArray0[6] = (-1609.5742380060713);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1609.5742380060713);
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-1.1107017369392893);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-1.1107017369392893);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(2.0813792232631984E16, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2007.9416145346079);
      doubleArray0[3] = (-1611.847615);
      doubleArray0[4] = (-203.7673);
      doubleArray0[6] = 2625.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1611.847615);
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-203.7673);
      doubleArray1[4] = (-2007.9416145346079);
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(8.893054004619979E22, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (-203.7673);
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.758855827680097E-6;
      doubleArray1[2] = 4.758855827680097E-6;
      doubleArray1[3] = 4.758855827680097E-6;
      doubleArray1[4] = 1007.99445802836;
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2011.4611);
      doubleArray0[4] = (-203.7673);
      doubleArray0[6] = 2625.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2011.4611);
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-203.7673);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(1.3977521919527504E19, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = 2625.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2240.758931644;
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-203.7673);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-6.5786647974250352E16), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2011.4611);
      doubleArray0[4] = (-203.7673);
      doubleArray0[6] = (-2011.4611);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2011.4611);
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-203.7673);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(1.4071154733568969E19, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-2011.4611);
      doubleArray0[3] = (-1611.0843110002966);
      doubleArray0[4] = (-203.7673);
      doubleArray0[5] = (-203.7673);
      doubleArray0[6] = 2625.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (-203.7673);
      doubleArray1[3] = (-203.7673);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1609.5742380060713);
      doubleArray0[5] = (-1.1107017369392893);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1609.5742380060713);
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-1.1107017369392893);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-1.1107017369392893);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-5.8804511381236075), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1611.0843110002966);
      doubleArray0[4] = (-203.7673);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1611.0843110002966);
      doubleArray1[1] = (-1.1107017369392893);
      doubleArray1[2] = (-1.1107017369392893);
      doubleArray1[3] = (-1.1107017369392893);
      doubleArray1[4] = (-2011.4611);
      doubleArray1[5] = (-203.7673);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(2.70916160264008E13, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1591.363247263114;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertTrue(decompositionSolver0.isNonSingular());
  }
}
