/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 23:15:56 GMT 2019
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class SubLine_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.copySelf();
      assertNotSame(subLine0, abstractSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, (-361.93815154346));
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, false);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-0.7406211993519998), (-0.7406211993519998));
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine0, true);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(208.68, 0.0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, (-3.5997360512765566E-9));
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine1 = new SubLine(line0, intervalsSet0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, true);
      assertFalse(vector2D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1509.547468869236), 1.375);
      Vector2D vector2D1 = vector2D0.scalarMultiply(0.0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D1, 1.375);
      Segment segment0 = new Segment(vector2D1, vector2D0, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector2D vector2D2 = subLine0.intersection(subLine1, true);
      assertNull(vector2D2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1509.547468869236), 1.375);
      Vector2D vector2D1 = new Vector2D(0.0, vector2D0, (-1509.547468869236), vector2D0, (-869.05004811434), vector2D0);
      SubLine subLine0 = new SubLine(vector2D1, vector2D1);
      Line line0 = new Line(vector2D0, 1.375);
      Segment segment0 = new Segment(vector2D1, vector2D0, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector2D vector2D2 = subLine1.intersection(subLine0, true);
      assertNull(vector2D2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(208.68, 0.0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, (-3.5997360512765566E-9));
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine1 = new SubLine(line0, intervalsSet0);
      Vector2D vector2D1 = subLine1.intersection(subLine0, false);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      Vector2D vector2D1 = subLine0.intersection(subLine0, false);
      assertEquals(Double.NaN, vector2D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      Side side0 = subLine0.side(line0);
      assertEquals(Side.BOTH, side0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-0.7406211993519998), (-0.7406211993519998));
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      Vector2D vector2D1 = new Vector2D((-1601.839081), vector2D0, (-1601.839081), vector2D0, (-1.0), vector2D0);
      SubLine subLine0 = new SubLine(vector2D1, vector2D1);
      Line line0 = new Line(vector2D1, vector2D0);
      line0.reset(vector2D0, vector2D0);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1.0), (-1.0));
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D((-1601.839081), vector2D0, (-1.0), vector2D0, 40.19140625, vector2D0);
      Line line0 = new Line(vector2D0, vector2D1);
      line0.reset(vector2D1, vector2D1);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.34217729E8, 1.34217729E8);
      Vector2D vector2D1 = new Vector2D(1.34217729E8, vector2D0, 765.62853945, vector2D0, 0.0, vector2D0, 1.34217729E8, vector2D0);
      SubLine subLine0 = new SubLine(vector2D1, vector2D0);
      Line line0 = new Line(vector2D1, vector2D1);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, (-361.93815154346));
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-0.7406211993519998), (-0.7406211993519998));
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-0.7406211993519998), (-0.7406211993519998));
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      line0.setOriginOffset((-0.7780684527660094));
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D(1.34217729E8, 1.34217729E8);
      Vector3D vector3D0 = new Vector3D(1.0E-10, 1.0E-10, 0.0);
      Plane plane0 = new Plane(vector3D0);
      Vector2D vector2D1 = plane0.toSubSpace(vector3D0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      Line line0 = new Line(vector2D1, vector2D1);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }
}
