/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 08:01:57 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.DenseRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class CholeskyDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(1, 1);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(denseRealMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // not positive definite matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY, (-1414.369329137734));
      choleskyDecompositionImpl0.getSolver();
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2, 581);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(openMapRealMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 2x581 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 177.589963;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 1.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) doubleArray0[6];
      doubleArray1[5] = (Double) 1.0;
      doubleArray1[6] = (Double) 3094.74;
      doubleArray1[7] = (Double) 1.0;
      doubleArray1[8] = (Double) 0.0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[5]);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector1);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // not symmetric matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY, (-1414.369329137734));
      choleskyDecompositionImpl0.getL();
      RealMatrix realMatrix1 = choleskyDecompositionImpl0.getL();
      assertNotNull(realMatrix1);
      assertEquals(Double.NaN, realMatrix1.getFrobeniusNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY, (-1414.369329137734));
      RealMatrix realMatrix1 = choleskyDecompositionImpl0.getLT();
      assertNotNull(realMatrix1);
      
      RealMatrix realMatrix2 = choleskyDecompositionImpl0.getL();
      assertEquals(Double.NaN, realMatrix2.getFrobeniusNorm(), 0.01);
      assertNotNull(realMatrix2);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0, Double.POSITIVE_INFINITY, (-1414.369329137734));
      double double0 = choleskyDecompositionImpl0.getDeterminant();
      assertEquals(Double.NaN, double0, 0.01);
  }
}
