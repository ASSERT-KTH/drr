/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 08:12:16 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVectorImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class CholeskyDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1378.7035757350636;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0);
      choleskyDecompositionImpl0.getSolver();
      assertEquals(1378.7035757350636, choleskyDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 2x1 matrix was provided instead of a square matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(31, 31);
      RealMatrix realMatrix0 = realVectorImpl0.outerProduct(realVectorImpl0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // not positive definite matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 819.3538;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1461.2629761;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, true);
      RealMatrix realMatrix0 = realVectorImpl0.outerProduct(realVectorImpl0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrix0);
      RealMatrix realMatrix1 = choleskyDecompositionImpl0.getL();
      CholeskyDecompositionImpl choleskyDecompositionImpl1 = null;
      try {
        choleskyDecompositionImpl1 = new CholeskyDecompositionImpl(realMatrix1, 1.0E-15, (-2582.63928774763));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // not symmetric matrix
         //
         verifyException("org.apache.commons.math.linear.CholeskyDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1378.7035757350636;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0);
      choleskyDecompositionImpl0.getL();
      RealMatrix realMatrix0 = choleskyDecompositionImpl0.getL();
      assertEquals(37.13089785791698, realMatrix0.getFrobeniusNorm(), 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1378.7035757350636;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0);
      RealMatrix realMatrix0 = choleskyDecompositionImpl0.getL();
      assertNotNull(realMatrix0);
      
      RealMatrix realMatrix1 = choleskyDecompositionImpl0.getLT();
      assertEquals(37.13089785791698, realMatrix1.getFrobeniusNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1226.48092447;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl(realMatrixImpl0, 370.3644420035, 370.3644420035);
      double double0 = choleskyDecompositionImpl0.getDeterminant();
      assertEquals(1226.48092447, double0, 0.01);
  }
}
