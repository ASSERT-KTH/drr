/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 06:29:14 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-0.6187355376001303));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-3101.40332));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1281.0;
      doubleArray0[4] = 1.1102230246251565E-14;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertEquals(8, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(1.0, realVector0.getNorm(), 0.01);
      
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2174.90242285));
      eigenDecompositionImpl0.getD();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertNotNull(realMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertFalse(realMatrix0.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      eigenDecompositionImpl0.getEigenvector(0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      eigenDecompositionImpl0.getEigenvector(0);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(1.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 1);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 0.0);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(1829.9423816312512);
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-3101.40332));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 700.31053859282);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 700.31053859282;
      doubleArray0[7] = 1289.94441861;
      double[] doubleArray1 = new double[7];
      doubleArray0[4] = 700.31053859282;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 4.206412995699793E-12;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 3924.6438;
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-8146.956652586641));
      doubleArray0[0] = double0;
      Double double1 = new Double(1831.8563391133898);
      doubleArray0[1] = double1;
      Double double2 = new Double((-2000.789));
      doubleArray0[2] = double2;
      doubleArray0[3] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, (-3101.8436855156683));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2399.4605003486713);
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 1279.313971571635;
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 3924.6438;
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 3924.6438;
      doubleArray0[7] = 1289.94441861;
      double[] doubleArray1 = new double[7];
      doubleArray0[4] = 700.31053859282;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[3] = 1279.313971571635;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 700.31053859282;
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 3.849365270980343E-12;
      doubleArray1[3] = (-2054.913);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 700.31053859282);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[5] = (-2153.3351193);
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 700.31053859282;
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[1] = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2400.423882009);
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[3] = (-2054.913);
      doubleArray0[6] = 3924.6438;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 1279.313971571635;
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(1.4259173074631535E26, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 700.31053859282;
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 3924.6438;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 700.31053859282;
      doubleArray1[2] = 700.31053859282;
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(6.999963416891398E25, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-4166.490260238149);
      doubleArray0[5] = (-7.5459576);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-7.5459576);
      doubleArray1[2] = 122.85919496110051;
      doubleArray1[3] = (-4166.490260238149);
      doubleArray1[4] = 1.7613858741691548;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 12.566370614359172);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2400.423882009);
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[3] = (-2054.913);
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = (-2054.913);
      doubleArray0[7] = 1289.94441861;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = (-2400.423882009);
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1289.94441861;
      doubleArray1[6] = 1279.313971571635;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(2.187823675768108E26, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[2] = 1278.7836389827908;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 1279.313971571635;
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1279.3;
      doubleArray0[3] = (-2054.913);
      doubleArray0[4] = (-2054.913);
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 3924.6438;
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 4.206412995699793E-12;
      doubleArray1[6] = (-2153.3351193);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 700.31053859282;
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 3924.6438;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 700.31053859282;
      doubleArray1[2] = 700.31053859282;
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 700.31053859282;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 1279.313971571635;
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = 1279.313971571635;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 3924.6438;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 700.31053859282;
      doubleArray1[2] = 700.31053859282;
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(1.7178545405784678E25, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2400.423882009);
      doubleArray0[3] = (-2054.913);
      doubleArray0[7] = (-2054.913);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 469.92037;
      doubleArray1[2] = (-2153.3351193);
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1289.94441861;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(1.4653400505400243E26, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2399.4605003486713);
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[3] = (-2054.913);
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 3924.6438;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 3924.6438;
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1289.94441861;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(8.514401983379194E26, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2400.423882009);
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[3] = (-2054.913);
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 3924.6438;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 1279.313971571635;
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1289.94441861;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(7.243709735627849E26, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2400.423882009);
      doubleArray0[1] = (-2400.423882009);
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[3] = 1279.313971571635;
      doubleArray0[4] = (-2400.423882009);
      doubleArray0[6] = 3924.6438;
      doubleArray0[7] = 1289.94441861;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 3924.6438;
      doubleArray1[3] = 1279.313971571635;
      doubleArray1[4] = (-2400.423882009);
      doubleArray1[5] = 1289.94441861;
      doubleArray1[6] = 3924.6438;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals((-6.584788952364803E26), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-2400.423882009);
      doubleArray0[5] = (-2400.423882009);
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 3924.6438;
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 4.206412995699793E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[5] = (-2153.3351193);
      doubleArray0[6] = 700.31053859282;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2153.3351193);
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 1279.313971571635;
      doubleArray1[3] = 700.31053859282;
      doubleArray1[4] = 700.31053859282;
      doubleArray1[5] = 1.0E-12;
      doubleArray1[6] = 1279.313971571635;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      assertEquals(1.6344265501368616E25, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1279.313971571635;
      doubleArray0[3] = (-2054.913);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 1279.313971571635;
      doubleArray1[2] = 1279.313971571635;
      doubleArray1[3] = (-2054.913);
      doubleArray1[4] = 698.6162;
      doubleArray1[5] = 4.206412995699793E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 164.065317569036;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-1122.6469287));
      eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(164.065317569036, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 700.31053859282;
      doubleArray0[2] = 1279.313971571635;
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2153.3351193));
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
