/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 05:26:37 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1480.99);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1, 1);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-2062.997319866));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1480.99);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-600));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -600
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2477.761240393324);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 201.1971098626;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(blockRealMatrix0, (-1655.4));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2477.761240393324);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getV();
      assertEquals(4, realMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1480.99);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertNotNull(realMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2477.761240393324);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2477.761240393324);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix2 = eigenDecompositionImpl0.getVT();
      assertSame(realMatrix2, realMatrix1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2477.761240393324);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      eigenDecompositionImpl0.getV();
      RealMatrix realMatrix1 = eigenDecompositionImpl0.getVT();
      assertEquals(4, realMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (-1065.062794943868);
      doubleArray0[8] = 1547.299645655;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      eigenDecompositionImpl0.getVT();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(5);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-1065.062794943868);
      doubleArray1[2] = 1358.343616913;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2477.761240393324);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.0E-12);
      eigenDecompositionImpl0.getSolver();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[6] = 143.2;
      doubleArray1[7] = 2206.7435308874;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1480.99);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.563;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.036067067838279954);
      doubleArray0[1] = (-0.036067067838279954);
      doubleArray0[2] = (-0.036067067838279954);
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3031.9513983));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-3211.6206907576934);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1480.99);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.563;
      doubleArray1[1] = (-1065.062794943868);
      doubleArray1[2] = 1358.343616913;
      doubleArray1[3] = 0.563;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 1532.1593619488808;
      doubleArray0[7] = 1532.1593619488808;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 0.03752375348203474;
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 0.03752375348203474;
      doubleArray1[5] = 4.730557799702868;
      doubleArray1[6] = (-1065.062794943868);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1358.343616913;
      doubleArray0[2] = 1358.343616913;
      doubleArray0[3] = 1358.343616913;
      doubleArray0[0] = 9.0;
      doubleArray0[8] = 1547.3;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.563;
      doubleArray1[1] = 9.0;
      doubleArray1[2] = 1358.343616913;
      doubleArray1[3] = 0.563;
      doubleArray1[4] = 0.563;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 0.563;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 1356.4910797961466;
      doubleArray1[3] = 0.563;
      doubleArray1[4] = 1547.299645655;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.563;
      doubleArray1[1] = 0.563;
      doubleArray1[7] = 1358.343616913;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.03752375348203474;
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 0.03752375348203474;
      doubleArray1[5] = 0.03752375348203474;
      doubleArray1[6] = (-1065.062794943868);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 1532.1593619488808;
      doubleArray0[8] = 1532.1593619488808;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 0.03752375348203474;
      doubleArray1[5] = 4.730557799702868;
      doubleArray1[6] = (-1065.062794943868);
      doubleArray1[7] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 1532.1593619488808;
      doubleArray0[7] = 1532.1593619488808;
      doubleArray0[8] = 1532.1593619488808;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 0.03752375348203474;
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 0.03752375348203474;
      doubleArray1[5] = 4.730557799702868;
      doubleArray1[6] = (-1065.062794943868);
      doubleArray1[7] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.563;
      doubleArray0[7] = 1358.343616913;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.563;
      doubleArray1[1] = (-1065.062794943868);
      doubleArray1[2] = 1358.343616913;
      doubleArray1[3] = 0.563;
      doubleArray1[4] = 0.563;
      doubleArray1[7] = 1358.343616913;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.03752375348203474;
      doubleArray0[6] = 1547.299645655;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 0.03752375348203474;
      doubleArray1[2] = 0.03752375348203474;
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 1547.299645655;
      doubleArray1[5] = 0.03752375348203474;
      doubleArray1[6] = (-1065.062794943868);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.03752375348203474;
      doubleArray0[2] = 0.03752375348203474;
      doubleArray0[3] = 0.03752375348203474;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 0.03752375348203474;
      doubleArray1[2] = 0.03752375348203474;
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 0.03752375348203474;
      doubleArray1[5] = 0.03752375348203474;
      doubleArray1[6] = (-1065.062794943868);
      doubleArray1[7] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.03752375348203474);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1358.343616913;
      doubleArray0[2] = 1358.343616913;
      doubleArray0[3] = 620.60749629;
      doubleArray0[4] = (-1065.062794943868);
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 0.563;
      doubleArray1[2] = 1358.343616913;
      doubleArray1[3] = 0.563;
      doubleArray1[4] = 1547.299645655;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.03752375348203474;
      doubleArray0[2] = 0.03752375348203474;
      doubleArray0[3] = 0.03752375348203474;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 0.03752375348203474;
      doubleArray1[2] = 0.03752375348203474;
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.03752375348203474);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.03752375348203474;
      doubleArray0[1] = 0.03752375348203474;
      doubleArray0[2] = 0.03752375348203474;
      doubleArray0[3] = 0.03752375348203474;
      doubleArray0[8] = 0.03752375348203474;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.03752375348203474;
      doubleArray1[1] = 0.03752375348203474;
      doubleArray1[2] = 0.03752375348203474;
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 0.03752375348203474;
      doubleArray1[5] = 0.03752375348203474;
      doubleArray1[6] = (-1065.062794943868);
      doubleArray1[7] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.03752375348203474);
      assertEquals((-1.1882131284098396E-4), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 0.563;
      doubleArray0[7] = (-1065.062794943868);
      doubleArray0[6] = 1547.299645655;
      doubleArray0[8] = 1547.299645655;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 1358.343616913;
      doubleArray1[3] = 0.563;
      doubleArray1[4] = 1547.299645655;
      doubleArray1[6] = (-1065.062794943868);
      doubleArray1[7] = 1358.343616913;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 1547.299645655;
      doubleArray0[8] = 1547.299645655;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 1547.299645655;
      doubleArray1[5] = 0.03752375348203474;
      doubleArray1[6] = (-1065.062794943868);
      doubleArray1[7] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 1547.3;
      doubleArray0[7] = 2547.81277;
      doubleArray0[8] = 1547.3;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = 0.03752375348203474;
      doubleArray1[4] = 1547.3;
      doubleArray1[5] = 0.03752375348203474;
      doubleArray1[6] = (-1065.062794943868);
      doubleArray1[7] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NaN);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1507.150202527763;
      doubleArray0[1] = 929.55178364;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1507.150202527763);
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(Double.NaN, realVector0.getL1Norm(), 0.01);
      assertEquals(1.962728594110299E12, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.03752375348203474;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 0.03752375348203474;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.03752375348203474);
      eigenDecompositionImpl0.getVT();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
