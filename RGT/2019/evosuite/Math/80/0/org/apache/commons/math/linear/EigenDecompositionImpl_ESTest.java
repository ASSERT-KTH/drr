/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 05:00:50 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1380.751900166532));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-2880));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2880
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(52, 52);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      double[] doubleArray0 = eigenDecompositionImpl0.getRealEigenvalues();
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-12;
      doubleArray0[8] = 4090.575012617648;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4090.575012617648);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 4090.575012617648);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2, 1.3164662221180434E-11);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, 9.0);
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(16, 16);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, 0.0);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getV();
      assertNotSame(array2DRowRealMatrix0, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getD();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(realMatrix0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getVT();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(6, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      eigenDecompositionImpl0.getSolver();
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(6, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      eigenDecompositionImpl0.getSolver();
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertTrue(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(array2DRowRealMatrix0, (-3180.79));
      RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(1.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.715428130770306E-13;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 5.715428130770306E-13;
      doubleArray1[1] = 5.715428130770306E-13;
      doubleArray1[2] = 1.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 1106.14189073989;
      double[] doubleArray1 = new double[5];
      doubleArray1[3] = 1.0E-12;
      doubleArray1[4] = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 155.6461822811754;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      int[] intArray0 = new int[9];
      RealMatrix realMatrix0 = array2DRowRealMatrix0.getSubMatrix(intArray0, intArray0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(realMatrix0, 1.5);
      assertEquals(1.2876934043381775E-184, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.715428130770306E-13;
      doubleArray0[2] = 5.715428130770306E-13;
      doubleArray0[3] = 5.715428130770306E-13;
      doubleArray0[4] = 5.715428130770306E-13;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 5.715428130770306E-13;
      doubleArray1[1] = 5.715428130770306E-13;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 5.715428130770306E-13;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-3556.31);
      doubleArray0[3] = (-3556.31);
      doubleArray0[4] = (-3556.31);
      double[] doubleArray1 = new double[5];
      doubleArray0[5] = (-3556.31);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3556.31);
      doubleArray0[1] = (-3556.31);
      doubleArray0[2] = (-3556.31);
      doubleArray0[3] = (-3556.31);
      doubleArray0[4] = (-3556.31);
      double[] doubleArray1 = new double[5];
      doubleArray0[5] = (-3556.31);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals((-1.599552106822432E14), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.715428130770306E-13;
      doubleArray0[3] = 5.715428130770306E-13;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 5.715428130770306E-13;
      doubleArray1[1] = 5.715428130770306E-13;
      doubleArray0[2] = 1.0;
      doubleArray1[3] = 5.715428130770306E-13;
      doubleArray1[2] = 5.715428130770306E-13;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3556.31);
      doubleArray0[1] = (-3556.31);
      doubleArray0[2] = (-3556.31);
      doubleArray0[4] = (-3556.31);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-3556.31);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-3556.31);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals((-3.1195911195194856E14), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-3556.31);
      doubleArray0[2] = (-3556.31);
      doubleArray0[3] = 0.9999999999999998;
      doubleArray0[4] = (-3556.31);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-3556.31);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-3556.31);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4, 4, 4);
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector0.outerproduct(openMapRealVector0);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(openMapRealMatrix0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1380.6551926929726);
      doubleArray0[5] = (-716.60272);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1380.6551926929726);
      doubleArray1[1] = 1098.362;
      doubleArray1[2] = (-1380.6551926929726);
      doubleArray1[3] = 1.0E-12;
      doubleArray1[4] = (-716.60272);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-1.86594065465885286E18), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1380.751900166532);
      doubleArray0[1] = (-1380.751900166532);
      doubleArray0[2] = (-1380.751900166532);
      doubleArray0[3] = 1106.14189073989;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1106.14189073989;
      doubleArray1[1] = (-1380.751900166532);
      doubleArray1[2] = (-1380.751900166532);
      doubleArray1[3] = (-1380.751900166532);
      doubleArray1[4] = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1380.751900166532));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-3557.77355244457);
      doubleArray0[3] = 1.5244733768612138;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-3557.77355244457);
      doubleArray1[2] = 1.5244733768612138;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 1.5244733768612138;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3557.77355244457));
      assertEquals((-12610.255513843626), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3556.31);
      doubleArray0[2] = (-3556.31);
      doubleArray0[3] = (-3556.31);
      doubleArray0[4] = (-1.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-3556.31);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals(2.0230084655237785E21, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 0.9999999999999998;
      doubleArray0[4] = (-1.0);
      double[] doubleArray1 = new double[5];
      doubleArray0[5] = (-1.0);
      doubleArray1[1] = (-3556.31);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.9999999999999998;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-3556.31);
      doubleArray0[4] = (-3556.31);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-3556.31);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals(1.4738373554485409E21, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3556.31);
      doubleArray0[2] = (-3556.31);
      doubleArray0[3] = (-3556.31);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-3556.31);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals(3.1991044658213E14, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.715428130770306E-13;
      doubleArray0[2] = 5.715428130770306E-13;
      doubleArray0[3] = 5.715428130770306E-13;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 5.715428130770306E-13;
      doubleArray1[1] = 5.715428130770306E-13;
      doubleArray1[3] = 5.715428130770306E-13;
      doubleArray1[2] = 5.715428130770306E-13;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1380.751900166532);
      doubleArray0[1] = (-1380.751900166532);
      doubleArray0[3] = (-1380.751900166532);
      doubleArray0[4] = 1098.362;
      doubleArray0[5] = (-716.60272);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1380.751900166532);
      doubleArray1[1] = (-1380.751900166532);
      doubleArray1[2] = (-1380.751900166532);
      doubleArray1[3] = (-1380.751900166532);
      doubleArray1[4] = (-1380.751900166532);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1380.751900166532));
      assertEquals(1.3386472604906971E19, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1380.751900166532);
      doubleArray0[1] = (-1380.751900166532);
      doubleArray0[3] = (-1718.977798796);
      doubleArray0[4] = (-1380.751900166532);
      doubleArray0[5] = (-716.60272);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1380.751900166532);
      doubleArray1[1] = (-1380.751900166532);
      doubleArray1[2] = (-1380.751900166532);
      doubleArray1[3] = (-1380.751900166532);
      doubleArray1[4] = (-1380.751900166532);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1380.751900166532));
      assertEquals(7.7458326770393692E18, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3556.31);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-3556.31);
      doubleArray1[2] = 0.9999999999999998;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-3556.31);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3556.31));
      assertEquals((-1.2675479035740934E7), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1380.751900166532);
      doubleArray0[1] = (-1380.751900166532);
      doubleArray0[3] = 1106.14189073989;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1380.751900166532);
      doubleArray1[1] = (-1380.751900166532);
      doubleArray1[2] = (-1380.751900166532);
      doubleArray1[3] = 1.0E-12;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1380.751900166532));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[5];
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      RealMatrix realMatrix0 = eigenDecompositionImpl0.getVT();
      assertEquals(6, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.715428130770306E-13;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 5.715428130770306E-13;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 5.715428130770306E-13);
      eigenDecompositionImpl0.getSolver();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
