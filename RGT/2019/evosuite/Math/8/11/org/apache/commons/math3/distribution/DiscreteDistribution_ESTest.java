/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 14:34:29 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;


public class DiscreteDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(865.830455);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(well19937c0, double0);
      linkedList0.offerLast(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well19937c0, linkedList0);
      discreteDistribution0.reseedRandomGenerator(4294967295L);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      Double double0 = new Double(0.0);
      Double double1 = new Double((-4462.6));
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double1);
      linkedList0.add(pair0);
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,462.6 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      Double double0 = new Double(0.1356148537516988);
      Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
      linkedList0.offer(pair0);
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(linkedList0);
      double double1 = discreteDistribution0.probability(linkedList0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      LinkedList<Pair<Pair<String, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Double>, Double>>();
      Pair<String, Double> pair0 = (Pair<String, Double>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn("all weights must be finite real numbers, but {0}-th is {1}").when(pair0).getKey();
      doReturn((Double) null).when(pair0).getValue();
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Double double0 = new Double(1588.497);
      Pair<Pair<String, Double>, Double> pair2 = new Pair<Pair<String, Double>, Double>(pair1, double0);
      linkedList0.offer(pair2);
      DiscreteDistribution<Pair<String, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Double>>(synchronizedRandomGenerator0, linkedList0);
      double double1 = discreteDistribution0.probability((Pair<String, Double>) null);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      LinkedList<Pair<Pair<String, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Double>, Double>>();
      Double double0 = new Double(1588.497);
      Pair<Pair<String, Double>, Double> pair0 = new Pair<Pair<String, Double>, Double>((Pair<String, Double>) null, double0);
      linkedList0.addFirst(pair0);
      DiscreteDistribution<Pair<String, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Double>>(synchronizedRandomGenerator0, linkedList0);
      double double1 = discreteDistribution0.probability((Pair<String, Double>) null);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      LinkedList<Pair<Pair<String, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Double>, Double>>();
      Pair<String, Double> pair0 = (Pair<String, Double>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Double double0 = new Double(1588.497);
      Pair<Pair<String, Double>, Double> pair2 = new Pair<Pair<String, Double>, Double>(pair1, double0);
      linkedList0.offer(pair2);
      DiscreteDistribution<Pair<String, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Double>>(synchronizedRandomGenerator0, linkedList0);
      Pair<String, Double> pair3 = new Pair<String, Double>("clM", double0);
      double double1 = discreteDistribution0.probability(pair3);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      LinkedList<Pair<Pair<String, Double>, Double>> linkedList0 = new LinkedList<Pair<Pair<String, Double>, Double>>();
      Pair<String, Double> pair0 = (Pair<String, Double>) mock(Pair.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(pair0).getKey();
      doReturn((Object) null).when(pair0).getValue();
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      Double double0 = new Double(1588.497);
      Pair<Pair<String, Double>, Double> pair2 = new Pair<Pair<String, Double>, Double>(pair1, double0);
      linkedList0.offer(pair2);
      DiscreteDistribution<Pair<String, Double>> discreteDistribution0 = new DiscreteDistribution<Pair<String, Double>>(synchronizedRandomGenerator0, linkedList0);
      List<Pair<Pair<String, Double>, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Pair<Pair<Integer, Object>, Double>> linkedList0 = new LinkedList<Pair<Pair<Integer, Object>, Double>>();
      Double double0 = new Double(1.0);
      Pair<Pair<Integer, Object>, Double> pair0 = new Pair<Pair<Integer, Object>, Double>((Pair<Integer, Object>) null, double0);
      linkedList0.add(pair0);
      linkedList0.add(pair0);
      DiscreteDistribution<Pair<Integer, Object>> discreteDistribution0 = new DiscreteDistribution<Pair<Integer, Object>>(linkedList0);
      Object[] objectArray0 = discreteDistribution0.sample(506);
      assertEquals(506, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      Double double0 = new Double(2293.404125906637);
      Pair<String, Double> pair0 = new Pair<String, Double>("", double0);
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      linkedList0.add(pair0);
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(iSAACRandom0, linkedList0);
      try { 
        discreteDistribution0.sample((-1061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,061)
         //
         verifyException("org.apache.commons.math3.distribution.DiscreteDistribution", e);
      }
  }
}
