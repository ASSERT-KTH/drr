/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:52:08 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(9.220590270857665E-9, 9.220590270857665E-9, (-1.0));
      Inverse inverse0 = new Inverse();
      illinoisSolver0.solve(1585, (UnivariateRealFunction) inverse0, (-2068.512474693), 9.220590270857665E-9, 3105.816624225);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(212, 7.0, 7.0);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(212, (UnivariateRealFunction) harmonicOscillator0, 7.0, (double) 212, allowedSolution0);
      assertEquals(7.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(119.50251821269421, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-6695.35585));
      Tanh tanh0 = new Tanh();
      double double0 = regulaFalsiSolver0.solve(944, (UnivariateRealFunction) tanh0, 0.0, 1.0, 0.0);
      assertEquals(1.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Atan atan0 = new Atan();
      double double0 = regulaFalsiSolver0.solve(1317, (UnivariateRealFunction) atan0, 1.0, 0.0, 1.0);
      assertEquals(1.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-28910.98153840976));
      Identity identity0 = new Identity();
      regulaFalsiSolver0.setup(2120212387, identity0, (-1507.32528921096), 2120212387, (-1507.32528921096));
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2042, (UnivariateRealFunction) expm1_0, (-2042.7626393), 835.88859429, (double) (-1461), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,042) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, 0.0, 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(84.0911116903492, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, (-1898.50680138175), 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(105.11941112258648, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, (-1898.50680138175), 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(95.07755790546224, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, (-1898.50680138175), 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(105.11941112258648, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, (-1898.50680138175), 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(95.07755790546224, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, 0.0, 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(48.8404931135589, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, (-1898.50680138175), 2133.0, (double) 2133, allowedSolution0);
      assertEquals(105.11941112258648, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(21.444294037497937, 21.444294037497937, 21.444294037497937);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, (-1898.50680138175), 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2133.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, 0.0, 2133.0, (double) 2133, allowedSolution0);
      assertEquals(48.8404931135589, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(20.07380406018, 20.07380406018, 20.07380406018);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(141, (UnivariateRealFunction) cos0, 20.07380406018, (double) 141, (double) 141, allowedSolution0);
      assertEquals(20.07380406018, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(212, 7.0, 7.0);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3414, univariateRealFunction0, (-871.3949716614358), (-1.0925126764597186), (-871.3949716614358), allowedSolution0);
      assertEquals((-173.78759594345976), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.167, 0.167);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Cos cos0 = new Cos();
      double double0 = regulaFalsiSolver0.solve(2133, (UnivariateRealFunction) cos0, 0.0, 2133.0, (double) 2133, allowedSolution0);
      assertEquals(2133.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(74.61013898651699, double0, 0.01);
  }
}
