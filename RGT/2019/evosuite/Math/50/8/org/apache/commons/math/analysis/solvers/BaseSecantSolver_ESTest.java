/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:36:02 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Logistic logistic0 = new Logistic((-622.682726282531), 0.5, (-622.682726282531), (-622.682726282531), 0.5, 0.5);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      pegasusSolver0.solve(811, (UnivariateRealFunction) logistic0, (-622.682726282531), 0.5, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1278.533), (-1278.533));
      Cbrt cbrt0 = new Cbrt();
      double double0 = pegasusSolver0.solve(3748, (UnivariateRealFunction) cbrt0, (-1278.533), 87.63394173);
      assertEquals((-1278.533), pegasusSolver0.getMin(), 0.01);
      assertEquals((-4.993518120898672E-46), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.0, 0.0);
      Signum signum0 = new Signum();
      double double0 = pegasusSolver0.solve(1955, (UnivariateRealFunction) signum0, 0.0, (double) 1955, 2483.0);
      assertEquals(1955.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Minus minus0 = new Minus();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(1579, (UnivariateRealFunction) minus0, (double) 1579, 0.0, 0.0, allowedSolution0);
      assertEquals(1579.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1554.7, 1.5381349035707785);
      Minus minus0 = new Minus();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(334, (UnivariateRealFunction) minus0, (-2943.29609), (double) 334, allowedSolution0);
      assertEquals(334.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7422508708241367E-14, (-1.9947234376918));
      Cos cos0 = new Cos();
      double double0 = illinoisSolver0.solve(1784, (UnivariateRealFunction) cos0, (-1.9947234376918), 306.7294993053, 306.7294993053);
      assertEquals(306.7294993053, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(136.65928043115602, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(803, (UnivariateRealFunction) cos0, 0.0, 142.0, (double) 803, allowedSolution0);
      assertEquals(39.26990816986193, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(805, (UnivariateRealFunction) cos0, 0.0, 142.0, (double) 805, allowedSolution0);
      assertEquals(805.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(39.26990816986193, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(805, (UnivariateRealFunction) cos0, 0.0, 142.0, (double) 805, allowedSolution0);
      assertEquals(805.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(39.269908169872416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(803, (UnivariateRealFunction) cos0, 0.0, 142.0, (double) 803, allowedSolution0);
      assertEquals(803.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(39.269908169872416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(819, (UnivariateRealFunction) cos0, 0.9353150809231537, 142.0, (double) 819, allowedSolution0);
      assertEquals(819.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(58.119464091411174, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(805, (UnivariateRealFunction) cos0, 0.0, 141.64474664834614, (double) 805, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (805) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(803, (UnivariateRealFunction) cos0, 1.0E-6, 317.0466186781219, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(58.119464091411174, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1606, (UnivariateRealFunction) cos0, (double) 803, (double) 1606, allowedSolution0);
      assertEquals(1204.5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1258.2078577627124, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Logistic logistic0 = new Logistic((-577.09639643696), 0.5, (-3437.347409606), (-577.09639643696), 0.5, 0.5);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(77, (UnivariateRealFunction) logistic0, (-0.11631580903401209), 0.5, allowedSolution0);
      assertEquals(0.19184209548299394, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.49918454546446234, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Logistic logistic0 = new Logistic((-577.09639643696), 0.5, (-3436.19398377302), (-577.09639643696), 0.5, 0.5);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(77, (UnivariateRealFunction) logistic0, (-3436.19398377302), 0.5, allowedSolution0);
      assertEquals((-1717.84699188651), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.49918427191474, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Logistic logistic0 = new Logistic((-577.5437470047931), 0.5, (-3436.19398377302), (-577.5437470047931), 0.5, 0.5);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(50, (UnivariateRealFunction) logistic0, (-0.11631580903401209), 0.5, allowedSolution0);
      assertEquals((-0.11631580903401209), pegasusSolver0.getMin(), 0.01);
      assertEquals(0.4991831789823887, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(803, (UnivariateRealFunction) cos0, 0.0, 141.77947728764755, (double) 803, allowedSolution0);
      assertEquals(803.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(83.25220532012952, double0, 0.01);
  }
}
