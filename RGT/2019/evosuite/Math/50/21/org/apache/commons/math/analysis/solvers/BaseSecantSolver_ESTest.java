/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:06:20 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0), 2879.91120442478, (-1.0));
      Gaussian gaussian0 = new Gaussian();
      pegasusSolver0.solve(2073, (UnivariateRealFunction) gaussian0, 2879.91120442478, (-1.0), (double) 2073);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0), 2879.91120442478, (-1.0));
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(2073, (UnivariateRealFunction) gaussian0, 0.0, 2879.91120442478, (-1.0), allowedSolution0);
      assertEquals(2879.91120442478, pegasusSolver0.getMax(), 0.01);
      assertEquals(2879.91120442478, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1364.595898972), 2468.428554235, 0.0);
      Rint rint0 = new Rint();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(3, (UnivariateRealFunction) rint0, (-1364.595898972), 270.5362, (-1364.595898972), allowedSolution0);
      assertEquals((-1364.595898972), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-0.3200339984181255), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sigmoid sigmoid0 = new Sigmoid(313, (-24.744441131753348));
      double double0 = illinoisSolver0.solve(1735, (UnivariateRealFunction) sigmoid0, (-24.744441131753348), 1342.7343376, (-24.744441131753348));
      assertEquals((-24.744441131753348), illinoisSolver0.getMin(), 0.01);
      assertEquals(2.53760232748868, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2278, (UnivariateRealFunction) tan0, (double) 2278, 2301.491364934172, allowedSolution0);
      assertEquals(2289.745682467086, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2279.225470418158, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1342.7343376, (-2.356194490192345), 1342.7343376);
      Sigmoid sigmoid0 = new Sigmoid(313, (-2.356194490192345));
      double double0 = illinoisSolver0.solve(1735, (UnivariateRealFunction) sigmoid0, (-2.356194490192345), 1342.7343376, (-2.356194490192345));
      assertEquals((-2.356194490192345), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1331.7319173387064, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 4, 4);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2446.1903586554545, 2446.1903586554545, 2446.1903586554545);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 2446.1903586554545, 2446.1903586554545);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2446.1903586554545, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 4, 4);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(803.682151376587, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 4, 4);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(803.682151376587, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 2447.2300463, 2447.2300463);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1271.3404080471207, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 2447.2300463, 2447.2300463);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2447.2300463, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(25, 25, 25);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(25, (UnivariateRealFunction) harmonicOscillator0, (double) 25, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(25.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(47, 47, 47);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(47, (UnivariateRealFunction) harmonicOscillator0, (double) 47, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1240.266540040763, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 2447.2300463, 2447.2300463);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1271.3404080471207, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2447.2300463, 2447.2300463);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4, 4, 4);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) harmonicOscillator0, (double) 4, 2447.2300463, 128.9082738300481, allowedSolution0);
      assertEquals(128.9082738300481, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(803.682151376587, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sigmoid sigmoid0 = new Sigmoid(313, (-24.744441131753348));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(313, (UnivariateRealFunction) sigmoid0, 0.5, (double) 313, (double) 1735, allowedSolution0);
      assertEquals(1735.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2.5376023270891914, double0, 0.01);
  }
}
