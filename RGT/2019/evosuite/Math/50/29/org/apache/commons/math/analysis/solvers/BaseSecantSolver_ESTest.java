/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:24:24 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      illinoisSolver0.solve(2, (UnivariateRealFunction) sin0, (-3371.363748487665), 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1012.1666782983798), (-1012.1666782983798), 2137.44279245);
      Exp exp0 = new Exp();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(3, (UnivariateRealFunction) exp0, (-1012.1666782983798), (-1012.1666782983798), allowedSolution0);
      assertEquals((-1012.1666782983798), pegasusSolver0.getMin(), 0.01);
      assertEquals((-1012.1666782983798), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Minus minus0 = new Minus();
      double double0 = illinoisSolver0.solve(178, (UnivariateRealFunction) minus0, (-2596.8076791), (double) 178, 0.0);
      assertEquals(178.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1572.3, 5.969167426655986E-5);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3014, (UnivariateRealFunction) tanh0, (-0.7405671162896684), 1572.3, allowedSolution0);
      assertEquals(1572.3, pegasusSolver0.getMax(), 0.01);
      assertEquals(606.9410169850952, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0);
      Power power0 = new Power(1023);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1023, (UnivariateRealFunction) power0, (-1969.9577268149), 1.0, 1.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,023) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(172, (UnivariateRealFunction) sin0, (-2319.6), (double) 172, 0.0, allowedSolution0);
      assertEquals(157.07963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(172, (UnivariateRealFunction) sin0, (-2319.6), (double) 172, 0.0, allowedSolution0);
      assertEquals(172.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(157.07963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(172, (UnivariateRealFunction) sin0, (-2319.6), (double) 172, 0.0, allowedSolution0);
      assertEquals(172.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(157.07963261016192, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(172, (UnivariateRealFunction) sin0, (-2319.6), (double) 172, 0.0, allowedSolution0);
      assertEquals(172.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(157.07963261016192, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(167, (UnivariateRealFunction) sin0, 0.08358204589262641, (double) 167, 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(15.707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(172, (UnivariateRealFunction) sin0, (-0.1666666567325592), (double) 172, 0.0, allowedSolution0);
      assertEquals(6.329274480133148E-27, double0, 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(172, (UnivariateRealFunction) sin0, (-4.9740150488412914E-6), (double) 172, 1.0E-6, allowedSolution0);
      assertEquals((-6.125094721370442E-25), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(3068, (UnivariateRealFunction) sin0, (-2320.5154373704167), (double) 3068, 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-728.8494956328233), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(715.297272697);
      Cos cos0 = new Cos();
      double double0 = illinoisSolver0.solve(6, (UnivariateRealFunction) cos0, 715.297272697, 3226.159, 0.11111095942313305);
      assertEquals(0.11111095942313305, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2958.9275995119087, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(179, (UnivariateRealFunction) sin0, (-2319.62651379), (double) 179, 0.0, allowedSolution0);
      assertEquals(75.39822368615503, double0, 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(156, (UnivariateRealFunction) sin0, 1.0E-6, (double) 156, 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.1415926557512828, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(165, (UnivariateRealFunction) sin0, (-2319.62651379), (double) 165, 0.0, allowedSolution0);
      assertEquals((-835.6636458548851), double0, 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(189, (UnivariateRealFunction) sin0, (-2319.6), (double) 189, 0.0, allowedSolution0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-433.53978619539146), double0, 0.01);
  }
}
