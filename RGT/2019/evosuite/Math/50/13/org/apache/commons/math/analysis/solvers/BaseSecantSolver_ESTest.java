/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:47:27 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.0, 87.989);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-463.7976));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      illinoisSolver0.solve(1379, (UnivariateRealFunction) tanh0, (-463.7976), (double) 1379, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Floor floor0 = new Floor();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(466, (UnivariateRealFunction) floor0, 0.333333333333333, 0.333333333333333, allowedSolution0);
      assertEquals(0.333333333333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.333333333333333, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.0);
      Power power0 = new Power((-2733.0));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(839, (UnivariateRealFunction) power0, 0.0, (-2733.0), 3075.3126622482, allowedSolution0);
      assertEquals((-2733.0), pegasusSolver0.getMax(), 0.01);
      assertEquals((-2733.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Logit logit0 = new Logit(0.7790426693216876, 1844);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      double double0 = regulaFalsiSolver0.solve(1844, univariateRealFunction0, 6.387417779778929E-7, 1560.7514190759346);
      assertEquals(1560.7514190759346, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.7790418326718416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-463.7976));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1366, (UnivariateRealFunction) tanh0, (-463.7976), (double) 1366, allowedSolution0);
      assertEquals(1366.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4299.6336746));
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(16, (UnivariateRealFunction) atan0, (-4299.6336746), 0.25555435159796946, allowedSolution0);
      assertEquals(0.25555435159796946, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.2408122778601692E-20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-463.7976));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1379, (UnivariateRealFunction) tanh0, (-463.7976), (double) 1379, allowedSolution0);
      assertEquals(1379.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-1.0499263556175936E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-463.7976));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1379, (UnivariateRealFunction) tanh0, (-463.7976), (double) 1379, allowedSolution0);
      assertEquals(1379.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.232595164407831E-32, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4326.465000280563), (-4326.465000280563));
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(16, (UnivariateRealFunction) atan0, (-4326.465000280563), 0.11764700710773468, allowedSolution0);
      assertEquals((-2163.1736766367276), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-7.52316384526264E-37), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1756, (UnivariateRealFunction) atan0, (-4259.0917998829655), (double) 1756, allowedSolution0);
      assertEquals((-1251.5458999414827), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.1243156716302994E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(16, (UnivariateRealFunction) atan0, (-4299.6336746), 0.11764700710773468, allowedSolution0);
      assertEquals((-2149.758013796446), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.7435938021219616E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(16, (UnivariateRealFunction) atan0, (-1422.346), 0.11764700710773468, allowedSolution0);
      assertEquals((-711.1141764964461), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.2179798188647114E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(16, (UnivariateRealFunction) atan0, (-4299.6336746), 0.11764700710773468, allowedSolution0);
      assertEquals((-2149.758013796446), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.7435938021219616E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(16, (UnivariateRealFunction) atan0, (-4299.6336746), 1.7758639488276015E-10, allowedSolution0);
      assertEquals((-2149.816837299911), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.859895265692136E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(44, (UnivariateRealFunction) atan0, (-4299.6336746), (double) 44, allowedSolution0);
      assertEquals(44.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.072664445543378E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(16, (UnivariateRealFunction) atan0, (-4299.6336746), (double) 16, allowedSolution0);
      assertEquals(16.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-6.696888994049929E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(42, (UnivariateRealFunction) atan0, (-4299.6336746), (double) 42, allowedSolution0);
      assertEquals((-2128.8168373), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.250204348268277E-12, double0, 0.01);
  }
}
