/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:26:15 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(943, 943, 343.263);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(943, (UnivariateRealFunction) harmonicOscillator0, (-1733.45), 343.263, (-1733.45), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(440.0, 440.0, 0.0);
      Sinc sinc0 = new Sinc();
      double double0 = regulaFalsiSolver0.solve(2210, (UnivariateRealFunction) sinc0, 440.0, (double) 2210, 0.0);
      assertEquals(440.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1273.4672367085504, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.9999997615814209);
      Atanh atanh0 = new Atanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3578, (UnivariateRealFunction) atanh0, 0.9999997615814209, 0.0, allowedSolution0);
      assertEquals(0.9999997615814209, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2181.0));
      Ceil ceil0 = new Ceil();
      double double0 = illinoisSolver0.solve(709, (UnivariateRealFunction) ceil0, 0.0, 1.0, 0.0);
      assertEquals(1.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(872.4906828620117, 1.0, 872.4906828620117);
      Sinc sinc0 = new Sinc();
      double double0 = illinoisSolver0.solve(1941, (UnivariateRealFunction) sinc0, 1.0, (double) 1941);
      assertEquals(1941.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1940.4262810230446, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1207.190426), (-1207.190426));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(3541, (UnivariateRealFunction) tanh0, (-1426.9903814106758), 135.0, (-1207.190426), allowedSolution0);
      assertEquals((-1207.190426), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3541, (UnivariateRealFunction) tanh0, (-1426.9903814106758), 2189.6649487115774, (-2.5041525073649473), allowedSolution0);
      assertEquals((-2.5041525073649473), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2.107320166933071E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3541, (UnivariateRealFunction) tanh0, (-1426.9903814106758), 2199.3913150916, (-2.5041525073649473), allowedSolution0);
      assertEquals((-2.5041525073649473), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.824529337708347E-19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.0), (-1207.190426));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(3541, (UnivariateRealFunction) tanh0, (-1426.9903814106758), 135.0, (-1.0), allowedSolution0);
      assertEquals((-1.0), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-5.1555789436169125E-20), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.0), (-1207.190426));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3541, (UnivariateRealFunction) tanh0, (-1426.9903814106758), 135.0, (-1.0), allowedSolution0);
      assertEquals((-1.0), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(3541, (UnivariateRealFunction) tanh0, (-1426.9903814106758), 2199.3913150916, (-1.0), allowedSolution0);
      assertEquals((-1.0), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2.5030479115583466E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1207.190426), (-1207.190426));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(3541, (UnivariateRealFunction) tanh0, (-1442.8684475553289), 135.0, (-1207.190426), allowedSolution0);
      assertEquals((-1207.190426), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.288414488204603E-23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2144000767, (UnivariateRealFunction) tanh0, (-8.0), (double) 2144000767, (-8.0), allowedSolution0);
      assertEquals((-8.0), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.6650176307650714E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(943, 943, 343.8025511896259);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(943, (UnivariateRealFunction) harmonicOscillator0, (-1733.45), 1.986821492305628E-8, (-1733.45), allowedSolution0);
      assertEquals((-1733.45), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-0.00978041736400023), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(943, 943, 343.263);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(943, (UnivariateRealFunction) harmonicOscillator0, (-1733.45), 1.986821492305628E-8, (-1733.45), allowedSolution0);
      assertEquals((-1733.45), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-839.3374902893838), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(943, 943, 343.263);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(82, (UnivariateRealFunction) harmonicOscillator0, (-2831.39424873095), 0.3999999761581421, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.02410662155634201, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(943, 943, 343.263);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(943, (UnivariateRealFunction) harmonicOscillator0, (-1733.45), 1.986821492305628E-8, (-1733.45), allowedSolution0);
      assertEquals((-1733.45), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-839.3374895501104), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(943, 943, 943);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(943, (UnivariateRealFunction) harmonicOscillator0, (-1733.45), 1.986821492305628E-8, (-1733.45), allowedSolution0);
      assertEquals((-1733.45), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1412.246396173052), double0, 0.01);
  }
}
