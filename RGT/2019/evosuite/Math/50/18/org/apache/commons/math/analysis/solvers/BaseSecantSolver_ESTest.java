/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:59:33 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cbrt cbrt0 = new Cbrt();
      illinoisSolver0.solve(1886, (UnivariateRealFunction) cbrt0, 1.0E-6, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(926.805, 0.008333333333333333, 926.805);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(578, (UnivariateRealFunction) tan0, 0.008333333333333333, (double) 578, 13.07, allowedSolution0);
      assertEquals(0.008333333333333333, pegasusSolver0.getMin(), 0.01);
      assertEquals(78.41599961303137, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(602, (UnivariateRealFunction) tan0, 0.0, 926.805, allowedSolution0);
      assertEquals(926.805, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(602, (UnivariateRealFunction) tan0, (-59.64049071044921), (double) 602, (-2443.6462017), allowedSolution0);
      assertEquals((-2443.6462017), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(89.53539111232625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(Double.NaN, Double.NaN);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2256, (UnivariateRealFunction) tanh0, (-1.0), 0.08713622391223907, allowedSolution0);
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.4384203044354907E-8);
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(17748207, (UnivariateRealFunction) sin0, 0.9999568266464223, 1814.104140691844, (-1.0), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1385.442360233099, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-125.69103409), 0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(4352, (UnivariateRealFunction) sinc0, (-125.69103409), 2271.5876032082615, 0.0, allowedSolution0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1555.0883635269477, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(926.805, 0.008333333333333333, 926.805);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(578, (UnivariateRealFunction) tan0, (-62.49788604425929), (double) 578, 13.07, allowedSolution0);
      assertEquals(13.07, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(492.99004338952386, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(928.4208251897154, 0.008333333333333333, 928.4208251897154);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(578, (UnivariateRealFunction) tan0, (-62.10709767), (double) 578, 13.07, allowedSolution0);
      assertEquals(13.07, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(541.7887045638677, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(Double.NaN, Double.NaN);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2256, (UnivariateRealFunction) tanh0, (-1.0), (double) 2256, allowedSolution0);
      assertEquals(2256.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1.3858708382922735E-26), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(926.805, 0.008333333333333333, 926.805);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(578, (UnivariateRealFunction) tan0, (-62.10709767), (double) 578, 13.07, allowedSolution0);
      assertEquals(13.07, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(578.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(932.5144266548535, 932.5144266548535, 932.5144266548535);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2147483565, (UnivariateRealFunction) tan0, 932.5144266548535, (double) 2147483565, (double) 2147483565, allowedSolution0);
      assertEquals(2.147483565E9, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(932.5144266548535, double0, 0.01);
  }

////  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-125.69103409), 0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(4358, (UnivariateRealFunction) sinc0, (-125.69103409), 2271.5876032082615, 0.8942179016274083, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tan tan0 = new Tan();
      double double0 = pegasusSolver0.solve(602, (UnivariateRealFunction) tan0, (-830.486), 19.82282, 1.073741824E9);
      assertEquals(1.073741824E9, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-342.4335992412875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(938.2663337175942, 938.2663337175942);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2974, (UnivariateRealFunction) tan0, 2.4384203044354907E-8, (double) 2974, 0.0, allowedSolution0);
      assertEquals(0.0592612289108968, double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(926.805, 926.805);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(602, (UnivariateRealFunction) tan0, (-59.64049071044921), (double) 602, 13.07, allowedSolution0);
      assertEquals(13.07, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-46.5496160908325), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(938.2663337175942, 938.2663337175942);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(590, (UnivariateRealFunction) tan0, 2.4384203044354907E-8, (double) 590, 0.0, allowedSolution0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.0201147663101438E-5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(602, (UnivariateRealFunction) tan0, (-59.64049071044921), (double) 602, (-2443.6462017), allowedSolution0);
      assertEquals((-2443.6462017), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(89.53539111232625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(926.805, 926.805);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(602, (UnivariateRealFunction) tan0, (-2698.4655), (double) 602, 13.07, allowedSolution0);
      assertEquals(13.07, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2698.4655), double0, 0.01);
  }
}
