/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:31:16 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2969.292878), 43.1);
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      regulaFalsiSolver0.solve(2242, (UnivariateRealFunction) sinh0, (-1384.74536), 0.0, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(194, univariateRealFunction0, 2561.7501802, 1271.66488164, allowedSolution0);
      assertEquals(1271.66488164, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(2561.7501802, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(5661.985110408279, 5661.985110408279, 0.0);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(61, univariateRealFunction0, (-364.759889566), 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, illinoisSolver0.getMax(), 0.01);
      assertEquals((-32.64224334870502), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(397.2913, 1460.089571, 752.778497);
      Minus minus0 = new Minus();
      double double0 = pegasusSolver0.solve(4848, (UnivariateRealFunction) minus0, (-1471.49795), (double) 4848, 0.0);
      assertEquals((-1471.49795), pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinh sinh0 = new Sinh();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(40, (UnivariateRealFunction) sinh0, (double) (-2069), (double) 40);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (40) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-489.5706001500553), (-489.5706001500553));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2799, (UnivariateRealFunction) tan0, 1.5570856059692832, (double) 2799, (-489.5706001500553), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,799) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(61, (UnivariateRealFunction) atan0, (-8.537482333164881), 1.0E-6, allowedSolution0);
      assertEquals((-8.537482333164881), illinoisSolver0.getMin(), 0.01);
      assertEquals(6.2858315014993304E-18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Asinh asinh0 = new Asinh();
      pegasusSolver0.setup(212, asinh0, (-2551.240815699), 0.333333333333333, (-2838.99));
      double double0 = pegasusSolver0.doSolve();
      assertEquals((-1.5111628938344274E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(61, (UnivariateRealFunction) atan0, (-8.537482333164881), 1.0E-6, allowedSolution0);
      assertEquals((-4.268740666582441), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-6.285831501574163E-18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(61, (UnivariateRealFunction) atan0, (-8.537482333164881), 1.0E-6, allowedSolution0);
      assertEquals((-4.268740666582441), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(6.2858315014993304E-18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(61, (UnivariateRealFunction) atan0, (-8.537482333164881), 1.0E-6, allowedSolution0);
      assertEquals((-8.537482333164881), illinoisSolver0.getMin(), 0.01);
      assertEquals((-6.285831501574163E-18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(76, (UnivariateRealFunction) atan0, (-1.0), 1.0E-6, allowedSolution0);
      assertEquals((-0.49999950000000004), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2.732391968357874E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(969, (UnivariateRealFunction) atan0, (-116.07556367244467), 8.494371146418722, allowedSolution0);
      assertEquals(8.494371146418722, illinoisSolver0.getMax(), 0.01);
      assertEquals((-1.518507795193909E-12), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(5661.985110408279, 5661.985110408279, 0.0);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(61, univariateRealFunction0, (-364.759889566), 1.0E-6, allowedSolution0);
      assertEquals((-182.37994428300001), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-32.64224334870502), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-4670), (-4670), 0.0);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(61, univariateRealFunction0, (-364.759889566), 1.0E-6, allowedSolution0);
      assertEquals((-182.37994428300001), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-288.32824293659365), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(5661.985110408279, 5661.985110408279, 0.0);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(61, univariateRealFunction0, (-364.759889566), 1.0E-6, allowedSolution0);
      assertEquals((-182.37994428300001), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-32.64224334870502), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-4670), (-4670), 0.0);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(61, univariateRealFunction0, (double) (-4670), 1.0E-6, allowedSolution0);
      assertEquals((-2334.9999995), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-4257.593999007518), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(5661.985110408279, 5661.985110408279, 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(56, (UnivariateRealFunction) harmonicOscillator0, (double) 61, 3.151066310684206E7, allowedSolution0);
      assertEquals(1.575536205342103E7, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2.7835786789333936E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(5661.985110408279, 5661.985110408279, 5661.985110408279);
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(61, univariateRealFunction0, (-364.759889566), 1.0E-6, allowedSolution0);
      assertEquals((-182.37994428300001), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-156.66626990967157), double0, 0.01);
  }
}
