/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:23:47 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0E-6, 1.0E-6, 1.0E-6);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1178.6360314543524), (-1178.6360314543524));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1215, (UnivariateRealFunction) expm1_0, (-1178.6360314543524), (double) 1215, (-841.580939), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,215) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Identity identity0 = new Identity();
      double double0 = pegasusSolver0.solve(273, (UnivariateRealFunction) identity0, (-1587.5333897), 1.0, 597.3903437092);
      assertEquals(1.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1414.4722838745631);
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1727, (UnivariateRealFunction) tan0, 0.0, 405.7623636, allowedSolution0);
      assertEquals(405.7623636, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1414.4722838745631);
      Tan tan0 = new Tan();
      double double0 = regulaFalsiSolver0.solve(94, (UnivariateRealFunction) tan0, 405.7623636, 0.0, 0.0);
      assertEquals(405.7623636, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1414.4722838745631);
      Tan tan0 = new Tan();
      double double0 = regulaFalsiSolver0.solve(94, (UnivariateRealFunction) tan0, 405.7623636, 2277.1859135878763, 405.7623636);
      assertEquals(405.7623636, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1373.4984177904817, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-2343.2), (double) 3144, (-2343.2), allowedSolution0);
      assertEquals((-2343.2), pegasusSolver0.getMin(), 0.01);
      assertEquals(3078.760800518004, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1024, (UnivariateRealFunction) tanh0, (-1647.7870217249979), 0.01745329052209854, 730.269626277434, allowedSolution0);
      assertEquals(730.269626277434, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2.335028279454195E-28, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-2041.6998322200775), 0.07490822288864472, (-2343.2));
      assertEquals((-2343.2), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2038.8936321797758), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-1368.8066572564), 1.0E-6, 3353.382, allowedSolution0);
      assertEquals(1.0E-6, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1366.5928043116107), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-1368.8066572564), 1.0E-6, 3353.382, allowedSolution0);
      assertEquals(3353.382, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1366.5928043116107), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-93.747436703), 1.0E-6, 3353.382, allowedSolution0);
      assertEquals(3353.382, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-91.106186954104), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-2343.2), 1.0E-6, 3353.382, allowedSolution0);
      assertEquals(3353.382, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2340.486526921896), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-2343.2101071), (double) 3144, (-2343.2101071), allowedSolution0);
      assertEquals((-2343.2101071), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(3110.176727053895, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-2343.2101071), (double) 3144, (-2343.2101071), allowedSolution0);
      assertEquals((-2343.2101071), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(3110.1767270538953, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-1368.8066572564), 3110.1767270538953, 3353.382, allowedSolution0);
      assertEquals(3353.382, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(3110.176727053861, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2759768, (UnivariateRealFunction) cbrt0, (-7.292033107434832E-9), (double) 3144, (double) 3144, allowedSolution0);
      assertEquals(3144.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(7.863962529783283E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(3144, (UnivariateRealFunction) sinc0, (-1368.8066572564), 3078.760800518004, 3353.382, allowedSolution0);
      assertEquals(3078.760800501411, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(826, (UnivariateRealFunction) sinc0, (-2343.2), (double) 826, (-2343.2), allowedSolution0);
      assertEquals((-2343.2), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1787.5662198925604), double0, 0.01);
  }
}
