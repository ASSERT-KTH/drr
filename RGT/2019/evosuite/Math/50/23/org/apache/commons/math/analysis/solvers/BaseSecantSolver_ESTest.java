/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:10:44 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(929, (UnivariateRealFunction) signum0, 0.0, 3229.16947958252, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 1.5707963267948966, (-978.534), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(8388608, (UnivariateRealFunction) sin0, (-139.56248447131833), 0.0, allowedSolution0);
      assertEquals((-139.56248447131833), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0), (-175.8310164506));
      Minus minus0 = new Minus();
      double double0 = pegasusSolver0.solve(1907, (UnivariateRealFunction) minus0, (-175.8310164506), 2131.2582565, (-1.0));
      assertEquals((-175.8310164506), pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 0.0875862700108075, (-978.534), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals(3.294235945374658E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-7.800414592973399E-9), (-7.800414592973399E-9), (-7.800414592973399E-9));
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(3, (UnivariateRealFunction) signum0, (-1.0), (double) 3, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 0.0875862700108075, (-978.534), allowedSolution0);
      assertEquals(0.0875862700108075, illinoisSolver0.getMax(), 0.01);
      assertEquals((-0.45620686499459623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 1.5707963267948966, (-978.534), allowedSolution0);
      assertEquals((-978.534), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.2853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(929, (UnivariateRealFunction) signum0, (-1.0), 3229.16947958252, allowedSolution0);
      assertEquals(1614.08473979126, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(929, (UnivariateRealFunction) signum0, (-1.5029037162860899), 3229.16947958252, allowedSolution0);
      assertEquals(3229.16947958252, illinoisSolver0.getMax(), 0.01);
      assertEquals(1613.833287933117, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 0.0875862700108075, (-978.534), allowedSolution0);
      assertEquals((-978.534), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-0.45620686499459623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 0.0875862700108075, (-978.534), allowedSolution0);
      assertEquals((-978.534), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0875862700108075, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Asinh asinh0 = new Asinh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(31, (UnivariateRealFunction) asinh0, (-954.2444), 2.48927264758644E-4, (-0.25), allowedSolution0);
      assertEquals((-0.25), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-0.031195018349013986), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 1.5707963267948966, 1.5707963267948966);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(920, (UnivariateRealFunction) signum0, (-1.5029037162860899), 0.0875862700108075, allowedSolution0);
      assertEquals(0.0875862700108075, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0875862700108075, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 0.0875862700108075);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 0.0875862700108075, (-978.534), allowedSolution0);
      assertEquals((-978.534), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-0.45620686499459623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.5707963267948966, 0.0875862700108075);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 0.0875862700108075, (-978.534), allowedSolution0);
      assertEquals((-978.534), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-0.45620686499459623), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(32, (UnivariateRealFunction) signum0, (-1.0), 0.0875862700108075, (-978.534), allowedSolution0);
      assertEquals((-978.534), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.294235945374658E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(929, (UnivariateRealFunction) signum0, (-49.863006067395986), 3229.16947958252, allowedSolution0);
      assertEquals(1589.653236757562, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3.976242349986699E-7), double0, 0.01);
  }
}
