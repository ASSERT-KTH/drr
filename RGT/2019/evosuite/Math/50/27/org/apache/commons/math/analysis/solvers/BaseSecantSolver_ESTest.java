/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:20:00 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1766.0));
      Sinh sinh0 = new Sinh();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(3, (UnivariateRealFunction) sinh0, (-1766.0), 367.0, (-244.75880177702678));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(0, (UnivariateRealFunction) atan0, (double) 0, (double) 0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(10, (UnivariateRealFunction) sinh0, 0.0, 0.0, 0.1538461446762085, allowedSolution0);
      assertEquals(0.1538461446762085, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Minus minus0 = new Minus();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(4013, (UnivariateRealFunction) minus0, (double) 4013, 0.0, 1420.6449753047, allowedSolution0);
      assertEquals(1420.6449753047, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Minus minus0 = new Minus();
      double double0 = pegasusSolver0.solve(2278, (UnivariateRealFunction) minus0, (-1135.4621), 145.81203983319398, (-1135.4621));
      assertEquals((-1135.4621), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[3] = (-1761.8485);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.375482565143538E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(178325034, (UnivariateRealFunction) atan0, (-1933.76669184), 0.16666666666666666, (double) 178325034, allowedSolution0);
      assertEquals(1.78325034E8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.656620915093992E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[3] = (-1761.8485);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.3754825722383348E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[3] = (-1761.8485);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.3754825722383348E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[3] = (-1761.8485);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.375482565143538E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[4] = (double) 2297;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.774482865479236E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[4] = (double) 2297;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.7744828515083285E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485), 1.0E-6);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[3] = (-1761.8485);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(84, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.412913661545372E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[4] = (double) 2297;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4.7744828515083285E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = (-1761.8485);
      doubleArray0[1] = (double) 2297;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-0.659227915489586), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-1761.8485);
      doubleArray0[1] = (double) 90;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(90, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-0.13048973430419686), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = (-1761.8485);
      doubleArray0[3] = (-1761.8485);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-0.6666666669504598), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.0E-6;
      doubleArray0[3] = (-1761.8485);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(90, univariateRealFunction0, (-1761.8485), 0.0, 90.0, allowedSolution0);
      assertEquals(90.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.412913661545372E-5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6, (-1761.8485));
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-1761.8485);
      doubleArray0[1] = (double) 2297;
      doubleArray0[8] = (double) 2297;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2297, univariateRealFunction0, (-1761.8485), 0.0, 623.1151, allowedSolution0);
      assertEquals(623.1151, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-0.5899817369725864), double0, 0.01);
  }
}
