/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:15:25 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1576.0935528), 0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      illinoisSolver0.solve(2514, (UnivariateRealFunction) cos0, 0.11113807559013367, 3.141592653589793, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.7345226626628192));
      Expm1 expm1_0 = new Expm1();
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, 0.0, (double) 1245, 581.9995209056799);
      assertEquals(581.9995209056799, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(3108, (UnivariateRealFunction) sin0, (double) 3108, 0.0, allowedSolution0);
      assertEquals(3108.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, (-882.5296206), 1.0, (-882.5296206), allowedSolution0);
      assertEquals((-882.5296206), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0, 0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2514, (UnivariateRealFunction) cos0, 0.11113807559013367, 3.141592653589793, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,514) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0);
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, (-882.5296206), 1.0, (-882.5296206), allowedSolution0);
      assertEquals((-882.5296206), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-5.093777317053542E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1576.0935528), 0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(2514, (UnivariateRealFunction) cos0, 0.11113807559013367, 3.141592653589793, allowedSolution0);
      assertEquals(0.11113807559013367, illinoisSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.7345226626628192));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, (-1.7345226626628192), 1.0, (-1.7345226626628192), allowedSolution0);
      assertEquals((-1.7345226626628192), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) tanh0, (-0.7853981633974483), (double) 1245, 7.030451322286735E-16, allowedSolution0);
      assertEquals(7.030451322286735E-16, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.634976030477484E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(14.616571053060438, 14.616571053060438, 14.616571053060438);
      Log10 log10_0 = new Log10();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(480, (UnivariateRealFunction) log10_0, -0.0, (double) 480, 1440.6838259767, allowedSolution0);
      assertEquals(1440.6838259767, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(480.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.7345226626628192));
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, (-1.7345226626628192), 0.3336712515184198, (-1.7345226626628192), allowedSolution0);
      assertEquals((-1.7345226626628192), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.6299605249474366, 0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(2514, (UnivariateRealFunction) cos0, 0.11113807559013367, 3.141592653589793, allowedSolution0);
      assertEquals(1.6263653645899634, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.481429518661825, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      double double0 = illinoisSolver0.solve(24, (UnivariateRealFunction) expm1_0, (-3081.6675770837232), 1.0, allowedSolution0);
      assertEquals((-1540.3337885418616), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.7506341721805143E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(13.733528519968022);
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, (-882.5296206), 1.0, (-882.5296206), allowedSolution0);
      assertEquals((-882.5296206), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.999544995028514), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2289.2955431, 2289.2955431, 2289.2955431);
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(512, (UnivariateRealFunction) expm1_0, (-1328.2588460549919), (double) 512, (-1328.2588460549919), allowedSolution0);
      assertEquals((-1328.2588460549919), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(512.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(13.733528519968022);
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, (-882.5296206), 1.0, (-882.5296206), allowedSolution0);
      assertEquals((-882.5296206), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.999544995028514), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(13.733528519968022);
      Expm1 expm1_0 = new Expm1();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1245, (UnivariateRealFunction) expm1_0, (-882.5296206), 1.0, (-882.5296206), allowedSolution0);
      assertEquals((-882.5296206), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tan tan0 = new Tan();
      PegasusSolver pegasusSolver0 = new PegasusSolver(1818, 1818, (-2718.9));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(4, (UnivariateRealFunction) tan0, (double) 4, (double) 1818, allowedSolution0);
      assertEquals(911.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1818.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.6299605249474366, 0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2514, (UnivariateRealFunction) cos0, 0.11113807559013367, 3.141592653589793, allowedSolution0);
      assertEquals(0.11113807559013367, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.481429518661825, double0, 0.01);
  }
}
