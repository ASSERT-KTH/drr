/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:45:11 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(2137, (UnivariateRealFunction) sinc0, 1335.971081091379, (double) 2137, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 0.4586650067120307, (-4596.1355637379));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, 0.0, (double) 2147, allowedSolution0);
      assertEquals(1073.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2146.0389831087246, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0E-6, 1.0E-6);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, 13.822895427575892, (double) 2147, allowedSolution0);
      assertEquals(2147.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(2133.1414117877716, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
      double double0 = pegasusSolver0.solve(3, univariateRealFunction0, 945.2635976631, (double) 3, (-2.957007209750105E-8));
      assertEquals(945.2635976631, pegasusSolver0.getMin(), 0.01);
      assertEquals(945.2635976631, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sigmoid sigmoid0 = new Sigmoid();
      UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
      double double0 = pegasusSolver0.solve(3, univariateRealFunction0, 0.0, 861.75, (-2.957007209750105E-8));
      assertEquals(861.75, pegasusSolver0.getMax(), 0.01);
      assertEquals(861.75, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1.2377455422938095E-7), (-1.2377455422938095E-7));
      Identity identity0 = new Identity();
      double double0 = regulaFalsiSolver0.solve(73443, (UnivariateRealFunction) identity0, (-6250.6135184), 2225.32313);
      assertEquals((-2012.6451942000003), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, (-4596.1355637379));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, (-4596.1355637379), (double) 2147, allowedSolution0);
      assertEquals(2147.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-4580.442088933918), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.3211187211172282);
      Sin sin0 = new Sin();
      double double0 = regulaFalsiSolver0.solve(4860, (UnivariateRealFunction) sin0, (-831.710409578), 1571.5);
      assertEquals(369.894795211, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1130.833171585435, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, 1.0E-6);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, 13.822895427575892, (double) 2147, allowedSolution0);
      assertEquals(1080.411447713788, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2133.1415096812752, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, 1.0E-6);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, 13.364931731081198, (double) 2147, allowedSolution0);
      assertEquals(13.364931731081198, illinoisSolver0.getMin(), 0.01);
      assertEquals(2070.30955871492, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, 1.0E-6);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2128, (UnivariateRealFunction) sinc0, 13.822895427575892, (double) 2128, allowedSolution0);
      assertEquals(13.822895427575892, illinoisSolver0.getMin(), 0.01);
      assertEquals(2101.7254852538126, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, 3834.2884368554933);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, 0.0, (double) 2147, allowedSolution0);
      assertEquals(1073.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2145.603862107502, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, 1.0E-6);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2128, (UnivariateRealFunction) sinc0, 13.822895427575892, (double) 2128, allowedSolution0);
      assertEquals(13.822895427575892, illinoisSolver0.getMin(), 0.01);
      assertEquals(2101.7254852538126, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, (-4596.1355637379));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(164, (UnivariateRealFunction) sinc0, (double) 164, 1882.471, allowedSolution0);
      assertEquals(164.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1831.5485170428494, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, (-4596.1355637379));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, (-4596.1355637379), (double) 2147, allowedSolution0);
      assertEquals((-4596.1355637379), illinoisSolver0.getMin(), 0.01);
      assertEquals((-4580.442088933919), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, (-4596.1355637379));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(158, (UnivariateRealFunction) sinc0, (double) 158, 1882.471, allowedSolution0);
      assertEquals(158.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1774.9998492782331, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4596.1355637379), 1.0E-6, (-4596.1355637379));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2147, (UnivariateRealFunction) sinc0, 0.0, (double) 2147, allowedSolution0);
      assertEquals(1073.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2145.7077824018284, double0, 0.01);
  }
}
