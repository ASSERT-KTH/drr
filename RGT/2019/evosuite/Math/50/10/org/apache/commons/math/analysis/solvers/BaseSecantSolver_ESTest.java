/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:40:31 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2554.76, 0.0);
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      pegasusSolver0.solve(2775, (UnivariateRealFunction) ceil0, 0.0, (-1.0), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(441.9366146999);
      Gaussian gaussian0 = new Gaussian(8388607, 2305.49865, 1.176342548272881E-8);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(8388607, (UnivariateRealFunction) gaussian0, 2305.49865, (-2160.92), allowedSolution0);
      assertEquals((-2160.92), regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2160.92), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2554.76, 0.0);
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2775, (UnivariateRealFunction) ceil0, (-1.0), (double) 2775, allowedSolution0);
      assertEquals(2775.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2454, (UnivariateRealFunction) sinc0, 1886.1092033840991, (double) 2454, allowedSolution0);
      assertEquals(1886.1092033840991, pegasusSolver0.getMin(), 0.01);
      assertEquals(1906.946740799359, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1113246288, 1113246288, 0.07842259109020233);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1113246288, (UnivariateRealFunction) harmonicOscillator0, 0.07842259109020233, (double) 1113246288, allowedSolution0);
      assertEquals(0.07842259109020233, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0218330293121125E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      double double0 = regulaFalsiSolver0.solve(931, (UnivariateRealFunction) sinc0, 6.267261535741944E-6, 2192.36);
      assertEquals(1096.1800031336309, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2189.690079552086, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.5, 0.5);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 4.507096879301, allowedSolution0);
      assertEquals(2.2535484396505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.988926629625584, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.5, 0.5);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 4.507096879301, allowedSolution0);
      assertEquals(2.2535484396505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.988926629625584, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.5, 4.507096879301, allowedSolution0);
      assertEquals(0.5, pegasusSolver0.getMin(), 0.01);
      assertEquals(3.1415926535897936, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 4.507096879301, 615.9754196173, 0.5, allowedSolution0);
      assertEquals(0.5, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(615.7521601035994, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5, 0.5);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 4.507096879301, allowedSolution0);
      assertEquals(2.2535484396505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.988926629625584, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5, 0.5);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 4.507096879301, allowedSolution0);
      assertEquals(2.2535484396505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.988926629625584, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 3.4535832860297404, allowedSolution0);
      assertEquals(1.7267916430148702, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(3.171684606223182, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5, (-1286.08));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.5, (double) 2449, allowedSolution0);
      assertEquals(0.5, pegasusSolver0.getMin(), 0.01);
      assertEquals(2446.921668483168, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.6480589810382327, 1.6480589810382327);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 4.507096879301, allowedSolution0);
      assertEquals(2.2535484396505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 4.507096879301, allowedSolution0);
      assertEquals(2.2535484396505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(3.175561903475479, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.5);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2449, (UnivariateRealFunction) sinc0, 0.0, 4.507096879301, allowedSolution0);
      assertEquals(2.2535484396505, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.988926629625584, double0, 0.01);
  }
}
