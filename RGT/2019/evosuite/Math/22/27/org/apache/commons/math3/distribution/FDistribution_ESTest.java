/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:51:29 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4052.6, 4052.6, 0.0);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(9.887277112227823E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.2, 0.2);
      // Undeclared exception!
      fDistribution0.sample(1914);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(135.803277945, 135.803277945);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(135.803277945, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(135.803277945, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.2, 0.2);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(0.2, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.2, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.3856534957885742, 1041.864209388);
      double double0 = fDistribution0.density((-7.206766550807255E-8));
      assertEquals(1.3856534957885742, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1041.864209388, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((RandomGenerator) null, (-970.418), (-970.418), (-970.418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-970.418)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.3409265875816345, (-296.79705376948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-296.797)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4052.6, 4052.6, 0.0);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(4052.6, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0004937540117513, double0, 0.01);
  }
}
