/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:51:51 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class UniformRealDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.inverseCumulativeProbability(0.08333333333333333);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.08333333333333333, double0, 0.01);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.sample();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0.9026297667469598, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well512a well512a0 = new Well512a(53);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well512a0, 53, 771.0, 1357.9207438889846);
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertEquals(42960.333333333336, uniformRealDistribution0.getNumericalVariance(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-2.0), 1105.59129, 0.0);
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertTrue(boolean0);
      assertEquals(551.795645, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = null;
      try {
        uniformRealDistribution0 = new UniformRealDistribution(1.0E-9, 1.0E-9, 1.0E-9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (0) must be strictly less than upper bound (0)
         //
         verifyException("org.apache.commons.math3.distribution.UniformRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.density((-4212.4951586749));
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Well512a well512a0 = new Well512a(53);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well512a0, 53, 771.0, 1357.9207438889846);
      double double0 = uniformRealDistribution0.density(1438.825099);
      assertEquals(0.0, double0, 0.01);
      assertEquals(412.0, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.density(0.0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.cumulativeProbability(1.0);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }
}
