/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:40:07 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1117.0, 1117.0, 1117.0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.inverseCumulativeProbability(0.6160298585891724);
      assertEquals(1.0778295683278905, double0, 0.01);
      assertEquals(1.0017937219730941, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0, 1.0);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1117.0, 1117.0, 1117.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(1.0017937219730941, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(1117.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3353.0, 3353.0);
      double double0 = fDistribution0.density(3353.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well1024a0, 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(mersenneTwister0, 1.7013941257113314E-190, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

//  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0, 1.0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(42.08211366844652, double0, 0.01);
      
      double double1 = fDistribution0.getNumericalVariance();
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }
}
