/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:49:40 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(7.640606938467665E-129, 7.640606938467665E-129);
      double double0 = fDistribution0.inverseCumulativeProbability(7.640606938467665E-129);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = fDistribution0.getNumericalVariance();
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(7.640606938467665E-129, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(7.640606938467665E-129, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(7.640606938467665E-129, 7.640606938467665E-129);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(7.640606938467665E-129, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(7.640606938467665E-129, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(7.640606938467665E-129, 7.640606938467665E-129);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(7.640606938467665E-129, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(7.640606938467665E-129, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(7.640606938467665E-129, 7.640606938467665E-129);
      double double0 = fDistribution0.density(7.640606938467665E-129);
      assertEquals(0.24999999999999906, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1.1991832256317139, (-2379.4512207419557));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,379.451)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2317.5184966301, 1.4454470027638629E283, 2317.5184966301);
      // Undeclared exception!
      try { 
        fDistribution0.sample(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction diverged to NaN for value 1
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }
}
