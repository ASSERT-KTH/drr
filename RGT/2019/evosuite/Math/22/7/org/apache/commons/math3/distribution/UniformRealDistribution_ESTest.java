/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:39:13 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class UniformRealDistribution_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(mersenneTwister0, 0.0, 1308.295647127, 738.7);
      boolean boolean0 = uniformRealDistribution0.isSupportConnected();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(654.1478235635, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(mersenneTwister0, 0.0, 1308.295647127, 738.7);
      double double0 = uniformRealDistribution0.sample();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(347.5027934990044, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(Double.NEGATIVE_INFINITY, 12.0, 12.0);
      double double0 = uniformRealDistribution0.getNumericalMean();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(12.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-9.68483), 0.5);
      double double0 = uniformRealDistribution0.probability((-9.68483), (-2.0));
      assertEquals(0.7545368945775236, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(0.0, 2.220446049250313E-16, 0.0);
      double double0 = uniformRealDistribution0.getSupportUpperBound();
      assertEquals(2.220446049250313E-16, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(0.0, 2.220446049250313E-16, 0.0);
      double double0 = uniformRealDistribution0.getNumericalVariance();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.1102230246251565E-16, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(4.108650548026103E-33, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(mersenneTwister0, 0.0, 1308.295647127, 738.7);
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertEquals(654.1478235635, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(0.0, 748.163);
      double double0 = uniformRealDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(374.0815, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.getSupportLowerBound();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(mersenneTwister0, 0.0, 1308.295647127, 738.7);
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(boolean0);
      assertEquals(654.1478235635, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = null;
      try {
        uniformRealDistribution0 = new UniformRealDistribution(1560.9270033, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (1,560.927) must be strictly less than upper bound (0)
         //
         verifyException("org.apache.commons.math3.distribution.UniformRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(0.0, 2.220446049250313E-16, 0.0);
      double double0 = uniformRealDistribution0.density((-568.4169505816313));
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.1102230246251565E-16, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(mersenneTwister0, 0.0, 1308.295647127, 738.7);
      double double0 = uniformRealDistribution0.density(1334.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(654.1478235635, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-2280.0993), 1170.0, 3149.72135);
      double double0 = uniformRealDistribution0.density((-1411.922));
      assertEquals(2.898467299187592E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(0.0, 2.220446049250313E-16, 0.0);
      double double0 = uniformRealDistribution0.cumulativeProbability(1549.158865);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.1102230246251565E-16, uniformRealDistribution0.getNumericalMean(), 0.01);
  }
}
