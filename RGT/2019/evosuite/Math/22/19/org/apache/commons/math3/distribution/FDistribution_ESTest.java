/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:46:41 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

//  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      FDistribution fDistribution0 = new FDistribution(well19937c0, 1589.841, 2063.87661822, (-297.0));
      // Undeclared exception!
      fDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.7148689119310826E-286, 1.0E-9);
      double double0 = fDistribution0.sample();
      assertEquals(1.681278956582695E-9, double0, 0.01);
      
      double double1 = fDistribution0.sample();
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.1707314489312233E-9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.7148689119310826E-286, 1.0E-9);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1.7148689119310826E-286, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.7148689119310826E-286, 1.0E-9);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1.0E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.7148689119310826E-286, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.7148689119310826E-286, 1.0E-9);
      double double0 = fDistribution0.density(0.4818955063819885);
      assertEquals(1.779295396221902E-286, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(randomAdaptor0, (-3968.825893749), (-3968.825893749), 1271.6299594278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-3,968.826)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(2.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }
}
