/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:49:04 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

//  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(683.647106004969, 683.647106004969);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(0.005911334866544514, double0, 0.01);
      
      double double1 = fDistribution0.sample();
      assertEquals(1.104333513038873, double1, 0.01);
      assertEquals(1.0029340695242173, fDistribution0.getNumericalMean(), 0.01);
  }

//  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(683.647106004969, 683.647106004969);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(1.104333513038873, double0, 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(1.0029340695242173, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well1024a well1024a0 = new Well1024a(intArray0);
      FDistribution fDistribution0 = new FDistribution(well1024a0, 1.0, 1.0, (-2458));
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 4.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 4.0);
      double double0 = fDistribution0.density(5.56334611651382E-161);
      assertEquals(3.3380076699082374E-160, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-1977.3528976908), 1.0E-9, 0.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,977.353)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1780.1040938363, 0.0, 1154.43063688598);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.906278351789277E292, 0.9999999999999971);
      // Undeclared exception!
      try { 
        fDistribution0.sample(751);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Continued fraction diverged to NaN for value 1
         //
         verifyException("org.apache.commons.math3.util.ContinuedFraction", e);
      }
  }
}
