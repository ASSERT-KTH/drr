/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:36:20 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

//  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3.4688299108856403E-133, 3.4688299108856403E-133);
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(3.4688299108856403E-133, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(9.145525661806504E15, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3.4688299108856403E-133, 3.4688299108856403E-133);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(3.4688299108856403E-133, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(3.4688299108856403E-133, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 2.0, 0.15526613593101501);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1621.6920403594306, 1621.6920403594306, 0.0);
      double double0 = fDistribution0.density(0L);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1621.6920403594306, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1197);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well44497b0, 0.0, 0.0, 102.1428372);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(Double.POSITIVE_INFINITY, (-1553.46097836902), Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,553.461)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

//  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1621.6920403594306, 1621.6920403594306, 0.0);
      assertEquals(1621.6920403594306, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(1.0665344297896897, double0, 0.01);
      
      double double1 = fDistribution0.sample();
      assertEquals(1.0012348026354172, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.016424324473723, double1, 0.01);
  }
}
