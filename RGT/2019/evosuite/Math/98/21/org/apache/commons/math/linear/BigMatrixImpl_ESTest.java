/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 19:53:48 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;


public class BigMatrixImpl_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.toString();
      BigMatrix bigMatrix0 = bigMatrixImpl0.getColumnMatrix(0);
      bigMatrix0.getNorm();
      double[] doubleArray0 = new double[6];
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3778, 3778);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.hashCode();
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarMultiply(bigDecimal0);
      try { 
        bigMatrix0.getSubMatrix(556, 556, 556, 556);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      bigMatrixImpl0.equals(bigMatrixImpl0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumn(24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getRowAsDoubleArray((-12));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getDataAsDoubleArray();
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
      try { 
        bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal0 = new BigDecimal((-53), mathContext0);
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal0;
      bigDecimalArray0[2] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
      int[] intArray0 = new int[7];
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl0);
      bigMatrix0.getDeterminant();
      try { 
        bigMatrix0.getColumnAsDoubleArray((-2534));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.operate((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.transpose();
      bigMatrixImpl0.operate(bigDecimalArray0);
      try { 
        bigMatrix0.getRowMatrix(2163);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[][] stringArray0 = new String[1][1];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getRow(1755);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is singular
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      bigMatrixImpl0.setScale((-1109));
      // Undeclared exception!
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][9];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      bigDecimalArray0[3] = bigDecimal3;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = 0;
      bigMatrixImpl0.getRow(0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[2][4];
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal2;
      bigDecimalArray1[0] = bigDecimalArray2;
      bigDecimalArray1[1] = bigDecimalArray0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 1755, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
      BigDecimal bigDecimal0 = new BigDecimal(3345);
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      bigDecimalArray1[1] = bigDecimal1;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[][] stringArray0 = new String[0][5];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2390.0;
      doubleArray1[1] = 1151.958145;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2524.20536741);
      doubleArray1[5] = 1440.157377985;
      doubleArray1[6] = 58.9;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      int int0 = bigMatrixImpl0.getRowDimension();
      assertEquals(1, int0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1529.1511;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1529.1511;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1529.1511;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = 1529.1511;
      doubleArray0[1] = doubleArray2;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[][] stringArray0 = new String[4][5];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "W`{CGQ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      stringArray2[0] = "W`{CGQ";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      stringArray3[0] = "W`{CGQ";
      stringArray3[1] = "";
      stringArray3[2] = "W`{CGQ";
      stringArray3[3] = "W`{CGQ";
      stringArray3[4] = "W`{CGQ";
      stringArray3[5] = "wD] vd@0fUy'ApE6L>$";
      stringArray3[6] = "W`{CGQ";
      stringArray3[7] = "W`{CGQ";
      stringArray3[8] = "W`{CGQ";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[5];
      stringArray4[0] = "";
      stringArray4[1] = "";
      stringArray4[2] = "wD] vd@0fUy'ApE6L>$";
      stringArray4[3] = "wD] vd@0fUy'ApE6L>$";
      stringArray4[4] = "";
      stringArray0[3] = stringArray4;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getSubMatrix(592, 592, 592, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal1);
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][4];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(889, 3629);
      // Undeclared exception!
      bigMatrixImpl0.toString();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0E-11;
      doubleArray1[1] = 1.0E-11;
      doubleArray1[2] = 1.0E-11;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 2782.06309078067;
      doubleArray2[1] = 2782.06309078067;
      doubleArray2[2] = 2782.06309078067;
      doubleArray2[3] = 1.0E-11;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0E-11;
      doubleArray2[6] = 1.0E-11;
      doubleArray2[7] = 1.0E-11;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1646.799053;
      doubleArray3[1] = 2782.06309078067;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.0E-11;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 1.0E-11;
      doubleArray0[3] = doubleArray3;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(482.19);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(482.19);
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigDecimal.TEN;
      bigDecimalArray0[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigDecimal.valueOf(0L);
      bigDecimalArray0[6] = bigDecimal6;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
      assertEquals(4, bigMatrix0.getRoundingMode());
      assertTrue(bigMatrix0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][9];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int[] intArray0 = new int[0];
      bigMatrixImpl0.permutation = intArray0;
      doubleArray0[2] = 787.407045935;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[6][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(bigDecimalArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 3071;
      int int1 = (-676);
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(3071, (-676));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[3] = (-683.9671717349535);
      doubleArray2[4] = (-2783.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-2783.0);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-2783.0);
      doubleArray3[4] = (-683.9671717349535);
      doubleArray3[5] = (-2783.0);
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[][] stringArray0 = new String[1][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "7h{:AvZ1h[?U";
      stringArray1[2] = "E!S#J7";
      stringArray1[3] = "org.apache.commons.math.linear.MatrixIndexException";
      stringArray1[4] = ".m_cu4H";
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ZERO;
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.ZERO;
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigDecimal.TEN;
      bigDecimalArray0[5] = bigDecimal5;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(6, bigMatrixImpl1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(0L, mathContext0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(0);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal((long) 0);
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal(0);
      bigDecimalArray0[4] = bigDecimal4;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      boolean boolean0 = bigMatrixImpl0.isSquare();
      assertEquals(5, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int[] intArray0 = new int[3];
      intArray0[0] = 418;
      intArray0[1] = 1991;
      intArray0[2] = (-115);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[][] stringArray0 = new String[4][7];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      stringArray2[0] = "h\"s<)d#";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[5];
      stringArray3[0] = "h\"s<)d#";
      stringArray3[1] = "h\"s<)d#";
      stringArray3[2] = "h\"s<)d#";
      stringArray3[3] = "h\"s<)d#";
      stringArray3[4] = "h\"s<)d#";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      stringArray4[0] = "h\"s<)d#";
      stringArray4[1] = "h\"s<)d#";
      stringArray4[2] = "h\"s<)d#";
      stringArray4[3] = "h\"s<)d#";
      stringArray4[4] = "h\"s<)d#";
      stringArray4[5] = "h\"s<)d#";
      stringArray4[6] = "7wCSWL)v";
      stringArray4[7] = "h\"s<)d#";
      stringArray4[8] = "h\"s<)d#";
      stringArray0[3] = stringArray4;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[3];
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      bigDecimalArray2[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ZERO;
      bigDecimalArray2[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray2[2] = bigDecimal2;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      bigDecimalArray3[0] = bigDecimal2;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[7];
      bigDecimalArray4[0] = bigDecimal1;
      BigDecimal bigDecimal3 = new BigDecimal(666L);
      bigDecimalArray4[1] = bigDecimal3;
      bigDecimalArray4[2] = bigDecimal1;
      bigDecimalArray4[3] = bigDecimal1;
      bigDecimalArray4[4] = bigDecimal0;
      bigDecimalArray4[5] = bigDecimal1;
      BigDecimal bigDecimal4 = new BigDecimal(689);
      bigDecimalArray4[6] = bigDecimal4;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[3];
      BigDecimal bigDecimal5 = new BigDecimal(3822);
      bigDecimalArray5[0] = bigDecimal5;
      bigDecimalArray5[1] = bigDecimal2;
      bigDecimalArray5[2] = bigDecimal3;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[9];
      bigDecimalArray6[0] = bigDecimal3;
      bigDecimalArray6[1] = bigDecimal4;
      bigDecimalArray6[2] = bigDecimal1;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal6 = new BigDecimal(bigInteger0);
      bigDecimalArray6[3] = bigDecimal6;
      bigDecimalArray6[4] = bigDecimal4;
      bigDecimalArray6[5] = bigDecimal1;
      bigDecimalArray6[6] = bigDecimal4;
      bigDecimalArray6[8] = bigDecimal3;
      bigDecimalArray0[5] = bigDecimalArray6;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3266.93);
      doubleArray0[1] = (-1622.230527304375);
      doubleArray0[2] = 512.640241628;
      doubleArray0[3] = (-720.6546346294745);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1634.1305170749;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = bigMatrixImpl0.getRoundingMode();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, int0);
      assertFalse(bigMatrixImpl0.isSquare());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 1969;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1969, 1969);
      int[] intArray0 = new int[1];
      intArray0[0] = 1969;
      int[] intArray1 = new int[3];
      intArray1[0] = 1969;
      try { 
        bigMatrixImpl0.getEntryAsDouble(1969, 1969);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][6];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray2[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray2[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((-741L));
      bigDecimalArray2[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimalArray2[3] = bigDecimal3;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[6];
      bigDecimalArray3[0] = bigDecimal2;
      bigDecimalArray3[1] = bigDecimal1;
      BigDecimal bigDecimal4 = BigMatrixImpl.ZERO;
      bigDecimalArray3[2] = bigDecimal4;
      bigDecimalArray3[3] = bigDecimal0;
      bigDecimalArray3[4] = bigDecimal3;
      bigDecimalArray3[5] = bigDecimal3;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[2];
      BigDecimal bigDecimal5 = BigMatrixImpl.ZERO;
      bigDecimalArray4[0] = bigDecimal5;
      bigDecimalArray4[1] = bigDecimal4;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 4076;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(4076, 4076);
      int int1 = 690;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      try { 
        bigMatrixImpl0.getSubMatrix((-902), 1318, (-902), (-4901));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[8][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[4];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[2] = bigDecimal0;
      bigDecimalArray2[3] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[4];
      bigDecimalArray3[0] = bigDecimal0;
      bigDecimalArray3[1] = bigDecimal0;
      bigDecimalArray3[2] = bigDecimal0;
      bigDecimalArray3[3] = bigDecimal0;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[1];
      bigDecimalArray4[0] = bigDecimal0;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[3];
      bigDecimalArray5[0] = bigDecimal0;
      bigDecimalArray5[1] = bigDecimal0;
      bigDecimalArray5[2] = bigDecimal0;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[0];
      bigDecimalArray0[5] = bigDecimalArray6;
      BigDecimal[] bigDecimalArray7 = new BigDecimal[0];
      bigDecimalArray0[6] = bigDecimalArray7;
      BigDecimal[] bigDecimalArray8 = new BigDecimal[2];
      bigDecimalArray8[0] = bigDecimal0;
      bigDecimalArray8[1] = bigDecimal0;
      bigDecimalArray0[7] = bigDecimalArray8;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      bigMatrixImpl0.getDataRef();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.multiply((BigMatrixImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(1.0);
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(0L);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(1.0);
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal(bigInteger0, 0);
      bigDecimalArray0[4] = bigDecimal4;
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      bigDecimal1.setScale(0, roundingMode0);
      BigDecimal bigDecimal5 = new BigDecimal(bigInteger0);
      bigDecimalArray0[5] = bigDecimal5;
      BigDecimal.valueOf((long) 0, 0);
      BigDecimal bigDecimal6 = BigDecimal.TEN;
      bigDecimalArray0[6] = bigDecimal6;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.isSquare();
      bigMatrixImpl0.hashCode();
      bigMatrixImpl0.getData();
      bigMatrixImpl0.getDataRef();
      bigMatrixImpl0.getDataAsDoubleArray();
      BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(0);
      try { 
        bigMatrixImpl0.preMultiply(bigMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.hashCode();
      bigMatrixImpl0.getDataAsDoubleArray();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigMatrixImpl0.scalarMultiply(bigDecimal0);
      // Undeclared exception!
      try { 
        bigDecimal0.divide(bigDecimal1, 1456);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      bigMatrixImpl0.toString();
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int int0 = 31;
      int int1 = 4;
      int int2 = 0;
      try { 
        bigMatrixImpl0.getSubMatrix(31, 4, 0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigMatrixImpl.ZERO;
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getColumnMatrix(64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray0[0] = bigDecimal0;
      int int0 = (-136);
      BigDecimal bigDecimal1 = new BigDecimal((-136));
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.equals(".A(");
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.multiply(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int int0 = 0;
      bigMatrixImpl0.parity = (-12);
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
      bigMatrixImpl0.setRoundingMode((-12));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      int int1 = 3649;
      BigDecimal bigDecimal1 = BigDecimal.valueOf(2963L);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.equals(bigMatrixImpl0);
      bigDecimal1.setScale(0);
      BigDecimal bigDecimal2 = new BigDecimal(3649, mathContext0);
      int int2 = (-4373);
      mathContext0.getRoundingMode();
      bigDecimal2.max(bigDecimal1);
      bigDecimal0.multiply(bigDecimal0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      // Undeclared exception!
      try { 
        bigDecimal0.divide(bigDecimal0, (-4373), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimal3.toBigInteger();
      bigDecimalArray0[3] = bigDecimal3;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray((-945));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigDecimal bigDecimal0 = new BigDecimal((-2777.9));
      bigDecimalArray0[0] = bigDecimal0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ZERO;
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal(1);
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigDecimal.TEN;
      bigDecimalArray0[5] = bigDecimal5;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-103);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(2645L);
      bigDecimalArray1[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      bigMatrixImpl0.toString();
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      bigMatrix0.isSingular();
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[6][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(bigDecimalArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[6][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(bigDecimalArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrix bigMatrix1 = bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      bigMatrix1.add((BigMatrix) bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      int int0 = 1131;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) 1131;
      doubleArray0[2] = (double) 1131;
      doubleArray0[3] = (double) 1131;
      doubleArray0[4] = (double) 1131;
      doubleArray0[5] = (double) 1131;
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(482.19);
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(482.19);
      bigDecimalArray0[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      bigDecimalArray0[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigDecimal.TEN;
      bigDecimalArray0[5] = bigDecimal5;
      bigDecimal5.equals(bigDecimal4);
      BigDecimal bigDecimal6 = BigDecimal.valueOf(0L);
      bigDecimalArray0[6] = bigDecimal6;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
      try { 
        bigMatrixImpl0.operate(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2390.0;
      doubleArray1[1] = 1151.958145;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-2524.20536741);
      doubleArray1[5] = (-2524.20536741);
      doubleArray1[6] = 58.9;
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      bigMatrixImpl0.getRowDimension();
      bigMatrixImpl0.getScale();
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      bigMatrixImpl1.isSingular();
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[6][8];
      bigMatrixImpl0.getTrace();
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      try { 
        bigMatrixImpl1.setSubMatrix(bigMatrixImpl0.lu, (-1739), (-1739));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2390.0;
      doubleArray1[1] = 1151.958145;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2524.20536741);
      doubleArray1[5] = 1440.157377985;
      doubleArray1[6] = 58.9;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      int[] intArray0 = new int[5];
      int int0 = 1120;
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[9][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[5];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal((-254));
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.valueOf((long) (-254));
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ZERO;
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal(0L);
      bigDecimalArray1[4] = bigDecimal4;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[8];
      BigDecimal bigDecimal5 = new BigDecimal(bigInteger0);
      bigDecimalArray2[0] = bigDecimal5;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray2[2] = bigDecimal4;
      bigDecimalArray2[3] = bigDecimal2;
      BigDecimal bigDecimal6 = new BigDecimal(1120);
      bigDecimalArray2[4] = bigDecimal6;
      bigDecimalArray2[5] = bigDecimal3;
      bigDecimalArray2[6] = bigDecimal4;
      bigDecimalArray2[7] = bigDecimal2;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[3];
      bigDecimalArray3[0] = bigDecimal0;
      BigDecimal bigDecimal7 = BigDecimal.ZERO;
      bigDecimalArray3[1] = bigDecimal7;
      bigDecimalArray3[2] = bigDecimal4;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[8];
      bigDecimalArray4[0] = bigDecimal4;
      bigDecimalArray4[1] = bigDecimal3;
      bigDecimalArray4[2] = bigDecimal2;
      bigDecimalArray4[3] = bigDecimal2;
      bigDecimalArray4[4] = bigDecimal0;
      BigDecimal bigDecimal8 = BigDecimal.ONE;
      bigDecimalArray4[5] = bigDecimal8;
      BigDecimal bigDecimal9 = BigMatrixImpl.ONE;
      bigDecimalArray4[6] = bigDecimal9;
      bigDecimalArray4[7] = bigDecimal5;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[6];
      BigDecimal bigDecimal10 = new BigDecimal(545.7349723299);
      bigDecimalArray5[0] = bigDecimal10;
      BigDecimal bigDecimal11 = bigMatrixImpl0.getNorm();
      bigDecimalArray5[1] = bigDecimal11;
      bigDecimalArray5[2] = bigDecimal7;
      bigDecimalArray5[3] = bigDecimal1;
      bigDecimalArray5[4] = bigDecimal6;
      bigDecimalArray5[5] = bigDecimal8;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[6];
      bigDecimalArray6[0] = bigDecimal2;
      BigDecimal bigDecimal12 = new BigDecimal((-254));
      bigDecimalArray6[1] = bigDecimal12;
      bigDecimalArray6[2] = bigDecimal0;
      bigDecimalArray6[3] = bigDecimal4;
      bigDecimalArray6[4] = bigDecimal1;
      bigDecimalArray6[5] = bigDecimal10;
      bigDecimalArray0[5] = bigDecimalArray6;
      BigDecimal[] bigDecimalArray7 = new BigDecimal[8];
      bigDecimalArray7[0] = bigDecimal6;
      bigDecimalArray7[1] = bigDecimal4;
      bigDecimalArray7[2] = bigDecimal5;
      bigDecimalArray7[3] = bigDecimal4;
      bigDecimalArray7[4] = bigDecimal11;
      BigDecimal bigDecimal13 = new BigDecimal(bigInteger0);
      bigDecimalArray7[5] = bigDecimal13;
      bigDecimalArray7[6] = bigDecimal8;
      bigDecimalArray7[7] = bigDecimal4;
      bigDecimalArray0[6] = bigDecimalArray7;
      BigDecimal[] bigDecimalArray8 = new BigDecimal[8];
      bigDecimalArray8[0] = bigDecimal3;
      bigDecimalArray8[1] = bigDecimal7;
      bigDecimalArray8[2] = bigDecimal11;
      BigDecimal bigDecimal14 = new BigDecimal(bigInteger0);
      bigDecimalArray8[3] = bigDecimal14;
      bigDecimalArray8[4] = bigDecimal1;
      bigDecimalArray8[5] = bigDecimal9;
      bigDecimalArray8[6] = bigDecimal4;
      bigDecimalArray8[7] = bigDecimal10;
      bigDecimalArray0[7] = bigDecimalArray8;
      BigDecimal[] bigDecimalArray9 = new BigDecimal[1];
      bigDecimalArray9[0] = bigDecimal11;
      bigDecimalArray0[8] = bigDecimalArray9;
      BigMatrixImpl bigMatrixImpl1 = null;
      try {
        bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(116, 116);
      try { 
        bigMatrixImpl0.getRow((-1337));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[][] stringArray0 = new String[1][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "7h{:AvZ1h[?U";
      stringArray1[2] = "E!S#J7";
      stringArray1[3] = "org.apache.commons.math.linear.MatrixIndexException";
      stringArray1[4] = ".m_c4H";
      stringArray0[0] = stringArray1;
      double[][] doubleArray0 = new double[0][5];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      bigDecimalArray0[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      bigDecimal3.toBigInteger();
      bigDecimalArray0[3] = bigDecimal3;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getRowAsDoubleArray((-945));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      int[] intArray0 = new int[3];
      intArray0[0] = 981;
      intArray0[1] = 827;
      intArray0[2] = (-3747);
      int[] intArray1 = new int[0];
      try { 
        bigMatrix0.getSubMatrix(intArray0, intArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.hashCode();
      bigMatrixImpl0.getDataAsDoubleArray();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimal1.add(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      bigMatrixImpl0.multiply(bigMatrixImpl1);
      // Undeclared exception!
      try { 
        bigDecimal0.divide(bigDecimal1, 1445);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrix bigMatrix1 = bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrix1.add((BigMatrix) bigMatrixImpl0);
      bigMatrixImpl1.solve(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      int int0 = 1131;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) 1131;
      doubleArray0[2] = (double) 1131;
      doubleArray0[3] = (double) 1131;
      doubleArray0[4] = (double) 1131;
      doubleArray0[5] = (double) 1131;
      bigMatrixImpl1.getLUMatrix();
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getDataAsDoubleArray();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigMatrixImpl0.scalarMultiply(bigDecimal0);
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrix bigMatrix1 = bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      bigDecimal0.floatValue();
      bigMatrix0.preMultiply(bigDecimalArray0);
      try { 
        bigMatrix1.getColumnAsDoubleArray((-2534));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimal0.signum();
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      try { 
        bigMatrix0.getRowMatrix(1508);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      bigMatrixImpl1.getDataAsDoubleArray();
      bigMatrixImpl1.subtract(bigMatrixImpl0);
      bigMatrixImpl1.add((BigMatrix) bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      int int0 = 1131;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) 1131;
      doubleArray0[2] = (double) 1131;
      doubleArray0[3] = (double) 1131;
      doubleArray0[4] = (double) 1131;
      doubleArray0[5] = (double) 1131;
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][6];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray1[1] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimalArray1[2] = bigDecimal1;
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.hashCode();
      bigMatrixImpl0.getDataAsDoubleArray();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarMultiply(bigDecimal0);
      bigMatrixImpl0.getDeterminant();
      try { 
        bigMatrix0.getSubMatrix(556, 556, 432, 534);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getLUMatrix();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      
      bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      BigDecimal bigDecimal1 = bigMatrix0.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals((byte)2, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrix bigMatrix1 = bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigMatrix1.solve((BigMatrix) bigMatrixImpl0);
      bigDecimal0.negate(mathContext0);
      bigMatrix1.operate(bigDecimalArray0);
      try { 
        bigMatrix1.getColumnAsDoubleArray((-2534));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 3793;
      int int1 = 447;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3793, 447);
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigDecimal[][] bigDecimalArrayArray0 = null;
      int int0 = (-1);
      int int1 = (-1128);
      int int2 = (-1);
      try { 
        bigMatrixImpl0.getColumn((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      MathContext mathContext0 = new MathContext(1);
      BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((double) 1);
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.preMultiply(bigDecimalArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1890;
      intArray0[4] = 1;
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[2][1];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1, true);
      try { 
        bigMatrixImpl0.add(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      bigMatrix0.getColumnMatrix(0);
      bigMatrixImpl1.getDataAsDoubleArray();
      bigMatrixImpl1.subtract(bigMatrixImpl0);
      bigMatrixImpl1.add((BigMatrix) bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      int int0 = 1131;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) 1131;
      doubleArray0[2] = (double) 1131;
      doubleArray0[3] = (double) 1131;
      doubleArray0[4] = (double) 1131;
      doubleArray0[5] = (double) 1131;
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
      bigDecimal0.negate(mathContext0);
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl1.operate(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray2 = new BigDecimal[5][3];
      bigDecimalArray2[0] = bigDecimalArray0;
      bigDecimalArray2[1] = bigDecimalArray0;
      bigDecimalArray2[2] = bigDecimalArray1;
      bigDecimalArray2[3] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[3];
      bigDecimalArray3[0] = bigDecimal0;
      bigDecimalArray3[1] = bigDecimal0;
      bigDecimalArray3[2] = bigDecimal0;
      bigDecimalArray2[4] = bigDecimalArray3;
      try { 
        bigMatrixImpl1.setSubMatrix(bigDecimalArray2, 511, (-1607));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getSubMatrix(1, 1, 1, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      MathContext mathContext0 = new MathContext(1);
      BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((double) 1);
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 3826;
      int int1 = 453;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3826, 453);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(437);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.hashCode();
      bigMatrixImpl0.add((BigMatrix) bigMatrixImpl1);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[5][9];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      try { 
        bigMatrixImpl1.setSubMatrix(bigDecimalArray1, 0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      bigMatrix0.getColumnMatrix(0);
      bigMatrixImpl1.getDataAsDoubleArray();
      BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl1.subtract(bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][4];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      bigDecimalArray1[5] = bigDecimalArray0;
      bigDecimalArray1[6] = bigDecimalArray0;
      bigDecimalArray1[7] = bigDecimalArray0;
      bigMatrixImpl2.lu = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.add((BigMatrix) bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray2 = new BigDecimal[8][8];
      bigMatrixImpl0.lu = bigDecimalArray2;
      bigDecimalArray2[1] = bigDecimalArray2[0];
      bigDecimalArray2[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[1];
      Random.setNextRandom(0);
      try { 
        bigMatrixImpl3.getSubMatrix(0, 0, (-142), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrix0.getColumnMatrix(0);
      bigMatrixImpl2.lu = null;
      bigMatrixImpl1.getDataAsDoubleArray();
      bigMatrixImpl1.subtract(bigMatrixImpl0);
      bigMatrixImpl1.add((BigMatrix) bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][8];
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray1[0];
      bigDecimalArray1[2] = bigDecimalArray0;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      bigDecimalArray2[0] = bigDecimal0;
      int int0 = 1131;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) 1131;
      doubleArray0[2] = (double) 1131;
      doubleArray0[3] = (double) 1131;
      doubleArray0[4] = (double) 1131;
      BigMatrixImpl bigMatrixImpl3 = new BigMatrixImpl(1131, 1131);
      try { 
        bigMatrixImpl2.solve((BigMatrix) bigMatrixImpl3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrix0.solve((BigMatrix) bigMatrixImpl0);
      bigMatrix0.getColumnMatrix(0);
      bigMatrixImpl1.getDataAsDoubleArray();
      bigMatrixImpl1.subtract(bigMatrixImpl0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      bigMatrixImpl1.add((BigMatrix) bigMatrixImpl0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[8][8];
      bigMatrixImpl0.lu = bigDecimalArray1;
      bigDecimalArray1[1] = bigDecimalArray1[0];
      bigDecimalArray1[2] = bigDecimalArray0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) 1131;
      doubleArray0[2] = (double) 1131;
      doubleArray0[3] = (double) 1131;
      doubleArray0[4] = (double) 1131;
      doubleArray0[5] = (double) 1131;
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1569, 1569);
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      int int0 = 1;
      MathContext mathContext0 = new MathContext(1);
      BigDecimal bigDecimal0 = new BigDecimal(1, mathContext0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((double) 1);
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal(698.4);
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getSubMatrix(1, 1, 2318, 2318);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[7][0];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      bigDecimalArray1[5] = bigDecimalArray0;
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      bigDecimal0.setScale((-2573), roundingMode0);
      bigDecimalArray1[6] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.transpose();
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigMatrixImpl bigMatrixImpl4 = (BigMatrixImpl)bigMatrixImpl2.solve((BigMatrix) bigMatrixImpl0);
      bigDecimal0.negate(mathContext0);
      bigMatrixImpl2.operate(bigDecimalArray0);
      bigMatrixImpl0.subtract(bigMatrixImpl1);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      
      Random.setNextRandom(0);
      BigMatrixImpl bigMatrixImpl5 = (BigMatrixImpl)bigMatrixImpl3.multiply((BigMatrix) bigMatrixImpl0);
      bigMatrixImpl4.getColumn(0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl5));
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-888.3996244625);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1853.6545007124);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1853.6545007124);
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-888.3996244625));
      bigMatrixImpl1.isSingular();
      bigMatrixImpl1.scalarAdd(bigDecimal0);
      bigMatrixImpl0.equals(bigMatrixImpl1);
      Random.setNextRandom((-1084));
      try { 
        bigMatrixImpl0.getColumn(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.ulp();
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal0;
      bigDecimalArray0[2] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getRowAsDoubleArray(0);
      int int0 = 3820;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve((BigMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      bigDecimalArray0[1] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getDataAsDoubleArray();
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.add((BigMatrix) bigMatrixImpl1);
      String string0 = "";
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      BigMatrixImpl bigMatrixImpl2 = new BigMatrixImpl(2409, 2409);
      try { 
        bigMatrixImpl1.subtract(bigMatrixImpl2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.transpose();
      MathContext mathContext0 = MathContext.DECIMAL64;
      bigMatrixImpl2.solve((BigMatrix) bigMatrixImpl0);
      bigDecimal0.negate(mathContext0);
      bigMatrixImpl2.operate(bigDecimalArray0);
      bigMatrixImpl0.subtract(bigMatrixImpl1);
      Random.setNextRandom(0);
      bigMatrixImpl2.getColumnAsDoubleArray(0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      MathContext mathContext0 = new MathContext(21);
      BigDecimal bigDecimal0 = new BigDecimal(21, mathContext0);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[1] = bigDecimal1;
      bigDecimal0.abs();
      BigDecimal bigDecimal2 = new BigDecimal((double) 21);
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.preMultiply(bigDecimalArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 21;
      intArray0[1] = 21;
      intArray0[2] = 21;
      intArray0[3] = 1890;
      intArray0[4] = 21;
      BigMatrix bigMatrix0 = bigMatrixImpl0.transpose();
      try { 
        bigMatrixImpl0.add(bigMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-888.3996244625);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1853.6545007124);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1853.6545007124);
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-888.3996244625));
      bigMatrixImpl1.isSingular();
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.scalarAdd(bigDecimal0);
      bigMatrixImpl2.equals(bigMatrixImpl1);
      try { 
        bigMatrixImpl0.getColumn(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      String string0 = "matrix is singular";
      String string1 = "_3X;SD";
      bigMatrixImpl0.equals("_3X;SD");
      String[] stringArray0 = new String[6];
      bigMatrixImpl0.toString();
      stringArray0[0] = "matrix is singular";
      stringArray0[1] = "S=>i<{=B";
      stringArray0[2] = "matrix is singular";
      stringArray0[3] = "matrix is singular";
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[2];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ZERO;
      bigDecimalArray1[1] = bigDecimal1;
      bigDecimalArray0[0] = bigDecimalArray1;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 3801, 3801);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[5][0];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal((-2247.151971675242));
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[2];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[8];
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimalArray3[0] = bigDecimal1;
      bigDecimalArray3[1] = bigDecimal0;
      bigDecimalArray3[2] = bigDecimal0;
      bigDecimalArray3[3] = bigDecimal0;
      bigDecimalArray3[4] = bigDecimal0;
      bigDecimalArray3[5] = bigDecimal0;
      BigDecimal bigDecimal2 = new BigDecimal(1L);
      bigDecimalArray3[6] = bigDecimal2;
      bigDecimalArray3[7] = bigDecimal0;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[2];
      BigDecimal bigDecimal3 = new BigDecimal(3725);
      bigDecimalArray4[0] = bigDecimal3;
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      bigDecimalArray4[1] = bigDecimal4;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[3];
      bigDecimalArray5[0] = bigDecimal1;
      BigDecimal bigDecimal5 = new BigDecimal(0L);
      bigDecimalArray5[1] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal(0L);
      bigDecimalArray5[2] = bigDecimal6;
      bigDecimalArray0[4] = bigDecimalArray5;
      bigMatrixImpl1.data = bigDecimalArray0;
      bigMatrixImpl0.equals(bigMatrixImpl1);
      try { 
        bigMatrixImpl0.getColumn(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-3804.598402);
      doubleArray2[1] = (-1.0);
      doubleArray0[1] = doubleArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      bigMatrixImpl0.getLUMatrix();
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(0L);
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal((-3363));
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = new BigDecimal(0L);
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = BigMatrixImpl.ZERO;
      bigDecimalArray1[6] = bigDecimal6;
      BigDecimal bigDecimal7 = BigMatrixImpl.ZERO;
      bigDecimalArray1[7] = bigDecimal7;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[2];
      bigDecimalArray2[0] = bigDecimal7;
      bigDecimalArray2[1] = bigDecimal6;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[7];
      bigDecimalArray3[0] = bigDecimal4;
      bigDecimalArray3[1] = bigDecimal2;
      bigDecimalArray3[2] = bigDecimal7;
      bigDecimalArray3[3] = bigDecimal6;
      bigDecimalArray3[4] = bigDecimal5;
      bigDecimalArray3[5] = bigDecimal4;
      bigDecimalArray3[6] = bigDecimal5;
      bigDecimalArray0[2] = bigDecimalArray3;
      BigDecimal[] bigDecimalArray4 = new BigDecimal[9];
      bigDecimalArray4[0] = bigDecimal0;
      bigDecimalArray4[1] = bigDecimal4;
      bigDecimalArray4[2] = bigDecimal7;
      bigDecimalArray4[3] = bigDecimal1;
      bigDecimalArray4[4] = bigDecimal0;
      bigDecimalArray4[5] = bigDecimal4;
      BigDecimal bigDecimal8 = new BigDecimal(0.0);
      bigDecimalArray4[6] = bigDecimal8;
      bigDecimalArray4[7] = bigDecimal3;
      bigDecimalArray4[8] = bigDecimal4;
      bigDecimalArray0[3] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[5];
      bigDecimalArray5[0] = bigDecimal8;
      bigDecimalArray5[1] = bigDecimal0;
      bigDecimalArray5[2] = bigDecimal8;
      bigDecimalArray5[3] = bigDecimal6;
      bigDecimalArray5[4] = bigDecimal4;
      bigDecimalArray0[4] = bigDecimalArray5;
      BigDecimal[] bigDecimalArray6 = new BigDecimal[5];
      bigDecimalArray6[0] = bigDecimal7;
      bigDecimalArray6[1] = bigDecimal3;
      bigDecimalArray6[2] = bigDecimal8;
      bigDecimalArray6[3] = bigDecimal7;
      bigDecimalArray6[4] = bigDecimal0;
      bigDecimalArray0[5] = bigDecimalArray6;
      BigDecimal[] bigDecimalArray7 = new BigDecimal[2];
      bigDecimalArray7[0] = bigDecimal7;
      bigDecimalArray7[1] = bigDecimal0;
      bigDecimalArray0[6] = bigDecimalArray7;
      BigMatrixImpl bigMatrixImpl1 = null;
      try {
        bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.multiply(bigDecimal0, mathContext0);
      bigMatrixImpl0.getDataAsDoubleArray();
      bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
      int[] intArray0 = new int[2];
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[2][9];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal(0.0);
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = new BigDecimal(0.0);
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = BigMatrixImpl.ZERO;
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigMatrixImpl.ZERO;
      bigDecimalArray1[5] = bigDecimal5;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[2];
      bigDecimalArray2[0] = bigDecimal0;
      bigDecimalArray2[1] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[7];
      bigDecimalArray3[0] = bigDecimal2;
      bigDecimalArray3[1] = bigDecimal3;
      bigDecimalArray3[2] = bigDecimal2;
      bigDecimalArray3[3] = bigDecimal5;
      bigDecimalArray3[4] = bigDecimal2;
      bigDecimalArray3[5] = bigDecimal1;
      bigDecimalArray3[6] = bigDecimal4;
      bigDecimalArray0[2] = bigDecimalArray3;
      bigMatrixImpl1.data = bigDecimalArray0;
      bigMatrixImpl0.equals(bigMatrixImpl1);
      try { 
        bigMatrixImpl0.getColumn(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }
}
