/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 20:12:09 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class BigMatrixImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.copy();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      try { 
        bigMatrixImpl0.getEntryAsDouble((-1061), (-1061));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      
      bigMatrixImpl0.setRoundingMode(0);
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(64, int0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.setScale((-277));
      assertEquals((-277), bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.solve(bigDecimalArray0);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      int int0 = bigMatrixImpl0.getRoundingMode();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, int0);
      assertEquals(6, bigMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(1750, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[6][9];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 0, 714);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][6];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[7][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[][] stringArray0 = new String[0][4];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[][] stringArray0 = new String[6][4];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[][] stringArray0 = new String[3][7];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[][] stringArray0 = new String[3][7];
      String[] stringArray1 = new String[3];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int[] intArray0 = new int[6];
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      try { 
        bigMatrixImpl0.add(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[] bigDecimalArray1 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      try { 
        bigMatrixImpl1.add((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.add((BigMatrix) bigMatrixImpl0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      try { 
        bigMatrixImpl1.subtract((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(611, 1);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[12][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = bigMatrixImpl0.getNorm();
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.multiply((BigMatrix) bigMatrixImpl0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      double[][] doubleArray0 = bigMatrixImpl0.getDataAsDoubleArray();
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      try { 
        bigMatrixImpl0.getSubMatrix((-1780), 435, (-2357), (-2357));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      try { 
        bigMatrixImpl0.getSubMatrix((int) (short)10, (-2505), 9, (-2505));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getSubMatrix(270, 270, 1822, 2385);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      try { 
        bigMatrixImpl0.getSubMatrix(0, 0, (-1), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getSubMatrix(0, 0, 2492, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(19, 19);
      try { 
        bigMatrixImpl0.getSubMatrix(4, 19, 1649, 1649);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      int[] intArray0 = new int[0];
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[6][7];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, (-761), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[3][3];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 3180, (-698));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][9];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][5];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[9][7];
      bigDecimalArray1[0] = bigDecimalArray0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 2284, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[8][6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 1, 2415);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][1];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 0, 583);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getRowMatrix(0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      try { 
        bigMatrixImpl0.getRowMatrix(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(6, bigMatrixImpl0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, true);
      try { 
        bigMatrixImpl0.getColumnMatrix(189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      bigMatrixImpl0.getRow(0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getRow((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      try { 
        bigMatrixImpl0.getRowAsDoubleArray((-875));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      
      bigMatrixImpl0.getColumn(1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[][] doubleArray0 = new double[12][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      try { 
        bigMatrixImpl0.getColumn((-1364));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      bigMatrixImpl0.getColumnAsDoubleArray(0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getLUMatrix();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertEquals((byte)10, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][5];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(64, 2313);
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3535, 3535);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(4117, 7);
      double[] doubleArray0 = new double[1];
      try { 
        bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray1[1] = bigDecimalArray1[0];
      bigDecimalArray1[2] = bigDecimalArray1[0];
      bigDecimalArray1[3] = bigDecimalArray1[2];
      bigDecimalArray1[4] = bigDecimalArray1[1];
      bigDecimalArray1[5] = bigDecimalArray1[4];
      bigDecimalArray1[6] = bigDecimalArray1[1];
      bigDecimalArray1[7] = bigDecimalArray1[1];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigDecimal[] bigDecimalArray2 = bigMatrixImpl0.operate(bigDecimalArray1);
      assertEquals(1, bigDecimalArray2.length);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[] bigDecimalArray1 = new BigDecimal[3];
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal((-14));
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray1.length);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      double[] doubleArray0 = new double[4];
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[6][3];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      bigDecimalArray1[5] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[9];
      BigDecimal bigDecimal0 = new BigDecimal(2524);
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[9][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      bigDecimalArray1[4] = bigDecimalArray0;
      bigDecimalArray1[5] = bigDecimalArray0;
      bigDecimalArray1[6] = bigDecimalArray0;
      bigDecimalArray1[7] = bigDecimalArray0;
      bigDecimalArray1[8] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      String string0 = bigMatrixImpl0.toString();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals("BigMatrixImpl{}", string0);
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2, 2);
      String string0 = bigMatrixImpl0.toString();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals("BigMatrixImpl{{null,null},{null,null}}", string0);
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      Object object0 = new Object();
      boolean boolean0 = bigMatrixImpl0.equals(object0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][3];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getLUMatrix();
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, false);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(boolean0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[4][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1, false);
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(boolean0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      bigMatrixImpl0.hashCode();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getLUMatrix();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }
}
